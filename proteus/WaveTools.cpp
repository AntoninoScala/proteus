/* Generated by Cython 0.25.2 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_25_2"
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x03030000 || (PY_MAJOR_VERSION == 2 && PY_VERSION_HEX >= 0x02070000)
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_FASTCALL
  #define METH_FASTCALL 0x80
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject **args,
                                              Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__WaveTools
#define __PYX_HAVE_API__WaveTools
#include <math.h>
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include "numpy/arrayobject.h"
#include "numpy/ufuncobject.h"
#include "WaveTools.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER) && defined (_M_X64)
    #define __Pyx_sst_abs(value) _abs64(value)
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "proteus/WaveTools.py",
  "proteus/WaveTools.pxd",
  "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd",
  "stringsource",
  "darwin/lib/python2.7/site-packages/Cython/Includes/cpython/type.pxd",
};

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":725
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":726
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":727
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":728
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":732
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":733
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":734
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":735
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":739
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":740
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":749
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":750
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":751
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":753
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":754
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":755
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":757
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":758
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":760
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":761
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":762
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);


/*--- Type declarations ---*/
struct __pyx_obj_9WaveTools_SolitaryWave;
struct __pyx_obj_9WaveTools_MonochromaticWaves;
struct __pyx_obj_9WaveTools_RandomWaves;
struct __pyx_obj_9WaveTools_MultiSpectraRandomWaves;
struct __pyx_obj_9WaveTools_DirectionalWaves;
struct __pyx_obj_9WaveTools_TimeSeries;
struct __pyx_obj_9WaveTools_RandomNLWaves;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":764
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":765
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":766
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":768
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;
struct __pyx_defaults;
typedef struct __pyx_defaults __pyx_defaults;
struct __pyx_defaults1;
typedef struct __pyx_defaults1 __pyx_defaults1;

/* "WaveTools.pxd":31
 * 
 * # pointer to eta function
 * ctypedef double (*cfeta) (MonochromaticWaves, double* , double )             # <<<<<<<<<<<<<<
 * 
 * # pointer to velocity function
 */
typedef double (*__pyx_t_9WaveTools_cfeta)(struct __pyx_obj_9WaveTools_MonochromaticWaves *, double *, double);

/* "WaveTools.pxd":34
 * 
 * # pointer to velocity function
 * ctypedef void (*cfvel) (MonochromaticWaves, double*, double* , double )             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef void (*__pyx_t_9WaveTools_cfvel)(struct __pyx_obj_9WaveTools_MonochromaticWaves *, double *, double *, double);

/* "WaveTools.pxd":154
 * 
 * # pointer to eta function
 * ctypedef double (*cfeta2) (TimeSeries, double* , double )             # <<<<<<<<<<<<<<
 * 
 * # pointer to velocity function
 */
typedef double (*__pyx_t_9WaveTools_cfeta2)(struct __pyx_obj_9WaveTools_TimeSeries *, double *, double);

/* "WaveTools.pxd":157
 * 
 * # pointer to velocity function
 * ctypedef void (*cfvel2) (TimeSeries, double*, double* , double )             # <<<<<<<<<<<<<<
 * 
 * cdef class  TimeSeries:
 */
typedef void (*__pyx_t_9WaveTools_cfvel2)(struct __pyx_obj_9WaveTools_TimeSeries *, double *, double *, double);
struct __pyx_defaults {
  PyObject *__pyx_arg_Lgen;
};
struct __pyx_defaults1 {
  PyObject *__pyx_arg_Lgen;
};

/* "WaveTools.pxd":37
 * 
 * 
 * cdef class  SolitaryWave:             # <<<<<<<<<<<<<<
 *     cdef double H,gAbs,c,mwl,depth,K,d2,d3
 *     cdef np.ndarray g,waveDir,vDir,trans
 */
struct __pyx_obj_9WaveTools_SolitaryWave {
  PyObject_HEAD
  double H;
  double gAbs;
  double c;
  double mwl;
  double depth;
  double K;
  double d2;
  double d3;
  PyArrayObject *g;
  PyArrayObject *waveDir;
  PyArrayObject *vDir;
  PyArrayObject *trans;
  bool fast;
};


/* "WaveTools.pxd":42
 *     cdef bool fast
 * 
 * cdef class  MonochromaticWaves:             # <<<<<<<<<<<<<<
 *     cdef bool fast
 *     cdef np.ndarray g,waveDir,vDir,Ycoeff,Bcoeff,kDir,tanhF,mV
 */
struct __pyx_obj_9WaveTools_MonochromaticWaves {
  PyObject_HEAD
  struct __pyx_vtabstruct_9WaveTools_MonochromaticWaves *__pyx_vtab;
  bool fast;
  PyArrayObject *g;
  PyArrayObject *waveDir;
  PyArrayObject *vDir;
  PyArrayObject *Ycoeff;
  PyArrayObject *Bcoeff;
  PyArrayObject *kDir;
  PyArrayObject *tanhF;
  PyArrayObject *mV;
  double gAbs;
  double phi;
  double depth;
  double omega;
  double k;
  double phi0;
  double tanhL;
  double amplitude;
  int Nf;
  double *kDir_;
  double *waveDir_;
  double *vDir_;
  double *mV_;
  double *Ycoeff_;
  double *Bcoeff_;
  double *tanhF_;
  double kDir_c[3];
  double waveDir_c[3];
  double vDir_c[3];
  double mV_c[3];
  double Ycoeff_c[0x3E8];
  double Bcoeff_c[0x3E8];
  double tanh_c[0x3E8];
  double wavelength;
  double mwl;
  __pyx_t_9WaveTools_cfeta _cpp_eta;
  __pyx_t_9WaveTools_cfvel _cpp_u;
  PyObject *waveType;
};


/* "WaveTools.pxd":72
 *     cdef void uFenton(self, double* U, double* x, double t)
 * 
 * cdef class RandomWaves:             # <<<<<<<<<<<<<<
 *     cdef bool fast
 *     cdef double* waveDir_
 */
struct __pyx_obj_9WaveTools_RandomWaves {
  PyObject_HEAD
  struct __pyx_vtabstruct_9WaveTools_RandomWaves *__pyx_vtab;
  bool fast;
  double *waveDir_;
  double *vDir_;
  double *tanh_;
  double *ai_;
  double *phi_;
  double *omega_;
  double *kDir_;
  double *ki_;
  double waveDir_c[3];
  double vDir_c[3];
  double kDir_c[0x7530];
  double omega_c[0x2710];
  double ki_c[0x2710];
  double ai_c[0x2710];
  double tanh_c[0x2710];
  double phi_c[0x2710];
  double mwl;
  double depth;
  double gAbs;
  double Tlag;
  double Hs;
  double Tp;
  double fp;
  double bandFactor;
  double df;
  int N;
  PyArrayObject *fi;
  PyArrayObject *fim;
  PyArrayObject *Si_Jm;
  PyArrayObject *ki;
  PyArrayObject *omega;
  PyArrayObject *tanhF;
  PyArrayObject *g;
  PyArrayObject *waveDir;
  PyArrayObject *vDir;
  PyArrayObject *kDir;
  PyArrayObject *ai;
  PyObject *phi;
};


/* "WaveTools.pxd":100
 * 
 * 
 * cdef class MultiSpectraRandomWaves:             # <<<<<<<<<<<<<<
 *     cdef bool fast
 *     cdef double gAbs
 */
struct __pyx_obj_9WaveTools_MultiSpectraRandomWaves {
  PyObject_HEAD
  struct __pyx_vtabstruct_9WaveTools_MultiSpectraRandomWaves *__pyx_vtab;
  bool fast;
  double gAbs;
  int Nall;
  int N;
  PyArrayObject *g;
  PyArrayObject *vDir;
  PyArrayObject *waveDir;
  PyArrayObject *omegaM;
  PyArrayObject *phiM;
  PyArrayObject *kiM;
  PyArrayObject *kDirM;
  PyArrayObject *tanhFM;
  PyArrayObject *aiM;
  double *vDir_;
  double *omegaM_;
  double *phiM_;
  double *kiM_;
  double *kDirM_;
  double *tanhM_;
  double *waveDirM_;
  double *aiM_;
  double vDir_c[3];
  double kDir_cM[0x7530];
  double waveDir_cM[0x7530];
  double omega_cM[0x2710];
  double ki_cM[0x2710];
  double ai_cM[0x2710];
  double tanh_cM[0x2710];
  double phi_cM[0x2710];
  double mwl;
  double depth;
};


/* "WaveTools.pxd":126
 *     cdef void _cpp_u(self, double* U, double* x, double t)
 * 
 * cdef class DirectionalWaves:             # <<<<<<<<<<<<<<
 *     cdef bool fast
 *     cdef double gAbs
 */
struct __pyx_obj_9WaveTools_DirectionalWaves {
  PyObject_HEAD
  struct __pyx_vtabstruct_9WaveTools_DirectionalWaves *__pyx_vtab;
  bool fast;
  double gAbs;
  int Nall;
  int Mtot;
  int N;
  PyArrayObject *vDir;
  PyArrayObject *omega;
  PyArrayObject *tanh;
  PyArrayObject *waveDir0;
  PyArrayObject *waveDirs;
  PyArrayObject *phiDirs;
  PyArrayObject *aiDirs;
  PyArrayObject *ki;
  PyArrayObject *kDirs;
  PyArrayObject *tanhF;
  double *vDir_;
  double *omega_;
  double *phi_;
  double *ki_;
  double *kDir_;
  double *tanh_;
  double *waveDir_;
  double *ai_;
  double vDir_c[3];
  double kDir_c[0x493E0];
  double waveDir_c[0x493E0];
  double omega_c[0x186A0];
  double ki_c[0x186A0];
  double ai_c[0x186A0];
  double tanh_c[0x186A0];
  double phi_c[0x186A0];
  double mwl;
  double depth;
};


/* "WaveTools.pxd":159
 * ctypedef void (*cfvel2) (TimeSeries, double*, double* , double )
 * 
 * cdef class  TimeSeries:             # <<<<<<<<<<<<<<
 *     cdef bool fast,rec_direct
 *     cdef np.ndarray g,waveDir,vDir,x0,kDir,tanhF,time,etaS,ai,omega,phi,ki
 */
struct __pyx_obj_9WaveTools_TimeSeries {
  PyObject_HEAD
  struct __pyx_vtabstruct_9WaveTools_TimeSeries *__pyx_vtab;
  bool fast;
  bool rec_direct;
  PyArrayObject *g;
  PyArrayObject *waveDir;
  PyArrayObject *vDir;
  PyArrayObject *x0;
  PyArrayObject *kDir;
  PyArrayObject *tanhF;
  PyArrayObject *time;
  PyArrayObject *etaS;
  PyArrayObject *ai;
  PyArrayObject *omega;
  PyArrayObject *phi;
  PyArrayObject *ki;
  double gAbs;
  double depth;
  double Tm;
  double overlap;
  double cutoff;
  double setup;
  double handover;
  double Twindow;
  double Tlag;
  double Toverlap;
  double dt;
  double t0;
  double tlength;
  int N;
  int Nall;
  int Nf;
  int Nwaves;
  int Nwindows;
  PyObject *windows_handover;
  PyObject *windows_rec;
  PyObject *decompose_window;
  double *kDir_;
  double *waveDir_;
  double *vDir_;
  double *tanh_;
  double *whand_;
  double *ai_;
  double *omega_;
  double *phi_;
  double *ki_;
  double *T0_;
  double x0_[3];
  double kDir_c[0x2DC6C0];
  double ki_c[0xF4240];
  double ai_c[0xF4240];
  double omega_c[0xF4240];
  double phi_c[0xF4240];
  double tanh_c[0xF4240];
  double waveDir_c[3];
  double vDir_c[3];
  double x0_c[3];
  double whand_c[0xF4240];
  double T0[0xF4240];
  double wavelength;
  double mwl;
  PyObject *eta;
  PyObject *u;
  __pyx_t_9WaveTools_cfeta2 _cpp_eta;
  __pyx_t_9WaveTools_cfvel2 _cpp_u;
};


/* "WaveTools.pxd":197
 *     cdef void _cpp_uWindow(self, double* U, double* x, double t)
 * 
 * cdef class RandomNLWaves:             # <<<<<<<<<<<<<<
 *     cdef bool fast
 *     cdef np.ndarray omega,ki,kDir,phi,tanhKd,sinhKd,waveDir,ai
 */
struct __pyx_obj_9WaveTools_RandomNLWaves {
  PyObject_HEAD
  struct __pyx_vtabstruct_9WaveTools_RandomNLWaves *__pyx_vtab;
  bool fast;
  PyArrayObject *omega;
  PyArrayObject *ki;
  PyArrayObject *kDir;
  PyArrayObject *phi;
  PyArrayObject *tanhKd;
  PyArrayObject *sinhKd;
  PyArrayObject *waveDir;
  PyArrayObject *ai;
  int N;
  double depth;
  double gAbs;
  double *tanhKd_;
  double *sinhKd_;
  double *ai_;
  double *phi_;
  double *omega_;
  double *kDir_;
  double *ki_;
  double kDir_c[0x7530];
  double omega_c[0x2710];
  double ki_c[0x2710];
  double ai_c[0x2710];
  double tanh_c[0x2710];
  double sinh_c[0x2710];
  double phi_c[0x2710];
  PyObject *eta;
  PyObject *u;
  PyObject *eta_linear;
};



/* "WaveTools.py":857
 * 
 * 
 * class  MonochromaticWaves:             # <<<<<<<<<<<<<<
 *     """
 *     This class is used for generating regular waves in both linear and nonlinear regimes. See Dean and Dalrymple 1994 for equations.
 */

struct __pyx_vtabstruct_9WaveTools_MonochromaticWaves {
  double (*etaLinear)(struct __pyx_obj_9WaveTools_MonochromaticWaves *, double *, double);
  double (*etaFenton)(struct __pyx_obj_9WaveTools_MonochromaticWaves *, double *, double);
  void (*uLinear)(struct __pyx_obj_9WaveTools_MonochromaticWaves *, double *, double *, double);
  void (*uFenton)(struct __pyx_obj_9WaveTools_MonochromaticWaves *, double *, double *, double);
};
static struct __pyx_vtabstruct_9WaveTools_MonochromaticWaves *__pyx_vtabptr_9WaveTools_MonochromaticWaves;


/* "WaveTools.py":1077
 * 
 * 
 * class RandomWaves:             # <<<<<<<<<<<<<<
 *     """
 *     This class is used for generating plane random waves using linear reconstruction of components from a
 */

struct __pyx_vtabstruct_9WaveTools_RandomWaves {
  double (*_cpp_eta)(struct __pyx_obj_9WaveTools_RandomWaves *, double *, double);
  void (*_cpp_u)(struct __pyx_obj_9WaveTools_RandomWaves *, double *, double *, double);
};
static struct __pyx_vtabstruct_9WaveTools_RandomWaves *__pyx_vtabptr_9WaveTools_RandomWaves;


/* "WaveTools.py":1314
 * 
 * 
 * class MultiSpectraRandomWaves:             # <<<<<<<<<<<<<<
 *     """This class is used for generating random waves by combining
 *     multiple spectra with different distributions and directions
 */

struct __pyx_vtabstruct_9WaveTools_MultiSpectraRandomWaves {
  double (*_cpp_eta)(struct __pyx_obj_9WaveTools_MultiSpectraRandomWaves *, double *, double);
  void (*_cpp_u)(struct __pyx_obj_9WaveTools_MultiSpectraRandomWaves *, double *, double *, double);
};
static struct __pyx_vtabstruct_9WaveTools_MultiSpectraRandomWaves *__pyx_vtabptr_9WaveTools_MultiSpectraRandomWaves;


/* "WaveTools.py":1509
 * 
 * 
 * class DirectionalWaves:             # <<<<<<<<<<<<<<
 *     """
 *     This class is used for generating directional random waves using linear reconstruction of components from a
 */

struct __pyx_vtabstruct_9WaveTools_DirectionalWaves {
  double (*_cpp_eta)(struct __pyx_obj_9WaveTools_DirectionalWaves *, double *, double);
  void (*_cpp_u)(struct __pyx_obj_9WaveTools_DirectionalWaves *, double *, double *, double);
};
static struct __pyx_vtabstruct_9WaveTools_DirectionalWaves *__pyx_vtabptr_9WaveTools_DirectionalWaves;


/* "WaveTools.py":1752
 * 
 * 
 * class TimeSeries:             # <<<<<<<<<<<<<<
 *     """This class is used for generating waves from an arbirtrary free-surface elevation time series
 * 
 */

struct __pyx_vtabstruct_9WaveTools_TimeSeries {
  double (*_cpp_etaDirect)(struct __pyx_obj_9WaveTools_TimeSeries *, double *, double);
  double (*_cpp_etaWindow)(struct __pyx_obj_9WaveTools_TimeSeries *, double *, double);
  void (*_cpp_uDirect)(struct __pyx_obj_9WaveTools_TimeSeries *, double *, double *, double);
  void (*_cpp_uWindow)(struct __pyx_obj_9WaveTools_TimeSeries *, double *, double *, double);
};
static struct __pyx_vtabstruct_9WaveTools_TimeSeries *__pyx_vtabptr_9WaveTools_TimeSeries;


/* "WaveTools.py":2415
 * 
 * 
 * class RandomNLWaves:             # <<<<<<<<<<<<<<
 *     """
 *     This class is contains functions for calculating random waves with 2nd order corrections
 */

struct __pyx_vtabstruct_9WaveTools_RandomNLWaves {
  double (*_cpp_eta_2ndOrder)(struct __pyx_obj_9WaveTools_RandomNLWaves *, double *, double);
  double (*_cpp_eta_short)(struct __pyx_obj_9WaveTools_RandomNLWaves *, double *, double);
  double (*_cpp_eta_long)(struct __pyx_obj_9WaveTools_RandomNLWaves *, double *, double);
};
static struct __pyx_vtabstruct_9WaveTools_RandomNLWaves *__pyx_vtabptr_9WaveTools_RandomNLWaves;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* PyFloatBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_DivideObjC(PyObject *op1, PyObject *op2, double floatval, int inplace);
#else
#define __Pyx_PyFloat_DivideObjC(op1, op2, floatval, inplace)\
    ((inplace ? __Pyx_PyNumber_InPlaceDivide(op1, op2) : __Pyx_PyNumber_Divide(op1, op2)))
    #endif

/* GetModuleGlobalName.proto */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* SliceObject.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyFloatBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_DivideCObj(PyObject *op1, PyObject *op2, double floatval, int inplace);
#else
#define __Pyx_PyFloat_DivideCObj(op1, op2, floatval, inplace)\
    ((inplace ? __Pyx_PyNumber_InPlaceDivide(op1, op2) : __Pyx_PyNumber_Divide(op1, op2)))
    #endif

/* PyFloatBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_AddCObj(PyObject *op1, PyObject *op2, double floatval, int inplace);
#else
#define __Pyx_PyFloat_AddCObj(op1, op2, floatval, inplace)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* PyFloatBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_SubtractObjC(PyObject *op1, PyObject *op2, double floatval, int inplace);
#else
#define __Pyx_PyFloat_SubtractObjC(op1, op2, floatval, inplace)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* SliceObject.proto */
#define __Pyx_PyObject_DelSlice(obj, cstart, cstop, py_start, py_stop, py_slice, has_cstart, has_cstop, wraparound)\
    __Pyx_PyObject_SetSlice(obj, (PyObject*)NULL, cstart, cstop, py_start, py_stop, py_slice, has_cstart, has_cstop, wraparound)
static CYTHON_INLINE int __Pyx_PyObject_SetSlice(
        PyObject* obj, PyObject* value, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

/* pyobject_as_double.proto */
static double __Pyx__PyObject_AsDouble(PyObject* obj);
#if CYTHON_COMPILING_IN_PYPY
#define __Pyx_PyObject_AsDouble(obj)\
(likely(PyFloat_CheckExact(obj)) ? PyFloat_AS_DOUBLE(obj) :\
 likely(PyInt_CheckExact(obj)) ?\
 PyFloat_AsDouble(obj) : __Pyx__PyObject_AsDouble(obj))
#else
#define __Pyx_PyObject_AsDouble(obj)\
((likely(PyFloat_CheckExact(obj))) ?\
 PyFloat_AS_DOUBLE(obj) : __Pyx__PyObject_AsDouble(obj))
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_SubtractObjC(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* SetItemInt.proto */
#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) :\
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static CYTHON_INLINE int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o,n,NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = PyThreadState_GET();
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyFloatBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_EqObjC(PyObject *op1, PyObject *op2, double floatval, int inplace);
#else
#define __Pyx_PyFloat_EqObjC(op1, op2, floatval, inplace)\
    PyObject_RichCompare(op1, op2, Py_EQ)
    #endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* PyIntFromDouble.proto */
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE PyObject* __Pyx_PyInt_FromDouble(double value);
#else
#define __Pyx_PyInt_FromDouble(value) PyLong_FromDouble(value)
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_EqObjC(op1, op2, intval, inplace)\
    PyObject_RichCompare(op1, op2, Py_EQ)
    #endif

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* append.proto */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x);

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            PyObject* args = PyTuple_Pack(1, key);
            if (likely(args))
                PyErr_SetObject(PyExc_KeyError, args);
            Py_XDECREF(args);
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#else
    #define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#endif

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunction.proto */
#define __Pyx_CyFunction_USED 1
#include <structmember.h>
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_NewEx(ml, flags, qualname, self, module, globals, code)\
    __Pyx_CyFunction_New(__pyx_CyFunctionType, ml, flags, qualname, self, module, globals, code)
static PyObject *__Pyx_CyFunction_New(PyTypeObject *, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* CalculateMetaclass.proto */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

/* Py3ClassCreate.proto */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_Py_intptr_t(Py_intptr_t value);

/* Print.proto */
static int __Pyx_Print(PyObject*, PyObject *, int);
#if CYTHON_COMPILING_IN_PYPY || PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* PyIdentifierFromString.proto */
#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

/* ModuleImport.proto */
static PyObject *__Pyx_ImportModule(const char *name);

/* TypeImport.proto */
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static double __pyx_f_9WaveTools_18MonochromaticWaves_etaLinear(struct __pyx_obj_9WaveTools_MonochromaticWaves *__pyx_v_self, double *__pyx_v_x, double __pyx_v_t); /* proto*/
static double __pyx_f_9WaveTools_18MonochromaticWaves_etaFenton(struct __pyx_obj_9WaveTools_MonochromaticWaves *__pyx_v_self, double *__pyx_v_x, double __pyx_v_t); /* proto*/
static void __pyx_f_9WaveTools_18MonochromaticWaves_uLinear(struct __pyx_obj_9WaveTools_MonochromaticWaves *__pyx_v_self, double *__pyx_v_U, double *__pyx_v_x, double __pyx_v_t); /* proto*/
static void __pyx_f_9WaveTools_18MonochromaticWaves_uFenton(struct __pyx_obj_9WaveTools_MonochromaticWaves *__pyx_v_self, double *__pyx_v_U, double *__pyx_v_x, double __pyx_v_t); /* proto*/
static double __pyx_f_9WaveTools_11RandomWaves__cpp_eta(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self, double *__pyx_v_x, double __pyx_v_t); /* proto*/
static void __pyx_f_9WaveTools_11RandomWaves__cpp_u(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self, double *__pyx_v_U, double *__pyx_v_x, double __pyx_v_t); /* proto*/
static double __pyx_f_9WaveTools_23MultiSpectraRandomWaves__cpp_eta(struct __pyx_obj_9WaveTools_MultiSpectraRandomWaves *__pyx_v_self, double *__pyx_v_x, double __pyx_v_t); /* proto*/
static void __pyx_f_9WaveTools_23MultiSpectraRandomWaves__cpp_u(struct __pyx_obj_9WaveTools_MultiSpectraRandomWaves *__pyx_v_self, double *__pyx_v_U, double *__pyx_v_x, double __pyx_v_t); /* proto*/
static double __pyx_f_9WaveTools_16DirectionalWaves__cpp_eta(struct __pyx_obj_9WaveTools_DirectionalWaves *__pyx_v_self, double *__pyx_v_x, double __pyx_v_t); /* proto*/
static void __pyx_f_9WaveTools_16DirectionalWaves__cpp_u(struct __pyx_obj_9WaveTools_DirectionalWaves *__pyx_v_self, double *__pyx_v_U, double *__pyx_v_x, double __pyx_v_t); /* proto*/
static double __pyx_f_9WaveTools_10TimeSeries__cpp_etaDirect(struct __pyx_obj_9WaveTools_TimeSeries *__pyx_v_self, double *__pyx_v_x, double __pyx_v_t); /* proto*/
static void __pyx_f_9WaveTools_10TimeSeries__cpp_uDirect(struct __pyx_obj_9WaveTools_TimeSeries *__pyx_v_self, double *__pyx_v_U, double *__pyx_v_x, double __pyx_v_t); /* proto*/
static double __pyx_f_9WaveTools_10TimeSeries__cpp_etaWindow(struct __pyx_obj_9WaveTools_TimeSeries *__pyx_v_self, double *__pyx_v_x, double __pyx_v_t); /* proto*/
static void __pyx_f_9WaveTools_10TimeSeries__cpp_uWindow(struct __pyx_obj_9WaveTools_TimeSeries *__pyx_v_self, double *__pyx_v_U, double *__pyx_v_x, double __pyx_v_t); /* proto*/
static double __pyx_f_9WaveTools_13RandomNLWaves__cpp_eta_2ndOrder(struct __pyx_obj_9WaveTools_RandomNLWaves *__pyx_v_self, double *__pyx_v_x, double __pyx_v_t); /* proto*/
static double __pyx_f_9WaveTools_13RandomNLWaves__cpp_eta_short(struct __pyx_obj_9WaveTools_RandomNLWaves *__pyx_v_self, double *__pyx_v_x, double __pyx_v_t); /* proto*/
static double __pyx_f_9WaveTools_13RandomNLWaves__cpp_eta_long(struct __pyx_obj_9WaveTools_RandomNLWaves *__pyx_v_self, double *__pyx_v_x, double __pyx_v_t); /* proto*/

/* Module declarations from 'cython' */

/* Module declarations from 'libc.math' */

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;
static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *, char *, char *, int *); /*proto*/

/* Module declarations from 'libcpp' */

/* Module declarations from 'WaveTools' */
static PyTypeObject *__pyx_ptype_9WaveTools_SolitaryWave = 0;
static PyTypeObject *__pyx_ptype_9WaveTools_MonochromaticWaves = 0;
static PyTypeObject *__pyx_ptype_9WaveTools_RandomWaves = 0;
static PyTypeObject *__pyx_ptype_9WaveTools_MultiSpectraRandomWaves = 0;
static PyTypeObject *__pyx_ptype_9WaveTools_DirectionalWaves = 0;
static PyTypeObject *__pyx_ptype_9WaveTools_TimeSeries = 0;
static PyTypeObject *__pyx_ptype_9WaveTools_RandomNLWaves = 0;
static CYTHON_INLINE PyObject *__Pyx_carray_to_py_double(double *, Py_ssize_t); /*proto*/
static CYTHON_INLINE PyObject *__Pyx_carray_to_tuple_double(double *, Py_ssize_t); /*proto*/
#define __Pyx_MODULE_NAME "WaveTools"
int __pyx_module_is_main_WaveTools = 0;

/* Implementation of 'WaveTools' */
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_sum;
static PyObject *__pyx_builtin_max;
static PyObject *__pyx_builtin_zip;
static PyObject *__pyx_builtin_open;
static PyObject *__pyx_builtin_round;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_ImportError;
static const char __pyx_k_K[] = "K";
static const char __pyx_k_M[] = "M";
static const char __pyx_k_N[] = "N";
static const char __pyx_k_U[] = "U";
static const char __pyx_k_V[] = "V";
static const char __pyx_k_Z[] = "Z";
static const char __pyx_k_a[] = "a";
static const char __pyx_k_c[] = "c";
static const char __pyx_k_d[] = "d";
static const char __pyx_k_f[] = "f";
static const char __pyx_k_g[] = "g";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_j[] = "j";
static const char __pyx_k_k[] = "k";
static const char __pyx_k_l[] = "l";
static const char __pyx_k_r[] = "r";
static const char __pyx_k_s[] = "s";
static const char __pyx_k_t[] = "t";
static const char __pyx_k_u[] = "u";
static const char __pyx_k_w[] = "w";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_y[] = "y";
static const char __pyx_k_G0[] = "G0";
static const char __pyx_k_Hs[] = "Hs";
static const char __pyx_k_Nf[] = "Nf";
static const char __pyx_k_Np[] = "Np";
static const char __pyx_k_RW[] = "RW";
static const char __pyx_k_TS[] = "TS";
static const char __pyx_k_Tm[] = "Tm";
static const char __pyx_k_Tp[] = "Tp";
static const char __pyx_k_UH[] = "UH";
static const char __pyx_k_UV[] = "UV";
static const char __pyx_k_a1[] = "a1";
static const char __pyx_k_a2[] = "a2";
static const char __pyx_k_aR[] = "aR";
static const char __pyx_k_aa[] = "aa";
static const char __pyx_k_ai[] = "ai";
static const char __pyx_k_bj[] = "bj";
static const char __pyx_k_df[] = "df";
static const char __pyx_k_dt[] = "dt";
static const char __pyx_k_f0[] = "f0";
static const char __pyx_k_fi[] = "fi";
static const char __pyx_k_ho[] = "ho";
static const char __pyx_k_i1[] = "i1";
static const char __pyx_k_i2[] = "i2";
static const char __pyx_k_ii[] = "ii";
static const char __pyx_k_jj[] = "jj";
static const char __pyx_k_np[] = "np";
static const char __pyx_k_pi[] = "pi";
static const char __pyx_k_pp[] = "pp";
static const char __pyx_k_te[] = "te";
static const char __pyx_k_ts[] = "ts";
static const char __pyx_k_tt[] = "tt";
static const char __pyx_k_uR[] = "uR";
static const char __pyx_k_v1[] = "v1";
static const char __pyx_k_v2[] = "v2";
static const char __pyx_k_ww[] = "ww";
static const char __pyx_k_x0[] = "x0";
static const char __pyx_k_xx[] = "xx";
static const char __pyx_k_Er1[] = "Er1 =";
static const char __pyx_k_TMA[] = "TMA";
static const char __pyx_k_aRN[] = "aRN";
static const char __pyx_k_all[] = "all";
static const char __pyx_k_amp[] = "amp";
static const char __pyx_k_cos[] = "cos";
static const char __pyx_k_csv[] = ".csv";
static const char __pyx_k_cut[] = "cut";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_dom[] = "dom";
static const char __pyx_k_end[] = "end";
static const char __pyx_k_er1[] = "er1";
static const char __pyx_k_eta[] = "eta";
static const char __pyx_k_exp[] = "exp";
static const char __pyx_k_fft[] = "fft";
static const char __pyx_k_fun[] = "fun";
static const char __pyx_k_max[] = "max";
static const char __pyx_k_mwl[] = "mwl";
static const char __pyx_k_phi[] = "phi";
static const char __pyx_k_sum[] = "sum";
static const char __pyx_k_sys[] = "sys";
static const char __pyx_k_tma[] = "tma";
static const char __pyx_k_txt[] = ".txt";
static const char __pyx_k_zip[] = "zip";
static const char __pyx_k_Hs_2[] = "_Hs_";
static const char __pyx_k_Lgen[] = "Lgen";
static const char __pyx_k_Tend[] = "Tend";
static const char __pyx_k_Tlag[] = "Tlag";
static const char __pyx_k_Tmax[] = "Tmax";
static const char __pyx_k_Tp_2[] = "_Tp_";
static const char __pyx_k__123[] = ",";
static const char __pyx_k__204[] = " ";
static const char __pyx_k_cmat[] = "cmat";
static const char __pyx_k_cppU[] = "cppU";
static const char __pyx_k_etaR[] = "etaR";
static const char __pyx_k_exit[] = "exit";
static const char __pyx_k_fast[] = "fast";
static const char __pyx_k_file[] = "file";
static const char __pyx_k_freq[] = "freq";
static const char __pyx_k_func[] = "func";
static const char __pyx_k_gAbs[] = "gAbs";
static const char __pyx_k_iend[] = "iend";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_kAbs[] = "kAbs";
static const char __pyx_k_kDir[] = "kDir";
static const char __pyx_k_long[] = "long";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mean[] = "mean";
static const char __pyx_k_mode[] = "mode";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_nfft[] = "nfft";
static const char __pyx_k_ones[] = "ones";
static const char __pyx_k_open[] = "open";
static const char __pyx_k_phi0[] = "phi0";
static const char __pyx_k_ramp[] = "ramp";
static const char __pyx_k_rand[] = "rand";
static const char __pyx_k_real[] = "real";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_sinh[] = "sinh";
static const char __pyx_k_smax[] = "smax";
static const char __pyx_k_sqrt[] = "sqrt";
static const char __pyx_k_tanh[] = "tanh";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_time[] = "time";
static const char __pyx_k_vDir[] = "vDir";
static const char __pyx_k_wind[] = "wind";
static const char __pyx_k_Nfreq[] = "Nfreq";
static const char __pyx_k_Nwind[] = "Nwind";
static const char __pyx_k_Uhorz[] = "Uhorz";
static const char __pyx_k_Uvert[] = "Uvert";
static const char __pyx_k_all_2[] = "__all__";
static const char __pyx_k_array[] = "array";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_cmath[] = "cmath";
static const char __pyx_k_cos2s[] = "cos2s";
static const char __pyx_k_depth[] = "depth";
static const char __pyx_k_fft_x[] = "fft_x";
static const char __pyx_k_fname[] = "fname";
static const char __pyx_k_gamma[] = "gamma";
static const char __pyx_k_level[] = "level";
static const char __pyx_k_modes[] = "modes";
static const char __pyx_k_niter[] = "niter";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_omega[] = "omega";
static const char __pyx_k_overl[] = "overl";
static const char __pyx_k_phase[] = "phase";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_rec_d[] = "rec_d";
static const char __pyx_k_round[] = "round";
static const char __pyx_k_setUp[] = "setUp";
static const char __pyx_k_setup[] = "setup";
static const char __pyx_k_shape[] = "shape";
static const char __pyx_k_short[] = "short";
static const char __pyx_k_sigma[] = "sigma";
static const char __pyx_k_sinus[] = "sinus";
static const char __pyx_k_theta[] = "theta";
static const char __pyx_k_trans[] = "trans";
static const char __pyx_k_w_aux[] = "w_aux";
static const char __pyx_k_where[] = "where";
static const char __pyx_k_zeros[] = "zeros";
static const char __pyx_k_Bcoeff[] = "Bcoeff";
static const char __pyx_k_Cutoff[] = "Cutoff";
static const char __pyx_k_Fenton[] = "Fenton";
static const char __pyx_k_Linear[] = "Linear";
static const char __pyx_k_NLongW[] = "NLongW";
static const char __pyx_k_Nwaves[] = "Nwaves";
static const char __pyx_k_PM_mod[] = "PM_mod";
static const char __pyx_k_Tstart[] = "Tstart";
static const char __pyx_k_Udrift[] = "Udrift";
static const char __pyx_k_Window[] = "Window";
static const char __pyx_k_Ycoeff[] = "Ycoeff";
static const char __pyx_k_append[] = "append";
static const char __pyx_k_costap[] = "costap";
static const char __pyx_k_cutoff[] = "cutoff";
static const char __pyx_k_errors[] = "errors";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_interp[] = "interp";
static const char __pyx_k_linear[] = "linear";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_omega0[] = "omega0";
static const char __pyx_k_period[] = "period";
static const char __pyx_k_random[] = "random";
static const char __pyx_k_series[] = "series";
static const char __pyx_k_tolist[] = "tolist";
static const char __pyx_k_tophat[] = "tophat";
static const char __pyx_k_vector[] = "vector";
static const char __pyx_k_JONSWAP[] = "JONSWAP";
static const char __pyx_k_Nseries[] = "Nseries";
static const char __pyx_k_Overlap[] = "Overlap";
static const char __pyx_k_TWindow[] = "TWindow";
static const char __pyx_k_depth_2[] = "_depth_";
static const char __pyx_k_fftfreq[] = "fftfreq";
static const char __pyx_k_fim_tmp[] = "fim_tmp";
static const char __pyx_k_loadtxt[] = "loadtxt";
static const char __pyx_k_npoints[] = "npoints";
static const char __pyx_k_periods[] = "periods";
static const char __pyx_k_phiSymm[] = "phiSymm";
static const char __pyx_k_prepare[] = "__prepare__";
static const char __pyx_k_results[] = "results";
static const char __pyx_k_savetxt[] = "savetxt";
static const char __pyx_k_timelst[] = "timelst";
static const char __pyx_k_uDirect[] = "uDirect";
static const char __pyx_k_uWindow[] = "uWindow";
static const char __pyx_k_waveDir[] = "waveDir";
static const char __pyx_k_windOut[] = "windOut";
static const char __pyx_k_windows[] = "windows";
static const char __pyx_k_wtError[] = "wtError";
static const char __pyx_k_Cutoff_2[] = "Cutoff=";
static const char __pyx_k_End_time[] = "End time= ";
static const char __pyx_k_EtasetUp[] = "EtasetUp";
static const char __pyx_k_Nspectra[] = "Nspectra";
static const char __pyx_k_TOverlap[] = "TOverlap";
static const char __pyx_k_checkAcc[] = "checkAcc";
static const char __pyx_k_dirCheck[] = "dirCheck";
static const char __pyx_k_dircheck[] = "dircheck";
static const char __pyx_k_duration[] = "duration";
static const char __pyx_k_eta_long[] = "eta_long";
static const char __pyx_k_eta_mode[] = "eta_mode";
static const char __pyx_k_funcName[] = "funcName";
static const char __pyx_k_func_ret[] = "func_ret";
static const char __pyx_k_linspace[] = "linspace";
static const char __pyx_k_logEvent[] = "logEvent";
static const char __pyx_k_printOut[] = "printOut";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_rampTime[] = "rampTime";
static const char __pyx_k_skiprows[] = "skiprows";
static const char __pyx_k_vel_mode[] = "vel_mode";
static const char __pyx_k_waveDir0[] = "waveDir0";
static const char __pyx_k_waveType[] = "waveType";
static const char __pyx_k_Profiling[] = "Profiling";
static const char __pyx_k_WaveTools[] = "WaveTools";
static const char __pyx_k_amplitude[] = "amplitude";
static const char __pyx_k_arrayData[] = "arrayData";
static const char __pyx_k_delimiter[] = "delimiter";
static const char __pyx_k_etaDirect[] = "etaDirect";
static const char __pyx_k_etaWindow[] = "etaWindow";
static const char __pyx_k_eta_setUp[] = "eta_setUp";
static const char __pyx_k_eta_short[] = "eta_short";
static const char __pyx_k_funcNames[] = "funcNames";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_mitsuyasu[] = "mitsuyasu";
static const char __pyx_k_spectName[] = "spectName";
static const char __pyx_k_wwi_setUp[] = "wwi_setUp";
static const char __pyx_k_Etaoverall[] = "Etaoverall";
static const char __pyx_k_Nwaves_tot[] = "Nwaves_tot";
static const char __pyx_k_Start_Time[] = "Start Time =";
static const char __pyx_k_TimeSeries[] = "TimeSeries";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_bandFactor[] = "bandFactor";
static const char __pyx_k_cutoff_win[] = "cutoff_win";
static const char __pyx_k_dispersion[] = "dispersion";
static const char __pyx_k_findWindow[] = "findWindow";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_rec_direct[] = "rec_direct";
static const char __pyx_k_rotation3D[] = "rotation3D";
static const char __pyx_k_setVertDir[] = "setVertDir";
static const char __pyx_k_spreadName[] = "spreadName";
static const char __pyx_k_waveHeight[] = "waveHeight";
static const char __pyx_k_wavelength[] = "wavelength";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_RandomWaves[] = "RandomWaves";
static const char __pyx_k_Tstart_temp[] = "Tstart_temp";
static const char __pyx_k_cutoffTotal[] = "cutoffTotal";
static const char __pyx_k_eta_overall[] = "eta_overall";
static const char __pyx_k_seriesArray[] = "seriesArray";
static const char __pyx_k_sigmaReturn[] = "sigmaReturn";
static const char __pyx_k_RandomSeries[] = "RandomSeries";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_SolitaryWave[] = "SolitaryWave";
static const char __pyx_k_SpatialTools[] = "SpatialTools";
static const char __pyx_k_coshkzd_test[] = "coshkzd_test";
static const char __pyx_k_eta_2ndOrder[] = "eta_2ndOrder";
static const char __pyx_k_fastcos_test[] = "fastcos_test";
static const char __pyx_k_meanVelocity[] = "meanVelocity";
static const char __pyx_k_normIntegral[] = "normIntegral";
static const char __pyx_k_setDirVector[] = "setDirVector";
static const char __pyx_k_sinhkzd_test[] = "sinhkzd_test";
static const char __pyx_k_RandomNLWaves[] = "RandomNLWaves";
static const char __pyx_k_RandomWaves_u[] = "RandomWaves.u";
static const char __pyx_k_SteadyCurrent[] = "SteadyCurrent";
static const char __pyx_k_fastcosh_test[] = "fastcosh_test";
static const char __pyx_k_fastsinh_test[] = "fastsinh_test";
static const char __pyx_k_randomNLWaves[] = "randomNLWaves_";
static const char __pyx_k_spread_params[] = "spread_params";
static const char __pyx_k_window_params[] = "window_params";
static const char __pyx_k_SolitaryWave_u[] = "SolitaryWave.u";
static const char __pyx_k_timeSeriesFile[] = "timeSeriesFile";
static const char __pyx_k_validFunctions[] = "validFunctions";
static const char __pyx_k_writeEtaSeries[] = "writeEtaSeries";
static const char __pyx_k_RandomWavesFast[] = "RandomWavesFast";
static const char __pyx_k_RandomWaves_eta[] = "RandomWaves.eta";
static const char __pyx_k_SteadyCurrent_u[] = "SteadyCurrent.u";
static const char __pyx_k_spectral_params[] = "spectral_params";
static const char __pyx_k_DirectionalWaves[] = "DirectionalWaves";
static const char __pyx_k_SolitaryWave_eta[] = "SolitaryWave.eta";
static const char __pyx_k_returnRectangles[] = "returnRectangles";
static const char __pyx_k_Number_of_windows[] = "Number of windows=";
static const char __pyx_k_RandomNLWavesFast[] = "RandomNLWavesFast";
static const char __pyx_k_SteadyCurrent_eta[] = "SteadyCurrent.eta";
static const char __pyx_k_decompose_tseries[] = "decompose_tseries";
static const char __pyx_k_reduceToIntervals[] = "reduceToIntervals";
static const char __pyx_k_DirectionalWaves_u[] = "DirectionalWaves.u";
static const char __pyx_k_MonochromaticWaves[] = "MonochromaticWaves";
static const char __pyx_k_TimeSeries_uDirect[] = "TimeSeries.uDirect";
static const char __pyx_k_TimeSeries_uWindow[] = "TimeSeries.uWindow";
static const char __pyx_k_TimeSeries_windOut[] = "TimeSeries.windOut";
static const char __pyx_k_returnRectangles3D[] = "returnRectangles3D";
static const char __pyx_k_timeSeriesPosition[] = "timeSeriesPosition";
static const char __pyx_k_RandomNLWavesFast_u[] = "RandomNLWavesFast.u";
static const char __pyx_k_DirectionalWaves_eta[] = "DirectionalWaves.eta";
static const char __pyx_k_MonochromaticWaves_u[] = "MonochromaticWaves.u";
static const char __pyx_k_SteadyCurrent___init[] = "SteadyCurrent.__init__";
static const char __pyx_k_TimeSeries_etaDirect[] = "TimeSeries.etaDirect";
static const char __pyx_k_TimeSeries_etaWindow[] = "TimeSeries.etaWindow";
static const char __pyx_k_loadExistingFunction[] = "loadExistingFunction";
static const char __pyx_k_Direct_reconstruction[] = "Direct reconstruction? ";
static const char __pyx_k_RandomNLWavesFast_eta[] = "RandomNLWavesFast.eta";
static const char __pyx_k_RandomNLWaves_wtError[] = "RandomNLWaves.wtError";
static const char __pyx_k_TimeSeries_findWindow[] = "TimeSeries.findWindow";
static const char __pyx_k_MonochromaticWaves_eta[] = "MonochromaticWaves.eta";
static const char __pyx_k_RandomNLWaves_eta_long[] = "RandomNLWaves.eta_long";
static const char __pyx_k_RandomWavesFast___init[] = "RandomWavesFast.__init__";
static const char __pyx_k_MultiSpectraRandomWaves[] = "MultiSpectraRandomWaves";
static const char __pyx_k_RandomNLWaves_eta_setUp[] = "RandomNLWaves.eta_setUp";
static const char __pyx_k_RandomNLWaves_eta_short[] = "RandomNLWaves.eta_short";
static const char __pyx_k_RandomNLWavesFast___init[] = "RandomNLWavesFast.__init__";
static const char __pyx_k_RandomWavesFast_printOut[] = "RandomWavesFast.printOut";
static const char __pyx_k_MultiSpectraRandomWaves_u[] = "MultiSpectraRandomWaves.u";
static const char __pyx_k_RandomNLWaves_eta_overall[] = "RandomNLWaves.eta_overall";
static const char __pyx_k_RandomNLWaves_eta_2ndOrder[] = "RandomNLWaves.eta_2ndOrder";
static const char __pyx_k_RandomWaves_writeEtaSeries[] = "RandomWaves.writeEtaSeries";
static const char __pyx_k_MultiSpectraRandomWaves_eta[] = "MultiSpectraRandomWaves.eta";
static const char __pyx_k_ndarray_is_not_C_contiguous[] = "ndarray is not C contiguous";
static const char __pyx_k_waves_This_may_take_a_while[] = " waves. This may take a while";
static const char __pyx_k_RandomNLWaves_writeEtaSeries[] = "RandomNLWaves.writeEtaSeries";
static const char __pyx_k_ERROR_Wavetools_py_meanVelocity[] = "ERROR! Wavetools.py: meanVelocity should be a vector with 3 components. ";
static const char __pyx_k_ERROR_Wavetools_py_phi_argument[] = "ERROR! Wavetools.py: phi argument must be an array with N elements";
static const char __pyx_k_INFO_WaveTools_py_Overlap_entry[] = "INFO WaveTools.py: Overlap entry in window_params dictionary not found. Setting default value of 0.7 (70% of the window length)";
static const char __pyx_k_This_class_is_used_for_generati[] = "\n    This class is used for generating a steady current\n\n    Parameters\n    ----------\n    U: numpy.ndarray\n            Current velocity in vector form\n    mwl : float\n            Still water level\n    rampTime : float\n            Ramp time for current\n\n            ";
static const char __pyx_k_Users_tim_Programming_proteus_p[] = "/Users/tim/Programming/proteus/proteus/WaveTools.py";
static const char __pyx_k_numpy_core_multiarray_failed_to[] = "numpy.core.multiarray failed to import";
static const char __pyx_k_unknown_dtype_code_in_numpy_pxd[] = "unknown dtype code in numpy.pxd (%d)";
static const char __pyx_k_ERROR_WaveTools_py_Dictionary_ke[] = "ERROR! WaveTools.py: Dictionary key 'Nwaves' (waves per window) not found in window_params dictionary";
static const char __pyx_k_ERROR_WaveTools_py_Found_large_e[] = "ERROR!: WaveTools.py: Found large errors (>1%) during window reconstruction at RandomWavesFast. Please a) Increase Nfreq, b) Decrease waves per window. You can set checkAcc = False if you want to proceed with these errors";
static const char __pyx_k_ERROR_WaveTools_py_Found_not_con[] = "ERROR! WaveTools.py:  Found not consistent time entry between %s and %s row in %s file. Time variable must be always at the first column of the file and increasing monotonically";
static const char __pyx_k_ERROR_WaveTools_py_Found_too_few[] = "ERROR!: WaveTools.py: Found too few windows in RandomWavesFast. Consider increasing Tend (this is independent from the duration of the simulation)";
static const char __pyx_k_ERROR_WaveTools_py_Reconstructio[] = "ERROR! WaveTools.py: Reconstruction is expected to have two windows or more. Plese reduce the number of waves per window or switch to direct decomposition )";
static const char __pyx_k_ERROR_WaveTools_py_Relaxation_zo[] = "ERROR!: WaveTools.py: Relaxation zone lenght does not allow for spatial coherency in the windows method.Please a) increase number of waves per window or b) increase overlap or c) decrease lenght of the relaxation zone";
static const char __pyx_k_ERROR_WaveTools_py_Set_parameter[] = "ERROR! WaveTools.py: Set parameters for spectral windowing. Argument window_params must be a dictionary";
static const char __pyx_k_ERROR_Wavetools_py_Additional_sp[] = "ERROR! Wavetools.py: Additional spectral parameters are not valid for the %s spectrum";
static const char __pyx_k_ERROR_Wavetools_py_File_s_must_b[] = "ERROR! Wavetools.py: File %s must be given in .txt or .csv format";
static const char __pyx_k_ERROR_Wavetools_py_Location_vect[] = "ERROR! Wavetools.py: Location vector of generation zone should not be opposite to the wave direction";
static const char __pyx_k_ERROR_Wavetools_py_Maximum_numbe[] = "ERROR! Wavetools.py: Maximum number of frequencies for Random Waves is 10000 ";
static const char __pyx_k_ERROR_Wavetools_py_Parameters_pa[] = "ERROR! Wavetools.py: Parameters passed in MultiSpectraRandomWaves must be in array or list form with length Nspectra  ";
static const char __pyx_k_ERROR_Wavetools_py_Phase_array_m[] = "ERROR! Wavetools.py: Phase array must have N elements";
static const char __pyx_k_ERROR_Wavetools_py_Timeseries_fi[] = "ERROR! Wavetools.py: Timeseries file (%s) must have only two columns [time, eta]";
static const char __pyx_k_ERROR_Wavetools_py_Wavelenght_is[] = "ERROR! Wavetools.py: Wavelenght is not defined for nonlinear waves. Enter wavelength in class arguments";
static const char __pyx_k_ERROR_Wavetools_py_Window_handov[] = "ERROR! Wavetools.py: Window handover is not optimal as the cutoff is too close to the overlap. Decrease cutoff or increase overlap";
static const char __pyx_k_ERROR_Wavetools_py_Wrong_functio[] = "ERROR! Wavetools.py: Wrong function type (%s) given: Valid wavetypes are %s";
static const char __pyx_k_ERROR_Wavetools_py_Ycoeff_and_Bc[] = "ERROR! Wavetools.py: Ycoeff and Bcoeff must have the same length and equal to Nf and the 1st order harmonic must not be zero";
static const char __pyx_k_ERROR_Wavetools_py_You_are_not_r[] = "ERROR! Wavetools.py: You are not really using more than 1000 Fourier modes for a regular wave, right? ";
static const char __pyx_k_ERROR_Wavetools_py_eta_and_u_fun[] = "ERROR! Wavetools.py: eta and u functions not available for this class. Please use RandomNLWavesFast for generating random waves with nonlinear correction";
static const char __pyx_k_ERROR_Wavetools_py_phi_in_Direct[] = "ERROR! Wavetools.py: phi in DirectionalWaves class must be given either as None or as a list with 2*M + 1 numpy arrays with length N";
static const char __pyx_k_ERROR_Wavetools_pyx_Argument_mod[] = "ERROR! Wavetools.pyx: Argument mode in RandomNLWaves.writeEtaSeries should be \"all\", \"setup\", \"short\", \"long\" or \"linear\"";
static const char __pyx_k_Format_string_allocated_too_shor[] = "Format string allocated too short, see comment in numpy.pxd";
static const char __pyx_k_INFO_Calculating_nonlinear_corre[] = "INFO: Calculating nonlinear corrections for ";
static const char __pyx_k_INFO_WaveTools_py_Cutoff_entry_i[] = "INFO WaveTools.py: Cutoff entry in window_params dictionary not found. Setting default value of 0.1 (1/10 of the window length)";
static const char __pyx_k_INFO_WaveTools_py_Not_constant_s[] = "INFO WaveTools.py: Not constant sampling rate found, proceeding to signal interpolation to a constant sampling rate";
static const char __pyx_k_INFO_WaveTools_py_performing_a_d[] = "INFO: WaveTools.py: performing a direct series decomposition";
static const char __pyx_k_INFO_WaveTools_py_performing_ser[] = "INFO WaveTools.py: performing series decomposition with spectral windows";
static const char __pyx_k_INFO_Wavetools_py_Checking_durat[] = "INFO: Wavetools.py: Checking duration of windowed time series: %s per cent difference from original duration";
static const char __pyx_k_INFO_Wavetools_py_Correcting_win[] = "INFO: Wavetools.py: Correcting window duration for matching the exact time range of the series. Window duration correspond to %s waves approx.";
static const char __pyx_k_INFO_Wavetools_py_No_phase_array[] = "INFO Wavetools.py: No phase array is given. Assigning random phases. Outputing the phasing of the random waves";
static const char __pyx_k_INFO_Wavetools_py_Reading_spectr[] = "INFO Wavetools.py: Reading spectra No %s";
static const char __pyx_k_INFO_Wavetools_py_Using_s_window[] = "INFO: Wavetools.py: Using %s windows for reconstruction with %s sec duration and %s per cent overlap";
static const char __pyx_k_Non_native_byte_order_not_suppor[] = "Non-native byte order not supported";
static const char __pyx_k_Tools_for_working_with_water_wav[] = "Tools for working with water waves.\n\nThe primary objective of this module is to provide solutions (exact and\napproximate) for the free surface deformation and subsurface velocity\ncomponents of water waves. These can be used as boundary conditions, wave\ngeneration sources, and validation solutions for numerical wave codes.\n";
static const char __pyx_k_Wave_direction_is_not_perpendicu[] = "Wave direction is not perpendicular to gravity vector. Check input";
static const char __pyx_k_Wavetools_py_Provide_valid_depth[] = "Wavetools:py. Provide valid depth definition definition for TMA spectrum";
static const char __pyx_k_Wavetools_py_Stopping_simulation[] = "Wavetools:py. Stopping simulation";
static const char __pyx_k_Wrong_wavetype_given_Valid_wavet[] = "Wrong wavetype given: Valid wavetypes are %s";
static const char __pyx_k_ndarray_is_not_Fortran_contiguou[] = "ndarray is not Fortran contiguous";
static const char __pyx_k_numpy_core_umath_failed_to_impor[] = "numpy.core.umath failed to import";
static const char __pyx_k_This_class_is_used_for_generati_2[] = "\n    This class is used for generating plane random waves in an optimised manner\n    using linear reconstruction of components from a wave spectrum\n\n    Parameters\n    ----------\n    Tstart : float\n             Start time            \n    Tend : float\n             End time            \n    x0 : numpy.ndarray\n             Position vector for the time series            \n    Tp : float\n             Peak wave period\n    Hs : float\n             Significant wave height\n    mwl : float\n             Still water level\n    depth : float\n             Water depth\n    waveDir : numpy.ndarray\n             Wave direction vector\n    g : Numpy array\n             Gravitational acceleration vector\n    N : int\n             Number of frequency components\n    bandFactor : float\n             Spectral band factor. fmax = bandFactor/Tp, fmin = 1/(bandFactor*Tp)           \n    spectName : string\n             Name of spectral distribution\n    spectral_params : dict\n             Dictionary of arguments specific to the spectral distribution\n            Example for JONSWAP = {\"gamma\": 3.3, \"TMA\":True,\"depth\": depth}\n            TMA=True activates the TMA modification, which in turn needs the depth as a parameter\n    phi : numpy.ndarray\n             Component phases (if set to None, phases are picked at random)\n    Lgen : numpy.ndarray\n             Length of the generation zone (np.array([0., 0., 0.]) by default\n    Nwaves : int\n             Number of waves per window\n    Nfreq : int\n             Number of Fourier components per window\n    checkAcc : bool\n             Switch for enabling accuracy checks\n    fast : bool\n             Switch for enabling optimised functions \n    \n\n    ";
static const char __pyx_k_This_class_is_used_for_generati_3[] = "\n    This class is used for generating plane random waves with 2ns order correction in an optimised manner\n    using linear reconstruction of components from a wave spectrum\n\n    Parameters\n    ----------\n    Tstart : float\n             Start time            \n    Tend : float\n             End time            \n    x0 : numpy.ndarray\n             Position vector for the time series            \n    Tp : float\n             Peak wave period            \n    Hs : float\n             Significant wave height            \n    mwl : float\n             Still water level            \n    depth : float\n             Water depth            \n    waveDir : np.ndarray\n             Wave direction vector            \n    g : Numpy array\n             Gravitational acceleration vector            \n    N : int\n             Number of frequency components\n    bandFactor : float\n             Spectral band factor. fmax = bandFactor/Tp, fmin = 1/(bandFactor*Tp)           \n    spectName : string\n             Name of spectral distribution\n    spectral_params : dict\n             Dictionary of arguments specific to the spectral distribution\n            Example for JONSWAP = {\"gamma\": 3.3, \"TMA\":True,\"depth\": depth}\n            TMA=True activates the TMA modification, which in turn needs the depth as a parameter            \n    phi : numpy.ndarray\n             Component phases (if set to None, phases are picked at random)\n            \n    Lgen : numpy.ndarray\n             Length of the generation zone (np.array([0., 0., 0.]) by default\n            \n    Nwaves : int\n             Number of waves per window\n    Nfreq : int\n             Number of Fourier components per window\n    NLongw : int\n             Estmated ratio of long wave period to Tp\n    fast : bool\n             Switch for enabling optimised functions \n    ";
static const char __pyx_k_ERROR_WaveTools_py_Dictionary_ke_2[] = "ERROR! WaveTools.py: Dictionary key 'Tm' (mean or characteristic wave period) not found in window_params dictionary";
static const char __pyx_k_ERROR_WaveTools_py_Dictionary_ke_3[] = "ERROR! WaveTools.py: Dictionary key 'Window' (window function type) not found in window_params dictionary";
static const char __pyx_k_ERROR_Wavetools_py_Additional_sp_2[] = "ERROR! Wavetools.py: Additional spread parameters are not valid for the %s spectrum";
static const char __pyx_k_ERROR_Wavetools_py_Location_vect_2[] = "ERROR! Wavetools.py: Location vector for timeSeries must have three-components";
static const char __pyx_k_ERROR_Wavetools_py_Maximum_numbe_2[] = "ERROR! Wavetools.py: Maximum (number of frequencies) x (No of spectra) for MultispectraRandomWaves is 10000 ";
static const char __pyx_k_ERROR_Wavetools_py_Maximum_numbe_3[] = "ERROR! Wavetools.py: Maximum (number of frequencies) x (No of spectra) for DirectionalWaves is 100000 ";
static const char __pyx_k_Format_string_allocated_too_shor_2[] = "Format string allocated too short.";
static PyObject *__pyx_n_s_Bcoeff;
static PyObject *__pyx_n_s_Cutoff;
static PyObject *__pyx_kp_s_Cutoff_2;
static PyObject *__pyx_kp_s_Direct_reconstruction;
static PyObject *__pyx_n_s_DirectionalWaves;
static PyObject *__pyx_n_s_DirectionalWaves_eta;
static PyObject *__pyx_n_s_DirectionalWaves_u;
static PyObject *__pyx_kp_s_ERROR_WaveTools_py_Dictionary_ke;
static PyObject *__pyx_kp_s_ERROR_WaveTools_py_Dictionary_ke_2;
static PyObject *__pyx_kp_s_ERROR_WaveTools_py_Dictionary_ke_3;
static PyObject *__pyx_kp_s_ERROR_WaveTools_py_Found_large_e;
static PyObject *__pyx_kp_s_ERROR_WaveTools_py_Found_not_con;
static PyObject *__pyx_kp_s_ERROR_WaveTools_py_Found_too_few;
static PyObject *__pyx_kp_s_ERROR_WaveTools_py_Reconstructio;
static PyObject *__pyx_kp_s_ERROR_WaveTools_py_Relaxation_zo;
static PyObject *__pyx_kp_s_ERROR_WaveTools_py_Set_parameter;
static PyObject *__pyx_kp_s_ERROR_Wavetools_py_Additional_sp;
static PyObject *__pyx_kp_s_ERROR_Wavetools_py_Additional_sp_2;
static PyObject *__pyx_kp_s_ERROR_Wavetools_py_File_s_must_b;
static PyObject *__pyx_kp_s_ERROR_Wavetools_py_Location_vect;
static PyObject *__pyx_kp_s_ERROR_Wavetools_py_Location_vect_2;
static PyObject *__pyx_kp_s_ERROR_Wavetools_py_Maximum_numbe;
static PyObject *__pyx_kp_s_ERROR_Wavetools_py_Maximum_numbe_2;
static PyObject *__pyx_kp_s_ERROR_Wavetools_py_Maximum_numbe_3;
static PyObject *__pyx_kp_s_ERROR_Wavetools_py_Parameters_pa;
static PyObject *__pyx_kp_s_ERROR_Wavetools_py_Phase_array_m;
static PyObject *__pyx_kp_s_ERROR_Wavetools_py_Timeseries_fi;
static PyObject *__pyx_kp_s_ERROR_Wavetools_py_Wavelenght_is;
static PyObject *__pyx_kp_s_ERROR_Wavetools_py_Window_handov;
static PyObject *__pyx_kp_s_ERROR_Wavetools_py_Wrong_functio;
static PyObject *__pyx_kp_s_ERROR_Wavetools_py_Ycoeff_and_Bc;
static PyObject *__pyx_kp_s_ERROR_Wavetools_py_You_are_not_r;
static PyObject *__pyx_kp_s_ERROR_Wavetools_py_eta_and_u_fun;
static PyObject *__pyx_kp_s_ERROR_Wavetools_py_meanVelocity;
static PyObject *__pyx_kp_s_ERROR_Wavetools_py_phi_argument;
static PyObject *__pyx_kp_s_ERROR_Wavetools_py_phi_in_Direct;
static PyObject *__pyx_kp_s_ERROR_Wavetools_pyx_Argument_mod;
static PyObject *__pyx_kp_s_End_time;
static PyObject *__pyx_kp_s_Er1;
static PyObject *__pyx_n_s_Etaoverall;
static PyObject *__pyx_n_s_EtasetUp;
static PyObject *__pyx_n_s_Fenton;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor_2;
static PyObject *__pyx_n_s_G0;
static PyObject *__pyx_n_s_Hs;
static PyObject *__pyx_n_s_Hs_2;
static PyObject *__pyx_kp_s_INFO_Calculating_nonlinear_corre;
static PyObject *__pyx_kp_s_INFO_WaveTools_py_Cutoff_entry_i;
static PyObject *__pyx_kp_s_INFO_WaveTools_py_Not_constant_s;
static PyObject *__pyx_kp_s_INFO_WaveTools_py_Overlap_entry;
static PyObject *__pyx_kp_s_INFO_WaveTools_py_performing_a_d;
static PyObject *__pyx_kp_s_INFO_WaveTools_py_performing_ser;
static PyObject *__pyx_kp_s_INFO_Wavetools_py_Checking_durat;
static PyObject *__pyx_kp_s_INFO_Wavetools_py_Correcting_win;
static PyObject *__pyx_kp_s_INFO_Wavetools_py_No_phase_array;
static PyObject *__pyx_kp_s_INFO_Wavetools_py_Reading_spectr;
static PyObject *__pyx_kp_s_INFO_Wavetools_py_Using_s_window;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_n_s_JONSWAP;
static PyObject *__pyx_n_s_K;
static PyObject *__pyx_n_s_Lgen;
static PyObject *__pyx_n_s_Linear;
static PyObject *__pyx_n_s_M;
static PyObject *__pyx_n_s_MonochromaticWaves;
static PyObject *__pyx_n_s_MonochromaticWaves_eta;
static PyObject *__pyx_n_s_MonochromaticWaves_u;
static PyObject *__pyx_n_s_MultiSpectraRandomWaves;
static PyObject *__pyx_n_s_MultiSpectraRandomWaves_eta;
static PyObject *__pyx_n_s_MultiSpectraRandomWaves_u;
static PyObject *__pyx_n_s_N;
static PyObject *__pyx_n_s_NLongW;
static PyObject *__pyx_n_s_Nf;
static PyObject *__pyx_n_s_Nfreq;
static PyObject *__pyx_kp_u_Non_native_byte_order_not_suppor;
static PyObject *__pyx_n_s_Np;
static PyObject *__pyx_n_s_Nseries;
static PyObject *__pyx_n_s_Nspectra;
static PyObject *__pyx_kp_s_Number_of_windows;
static PyObject *__pyx_n_s_Nwaves;
static PyObject *__pyx_n_s_Nwaves_tot;
static PyObject *__pyx_n_s_Nwind;
static PyObject *__pyx_n_s_Overlap;
static PyObject *__pyx_n_s_PM_mod;
static PyObject *__pyx_n_s_Profiling;
static PyObject *__pyx_n_s_RW;
static PyObject *__pyx_n_s_RandomNLWaves;
static PyObject *__pyx_n_s_RandomNLWavesFast;
static PyObject *__pyx_n_s_RandomNLWavesFast___init;
static PyObject *__pyx_n_s_RandomNLWavesFast_eta;
static PyObject *__pyx_n_s_RandomNLWavesFast_u;
static PyObject *__pyx_n_s_RandomNLWaves_eta_2ndOrder;
static PyObject *__pyx_n_s_RandomNLWaves_eta_long;
static PyObject *__pyx_n_s_RandomNLWaves_eta_overall;
static PyObject *__pyx_n_s_RandomNLWaves_eta_setUp;
static PyObject *__pyx_n_s_RandomNLWaves_eta_short;
static PyObject *__pyx_n_s_RandomNLWaves_writeEtaSeries;
static PyObject *__pyx_n_s_RandomNLWaves_wtError;
static PyObject *__pyx_n_s_RandomSeries;
static PyObject *__pyx_n_s_RandomWaves;
static PyObject *__pyx_n_s_RandomWavesFast;
static PyObject *__pyx_n_s_RandomWavesFast___init;
static PyObject *__pyx_n_s_RandomWavesFast_printOut;
static PyObject *__pyx_n_s_RandomWaves_eta;
static PyObject *__pyx_n_s_RandomWaves_u;
static PyObject *__pyx_n_s_RandomWaves_writeEtaSeries;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_n_s_SolitaryWave;
static PyObject *__pyx_n_s_SolitaryWave_eta;
static PyObject *__pyx_n_s_SolitaryWave_u;
static PyObject *__pyx_n_s_SpatialTools;
static PyObject *__pyx_kp_s_Start_Time;
static PyObject *__pyx_n_s_SteadyCurrent;
static PyObject *__pyx_n_s_SteadyCurrent___init;
static PyObject *__pyx_n_s_SteadyCurrent_eta;
static PyObject *__pyx_n_s_SteadyCurrent_u;
static PyObject *__pyx_n_s_TMA;
static PyObject *__pyx_n_s_TOverlap;
static PyObject *__pyx_n_s_TS;
static PyObject *__pyx_n_s_TWindow;
static PyObject *__pyx_n_s_Tend;
static PyObject *__pyx_kp_s_This_class_is_used_for_generati;
static PyObject *__pyx_kp_s_This_class_is_used_for_generati_2;
static PyObject *__pyx_kp_s_This_class_is_used_for_generati_3;
static PyObject *__pyx_n_s_TimeSeries;
static PyObject *__pyx_n_s_TimeSeries_etaDirect;
static PyObject *__pyx_n_s_TimeSeries_etaWindow;
static PyObject *__pyx_n_s_TimeSeries_findWindow;
static PyObject *__pyx_n_s_TimeSeries_uDirect;
static PyObject *__pyx_n_s_TimeSeries_uWindow;
static PyObject *__pyx_n_s_TimeSeries_windOut;
static PyObject *__pyx_n_s_Tlag;
static PyObject *__pyx_n_s_Tm;
static PyObject *__pyx_n_s_Tmax;
static PyObject *__pyx_n_s_Tp;
static PyObject *__pyx_n_s_Tp_2;
static PyObject *__pyx_n_s_Tstart;
static PyObject *__pyx_n_s_Tstart_temp;
static PyObject *__pyx_n_s_U;
static PyObject *__pyx_n_s_UH;
static PyObject *__pyx_n_s_UV;
static PyObject *__pyx_n_s_Udrift;
static PyObject *__pyx_n_s_Uhorz;
static PyObject *__pyx_kp_s_Users_tim_Programming_proteus_p;
static PyObject *__pyx_n_s_Uvert;
static PyObject *__pyx_n_s_V;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_WaveTools;
static PyObject *__pyx_kp_s_Wave_direction_is_not_perpendicu;
static PyObject *__pyx_kp_s_Wavetools_py_Provide_valid_depth;
static PyObject *__pyx_kp_s_Wavetools_py_Stopping_simulation;
static PyObject *__pyx_n_s_Window;
static PyObject *__pyx_kp_s_Wrong_wavetype_given_Valid_wavet;
static PyObject *__pyx_n_s_Ycoeff;
static PyObject *__pyx_n_s_Z;
static PyObject *__pyx_kp_s__123;
static PyObject *__pyx_kp_s__204;
static PyObject *__pyx_n_s_a;
static PyObject *__pyx_n_s_a1;
static PyObject *__pyx_n_s_a2;
static PyObject *__pyx_n_s_aR;
static PyObject *__pyx_n_s_aRN;
static PyObject *__pyx_n_s_aa;
static PyObject *__pyx_n_s_ai;
static PyObject *__pyx_n_s_all;
static PyObject *__pyx_n_s_all_2;
static PyObject *__pyx_n_s_amp;
static PyObject *__pyx_n_s_amplitude;
static PyObject *__pyx_n_s_append;
static PyObject *__pyx_n_s_array;
static PyObject *__pyx_n_s_arrayData;
static PyObject *__pyx_n_s_bandFactor;
static PyObject *__pyx_n_s_bj;
static PyObject *__pyx_n_s_c;
static PyObject *__pyx_n_s_checkAcc;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_cmat;
static PyObject *__pyx_n_s_cmath;
static PyObject *__pyx_n_s_cos;
static PyObject *__pyx_n_s_cos2s;
static PyObject *__pyx_n_s_coshkzd_test;
static PyObject *__pyx_n_s_costap;
static PyObject *__pyx_n_s_cppU;
static PyObject *__pyx_kp_s_csv;
static PyObject *__pyx_n_s_cut;
static PyObject *__pyx_n_s_cutoff;
static PyObject *__pyx_n_s_cutoffTotal;
static PyObject *__pyx_n_s_cutoff_win;
static PyObject *__pyx_n_s_d;
static PyObject *__pyx_n_s_decompose_tseries;
static PyObject *__pyx_n_s_delimiter;
static PyObject *__pyx_n_s_depth;
static PyObject *__pyx_n_s_depth_2;
static PyObject *__pyx_n_s_df;
static PyObject *__pyx_n_s_dirCheck;
static PyObject *__pyx_n_s_dircheck;
static PyObject *__pyx_n_s_dispersion;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_dom;
static PyObject *__pyx_n_s_dt;
static PyObject *__pyx_n_s_duration;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_er1;
static PyObject *__pyx_n_s_errors;
static PyObject *__pyx_n_s_eta;
static PyObject *__pyx_n_s_etaDirect;
static PyObject *__pyx_n_s_etaR;
static PyObject *__pyx_n_s_etaWindow;
static PyObject *__pyx_n_s_eta_2ndOrder;
static PyObject *__pyx_n_s_eta_long;
static PyObject *__pyx_n_s_eta_mode;
static PyObject *__pyx_n_s_eta_overall;
static PyObject *__pyx_n_s_eta_setUp;
static PyObject *__pyx_n_s_eta_short;
static PyObject *__pyx_n_s_exit;
static PyObject *__pyx_n_s_exp;
static PyObject *__pyx_n_s_f;
static PyObject *__pyx_n_s_f0;
static PyObject *__pyx_n_s_fast;
static PyObject *__pyx_n_s_fastcos_test;
static PyObject *__pyx_n_s_fastcosh_test;
static PyObject *__pyx_n_s_fastsinh_test;
static PyObject *__pyx_n_s_fft;
static PyObject *__pyx_n_s_fft_x;
static PyObject *__pyx_n_s_fftfreq;
static PyObject *__pyx_n_s_fi;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_n_s_fim_tmp;
static PyObject *__pyx_n_s_findWindow;
static PyObject *__pyx_n_s_fname;
static PyObject *__pyx_n_s_freq;
static PyObject *__pyx_n_s_fun;
static PyObject *__pyx_n_s_func;
static PyObject *__pyx_n_s_funcName;
static PyObject *__pyx_n_s_funcNames;
static PyObject *__pyx_n_s_func_ret;
static PyObject *__pyx_n_s_g;
static PyObject *__pyx_n_s_gAbs;
static PyObject *__pyx_n_s_gamma;
static PyObject *__pyx_n_s_ho;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_i1;
static PyObject *__pyx_n_s_i2;
static PyObject *__pyx_n_s_iend;
static PyObject *__pyx_n_s_ii;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_n_s_interp;
static PyObject *__pyx_n_s_j;
static PyObject *__pyx_n_s_jj;
static PyObject *__pyx_n_s_k;
static PyObject *__pyx_n_s_kAbs;
static PyObject *__pyx_n_s_kDir;
static PyObject *__pyx_n_s_l;
static PyObject *__pyx_n_s_level;
static PyObject *__pyx_n_s_linear;
static PyObject *__pyx_n_s_linspace;
static PyObject *__pyx_n_s_loadExistingFunction;
static PyObject *__pyx_n_s_loadtxt;
static PyObject *__pyx_n_s_logEvent;
static PyObject *__pyx_n_s_long;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_max;
static PyObject *__pyx_n_s_mean;
static PyObject *__pyx_n_s_meanVelocity;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_s_mitsuyasu;
static PyObject *__pyx_n_s_mode;
static PyObject *__pyx_n_s_modes;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_mwl;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_kp_u_ndarray_is_not_C_contiguous;
static PyObject *__pyx_kp_u_ndarray_is_not_Fortran_contiguou;
static PyObject *__pyx_n_s_nfft;
static PyObject *__pyx_n_s_niter;
static PyObject *__pyx_n_s_normIntegral;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_n_s_npoints;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_kp_s_numpy_core_multiarray_failed_to;
static PyObject *__pyx_kp_s_numpy_core_umath_failed_to_impor;
static PyObject *__pyx_n_s_omega;
static PyObject *__pyx_n_s_omega0;
static PyObject *__pyx_n_s_ones;
static PyObject *__pyx_n_s_open;
static PyObject *__pyx_n_s_overl;
static PyObject *__pyx_n_s_period;
static PyObject *__pyx_n_s_periods;
static PyObject *__pyx_n_s_phase;
static PyObject *__pyx_n_s_phi;
static PyObject *__pyx_n_s_phi0;
static PyObject *__pyx_n_s_phiSymm;
static PyObject *__pyx_n_s_pi;
static PyObject *__pyx_n_s_pp;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_printOut;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_r;
static PyObject *__pyx_n_s_ramp;
static PyObject *__pyx_n_s_rampTime;
static PyObject *__pyx_n_s_rand;
static PyObject *__pyx_n_s_random;
static PyObject *__pyx_n_s_randomNLWaves;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_real;
static PyObject *__pyx_n_s_rec_d;
static PyObject *__pyx_n_s_rec_direct;
static PyObject *__pyx_n_s_reduceToIntervals;
static PyObject *__pyx_n_s_results;
static PyObject *__pyx_n_s_returnRectangles;
static PyObject *__pyx_n_s_returnRectangles3D;
static PyObject *__pyx_n_s_rotation3D;
static PyObject *__pyx_n_s_round;
static PyObject *__pyx_n_s_s;
static PyObject *__pyx_n_s_savetxt;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_n_s_series;
static PyObject *__pyx_n_s_seriesArray;
static PyObject *__pyx_n_s_setDirVector;
static PyObject *__pyx_n_s_setUp;
static PyObject *__pyx_n_s_setVertDir;
static PyObject *__pyx_n_s_setup;
static PyObject *__pyx_n_s_shape;
static PyObject *__pyx_n_s_short;
static PyObject *__pyx_n_s_sigma;
static PyObject *__pyx_n_s_sigmaReturn;
static PyObject *__pyx_n_s_sinh;
static PyObject *__pyx_n_s_sinhkzd_test;
static PyObject *__pyx_n_s_sinus;
static PyObject *__pyx_n_s_skiprows;
static PyObject *__pyx_n_s_smax;
static PyObject *__pyx_n_s_spectName;
static PyObject *__pyx_n_s_spectral_params;
static PyObject *__pyx_n_s_spreadName;
static PyObject *__pyx_n_s_spread_params;
static PyObject *__pyx_n_s_sqrt;
static PyObject *__pyx_n_s_sum;
static PyObject *__pyx_n_s_sys;
static PyObject *__pyx_n_s_t;
static PyObject *__pyx_n_s_tanh;
static PyObject *__pyx_n_s_te;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_theta;
static PyObject *__pyx_n_s_time;
static PyObject *__pyx_n_s_timeSeriesFile;
static PyObject *__pyx_n_s_timeSeriesPosition;
static PyObject *__pyx_n_s_timelst;
static PyObject *__pyx_n_s_tma;
static PyObject *__pyx_n_s_tolist;
static PyObject *__pyx_n_s_tophat;
static PyObject *__pyx_n_s_trans;
static PyObject *__pyx_n_s_ts;
static PyObject *__pyx_n_s_tt;
static PyObject *__pyx_kp_s_txt;
static PyObject *__pyx_n_s_u;
static PyObject *__pyx_n_s_uDirect;
static PyObject *__pyx_n_s_uR;
static PyObject *__pyx_n_s_uWindow;
static PyObject *__pyx_kp_u_unknown_dtype_code_in_numpy_pxd;
static PyObject *__pyx_n_s_v1;
static PyObject *__pyx_n_s_v2;
static PyObject *__pyx_n_s_vDir;
static PyObject *__pyx_n_s_validFunctions;
static PyObject *__pyx_n_s_vector;
static PyObject *__pyx_n_s_vel_mode;
static PyObject *__pyx_n_s_w;
static PyObject *__pyx_n_s_w_aux;
static PyObject *__pyx_n_s_waveDir;
static PyObject *__pyx_n_s_waveDir0;
static PyObject *__pyx_n_s_waveHeight;
static PyObject *__pyx_n_s_waveType;
static PyObject *__pyx_n_s_wavelength;
static PyObject *__pyx_kp_s_waves_This_may_take_a_while;
static PyObject *__pyx_n_s_where;
static PyObject *__pyx_n_s_wind;
static PyObject *__pyx_n_s_windOut;
static PyObject *__pyx_n_s_window_params;
static PyObject *__pyx_n_s_windows;
static PyObject *__pyx_n_s_writeEtaSeries;
static PyObject *__pyx_n_s_wtError;
static PyObject *__pyx_n_s_ww;
static PyObject *__pyx_n_s_wwi_setUp;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_n_s_x0;
static PyObject *__pyx_n_s_xx;
static PyObject *__pyx_n_s_y;
static PyObject *__pyx_n_s_zeros;
static PyObject *__pyx_n_s_zip;
static PyObject *__pyx_pf_9WaveTools_fastcos_test(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_phase, PyObject *__pyx_v_sinus); /* proto */
static PyObject *__pyx_pf_9WaveTools_2fastcosh_test(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_k, PyObject *__pyx_v_Z, PyObject *__pyx_v_fast); /* proto */
static PyObject *__pyx_pf_9WaveTools_4fastsinh_test(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_k, PyObject *__pyx_v_Z, PyObject *__pyx_v_fast); /* proto */
static PyObject *__pyx_pf_9WaveTools_6coshkzd_test(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_k, PyObject *__pyx_v_Z, PyObject *__pyx_v_d, PyObject *__pyx_v_fast); /* proto */
static PyObject *__pyx_pf_9WaveTools_8sinhkzd_test(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_k, PyObject *__pyx_v_Z, PyObject *__pyx_v_d, PyObject *__pyx_v_fast); /* proto */
static PyObject *__pyx_pf_9WaveTools_10loadExistingFunction(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_funcName, PyObject *__pyx_v_validFunctions); /* proto */
static PyObject *__pyx_pf_9WaveTools_12setVertDir(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_g); /* proto */
static PyObject *__pyx_pf_9WaveTools_14setDirVector(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_vector); /* proto */
static PyObject *__pyx_pf_9WaveTools_16dirCheck(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_v1, PyObject *__pyx_v_v2); /* proto */
static PyObject *__pyx_pf_9WaveTools_18reduceToIntervals(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fi, PyObject *__pyx_v_df); /* proto */
static PyObject *__pyx_pf_9WaveTools_20returnRectangles(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_a, PyObject *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_9WaveTools_22returnRectangles3D(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_a, PyObject *__pyx_v_x, PyObject *__pyx_v_y); /* proto */
static PyObject *__pyx_pf_9WaveTools_24normIntegral(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_f, PyObject *__pyx_v_dom); /* proto */
static PyObject *__pyx_pf_9WaveTools_26eta_mode(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x, PyObject *__pyx_v_t, PyObject *__pyx_v_kDir, PyObject *__pyx_v_omega, PyObject *__pyx_v_phi, PyObject *__pyx_v_amplitude); /* proto */
static PyObject *__pyx_pf_9WaveTools_28Udrift(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_amp, PyObject *__pyx_v_gAbs, PyObject *__pyx_v_c, PyObject *__pyx_v_d); /* proto */
static PyObject *__pyx_pf_9WaveTools_30vel_mode(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x, PyObject *__pyx_v_t, PyObject *__pyx_v_kDir, PyObject *__pyx_v_kAbs, PyObject *__pyx_v_omega, PyObject *__pyx_v_phi, PyObject *__pyx_v_amplitude, PyObject *__pyx_v_mwl, PyObject *__pyx_v_depth, PyObject *__pyx_v_vDir, PyObject *__pyx_v_gAbs); /* proto */
static PyObject *__pyx_pf_9WaveTools_32sigma(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_omega, PyObject *__pyx_v_omega0); /* proto */
static PyObject *__pyx_pf_9WaveTools_34JONSWAP(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_f, PyObject *__pyx_v_f0, PyObject *__pyx_v_Hs, PyObject *__pyx_v_gamma, PyObject *__pyx_v_TMA, PyObject *__pyx_v_depth); /* proto */
static PyObject *__pyx_pf_9WaveTools_36PM_mod(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_f, PyObject *__pyx_v_f0, PyObject *__pyx_v_Hs); /* proto */
static PyObject *__pyx_pf_9WaveTools_38cos2s(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_theta, PyObject *__pyx_v_f, PyObject *__pyx_v_s); /* proto */
static PyObject *__pyx_pf_9WaveTools_40mitsuyasu(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_theta, PyObject *__pyx_v_fi, PyObject *__pyx_v_f0, PyObject *__pyx_v_smax); /* proto */
static PyObject *__pyx_pf_9WaveTools_42dispersion(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_w, PyObject *__pyx_v_d, PyObject *__pyx_v_g, PyObject *__pyx_v_niter); /* proto */
static PyObject *__pyx_pf_9WaveTools_44tophat(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_l, PyObject *__pyx_v_cutoff); /* proto */
static PyObject *__pyx_pf_9WaveTools_46costap(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_l, PyObject *__pyx_v_cutoff); /* proto */
static PyObject *__pyx_pf_9WaveTools_48decompose_tseries(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_time, PyObject *__pyx_v_eta, PyObject *__pyx_v_dt); /* proto */
static PyObject *__pyx_pf_9WaveTools_13SteadyCurrent___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_U, PyObject *__pyx_v_mwl, PyObject *__pyx_v_rampTime); /* proto */
static PyObject *__pyx_pf_9WaveTools_13SteadyCurrent_2eta(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_x, CYTHON_UNUSED PyObject *__pyx_v_t); /* proto */
static PyObject *__pyx_pf_9WaveTools_13SteadyCurrent_4u(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_x, PyObject *__pyx_v_t); /* proto */
static int __pyx_pf_9WaveTools_12SolitaryWave___init__(struct __pyx_obj_9WaveTools_SolitaryWave *__pyx_v_self, PyObject *__pyx_v_waveHeight, PyObject *__pyx_v_mwl, PyObject *__pyx_v_depth, PyObject *__pyx_v_g, PyObject *__pyx_v_waveDir, PyObject *__pyx_v_trans, PyObject *__pyx_v_fast); /* proto */
static PyObject *__pyx_pf_9WaveTools_12SolitaryWave_2eta(struct __pyx_obj_9WaveTools_SolitaryWave *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_t); /* proto */
static PyObject *__pyx_pf_9WaveTools_12SolitaryWave_4u(struct __pyx_obj_9WaveTools_SolitaryWave *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_t); /* proto */
static int __pyx_pf_9WaveTools_18MonochromaticWaves___init__(struct __pyx_obj_9WaveTools_MonochromaticWaves *__pyx_v_self, PyObject *__pyx_v_period, PyObject *__pyx_v_waveHeight, PyObject *__pyx_v_mwl, PyObject *__pyx_v_depth, PyObject *__pyx_v_g, PyObject *__pyx_v_waveDir, PyObject *__pyx_v_wavelength, PyObject *__pyx_v_waveType, PyObject *__pyx_v_Ycoeff, PyObject *__pyx_v_Bcoeff, PyObject *__pyx_v_Nf, PyObject *__pyx_v_meanVelocity, PyObject *__pyx_v_phi0, PyObject *__pyx_v_fast); /* proto */
static PyObject *__pyx_pf_9WaveTools_18MonochromaticWaves_2eta(struct __pyx_obj_9WaveTools_MonochromaticWaves *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_t); /* proto */
static PyObject *__pyx_pf_9WaveTools_18MonochromaticWaves_4u(struct __pyx_obj_9WaveTools_MonochromaticWaves *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_t); /* proto */
static PyObject *__pyx_pf_9WaveTools_18MonochromaticWaves_10wavelength___get__(struct __pyx_obj_9WaveTools_MonochromaticWaves *__pyx_v_self); /* proto */
static int __pyx_pf_9WaveTools_18MonochromaticWaves_10wavelength_2__set__(struct __pyx_obj_9WaveTools_MonochromaticWaves *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9WaveTools_18MonochromaticWaves_3mwl___get__(struct __pyx_obj_9WaveTools_MonochromaticWaves *__pyx_v_self); /* proto */
static int __pyx_pf_9WaveTools_18MonochromaticWaves_3mwl_2__set__(struct __pyx_obj_9WaveTools_MonochromaticWaves *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_9WaveTools_11RandomWaves___cinit__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self, PyObject *__pyx_v_Tp, PyObject *__pyx_v_Hs, PyObject *__pyx_v_mwl, PyObject *__pyx_v_depth, PyObject *__pyx_v_waveDir, PyObject *__pyx_v_g, PyObject *__pyx_v_N, PyObject *__pyx_v_bandFactor, PyObject *__pyx_v_spectName, PyObject *__pyx_v_spectral_params, PyObject *__pyx_v_phi, PyObject *__pyx_v_fast); /* proto */
static PyObject *__pyx_pf_9WaveTools_11RandomWaves_2eta(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_t); /* proto */
static PyObject *__pyx_pf_9WaveTools_11RandomWaves_4u(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_t); /* proto */
static PyObject *__pyx_pf_9WaveTools_11RandomWaves_6writeEtaSeries(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self, PyObject *__pyx_v_Tstart, PyObject *__pyx_v_Tend, PyObject *__pyx_v_x0, PyObject *__pyx_v_fname, PyObject *__pyx_v_Lgen); /* proto */
static PyObject *__pyx_pf_9WaveTools_11RandomWaves_3mwl___get__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self); /* proto */
static int __pyx_pf_9WaveTools_11RandomWaves_3mwl_2__set__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9WaveTools_11RandomWaves_5depth___get__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self); /* proto */
static int __pyx_pf_9WaveTools_11RandomWaves_5depth_2__set__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9WaveTools_11RandomWaves_4gAbs___get__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self); /* proto */
static int __pyx_pf_9WaveTools_11RandomWaves_4gAbs_2__set__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9WaveTools_11RandomWaves_4Tlag___get__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self); /* proto */
static int __pyx_pf_9WaveTools_11RandomWaves_4Tlag_2__set__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9WaveTools_11RandomWaves_2Hs___get__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self); /* proto */
static int __pyx_pf_9WaveTools_11RandomWaves_2Hs_2__set__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9WaveTools_11RandomWaves_2Tp___get__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self); /* proto */
static int __pyx_pf_9WaveTools_11RandomWaves_2Tp_2__set__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9WaveTools_11RandomWaves_2fp___get__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self); /* proto */
static int __pyx_pf_9WaveTools_11RandomWaves_2fp_2__set__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9WaveTools_11RandomWaves_10bandFactor___get__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self); /* proto */
static int __pyx_pf_9WaveTools_11RandomWaves_10bandFactor_2__set__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9WaveTools_11RandomWaves_2df___get__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self); /* proto */
static int __pyx_pf_9WaveTools_11RandomWaves_2df_2__set__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9WaveTools_11RandomWaves_1N___get__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self); /* proto */
static int __pyx_pf_9WaveTools_11RandomWaves_1N_2__set__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9WaveTools_11RandomWaves_2fi___get__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self); /* proto */
static int __pyx_pf_9WaveTools_11RandomWaves_2fi_2__set__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_9WaveTools_11RandomWaves_2fi_4__del__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9WaveTools_11RandomWaves_3fim___get__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self); /* proto */
static int __pyx_pf_9WaveTools_11RandomWaves_3fim_2__set__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_9WaveTools_11RandomWaves_3fim_4__del__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9WaveTools_11RandomWaves_5Si_Jm___get__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self); /* proto */
static int __pyx_pf_9WaveTools_11RandomWaves_5Si_Jm_2__set__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_9WaveTools_11RandomWaves_5Si_Jm_4__del__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9WaveTools_11RandomWaves_2ki___get__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self); /* proto */
static int __pyx_pf_9WaveTools_11RandomWaves_2ki_2__set__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_9WaveTools_11RandomWaves_2ki_4__del__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9WaveTools_11RandomWaves_5omega___get__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self); /* proto */
static int __pyx_pf_9WaveTools_11RandomWaves_5omega_2__set__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_9WaveTools_11RandomWaves_5omega_4__del__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9WaveTools_11RandomWaves_5tanhF___get__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self); /* proto */
static int __pyx_pf_9WaveTools_11RandomWaves_5tanhF_2__set__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_9WaveTools_11RandomWaves_5tanhF_4__del__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9WaveTools_11RandomWaves_1g___get__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self); /* proto */
static int __pyx_pf_9WaveTools_11RandomWaves_1g_2__set__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_9WaveTools_11RandomWaves_1g_4__del__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9WaveTools_11RandomWaves_7waveDir___get__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self); /* proto */
static int __pyx_pf_9WaveTools_11RandomWaves_7waveDir_2__set__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_9WaveTools_11RandomWaves_7waveDir_4__del__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9WaveTools_11RandomWaves_4vDir___get__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self); /* proto */
static int __pyx_pf_9WaveTools_11RandomWaves_4vDir_2__set__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_9WaveTools_11RandomWaves_4vDir_4__del__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9WaveTools_11RandomWaves_4kDir___get__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self); /* proto */
static int __pyx_pf_9WaveTools_11RandomWaves_4kDir_2__set__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_9WaveTools_11RandomWaves_4kDir_4__del__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9WaveTools_11RandomWaves_2ai___get__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self); /* proto */
static int __pyx_pf_9WaveTools_11RandomWaves_2ai_2__set__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_9WaveTools_11RandomWaves_2ai_4__del__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9WaveTools_11RandomWaves_3phi___get__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self); /* proto */
static int __pyx_pf_9WaveTools_11RandomWaves_3phi_2__set__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_9WaveTools_11RandomWaves_3phi_4__del__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self); /* proto */
static int __pyx_pf_9WaveTools_23MultiSpectraRandomWaves___cinit__(struct __pyx_obj_9WaveTools_MultiSpectraRandomWaves *__pyx_v_self, PyObject *__pyx_v_Nspectra, PyObject *__pyx_v_Tp, PyObject *__pyx_v_Hs, PyObject *__pyx_v_mwl, PyObject *__pyx_v_depth, PyObject *__pyx_v_waveDir, PyObject *__pyx_v_g, PyObject *__pyx_v_N, PyObject *__pyx_v_bandFactor, PyObject *__pyx_v_spectName, PyObject *__pyx_v_spectral_params, PyObject *__pyx_v_phi, PyObject *__pyx_v_fast); /* proto */
static PyObject *__pyx_pf_9WaveTools_23MultiSpectraRandomWaves_2eta(struct __pyx_obj_9WaveTools_MultiSpectraRandomWaves *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_t); /* proto */
static PyObject *__pyx_pf_9WaveTools_23MultiSpectraRandomWaves_4u(struct __pyx_obj_9WaveTools_MultiSpectraRandomWaves *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_t); /* proto */
static PyObject *__pyx_pf_9WaveTools_23MultiSpectraRandomWaves_3mwl___get__(struct __pyx_obj_9WaveTools_MultiSpectraRandomWaves *__pyx_v_self); /* proto */
static int __pyx_pf_9WaveTools_23MultiSpectraRandomWaves_3mwl_2__set__(struct __pyx_obj_9WaveTools_MultiSpectraRandomWaves *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9WaveTools_23MultiSpectraRandomWaves_5depth___get__(struct __pyx_obj_9WaveTools_MultiSpectraRandomWaves *__pyx_v_self); /* proto */
static int __pyx_pf_9WaveTools_23MultiSpectraRandomWaves_5depth_2__set__(struct __pyx_obj_9WaveTools_MultiSpectraRandomWaves *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_9WaveTools_16DirectionalWaves___cinit__(struct __pyx_obj_9WaveTools_DirectionalWaves *__pyx_v_self, PyObject *__pyx_v_M, PyObject *__pyx_v_Tp, PyObject *__pyx_v_Hs, PyObject *__pyx_v_mwl, PyObject *__pyx_v_depth, PyObject *__pyx_v_waveDir0, PyObject *__pyx_v_g, PyObject *__pyx_v_N, PyObject *__pyx_v_bandFactor, PyObject *__pyx_v_spectName, PyObject *__pyx_v_spreadName, PyObject *__pyx_v_spectral_params, PyObject *__pyx_v_spread_params, PyObject *__pyx_v_phi, PyObject *__pyx_v_phiSymm, PyObject *__pyx_v_fast); /* proto */
static PyObject *__pyx_pf_9WaveTools_16DirectionalWaves_2eta(struct __pyx_obj_9WaveTools_DirectionalWaves *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_t); /* proto */
static PyObject *__pyx_pf_9WaveTools_16DirectionalWaves_4u(struct __pyx_obj_9WaveTools_DirectionalWaves *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_t); /* proto */
static PyObject *__pyx_pf_9WaveTools_16DirectionalWaves_3mwl___get__(struct __pyx_obj_9WaveTools_DirectionalWaves *__pyx_v_self); /* proto */
static int __pyx_pf_9WaveTools_16DirectionalWaves_3mwl_2__set__(struct __pyx_obj_9WaveTools_DirectionalWaves *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9WaveTools_16DirectionalWaves_5depth___get__(struct __pyx_obj_9WaveTools_DirectionalWaves *__pyx_v_self); /* proto */
static int __pyx_pf_9WaveTools_16DirectionalWaves_5depth_2__set__(struct __pyx_obj_9WaveTools_DirectionalWaves *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_9WaveTools_10TimeSeries___init__(struct __pyx_obj_9WaveTools_TimeSeries *__pyx_v_self, PyObject *__pyx_v_timeSeriesFile, PyObject *__pyx_v_skiprows, PyObject *__pyx_v_timeSeriesPosition, PyObject *__pyx_v_depth, PyObject *__pyx_v_N, PyObject *__pyx_v_mwl, PyObject *__pyx_v_waveDir, PyObject *__pyx_v_g, PyObject *__pyx_v_cutoffTotal, PyObject *__pyx_v_rec_direct, PyObject *__pyx_v_window_params, PyObject *__pyx_v_arrayData, PyObject *__pyx_v_seriesArray, PyObject *__pyx_v_Lgen, PyObject *__pyx_v_fast); /* proto */
static PyObject *__pyx_pf_9WaveTools_10TimeSeries_2windOut(struct __pyx_obj_9WaveTools_TimeSeries *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9WaveTools_10TimeSeries_4etaDirect(struct __pyx_obj_9WaveTools_TimeSeries *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_t); /* proto */
static PyObject *__pyx_pf_9WaveTools_10TimeSeries_6uDirect(struct __pyx_obj_9WaveTools_TimeSeries *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_t); /* proto */
static PyObject *__pyx_pf_9WaveTools_10TimeSeries_8findWindow(struct __pyx_obj_9WaveTools_TimeSeries *__pyx_v_self, PyObject *__pyx_v_t); /* proto */
static PyObject *__pyx_pf_9WaveTools_10TimeSeries_10etaWindow(struct __pyx_obj_9WaveTools_TimeSeries *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_t); /* proto */
static PyObject *__pyx_pf_9WaveTools_10TimeSeries_12uWindow(struct __pyx_obj_9WaveTools_TimeSeries *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_t); /* proto */
static PyObject *__pyx_pf_9WaveTools_10TimeSeries_10wavelength___get__(struct __pyx_obj_9WaveTools_TimeSeries *__pyx_v_self); /* proto */
static int __pyx_pf_9WaveTools_10TimeSeries_10wavelength_2__set__(struct __pyx_obj_9WaveTools_TimeSeries *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9WaveTools_10TimeSeries_3mwl___get__(struct __pyx_obj_9WaveTools_TimeSeries *__pyx_v_self); /* proto */
static int __pyx_pf_9WaveTools_10TimeSeries_3mwl_2__set__(struct __pyx_obj_9WaveTools_TimeSeries *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9WaveTools_10TimeSeries_3eta___get__(struct __pyx_obj_9WaveTools_TimeSeries *__pyx_v_self); /* proto */
static int __pyx_pf_9WaveTools_10TimeSeries_3eta_2__set__(struct __pyx_obj_9WaveTools_TimeSeries *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_9WaveTools_10TimeSeries_3eta_4__del__(struct __pyx_obj_9WaveTools_TimeSeries *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9WaveTools_10TimeSeries_1u___get__(struct __pyx_obj_9WaveTools_TimeSeries *__pyx_v_self); /* proto */
static int __pyx_pf_9WaveTools_10TimeSeries_1u_2__set__(struct __pyx_obj_9WaveTools_TimeSeries *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_9WaveTools_10TimeSeries_1u_4__del__(struct __pyx_obj_9WaveTools_TimeSeries *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9WaveTools_50__defaults__(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_9WaveTools_15RandomWavesFast___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_Tstart, PyObject *__pyx_v_Tend, PyObject *__pyx_v_x0, PyObject *__pyx_v_Tp, PyObject *__pyx_v_Hs, PyObject *__pyx_v_mwl, PyObject *__pyx_v_depth, PyObject *__pyx_v_waveDir, PyObject *__pyx_v_g, PyObject *__pyx_v_N, PyObject *__pyx_v_bandFactor, PyObject *__pyx_v_spectName, PyObject *__pyx_v_spectral_params, PyObject *__pyx_v_phi, PyObject *__pyx_v_Lgen, PyObject *__pyx_v_Nwaves, PyObject *__pyx_v_Nfreq, PyObject *__pyx_v_checkAcc, PyObject *__pyx_v_fast); /* proto */
static PyObject *__pyx_pf_9WaveTools_15RandomWavesFast_2printOut(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static int __pyx_pf_9WaveTools_13RandomNLWaves___init__(struct __pyx_obj_9WaveTools_RandomNLWaves *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_Tstart, CYTHON_UNUSED PyObject *__pyx_v_Tend, PyObject *__pyx_v_Tp, PyObject *__pyx_v_Hs, PyObject *__pyx_v_mwl, PyObject *__pyx_v_depth, PyObject *__pyx_v_waveDir, PyObject *__pyx_v_g, PyObject *__pyx_v_N, PyObject *__pyx_v_bandFactor, PyObject *__pyx_v_spectName, PyObject *__pyx_v_spectral_params, PyObject *__pyx_v_phi, PyObject *__pyx_v_fast); /* proto */
static PyObject *__pyx_pf_9WaveTools_13RandomNLWaves_2eta_2ndOrder(struct __pyx_obj_9WaveTools_RandomNLWaves *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_t); /* proto */
static PyObject *__pyx_pf_9WaveTools_13RandomNLWaves_4eta_short(struct __pyx_obj_9WaveTools_RandomNLWaves *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_t); /* proto */
static PyObject *__pyx_pf_9WaveTools_13RandomNLWaves_6eta_long(struct __pyx_obj_9WaveTools_RandomNLWaves *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_t); /* proto */
static PyObject *__pyx_pf_9WaveTools_13RandomNLWaves_8eta_setUp(struct __pyx_obj_9WaveTools_RandomNLWaves *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_x, CYTHON_UNUSED PyObject *__pyx_v_t); /* proto */
static PyObject *__pyx_pf_9WaveTools_13RandomNLWaves_10eta_overall(struct __pyx_obj_9WaveTools_RandomNLWaves *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_t, PyObject *__pyx_v_setUp); /* proto */
static PyObject *__pyx_pf_9WaveTools_13RandomNLWaves_12writeEtaSeries(struct __pyx_obj_9WaveTools_RandomNLWaves *__pyx_v_self, PyObject *__pyx_v_Tstart, PyObject *__pyx_v_Tend, PyObject *__pyx_v_dt, PyObject *__pyx_v_x0, PyObject *__pyx_v_fname, PyObject *__pyx_v_mode, PyObject *__pyx_v_setUp, PyObject *__pyx_v_Lgen); /* proto */
static PyObject *__pyx_pf_9WaveTools_13RandomNLWaves_14wtError(CYTHON_UNUSED struct __pyx_obj_9WaveTools_RandomNLWaves *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_x, CYTHON_UNUSED PyObject *__pyx_v_t); /* proto */
static PyObject *__pyx_pf_9WaveTools_13RandomNLWaves_3eta___get__(struct __pyx_obj_9WaveTools_RandomNLWaves *__pyx_v_self); /* proto */
static int __pyx_pf_9WaveTools_13RandomNLWaves_3eta_2__set__(struct __pyx_obj_9WaveTools_RandomNLWaves *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_9WaveTools_13RandomNLWaves_3eta_4__del__(struct __pyx_obj_9WaveTools_RandomNLWaves *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9WaveTools_13RandomNLWaves_1u___get__(struct __pyx_obj_9WaveTools_RandomNLWaves *__pyx_v_self); /* proto */
static int __pyx_pf_9WaveTools_13RandomNLWaves_1u_2__set__(struct __pyx_obj_9WaveTools_RandomNLWaves *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_9WaveTools_13RandomNLWaves_1u_4__del__(struct __pyx_obj_9WaveTools_RandomNLWaves *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9WaveTools_13RandomNLWaves_10eta_linear___get__(struct __pyx_obj_9WaveTools_RandomNLWaves *__pyx_v_self); /* proto */
static int __pyx_pf_9WaveTools_13RandomNLWaves_10eta_linear_2__set__(struct __pyx_obj_9WaveTools_RandomNLWaves *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_9WaveTools_13RandomNLWaves_10eta_linear_4__del__(struct __pyx_obj_9WaveTools_RandomNLWaves *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9WaveTools_52__defaults__(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_9WaveTools_17RandomNLWavesFast___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_Tstart, PyObject *__pyx_v_Tend, PyObject *__pyx_v_x0, PyObject *__pyx_v_Tp, PyObject *__pyx_v_Hs, PyObject *__pyx_v_mwl, PyObject *__pyx_v_depth, PyObject *__pyx_v_waveDir, PyObject *__pyx_v_g, PyObject *__pyx_v_N, PyObject *__pyx_v_bandFactor, PyObject *__pyx_v_spectName, PyObject *__pyx_v_spectral_params, PyObject *__pyx_v_phi, PyObject *__pyx_v_Lgen, PyObject *__pyx_v_Nwaves, PyObject *__pyx_v_Nfreq, PyObject *__pyx_v_NLongW, PyObject *__pyx_v_fast); /* proto */
static PyObject *__pyx_pf_9WaveTools_17RandomNLWavesFast_2eta(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_t); /* proto */
static PyObject *__pyx_pf_9WaveTools_17RandomNLWavesFast_4u(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_t); /* proto */
static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info); /* proto */
static PyObject *__pyx_tp_new_9WaveTools_SolitaryWave(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9WaveTools_MonochromaticWaves(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9WaveTools_RandomWaves(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9WaveTools_MultiSpectraRandomWaves(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9WaveTools_DirectionalWaves(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9WaveTools_TimeSeries(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9WaveTools_RandomNLWaves(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_float_0_;
static PyObject *__pyx_float_1_;
static PyObject *__pyx_float_2_;
static PyObject *__pyx_float_4_;
static PyObject *__pyx_float_0_1;
static PyObject *__pyx_float_0_2;
static PyObject *__pyx_float_0_5;
static PyObject *__pyx_float_0_7;
static PyObject *__pyx_float_1_0;
static PyObject *__pyx_float_1_1;
static PyObject *__pyx_float_1_9;
static PyObject *__pyx_float_10_;
static PyObject *__pyx_float_2_0;
static PyObject *__pyx_float_3_0;
static PyObject *__pyx_float_3_3;
static PyObject *__pyx_float_4_0;
static PyObject *__pyx_float_50_;
static PyObject *__pyx_float_0_01;
static PyObject *__pyx_float_0_07;
static PyObject *__pyx_float_0_09;
static PyObject *__pyx_float_0_23;
static PyObject *__pyx_float_9_81;
static PyObject *__pyx_float_0_185;
static PyObject *__pyx_float_1eneg_10;
static PyObject *__pyx_float_0_0336;
static PyObject *__pyx_float_neg_2_5;
static PyObject *__pyx_float_neg_1_25;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_4;
static PyObject *__pyx_int_5;
static PyObject *__pyx_int_10;
static PyObject *__pyx_int_15;
static PyObject *__pyx_int_32;
static PyObject *__pyx_int_1000;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_int_neg_4;
static PyObject *__pyx_k__37;
static PyObject *__pyx_k__45;
static PyObject *__pyx_k__46;
static PyObject *__pyx_k__47;
static PyObject *__pyx_k__71;
static PyObject *__pyx_k__118;
static PyObject *__pyx_k__193;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_slice__4;
static PyObject *__pyx_slice__5;
static PyObject *__pyx_slice__6;
static PyObject *__pyx_slice__7;
static PyObject *__pyx_slice__8;
static PyObject *__pyx_slice__9;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_slice__10;
static PyObject *__pyx_slice__11;
static PyObject *__pyx_slice__13;
static PyObject *__pyx_slice__14;
static PyObject *__pyx_slice__16;
static PyObject *__pyx_slice__17;
static PyObject *__pyx_slice__19;
static PyObject *__pyx_slice__20;
static PyObject *__pyx_slice__22;
static PyObject *__pyx_slice__23;
static PyObject *__pyx_slice__24;
static PyObject *__pyx_slice__25;
static PyObject *__pyx_slice__26;
static PyObject *__pyx_slice__27;
static PyObject *__pyx_slice__31;
static PyObject *__pyx_slice__33;
static PyObject *__pyx_slice__34;
static PyObject *__pyx_slice__36;
static PyObject *__pyx_slice__38;
static PyObject *__pyx_slice__39;
static PyObject *__pyx_slice__40;
static PyObject *__pyx_slice__41;
static PyObject *__pyx_slice__42;
static PyObject *__pyx_slice__43;
static PyObject *__pyx_slice__65;
static PyObject *__pyx_slice__66;
static PyObject *__pyx_slice__72;
static PyObject *__pyx_slice__73;
static PyObject *__pyx_slice__76;
static PyObject *__pyx_slice__77;
static PyObject *__pyx_slice__78;
static PyObject *__pyx_slice__80;
static PyObject *__pyx_slice__87;
static PyObject *__pyx_slice__88;
static PyObject *__pyx_slice__90;
static PyObject *__pyx_slice__97;
static PyObject *__pyx_slice__99;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__44;
static PyObject *__pyx_tuple__48;
static PyObject *__pyx_tuple__49;
static PyObject *__pyx_tuple__50;
static PyObject *__pyx_tuple__51;
static PyObject *__pyx_tuple__52;
static PyObject *__pyx_tuple__53;
static PyObject *__pyx_tuple__54;
static PyObject *__pyx_tuple__55;
static PyObject *__pyx_tuple__56;
static PyObject *__pyx_tuple__57;
static PyObject *__pyx_tuple__58;
static PyObject *__pyx_tuple__59;
static PyObject *__pyx_tuple__60;
static PyObject *__pyx_tuple__61;
static PyObject *__pyx_tuple__62;
static PyObject *__pyx_tuple__63;
static PyObject *__pyx_tuple__64;
static PyObject *__pyx_tuple__67;
static PyObject *__pyx_tuple__68;
static PyObject *__pyx_tuple__69;
static PyObject *__pyx_tuple__70;
static PyObject *__pyx_tuple__74;
static PyObject *__pyx_tuple__75;
static PyObject *__pyx_tuple__79;
static PyObject *__pyx_tuple__81;
static PyObject *__pyx_tuple__82;
static PyObject *__pyx_tuple__83;
static PyObject *__pyx_tuple__84;
static PyObject *__pyx_tuple__85;
static PyObject *__pyx_tuple__86;
static PyObject *__pyx_tuple__89;
static PyObject *__pyx_tuple__91;
static PyObject *__pyx_tuple__92;
static PyObject *__pyx_tuple__93;
static PyObject *__pyx_tuple__94;
static PyObject *__pyx_tuple__95;
static PyObject *__pyx_tuple__96;
static PyObject *__pyx_tuple__98;
static PyObject *__pyx_slice__101;
static PyObject *__pyx_slice__102;
static PyObject *__pyx_slice__103;
static PyObject *__pyx_slice__106;
static PyObject *__pyx_slice__107;
static PyObject *__pyx_slice__109;
static PyObject *__pyx_slice__110;
static PyObject *__pyx_slice__111;
static PyObject *__pyx_slice__112;
static PyObject *__pyx_slice__113;
static PyObject *__pyx_slice__114;
static PyObject *__pyx_slice__121;
static PyObject *__pyx_slice__124;
static PyObject *__pyx_slice__127;
static PyObject *__pyx_slice__131;
static PyObject *__pyx_slice__133;
static PyObject *__pyx_slice__136;
static PyObject *__pyx_slice__137;
static PyObject *__pyx_slice__155;
static PyObject *__pyx_slice__157;
static PyObject *__pyx_slice__159;
static PyObject *__pyx_slice__161;
static PyObject *__pyx_slice__163;
static PyObject *__pyx_slice__164;
static PyObject *__pyx_slice__165;
static PyObject *__pyx_slice__166;
static PyObject *__pyx_slice__183;
static PyObject *__pyx_slice__185;
static PyObject *__pyx_slice__187;
static PyObject *__pyx_slice__194;
static PyObject *__pyx_slice__195;
static PyObject *__pyx_slice__198;
static PyObject *__pyx_slice__199;
static PyObject *__pyx_slice__200;
static PyObject *__pyx_slice__205;
static PyObject *__pyx_tuple__100;
static PyObject *__pyx_tuple__104;
static PyObject *__pyx_tuple__105;
static PyObject *__pyx_tuple__108;
static PyObject *__pyx_tuple__115;
static PyObject *__pyx_tuple__116;
static PyObject *__pyx_tuple__117;
static PyObject *__pyx_tuple__119;
static PyObject *__pyx_tuple__120;
static PyObject *__pyx_tuple__122;
static PyObject *__pyx_tuple__125;
static PyObject *__pyx_tuple__126;
static PyObject *__pyx_tuple__128;
static PyObject *__pyx_tuple__129;
static PyObject *__pyx_tuple__130;
static PyObject *__pyx_tuple__132;
static PyObject *__pyx_tuple__134;
static PyObject *__pyx_tuple__135;
static PyObject *__pyx_tuple__138;
static PyObject *__pyx_tuple__139;
static PyObject *__pyx_tuple__140;
static PyObject *__pyx_tuple__141;
static PyObject *__pyx_tuple__142;
static PyObject *__pyx_tuple__143;
static PyObject *__pyx_tuple__144;
static PyObject *__pyx_tuple__145;
static PyObject *__pyx_tuple__146;
static PyObject *__pyx_tuple__147;
static PyObject *__pyx_tuple__148;
static PyObject *__pyx_tuple__149;
static PyObject *__pyx_tuple__150;
static PyObject *__pyx_tuple__151;
static PyObject *__pyx_tuple__152;
static PyObject *__pyx_tuple__153;
static PyObject *__pyx_tuple__154;
static PyObject *__pyx_tuple__156;
static PyObject *__pyx_tuple__158;
static PyObject *__pyx_tuple__160;
static PyObject *__pyx_tuple__162;
static PyObject *__pyx_tuple__167;
static PyObject *__pyx_tuple__168;
static PyObject *__pyx_tuple__169;
static PyObject *__pyx_tuple__170;
static PyObject *__pyx_tuple__171;
static PyObject *__pyx_tuple__172;
static PyObject *__pyx_tuple__173;
static PyObject *__pyx_tuple__174;
static PyObject *__pyx_tuple__175;
static PyObject *__pyx_tuple__176;
static PyObject *__pyx_tuple__177;
static PyObject *__pyx_tuple__178;
static PyObject *__pyx_tuple__179;
static PyObject *__pyx_tuple__180;
static PyObject *__pyx_tuple__181;
static PyObject *__pyx_tuple__182;
static PyObject *__pyx_tuple__184;
static PyObject *__pyx_tuple__186;
static PyObject *__pyx_tuple__188;
static PyObject *__pyx_tuple__189;
static PyObject *__pyx_tuple__190;
static PyObject *__pyx_tuple__191;
static PyObject *__pyx_tuple__192;
static PyObject *__pyx_tuple__196;
static PyObject *__pyx_tuple__197;
static PyObject *__pyx_tuple__201;
static PyObject *__pyx_tuple__202;
static PyObject *__pyx_tuple__203;
static PyObject *__pyx_tuple__206;
static PyObject *__pyx_tuple__207;
static PyObject *__pyx_tuple__208;
static PyObject *__pyx_tuple__209;
static PyObject *__pyx_tuple__210;
static PyObject *__pyx_tuple__211;
static PyObject *__pyx_tuple__212;
static PyObject *__pyx_tuple__213;
static PyObject *__pyx_tuple__214;
static PyObject *__pyx_tuple__215;
static PyObject *__pyx_tuple__216;
static PyObject *__pyx_tuple__217;
static PyObject *__pyx_tuple__218;
static PyObject *__pyx_tuple__220;
static PyObject *__pyx_tuple__221;
static PyObject *__pyx_tuple__223;
static PyObject *__pyx_tuple__224;
static PyObject *__pyx_tuple__226;
static PyObject *__pyx_tuple__227;
static PyObject *__pyx_tuple__229;
static PyObject *__pyx_tuple__230;
static PyObject *__pyx_tuple__232;
static PyObject *__pyx_tuple__233;
static PyObject *__pyx_tuple__235;
static PyObject *__pyx_tuple__237;
static PyObject *__pyx_tuple__239;
static PyObject *__pyx_tuple__241;
static PyObject *__pyx_tuple__243;
static PyObject *__pyx_tuple__245;
static PyObject *__pyx_tuple__247;
static PyObject *__pyx_tuple__249;
static PyObject *__pyx_tuple__251;
static PyObject *__pyx_tuple__253;
static PyObject *__pyx_tuple__255;
static PyObject *__pyx_tuple__257;
static PyObject *__pyx_tuple__259;
static PyObject *__pyx_tuple__260;
static PyObject *__pyx_tuple__262;
static PyObject *__pyx_tuple__264;
static PyObject *__pyx_tuple__265;
static PyObject *__pyx_tuple__267;
static PyObject *__pyx_tuple__268;
static PyObject *__pyx_tuple__270;
static PyObject *__pyx_tuple__271;
static PyObject *__pyx_tuple__273;
static PyObject *__pyx_tuple__275;
static PyObject *__pyx_tuple__276;
static PyObject *__pyx_tuple__278;
static PyObject *__pyx_tuple__280;
static PyObject *__pyx_tuple__281;
static PyObject *__pyx_tuple__283;
static PyObject *__pyx_tuple__285;
static PyObject *__pyx_tuple__286;
static PyObject *__pyx_tuple__288;
static PyObject *__pyx_tuple__290;
static PyObject *__pyx_tuple__291;
static PyObject *__pyx_tuple__292;
static PyObject *__pyx_tuple__294;
static PyObject *__pyx_tuple__296;
static PyObject *__pyx_tuple__298;
static PyObject *__pyx_tuple__300;
static PyObject *__pyx_tuple__302;
static PyObject *__pyx_tuple__304;
static PyObject *__pyx_tuple__306;
static PyObject *__pyx_tuple__308;
static PyObject *__pyx_tuple__310;
static PyObject *__pyx_tuple__312;
static PyObject *__pyx_tuple__314;
static PyObject *__pyx_tuple__316;
static PyObject *__pyx_tuple__318;
static PyObject *__pyx_tuple__320;
static PyObject *__pyx_tuple__322;
static PyObject *__pyx_tuple__324;
static PyObject *__pyx_tuple__326;
static PyObject *__pyx_tuple__328;
static PyObject *__pyx_tuple__330;
static PyObject *__pyx_tuple__332;
static PyObject *__pyx_tuple__334;
static PyObject *__pyx_tuple__336;
static PyObject *__pyx_tuple__338;
static PyObject *__pyx_tuple__340;
static PyObject *__pyx_tuple__342;
static PyObject *__pyx_tuple__344;
static PyObject *__pyx_codeobj__219;
static PyObject *__pyx_codeobj__222;
static PyObject *__pyx_codeobj__225;
static PyObject *__pyx_codeobj__228;
static PyObject *__pyx_codeobj__231;
static PyObject *__pyx_codeobj__234;
static PyObject *__pyx_codeobj__236;
static PyObject *__pyx_codeobj__238;
static PyObject *__pyx_codeobj__240;
static PyObject *__pyx_codeobj__242;
static PyObject *__pyx_codeobj__244;
static PyObject *__pyx_codeobj__246;
static PyObject *__pyx_codeobj__248;
static PyObject *__pyx_codeobj__250;
static PyObject *__pyx_codeobj__252;
static PyObject *__pyx_codeobj__254;
static PyObject *__pyx_codeobj__256;
static PyObject *__pyx_codeobj__258;
static PyObject *__pyx_codeobj__261;
static PyObject *__pyx_codeobj__263;
static PyObject *__pyx_codeobj__266;
static PyObject *__pyx_codeobj__269;
static PyObject *__pyx_codeobj__272;
static PyObject *__pyx_codeobj__274;
static PyObject *__pyx_codeobj__277;
static PyObject *__pyx_codeobj__279;
static PyObject *__pyx_codeobj__282;
static PyObject *__pyx_codeobj__284;
static PyObject *__pyx_codeobj__287;
static PyObject *__pyx_codeobj__289;
static PyObject *__pyx_codeobj__293;
static PyObject *__pyx_codeobj__295;
static PyObject *__pyx_codeobj__297;
static PyObject *__pyx_codeobj__299;
static PyObject *__pyx_codeobj__301;
static PyObject *__pyx_codeobj__303;
static PyObject *__pyx_codeobj__305;
static PyObject *__pyx_codeobj__307;
static PyObject *__pyx_codeobj__309;
static PyObject *__pyx_codeobj__311;
static PyObject *__pyx_codeobj__313;
static PyObject *__pyx_codeobj__315;
static PyObject *__pyx_codeobj__317;
static PyObject *__pyx_codeobj__319;
static PyObject *__pyx_codeobj__321;
static PyObject *__pyx_codeobj__323;
static PyObject *__pyx_codeobj__325;
static PyObject *__pyx_codeobj__327;
static PyObject *__pyx_codeobj__329;
static PyObject *__pyx_codeobj__331;
static PyObject *__pyx_codeobj__333;
static PyObject *__pyx_codeobj__335;
static PyObject *__pyx_codeobj__337;
static PyObject *__pyx_codeobj__339;
static PyObject *__pyx_codeobj__341;
static PyObject *__pyx_codeobj__343;
static PyObject *__pyx_codeobj__345;

/* "WaveTools.py":56
 * 
 * 
 * def fastcos_test(phase,sinus=False):             # <<<<<<<<<<<<<<
 *     """Fast cosine function with Taylor approximation - TO BE USED FOR TESTING"
 *     Parameters
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_1fastcos_test(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9WaveTools_fastcos_test[] = "Fast cosine function with Taylor approximation - TO BE USED FOR TESTING\"\n    Parameters\n    ----------\n    phase : double\n            Phase  \n    sinus : bool\n            Switch for cosine or sine calculation\n    \n    Returns\n    --------\n    cos(phi) or sin(phi)\n\n    ";
static PyMethodDef __pyx_mdef_9WaveTools_1fastcos_test = {"fastcos_test", (PyCFunction)__pyx_pw_9WaveTools_1fastcos_test, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_fastcos_test};
static PyObject *__pyx_pw_9WaveTools_1fastcos_test(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_phase = 0;
  PyObject *__pyx_v_sinus = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fastcos_test (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_phase,&__pyx_n_s_sinus,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)((PyObject *)Py_False));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_phase)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sinus);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "fastcos_test") < 0)) __PYX_ERR(0, 56, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_phase = values[0];
    __pyx_v_sinus = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fastcos_test", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 56, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("WaveTools.fastcos_test", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9WaveTools_fastcos_test(__pyx_self, __pyx_v_phase, __pyx_v_sinus);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_fastcos_test(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_phase, PyObject *__pyx_v_sinus) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  __Pyx_RefNannySetupContext("fastcos_test", 0);
  __Pyx_INCREF(__pyx_v_phase);

  /* "WaveTools.py":70
 * 
 *     """
 *     if(sinus):             # <<<<<<<<<<<<<<
 *         phase = np.pi/2. - phase
 *     return fastcos(phase,True)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_sinus); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 70, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "WaveTools.py":71
 *     """
 *     if(sinus):
 *         phase = np.pi/2. - phase             # <<<<<<<<<<<<<<
 *     return fastcos(phase,True)
 * def fastcosh_test(k,Z,fast=True):
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 71, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_pi); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 71, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyFloat_DivideObjC(__pyx_t_3, __pyx_float_2_, 2., 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 71, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Subtract(__pyx_t_2, __pyx_v_phase); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 71, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_phase, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "WaveTools.py":70
 * 
 *     """
 *     if(sinus):             # <<<<<<<<<<<<<<
 *         phase = np.pi/2. - phase
 *     return fastcos(phase,True)
 */
  }

  /* "WaveTools.py":72
 *     if(sinus):
 *         phase = np.pi/2. - phase
 *     return fastcos(phase,True)             # <<<<<<<<<<<<<<
 * def fastcosh_test(k,Z,fast=True):
 *     """Fast hyperbolic cosine function with Taylor approximation - TO BE USED FOR TESTING"
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_phase); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 72, __pyx_L1_error)
  __pyx_t_3 = PyFloat_FromDouble(proteus::fastcos(__pyx_t_4, 1)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "WaveTools.py":56
 * 
 * 
 * def fastcos_test(phase,sinus=False):             # <<<<<<<<<<<<<<
 *     """Fast cosine function with Taylor approximation - TO BE USED FOR TESTING"
 *     Parameters
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("WaveTools.fastcos_test", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_phase);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":73
 *         phase = np.pi/2. - phase
 *     return fastcos(phase,True)
 * def fastcosh_test(k,Z,fast=True):             # <<<<<<<<<<<<<<
 *     """Fast hyperbolic cosine function with Taylor approximation - TO BE USED FOR TESTING"
 *     Parameters
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_3fastcosh_test(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9WaveTools_2fastcosh_test[] = "Fast hyperbolic cosine function with Taylor approximation - TO BE USED FOR TESTING\"\n    Parameters\n    ----------\n    k : double\n        Wavenumber\n    Z : double\n        Z coordinate\n    Returns\n    --------\n    cosh(k*z)\n\n    ";
static PyMethodDef __pyx_mdef_9WaveTools_3fastcosh_test = {"fastcosh_test", (PyCFunction)__pyx_pw_9WaveTools_3fastcosh_test, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_2fastcosh_test};
static PyObject *__pyx_pw_9WaveTools_3fastcosh_test(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_k = 0;
  PyObject *__pyx_v_Z = 0;
  PyObject *__pyx_v_fast = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fastcosh_test (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_k,&__pyx_n_s_Z,&__pyx_n_s_fast,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)((PyObject *)Py_True));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_k)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Z)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fastcosh_test", 0, 2, 3, 1); __PYX_ERR(0, 73, __pyx_L3_error)
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fast);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "fastcosh_test") < 0)) __PYX_ERR(0, 73, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_k = values[0];
    __pyx_v_Z = values[1];
    __pyx_v_fast = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fastcosh_test", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 73, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("WaveTools.fastcosh_test", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9WaveTools_2fastcosh_test(__pyx_self, __pyx_v_k, __pyx_v_Z, __pyx_v_fast);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_2fastcosh_test(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_k, PyObject *__pyx_v_Z, PyObject *__pyx_v_fast) {
  double __pyx_v_xx[2];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  double __pyx_t_2;
  bool __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("fastcosh_test", 0);

  /* "WaveTools.py":87
 *     """
 *     cython.declare(xx=cython.double[2])
 *     fastcosh(xx,k,Z,fast)             # <<<<<<<<<<<<<<
 *     return xx[0]
 * def fastsinh_test(k,Z,fast=True):
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_k); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 87, __pyx_L1_error)
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_Z); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 87, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_fast); if (unlikely((__pyx_t_3 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 87, __pyx_L1_error)
  proteus::fastcosh(__pyx_v_xx, __pyx_t_1, __pyx_t_2, __pyx_t_3);

  /* "WaveTools.py":88
 *     cython.declare(xx=cython.double[2])
 *     fastcosh(xx,k,Z,fast)
 *     return xx[0]             # <<<<<<<<<<<<<<
 * def fastsinh_test(k,Z,fast=True):
 *     """Fast hyperbolic sine function with Taylor approximation - TO BE USED FOR TESTING"
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = PyFloat_FromDouble((__pyx_v_xx[0])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "WaveTools.py":73
 *         phase = np.pi/2. - phase
 *     return fastcos(phase,True)
 * def fastcosh_test(k,Z,fast=True):             # <<<<<<<<<<<<<<
 *     """Fast hyperbolic cosine function with Taylor approximation - TO BE USED FOR TESTING"
 *     Parameters
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("WaveTools.fastcosh_test", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":89
 *     fastcosh(xx,k,Z,fast)
 *     return xx[0]
 * def fastsinh_test(k,Z,fast=True):             # <<<<<<<<<<<<<<
 *     """Fast hyperbolic sine function with Taylor approximation - TO BE USED FOR TESTING"
 *     Parameters
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_5fastsinh_test(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9WaveTools_4fastsinh_test[] = "Fast hyperbolic sine function with Taylor approximation - TO BE USED FOR TESTING\"\n    Parameters\n    ----------\n    k : double\n        Wavenumber\n    Z : double\n        Z coordinate\n    Returns\n    --------\n    sinh(k*z)\n\n    ";
static PyMethodDef __pyx_mdef_9WaveTools_5fastsinh_test = {"fastsinh_test", (PyCFunction)__pyx_pw_9WaveTools_5fastsinh_test, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_4fastsinh_test};
static PyObject *__pyx_pw_9WaveTools_5fastsinh_test(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_k = 0;
  PyObject *__pyx_v_Z = 0;
  PyObject *__pyx_v_fast = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fastsinh_test (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_k,&__pyx_n_s_Z,&__pyx_n_s_fast,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)((PyObject *)Py_True));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_k)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Z)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fastsinh_test", 0, 2, 3, 1); __PYX_ERR(0, 89, __pyx_L3_error)
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fast);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "fastsinh_test") < 0)) __PYX_ERR(0, 89, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_k = values[0];
    __pyx_v_Z = values[1];
    __pyx_v_fast = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fastsinh_test", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 89, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("WaveTools.fastsinh_test", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9WaveTools_4fastsinh_test(__pyx_self, __pyx_v_k, __pyx_v_Z, __pyx_v_fast);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_4fastsinh_test(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_k, PyObject *__pyx_v_Z, PyObject *__pyx_v_fast) {
  double __pyx_v_xx[2];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  double __pyx_t_2;
  bool __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("fastsinh_test", 0);

  /* "WaveTools.py":103
 *     """
 *     cython.declare(xx=cython.double[2])
 *     fastcosh(xx,k,Z,fast)             # <<<<<<<<<<<<<<
 *     return xx[1]
 * 
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_k); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 103, __pyx_L1_error)
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_Z); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 103, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_fast); if (unlikely((__pyx_t_3 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 103, __pyx_L1_error)
  proteus::fastcosh(__pyx_v_xx, __pyx_t_1, __pyx_t_2, __pyx_t_3);

  /* "WaveTools.py":104
 *     cython.declare(xx=cython.double[2])
 *     fastcosh(xx,k,Z,fast)
 *     return xx[1]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = PyFloat_FromDouble((__pyx_v_xx[1])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "WaveTools.py":89
 *     fastcosh(xx,k,Z,fast)
 *     return xx[0]
 * def fastsinh_test(k,Z,fast=True):             # <<<<<<<<<<<<<<
 *     """Fast hyperbolic sine function with Taylor approximation - TO BE USED FOR TESTING"
 *     Parameters
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("WaveTools.fastsinh_test", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":107
 * 
 * 
 * def coshkzd_test(k,Z,d, fast=True):             # <<<<<<<<<<<<<<
 *     """Calculation of u horizontal profile cosh(k(d+Z))/sinh(kd) using fast appoximaitons
 *     and hyp trig relation cosh(a+b) = cosha*coshb+sinha*sinhb
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_7coshkzd_test(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9WaveTools_6coshkzd_test[] = "Calculation of u horizontal profile cosh(k(d+Z))/sinh(kd) using fast appoximaitons\n    and hyp trig relation cosh(a+b) = cosha*coshb+sinha*sinhb\n    Parameters\n    ----------\n    ----------\n    k : double\n        Wavenumber\n    Z : double\n        Z coordinate\n    d : double\n        depth\n    Returns\n    --------\n    cosh(k*(z+d))/sinh(kd) for Z>-d/2, 0 otherwise\n\n    ";
static PyMethodDef __pyx_mdef_9WaveTools_7coshkzd_test = {"coshkzd_test", (PyCFunction)__pyx_pw_9WaveTools_7coshkzd_test, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_6coshkzd_test};
static PyObject *__pyx_pw_9WaveTools_7coshkzd_test(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_k = 0;
  PyObject *__pyx_v_Z = 0;
  PyObject *__pyx_v_d = 0;
  PyObject *__pyx_v_fast = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("coshkzd_test (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_k,&__pyx_n_s_Z,&__pyx_n_s_d,&__pyx_n_s_fast,0};
    PyObject* values[4] = {0,0,0,0};
    values[3] = ((PyObject *)((PyObject *)Py_True));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_k)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Z)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("coshkzd_test", 0, 3, 4, 1); __PYX_ERR(0, 107, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_d)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("coshkzd_test", 0, 3, 4, 2); __PYX_ERR(0, 107, __pyx_L3_error)
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fast);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "coshkzd_test") < 0)) __PYX_ERR(0, 107, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_k = values[0];
    __pyx_v_Z = values[1];
    __pyx_v_d = values[2];
    __pyx_v_fast = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("coshkzd_test", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 107, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("WaveTools.coshkzd_test", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9WaveTools_6coshkzd_test(__pyx_self, __pyx_v_k, __pyx_v_Z, __pyx_v_d, __pyx_v_fast);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_6coshkzd_test(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_k, PyObject *__pyx_v_Z, PyObject *__pyx_v_d, PyObject *__pyx_v_fast) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("coshkzd_test", 0);

  /* "WaveTools.py":124
 * 
 *     """
 *     if (Z > -d/2.):             # <<<<<<<<<<<<<<
 *         return fastcosh_test(k,Z,fast) / np.tanh(k*d) + fastsinh_test(k,Z,fast)
 *     else:
 */
  __pyx_t_1 = PyNumber_Negative(__pyx_v_d); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyFloat_DivideObjC(__pyx_t_1, __pyx_float_2_, 2., 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_Z, __pyx_t_2, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "WaveTools.py":125
 *     """
 *     if (Z > -d/2.):
 *         return fastcosh_test(k,Z,fast) / np.tanh(k*d) + fastsinh_test(k,Z,fast)             # <<<<<<<<<<<<<<
 *     else:
 *         return 0.
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_fastcosh_test); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_5 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_v_k, __pyx_v_Z, __pyx_v_fast};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 125, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_v_k, __pyx_v_Z, __pyx_v_fast};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 125, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(3+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 125, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      if (__pyx_t_4) {
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
      }
      __Pyx_INCREF(__pyx_v_k);
      __Pyx_GIVEREF(__pyx_v_k);
      PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_v_k);
      __Pyx_INCREF(__pyx_v_Z);
      __Pyx_GIVEREF(__pyx_v_Z);
      PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_v_Z);
      __Pyx_INCREF(__pyx_v_fast);
      __Pyx_GIVEREF(__pyx_v_fast);
      PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_5, __pyx_v_fast);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 125, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_tanh); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyNumber_Multiply(__pyx_v_k, __pyx_v_d); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_7) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 125, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_6};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 125, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_6};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 125, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      {
        __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 125, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 125, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_fastsinh_test); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_5 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[4] = {__pyx_t_8, __pyx_v_k, __pyx_v_Z, __pyx_v_fast};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 125, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[4] = {__pyx_t_8, __pyx_v_k, __pyx_v_Z, __pyx_v_fast};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 125, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(3+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 125, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      if (__pyx_t_8) {
        __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_8); __pyx_t_8 = NULL;
      }
      __Pyx_INCREF(__pyx_v_k);
      __Pyx_GIVEREF(__pyx_v_k);
      PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_v_k);
      __Pyx_INCREF(__pyx_v_Z);
      __Pyx_GIVEREF(__pyx_v_Z);
      PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_v_Z);
      __Pyx_INCREF(__pyx_v_fast);
      __Pyx_GIVEREF(__pyx_v_fast);
      PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_5, __pyx_v_fast);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 125, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Add(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "WaveTools.py":124
 * 
 *     """
 *     if (Z > -d/2.):             # <<<<<<<<<<<<<<
 *         return fastcosh_test(k,Z,fast) / np.tanh(k*d) + fastsinh_test(k,Z,fast)
 *     else:
 */
  }

  /* "WaveTools.py":127
 *         return fastcosh_test(k,Z,fast) / np.tanh(k*d) + fastsinh_test(k,Z,fast)
 *     else:
 *         return 0.             # <<<<<<<<<<<<<<
 * 
 * def sinhkzd_test(k,Z,d,fast=True):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_float_0_);
    __pyx_r = __pyx_float_0_;
    goto __pyx_L0;
  }

  /* "WaveTools.py":107
 * 
 * 
 * def coshkzd_test(k,Z,d, fast=True):             # <<<<<<<<<<<<<<
 *     """Calculation of u horizontal profile cosh(k(d+Z))/sinh(kd) using fast appoximaitons
 *     and hyp trig relation cosh(a+b) = cosha*coshb+sinha*sinhb
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("WaveTools.coshkzd_test", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":129
 *         return 0.
 * 
 * def sinhkzd_test(k,Z,d,fast=True):             # <<<<<<<<<<<<<<
 *     """Calculation of v vertical profile cosh(k(d+Z))/sinh(kd) using fast appoximaitons
 *     and hyp trig relation sinh(a+b) = sinha*coshb+cosha*sinhb
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_9sinhkzd_test(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9WaveTools_8sinhkzd_test[] = "Calculation of v vertical profile cosh(k(d+Z))/sinh(kd) using fast appoximaitons\n    and hyp trig relation sinh(a+b) = sinha*coshb+cosha*sinhb\n    Parameters\n    ----------\n    ----------\n    k : double\n        Wavenumber\n    Z : double\n        Z coordinate\n    d : double\n        depth\n    Returns\n    --------\n    sinh(k*(z+d))/sinh(kd) for Z>-d/2, 0 otherwise\n\n    ";
static PyMethodDef __pyx_mdef_9WaveTools_9sinhkzd_test = {"sinhkzd_test", (PyCFunction)__pyx_pw_9WaveTools_9sinhkzd_test, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_8sinhkzd_test};
static PyObject *__pyx_pw_9WaveTools_9sinhkzd_test(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_k = 0;
  PyObject *__pyx_v_Z = 0;
  PyObject *__pyx_v_d = 0;
  PyObject *__pyx_v_fast = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sinhkzd_test (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_k,&__pyx_n_s_Z,&__pyx_n_s_d,&__pyx_n_s_fast,0};
    PyObject* values[4] = {0,0,0,0};
    values[3] = ((PyObject *)((PyObject *)Py_True));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_k)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Z)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sinhkzd_test", 0, 3, 4, 1); __PYX_ERR(0, 129, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_d)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sinhkzd_test", 0, 3, 4, 2); __PYX_ERR(0, 129, __pyx_L3_error)
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fast);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sinhkzd_test") < 0)) __PYX_ERR(0, 129, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_k = values[0];
    __pyx_v_Z = values[1];
    __pyx_v_d = values[2];
    __pyx_v_fast = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sinhkzd_test", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 129, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("WaveTools.sinhkzd_test", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9WaveTools_8sinhkzd_test(__pyx_self, __pyx_v_k, __pyx_v_Z, __pyx_v_d, __pyx_v_fast);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_8sinhkzd_test(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_k, PyObject *__pyx_v_Z, PyObject *__pyx_v_d, PyObject *__pyx_v_fast) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("sinhkzd_test", 0);

  /* "WaveTools.py":147
 *     """
 * 
 *     if (Z> -d/2.):             # <<<<<<<<<<<<<<
 *         return fastcosh_test(k,Z,fast) + fastsinh_test(k,Z,fast) / np.tanh(k*d)
 *     else:
 */
  __pyx_t_1 = PyNumber_Negative(__pyx_v_d); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyFloat_DivideObjC(__pyx_t_1, __pyx_float_2_, 2., 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_Z, __pyx_t_2, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "WaveTools.py":148
 * 
 *     if (Z> -d/2.):
 *         return fastcosh_test(k,Z,fast) + fastsinh_test(k,Z,fast) / np.tanh(k*d)             # <<<<<<<<<<<<<<
 *     else:
 *         return 0.
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_fastcosh_test); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_5 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_v_k, __pyx_v_Z, __pyx_v_fast};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 148, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_v_k, __pyx_v_Z, __pyx_v_fast};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 148, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(3+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 148, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      if (__pyx_t_4) {
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
      }
      __Pyx_INCREF(__pyx_v_k);
      __Pyx_GIVEREF(__pyx_v_k);
      PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_v_k);
      __Pyx_INCREF(__pyx_v_Z);
      __Pyx_GIVEREF(__pyx_v_Z);
      PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_v_Z);
      __Pyx_INCREF(__pyx_v_fast);
      __Pyx_GIVEREF(__pyx_v_fast);
      PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_5, __pyx_v_fast);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 148, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_fastsinh_test); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_5 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_v_k, __pyx_v_Z, __pyx_v_fast};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 148, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_v_k, __pyx_v_Z, __pyx_v_fast};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 148, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(3+__pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 148, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_4) {
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4); __pyx_t_4 = NULL;
      }
      __Pyx_INCREF(__pyx_v_k);
      __Pyx_GIVEREF(__pyx_v_k);
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_5, __pyx_v_k);
      __Pyx_INCREF(__pyx_v_Z);
      __Pyx_GIVEREF(__pyx_v_Z);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_5, __pyx_v_Z);
      __Pyx_INCREF(__pyx_v_fast);
      __Pyx_GIVEREF(__pyx_v_fast);
      PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_5, __pyx_v_fast);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 148, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_tanh); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyNumber_Multiply(__pyx_v_k, __pyx_v_d); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_8) {
      __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 148, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_6);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_7};
        __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 148, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_7};
        __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 148, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else
      #endif
      {
        __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 148, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8); __pyx_t_8 = NULL;
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_9, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 148, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_t_2, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyNumber_Add(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;

    /* "WaveTools.py":147
 *     """
 * 
 *     if (Z> -d/2.):             # <<<<<<<<<<<<<<
 *         return fastcosh_test(k,Z,fast) + fastsinh_test(k,Z,fast) / np.tanh(k*d)
 *     else:
 */
  }

  /* "WaveTools.py":150
 *         return fastcosh_test(k,Z,fast) + fastsinh_test(k,Z,fast) / np.tanh(k*d)
 *     else:
 *         return 0.             # <<<<<<<<<<<<<<
 * 
 * def loadExistingFunction(funcName, validFunctions):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_float_0_);
    __pyx_r = __pyx_float_0_;
    goto __pyx_L0;
  }

  /* "WaveTools.py":129
 *         return 0.
 * 
 * def sinhkzd_test(k,Z,d,fast=True):             # <<<<<<<<<<<<<<
 *     """Calculation of v vertical profile cosh(k(d+Z))/sinh(kd) using fast appoximaitons
 *     and hyp trig relation sinh(a+b) = sinha*coshb+cosha*sinhb
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("WaveTools.sinhkzd_test", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":152
 *         return 0.
 * 
 * def loadExistingFunction(funcName, validFunctions):             # <<<<<<<<<<<<<<
 *     """Checks if a function name is known function and returns it
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_11loadExistingFunction(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9WaveTools_10loadExistingFunction[] = "Checks if a function name is known function and returns it\n\n    Checks if a function name is present in a list of functions.\n    If True, the function is returned. If False, raises SystemExit.\n\n    Parameters\n    ----------\n    funcName : string\n            Function name\n    validFunctions : List[function]\n            List of valid functions (list of objects)\n\n    Returns\n    --------\n    function\n\n    Raises\n    ---------\n    SystemExit\n\n\n    ";
static PyMethodDef __pyx_mdef_9WaveTools_11loadExistingFunction = {"loadExistingFunction", (PyCFunction)__pyx_pw_9WaveTools_11loadExistingFunction, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_10loadExistingFunction};
static PyObject *__pyx_pw_9WaveTools_11loadExistingFunction(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_funcName = 0;
  PyObject *__pyx_v_validFunctions = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("loadExistingFunction (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_funcName,&__pyx_n_s_validFunctions,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_funcName)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_validFunctions)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("loadExistingFunction", 1, 2, 2, 1); __PYX_ERR(0, 152, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "loadExistingFunction") < 0)) __PYX_ERR(0, 152, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_funcName = values[0];
    __pyx_v_validFunctions = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("loadExistingFunction", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 152, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("WaveTools.loadExistingFunction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9WaveTools_10loadExistingFunction(__pyx_self, __pyx_v_funcName, __pyx_v_validFunctions);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_10loadExistingFunction(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_funcName, PyObject *__pyx_v_validFunctions) {
  PyObject *__pyx_v_funcNames = NULL;
  PyObject *__pyx_v_func = NULL;
  PyObject *__pyx_v_func_ret = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("loadExistingFunction", 0);

  /* "WaveTools.py":175
 * 
 *     """
 *     funcNames = []             # <<<<<<<<<<<<<<
 *     for func  in validFunctions:
 *             funcNames.append(func.__name__)
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_funcNames = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "WaveTools.py":176
 *     """
 *     funcNames = []
 *     for func  in validFunctions:             # <<<<<<<<<<<<<<
 *             funcNames.append(func.__name__)
 *             if func.__name__ == funcName:
 */
  if (likely(PyList_CheckExact(__pyx_v_validFunctions)) || PyTuple_CheckExact(__pyx_v_validFunctions)) {
    __pyx_t_1 = __pyx_v_validFunctions; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_validFunctions); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 176, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 176, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 176, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 176, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 176, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 176, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 176, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_func, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "WaveTools.py":177
 *     funcNames = []
 *     for func  in validFunctions:
 *             funcNames.append(func.__name__)             # <<<<<<<<<<<<<<
 *             if func.__name__ == funcName:
 *                 func_ret = func
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_func, __pyx_n_s_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 177, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_funcNames, __pyx_t_4); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 177, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "WaveTools.py":178
 *     for func  in validFunctions:
 *             funcNames.append(func.__name__)
 *             if func.__name__ == funcName:             # <<<<<<<<<<<<<<
 *                 func_ret = func
 *     if funcName not in funcNames:
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_func, __pyx_n_s_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = PyObject_RichCompare(__pyx_t_4, __pyx_v_funcName, Py_EQ); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 178, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 178, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (__pyx_t_7) {

      /* "WaveTools.py":179
 *             funcNames.append(func.__name__)
 *             if func.__name__ == funcName:
 *                 func_ret = func             # <<<<<<<<<<<<<<
 *     if funcName not in funcNames:
 *         logEvent("ERROR! Wavetools.py: Wrong function type (%s) given: Valid wavetypes are %s" %(funcName,funcNames), level=0)
 */
      __Pyx_INCREF(__pyx_v_func);
      __Pyx_XDECREF_SET(__pyx_v_func_ret, __pyx_v_func);

      /* "WaveTools.py":178
 *     for func  in validFunctions:
 *             funcNames.append(func.__name__)
 *             if func.__name__ == funcName:             # <<<<<<<<<<<<<<
 *                 func_ret = func
 *     if funcName not in funcNames:
 */
    }

    /* "WaveTools.py":176
 *     """
 *     funcNames = []
 *     for func  in validFunctions:             # <<<<<<<<<<<<<<
 *             funcNames.append(func.__name__)
 *             if func.__name__ == funcName:
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "WaveTools.py":180
 *             if func.__name__ == funcName:
 *                 func_ret = func
 *     if funcName not in funcNames:             # <<<<<<<<<<<<<<
 *         logEvent("ERROR! Wavetools.py: Wrong function type (%s) given: Valid wavetypes are %s" %(funcName,funcNames), level=0)
 *         sys.exit(1)
 */
  __pyx_t_7 = (__Pyx_PySequence_ContainsTF(__pyx_v_funcName, __pyx_v_funcNames, Py_NE)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 180, __pyx_L1_error)
  __pyx_t_8 = (__pyx_t_7 != 0);
  if (__pyx_t_8) {

    /* "WaveTools.py":181
 *                 func_ret = func
 *     if funcName not in funcNames:
 *         logEvent("ERROR! Wavetools.py: Wrong function type (%s) given: Valid wavetypes are %s" %(funcName,funcNames), level=0)             # <<<<<<<<<<<<<<
 *         sys.exit(1)
 *     return func_ret
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_logEvent); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 181, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 181, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_v_funcName);
    __Pyx_GIVEREF(__pyx_v_funcName);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_funcName);
    __Pyx_INCREF(__pyx_v_funcNames);
    __Pyx_GIVEREF(__pyx_v_funcNames);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_v_funcNames);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_ERROR_Wavetools_py_Wrong_functio, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 181, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 181, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 181, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_level, __pyx_int_0) < 0) __PYX_ERR(0, 181, __pyx_L1_error)
    __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, __pyx_t_4); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 181, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "WaveTools.py":182
 *     if funcName not in funcNames:
 *         logEvent("ERROR! Wavetools.py: Wrong function type (%s) given: Valid wavetypes are %s" %(funcName,funcNames), level=0)
 *         sys.exit(1)             # <<<<<<<<<<<<<<
 *     return func_ret
 * 
 */
    __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_sys); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 182, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_exit); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 182, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 182, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "WaveTools.py":180
 *             if func.__name__ == funcName:
 *                 func_ret = func
 *     if funcName not in funcNames:             # <<<<<<<<<<<<<<
 *         logEvent("ERROR! Wavetools.py: Wrong function type (%s) given: Valid wavetypes are %s" %(funcName,funcNames), level=0)
 *         sys.exit(1)
 */
  }

  /* "WaveTools.py":183
 *         logEvent("ERROR! Wavetools.py: Wrong function type (%s) given: Valid wavetypes are %s" %(funcName,funcNames), level=0)
 *         sys.exit(1)
 *     return func_ret             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_v_func_ret)) { __Pyx_RaiseUnboundLocalError("func_ret"); __PYX_ERR(0, 183, __pyx_L1_error) }
  __Pyx_INCREF(__pyx_v_func_ret);
  __pyx_r = __pyx_v_func_ret;
  goto __pyx_L0;

  /* "WaveTools.py":152
 *         return 0.
 * 
 * def loadExistingFunction(funcName, validFunctions):             # <<<<<<<<<<<<<<
 *     """Checks if a function name is known function and returns it
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("WaveTools.loadExistingFunction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_funcNames);
  __Pyx_XDECREF(__pyx_v_func);
  __Pyx_XDECREF(__pyx_v_func_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":187
 * 
 * 
 * def setVertDir(g):             # <<<<<<<<<<<<<<
 *     """ Returns the unit vector for the vertical direction
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_13setVertDir(PyObject *__pyx_self, PyObject *__pyx_v_g); /*proto*/
static char __pyx_doc_9WaveTools_12setVertDir[] = " Returns the unit vector for the vertical direction\n\n    The vertical direction is opposite to the gravity direction\n\n    Parameters\n    ----------\n    g : numpy.ndarray\n        Gravitational acceleration vector (must have 3 components)\n\n    Returns\n    --------\n    numpy.ndarray\n\n    ";
static PyMethodDef __pyx_mdef_9WaveTools_13setVertDir = {"setVertDir", (PyCFunction)__pyx_pw_9WaveTools_13setVertDir, METH_O, __pyx_doc_9WaveTools_12setVertDir};
static PyObject *__pyx_pw_9WaveTools_13setVertDir(PyObject *__pyx_self, PyObject *__pyx_v_g) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setVertDir (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_12setVertDir(__pyx_self, ((PyObject *)__pyx_v_g));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_12setVertDir(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_g) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  double __pyx_t_6;
  __Pyx_RefNannySetupContext("setVertDir", 0);

  /* "WaveTools.py":202
 * 
 *     """
 *     return -np.array(g/(sqrt(g[0]**2 + g[1]**2 + g[2]**2)))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_g, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyNumber_Power(__pyx_t_2, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_g, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = PyNumber_Power(__pyx_t_2, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_g, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyNumber_Power(__pyx_t_5, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyNumber_Add(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyFloat_FromDouble(sqrt(__pyx_t_6)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_v_g, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 202, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 202, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 202, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 202, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 202, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Negative(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "WaveTools.py":187
 * 
 * 
 * def setVertDir(g):             # <<<<<<<<<<<<<<
 *     """ Returns the unit vector for the vertical direction
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("WaveTools.setVertDir", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":205
 * 
 * 
 * def setDirVector(vector):             # <<<<<<<<<<<<<<
 *     """ Returns the direction of a vector in the form of a unit vector
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_15setDirVector(PyObject *__pyx_self, PyObject *__pyx_v_vector); /*proto*/
static char __pyx_doc_9WaveTools_14setDirVector[] = " Returns the direction of a vector in the form of a unit vector\n\n    Parameters\n    ----------\n    vector : numpy.ndarray\n           1D numpy array with three components\n\n    Returns\n    --------\n    numpy.ndarray\n\n    ";
static PyMethodDef __pyx_mdef_9WaveTools_15setDirVector = {"setDirVector", (PyCFunction)__pyx_pw_9WaveTools_15setDirVector, METH_O, __pyx_doc_9WaveTools_14setDirVector};
static PyObject *__pyx_pw_9WaveTools_15setDirVector(PyObject *__pyx_self, PyObject *__pyx_v_vector) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setDirVector (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_14setDirVector(__pyx_self, ((PyObject *)__pyx_v_vector));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_14setDirVector(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_vector) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  __Pyx_RefNannySetupContext("setDirVector", 0);

  /* "WaveTools.py":218
 * 
 *     """
 *     return vector/(sqrt(vector[0]**2 + vector[1]**2 + vector[2]**2))             # <<<<<<<<<<<<<<
 * 
 * def dirCheck(v1, v2):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_vector, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Power(__pyx_t_1, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_vector, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyNumber_Power(__pyx_t_1, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_vector, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyNumber_Power(__pyx_t_3, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyFloat_FromDouble(sqrt(__pyx_t_4)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_v_vector, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "WaveTools.py":205
 * 
 * 
 * def setDirVector(vector):             # <<<<<<<<<<<<<<
 *     """ Returns the direction of a vector in the form of a unit vector
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("WaveTools.setDirVector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":220
 *     return vector/(sqrt(vector[0]**2 + vector[1]**2 + vector[2]**2))
 * 
 * def dirCheck(v1, v2):             # <<<<<<<<<<<<<<
 *     """ Checks if two vectors are vertical raises SystemError if True
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_17dirCheck(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9WaveTools_16dirCheck[] = " Checks if two vectors are vertical raises SystemError if True\n\n    Parameters\n    ----------\n    v1 : numpy.ndarray\n        1st vector with three components\n\n    v2 : numpy.ndarray\n        2nd vector with three components\n\n    Returns\n    --------\n    None\n\n    Raises\n    ---------\n    SystemExit\n\n    ";
static PyMethodDef __pyx_mdef_9WaveTools_17dirCheck = {"dirCheck", (PyCFunction)__pyx_pw_9WaveTools_17dirCheck, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_16dirCheck};
static PyObject *__pyx_pw_9WaveTools_17dirCheck(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_v1 = 0;
  PyObject *__pyx_v_v2 = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dirCheck (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_v1,&__pyx_n_s_v2,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_v1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_v2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dirCheck", 1, 2, 2, 1); __PYX_ERR(0, 220, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "dirCheck") < 0)) __PYX_ERR(0, 220, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_v1 = values[0];
    __pyx_v_v2 = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dirCheck", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 220, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("WaveTools.dirCheck", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9WaveTools_16dirCheck(__pyx_self, __pyx_v_v1, __pyx_v_v2);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_16dirCheck(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_v1, PyObject *__pyx_v_v2) {
  PyObject *__pyx_v_dircheck = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("dirCheck", 0);

  /* "WaveTools.py":240
 * 
 *     """
 *     dircheck = abs(v1[0]*v2[0]+v1[1]*v2[1]+v1[2]*v2[2])             # <<<<<<<<<<<<<<
 *         #print self.dircheck
 *     if dircheck > 1e-10:
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_v1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_v2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_v1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_v2, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyNumber_Multiply(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_v1, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_v2, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Absolute(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_dircheck = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "WaveTools.py":242
 *     dircheck = abs(v1[0]*v2[0]+v1[1]*v2[1]+v1[2]*v2[2])
 *         #print self.dircheck
 *     if dircheck > 1e-10:             # <<<<<<<<<<<<<<
 *         logEvent("Wave direction is not perpendicular to gravity vector. Check input",level=0)
 *         return sys.exit(1)
 */
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_dircheck, __pyx_float_1eneg_10, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 242, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 242, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_5) {

    /* "WaveTools.py":243
 *         #print self.dircheck
 *     if dircheck > 1e-10:
 *         logEvent("Wave direction is not perpendicular to gravity vector. Check input",level=0)             # <<<<<<<<<<<<<<
 *         return sys.exit(1)
 *     else:
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_logEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 243, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 243, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_level, __pyx_int_0) < 0) __PYX_ERR(0, 243, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 243, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "WaveTools.py":244
 *     if dircheck > 1e-10:
 *         logEvent("Wave direction is not perpendicular to gravity vector. Check input",level=0)
 *         return sys.exit(1)             # <<<<<<<<<<<<<<
 *     else:
 *         return None
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_sys); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 244, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_exit); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 244, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 244, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "WaveTools.py":242
 *     dircheck = abs(v1[0]*v2[0]+v1[1]*v2[1]+v1[2]*v2[2])
 *         #print self.dircheck
 *     if dircheck > 1e-10:             # <<<<<<<<<<<<<<
 *         logEvent("Wave direction is not perpendicular to gravity vector. Check input",level=0)
 *         return sys.exit(1)
 */
  }

  /* "WaveTools.py":246
 *         return sys.exit(1)
 *     else:
 *         return None             # <<<<<<<<<<<<<<
 * def reduceToIntervals(fi,df):
 *     """ Prepares the x-axis array with N elements for numerical integration
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }

  /* "WaveTools.py":220
 *     return vector/(sqrt(vector[0]**2 + vector[1]**2 + vector[2]**2))
 * 
 * def dirCheck(v1, v2):             # <<<<<<<<<<<<<<
 *     """ Checks if two vectors are vertical raises SystemError if True
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("WaveTools.dirCheck", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_dircheck);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":247
 *     else:
 *         return None
 * def reduceToIntervals(fi,df):             # <<<<<<<<<<<<<<
 *     """ Prepares the x-axis array with N elements for numerical integration
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_19reduceToIntervals(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9WaveTools_18reduceToIntervals[] = " Prepares the x-axis array with N elements for numerical integration\n\n    Integration is performed along he x- axis. If\n    fi = [a1, a2, a3,...,a_N-1 a_N] then it returns the array\n    [a1, 0.5(a1+a2), 0.5(a2+a3),...0.5(a_N-1+a_N), a_N].\n    Input array must have constant step\n\n    Parameters\n    ----------\n    fi : numpy.ndarray\n        x- array with N elements\n    df : float\n        Constant step of array\n    Returns\n    --------\n    numpy.ndarray\n\n    ";
static PyMethodDef __pyx_mdef_9WaveTools_19reduceToIntervals = {"reduceToIntervals", (PyCFunction)__pyx_pw_9WaveTools_19reduceToIntervals, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_18reduceToIntervals};
static PyObject *__pyx_pw_9WaveTools_19reduceToIntervals(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_fi = 0;
  PyObject *__pyx_v_df = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reduceToIntervals (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fi,&__pyx_n_s_df,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fi)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_df)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("reduceToIntervals", 1, 2, 2, 1); __PYX_ERR(0, 247, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "reduceToIntervals") < 0)) __PYX_ERR(0, 247, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_fi = values[0];
    __pyx_v_df = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("reduceToIntervals", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 247, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("WaveTools.reduceToIntervals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9WaveTools_18reduceToIntervals(__pyx_self, __pyx_v_fi, __pyx_v_df);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_18reduceToIntervals(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fi, PyObject *__pyx_v_df) {
  PyObject *__pyx_v_fim_tmp = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("reduceToIntervals", 0);

  /* "WaveTools.py":266
 * 
 *     """
 *     fim_tmp = (0.5*(fi[1:]+fi[:-1])).tolist()             # <<<<<<<<<<<<<<
 *     return np.array([fim_tmp[0]-0.5*df]+fim_tmp+[fim_tmp[-1]+0.5*df])
 * def returnRectangles(a,x):
 */
  __pyx_t_2 = __Pyx_PyObject_GetSlice(__pyx_v_fi, 1, 0, NULL, NULL, &__pyx_slice__4, 1, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetSlice(__pyx_v_fi, 0, -1L, NULL, NULL, &__pyx_slice__5, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyNumber_Add(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Multiply(__pyx_float_0_5, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_tolist); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 266, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 266, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_fim_tmp = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "WaveTools.py":267
 *     """
 *     fim_tmp = (0.5*(fi[1:]+fi[:-1])).tolist()
 *     return np.array([fim_tmp[0]-0.5*df]+fim_tmp+[fim_tmp[-1]+0.5*df])             # <<<<<<<<<<<<<<
 * def returnRectangles(a,x):
 *     """ Returns 2D discrete integral array using the rectangle method
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_fim_tmp, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = PyNumber_Multiply(__pyx_float_0_5, __pyx_v_df); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = PyNumber_Subtract(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = PyNumber_Add(__pyx_t_2, __pyx_v_fim_tmp); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_fim_tmp, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyNumber_Multiply(__pyx_float_0_5, __pyx_v_df); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = PyNumber_Add(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyList_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_6);
  PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = PyNumber_Add(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 267, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_6};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 267, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_6};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 267, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 267, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 267, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "WaveTools.py":247
 *     else:
 *         return None
 * def reduceToIntervals(fi,df):             # <<<<<<<<<<<<<<
 *     """ Prepares the x-axis array with N elements for numerical integration
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("WaveTools.reduceToIntervals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_fim_tmp);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":268
 *     fim_tmp = (0.5*(fi[1:]+fi[:-1])).tolist()
 *     return np.array([fim_tmp[0]-0.5*df]+fim_tmp+[fim_tmp[-1]+0.5*df])
 * def returnRectangles(a,x):             # <<<<<<<<<<<<<<
 *     """ Returns 2D discrete integral array using the rectangle method
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_21returnRectangles(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9WaveTools_20returnRectangles[] = " Returns 2D discrete integral array using the rectangle method\n\n    The calculation for each array element is\n    :math:`(\\Delta y_i = 0.5(a_{n-1}+a_{n})*(x_{n-1}-x_{n})`\n\n    Parameters\n    ----------\n    a : numpy.ndarray\n        Description: Array of y(x) function with N+1 elements\n    x : numpy.ndarray\n        Description: x- coordinate array with N elements\n\n    Returns\n    --------\n    numpy.ndarray\n\n\n    ";
static PyMethodDef __pyx_mdef_9WaveTools_21returnRectangles = {"returnRectangles", (PyCFunction)__pyx_pw_9WaveTools_21returnRectangles, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_20returnRectangles};
static PyObject *__pyx_pw_9WaveTools_21returnRectangles(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("returnRectangles (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_x,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("returnRectangles", 1, 2, 2, 1); __PYX_ERR(0, 268, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "returnRectangles") < 0)) __PYX_ERR(0, 268, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_a = values[0];
    __pyx_v_x = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("returnRectangles", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 268, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("WaveTools.returnRectangles", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9WaveTools_20returnRectangles(__pyx_self, __pyx_v_a, __pyx_v_x);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_20returnRectangles(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_a, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("returnRectangles", 0);

  /* "WaveTools.py":287
 * 
 *     """
 *     return 0.5*(a[1:]+a[:-1])*(x[1:]-x[:-1])             # <<<<<<<<<<<<<<
 * def returnRectangles3D(a,x,y):
 *     """ Returns 3D discrete integrals using the rectangle method
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_v_a, 1, 0, NULL, NULL, &__pyx_slice__6, 1, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetSlice(__pyx_v_a, 0, -1L, NULL, NULL, &__pyx_slice__7, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Multiply(__pyx_float_0_5, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetSlice(__pyx_v_x, 1, 0, NULL, NULL, &__pyx_slice__8, 1, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_v_x, 0, -1L, NULL, NULL, &__pyx_slice__9, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyNumber_Subtract(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Multiply(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "WaveTools.py":268
 *     fim_tmp = (0.5*(fi[1:]+fi[:-1])).tolist()
 *     return np.array([fim_tmp[0]-0.5*df]+fim_tmp+[fim_tmp[-1]+0.5*df])
 * def returnRectangles(a,x):             # <<<<<<<<<<<<<<
 *     """ Returns 2D discrete integral array using the rectangle method
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("WaveTools.returnRectangles", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":288
 *     """
 *     return 0.5*(a[1:]+a[:-1])*(x[1:]-x[:-1])
 * def returnRectangles3D(a,x,y):             # <<<<<<<<<<<<<<
 *     """ Returns 3D discrete integrals using the rectangle method
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_23returnRectangles3D(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9WaveTools_22returnRectangles3D[] = " Returns 3D discrete integrals using the rectangle method\n\n    The calculation for each array element is\n    :math: `(\\Delta y = 0.25*(a_(n-1,m-1)+a_(n,m-1)+a_(n-1,m) ...\n    ...+a_(n,m))*(x_n-1-x_n) *(z_m-1-z_m))`\n\n    Parameters\n    ----------\n    a : numpy.ndarray\n        2D Array of y(x,y) function with (N+1)x(M+1)elements\n    x : numpy.ndarray\n        Description: x- coordinate array with N+1 elements\n    y : numpy.ndarray\n            Description: x- coordinate array with N+1 elements\n\n    Returns\n    --------\n    numpy.ndarray\n    ";
static PyMethodDef __pyx_mdef_9WaveTools_23returnRectangles3D = {"returnRectangles3D", (PyCFunction)__pyx_pw_9WaveTools_23returnRectangles3D, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_22returnRectangles3D};
static PyObject *__pyx_pw_9WaveTools_23returnRectangles3D(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_y = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("returnRectangles3D (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_x,&__pyx_n_s_y,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("returnRectangles3D", 1, 3, 3, 1); __PYX_ERR(0, 288, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("returnRectangles3D", 1, 3, 3, 2); __PYX_ERR(0, 288, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "returnRectangles3D") < 0)) __PYX_ERR(0, 288, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_a = values[0];
    __pyx_v_x = values[1];
    __pyx_v_y = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("returnRectangles3D", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 288, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("WaveTools.returnRectangles3D", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9WaveTools_22returnRectangles3D(__pyx_self, __pyx_v_a, __pyx_v_x, __pyx_v_y);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_22returnRectangles3D(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_a, PyObject *__pyx_v_x, PyObject *__pyx_v_y) {
  PyObject *__pyx_v_ai = NULL;
  Py_ssize_t __pyx_v_ii;
  Py_ssize_t __pyx_v_jj;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("returnRectangles3D", 0);

  /* "WaveTools.py":308
 *     numpy.ndarray
 *     """
 *     ai = 0.5*(a[1:,:]+a[:-1,:])             # <<<<<<<<<<<<<<
 *     ai = 0.5*(ai[:,1:]+ai[:,:-1])
 *     for ii in range(len(x)-1):
 */
  __pyx_t_1 = PyObject_GetItem(__pyx_v_a, __pyx_tuple__12); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetItem(__pyx_v_a, __pyx_tuple__15); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Multiply(__pyx_float_0_5, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_ai = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "WaveTools.py":309
 *     """
 *     ai = 0.5*(a[1:,:]+a[:-1,:])
 *     ai = 0.5*(ai[:,1:]+ai[:,:-1])             # <<<<<<<<<<<<<<
 *     for ii in range(len(x)-1):
 *         ai[ii,:] *= (y[1:]-y[:-1])
 */
  __pyx_t_2 = PyObject_GetItem(__pyx_v_ai, __pyx_tuple__18); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetItem(__pyx_v_ai, __pyx_tuple__21); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Multiply(__pyx_float_0_5, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF_SET(__pyx_v_ai, __pyx_t_3);
  __pyx_t_3 = 0;

  /* "WaveTools.py":310
 *     ai = 0.5*(a[1:,:]+a[:-1,:])
 *     ai = 0.5*(ai[:,1:]+ai[:,:-1])
 *     for ii in range(len(x)-1):             # <<<<<<<<<<<<<<
 *         ai[ii,:] *= (y[1:]-y[:-1])
 *     for jj in range(len(y) - 1):
 */
  __pyx_t_4 = PyObject_Length(__pyx_v_x); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(0, 310, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_4 - 1);
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_5; __pyx_t_4+=1) {
    __pyx_v_ii = __pyx_t_4;

    /* "WaveTools.py":311
 *     ai = 0.5*(ai[:,1:]+ai[:,:-1])
 *     for ii in range(len(x)-1):
 *         ai[ii,:] *= (y[1:]-y[:-1])             # <<<<<<<<<<<<<<
 *     for jj in range(len(y) - 1):
 *         ai[:,jj] *= (x[1:]-x[:-1])
 */
    __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_ii); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 311, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 311, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
    __Pyx_INCREF(__pyx_slice__22);
    __Pyx_GIVEREF(__pyx_slice__22);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_slice__22);
    __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_GetItem(__pyx_v_ai, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 311, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetSlice(__pyx_v_y, 1, 0, NULL, NULL, &__pyx_slice__23, 1, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 311, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __Pyx_PyObject_GetSlice(__pyx_v_y, 0, -1L, NULL, NULL, &__pyx_slice__24, 0, 1, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 311, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyNumber_Subtract(__pyx_t_2, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 311, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyNumber_InPlaceMultiply(__pyx_t_3, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 311, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(PyObject_SetItem(__pyx_v_ai, __pyx_t_1, __pyx_t_6) < 0)) __PYX_ERR(0, 311, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "WaveTools.py":312
 *     for ii in range(len(x)-1):
 *         ai[ii,:] *= (y[1:]-y[:-1])
 *     for jj in range(len(y) - 1):             # <<<<<<<<<<<<<<
 *         ai[:,jj] *= (x[1:]-x[:-1])
 *     return ai
 */
  __pyx_t_5 = PyObject_Length(__pyx_v_y); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 312, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_5 - 1);
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_jj = __pyx_t_5;

    /* "WaveTools.py":313
 *         ai[ii,:] *= (y[1:]-y[:-1])
 *     for jj in range(len(y) - 1):
 *         ai[:,jj] *= (x[1:]-x[:-1])             # <<<<<<<<<<<<<<
 *     return ai
 * def normIntegral(f,dom):
 */
    __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_jj); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 313, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 313, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_slice__25);
    __Pyx_GIVEREF(__pyx_slice__25);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_slice__25);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_GetItem(__pyx_v_ai, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 313, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = __Pyx_PyObject_GetSlice(__pyx_v_x, 1, 0, NULL, NULL, &__pyx_slice__26, 1, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 313, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_3 = __Pyx_PyObject_GetSlice(__pyx_v_x, 0, -1L, NULL, NULL, &__pyx_slice__27, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 313, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyNumber_Subtract(__pyx_t_7, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 313, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_InPlaceMultiply(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 313, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(PyObject_SetItem(__pyx_v_ai, __pyx_t_6, __pyx_t_3) < 0)) __PYX_ERR(0, 313, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }

  /* "WaveTools.py":314
 *     for jj in range(len(y) - 1):
 *         ai[:,jj] *= (x[1:]-x[:-1])
 *     return ai             # <<<<<<<<<<<<<<
 * def normIntegral(f,dom):
 *     """Returns a normalised 2D function
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ai);
  __pyx_r = __pyx_v_ai;
  goto __pyx_L0;

  /* "WaveTools.py":288
 *     """
 *     return 0.5*(a[1:]+a[:-1])*(x[1:]-x[:-1])
 * def returnRectangles3D(a,x,y):             # <<<<<<<<<<<<<<
 *     """ Returns 3D discrete integrals using the rectangle method
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("WaveTools.returnRectangles3D", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ai);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":315
 *         ai[:,jj] *= (x[1:]-x[:-1])
 *     return ai
 * def normIntegral(f,dom):             # <<<<<<<<<<<<<<
 *     """Returns a normalised 2D function
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_25normIntegral(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9WaveTools_24normIntegral[] = "Returns a normalised 2D function\n\n    The calculation is  :math: `(\\int_\\Omega f d\\Omega =1)`\n\n    Parameters\n    ----------\n    f : numpy.ndarray\n        Discrete 2D function\n        Numpy array or list\n\n    dom : float\n        Discrete function step\n\n    Returns\n    --------\n    numpy.ndarray\n    ";
static PyMethodDef __pyx_mdef_9WaveTools_25normIntegral = {"normIntegral", (PyCFunction)__pyx_pw_9WaveTools_25normIntegral, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_24normIntegral};
static PyObject *__pyx_pw_9WaveTools_25normIntegral(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_f = 0;
  PyObject *__pyx_v_dom = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("normIntegral (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_f,&__pyx_n_s_dom,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_f)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dom)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("normIntegral", 1, 2, 2, 1); __PYX_ERR(0, 315, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "normIntegral") < 0)) __PYX_ERR(0, 315, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_f = values[0];
    __pyx_v_dom = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("normIntegral", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 315, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("WaveTools.normIntegral", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9WaveTools_24normIntegral(__pyx_self, __pyx_v_f, __pyx_v_dom);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_24normIntegral(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_f, PyObject *__pyx_v_dom) {
  PyObject *__pyx_v_G0 = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("normIntegral", 0);

  /* "WaveTools.py":333
 *     numpy.ndarray
 *     """
 *     G0 = 1./sum(returnRectangles(f,dom))             # <<<<<<<<<<<<<<
 *     return G0*f
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_returnRectangles); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_f, __pyx_v_dom};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 333, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_f, __pyx_v_dom};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 333, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_f);
    __Pyx_GIVEREF(__pyx_v_f);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_f);
    __Pyx_INCREF(__pyx_v_dom);
    __Pyx_GIVEREF(__pyx_v_dom);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_dom);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_sum, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyFloat_DivideCObj(__pyx_float_1_, __pyx_t_1, 1., 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_G0 = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "WaveTools.py":334
 *     """
 *     G0 = 1./sum(returnRectangles(f,dom))
 *     return G0*f             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyNumber_Multiply(__pyx_v_G0, __pyx_v_f); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "WaveTools.py":315
 *         ai[:,jj] *= (x[1:]-x[:-1])
 *     return ai
 * def normIntegral(f,dom):             # <<<<<<<<<<<<<<
 *     """Returns a normalised 2D function
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("WaveTools.normIntegral", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_G0);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":338
 * 
 * 
 * def eta_mode(x, t, kDir, omega, phi, amplitude):             # <<<<<<<<<<<<<<
 *     """Calculates the free surface elevation for a single frequency mode
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_27eta_mode(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9WaveTools_26eta_mode[] = "Calculates the free surface elevation for a single frequency mode\n\n    Parameters\n    ----------\n    x : numpy.ndarray\n        Position vector\n    t : float\n        Time variable\n    kDir : numpy.ndarray\n        Wave number vector\n    omega : float\n        Angular frequency\n    phi : float\n        Description: Wave phase\n    amp : float\n        Description: Wave amplitude\n\n    Returns\n    --------\n    float\n        The free surface elevation at x,t\n\n    ";
static PyMethodDef __pyx_mdef_9WaveTools_27eta_mode = {"eta_mode", (PyCFunction)__pyx_pw_9WaveTools_27eta_mode, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_26eta_mode};
static PyObject *__pyx_pw_9WaveTools_27eta_mode(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_t = 0;
  PyObject *__pyx_v_kDir = 0;
  PyObject *__pyx_v_omega = 0;
  PyObject *__pyx_v_phi = 0;
  PyObject *__pyx_v_amplitude = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("eta_mode (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_t,&__pyx_n_s_kDir,&__pyx_n_s_omega,&__pyx_n_s_phi,&__pyx_n_s_amplitude,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("eta_mode", 1, 6, 6, 1); __PYX_ERR(0, 338, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_kDir)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("eta_mode", 1, 6, 6, 2); __PYX_ERR(0, 338, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_omega)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("eta_mode", 1, 6, 6, 3); __PYX_ERR(0, 338, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_phi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("eta_mode", 1, 6, 6, 4); __PYX_ERR(0, 338, __pyx_L3_error)
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_amplitude)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("eta_mode", 1, 6, 6, 5); __PYX_ERR(0, 338, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "eta_mode") < 0)) __PYX_ERR(0, 338, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_x = values[0];
    __pyx_v_t = values[1];
    __pyx_v_kDir = values[2];
    __pyx_v_omega = values[3];
    __pyx_v_phi = values[4];
    __pyx_v_amplitude = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("eta_mode", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 338, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("WaveTools.eta_mode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9WaveTools_26eta_mode(__pyx_self, __pyx_v_x, __pyx_v_t, __pyx_v_kDir, __pyx_v_omega, __pyx_v_phi, __pyx_v_amplitude);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_26eta_mode(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x, PyObject *__pyx_v_t, PyObject *__pyx_v_kDir, PyObject *__pyx_v_omega, PyObject *__pyx_v_phi, PyObject *__pyx_v_amplitude) {
  PyObject *__pyx_v_phase = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  __Pyx_RefNannySetupContext("eta_mode", 0);

  /* "WaveTools.py":362
 * 
 *     """
 *     phase = x[0]*kDir[0]+x[1]*kDir[1]+x[2]*kDir[2] - omega*t  + phi             # <<<<<<<<<<<<<<
 *     return amplitude*cos(phase)
 * def Udrift(amp,gAbs,c,d):
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_x, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_kDir, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_x, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_kDir, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyNumber_Multiply(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_x, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_kDir, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Multiply(__pyx_v_omega, __pyx_v_t); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyNumber_Subtract(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_v_phi); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_phase = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "WaveTools.py":363
 *     """
 *     phase = x[0]*kDir[0]+x[1]*kDir[1]+x[2]*kDir[2] - omega*t  + phi
 *     return amplitude*cos(phase)             # <<<<<<<<<<<<<<
 * def Udrift(amp,gAbs,c,d):
 *     """Calculates the 2nd order Stokes drift for a linear mode
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_phase); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 363, __pyx_L1_error)
  __pyx_t_2 = PyFloat_FromDouble(cos(__pyx_t_5)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 363, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyNumber_Multiply(__pyx_v_amplitude, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 363, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "WaveTools.py":338
 * 
 * 
 * def eta_mode(x, t, kDir, omega, phi, amplitude):             # <<<<<<<<<<<<<<
 *     """Calculates the free surface elevation for a single frequency mode
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("WaveTools.eta_mode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_phase);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":364
 *     phase = x[0]*kDir[0]+x[1]*kDir[1]+x[2]*kDir[2] - omega*t  + phi
 *     return amplitude*cos(phase)
 * def Udrift(amp,gAbs,c,d):             # <<<<<<<<<<<<<<
 *     """Calculates the 2nd order Stokes drift for a linear mode
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_29Udrift(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9WaveTools_28Udrift[] = "Calculates the 2nd order Stokes drift for a linear mode \n\n    Parameters\n    ----------\n    amp : float\n        Description: Wave amplitude\n    gAbs : float\n        Magnitude of gravitational acceleration\n    c : float\n        Wave celerity\n    d : float\n        Water depth\n\n\n    Returns\n    --------\n    float\n        Magnitude of the mean velocity drift\n    ";
static PyMethodDef __pyx_mdef_9WaveTools_29Udrift = {"Udrift", (PyCFunction)__pyx_pw_9WaveTools_29Udrift, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_28Udrift};
static PyObject *__pyx_pw_9WaveTools_29Udrift(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_amp = 0;
  PyObject *__pyx_v_gAbs = 0;
  PyObject *__pyx_v_c = 0;
  PyObject *__pyx_v_d = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Udrift (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_amp,&__pyx_n_s_gAbs,&__pyx_n_s_c,&__pyx_n_s_d,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_amp)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_gAbs)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("Udrift", 1, 4, 4, 1); __PYX_ERR(0, 364, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_c)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("Udrift", 1, 4, 4, 2); __PYX_ERR(0, 364, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_d)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("Udrift", 1, 4, 4, 3); __PYX_ERR(0, 364, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "Udrift") < 0)) __PYX_ERR(0, 364, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_amp = values[0];
    __pyx_v_gAbs = values[1];
    __pyx_v_c = values[2];
    __pyx_v_d = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("Udrift", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 364, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("WaveTools.Udrift", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9WaveTools_28Udrift(__pyx_self, __pyx_v_amp, __pyx_v_gAbs, __pyx_v_c, __pyx_v_d);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_28Udrift(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_amp, PyObject *__pyx_v_gAbs, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("Udrift", 0);

  /* "WaveTools.py":384
 *         Magnitude of the mean velocity drift
 *     """
 *     return 0.5*gAbs*amp*amp/c/d             # <<<<<<<<<<<<<<
 * 
 * def  vel_mode(x,  t, kDir, kAbs,  omega,  phi,  amplitude,  mwl, depth, vDir, gAbs):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyNumber_Multiply(__pyx_float_0_5, __pyx_v_gAbs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 384, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_1, __pyx_v_amp); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 384, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Multiply(__pyx_t_2, __pyx_v_amp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 384, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_v_c); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 384, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_t_2, __pyx_v_d); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 384, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "WaveTools.py":364
 *     phase = x[0]*kDir[0]+x[1]*kDir[1]+x[2]*kDir[2] - omega*t  + phi
 *     return amplitude*cos(phase)
 * def Udrift(amp,gAbs,c,d):             # <<<<<<<<<<<<<<
 *     """Calculates the 2nd order Stokes drift for a linear mode
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("WaveTools.Udrift", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":386
 *     return 0.5*gAbs*amp*amp/c/d
 * 
 * def  vel_mode(x,  t, kDir, kAbs,  omega,  phi,  amplitude,  mwl, depth, vDir, gAbs):             # <<<<<<<<<<<<<<
 *     """Calculates the wave velocity components for a single frequency mode
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_31vel_mode(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9WaveTools_30vel_mode[] = "Calculates the wave velocity components for a single frequency mode\n\n    Parameters\n    ----------\n    x : numpy.ndarray\n        Position vector\n    t : float\n        Time variable\n    kDir : numpy.ndarray\n        Wave number vector\n    kAbs : floatkAbs\n        Wave number magnitude\n    omega : float\n        Angular frequency\n    phi : float\n        Description: Wave phase\n    amplidute : float\n        Description: Wave amplitude\n    mwl : float\n        Mean water level\n    depth : float\n        Water depth\n    vDir : numpy.ndarray\n        Unit vector aligned with vertical direction\n\n\n    Returns\n    --------\n    numpy.ndarray\n        1D Numpy array of the velocity vector at x,t\n    ";
static PyMethodDef __pyx_mdef_9WaveTools_31vel_mode = {"vel_mode", (PyCFunction)__pyx_pw_9WaveTools_31vel_mode, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_30vel_mode};
static PyObject *__pyx_pw_9WaveTools_31vel_mode(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_t = 0;
  PyObject *__pyx_v_kDir = 0;
  PyObject *__pyx_v_kAbs = 0;
  PyObject *__pyx_v_omega = 0;
  PyObject *__pyx_v_phi = 0;
  PyObject *__pyx_v_amplitude = 0;
  PyObject *__pyx_v_mwl = 0;
  PyObject *__pyx_v_depth = 0;
  PyObject *__pyx_v_vDir = 0;
  PyObject *__pyx_v_gAbs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("vel_mode (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_t,&__pyx_n_s_kDir,&__pyx_n_s_kAbs,&__pyx_n_s_omega,&__pyx_n_s_phi,&__pyx_n_s_amplitude,&__pyx_n_s_mwl,&__pyx_n_s_depth,&__pyx_n_s_vDir,&__pyx_n_s_gAbs,0};
    PyObject* values[11] = {0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("vel_mode", 1, 11, 11, 1); __PYX_ERR(0, 386, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_kDir)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("vel_mode", 1, 11, 11, 2); __PYX_ERR(0, 386, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_kAbs)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("vel_mode", 1, 11, 11, 3); __PYX_ERR(0, 386, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_omega)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("vel_mode", 1, 11, 11, 4); __PYX_ERR(0, 386, __pyx_L3_error)
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_phi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("vel_mode", 1, 11, 11, 5); __PYX_ERR(0, 386, __pyx_L3_error)
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_amplitude)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("vel_mode", 1, 11, 11, 6); __PYX_ERR(0, 386, __pyx_L3_error)
        }
        case  7:
        if (likely((values[7] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mwl)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("vel_mode", 1, 11, 11, 7); __PYX_ERR(0, 386, __pyx_L3_error)
        }
        case  8:
        if (likely((values[8] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_depth)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("vel_mode", 1, 11, 11, 8); __PYX_ERR(0, 386, __pyx_L3_error)
        }
        case  9:
        if (likely((values[9] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vDir)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("vel_mode", 1, 11, 11, 9); __PYX_ERR(0, 386, __pyx_L3_error)
        }
        case 10:
        if (likely((values[10] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_gAbs)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("vel_mode", 1, 11, 11, 10); __PYX_ERR(0, 386, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "vel_mode") < 0)) __PYX_ERR(0, 386, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 11) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
    }
    __pyx_v_x = values[0];
    __pyx_v_t = values[1];
    __pyx_v_kDir = values[2];
    __pyx_v_kAbs = values[3];
    __pyx_v_omega = values[4];
    __pyx_v_phi = values[5];
    __pyx_v_amplitude = values[6];
    __pyx_v_mwl = values[7];
    __pyx_v_depth = values[8];
    __pyx_v_vDir = values[9];
    __pyx_v_gAbs = values[10];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("vel_mode", 1, 11, 11, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 386, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("WaveTools.vel_mode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9WaveTools_30vel_mode(__pyx_self, __pyx_v_x, __pyx_v_t, __pyx_v_kDir, __pyx_v_kAbs, __pyx_v_omega, __pyx_v_phi, __pyx_v_amplitude, __pyx_v_mwl, __pyx_v_depth, __pyx_v_vDir, __pyx_v_gAbs);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_30vel_mode(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x, PyObject *__pyx_v_t, PyObject *__pyx_v_kDir, PyObject *__pyx_v_kAbs, PyObject *__pyx_v_omega, PyObject *__pyx_v_phi, PyObject *__pyx_v_amplitude, PyObject *__pyx_v_mwl, PyObject *__pyx_v_depth, PyObject *__pyx_v_vDir, PyObject *__pyx_v_gAbs) {
  PyObject *__pyx_v_phase = NULL;
  PyObject *__pyx_v_Z = NULL;
  PyObject *__pyx_v_UH = NULL;
  PyObject *__pyx_v_UV = NULL;
  CYTHON_UNUSED double __pyx_v_ii;
  PyObject *__pyx_v_waveDir = NULL;
  PyObject *__pyx_v_V = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("vel_mode", 0);

  /* "WaveTools.py":419
 *     """
 * 
 *     phase = x[0]*kDir[0]+x[1]*kDir[1]+x[2]*kDir[2] - omega*t  + phi             # <<<<<<<<<<<<<<
 *     Z =  (vDir[0]*x[0] + vDir[1]*x[1]+ vDir[2]*x[2]) - mwl
 *     UH = 0.
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_x, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_kDir, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_x, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_kDir, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyNumber_Multiply(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_x, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_kDir, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Multiply(__pyx_v_omega, __pyx_v_t); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyNumber_Subtract(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_v_phi); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_phase = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "WaveTools.py":420
 * 
 *     phase = x[0]*kDir[0]+x[1]*kDir[1]+x[2]*kDir[2] - omega*t  + phi
 *     Z =  (vDir[0]*x[0] + vDir[1]*x[1]+ vDir[2]*x[2]) - mwl             # <<<<<<<<<<<<<<
 *     UH = 0.
 *     UV=0.
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_vDir, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_x, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_vDir, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_x, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyNumber_Multiply(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_vDir, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_x, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyNumber_Multiply(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Subtract(__pyx_t_3, __pyx_v_mwl); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_Z = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "WaveTools.py":421
 *     phase = x[0]*kDir[0]+x[1]*kDir[1]+x[2]*kDir[2] - omega*t  + phi
 *     Z =  (vDir[0]*x[0] + vDir[1]*x[1]+ vDir[2]*x[2]) - mwl
 *     UH = 0.             # <<<<<<<<<<<<<<
 *     UV=0.
 *     ii=0.
 */
  __Pyx_INCREF(__pyx_float_0_);
  __pyx_v_UH = __pyx_float_0_;

  /* "WaveTools.py":422
 *     Z =  (vDir[0]*x[0] + vDir[1]*x[1]+ vDir[2]*x[2]) - mwl
 *     UH = 0.
 *     UV=0.             # <<<<<<<<<<<<<<
 *     ii=0.
 *     UH=amplitude*omega*cosh(kAbs*(Z + depth))*cos( phase )/sinh(kAbs*depth)
 */
  __Pyx_INCREF(__pyx_float_0_);
  __pyx_v_UV = __pyx_float_0_;

  /* "WaveTools.py":423
 *     UH = 0.
 *     UV=0.
 *     ii=0.             # <<<<<<<<<<<<<<
 *     UH=amplitude*omega*cosh(kAbs*(Z + depth))*cos( phase )/sinh(kAbs*depth)
 *     UV=amplitude*omega*sinh(kAbs*(Z + depth))*sin( phase )/sinh(kAbs*depth)
 */
  __pyx_v_ii = 0.;

  /* "WaveTools.py":424
 *     UV=0.
 *     ii=0.
 *     UH=amplitude*omega*cosh(kAbs*(Z + depth))*cos( phase )/sinh(kAbs*depth)             # <<<<<<<<<<<<<<
 *     UV=amplitude*omega*sinh(kAbs*(Z + depth))*sin( phase )/sinh(kAbs*depth)
 *     waveDir = kDir/kAbs
 */
  __pyx_t_1 = PyNumber_Multiply(__pyx_v_amplitude, __pyx_v_omega); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyNumber_Add(__pyx_v_Z, __pyx_v_depth); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyNumber_Multiply(__pyx_v_kAbs, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 424, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble(cosh(__pyx_t_5)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_phase); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 424, __pyx_L1_error)
  __pyx_t_2 = PyFloat_FromDouble(cos(__pyx_t_5)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyNumber_Multiply(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Multiply(__pyx_v_kAbs, __pyx_v_depth); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 424, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble(sinh(__pyx_t_5)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_UH, __pyx_t_3);
  __pyx_t_3 = 0;

  /* "WaveTools.py":425
 *     ii=0.
 *     UH=amplitude*omega*cosh(kAbs*(Z + depth))*cos( phase )/sinh(kAbs*depth)
 *     UV=amplitude*omega*sinh(kAbs*(Z + depth))*sin( phase )/sinh(kAbs*depth)             # <<<<<<<<<<<<<<
 *     waveDir = kDir/kAbs
 *     UH = UH - Udrift(amplitude,gAbs,omega/kAbs,depth)
 */
  __pyx_t_3 = PyNumber_Multiply(__pyx_v_amplitude, __pyx_v_omega); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyNumber_Add(__pyx_v_Z, __pyx_v_depth); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyNumber_Multiply(__pyx_v_kAbs, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 425, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyFloat_FromDouble(sinh(__pyx_t_5)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_phase); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 425, __pyx_L1_error)
  __pyx_t_1 = PyFloat_FromDouble(sin(__pyx_t_5)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Multiply(__pyx_v_kAbs, __pyx_v_depth); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 425, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyFloat_FromDouble(sinh(__pyx_t_5)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF_SET(__pyx_v_UV, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "WaveTools.py":426
 *     UH=amplitude*omega*cosh(kAbs*(Z + depth))*cos( phase )/sinh(kAbs*depth)
 *     UV=amplitude*omega*sinh(kAbs*(Z + depth))*sin( phase )/sinh(kAbs*depth)
 *     waveDir = kDir/kAbs             # <<<<<<<<<<<<<<
 *     UH = UH - Udrift(amplitude,gAbs,omega/kAbs,depth)
 * #waves(period = 1./self.fi[ii], waveHeight = 2.*self.ai[ii],mwl = self.mwl, depth = self.d,g = self.g,waveDir = self.waveDir,wavelength=self.wi[ii], phi0 = self.phi[ii]).u(x,y,z,t)
 */
  __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_v_kDir, __pyx_v_kAbs); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 426, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_waveDir = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "WaveTools.py":427
 *     UV=amplitude*omega*sinh(kAbs*(Z + depth))*sin( phase )/sinh(kAbs*depth)
 *     waveDir = kDir/kAbs
 *     UH = UH - Udrift(amplitude,gAbs,omega/kAbs,depth)             # <<<<<<<<<<<<<<
 * #waves(period = 1./self.fi[ii], waveHeight = 2.*self.ai[ii],mwl = self.mwl, depth = self.d,g = self.g,waveDir = self.waveDir,wavelength=self.wi[ii], phi0 = self.phi[ii]).u(x,y,z,t)
 *     V = np.array([UH*waveDir[0]+UV*vDir[0],
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_Udrift); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 427, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_v_omega, __pyx_v_kAbs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 427, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[5] = {__pyx_t_4, __pyx_v_amplitude, __pyx_v_gAbs, __pyx_t_3, __pyx_v_depth};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_6, 4+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 427, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[5] = {__pyx_t_4, __pyx_v_amplitude, __pyx_v_gAbs, __pyx_t_3, __pyx_v_depth};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_6, 4+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 427, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(4+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 427, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_v_amplitude);
    __Pyx_GIVEREF(__pyx_v_amplitude);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_amplitude);
    __Pyx_INCREF(__pyx_v_gAbs);
    __Pyx_GIVEREF(__pyx_v_gAbs);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_v_gAbs);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_6, __pyx_t_3);
    __Pyx_INCREF(__pyx_v_depth);
    __Pyx_GIVEREF(__pyx_v_depth);
    PyTuple_SET_ITEM(__pyx_t_7, 3+__pyx_t_6, __pyx_v_depth);
    __pyx_t_3 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 427, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Subtract(__pyx_v_UH, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 427, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_UH, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "WaveTools.py":429
 *     UH = UH - Udrift(amplitude,gAbs,omega/kAbs,depth)
 * #waves(period = 1./self.fi[ii], waveHeight = 2.*self.ai[ii],mwl = self.mwl, depth = self.d,g = self.g,waveDir = self.waveDir,wavelength=self.wi[ii], phi0 = self.phi[ii]).u(x,y,z,t)
 *     V = np.array([UH*waveDir[0]+UV*vDir[0],             # <<<<<<<<<<<<<<
 *                   UH*waveDir[1]+UV*vDir[1],
 *                   UH*waveDir[2]+UV*vDir[2]])
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_waveDir, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_v_UH, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_vDir, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyNumber_Multiply(__pyx_v_UV, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "WaveTools.py":430
 * #waves(period = 1./self.fi[ii], waveHeight = 2.*self.ai[ii],mwl = self.mwl, depth = self.d,g = self.g,waveDir = self.waveDir,wavelength=self.wi[ii], phi0 = self.phi[ii]).u(x,y,z,t)
 *     V = np.array([UH*waveDir[0]+UV*vDir[0],
 *                   UH*waveDir[1]+UV*vDir[1],             # <<<<<<<<<<<<<<
 *                   UH*waveDir[2]+UV*vDir[2]])
 *     return V
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_waveDir, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 430, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyNumber_Multiply(__pyx_v_UH, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 430, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_vDir, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 430, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_8 = PyNumber_Multiply(__pyx_v_UV, __pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 430, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 430, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "WaveTools.py":431
 *     V = np.array([UH*waveDir[0]+UV*vDir[0],
 *                   UH*waveDir[1]+UV*vDir[1],
 *                   UH*waveDir[2]+UV*vDir[2]])             # <<<<<<<<<<<<<<
 *     return V
 * 
 */
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_waveDir, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_3 = PyNumber_Multiply(__pyx_v_UH, __pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_vDir, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyNumber_Multiply(__pyx_v_UV, __pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = PyNumber_Add(__pyx_t_3, __pyx_t_9); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "WaveTools.py":429
 *     UH = UH - Udrift(amplitude,gAbs,omega/kAbs,depth)
 * #waves(period = 1./self.fi[ii], waveHeight = 2.*self.ai[ii],mwl = self.mwl, depth = self.d,g = self.g,waveDir = self.waveDir,wavelength=self.wi[ii], phi0 = self.phi[ii]).u(x,y,z,t)
 *     V = np.array([UH*waveDir[0]+UV*vDir[0],             # <<<<<<<<<<<<<<
 *                   UH*waveDir[1]+UV*vDir[1],
 *                   UH*waveDir[2]+UV*vDir[2]])
 */
  __pyx_t_9 = PyList_New(3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_9, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_9, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_8);
  PyList_SET_ITEM(__pyx_t_9, 2, __pyx_t_8);
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_t_8 = 0;
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  if (!__pyx_t_8) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 429, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_9};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 429, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_9};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 429, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 429, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_8); __pyx_t_8 = NULL;
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_9);
      __pyx_t_9 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 429, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_V = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "WaveTools.py":432
 *                   UH*waveDir[1]+UV*vDir[1],
 *                   UH*waveDir[2]+UV*vDir[2]])
 *     return V             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_V);
  __pyx_r = __pyx_v_V;
  goto __pyx_L0;

  /* "WaveTools.py":386
 *     return 0.5*gAbs*amp*amp/c/d
 * 
 * def  vel_mode(x,  t, kDir, kAbs,  omega,  phi,  amplitude,  mwl, depth, vDir, gAbs):             # <<<<<<<<<<<<<<
 *     """Calculates the wave velocity components for a single frequency mode
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("WaveTools.vel_mode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_phase);
  __Pyx_XDECREF(__pyx_v_Z);
  __Pyx_XDECREF(__pyx_v_UH);
  __Pyx_XDECREF(__pyx_v_UV);
  __Pyx_XDECREF(__pyx_v_waveDir);
  __Pyx_XDECREF(__pyx_v_V);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":436
 * 
 * 
 * def sigma(omega,omega0):             # <<<<<<<<<<<<<<
 *     """Calculates sigma function for JONSWAP spectrum
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_33sigma(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9WaveTools_32sigma[] = "Calculates sigma function for JONSWAP spectrum\n\n       See http://www.wikiwaves.org/Ocean-Wave_Sectra\n    Parameters\n    ----------\n    omega : numpy.ndarray\n        Angular frequency array\n    omega0 : numpy.ndarray\n        Peak angular frequency\n    Returns\n    --------\n    numpy.ndarray\n        1D Numpy array of simga function with respect to f\n\n    ";
static PyMethodDef __pyx_mdef_9WaveTools_33sigma = {"sigma", (PyCFunction)__pyx_pw_9WaveTools_33sigma, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_32sigma};
static PyObject *__pyx_pw_9WaveTools_33sigma(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_omega = 0;
  PyObject *__pyx_v_omega0 = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sigma (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_omega,&__pyx_n_s_omega0,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_omega)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_omega0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sigma", 1, 2, 2, 1); __PYX_ERR(0, 436, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sigma") < 0)) __PYX_ERR(0, 436, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_omega = values[0];
    __pyx_v_omega0 = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sigma", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 436, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("WaveTools.sigma", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9WaveTools_32sigma(__pyx_self, __pyx_v_omega, __pyx_v_omega0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_32sigma(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_omega, PyObject *__pyx_v_omega0) {
  PyObject *__pyx_v_sigmaReturn = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("sigma", 0);

  /* "WaveTools.py":452
 * 
 *     """
 *     sigmaReturn = np.where(omega > omega0,0.09,0.07)             # <<<<<<<<<<<<<<
 *     return sigmaReturn
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 452, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_where); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 452, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_omega, __pyx_v_omega0, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 452, __pyx_L1_error)
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_t_2, __pyx_float_0_09, __pyx_float_0_07};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 452, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_t_2, __pyx_float_0_09, __pyx_float_0_07};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 452, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(3+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 452, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_t_2);
    __Pyx_INCREF(__pyx_float_0_09);
    __Pyx_GIVEREF(__pyx_float_0_09);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_float_0_09);
    __Pyx_INCREF(__pyx_float_0_07);
    __Pyx_GIVEREF(__pyx_float_0_07);
    PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_5, __pyx_float_0_07);
    __pyx_t_2 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 452, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_sigmaReturn = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "WaveTools.py":453
 *     """
 *     sigmaReturn = np.where(omega > omega0,0.09,0.07)
 *     return sigmaReturn             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_sigmaReturn);
  __pyx_r = __pyx_v_sigmaReturn;
  goto __pyx_L0;

  /* "WaveTools.py":436
 * 
 * 
 * def sigma(omega,omega0):             # <<<<<<<<<<<<<<
 *     """Calculates sigma function for JONSWAP spectrum
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("WaveTools.sigma", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_sigmaReturn);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":456
 * 
 * 
 * def JONSWAP(f,f0,Hs,gamma=3.3,TMA=False, depth = None):             # <<<<<<<<<<<<<<
 *     """Calculates the JONSWAP frequency spectrum (Goda 2009)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_35JONSWAP(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9WaveTools_34JONSWAP[] = "Calculates the JONSWAP frequency spectrum (Goda 2009)\n\n    The calculation includes the TMA modification, if TMA =True\n\n    Parameters\n    ----------\n    f : numpy.ndarray\n        Frequency array\n    f0 : float\n        Peak frequency\n    Hs : float\n        Significant wave height\n    gamma : Optional[float]\n        Peak enhancement factor\n    TMA : bool\n            Description: TMA switch\n    depth : Optional[float]\n        Water depth\n\n    Returns\n    --------\n    numpy.ndarray\n        1D Numpy array of the spectrum in frequency domain\n\n    ";
static PyMethodDef __pyx_mdef_9WaveTools_35JONSWAP = {"JONSWAP", (PyCFunction)__pyx_pw_9WaveTools_35JONSWAP, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_34JONSWAP};
static PyObject *__pyx_pw_9WaveTools_35JONSWAP(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_f = 0;
  PyObject *__pyx_v_f0 = 0;
  PyObject *__pyx_v_Hs = 0;
  PyObject *__pyx_v_gamma = 0;
  PyObject *__pyx_v_TMA = 0;
  PyObject *__pyx_v_depth = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("JONSWAP (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_f,&__pyx_n_s_f0,&__pyx_n_s_Hs,&__pyx_n_s_gamma,&__pyx_n_s_TMA,&__pyx_n_s_depth,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[3] = ((PyObject *)((PyObject*)__pyx_float_3_3));
    values[4] = ((PyObject *)((PyObject *)Py_False));
    values[5] = ((PyObject *)((PyObject *)Py_None));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_f)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_f0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("JONSWAP", 0, 3, 6, 1); __PYX_ERR(0, 456, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Hs)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("JONSWAP", 0, 3, 6, 2); __PYX_ERR(0, 456, __pyx_L3_error)
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_gamma);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_TMA);
          if (value) { values[4] = value; kw_args--; }
        }
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_depth);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "JONSWAP") < 0)) __PYX_ERR(0, 456, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_f = values[0];
    __pyx_v_f0 = values[1];
    __pyx_v_Hs = values[2];
    __pyx_v_gamma = values[3];
    __pyx_v_TMA = values[4];
    __pyx_v_depth = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("JONSWAP", 0, 3, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 456, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("WaveTools.JONSWAP", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9WaveTools_34JONSWAP(__pyx_self, __pyx_v_f, __pyx_v_f0, __pyx_v_Hs, __pyx_v_gamma, __pyx_v_TMA, __pyx_v_depth);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_34JONSWAP(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_f, PyObject *__pyx_v_f0, PyObject *__pyx_v_Hs, PyObject *__pyx_v_gamma, PyObject *__pyx_v_TMA, PyObject *__pyx_v_depth) {
  PyObject *__pyx_v_Tp = NULL;
  PyObject *__pyx_v_bj = NULL;
  PyObject *__pyx_v_r = NULL;
  PyObject *__pyx_v_tma = NULL;
  PyObject *__pyx_v_k = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_t_11;
  __Pyx_RefNannySetupContext("JONSWAP", 0);

  /* "WaveTools.py":482
 * 
 *     """
 *     Tp = 1./f0             # <<<<<<<<<<<<<<
 *     bj = 0.0624*(1.094-0.01915*log(gamma))/(0.23+0.0336*gamma-0.185/(1.9+gamma))
 *     r = np.exp(-(Tp*f-1.)**2/(2.*sigma(f,f0)**2))
 */
  __pyx_t_1 = __Pyx_PyFloat_DivideCObj(__pyx_float_1_, __pyx_v_f0, 1., 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_Tp = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "WaveTools.py":483
 *     """
 *     Tp = 1./f0
 *     bj = 0.0624*(1.094-0.01915*log(gamma))/(0.23+0.0336*gamma-0.185/(1.9+gamma))             # <<<<<<<<<<<<<<
 *     r = np.exp(-(Tp*f-1.)**2/(2.*sigma(f,f0)**2))
 *     tma = 1.
 */
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_gamma); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 483, __pyx_L1_error)
  __pyx_t_1 = PyFloat_FromDouble((0.0624 * (1.094 - (0.01915 * log(__pyx_t_2))))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyNumber_Multiply(__pyx_float_0_0336, __pyx_v_gamma); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyFloat_AddCObj(__pyx_float_0_23, __pyx_t_3, 0.23, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyFloat_AddCObj(__pyx_float_1_9, __pyx_v_gamma, 1.9, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyFloat_DivideCObj(__pyx_float_0_185, __pyx_t_3, 0.185, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Subtract(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_bj = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "WaveTools.py":484
 *     Tp = 1./f0
 *     bj = 0.0624*(1.094-0.01915*log(gamma))/(0.23+0.0336*gamma-0.185/(1.9+gamma))
 *     r = np.exp(-(Tp*f-1.)**2/(2.*sigma(f,f0)**2))             # <<<<<<<<<<<<<<
 *     tma = 1.
 *     if TMA:
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_exp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Multiply(__pyx_v_Tp, __pyx_v_f); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyFloat_SubtractObjC(__pyx_t_3, __pyx_float_1_, 1., 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Power(__pyx_t_4, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Negative(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_sigma); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_8 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_v_f, __pyx_v_f0};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 484, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_v_f, __pyx_v_f0};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 484, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  {
    __pyx_t_9 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 484, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_INCREF(__pyx_v_f);
    __Pyx_GIVEREF(__pyx_v_f);
    PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_v_f);
    __Pyx_INCREF(__pyx_v_f0);
    __Pyx_GIVEREF(__pyx_v_f0);
    PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_v_f0);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_9, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 484, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyNumber_Power(__pyx_t_3, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Multiply(__pyx_float_2_, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyNumber_Divide(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 484, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_5);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_6};
      __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 484, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_6};
      __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 484, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 484, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 484, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_r = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "WaveTools.py":485
 *     bj = 0.0624*(1.094-0.01915*log(gamma))/(0.23+0.0336*gamma-0.185/(1.9+gamma))
 *     r = np.exp(-(Tp*f-1.)**2/(2.*sigma(f,f0)**2))
 *     tma = 1.             # <<<<<<<<<<<<<<
 *     if TMA:
 *         if (depth is None):
 */
  __Pyx_INCREF(__pyx_float_1_);
  __pyx_v_tma = __pyx_float_1_;

  /* "WaveTools.py":486
 *     r = np.exp(-(Tp*f-1.)**2/(2.*sigma(f,f0)**2))
 *     tma = 1.
 *     if TMA:             # <<<<<<<<<<<<<<
 *         if (depth is None):
 *             logEvent("Wavetools:py. Provide valid depth definition definition for TMA spectrum")
 */
  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_v_TMA); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 486, __pyx_L1_error)
  if (__pyx_t_10) {

    /* "WaveTools.py":487
 *     tma = 1.
 *     if TMA:
 *         if (depth is None):             # <<<<<<<<<<<<<<
 *             logEvent("Wavetools:py. Provide valid depth definition definition for TMA spectrum")
 *             logEvent("Wavetools:py. Stopping simulation")
 */
    __pyx_t_10 = (__pyx_v_depth == Py_None);
    __pyx_t_11 = (__pyx_t_10 != 0);
    if (__pyx_t_11) {

      /* "WaveTools.py":488
 *     if TMA:
 *         if (depth is None):
 *             logEvent("Wavetools:py. Provide valid depth definition definition for TMA spectrum")             # <<<<<<<<<<<<<<
 *             logEvent("Wavetools:py. Stopping simulation")
 *             sys.exit(1)
 */
      __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_logEvent); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 488, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__28, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 488, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "WaveTools.py":489
 *         if (depth is None):
 *             logEvent("Wavetools:py. Provide valid depth definition definition for TMA spectrum")
 *             logEvent("Wavetools:py. Stopping simulation")             # <<<<<<<<<<<<<<
 *             sys.exit(1)
 *         k = dispersion(2*M_PI*f,depth)
 */
      __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_logEvent); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 489, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 489, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "WaveTools.py":490
 *             logEvent("Wavetools:py. Provide valid depth definition definition for TMA spectrum")
 *             logEvent("Wavetools:py. Stopping simulation")
 *             sys.exit(1)             # <<<<<<<<<<<<<<
 *         k = dispersion(2*M_PI*f,depth)
 *         tma = np.tanh(k*depth)*np.tanh(k*depth)/(1.+ 2.*k*depth/np.sinh(2.*k*depth))
 */
      __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_sys); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 490, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_exit); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 490, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__30, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 490, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "WaveTools.py":487
 *     tma = 1.
 *     if TMA:
 *         if (depth is None):             # <<<<<<<<<<<<<<
 *             logEvent("Wavetools:py. Provide valid depth definition definition for TMA spectrum")
 *             logEvent("Wavetools:py. Stopping simulation")
 */
    }

    /* "WaveTools.py":491
 *             logEvent("Wavetools:py. Stopping simulation")
 *             sys.exit(1)
 *         k = dispersion(2*M_PI*f,depth)             # <<<<<<<<<<<<<<
 *         tma = np.tanh(k*depth)*np.tanh(k*depth)/(1.+ 2.*k*depth/np.sinh(2.*k*depth))
 * 
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_dispersion); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 491, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyFloat_FromDouble((2.0 * M_PI)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 491, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = PyNumber_Multiply(__pyx_t_4, __pyx_v_f); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 491, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_8 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_6, __pyx_v_depth};
      __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 491, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_6, __pyx_v_depth};
      __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 491, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 491, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_4) {
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4); __pyx_t_4 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_8, __pyx_t_6);
      __Pyx_INCREF(__pyx_v_depth);
      __Pyx_GIVEREF(__pyx_v_depth);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_8, __pyx_v_depth);
      __pyx_t_6 = 0;
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 491, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_k = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "WaveTools.py":492
 *             sys.exit(1)
 *         k = dispersion(2*M_PI*f,depth)
 *         tma = np.tanh(k*depth)*np.tanh(k*depth)/(1.+ 2.*k*depth/np.sinh(2.*k*depth))             # <<<<<<<<<<<<<<
 * 
 *     return tma * bj*(Hs**2)*(1./((Tp**4) *(f**5)))*np.exp(-1.25*(1./(Tp*f)**(4.)))*(gamma**r)
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 492, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_tanh); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 492, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Multiply(__pyx_v_k, __pyx_v_depth); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 492, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 492, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_5);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_1};
        __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 492, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_1};
        __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 492, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else
      #endif
      {
        __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 492, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6); __pyx_t_6 = NULL;
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_1);
        __pyx_t_1 = 0;
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 492, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 492, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_tanh); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 492, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Multiply(__pyx_v_k, __pyx_v_depth); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 492, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 492, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_4};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 492, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_4};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 492, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      {
        __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 492, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_6); __pyx_t_6 = NULL;
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_9, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 492, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Multiply(__pyx_t_5, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 492, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Multiply(__pyx_float_2_, __pyx_v_k); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 492, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyNumber_Multiply(__pyx_t_3, __pyx_v_depth); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 492, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 492, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_sinh); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 492, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = PyNumber_Multiply(__pyx_float_2_, __pyx_v_k); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 492, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_6 = PyNumber_Multiply(__pyx_t_9, __pyx_v_depth); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 492, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_9) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 492, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_t_6};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 492, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_t_6};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 492, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 492, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_9); __pyx_t_9 = NULL;
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 492, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_t_5, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 492, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyFloat_AddCObj(__pyx_float_1_, __pyx_t_4, 1., 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 492, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 492, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_tma, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "WaveTools.py":486
 *     r = np.exp(-(Tp*f-1.)**2/(2.*sigma(f,f0)**2))
 *     tma = 1.
 *     if TMA:             # <<<<<<<<<<<<<<
 *         if (depth is None):
 *             logEvent("Wavetools:py. Provide valid depth definition definition for TMA spectrum")
 */
  }

  /* "WaveTools.py":494
 *         tma = np.tanh(k*depth)*np.tanh(k*depth)/(1.+ 2.*k*depth/np.sinh(2.*k*depth))
 * 
 *     return tma * bj*(Hs**2)*(1./((Tp**4) *(f**5)))*np.exp(-1.25*(1./(Tp*f)**(4.)))*(gamma**r)             # <<<<<<<<<<<<<<
 * 
 * def PM_mod(f,f0,Hs):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = PyNumber_Multiply(__pyx_v_tma, __pyx_v_bj); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 494, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyNumber_Power(__pyx_v_Hs, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 494, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyNumber_Multiply(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 494, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Power(__pyx_v_Tp, __pyx_int_4, Py_None); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 494, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyNumber_Power(__pyx_v_f, __pyx_int_5, Py_None); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 494, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyNumber_Multiply(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 494, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyFloat_DivideCObj(__pyx_float_1_, __pyx_t_5, 1., 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 494, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyNumber_Multiply(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 494, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 494, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_exp); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 494, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Multiply(__pyx_v_Tp, __pyx_v_f); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 494, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = PyNumber_Power(__pyx_t_1, __pyx_float_4_, Py_None); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 494, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyFloat_DivideCObj(__pyx_float_1_, __pyx_t_7, 1., 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 494, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyNumber_Multiply(__pyx_float_neg_1_25, __pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 494, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_1) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 494, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_7};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 494, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_7};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 494, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 494, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1); __pyx_t_1 = NULL;
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 494, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 494, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Power(__pyx_v_gamma, __pyx_v_r, Py_None); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 494, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyNumber_Multiply(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 494, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "WaveTools.py":456
 * 
 * 
 * def JONSWAP(f,f0,Hs,gamma=3.3,TMA=False, depth = None):             # <<<<<<<<<<<<<<
 *     """Calculates the JONSWAP frequency spectrum (Goda 2009)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("WaveTools.JONSWAP", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_Tp);
  __Pyx_XDECREF(__pyx_v_bj);
  __Pyx_XDECREF(__pyx_v_r);
  __Pyx_XDECREF(__pyx_v_tma);
  __Pyx_XDECREF(__pyx_v_k);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":496
 *     return tma * bj*(Hs**2)*(1./((Tp**4) *(f**5)))*np.exp(-1.25*(1./(Tp*f)**(4.)))*(gamma**r)
 * 
 * def PM_mod(f,f0,Hs):             # <<<<<<<<<<<<<<
 *     """Calculates the Pierson-Moskovitz spectrum (or Bretschneider or ISSC)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_37PM_mod(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9WaveTools_36PM_mod[] = "Calculates the Pierson-Moskovitz spectrum (or Bretschneider or ISSC)\n\n    Reference:\n    http://www.orcina.com/SoftwareProducts/OrcaFlex/Documentation/Help/Content/html/Waves,WaveSpectra.htm\n    And then to Tucker M J, 1991. Waves in Ocean Engineering. Ellis Horwood Ltd. (Chichester).\n\n    Parameters\n    --------\n    f : numpy.ndarray\n        Frequency array\n    f0 : float\n        Peak frequency\n    Hs : float\n        Significant wave height\n\n    Returns\n    --------\n    numpy.ndarray\n        1D Numpy array of the spectrum in frequency domain\n\n    ";
static PyMethodDef __pyx_mdef_9WaveTools_37PM_mod = {"PM_mod", (PyCFunction)__pyx_pw_9WaveTools_37PM_mod, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_36PM_mod};
static PyObject *__pyx_pw_9WaveTools_37PM_mod(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_f = 0;
  PyObject *__pyx_v_f0 = 0;
  PyObject *__pyx_v_Hs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("PM_mod (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_f,&__pyx_n_s_f0,&__pyx_n_s_Hs,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_f)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_f0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("PM_mod", 1, 3, 3, 1); __PYX_ERR(0, 496, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Hs)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("PM_mod", 1, 3, 3, 2); __PYX_ERR(0, 496, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "PM_mod") < 0)) __PYX_ERR(0, 496, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_f = values[0];
    __pyx_v_f0 = values[1];
    __pyx_v_Hs = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("PM_mod", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 496, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("WaveTools.PM_mod", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9WaveTools_36PM_mod(__pyx_self, __pyx_v_f, __pyx_v_f0, __pyx_v_Hs);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_36PM_mod(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_f, PyObject *__pyx_v_f0, PyObject *__pyx_v_Hs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("PM_mod", 0);

  /* "WaveTools.py":518
 * 
 *     """
 *     return (5.0/16.0)*Hs**2*(f0**4/f**5)*np.exp((-5.0/4.0)*(f0/f)**4)             # <<<<<<<<<<<<<<
 * 
 * def cos2s(theta,f,s=10):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble((5.0 / 16.0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Power(__pyx_v_Hs, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Power(__pyx_v_f0, __pyx_int_4, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyNumber_Power(__pyx_v_f, __pyx_int_5, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Multiply(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_exp); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyFloat_FromDouble((-5.0 / 4.0)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyNumber_Divide(__pyx_v_f0, __pyx_v_f); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Power(__pyx_t_5, __pyx_int_4, Py_None); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyNumber_Multiply(__pyx_t_3, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 518, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_5};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 518, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_5};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 518, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 518, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 518, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "WaveTools.py":496
 *     return tma * bj*(Hs**2)*(1./((Tp**4) *(f**5)))*np.exp(-1.25*(1./(Tp*f)**(4.)))*(gamma**r)
 * 
 * def PM_mod(f,f0,Hs):             # <<<<<<<<<<<<<<
 *     """Calculates the Pierson-Moskovitz spectrum (or Bretschneider or ISSC)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("WaveTools.PM_mod", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":520
 *     return (5.0/16.0)*Hs**2*(f0**4/f**5)*np.exp((-5.0/4.0)*(f0/f)**4)
 * 
 * def cos2s(theta,f,s=10):             # <<<<<<<<<<<<<<
 *     """Calculates the cos-2s directional spreading function
 *     see USACE - CETN-I-28 http://chl.erdc.usace.army.mil/library/publications/chetn/pdf/cetn-i-28.pdf
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_39cos2s(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9WaveTools_38cos2s[] = "Calculates the cos-2s directional spreading function\n    see USACE - CETN-I-28 http://chl.erdc.usace.army.mil/library/publications/chetn/pdf/cetn-i-28.pdf\n\n    Parameters\n    ----------\n    theta : numpy.ndarray\n        Wave angle array\n    f : numpy.ndarray\n        Frequency array\n    s : Optional[float]\n        Spreading parameter\n\n    Returns\n    --------\n    numpy.ndarray\n        2D Numpy array of cos-2s spectrum\n    ";
static PyMethodDef __pyx_mdef_9WaveTools_39cos2s = {"cos2s", (PyCFunction)__pyx_pw_9WaveTools_39cos2s, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_38cos2s};
static PyObject *__pyx_pw_9WaveTools_39cos2s(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_theta = 0;
  PyObject *__pyx_v_f = 0;
  PyObject *__pyx_v_s = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cos2s (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_theta,&__pyx_n_s_f,&__pyx_n_s_s,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)((PyObject *)__pyx_int_10));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_theta)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_f)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cos2s", 0, 2, 3, 1); __PYX_ERR(0, 520, __pyx_L3_error)
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_s);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "cos2s") < 0)) __PYX_ERR(0, 520, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_theta = values[0];
    __pyx_v_f = values[1];
    __pyx_v_s = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("cos2s", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 520, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("WaveTools.cos2s", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9WaveTools_38cos2s(__pyx_self, __pyx_v_theta, __pyx_v_f, __pyx_v_s);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_38cos2s(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_theta, PyObject *__pyx_v_f, PyObject *__pyx_v_s) {
  PyObject *__pyx_v_fun = NULL;
  Py_ssize_t __pyx_v_ii;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  __Pyx_RefNannySetupContext("cos2s", 0);

  /* "WaveTools.py":538
 *         2D Numpy array of cos-2s spectrum
 *     """
 *     fun = np.zeros((len(theta),len(f)),)             # <<<<<<<<<<<<<<
 *     for ii in range(len(fun[0,:])):
 *         fun[:,ii] = np.cos(theta/2)**(2*s)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 538, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 538, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = PyObject_Length(__pyx_v_theta); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(0, 538, __pyx_L1_error)
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 538, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyObject_Length(__pyx_v_f); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(0, 538, __pyx_L1_error)
  __pyx_t_5 = PyInt_FromSsize_t(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 538, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 538, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_5);
  __pyx_t_2 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 538, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_6};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 538, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_6};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 538, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 538, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 538, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_fun = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "WaveTools.py":539
 *     """
 *     fun = np.zeros((len(theta),len(f)),)
 *     for ii in range(len(fun[0,:])):             # <<<<<<<<<<<<<<
 *         fun[:,ii] = np.cos(theta/2)**(2*s)
 *     return fun
 */
  __pyx_t_1 = PyObject_GetItem(__pyx_v_fun, __pyx_tuple__32); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 539, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(0, 539, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_4; __pyx_t_7+=1) {
    __pyx_v_ii = __pyx_t_7;

    /* "WaveTools.py":540
 *     fun = np.zeros((len(theta),len(f)),)
 *     for ii in range(len(fun[0,:])):
 *         fun[:,ii] = np.cos(theta/2)**(2*s)             # <<<<<<<<<<<<<<
 *     return fun
 * def mitsuyasu(theta,fi,f0,smax=10):
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 540, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_cos); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 540, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_v_theta, __pyx_int_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 540, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 540, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_3};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 540, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_3};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 540, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 540, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6); __pyx_t_6 = NULL;
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 540, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Multiply(__pyx_int_2, __pyx_v_s); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 540, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = PyNumber_Power(__pyx_t_1, __pyx_t_2, Py_None); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 540, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_ii); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 540, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 540, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_slice__33);
    __Pyx_GIVEREF(__pyx_slice__33);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_slice__33);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
    __pyx_t_2 = 0;
    if (unlikely(PyObject_SetItem(__pyx_v_fun, __pyx_t_1, __pyx_t_5) < 0)) __PYX_ERR(0, 540, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }

  /* "WaveTools.py":541
 *     for ii in range(len(fun[0,:])):
 *         fun[:,ii] = np.cos(theta/2)**(2*s)
 *     return fun             # <<<<<<<<<<<<<<
 * def mitsuyasu(theta,fi,f0,smax=10):
 *     """The cos2s wave directional spread with wave frequency dependency
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_fun);
  __pyx_r = __pyx_v_fun;
  goto __pyx_L0;

  /* "WaveTools.py":520
 *     return (5.0/16.0)*Hs**2*(f0**4/f**5)*np.exp((-5.0/4.0)*(f0/f)**4)
 * 
 * def cos2s(theta,f,s=10):             # <<<<<<<<<<<<<<
 *     """Calculates the cos-2s directional spreading function
 *     see USACE - CETN-I-28 http://chl.erdc.usace.army.mil/library/publications/chetn/pdf/cetn-i-28.pdf
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("WaveTools.cos2s", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_fun);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":542
 *         fun[:,ii] = np.cos(theta/2)**(2*s)
 *     return fun
 * def mitsuyasu(theta,fi,f0,smax=10):             # <<<<<<<<<<<<<<
 *     """The cos2s wave directional spread with wave frequency dependency
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_41mitsuyasu(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9WaveTools_40mitsuyasu[] = "The cos2s wave directional spread with wave frequency dependency\n\n    Equation from \"Random Seas and Design of Maritime Structures\" - Y. Goda - 2010\n    (3rd ed) eq. 2.22 - 2.25\n\n    Parameters\n    ----------\n    theta : numpy.ndarray\n        Wave angle array\n    fi : numpy.ndarray\n        Frequency array\n    f0 : float\n        Peak frequency\n    smax : Optional[float]\n        Spreading parameter\n    Returns\n    --------\n    numpy.ndarray\n        2D Numpy array of Mitsuyashu-type spectrum\n    ";
static PyMethodDef __pyx_mdef_9WaveTools_41mitsuyasu = {"mitsuyasu", (PyCFunction)__pyx_pw_9WaveTools_41mitsuyasu, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_40mitsuyasu};
static PyObject *__pyx_pw_9WaveTools_41mitsuyasu(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_theta = 0;
  PyObject *__pyx_v_fi = 0;
  PyObject *__pyx_v_f0 = 0;
  PyObject *__pyx_v_smax = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mitsuyasu (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_theta,&__pyx_n_s_fi,&__pyx_n_s_f0,&__pyx_n_s_smax,0};
    PyObject* values[4] = {0,0,0,0};
    values[3] = ((PyObject *)((PyObject *)__pyx_int_10));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_theta)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("mitsuyasu", 0, 3, 4, 1); __PYX_ERR(0, 542, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_f0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("mitsuyasu", 0, 3, 4, 2); __PYX_ERR(0, 542, __pyx_L3_error)
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_smax);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "mitsuyasu") < 0)) __PYX_ERR(0, 542, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_theta = values[0];
    __pyx_v_fi = values[1];
    __pyx_v_f0 = values[2];
    __pyx_v_smax = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mitsuyasu", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 542, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("WaveTools.mitsuyasu", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9WaveTools_40mitsuyasu(__pyx_self, __pyx_v_theta, __pyx_v_fi, __pyx_v_f0, __pyx_v_smax);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_40mitsuyasu(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_theta, PyObject *__pyx_v_fi, PyObject *__pyx_v_f0, PyObject *__pyx_v_smax) {
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_v_ii = NULL;
  PyObject *__pyx_v_fun = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("mitsuyasu", 0);

  /* "WaveTools.py":564
 *     """
 * 
 *     s = smax * (fi/f0)**(5)             # <<<<<<<<<<<<<<
 *     ii = np.where(fi>f0)[0][0]
 *     s[ii:] = smax * (fi[ii:]/f0)**(-2.5)
 */
  __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_v_fi, __pyx_v_f0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Power(__pyx_t_1, __pyx_int_5, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Multiply(__pyx_v_smax, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_s = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "WaveTools.py":565
 * 
 *     s = smax * (fi/f0)**(5)
 *     ii = np.where(fi>f0)[0][0]             # <<<<<<<<<<<<<<
 *     s[ii:] = smax * (fi[ii:]/f0)**(-2.5)
 *     fun = np.zeros((len(theta),len(fi)),)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_where); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_fi, __pyx_v_f0, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 565, __pyx_L1_error)
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 565, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 565, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 565, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 565, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 565, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_ii = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "WaveTools.py":566
 *     s = smax * (fi/f0)**(5)
 *     ii = np.where(fi>f0)[0][0]
 *     s[ii:] = smax * (fi[ii:]/f0)**(-2.5)             # <<<<<<<<<<<<<<
 *     fun = np.zeros((len(theta),len(fi)),)
 *     for ii in range(len(fun[0,:])):
 */
  __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_v_fi, 0, 0, &__pyx_v_ii, NULL, NULL, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_v_f0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Power(__pyx_t_3, __pyx_float_neg_2_5, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Multiply(__pyx_v_smax, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__Pyx_PyObject_SetSlice(__pyx_v_s, __pyx_t_3, 0, 0, &__pyx_v_ii, NULL, NULL, 0, 0, 1) < 0) __PYX_ERR(0, 566, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "WaveTools.py":567
 *     ii = np.where(fi>f0)[0][0]
 *     s[ii:] = smax * (fi[ii:]/f0)**(-2.5)
 *     fun = np.zeros((len(theta),len(fi)),)             # <<<<<<<<<<<<<<
 *     for ii in range(len(fun[0,:])):
 *         fun[:,ii] = np.cos(theta/2)**(2.*s[ii])
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 567, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 567, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = PyObject_Length(__pyx_v_theta); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 567, __pyx_L1_error)
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 567, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = PyObject_Length(__pyx_v_fi); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 567, __pyx_L1_error)
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 567, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 567, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 567, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_4};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 567, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_4};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 567, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    {
      __pyx_t_1 = PyTuple_New(1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 567, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2); __pyx_t_2 = NULL;
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_1, 0+1, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 567, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_fun = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "WaveTools.py":568
 *     s[ii:] = smax * (fi[ii:]/f0)**(-2.5)
 *     fun = np.zeros((len(theta),len(fi)),)
 *     for ii in range(len(fun[0,:])):             # <<<<<<<<<<<<<<
 *         fun[:,ii] = np.cos(theta/2)**(2.*s[ii])
 *     return fun
 */
  __pyx_t_3 = PyObject_GetItem(__pyx_v_fun, __pyx_tuple__35); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 568, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 568, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyInt_FromSsize_t(__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 568, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 568, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 568, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_5 = __pyx_t_3; __Pyx_INCREF(__pyx_t_5); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 568, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 568, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_5))) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_3); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 568, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 568, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_3); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 568, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 568, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_7(__pyx_t_5);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 568, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_DECREF_SET(__pyx_v_ii, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "WaveTools.py":569
 *     fun = np.zeros((len(theta),len(fi)),)
 *     for ii in range(len(fun[0,:])):
 *         fun[:,ii] = np.cos(theta/2)**(2.*s[ii])             # <<<<<<<<<<<<<<
 *     return fun
 * 
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 569, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_cos); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 569, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_v_theta, __pyx_int_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 569, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_2) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 569, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_1};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 569, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_1};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 569, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else
      #endif
      {
        __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 569, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_2); __pyx_t_2 = NULL;
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_1);
        __pyx_t_1 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 569, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyObject_GetItem(__pyx_v_s, __pyx_v_ii); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 569, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = PyNumber_Multiply(__pyx_float_2_, __pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 569, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Power(__pyx_t_3, __pyx_t_8, Py_None); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 569, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 569, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_INCREF(__pyx_slice__36);
    __Pyx_GIVEREF(__pyx_slice__36);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_slice__36);
    __Pyx_INCREF(__pyx_v_ii);
    __Pyx_GIVEREF(__pyx_v_ii);
    PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_v_ii);
    if (unlikely(PyObject_SetItem(__pyx_v_fun, __pyx_t_8, __pyx_t_4) < 0)) __PYX_ERR(0, 569, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "WaveTools.py":568
 *     s[ii:] = smax * (fi[ii:]/f0)**(-2.5)
 *     fun = np.zeros((len(theta),len(fi)),)
 *     for ii in range(len(fun[0,:])):             # <<<<<<<<<<<<<<
 *         fun[:,ii] = np.cos(theta/2)**(2.*s[ii])
 *     return fun
 */
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "WaveTools.py":570
 *     for ii in range(len(fun[0,:])):
 *         fun[:,ii] = np.cos(theta/2)**(2.*s[ii])
 *     return fun             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_fun);
  __pyx_r = __pyx_v_fun;
  goto __pyx_L0;

  /* "WaveTools.py":542
 *         fun[:,ii] = np.cos(theta/2)**(2*s)
 *     return fun
 * def mitsuyasu(theta,fi,f0,smax=10):             # <<<<<<<<<<<<<<
 *     """The cos2s wave directional spread with wave frequency dependency
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("WaveTools.mitsuyasu", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XDECREF(__pyx_v_ii);
  __Pyx_XDECREF(__pyx_v_fun);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":576
 * 
 * 
 * def dispersion(w,d, g = 9.81,niter = 1000):             # <<<<<<<<<<<<<<
 *     """Calculates the wave number for single or multiple frequencies using linear dispersion relation.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_43dispersion(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9WaveTools_42dispersion[] = "Calculates the wave number for single or multiple frequencies using linear dispersion relation.\n\n    Parameters\n    ----------\n    w : float or np.ndarray\n        Angular frequency\n    d : float\n        Water depth\n    g : Optional[float]\n        Gravitational acceleration\n    niter : Optional[int]\n        Solution iterations\n\n    Returns\n    --------\n    float or numpy.ndarray\n        Wavenumber as a float or 1D array for multiple frequencies\n    ";
static PyMethodDef __pyx_mdef_9WaveTools_43dispersion = {"dispersion", (PyCFunction)__pyx_pw_9WaveTools_43dispersion, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_42dispersion};
static PyObject *__pyx_pw_9WaveTools_43dispersion(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_w = 0;
  PyObject *__pyx_v_d = 0;
  PyObject *__pyx_v_g = 0;
  PyObject *__pyx_v_niter = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dispersion (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_w,&__pyx_n_s_d,&__pyx_n_s_g,&__pyx_n_s_niter,0};
    PyObject* values[4] = {0,0,0,0};
    values[2] = ((PyObject *)((PyObject*)__pyx_float_9_81));
    values[3] = ((PyObject *)((PyObject *)__pyx_int_1000));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_w)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_d)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dispersion", 0, 2, 4, 1); __PYX_ERR(0, 576, __pyx_L3_error)
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_g);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_niter);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "dispersion") < 0)) __PYX_ERR(0, 576, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_w = values[0];
    __pyx_v_d = values[1];
    __pyx_v_g = values[2];
    __pyx_v_niter = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dispersion", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 576, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("WaveTools.dispersion", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9WaveTools_42dispersion(__pyx_self, __pyx_v_w, __pyx_v_d, __pyx_v_g, __pyx_v_niter);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_42dispersion(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_w, PyObject *__pyx_v_d, PyObject *__pyx_v_g, PyObject *__pyx_v_niter) {
  PyObject *__pyx_v_w_aux = NULL;
  PyObject *__pyx_v_K = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_jj = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_t_11;
  __Pyx_RefNannySetupContext("dispersion", 0);

  /* "WaveTools.py":595
 *         Wavenumber as a float or 1D array for multiple frequencies
 *     """
 *     w_aux = np.array(w)             # <<<<<<<<<<<<<<
 *     K = w_aux**2/g
 *     for jj in range(niter):
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 595, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 595, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_w); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 595, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_v_w};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 595, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_v_w};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 595, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 595, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2); __pyx_t_2 = NULL;
      __Pyx_INCREF(__pyx_v_w);
      __Pyx_GIVEREF(__pyx_v_w);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_w);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 595, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_w_aux = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "WaveTools.py":596
 *     """
 *     w_aux = np.array(w)
 *     K = w_aux**2/g             # <<<<<<<<<<<<<<
 *     for jj in range(niter):
 *         K =  w_aux**2/(g*np.tanh(K*d))
 */
  __pyx_t_1 = PyNumber_Power(__pyx_v_w_aux, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 596, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_v_g); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 596, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_K = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "WaveTools.py":597
 *     w_aux = np.array(w)
 *     K = w_aux**2/g
 *     for jj in range(niter):             # <<<<<<<<<<<<<<
 *         K =  w_aux**2/(g*np.tanh(K*d))
 *     if type(K) is float:
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 597, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_niter);
  __Pyx_GIVEREF(__pyx_v_niter);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_niter);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 597, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_3 = __pyx_t_1; __Pyx_INCREF(__pyx_t_3); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 597, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 597, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 597, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 597, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 597, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 597, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_6(__pyx_t_3);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 597, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_jj, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "WaveTools.py":598
 *     K = w_aux**2/g
 *     for jj in range(niter):
 *         K =  w_aux**2/(g*np.tanh(K*d))             # <<<<<<<<<<<<<<
 *     if type(K) is float:
 *         return K[0]
 */
    __pyx_t_1 = PyNumber_Power(__pyx_v_w_aux, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 598, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 598, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_tanh); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 598, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Multiply(__pyx_v_K, __pyx_v_d); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 598, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    if (!__pyx_t_8) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 598, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_2};
        __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 598, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_2};
        __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 598, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else
      #endif
      {
        __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 598, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8); __pyx_t_8 = NULL;
        __Pyx_GIVEREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_t_2);
        __pyx_t_2 = 0;
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_9, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 598, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyNumber_Multiply(__pyx_v_g, __pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 598, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 598, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF_SET(__pyx_v_K, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "WaveTools.py":597
 *     w_aux = np.array(w)
 *     K = w_aux**2/g
 *     for jj in range(niter):             # <<<<<<<<<<<<<<
 *         K =  w_aux**2/(g*np.tanh(K*d))
 *     if type(K) is float:
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "WaveTools.py":599
 *     for jj in range(niter):
 *         K =  w_aux**2/(g*np.tanh(K*d))
 *     if type(K) is float:             # <<<<<<<<<<<<<<
 *         return K[0]
 *     else:
 */
  __pyx_t_10 = (((PyObject *)Py_TYPE(__pyx_v_K)) == ((PyObject *)(&PyFloat_Type)));
  __pyx_t_11 = (__pyx_t_10 != 0);
  if (__pyx_t_11) {

    /* "WaveTools.py":600
 *         K =  w_aux**2/(g*np.tanh(K*d))
 *     if type(K) is float:
 *         return K[0]             # <<<<<<<<<<<<<<
 *     else:
 *         return K
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_K, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 600, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "WaveTools.py":599
 *     for jj in range(niter):
 *         K =  w_aux**2/(g*np.tanh(K*d))
 *     if type(K) is float:             # <<<<<<<<<<<<<<
 *         return K[0]
 *     else:
 */
  }

  /* "WaveTools.py":602
 *         return K[0]
 *     else:
 *         return K             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_K);
    __pyx_r = __pyx_v_K;
    goto __pyx_L0;
  }

  /* "WaveTools.py":576
 * 
 * 
 * def dispersion(w,d, g = 9.81,niter = 1000):             # <<<<<<<<<<<<<<
 *     """Calculates the wave number for single or multiple frequencies using linear dispersion relation.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("WaveTools.dispersion", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_w_aux);
  __Pyx_XDECREF(__pyx_v_K);
  __Pyx_XDECREF(__pyx_v_jj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":605
 * 
 * 
 * def tophat(l,cutoff):             # <<<<<<<<<<<<<<
 *     """ Calculates and returns a top hat filter array
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_45tophat(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9WaveTools_44tophat[] = " Calculates and returns a top hat filter array\n\n    Parameters\n    ----------\n    l : int\n        Length of array\n    cutoff : float\n         Cut off fraction at both the leading and tailing part of the array\n\n    Returns\n    --------\n    numpy.ndarray\n\n    ";
static PyMethodDef __pyx_mdef_9WaveTools_45tophat = {"tophat", (PyCFunction)__pyx_pw_9WaveTools_45tophat, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_44tophat};
static PyObject *__pyx_pw_9WaveTools_45tophat(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_l = 0;
  PyObject *__pyx_v_cutoff = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("tophat (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_l,&__pyx_n_s_cutoff,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_l)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cutoff)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("tophat", 1, 2, 2, 1); __PYX_ERR(0, 605, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "tophat") < 0)) __PYX_ERR(0, 605, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_l = values[0];
    __pyx_v_cutoff = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("tophat", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 605, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("WaveTools.tophat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9WaveTools_44tophat(__pyx_self, __pyx_v_l, __pyx_v_cutoff);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_44tophat(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_l, PyObject *__pyx_v_cutoff) {
  PyObject *__pyx_v_a = NULL;
  PyObject *__pyx_v_cut = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("tophat", 0);

  /* "WaveTools.py":620
 * 
 *     """
 *     a = np.zeros(l,)             # <<<<<<<<<<<<<<
 *     cut = int(cutoff*l)
 *     a[cut:-cut] = 1.
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_l); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 620, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_v_l};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 620, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_v_l};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 620, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 620, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2); __pyx_t_2 = NULL;
      __Pyx_INCREF(__pyx_v_l);
      __Pyx_GIVEREF(__pyx_v_l);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_l);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 620, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_a = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "WaveTools.py":621
 *     """
 *     a = np.zeros(l,)
 *     cut = int(cutoff*l)             # <<<<<<<<<<<<<<
 *     a[cut:-cut] = 1.
 *     return a
 */
  __pyx_t_1 = PyNumber_Multiply(__pyx_v_cutoff, __pyx_v_l); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyNumber_Int(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_cut = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "WaveTools.py":622
 *     a = np.zeros(l,)
 *     cut = int(cutoff*l)
 *     a[cut:-cut] = 1.             # <<<<<<<<<<<<<<
 *     return a
 * 
 */
  __pyx_t_3 = PyNumber_Negative(__pyx_v_cut); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 622, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_PyObject_SetSlice(__pyx_v_a, __pyx_float_1_, 0, 0, &__pyx_v_cut, &__pyx_t_3, NULL, 0, 0, 1) < 0) __PYX_ERR(0, 622, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "WaveTools.py":623
 *     cut = int(cutoff*l)
 *     a[cut:-cut] = 1.
 *     return a             # <<<<<<<<<<<<<<
 * 
 * def costap(l,cutoff=0.1):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_a);
  __pyx_r = __pyx_v_a;
  goto __pyx_L0;

  /* "WaveTools.py":605
 * 
 * 
 * def tophat(l,cutoff):             # <<<<<<<<<<<<<<
 *     """ Calculates and returns a top hat filter array
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("WaveTools.tophat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_a);
  __Pyx_XDECREF(__pyx_v_cut);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":625
 *     return a
 * 
 * def costap(l,cutoff=0.1):             # <<<<<<<<<<<<<<
 *     """ Calculates and returns a top hat filter array
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_47costap(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9WaveTools_46costap[] = " Calculates and returns a top hat filter array\n\n    Parameters\n    ----------\n    l : int\n        Length of array\n    cutoff : float\n         Cut off fraction at both the leading and tailing part of the array\n\n    Returns\n    --------\n    numpy.ndarray\n    ";
static PyMethodDef __pyx_mdef_9WaveTools_47costap = {"costap", (PyCFunction)__pyx_pw_9WaveTools_47costap, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_46costap};
static PyObject *__pyx_pw_9WaveTools_47costap(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_l = 0;
  PyObject *__pyx_v_cutoff = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("costap (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_l,&__pyx_n_s_cutoff,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)((PyObject*)__pyx_float_0_1));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_l)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cutoff);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "costap") < 0)) __PYX_ERR(0, 625, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_l = values[0];
    __pyx_v_cutoff = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("costap", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 625, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("WaveTools.costap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9WaveTools_46costap(__pyx_self, __pyx_v_l, __pyx_v_cutoff);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_46costap(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_l, PyObject *__pyx_v_cutoff) {
  PyObject *__pyx_v_npoints = NULL;
  PyObject *__pyx_v_wind = NULL;
  PyObject *__pyx_v_k = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_t_7;
  double __pyx_t_8;
  double __pyx_t_9;
  __Pyx_RefNannySetupContext("costap", 0);

  /* "WaveTools.py":639
 *     numpy.ndarray
 *     """
 *     npoints = int(cutoff*l)             # <<<<<<<<<<<<<<
 *     wind = np.ones(l)
 *     for k in range(l): # (k,np) = (n,N) normally used
 */
  __pyx_t_1 = PyNumber_Multiply(__pyx_v_cutoff, __pyx_v_l); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 639, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyNumber_Int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 639, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_npoints = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "WaveTools.py":640
 *     """
 *     npoints = int(cutoff*l)
 *     wind = np.ones(l)             # <<<<<<<<<<<<<<
 *     for k in range(l): # (k,np) = (n,N) normally used
 *         if k < npoints:
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 640, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_ones); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 640, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_1) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_l); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 640, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_v_l};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 640, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_v_l};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 640, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 640, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1); __pyx_t_1 = NULL;
      __Pyx_INCREF(__pyx_v_l);
      __Pyx_GIVEREF(__pyx_v_l);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_l);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 640, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_wind = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "WaveTools.py":641
 *     npoints = int(cutoff*l)
 *     wind = np.ones(l)
 *     for k in range(l): # (k,np) = (n,N) normally used             # <<<<<<<<<<<<<<
 *         if k < npoints:
 *             wind[k] = 0.5*(1.-cos(M_PI*float(k)/float(npoints)))
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 641, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_l);
  __Pyx_GIVEREF(__pyx_v_l);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_l);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 641, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 641, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 641, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 641, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 641, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 641, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 641, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_6(__pyx_t_2);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 641, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_k, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "WaveTools.py":642
 *     wind = np.ones(l)
 *     for k in range(l): # (k,np) = (n,N) normally used
 *         if k < npoints:             # <<<<<<<<<<<<<<
 *             wind[k] = 0.5*(1.-cos(M_PI*float(k)/float(npoints)))
 *         if k > l - npoints -1:
 */
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_k, __pyx_v_npoints, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 642, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 642, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_7) {

      /* "WaveTools.py":643
 *     for k in range(l): # (k,np) = (n,N) normally used
 *         if k < npoints:
 *             wind[k] = 0.5*(1.-cos(M_PI*float(k)/float(npoints)))             # <<<<<<<<<<<<<<
 *         if k > l - npoints -1:
 *             wind[k] = 0.5*(1.-cos(M_PI*float(l-k-1)/float(npoints)))
 */
      __pyx_t_8 = __Pyx_PyObject_AsDouble(__pyx_v_k); if (unlikely(__pyx_t_8 == ((double)-1) && PyErr_Occurred())) __PYX_ERR(0, 643, __pyx_L1_error)
      __pyx_t_9 = (M_PI * __pyx_t_8);
      __pyx_t_8 = __Pyx_PyObject_AsDouble(__pyx_v_npoints); if (unlikely(__pyx_t_8 == ((double)-1) && PyErr_Occurred())) __PYX_ERR(0, 643, __pyx_L1_error)
      if (unlikely(__pyx_t_8 == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 643, __pyx_L1_error)
      }
      __pyx_t_3 = PyFloat_FromDouble((0.5 * (1. - cos((__pyx_t_9 / __pyx_t_8))))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 643, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (unlikely(PyObject_SetItem(__pyx_v_wind, __pyx_v_k, __pyx_t_3) < 0)) __PYX_ERR(0, 643, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "WaveTools.py":642
 *     wind = np.ones(l)
 *     for k in range(l): # (k,np) = (n,N) normally used
 *         if k < npoints:             # <<<<<<<<<<<<<<
 *             wind[k] = 0.5*(1.-cos(M_PI*float(k)/float(npoints)))
 *         if k > l - npoints -1:
 */
    }

    /* "WaveTools.py":644
 *         if k < npoints:
 *             wind[k] = 0.5*(1.-cos(M_PI*float(k)/float(npoints)))
 *         if k > l - npoints -1:             # <<<<<<<<<<<<<<
 *             wind[k] = 0.5*(1.-cos(M_PI*float(l-k-1)/float(npoints)))
 *     return wind
 */
    __pyx_t_3 = PyNumber_Subtract(__pyx_v_l, __pyx_v_npoints); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 644, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_SubtractObjC(__pyx_t_3, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 644, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_k, __pyx_t_4, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 644, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 644, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_7) {

      /* "WaveTools.py":645
 *             wind[k] = 0.5*(1.-cos(M_PI*float(k)/float(npoints)))
 *         if k > l - npoints -1:
 *             wind[k] = 0.5*(1.-cos(M_PI*float(l-k-1)/float(npoints)))             # <<<<<<<<<<<<<<
 *     return wind
 * 
 */
      __pyx_t_3 = PyNumber_Subtract(__pyx_v_l, __pyx_v_k); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 645, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyInt_SubtractObjC(__pyx_t_3, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 645, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_8 = __Pyx_PyObject_AsDouble(__pyx_t_4); if (unlikely(__pyx_t_8 == ((double)-1) && PyErr_Occurred())) __PYX_ERR(0, 645, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_9 = (M_PI * __pyx_t_8);
      __pyx_t_8 = __Pyx_PyObject_AsDouble(__pyx_v_npoints); if (unlikely(__pyx_t_8 == ((double)-1) && PyErr_Occurred())) __PYX_ERR(0, 645, __pyx_L1_error)
      if (unlikely(__pyx_t_8 == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 645, __pyx_L1_error)
      }
      __pyx_t_4 = PyFloat_FromDouble((0.5 * (1. - cos((__pyx_t_9 / __pyx_t_8))))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 645, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (unlikely(PyObject_SetItem(__pyx_v_wind, __pyx_v_k, __pyx_t_4) < 0)) __PYX_ERR(0, 645, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "WaveTools.py":644
 *         if k < npoints:
 *             wind[k] = 0.5*(1.-cos(M_PI*float(k)/float(npoints)))
 *         if k > l - npoints -1:             # <<<<<<<<<<<<<<
 *             wind[k] = 0.5*(1.-cos(M_PI*float(l-k-1)/float(npoints)))
 *     return wind
 */
    }

    /* "WaveTools.py":641
 *     npoints = int(cutoff*l)
 *     wind = np.ones(l)
 *     for k in range(l): # (k,np) = (n,N) normally used             # <<<<<<<<<<<<<<
 *         if k < npoints:
 *             wind[k] = 0.5*(1.-cos(M_PI*float(k)/float(npoints)))
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "WaveTools.py":646
 *         if k > l - npoints -1:
 *             wind[k] = 0.5*(1.-cos(M_PI*float(l-k-1)/float(npoints)))
 *     return wind             # <<<<<<<<<<<<<<
 * 
 * def decompose_tseries(time,eta,dt):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_wind);
  __pyx_r = __pyx_v_wind;
  goto __pyx_L0;

  /* "WaveTools.py":625
 *     return a
 * 
 * def costap(l,cutoff=0.1):             # <<<<<<<<<<<<<<
 *     """ Calculates and returns a top hat filter array
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("WaveTools.costap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_npoints);
  __Pyx_XDECREF(__pyx_v_wind);
  __Pyx_XDECREF(__pyx_v_k);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":648
 *     return wind
 * 
 * def decompose_tseries(time,eta,dt):             # <<<<<<<<<<<<<<
 *     """ Performs spectral analysis and calculates angular frequency components, amplitude, phase and mean level power
 *     of a time series with constant sampling.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_49decompose_tseries(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9WaveTools_48decompose_tseries[] = " Performs spectral analysis and calculates angular frequency components, amplitude, phase and mean level power\n    of a time series with constant sampling.\n\n    Parameters\n    ----------\n    time : numpy.ndarray\n        Time array\n    eta :numpy.ndarray\n        Signal array\n    dt : float\n        Sampling interval\n\n    Returns\n    --------\n    List\n        A list with results with four entries:\n         0 -> numpy array with angular frequency components\n         1 -> numpy array with amplitude of each component aa\n         2 -> numpy array with phase of each component pp\n         3 -> float of the 0th fourier mode (wave setup)\n\n         ";
static PyMethodDef __pyx_mdef_9WaveTools_49decompose_tseries = {"decompose_tseries", (PyCFunction)__pyx_pw_9WaveTools_49decompose_tseries, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_48decompose_tseries};
static PyObject *__pyx_pw_9WaveTools_49decompose_tseries(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_time = 0;
  PyObject *__pyx_v_eta = 0;
  PyObject *__pyx_v_dt = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("decompose_tseries (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_time,&__pyx_n_s_eta,&__pyx_n_s_dt,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_time)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_eta)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("decompose_tseries", 1, 3, 3, 1); __PYX_ERR(0, 648, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dt)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("decompose_tseries", 1, 3, 3, 2); __PYX_ERR(0, 648, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "decompose_tseries") < 0)) __PYX_ERR(0, 648, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_time = values[0];
    __pyx_v_eta = values[1];
    __pyx_v_dt = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("decompose_tseries", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 648, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("WaveTools.decompose_tseries", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9WaveTools_48decompose_tseries(__pyx_self, __pyx_v_time, __pyx_v_eta, __pyx_v_dt);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_48decompose_tseries(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_time, PyObject *__pyx_v_eta, PyObject *__pyx_v_dt) {
  PyObject *__pyx_v_nfft = NULL;
  PyObject *__pyx_v_results = NULL;
  PyObject *__pyx_v_fft_x = NULL;
  PyObject *__pyx_v_freq = NULL;
  PyObject *__pyx_v_iend = NULL;
  PyObject *__pyx_v_setup = NULL;
  PyObject *__pyx_v_aa = NULL;
  PyObject *__pyx_v_ww = NULL;
  PyObject *__pyx_v_pp = NULL;
  Py_ssize_t __pyx_v_k;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  __Pyx_RefNannySetupContext("decompose_tseries", 0);

  /* "WaveTools.py":671
 * 
 *          """
 *     nfft = len(time)             # <<<<<<<<<<<<<<
 *     results = []
 *     fft_x = np.fft.fft(eta,nfft)
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_time); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 671, __pyx_L1_error)
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 671, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_nfft = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "WaveTools.py":672
 *          """
 *     nfft = len(time)
 *     results = []             # <<<<<<<<<<<<<<
 *     fft_x = np.fft.fft(eta,nfft)
 *     freq = np.fft.fftfreq(nfft,dt)                              #%complex spectrum
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 672, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_results = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "WaveTools.py":673
 *     nfft = len(time)
 *     results = []
 *     fft_x = np.fft.fft(eta,nfft)             # <<<<<<<<<<<<<<
 *     freq = np.fft.fftfreq(nfft,dt)                              #%complex spectrum
 *     iend = np.where(freq<0)[0][0]
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 673, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_fft); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 673, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_fft); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 673, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_eta, __pyx_v_nfft};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 673, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_eta, __pyx_v_nfft};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 673, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 673, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_v_eta);
    __Pyx_GIVEREF(__pyx_v_eta);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_v_eta);
    __Pyx_INCREF(__pyx_v_nfft);
    __Pyx_GIVEREF(__pyx_v_nfft);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_v_nfft);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 673, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_fft_x = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "WaveTools.py":674
 *     results = []
 *     fft_x = np.fft.fft(eta,nfft)
 *     freq = np.fft.fftfreq(nfft,dt)                              #%complex spectrum             # <<<<<<<<<<<<<<
 *     iend = np.where(freq<0)[0][0]
 *     setup = np.real(fft_x[0])/nfft
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 674, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_fft); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 674, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_fftfreq); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 674, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_v_nfft, __pyx_v_dt};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 674, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_v_nfft, __pyx_v_dt};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 674, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  {
    __pyx_t_4 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 674, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_INCREF(__pyx_v_nfft);
    __Pyx_GIVEREF(__pyx_v_nfft);
    PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_5, __pyx_v_nfft);
    __Pyx_INCREF(__pyx_v_dt);
    __Pyx_GIVEREF(__pyx_v_dt);
    PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_5, __pyx_v_dt);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 674, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_freq = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "WaveTools.py":675
 *     fft_x = np.fft.fft(eta,nfft)
 *     freq = np.fft.fftfreq(nfft,dt)                              #%complex spectrum
 *     iend = np.where(freq<0)[0][0]             # <<<<<<<<<<<<<<
 *     setup = np.real(fft_x[0])/nfft
 *     fft_x = fft_x[1:iend]
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 675, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_where); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 675, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_freq, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 675, __pyx_L1_error)
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 675, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_3};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 675, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_3};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 675, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 675, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 675, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 675, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_4, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 675, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_iend = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "WaveTools.py":676
 *     freq = np.fft.fftfreq(nfft,dt)                              #%complex spectrum
 *     iend = np.where(freq<0)[0][0]
 *     setup = np.real(fft_x[0])/nfft             # <<<<<<<<<<<<<<
 *     fft_x = fft_x[1:iend]
 *     freq = freq[1:iend]
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 676, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_real); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 676, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_fft_x, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 676, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 676, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_4};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 676, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_4};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 676, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 676, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 676, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyNumber_Divide(__pyx_t_2, __pyx_v_nfft); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 676, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_setup = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "WaveTools.py":677
 *     iend = np.where(freq<0)[0][0]
 *     setup = np.real(fft_x[0])/nfft
 *     fft_x = fft_x[1:iend]             # <<<<<<<<<<<<<<
 *     freq = freq[1:iend]
 *                               #%retaining only first half of the spectrum
 */
  __pyx_t_7 = __Pyx_PyObject_GetSlice(__pyx_v_fft_x, 1, 0, NULL, &__pyx_v_iend, NULL, 1, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 677, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF_SET(__pyx_v_fft_x, __pyx_t_7);
  __pyx_t_7 = 0;

  /* "WaveTools.py":678
 *     setup = np.real(fft_x[0])/nfft
 *     fft_x = fft_x[1:iend]
 *     freq = freq[1:iend]             # <<<<<<<<<<<<<<
 *                               #%retaining only first half of the spectrum
 *     aa = 2.*abs(fft_x)/nfft                                 #%amplitudes (only the ones related to positive frequencies)
 */
  __pyx_t_7 = __Pyx_PyObject_GetSlice(__pyx_v_freq, 1, 0, NULL, &__pyx_v_iend, NULL, 1, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF_SET(__pyx_v_freq, __pyx_t_7);
  __pyx_t_7 = 0;

  /* "WaveTools.py":680
 *     freq = freq[1:iend]
 *                               #%retaining only first half of the spectrum
 *     aa = 2.*abs(fft_x)/nfft                                 #%amplitudes (only the ones related to positive frequencies)             # <<<<<<<<<<<<<<
 *     ww = 2*M_PI*freq
 * 
 */
  __pyx_t_7 = PyNumber_Absolute(__pyx_v_fft_x); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 680, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_2 = PyNumber_Multiply(__pyx_float_2_, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 680, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyNumber_Divide(__pyx_t_2, __pyx_v_nfft); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 680, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_aa = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "WaveTools.py":681
 *                               #%retaining only first half of the spectrum
 *     aa = 2.*abs(fft_x)/nfft                                 #%amplitudes (only the ones related to positive frequencies)
 *     ww = 2*M_PI*freq             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_7 = PyFloat_FromDouble((2.0 * M_PI)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 681, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_7, __pyx_v_freq); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 681, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_ww = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "WaveTools.py":684
 * 
 * 
 *     pp = np.zeros(len(aa),complex)             # <<<<<<<<<<<<<<
 *     for k in range(len(aa)):
 *         pp[k]=cmat.phase(fft_x[k])                       #% Calculating phases phases
 */
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_zeros); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_1 = PyObject_Length(__pyx_v_aa); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 684, __pyx_L1_error)
  __pyx_t_7 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_7, ((PyObject *)(&PyComplex_Type))};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 684, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_7, ((PyObject *)(&PyComplex_Type))};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 684, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 684, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_5, __pyx_t_7);
    __Pyx_INCREF(((PyObject *)(&PyComplex_Type)));
    __Pyx_GIVEREF(((PyObject *)(&PyComplex_Type)));
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_5, ((PyObject *)(&PyComplex_Type)));
    __pyx_t_7 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 684, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_pp = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "WaveTools.py":685
 * 
 *     pp = np.zeros(len(aa),complex)
 *     for k in range(len(aa)):             # <<<<<<<<<<<<<<
 *         pp[k]=cmat.phase(fft_x[k])                       #% Calculating phases phases
 *     pp = np.real(pp)                                         # Append results to list
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_aa); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 685, __pyx_L1_error)
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_1; __pyx_t_8+=1) {
    __pyx_v_k = __pyx_t_8;

    /* "WaveTools.py":686
 *     pp = np.zeros(len(aa),complex)
 *     for k in range(len(aa)):
 *         pp[k]=cmat.phase(fft_x[k])                       #% Calculating phases phases             # <<<<<<<<<<<<<<
 *     pp = np.real(pp)                                         # Append results to list
 *     results.append(ww)
 */
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_cmat); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 686, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_phase); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 686, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_fft_x, __pyx_v_k, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 686, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_7) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 686, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_6};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 686, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_6};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 686, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      {
        __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 686, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_7); __pyx_t_7 = NULL;
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 686, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(__Pyx_SetItemInt(__pyx_v_pp, __pyx_v_k, __pyx_t_2, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1) < 0)) __PYX_ERR(0, 686, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }

  /* "WaveTools.py":687
 *     for k in range(len(aa)):
 *         pp[k]=cmat.phase(fft_x[k])                       #% Calculating phases phases
 *     pp = np.real(pp)                                         # Append results to list             # <<<<<<<<<<<<<<
 *     results.append(ww)
 *     results.append(aa)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 687, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_real); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 687, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_pp); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 687, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_pp};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 687, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_pp};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 687, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 687, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_pp);
      __Pyx_GIVEREF(__pyx_v_pp);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_pp);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 687, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF_SET(__pyx_v_pp, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "WaveTools.py":688
 *         pp[k]=cmat.phase(fft_x[k])                       #% Calculating phases phases
 *     pp = np.real(pp)                                         # Append results to list
 *     results.append(ww)             # <<<<<<<<<<<<<<
 *     results.append(aa)
 *     results.append(pp)
 */
  __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_results, __pyx_v_ww); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 688, __pyx_L1_error)

  /* "WaveTools.py":689
 *     pp = np.real(pp)                                         # Append results to list
 *     results.append(ww)
 *     results.append(aa)             # <<<<<<<<<<<<<<
 *     results.append(pp)
 *     results.append(setup)
 */
  __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_results, __pyx_v_aa); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 689, __pyx_L1_error)

  /* "WaveTools.py":690
 *     results.append(ww)
 *     results.append(aa)
 *     results.append(pp)             # <<<<<<<<<<<<<<
 *     results.append(setup)
 *     return results
 */
  __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_results, __pyx_v_pp); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 690, __pyx_L1_error)

  /* "WaveTools.py":691
 *     results.append(aa)
 *     results.append(pp)
 *     results.append(setup)             # <<<<<<<<<<<<<<
 *     return results
 * 
 */
  __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_results, __pyx_v_setup); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 691, __pyx_L1_error)

  /* "WaveTools.py":692
 *     results.append(pp)
 *     results.append(setup)
 *     return results             # <<<<<<<<<<<<<<
 * 
 * class  SteadyCurrent:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_results);
  __pyx_r = __pyx_v_results;
  goto __pyx_L0;

  /* "WaveTools.py":648
 *     return wind
 * 
 * def decompose_tseries(time,eta,dt):             # <<<<<<<<<<<<<<
 *     """ Performs spectral analysis and calculates angular frequency components, amplitude, phase and mean level power
 *     of a time series with constant sampling.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("WaveTools.decompose_tseries", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_nfft);
  __Pyx_XDECREF(__pyx_v_results);
  __Pyx_XDECREF(__pyx_v_fft_x);
  __Pyx_XDECREF(__pyx_v_freq);
  __Pyx_XDECREF(__pyx_v_iend);
  __Pyx_XDECREF(__pyx_v_setup);
  __Pyx_XDECREF(__pyx_v_aa);
  __Pyx_XDECREF(__pyx_v_ww);
  __Pyx_XDECREF(__pyx_v_pp);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":708
 * 
 *             """
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *                  U,
 *                  mwl,
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_13SteadyCurrent_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9WaveTools_13SteadyCurrent_1__init__ = {"__init__", (PyCFunction)__pyx_pw_9WaveTools_13SteadyCurrent_1__init__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9WaveTools_13SteadyCurrent_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_U = 0;
  PyObject *__pyx_v_mwl = 0;
  PyObject *__pyx_v_rampTime = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_U,&__pyx_n_s_mwl,&__pyx_n_s_rampTime,0};
    PyObject* values[4] = {0,0,0,0};
    values[3] = ((PyObject *)((PyObject*)__pyx_float_0_));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_U)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 3, 4, 1); __PYX_ERR(0, 708, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mwl)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 3, 4, 2); __PYX_ERR(0, 708, __pyx_L3_error)
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rampTime);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 708, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_U = values[1];
    __pyx_v_mwl = values[2];
    __pyx_v_rampTime = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 708, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("WaveTools.SteadyCurrent.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9WaveTools_13SteadyCurrent___init__(__pyx_self, __pyx_v_self, __pyx_v_U, __pyx_v_mwl, __pyx_v_rampTime);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_13SteadyCurrent___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_U, PyObject *__pyx_v_mwl, PyObject *__pyx_v_rampTime) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "WaveTools.py":712
 *                  mwl,
 *                  rampTime = 0.):
 *         self.mwl = mwl             # <<<<<<<<<<<<<<
 *         self.U = U
 *         self.ramp = rampTime
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_mwl, __pyx_v_mwl) < 0) __PYX_ERR(0, 712, __pyx_L1_error)

  /* "WaveTools.py":713
 *                  rampTime = 0.):
 *         self.mwl = mwl
 *         self.U = U             # <<<<<<<<<<<<<<
 *         self.ramp = rampTime
 *     def eta(self,x,t):
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_U, __pyx_v_U) < 0) __PYX_ERR(0, 713, __pyx_L1_error)

  /* "WaveTools.py":714
 *         self.mwl = mwl
 *         self.U = U
 *         self.ramp = rampTime             # <<<<<<<<<<<<<<
 *     def eta(self,x,t):
 *         """Calculates free surface elevation (SolitaryWave class)
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_ramp, __pyx_v_rampTime) < 0) __PYX_ERR(0, 714, __pyx_L1_error)

  /* "WaveTools.py":708
 * 
 *             """
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *                  U,
 *                  mwl,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("WaveTools.SteadyCurrent.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":715
 *         self.U = U
 *         self.ramp = rampTime
 *     def eta(self,x,t):             # <<<<<<<<<<<<<<
 *         """Calculates free surface elevation (SolitaryWave class)
 *         Parameters
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_13SteadyCurrent_3eta(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9WaveTools_13SteadyCurrent_2eta[] = "Calculates free surface elevation (SolitaryWave class)\n        Parameters\n        ----------\n        x : numpy.ndarray\n            Position vector\n        t : float\n            Time variable\n\n        Returns\n        --------\n        float\n            Free-surface elevation as a float\n\n        ";
static PyMethodDef __pyx_mdef_9WaveTools_13SteadyCurrent_3eta = {"eta", (PyCFunction)__pyx_pw_9WaveTools_13SteadyCurrent_3eta, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_13SteadyCurrent_2eta};
static PyObject *__pyx_pw_9WaveTools_13SteadyCurrent_3eta(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  CYTHON_UNUSED PyObject *__pyx_v_x = 0;
  CYTHON_UNUSED PyObject *__pyx_v_t = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("eta (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_x,&__pyx_n_s_t,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("eta", 1, 3, 3, 1); __PYX_ERR(0, 715, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("eta", 1, 3, 3, 2); __PYX_ERR(0, 715, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "eta") < 0)) __PYX_ERR(0, 715, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_self = values[0];
    __pyx_v_x = values[1];
    __pyx_v_t = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("eta", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 715, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("WaveTools.SteadyCurrent.eta", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9WaveTools_13SteadyCurrent_2eta(__pyx_self, __pyx_v_self, __pyx_v_x, __pyx_v_t);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_13SteadyCurrent_2eta(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_x, CYTHON_UNUSED PyObject *__pyx_v_t) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("eta", 0);

  /* "WaveTools.py":730
 * 
 *         """
 *         return  self.mwl             # <<<<<<<<<<<<<<
 *     def u(self,x,t):
 *         """Calculates wave velocity vector (SolitaryWave class).
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_mwl); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 730, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "WaveTools.py":715
 *         self.U = U
 *         self.ramp = rampTime
 *     def eta(self,x,t):             # <<<<<<<<<<<<<<
 *         """Calculates free surface elevation (SolitaryWave class)
 *         Parameters
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("WaveTools.SteadyCurrent.eta", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":731
 *         """
 *         return  self.mwl
 *     def u(self,x,t):             # <<<<<<<<<<<<<<
 *         """Calculates wave velocity vector (SolitaryWave class).
 *         Parameters
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_13SteadyCurrent_5u(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9WaveTools_13SteadyCurrent_4u[] = "Calculates wave velocity vector (SolitaryWave class).\n        Parameters\n        ----------\n        x : numpy.ndarray\n            Position vector\n        t : float\n            Time variable\n\n        Returns\n        --------\n        numpy.ndarray\n            Velocity vector as 1D array\n\n        ";
static PyMethodDef __pyx_mdef_9WaveTools_13SteadyCurrent_5u = {"u", (PyCFunction)__pyx_pw_9WaveTools_13SteadyCurrent_5u, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_13SteadyCurrent_4u};
static PyObject *__pyx_pw_9WaveTools_13SteadyCurrent_5u(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  CYTHON_UNUSED PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_t = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("u (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_x,&__pyx_n_s_t,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("u", 1, 3, 3, 1); __PYX_ERR(0, 731, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("u", 1, 3, 3, 2); __PYX_ERR(0, 731, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "u") < 0)) __PYX_ERR(0, 731, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_self = values[0];
    __pyx_v_x = values[1];
    __pyx_v_t = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("u", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 731, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("WaveTools.SteadyCurrent.u", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9WaveTools_13SteadyCurrent_4u(__pyx_self, __pyx_v_self, __pyx_v_x, __pyx_v_t);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_13SteadyCurrent_4u(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_x, PyObject *__pyx_v_t) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("u", 0);

  /* "WaveTools.py":746
 * 
 *         """
 *         if(t<self.ramp):             # <<<<<<<<<<<<<<
 *             return self.U*t/self.ramp
 *         else:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_ramp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 746, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_t, __pyx_t_1, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 746, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 746, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "WaveTools.py":747
 *         """
 *         if(t<self.ramp):
 *             return self.U*t/self.ramp             # <<<<<<<<<<<<<<
 *         else:
 *             return self.U
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_U); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 747, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyNumber_Multiply(__pyx_t_2, __pyx_v_t); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 747, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_ramp); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 747, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 747, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "WaveTools.py":746
 * 
 *         """
 *         if(t<self.ramp):             # <<<<<<<<<<<<<<
 *             return self.U*t/self.ramp
 *         else:
 */
  }

  /* "WaveTools.py":749
 *             return self.U*t/self.ramp
 *         else:
 *             return self.U             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_U); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 749, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "WaveTools.py":731
 *         """
 *         return  self.mwl
 *     def u(self,x,t):             # <<<<<<<<<<<<<<
 *         """Calculates wave velocity vector (SolitaryWave class).
 *         Parameters
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("WaveTools.SteadyCurrent.u", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":776
 * 
 *             """
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *                  waveHeight,
 *                  mwl,
 */

/* Python wrapper */
static int __pyx_pw_9WaveTools_12SolitaryWave_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9WaveTools_12SolitaryWave_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_waveHeight = 0;
  PyObject *__pyx_v_mwl = 0;
  PyObject *__pyx_v_depth = 0;
  PyObject *__pyx_v_g = 0;
  PyObject *__pyx_v_waveDir = 0;
  PyObject *__pyx_v_trans = 0;
  PyObject *__pyx_v_fast = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_waveHeight,&__pyx_n_s_mwl,&__pyx_n_s_depth,&__pyx_n_s_g,&__pyx_n_s_waveDir,&__pyx_n_s_trans,&__pyx_n_s_fast,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    values[5] = __pyx_k__37;

    /* "WaveTools.py":783
 *                  waveDir,
 *                  trans = np.zeros(3,"d"),
 *                  fast = True):             # <<<<<<<<<<<<<<
 * 
 *         self.H = waveHeight
 */
    values[6] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_waveHeight)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mwl)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 5, 7, 1); __PYX_ERR(0, 776, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_depth)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 5, 7, 2); __PYX_ERR(0, 776, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 5, 7, 3); __PYX_ERR(0, 776, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_waveDir)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 5, 7, 4); __PYX_ERR(0, 776, __pyx_L3_error)
        }
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_trans);
          if (value) { values[5] = value; kw_args--; }
        }
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fast);
          if (value) { values[6] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 776, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_waveHeight = values[0];
    __pyx_v_mwl = values[1];
    __pyx_v_depth = values[2];
    __pyx_v_g = values[3];
    __pyx_v_waveDir = values[4];
    __pyx_v_trans = values[5];
    __pyx_v_fast = values[6];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 5, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 776, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("WaveTools.SolitaryWave.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9WaveTools_12SolitaryWave___init__(((struct __pyx_obj_9WaveTools_SolitaryWave *)__pyx_v_self), __pyx_v_waveHeight, __pyx_v_mwl, __pyx_v_depth, __pyx_v_g, __pyx_v_waveDir, __pyx_v_trans, __pyx_v_fast);

  /* "WaveTools.py":776
 * 
 *             """
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *                  waveHeight,
 *                  mwl,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9WaveTools_12SolitaryWave___init__(struct __pyx_obj_9WaveTools_SolitaryWave *__pyx_v_self, PyObject *__pyx_v_waveHeight, PyObject *__pyx_v_mwl, PyObject *__pyx_v_depth, PyObject *__pyx_v_g, PyObject *__pyx_v_waveDir, PyObject *__pyx_v_trans, PyObject *__pyx_v_fast) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  bool __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  double __pyx_t_9;
  int __pyx_t_10;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "WaveTools.py":785
 *                  fast = True):
 * 
 *         self.H = waveHeight             # <<<<<<<<<<<<<<
 *         self.fast = fast
 *         self.g = np.array(g)
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_waveHeight); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 785, __pyx_L1_error)
  __pyx_v_self->H = __pyx_t_1;

  /* "WaveTools.py":786
 * 
 *         self.H = waveHeight
 *         self.fast = fast             # <<<<<<<<<<<<<<
 *         self.g = np.array(g)
 *         self.waveDir =  setDirVector(np.array(waveDir))
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_fast); if (unlikely((__pyx_t_2 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 786, __pyx_L1_error)
  __pyx_v_self->fast = __pyx_t_2;

  /* "WaveTools.py":787
 *         self.H = waveHeight
 *         self.fast = fast
 *         self.g = np.array(g)             # <<<<<<<<<<<<<<
 *         self.waveDir =  setDirVector(np.array(waveDir))
 *         self.vDir = setVertDir(g)
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 787, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_array); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 787, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_g); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 787, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_g};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 787, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_g};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 787, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 787, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_INCREF(__pyx_v_g);
      __Pyx_GIVEREF(__pyx_v_g);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_g);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 787, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 787, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->g);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->g));
  __pyx_v_self->g = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "WaveTools.py":788
 *         self.fast = fast
 *         self.g = np.array(g)
 *         self.waveDir =  setDirVector(np.array(waveDir))             # <<<<<<<<<<<<<<
 *         self.vDir = setVertDir(g)
 *         self.gAbs = sqrt(self.g[0]*self.g[0]+self.g[1]*self.g[1]+self.g[2]*self.g[2])
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_setDirVector); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 788, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 788, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_array); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 788, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_waveDir); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 788, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_waveDir};
      __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 788, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_6);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_waveDir};
      __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 788, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_6);
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 788, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_INCREF(__pyx_v_waveDir);
      __Pyx_GIVEREF(__pyx_v_waveDir);
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_v_waveDir);
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_8, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 788, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (!__pyx_t_7) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 788, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_6};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 788, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_6};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 788, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 788, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 788, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 788, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->waveDir);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->waveDir));
  __pyx_v_self->waveDir = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "WaveTools.py":789
 *         self.g = np.array(g)
 *         self.waveDir =  setDirVector(np.array(waveDir))
 *         self.vDir = setVertDir(g)             # <<<<<<<<<<<<<<
 *         self.gAbs = sqrt(self.g[0]*self.g[0]+self.g[1]*self.g[1]+self.g[2]*self.g[2])
 *         self.trans = trans
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_setVertDir); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 789, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (!__pyx_t_8) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_g); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 789, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_v_g};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 789, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_v_g};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 789, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 789, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_8); __pyx_t_8 = NULL;
      __Pyx_INCREF(__pyx_v_g);
      __Pyx_GIVEREF(__pyx_v_g);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_g);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 789, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 789, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->vDir);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->vDir));
  __pyx_v_self->vDir = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "WaveTools.py":790
 *         self.waveDir =  setDirVector(np.array(waveDir))
 *         self.vDir = setVertDir(g)
 *         self.gAbs = sqrt(self.g[0]*self.g[0]+self.g[1]*self.g[1]+self.g[2]*self.g[2])             # <<<<<<<<<<<<<<
 *         self.trans = trans
 *         self.c =  np.sqrt(self.gAbs * (depth+self.H))
 */
  __pyx_t_3 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->g), 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 790, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->g), 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 790, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 790, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->g), 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 790, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->g), 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 790, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = PyNumber_Multiply(__pyx_t_5, __pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 790, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Add(__pyx_t_6, __pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 790, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->g), 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 790, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_6 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->g), 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 790, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = PyNumber_Multiply(__pyx_t_8, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 790, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyNumber_Add(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 790, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 790, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_self->gAbs = sqrt(__pyx_t_1);

  /* "WaveTools.py":791
 *         self.vDir = setVertDir(g)
 *         self.gAbs = sqrt(self.g[0]*self.g[0]+self.g[1]*self.g[1]+self.g[2]*self.g[2])
 *         self.trans = trans             # <<<<<<<<<<<<<<
 *         self.c =  np.sqrt(self.gAbs * (depth+self.H))
 *         self.mwl = mwl
 */
  if (!(likely(((__pyx_v_trans) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_trans, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 791, __pyx_L1_error)
  __pyx_t_6 = __pyx_v_trans;
  __Pyx_INCREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  __Pyx_GOTREF(__pyx_v_self->trans);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->trans));
  __pyx_v_self->trans = ((PyArrayObject *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "WaveTools.py":792
 *         self.gAbs = sqrt(self.g[0]*self.g[0]+self.g[1]*self.g[1]+self.g[2]*self.g[2])
 *         self.trans = trans
 *         self.c =  np.sqrt(self.gAbs * (depth+self.H))             # <<<<<<<<<<<<<<
 *         self.mwl = mwl
 *         self.depth = depth
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 792, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_sqrt); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 792, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->gAbs); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 792, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_8 = PyFloat_FromDouble(__pyx_v_self->H); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 792, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_7 = PyNumber_Add(__pyx_v_depth, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 792, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = PyNumber_Multiply(__pyx_t_5, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 792, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_7) {
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 792, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_6);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_8};
      __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 792, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_8};
      __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 792, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 792, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_7); __pyx_t_7 = NULL;
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_8);
      __pyx_t_8 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 792, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 792, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_self->c = __pyx_t_1;

  /* "WaveTools.py":793
 *         self.trans = trans
 *         self.c =  np.sqrt(self.gAbs * (depth+self.H))
 *         self.mwl = mwl             # <<<<<<<<<<<<<<
 *         self.depth = depth
 *         self.K = np.sqrt(3. *self.H/ (4. * self.depth))/self.depth
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_mwl); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 793, __pyx_L1_error)
  __pyx_v_self->mwl = __pyx_t_1;

  /* "WaveTools.py":794
 *         self.c =  np.sqrt(self.gAbs * (depth+self.H))
 *         self.mwl = mwl
 *         self.depth = depth             # <<<<<<<<<<<<<<
 *         self.K = np.sqrt(3. *self.H/ (4. * self.depth))/self.depth
 *         self.d2 = depth*depth
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_depth); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 794, __pyx_L1_error)
  __pyx_v_self->depth = __pyx_t_1;

  /* "WaveTools.py":795
 *         self.mwl = mwl
 *         self.depth = depth
 *         self.K = np.sqrt(3. *self.H/ (4. * self.depth))/self.depth             # <<<<<<<<<<<<<<
 *         self.d2 = depth*depth
 *         self.d3 = self.d2 * depth
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 795, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_sqrt); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 795, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = (3. * __pyx_v_self->H);
  __pyx_t_9 = (4. * __pyx_v_self->depth);
  if (unlikely(__pyx_t_9 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 795, __pyx_L1_error)
  }
  __pyx_t_3 = PyFloat_FromDouble((__pyx_t_1 / __pyx_t_9)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 795, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (!__pyx_t_8) {
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 795, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_6);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_3};
      __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 795, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_3};
      __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 795, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 795, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8); __pyx_t_8 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 795, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->depth); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 795, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = __Pyx_PyNumber_Divide(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 795, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_7); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 795, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_self->K = __pyx_t_9;

  /* "WaveTools.py":796
 *         self.depth = depth
 *         self.K = np.sqrt(3. *self.H/ (4. * self.depth))/self.depth
 *         self.d2 = depth*depth             # <<<<<<<<<<<<<<
 *         self.d3 = self.d2 * depth
 * #Checking if g and waveDir are perpendicular
 */
  __pyx_t_7 = PyNumber_Multiply(__pyx_v_depth, __pyx_v_depth); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 796, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_7); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 796, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_self->d2 = __pyx_t_9;

  /* "WaveTools.py":797
 *         self.K = np.sqrt(3. *self.H/ (4. * self.depth))/self.depth
 *         self.d2 = depth*depth
 *         self.d3 = self.d2 * depth             # <<<<<<<<<<<<<<
 * #Checking if g and waveDir are perpendicular
 *         dirCheck(self.waveDir,self.vDir)
 */
  __pyx_t_7 = PyFloat_FromDouble(__pyx_v_self->d2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 797, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = PyNumber_Multiply(__pyx_t_7, __pyx_v_depth); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 797, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 797, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_self->d3 = __pyx_t_9;

  /* "WaveTools.py":799
 *         self.d3 = self.d2 * depth
 * #Checking if g and waveDir are perpendicular
 *         dirCheck(self.waveDir,self.vDir)             # <<<<<<<<<<<<<<
 * 
 *     def eta(self,x,t):
 */
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_dirCheck); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = NULL;
  __pyx_t_10 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
      __pyx_t_10 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_7)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, ((PyObject *)__pyx_v_self->waveDir), ((PyObject *)__pyx_v_self->vDir)};
    __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 799, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_5);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, ((PyObject *)__pyx_v_self->waveDir), ((PyObject *)__pyx_v_self->vDir)};
    __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 799, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_5);
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 799, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_self->waveDir));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self->waveDir));
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_10, ((PyObject *)__pyx_v_self->waveDir));
    __Pyx_INCREF(((PyObject *)__pyx_v_self->vDir));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self->vDir));
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_10, ((PyObject *)__pyx_v_self->vDir));
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_3, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 799, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "WaveTools.py":776
 * 
 *             """
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *                  waveHeight,
 *                  mwl,
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("WaveTools.SolitaryWave.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":801
 *         dirCheck(self.waveDir,self.vDir)
 * 
 *     def eta(self,x,t):             # <<<<<<<<<<<<<<
 *         """Calculates free surface elevation (SolitaryWave class)
 *         Parameters
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_12SolitaryWave_3eta(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9WaveTools_12SolitaryWave_2eta[] = "Calculates free surface elevation (SolitaryWave class)\n        Parameters\n        ----------\n        x : numpy.ndarray\n            Position vector\n        t : float\n            Time variable\n\n        Returns\n        --------\n        float\n            Free-surface elevation as a float\n\n        ";
static PyMethodDef __pyx_mdef_9WaveTools_12SolitaryWave_3eta = {"eta", (PyCFunction)__pyx_pw_9WaveTools_12SolitaryWave_3eta, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_12SolitaryWave_2eta};
static PyObject *__pyx_pw_9WaveTools_12SolitaryWave_3eta(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_t = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("eta (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_t,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("eta", 1, 2, 2, 1); __PYX_ERR(0, 801, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "eta") < 0)) __PYX_ERR(0, 801, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = values[0];
    __pyx_v_t = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("eta", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 801, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("WaveTools.SolitaryWave.eta", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9WaveTools_12SolitaryWave_2eta(((struct __pyx_obj_9WaveTools_SolitaryWave *)__pyx_v_self), __pyx_v_x, __pyx_v_t);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_12SolitaryWave_2eta(struct __pyx_obj_9WaveTools_SolitaryWave *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_t) {
  PyObject *__pyx_v_phase = NULL;
  PyObject *__pyx_v_a1 = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  double __pyx_t_5;
  double __pyx_t_6;
  __Pyx_RefNannySetupContext("eta", 0);

  /* "WaveTools.py":816
 * 
 *         """
 *         phase = sum( (x[:]-self.trans[:])*self.waveDir[:])  - self.c * t             # <<<<<<<<<<<<<<
 *         a1 = self.K*phase
 *         return  self.H*1.0/ cosh(a1)**2
 */
  __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_v_x, 0, 0, NULL, NULL, &__pyx_slice__38, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 816, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetSlice(((PyObject *)__pyx_v_self->trans), 0, 0, NULL, NULL, &__pyx_slice__39, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 816, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Subtract(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 816, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetSlice(((PyObject *)__pyx_v_self->waveDir), 0, 0, NULL, NULL, &__pyx_slice__40, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 816, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyNumber_Multiply(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 816, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 816, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_sum, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 816, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->c); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 816, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_2, __pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 816, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Subtract(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 816, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_phase = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "WaveTools.py":817
 *         """
 *         phase = sum( (x[:]-self.trans[:])*self.waveDir[:])  - self.c * t
 *         a1 = self.K*phase             # <<<<<<<<<<<<<<
 *         return  self.H*1.0/ cosh(a1)**2
 *     def u(self,x,t):
 */
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->K); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 817, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_2, __pyx_v_phase); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 817, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_a1 = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "WaveTools.py":818
 *         phase = sum( (x[:]-self.trans[:])*self.waveDir[:])  - self.c * t
 *         a1 = self.K*phase
 *         return  self.H*1.0/ cosh(a1)**2             # <<<<<<<<<<<<<<
 *     def u(self,x,t):
 *         """Calculates wave velocity vector (SolitaryWave class).
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = (__pyx_v_self->H * 1.0);
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_a1); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 818, __pyx_L1_error)
  __pyx_t_6 = pow(cosh(__pyx_t_5), 2.0);
  if (unlikely(__pyx_t_6 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 818, __pyx_L1_error)
  }
  __pyx_t_3 = PyFloat_FromDouble((__pyx_t_4 / __pyx_t_6)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 818, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "WaveTools.py":801
 *         dirCheck(self.waveDir,self.vDir)
 * 
 *     def eta(self,x,t):             # <<<<<<<<<<<<<<
 *         """Calculates free surface elevation (SolitaryWave class)
 *         Parameters
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("WaveTools.SolitaryWave.eta", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_phase);
  __Pyx_XDECREF(__pyx_v_a1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":819
 *         a1 = self.K*phase
 *         return  self.H*1.0/ cosh(a1)**2
 *     def u(self,x,t):             # <<<<<<<<<<<<<<
 *         """Calculates wave velocity vector (SolitaryWave class).
 *         Parameters
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_12SolitaryWave_5u(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9WaveTools_12SolitaryWave_4u[] = "Calculates wave velocity vector (SolitaryWave class).\n        Parameters\n        ----------\n        x : numpy.ndarray\n            Position vector\n        t : float\n            Time variable\n\n        Returns\n        --------\n        numpy.ndarray\n            Velocity vector as 1D array\n\n        ";
static PyMethodDef __pyx_mdef_9WaveTools_12SolitaryWave_5u = {"u", (PyCFunction)__pyx_pw_9WaveTools_12SolitaryWave_5u, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_12SolitaryWave_4u};
static PyObject *__pyx_pw_9WaveTools_12SolitaryWave_5u(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_t = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("u (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_t,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("u", 1, 2, 2, 1); __PYX_ERR(0, 819, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "u") < 0)) __PYX_ERR(0, 819, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = values[0];
    __pyx_v_t = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("u", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 819, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("WaveTools.SolitaryWave.u", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9WaveTools_12SolitaryWave_4u(((struct __pyx_obj_9WaveTools_SolitaryWave *)__pyx_v_self), __pyx_v_x, __pyx_v_t);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_12SolitaryWave_4u(struct __pyx_obj_9WaveTools_SolitaryWave *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_t) {
  PyObject *__pyx_v_phase = NULL;
  double __pyx_v_a1;
  double __pyx_v_a2;
  PyObject *__pyx_v_Z = NULL;
  PyObject *__pyx_v_Uhorz = NULL;
  PyObject *__pyx_v_Uvert = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  double __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  __Pyx_RefNannySetupContext("u", 0);

  /* "WaveTools.py":836
 * 
 * 
 *         phase = sum( (x[:]-self.trans[:])*self.waveDir[:])  - self.c * t             # <<<<<<<<<<<<<<
 *         a1 =  cosh(self.K*phase*2.)
 *         a2 =  cosh(self.K*phase)
 */
  __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_v_x, 0, 0, NULL, NULL, &__pyx_slice__41, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 836, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetSlice(((PyObject *)__pyx_v_self->trans), 0, 0, NULL, NULL, &__pyx_slice__42, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 836, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Subtract(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 836, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetSlice(((PyObject *)__pyx_v_self->waveDir), 0, 0, NULL, NULL, &__pyx_slice__43, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 836, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyNumber_Multiply(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 836, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 836, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_sum, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 836, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->c); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 836, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_2, __pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 836, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Subtract(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 836, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_phase = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "WaveTools.py":837
 * 
 *         phase = sum( (x[:]-self.trans[:])*self.waveDir[:])  - self.c * t
 *         a1 =  cosh(self.K*phase*2.)             # <<<<<<<<<<<<<<
 *         a2 =  cosh(self.K*phase)
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->K); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 837, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_2, __pyx_v_phase); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 837, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_3, __pyx_float_2_); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 837, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 837, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_a1 = cosh(__pyx_t_4);

  /* "WaveTools.py":838
 *         phase = sum( (x[:]-self.trans[:])*self.waveDir[:])  - self.c * t
 *         a1 =  cosh(self.K*phase*2.)
 *         a2 =  cosh(self.K*phase)             # <<<<<<<<<<<<<<
 * 
 *         Z =  (self.vDir[0]*x[0] + self.vDir[1]*x[1]+ self.vDir[2]*x[2]) - self.mwl
 */
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->K); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 838, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_2, __pyx_v_phase); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 838, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 838, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_a2 = cosh(__pyx_t_4);

  /* "WaveTools.py":840
 *         a2 =  cosh(self.K*phase)
 * 
 *         Z =  (self.vDir[0]*x[0] + self.vDir[1]*x[1]+ self.vDir[2]*x[2]) - self.mwl             # <<<<<<<<<<<<<<
 * 
 *         Uhorz =  1.0 /(4.0 * self.depth**4 ) * np.sqrt(self.gAbs * self.depth) *  self.H *(
 */
  __pyx_t_3 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->vDir), 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 840, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_x, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 840, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyNumber_Multiply(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 840, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->vDir), 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 840, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_x, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 840, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PyNumber_Multiply(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 840, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 840, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->vDir), 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 840, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_x, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 840, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 840, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 840, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->mwl); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 840, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Subtract(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 840, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_Z = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "WaveTools.py":842
 *         Z =  (self.vDir[0]*x[0] + self.vDir[1]*x[1]+ self.vDir[2]*x[2]) - self.mwl
 * 
 *         Uhorz =  1.0 /(4.0 * self.depth**4 ) * np.sqrt(self.gAbs * self.depth) *  self.H *(             # <<<<<<<<<<<<<<
 *             2.0 * self.d3 + self.d2 * self.H  + 12.0 * self.depth * self.H * Z + 6.0 *  self.H * Z**2.0 +
 *             (2.0 * self.d3 - self.d2 * self.H - 6.0 * self.depth * self.H * Z - 3.0 * self.H * Z**2 ) * a1)/(a2)**4
 */
  __pyx_t_4 = (4.0 * pow(__pyx_v_self->depth, 4.0));
  if (unlikely(__pyx_t_4 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 842, __pyx_L1_error)
  }
  __pyx_t_3 = PyFloat_FromDouble((1.0 / __pyx_t_4)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 842, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 842, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_sqrt); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 842, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyFloat_FromDouble((__pyx_v_self->gAbs * __pyx_v_self->depth)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 842, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 842, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_1};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 842, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_1};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 842, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 842, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 842, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyNumber_Multiply(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 842, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->H); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 842, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_5, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 842, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "WaveTools.py":843
 * 
 *         Uhorz =  1.0 /(4.0 * self.depth**4 ) * np.sqrt(self.gAbs * self.depth) *  self.H *(
 *             2.0 * self.d3 + self.d2 * self.H  + 12.0 * self.depth * self.H * Z + 6.0 *  self.H * Z**2.0 +             # <<<<<<<<<<<<<<
 *             (2.0 * self.d3 - self.d2 * self.H - 6.0 * self.depth * self.H * Z - 3.0 * self.H * Z**2 ) * a1)/(a2)**4
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble(((2.0 * __pyx_v_self->d3) + (__pyx_v_self->d2 * __pyx_v_self->H))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 843, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = PyFloat_FromDouble(((12.0 * __pyx_v_self->depth) * __pyx_v_self->H)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 843, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = PyNumber_Multiply(__pyx_t_5, __pyx_v_Z); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 843, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyNumber_Add(__pyx_t_2, __pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 843, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyFloat_FromDouble((6.0 * __pyx_v_self->H)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 843, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_2 = PyNumber_Power(__pyx_v_Z, __pyx_float_2_0, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 843, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyNumber_Multiply(__pyx_t_7, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 843, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 843, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "WaveTools.py":844
 *         Uhorz =  1.0 /(4.0 * self.depth**4 ) * np.sqrt(self.gAbs * self.depth) *  self.H *(
 *             2.0 * self.d3 + self.d2 * self.H  + 12.0 * self.depth * self.H * Z + 6.0 *  self.H * Z**2.0 +
 *             (2.0 * self.d3 - self.d2 * self.H - 6.0 * self.depth * self.H * Z - 3.0 * self.H * Z**2 ) * a1)/(a2)**4             # <<<<<<<<<<<<<<
 * 
 *         Uvert =   1.0 / ( 4.0 * np.sqrt(self.gAbs* self.depth) ) * np.sqrt(3.0) * self.gAbs * (self.H / self.depth**3.0)** 1.5  * (self.depth + Z)*(
 */
  __pyx_t_1 = PyFloat_FromDouble(((2.0 * __pyx_v_self->d3) - (__pyx_v_self->d2 * __pyx_v_self->H))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 844, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = PyFloat_FromDouble(((6.0 * __pyx_v_self->depth) * __pyx_v_self->H)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 844, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = PyNumber_Multiply(__pyx_t_5, __pyx_v_Z); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 844, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyNumber_Subtract(__pyx_t_1, __pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 844, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyFloat_FromDouble((3.0 * __pyx_v_self->H)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 844, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_1 = PyNumber_Power(__pyx_v_Z, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 844, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_7, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 844, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Subtract(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 844, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyFloat_FromDouble(__pyx_v_a1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 844, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = PyNumber_Multiply(__pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 844, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "WaveTools.py":843
 * 
 *         Uhorz =  1.0 /(4.0 * self.depth**4 ) * np.sqrt(self.gAbs * self.depth) *  self.H *(
 *             2.0 * self.d3 + self.d2 * self.H  + 12.0 * self.depth * self.H * Z + 6.0 *  self.H * Z**2.0 +             # <<<<<<<<<<<<<<
 *             (2.0 * self.d3 - self.d2 * self.H - 6.0 * self.depth * self.H * Z - 3.0 * self.H * Z**2 ) * a1)/(a2)**4
 * 
 */
  __pyx_t_6 = PyNumber_Add(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 843, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "WaveTools.py":842
 *         Z =  (self.vDir[0]*x[0] + self.vDir[1]*x[1]+ self.vDir[2]*x[2]) - self.mwl
 * 
 *         Uhorz =  1.0 /(4.0 * self.depth**4 ) * np.sqrt(self.gAbs * self.depth) *  self.H *(             # <<<<<<<<<<<<<<
 *             2.0 * self.d3 + self.d2 * self.H  + 12.0 * self.depth * self.H * Z + 6.0 *  self.H * Z**2.0 +
 *             (2.0 * self.d3 - self.d2 * self.H - 6.0 * self.depth * self.H * Z - 3.0 * self.H * Z**2 ) * a1)/(a2)**4
 */
  __pyx_t_5 = PyNumber_Multiply(__pyx_t_3, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 842, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "WaveTools.py":844
 *         Uhorz =  1.0 /(4.0 * self.depth**4 ) * np.sqrt(self.gAbs * self.depth) *  self.H *(
 *             2.0 * self.d3 + self.d2 * self.H  + 12.0 * self.depth * self.H * Z + 6.0 *  self.H * Z**2.0 +
 *             (2.0 * self.d3 - self.d2 * self.H - 6.0 * self.depth * self.H * Z - 3.0 * self.H * Z**2 ) * a1)/(a2)**4             # <<<<<<<<<<<<<<
 * 
 *         Uvert =   1.0 / ( 4.0 * np.sqrt(self.gAbs* self.depth) ) * np.sqrt(3.0) * self.gAbs * (self.H / self.depth**3.0)** 1.5  * (self.depth + Z)*(
 */
  __pyx_t_6 = PyFloat_FromDouble(pow(__pyx_v_a2, 4.0)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 844, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 844, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_Uhorz = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "WaveTools.py":846
 *             (2.0 * self.d3 - self.d2 * self.H - 6.0 * self.depth * self.H * Z - 3.0 * self.H * Z**2 ) * a1)/(a2)**4
 * 
 *         Uvert =   1.0 / ( 4.0 * np.sqrt(self.gAbs* self.depth) ) * np.sqrt(3.0) * self.gAbs * (self.H / self.depth**3.0)** 1.5  * (self.depth + Z)*(             # <<<<<<<<<<<<<<
 *                 2.0 * self.depth**3 - 7.0 * self.depth**2.0 * self.H + 10.0 * self.depth * self.H * Z + 5.0 * self.H * Z**2.0 +
 *                 (2.0 * self.depth**3.0 + self.depth**2.0 * self.H - 2.0 * self.depth * self.H * Z - self.H * Z**2.0)*
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 846, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_sqrt); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 846, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyFloat_FromDouble((__pyx_v_self->gAbs * __pyx_v_self->depth)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 846, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 846, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_6};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 846, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_6};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 846, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    {
      __pyx_t_1 = PyTuple_New(1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 846, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2); __pyx_t_2 = NULL;
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_1, 0+1, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 846, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyNumber_Multiply(__pyx_float_4_0, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 846, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyFloat_DivideCObj(__pyx_float_1_0, __pyx_t_5, 1.0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 846, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 846, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_sqrt); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 846, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__44, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 846, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Multiply(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 846, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->gAbs); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 846, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 846, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_4 = pow(__pyx_v_self->depth, 3.0);
  if (unlikely(__pyx_t_4 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 846, __pyx_L1_error)
  }
  __pyx_t_5 = PyFloat_FromDouble(pow((__pyx_v_self->H / __pyx_t_4), 1.5)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 846, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = PyNumber_Multiply(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 846, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->depth); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 846, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = PyNumber_Add(__pyx_t_5, __pyx_v_Z); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 846, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyNumber_Multiply(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 846, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "WaveTools.py":847
 * 
 *         Uvert =   1.0 / ( 4.0 * np.sqrt(self.gAbs* self.depth) ) * np.sqrt(3.0) * self.gAbs * (self.H / self.depth**3.0)** 1.5  * (self.depth + Z)*(
 *                 2.0 * self.depth**3 - 7.0 * self.depth**2.0 * self.H + 10.0 * self.depth * self.H * Z + 5.0 * self.H * Z**2.0 +             # <<<<<<<<<<<<<<
 *                 (2.0 * self.depth**3.0 + self.depth**2.0 * self.H - 2.0 * self.depth * self.H * Z - self.H * Z**2.0)*
 *                 cosh(np.sqrt( 3.0 * self.H / self.depth**3.0) * phase ))/(
 */
  __pyx_t_3 = PyFloat_FromDouble(((2.0 * pow(__pyx_v_self->depth, 3.0)) - ((7.0 * pow(__pyx_v_self->depth, 2.0)) * __pyx_v_self->H))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 847, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyFloat_FromDouble(((10.0 * __pyx_v_self->depth) * __pyx_v_self->H)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 847, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_1, __pyx_v_Z); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 847, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_t_3, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 847, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyFloat_FromDouble((5.0 * __pyx_v_self->H)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 847, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = PyNumber_Power(__pyx_v_Z, __pyx_float_2_0, Py_None); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 847, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 847, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 847, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "WaveTools.py":848
 *         Uvert =   1.0 / ( 4.0 * np.sqrt(self.gAbs* self.depth) ) * np.sqrt(3.0) * self.gAbs * (self.H / self.depth**3.0)** 1.5  * (self.depth + Z)*(
 *                 2.0 * self.depth**3 - 7.0 * self.depth**2.0 * self.H + 10.0 * self.depth * self.H * Z + 5.0 * self.H * Z**2.0 +
 *                 (2.0 * self.depth**3.0 + self.depth**2.0 * self.H - 2.0 * self.depth * self.H * Z - self.H * Z**2.0)*             # <<<<<<<<<<<<<<
 *                 cosh(np.sqrt( 3.0 * self.H / self.depth**3.0) * phase ))/(
 *                 cosh(np.sqrt( 3.0 * self.H / ( 4.0 * self.depth**3.0))*
 */
  __pyx_t_2 = PyFloat_FromDouble(((2.0 * pow(__pyx_v_self->depth, 3.0)) + (pow(__pyx_v_self->depth, 2.0) * __pyx_v_self->H))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 848, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyFloat_FromDouble(((2.0 * __pyx_v_self->depth) * __pyx_v_self->H)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 848, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_1, __pyx_v_Z); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 848, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Subtract(__pyx_t_2, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 848, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyFloat_FromDouble(__pyx_v_self->H); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 848, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = PyNumber_Power(__pyx_v_Z, __pyx_float_2_0, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 848, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = PyNumber_Multiply(__pyx_t_6, __pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 848, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Subtract(__pyx_t_1, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 848, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "WaveTools.py":849
 *                 2.0 * self.depth**3 - 7.0 * self.depth**2.0 * self.H + 10.0 * self.depth * self.H * Z + 5.0 * self.H * Z**2.0 +
 *                 (2.0 * self.depth**3.0 + self.depth**2.0 * self.H - 2.0 * self.depth * self.H * Z - self.H * Z**2.0)*
 *                 cosh(np.sqrt( 3.0 * self.H / self.depth**3.0) * phase ))/(             # <<<<<<<<<<<<<<
 *                 cosh(np.sqrt( 3.0 * self.H / ( 4.0 * self.depth**3.0))*
 *                 phase )   )** 4.0*( tanh( np.sqrt( 3.0 * self.H / ( 4.0 * self.depth**3.0))*phase ))
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 849, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_sqrt); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 849, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = (3.0 * __pyx_v_self->H);
  __pyx_t_8 = pow(__pyx_v_self->depth, 3.0);
  if (unlikely(__pyx_t_8 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 849, __pyx_L1_error)
  }
  __pyx_t_1 = PyFloat_FromDouble((__pyx_t_4 / __pyx_t_8)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 849, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (!__pyx_t_9) {
    __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 849, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_7);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_t_1};
      __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 849, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_t_1};
      __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 849, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    {
      __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 849, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_9); __pyx_t_9 = NULL;
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_10, 0+1, __pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_10, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 849, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_7, __pyx_v_phase); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 849, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 849, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyFloat_FromDouble(cosh(__pyx_t_8)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 849, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);

  /* "WaveTools.py":848
 *         Uvert =   1.0 / ( 4.0 * np.sqrt(self.gAbs* self.depth) ) * np.sqrt(3.0) * self.gAbs * (self.H / self.depth**3.0)** 1.5  * (self.depth + Z)*(
 *                 2.0 * self.depth**3 - 7.0 * self.depth**2.0 * self.H + 10.0 * self.depth * self.H * Z + 5.0 * self.H * Z**2.0 +
 *                 (2.0 * self.depth**3.0 + self.depth**2.0 * self.H - 2.0 * self.depth * self.H * Z - self.H * Z**2.0)*             # <<<<<<<<<<<<<<
 *                 cosh(np.sqrt( 3.0 * self.H / self.depth**3.0) * phase ))/(
 *                 cosh(np.sqrt( 3.0 * self.H / ( 4.0 * self.depth**3.0))*
 */
  __pyx_t_7 = PyNumber_Multiply(__pyx_t_2, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 848, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "WaveTools.py":847
 * 
 *         Uvert =   1.0 / ( 4.0 * np.sqrt(self.gAbs* self.depth) ) * np.sqrt(3.0) * self.gAbs * (self.H / self.depth**3.0)** 1.5  * (self.depth + Z)*(
 *                 2.0 * self.depth**3 - 7.0 * self.depth**2.0 * self.H + 10.0 * self.depth * self.H * Z + 5.0 * self.H * Z**2.0 +             # <<<<<<<<<<<<<<
 *                 (2.0 * self.depth**3.0 + self.depth**2.0 * self.H - 2.0 * self.depth * self.H * Z - self.H * Z**2.0)*
 *                 cosh(np.sqrt( 3.0 * self.H / self.depth**3.0) * phase ))/(
 */
  __pyx_t_6 = PyNumber_Add(__pyx_t_3, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 847, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "WaveTools.py":846
 *             (2.0 * self.d3 - self.d2 * self.H - 6.0 * self.depth * self.H * Z - 3.0 * self.H * Z**2 ) * a1)/(a2)**4
 * 
 *         Uvert =   1.0 / ( 4.0 * np.sqrt(self.gAbs* self.depth) ) * np.sqrt(3.0) * self.gAbs * (self.H / self.depth**3.0)** 1.5  * (self.depth + Z)*(             # <<<<<<<<<<<<<<
 *                 2.0 * self.depth**3 - 7.0 * self.depth**2.0 * self.H + 10.0 * self.depth * self.H * Z + 5.0 * self.H * Z**2.0 +
 *                 (2.0 * self.depth**3.0 + self.depth**2.0 * self.H - 2.0 * self.depth * self.H * Z - self.H * Z**2.0)*
 */
  __pyx_t_7 = PyNumber_Multiply(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 846, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "WaveTools.py":850
 *                 (2.0 * self.depth**3.0 + self.depth**2.0 * self.H - 2.0 * self.depth * self.H * Z - self.H * Z**2.0)*
 *                 cosh(np.sqrt( 3.0 * self.H / self.depth**3.0) * phase ))/(
 *                 cosh(np.sqrt( 3.0 * self.H / ( 4.0 * self.depth**3.0))*             # <<<<<<<<<<<<<<
 *                 phase )   )** 4.0*( tanh( np.sqrt( 3.0 * self.H / ( 4.0 * self.depth**3.0))*phase ))
 *         return self.waveDir*Uhorz + self.vDir*Uvert
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 850, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_sqrt); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 850, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_8 = (3.0 * __pyx_v_self->H);
  __pyx_t_4 = (4.0 * pow(__pyx_v_self->depth, 3.0));
  if (unlikely(__pyx_t_4 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 850, __pyx_L1_error)
  }
  __pyx_t_5 = PyFloat_FromDouble((__pyx_t_8 / __pyx_t_4)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 850, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 850, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_6);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_5};
      __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 850, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_5};
      __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 850, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 850, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_2); __pyx_t_2 = NULL;
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_10, 0+1, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_10, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 850, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "WaveTools.py":851
 *                 cosh(np.sqrt( 3.0 * self.H / self.depth**3.0) * phase ))/(
 *                 cosh(np.sqrt( 3.0 * self.H / ( 4.0 * self.depth**3.0))*
 *                 phase )   )** 4.0*( tanh( np.sqrt( 3.0 * self.H / ( 4.0 * self.depth**3.0))*phase ))             # <<<<<<<<<<<<<<
 *         return self.waveDir*Uhorz + self.vDir*Uvert
 * 
 */
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_6, __pyx_v_phase); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 850, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "WaveTools.py":850
 *                 (2.0 * self.depth**3.0 + self.depth**2.0 * self.H - 2.0 * self.depth * self.H * Z - self.H * Z**2.0)*
 *                 cosh(np.sqrt( 3.0 * self.H / self.depth**3.0) * phase ))/(
 *                 cosh(np.sqrt( 3.0 * self.H / ( 4.0 * self.depth**3.0))*             # <<<<<<<<<<<<<<
 *                 phase )   )** 4.0*( tanh( np.sqrt( 3.0 * self.H / ( 4.0 * self.depth**3.0))*phase ))
 *         return self.waveDir*Uhorz + self.vDir*Uvert
 */
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 850, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "WaveTools.py":851
 *                 cosh(np.sqrt( 3.0 * self.H / self.depth**3.0) * phase ))/(
 *                 cosh(np.sqrt( 3.0 * self.H / ( 4.0 * self.depth**3.0))*
 *                 phase )   )** 4.0*( tanh( np.sqrt( 3.0 * self.H / ( 4.0 * self.depth**3.0))*phase ))             # <<<<<<<<<<<<<<
 *         return self.waveDir*Uhorz + self.vDir*Uvert
 * 
 */
  __pyx_t_3 = PyFloat_FromDouble(pow(cosh(__pyx_t_4), 4.0)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 851, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "WaveTools.py":849
 *                 2.0 * self.depth**3 - 7.0 * self.depth**2.0 * self.H + 10.0 * self.depth * self.H * Z + 5.0 * self.H * Z**2.0 +
 *                 (2.0 * self.depth**3.0 + self.depth**2.0 * self.H - 2.0 * self.depth * self.H * Z - self.H * Z**2.0)*
 *                 cosh(np.sqrt( 3.0 * self.H / self.depth**3.0) * phase ))/(             # <<<<<<<<<<<<<<
 *                 cosh(np.sqrt( 3.0 * self.H / ( 4.0 * self.depth**3.0))*
 *                 phase )   )** 4.0*( tanh( np.sqrt( 3.0 * self.H / ( 4.0 * self.depth**3.0))*phase ))
 */
  __pyx_t_6 = __Pyx_PyNumber_Divide(__pyx_t_7, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 849, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "WaveTools.py":851
 *                 cosh(np.sqrt( 3.0 * self.H / self.depth**3.0) * phase ))/(
 *                 cosh(np.sqrt( 3.0 * self.H / ( 4.0 * self.depth**3.0))*
 *                 phase )   )** 4.0*( tanh( np.sqrt( 3.0 * self.H / ( 4.0 * self.depth**3.0))*phase ))             # <<<<<<<<<<<<<<
 *         return self.waveDir*Uhorz + self.vDir*Uvert
 * 
 */
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 851, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_sqrt); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 851, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_4 = (3.0 * __pyx_v_self->H);
  __pyx_t_8 = (4.0 * pow(__pyx_v_self->depth, 3.0));
  if (unlikely(__pyx_t_8 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 851, __pyx_L1_error)
  }
  __pyx_t_7 = PyFloat_FromDouble((__pyx_t_4 / __pyx_t_8)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 851, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_10))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_10);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_10, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 851, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_10)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_7};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_10, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 851, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_10)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_7};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_10, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 851, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 851, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 851, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = PyNumber_Multiply(__pyx_t_3, __pyx_v_phase); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 851, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_t_10); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 851, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = PyFloat_FromDouble(tanh(__pyx_t_8)); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 851, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_6, __pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 851, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_v_Uvert = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "WaveTools.py":852
 *                 cosh(np.sqrt( 3.0 * self.H / ( 4.0 * self.depth**3.0))*
 *                 phase )   )** 4.0*( tanh( np.sqrt( 3.0 * self.H / ( 4.0 * self.depth**3.0))*phase ))
 *         return self.waveDir*Uhorz + self.vDir*Uvert             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyNumber_Multiply(((PyObject *)__pyx_v_self->waveDir), __pyx_v_Uhorz); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 852, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_10 = PyNumber_Multiply(((PyObject *)__pyx_v_self->vDir), __pyx_v_Uvert); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 852, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_6 = PyNumber_Add(__pyx_t_3, __pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 852, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "WaveTools.py":819
 *         a1 = self.K*phase
 *         return  self.H*1.0/ cosh(a1)**2
 *     def u(self,x,t):             # <<<<<<<<<<<<<<
 *         """Calculates wave velocity vector (SolitaryWave class).
 *         Parameters
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("WaveTools.SolitaryWave.u", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_phase);
  __Pyx_XDECREF(__pyx_v_Z);
  __Pyx_XDECREF(__pyx_v_Uhorz);
  __Pyx_XDECREF(__pyx_v_Uvert);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":893
 * 
 *             """
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *                  period,
 *                  waveHeight,
 */

/* Python wrapper */
static int __pyx_pw_9WaveTools_18MonochromaticWaves_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9WaveTools_18MonochromaticWaves_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_period = 0;
  PyObject *__pyx_v_waveHeight = 0;
  PyObject *__pyx_v_mwl = 0;
  PyObject *__pyx_v_depth = 0;
  PyObject *__pyx_v_g = 0;
  PyObject *__pyx_v_waveDir = 0;
  PyObject *__pyx_v_wavelength = 0;
  PyObject *__pyx_v_waveType = 0;
  PyObject *__pyx_v_Ycoeff = 0;
  PyObject *__pyx_v_Bcoeff = 0;
  PyObject *__pyx_v_Nf = 0;
  PyObject *__pyx_v_meanVelocity = 0;
  PyObject *__pyx_v_phi0 = 0;
  PyObject *__pyx_v_fast = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_period,&__pyx_n_s_waveHeight,&__pyx_n_s_mwl,&__pyx_n_s_depth,&__pyx_n_s_g,&__pyx_n_s_waveDir,&__pyx_n_s_wavelength,&__pyx_n_s_waveType,&__pyx_n_s_Ycoeff,&__pyx_n_s_Bcoeff,&__pyx_n_s_Nf,&__pyx_n_s_meanVelocity,&__pyx_n_s_phi0,&__pyx_n_s_fast,0};
    PyObject* values[14] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0};

    /* "WaveTools.py":900
 *                  g,
 *                  waveDir,
 *                  wavelength=None,             # <<<<<<<<<<<<<<
 *                  waveType="Linear",
 *                  Ycoeff = np.zeros(1000,),
 */
    values[6] = ((PyObject *)Py_None);
    values[7] = ((PyObject *)__pyx_n_s_Linear);
    values[8] = __pyx_k__45;
    values[9] = __pyx_k__46;
    values[10] = ((PyObject *)__pyx_int_1000);
    values[11] = __pyx_k__47;
    values[12] = ((PyObject *)__pyx_float_0_);

    /* "WaveTools.py":907
 *                  meanVelocity = np.array([0.,0,0.]),
 *                  phi0 = 0.,
 *                  fast = True):             # <<<<<<<<<<<<<<
 * 
 *         self.fast = fast
 */
    values[13] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_period)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_waveHeight)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 6, 14, 1); __PYX_ERR(0, 893, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mwl)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 6, 14, 2); __PYX_ERR(0, 893, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_depth)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 6, 14, 3); __PYX_ERR(0, 893, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 6, 14, 4); __PYX_ERR(0, 893, __pyx_L3_error)
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_waveDir)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 6, 14, 5); __PYX_ERR(0, 893, __pyx_L3_error)
        }
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_wavelength);
          if (value) { values[6] = value; kw_args--; }
        }
        case  7:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_waveType);
          if (value) { values[7] = value; kw_args--; }
        }
        case  8:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Ycoeff);
          if (value) { values[8] = value; kw_args--; }
        }
        case  9:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Bcoeff);
          if (value) { values[9] = value; kw_args--; }
        }
        case 10:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Nf);
          if (value) { values[10] = value; kw_args--; }
        }
        case 11:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_meanVelocity);
          if (value) { values[11] = value; kw_args--; }
        }
        case 12:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_phi0);
          if (value) { values[12] = value; kw_args--; }
        }
        case 13:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fast);
          if (value) { values[13] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 893, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_period = values[0];
    __pyx_v_waveHeight = values[1];
    __pyx_v_mwl = values[2];
    __pyx_v_depth = values[3];
    __pyx_v_g = values[4];
    __pyx_v_waveDir = values[5];
    __pyx_v_wavelength = values[6];
    __pyx_v_waveType = values[7];
    __pyx_v_Ycoeff = values[8];
    __pyx_v_Bcoeff = values[9];
    __pyx_v_Nf = values[10];
    __pyx_v_meanVelocity = values[11];
    __pyx_v_phi0 = values[12];
    __pyx_v_fast = values[13];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 6, 14, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 893, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("WaveTools.MonochromaticWaves.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9WaveTools_18MonochromaticWaves___init__(((struct __pyx_obj_9WaveTools_MonochromaticWaves *)__pyx_v_self), __pyx_v_period, __pyx_v_waveHeight, __pyx_v_mwl, __pyx_v_depth, __pyx_v_g, __pyx_v_waveDir, __pyx_v_wavelength, __pyx_v_waveType, __pyx_v_Ycoeff, __pyx_v_Bcoeff, __pyx_v_Nf, __pyx_v_meanVelocity, __pyx_v_phi0, __pyx_v_fast);

  /* "WaveTools.py":893
 * 
 *             """
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *                  period,
 *                  waveHeight,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9WaveTools_18MonochromaticWaves___init__(struct __pyx_obj_9WaveTools_MonochromaticWaves *__pyx_v_self, PyObject *__pyx_v_period, PyObject *__pyx_v_waveHeight, PyObject *__pyx_v_mwl, PyObject *__pyx_v_depth, PyObject *__pyx_v_g, PyObject *__pyx_v_waveDir, PyObject *__pyx_v_wavelength, PyObject *__pyx_v_waveType, PyObject *__pyx_v_Ycoeff, PyObject *__pyx_v_Bcoeff, PyObject *__pyx_v_Nf, PyObject *__pyx_v_meanVelocity, PyObject *__pyx_v_phi0, PyObject *__pyx_v_fast) {
  PyObject *__pyx_v_knownWaveTypes = NULL;
  PyObject *__pyx_v_ii = NULL;
  PyObject *__pyx_v_kk = NULL;
  PyObject *__pyx_v_ij = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  double __pyx_t_10;
  int __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  Py_ssize_t __pyx_t_15;
  PyObject *(*__pyx_t_16)(PyObject *);
  Py_ssize_t __pyx_t_17;
  double *__pyx_t_18;
  double (*__pyx_t_19)(struct __pyx_obj_9WaveTools_MonochromaticWaves *, double *, double);
  void (*__pyx_t_20)(struct __pyx_obj_9WaveTools_MonochromaticWaves *, double *, double *, double);
  double (*__pyx_t_21)(struct __pyx_obj_9WaveTools_MonochromaticWaves *, double *, double);
  void (*__pyx_t_22)(struct __pyx_obj_9WaveTools_MonochromaticWaves *, double *, double *, double);
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "WaveTools.py":909
 *                  fast = True):
 * 
 *         self.fast = fast             # <<<<<<<<<<<<<<
 *         knownWaveTypes = ["Linear","Fenton"]
 *         self.waveType = waveType
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_fast); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 909, __pyx_L1_error)
  __pyx_v_self->fast = __pyx_t_1;

  /* "WaveTools.py":910
 * 
 *         self.fast = fast
 *         knownWaveTypes = ["Linear","Fenton"]             # <<<<<<<<<<<<<<
 *         self.waveType = waveType
 *         if waveType not in knownWaveTypes:
 */
  __pyx_t_2 = PyList_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 910, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_Linear);
  __Pyx_GIVEREF(__pyx_n_s_Linear);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_Linear);
  __Pyx_INCREF(__pyx_n_s_Fenton);
  __Pyx_GIVEREF(__pyx_n_s_Fenton);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_Fenton);
  __pyx_v_knownWaveTypes = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "WaveTools.py":911
 *         self.fast = fast
 *         knownWaveTypes = ["Linear","Fenton"]
 *         self.waveType = waveType             # <<<<<<<<<<<<<<
 *         if waveType not in knownWaveTypes:
 *             logEvent("Wrong wavetype given: Valid wavetypes are %s" %(knownWaveTypes), level=0)
 */
  __Pyx_INCREF(__pyx_v_waveType);
  __Pyx_GIVEREF(__pyx_v_waveType);
  __Pyx_GOTREF(__pyx_v_self->waveType);
  __Pyx_DECREF(__pyx_v_self->waveType);
  __pyx_v_self->waveType = __pyx_v_waveType;

  /* "WaveTools.py":912
 *         knownWaveTypes = ["Linear","Fenton"]
 *         self.waveType = waveType
 *         if waveType not in knownWaveTypes:             # <<<<<<<<<<<<<<
 *             logEvent("Wrong wavetype given: Valid wavetypes are %s" %(knownWaveTypes), level=0)
 *             sys.exit(1)
 */
  __pyx_t_3 = (__Pyx_PySequence_ContainsTF(__pyx_v_waveType, __pyx_v_knownWaveTypes, Py_NE)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 912, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "WaveTools.py":913
 *         self.waveType = waveType
 *         if waveType not in knownWaveTypes:
 *             logEvent("Wrong wavetype given: Valid wavetypes are %s" %(knownWaveTypes), level=0)             # <<<<<<<<<<<<<<
 *             sys.exit(1)
 *         self.g = np.array(g)
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_logEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 913, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_Wrong_wavetype_given_Valid_wavet, __pyx_v_knownWaveTypes); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 913, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 913, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 913, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_level, __pyx_int_0) < 0) __PYX_ERR(0, 913, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 913, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "WaveTools.py":914
 *         if waveType not in knownWaveTypes:
 *             logEvent("Wrong wavetype given: Valid wavetypes are %s" %(knownWaveTypes), level=0)
 *             sys.exit(1)             # <<<<<<<<<<<<<<
 *         self.g = np.array(g)
 *         self.waveDir =  setDirVector(np.array(waveDir))
 */
    __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_sys); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 914, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_exit); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 914, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__48, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 914, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "WaveTools.py":912
 *         knownWaveTypes = ["Linear","Fenton"]
 *         self.waveType = waveType
 *         if waveType not in knownWaveTypes:             # <<<<<<<<<<<<<<
 *             logEvent("Wrong wavetype given: Valid wavetypes are %s" %(knownWaveTypes), level=0)
 *             sys.exit(1)
 */
  }

  /* "WaveTools.py":915
 *             logEvent("Wrong wavetype given: Valid wavetypes are %s" %(knownWaveTypes), level=0)
 *             sys.exit(1)
 *         self.g = np.array(g)             # <<<<<<<<<<<<<<
 *         self.waveDir =  setDirVector(np.array(waveDir))
 *         self.vDir = setVertDir(g)
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 915, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_array); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 915, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_g); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 915, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_v_g};
      __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 915, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_7);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_v_g};
      __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 915, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_7);
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 915, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_INCREF(__pyx_v_g);
      __Pyx_GIVEREF(__pyx_v_g);
      PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_v_g);
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_2, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 915, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (!(likely(((__pyx_t_7) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_7, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 915, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_7);
  __Pyx_GOTREF(__pyx_v_self->g);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->g));
  __pyx_v_self->g = ((PyArrayObject *)__pyx_t_7);
  __pyx_t_7 = 0;

  /* "WaveTools.py":916
 *             sys.exit(1)
 *         self.g = np.array(g)
 *         self.waveDir =  setDirVector(np.array(waveDir))             # <<<<<<<<<<<<<<
 *         self.vDir = setVertDir(g)
 *         self.gAbs = sqrt(self.g[0]*self.g[0]+self.g[1]*self.g[1]+self.g[2]*self.g[2])
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_setDirVector); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 916, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 916, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_array); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 916, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_waveDir); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 916, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_8)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_v_waveDir};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 916, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_v_waveDir};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 916, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 916, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_INCREF(__pyx_v_waveDir);
      __Pyx_GIVEREF(__pyx_v_waveDir);
      PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_v_waveDir);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 916, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (!__pyx_t_8) {
    __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 916, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_7);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_2};
      __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 916, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_2};
      __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 916, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 916, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8); __pyx_t_8 = NULL;
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_9, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 916, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (!(likely(((__pyx_t_7) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_7, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 916, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_7);
  __Pyx_GOTREF(__pyx_v_self->waveDir);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->waveDir));
  __pyx_v_self->waveDir = ((PyArrayObject *)__pyx_t_7);
  __pyx_t_7 = 0;

  /* "WaveTools.py":917
 *         self.g = np.array(g)
 *         self.waveDir =  setDirVector(np.array(waveDir))
 *         self.vDir = setVertDir(g)             # <<<<<<<<<<<<<<
 *         self.gAbs = sqrt(self.g[0]*self.g[0]+self.g[1]*self.g[1]+self.g[2]*self.g[2])
 * 
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_setVertDir); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 917, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_9 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (!__pyx_t_9) {
    __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_g); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 917, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_v_g};
      __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 917, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_7);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_v_g};
      __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 917, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_7);
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 917, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_9); __pyx_t_9 = NULL;
      __Pyx_INCREF(__pyx_v_g);
      __Pyx_GIVEREF(__pyx_v_g);
      PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_v_g);
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_2, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 917, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (!(likely(((__pyx_t_7) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_7, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 917, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_7);
  __Pyx_GOTREF(__pyx_v_self->vDir);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->vDir));
  __pyx_v_self->vDir = ((PyArrayObject *)__pyx_t_7);
  __pyx_t_7 = 0;

  /* "WaveTools.py":918
 *         self.waveDir =  setDirVector(np.array(waveDir))
 *         self.vDir = setVertDir(g)
 *         self.gAbs = sqrt(self.g[0]*self.g[0]+self.g[1]*self.g[1]+self.g[2]*self.g[2])             # <<<<<<<<<<<<<<
 * 
 * #Checking if g and waveDir are perpendicular
 */
  __pyx_t_7 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->g), 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 918, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->g), 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 918, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_7, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 918, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->g), 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 918, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->g), 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 918, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_9 = PyNumber_Multiply(__pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 918, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyNumber_Add(__pyx_t_2, __pyx_t_9); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 918, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->g), 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 918, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_2 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->g), 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 918, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_9, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 918, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_t_7, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 918, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 918, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_self->gAbs = sqrt(__pyx_t_10);

  /* "WaveTools.py":921
 * 
 * #Checking if g and waveDir are perpendicular
 *         dirCheck(self.waveDir,self.vDir)             # <<<<<<<<<<<<<<
 *         self.phi0=phi0
 *         self.mwl = mwl
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_dirCheck); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 921, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = NULL;
  __pyx_t_11 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_11 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, ((PyObject *)__pyx_v_self->waveDir), ((PyObject *)__pyx_v_self->vDir)};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 921, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, ((PyObject *)__pyx_v_self->waveDir), ((PyObject *)__pyx_v_self->vDir)};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 921, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  {
    __pyx_t_9 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 921, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_self->waveDir));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self->waveDir));
    PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_11, ((PyObject *)__pyx_v_self->waveDir));
    __Pyx_INCREF(((PyObject *)__pyx_v_self->vDir));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self->vDir));
    PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_11, ((PyObject *)__pyx_v_self->vDir));
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 921, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "WaveTools.py":922
 * #Checking if g and waveDir are perpendicular
 *         dirCheck(self.waveDir,self.vDir)
 *         self.phi0=phi0             # <<<<<<<<<<<<<<
 *         self.mwl = mwl
 *         self.depth = depth
 */
  __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_v_phi0); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 922, __pyx_L1_error)
  __pyx_v_self->phi0 = __pyx_t_10;

  /* "WaveTools.py":923
 *         dirCheck(self.waveDir,self.vDir)
 *         self.phi0=phi0
 *         self.mwl = mwl             # <<<<<<<<<<<<<<
 *         self.depth = depth
 *         self.omega = 2.0*M_PI/period
 */
  __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_v_mwl); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 923, __pyx_L1_error)
  __pyx_v_self->mwl = __pyx_t_10;

  /* "WaveTools.py":924
 *         self.phi0=phi0
 *         self.mwl = mwl
 *         self.depth = depth             # <<<<<<<<<<<<<<
 *         self.omega = 2.0*M_PI/period
 * 
 */
  __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_v_depth); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 924, __pyx_L1_error)
  __pyx_v_self->depth = __pyx_t_10;

  /* "WaveTools.py":925
 *         self.mwl = mwl
 *         self.depth = depth
 *         self.omega = 2.0*M_PI/period             # <<<<<<<<<<<<<<
 * 
 *         self.Nf = Nf
 */
  __pyx_t_2 = PyFloat_FromDouble((2.0 * M_PI)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 925, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyNumber_Divide(__pyx_t_2, __pyx_v_period); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 925, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 925, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_self->omega = __pyx_t_10;

  /* "WaveTools.py":927
 *         self.omega = 2.0*M_PI/period
 * 
 *         self.Nf = Nf             # <<<<<<<<<<<<<<
 *         self.Ycoeff = Ycoeff
 *         self.Bcoeff = Bcoeff
 */
  __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_v_Nf); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 927, __pyx_L1_error)
  __pyx_v_self->Nf = __pyx_t_11;

  /* "WaveTools.py":928
 * 
 *         self.Nf = Nf
 *         self.Ycoeff = Ycoeff             # <<<<<<<<<<<<<<
 *         self.Bcoeff = Bcoeff
 *         self.tanhF = np.zeros(Nf,"d")
 */
  if (!(likely(((__pyx_v_Ycoeff) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_Ycoeff, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 928, __pyx_L1_error)
  __pyx_t_6 = __pyx_v_Ycoeff;
  __Pyx_INCREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  __Pyx_GOTREF(__pyx_v_self->Ycoeff);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->Ycoeff));
  __pyx_v_self->Ycoeff = ((PyArrayObject *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "WaveTools.py":929
 *         self.Nf = Nf
 *         self.Ycoeff = Ycoeff
 *         self.Bcoeff = Bcoeff             # <<<<<<<<<<<<<<
 *         self.tanhF = np.zeros(Nf,"d")
 * #Calculating / checking wavelength data
 */
  if (!(likely(((__pyx_v_Bcoeff) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_Bcoeff, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 929, __pyx_L1_error)
  __pyx_t_6 = __pyx_v_Bcoeff;
  __Pyx_INCREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  __Pyx_GOTREF(__pyx_v_self->Bcoeff);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->Bcoeff));
  __pyx_v_self->Bcoeff = ((PyArrayObject *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "WaveTools.py":930
 *         self.Ycoeff = Ycoeff
 *         self.Bcoeff = Bcoeff
 *         self.tanhF = np.zeros(Nf,"d")             # <<<<<<<<<<<<<<
 * #Calculating / checking wavelength data
 *         if  waveType== "Linear":
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 930, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 930, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_11 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_9);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_9, function);
      __pyx_t_11 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_9)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_Nf, __pyx_n_s_d};
    __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 930, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_6);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_Nf, __pyx_n_s_d};
    __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 930, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_6);
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 930, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_Nf);
    __Pyx_GIVEREF(__pyx_v_Nf);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_11, __pyx_v_Nf);
    __Pyx_INCREF(__pyx_n_s_d);
    __Pyx_GIVEREF(__pyx_n_s_d);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_11, __pyx_n_s_d);
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_7, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 930, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 930, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_6);
  __Pyx_GOTREF(__pyx_v_self->tanhF);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->tanhF));
  __pyx_v_self->tanhF = ((PyArrayObject *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "WaveTools.py":932
 *         self.tanhF = np.zeros(Nf,"d")
 * #Calculating / checking wavelength data
 *         if  waveType== "Linear":             # <<<<<<<<<<<<<<
 *             self.k = dispersion(w=self.omega,d=self.depth,g=self.gAbs)
 *             self.wavelength = 2.0*M_PI/self.k
 */
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_waveType, __pyx_n_s_Linear, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 932, __pyx_L1_error)
  if (__pyx_t_4) {

    /* "WaveTools.py":933
 * #Calculating / checking wavelength data
 *         if  waveType== "Linear":
 *             self.k = dispersion(w=self.omega,d=self.depth,g=self.gAbs)             # <<<<<<<<<<<<<<
 *             self.wavelength = 2.0*M_PI/self.k
 *         else:
 */
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_dispersion); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 933, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_9 = PyDict_New(); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 933, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_7 = PyFloat_FromDouble(__pyx_v_self->omega); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 933, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_w, __pyx_t_7) < 0) __PYX_ERR(0, 933, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyFloat_FromDouble(__pyx_v_self->depth); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 933, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_d, __pyx_t_7) < 0) __PYX_ERR(0, 933, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyFloat_FromDouble(__pyx_v_self->gAbs); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 933, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_g, __pyx_t_7) < 0) __PYX_ERR(0, 933, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_empty_tuple, __pyx_t_9); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 933, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_7); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 933, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_v_self->k = __pyx_t_10;

    /* "WaveTools.py":934
 *         if  waveType== "Linear":
 *             self.k = dispersion(w=self.omega,d=self.depth,g=self.gAbs)
 *             self.wavelength = 2.0*M_PI/self.k             # <<<<<<<<<<<<<<
 *         else:
 *             try:
 */
    __pyx_t_10 = (2.0 * M_PI);
    if (unlikely(__pyx_v_self->k == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 934, __pyx_L1_error)
    }
    __pyx_v_self->wavelength = (__pyx_t_10 / __pyx_v_self->k);

    /* "WaveTools.py":932
 *         self.tanhF = np.zeros(Nf,"d")
 * #Calculating / checking wavelength data
 *         if  waveType== "Linear":             # <<<<<<<<<<<<<<
 *             self.k = dispersion(w=self.omega,d=self.depth,g=self.gAbs)
 *             self.wavelength = 2.0*M_PI/self.k
 */
    goto __pyx_L4;
  }

  /* "WaveTools.py":936
 *             self.wavelength = 2.0*M_PI/self.k
 *         else:
 *             try:             # <<<<<<<<<<<<<<
 *                 self.k = 2.0*M_PI/wavelength
 *                 self.wavelength=wavelength
 */
  /*else*/ {
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_12, &__pyx_t_13, &__pyx_t_14);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_13);
      __Pyx_XGOTREF(__pyx_t_14);
      /*try:*/ {

        /* "WaveTools.py":937
 *         else:
 *             try:
 *                 self.k = 2.0*M_PI/wavelength             # <<<<<<<<<<<<<<
 *                 self.wavelength=wavelength
 *             except:
 */
        __pyx_t_7 = PyFloat_FromDouble((2.0 * M_PI)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 937, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_9 = __Pyx_PyNumber_Divide(__pyx_t_7, __pyx_v_wavelength); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 937, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_9); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 937, __pyx_L5_error)
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_v_self->k = __pyx_t_10;

        /* "WaveTools.py":938
 *             try:
 *                 self.k = 2.0*M_PI/wavelength
 *                 self.wavelength=wavelength             # <<<<<<<<<<<<<<
 *             except:
 *                 logEvent("ERROR! Wavetools.py: Wavelenght is not defined for nonlinear waves. Enter wavelength in class arguments",level=0)
 */
        __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_v_wavelength); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 938, __pyx_L5_error)
        __pyx_v_self->wavelength = __pyx_t_10;

        /* "WaveTools.py":936
 *             self.wavelength = 2.0*M_PI/self.k
 *         else:
 *             try:             # <<<<<<<<<<<<<<
 *                 self.k = 2.0*M_PI/wavelength
 *                 self.wavelength=wavelength
 */
      }
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      goto __pyx_L12_try_end;
      __pyx_L5_error:;
      __Pyx_PyThreadState_assign
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "WaveTools.py":939
 *                 self.k = 2.0*M_PI/wavelength
 *                 self.wavelength=wavelength
 *             except:             # <<<<<<<<<<<<<<
 *                 logEvent("ERROR! Wavetools.py: Wavelenght is not defined for nonlinear waves. Enter wavelength in class arguments",level=0)
 *                 sys.exit(1)
 */
      /*except:*/ {
        __Pyx_AddTraceback("WaveTools.MonochromaticWaves.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_9, &__pyx_t_7, &__pyx_t_6) < 0) __PYX_ERR(0, 939, __pyx_L7_except_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GOTREF(__pyx_t_6);

        /* "WaveTools.py":940
 *                 self.wavelength=wavelength
 *             except:
 *                 logEvent("ERROR! Wavetools.py: Wavelenght is not defined for nonlinear waves. Enter wavelength in class arguments",level=0)             # <<<<<<<<<<<<<<
 *                 sys.exit(1)
 *             if ( (len(self.Ycoeff)!=self.Nf) or (len(self.Bcoeff)!=self.Nf) or (Ycoeff[0]==0.) or (Bcoeff[0]==0.) ):
 */
        __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_logEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 940, __pyx_L7_except_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_8 = PyDict_New(); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 940, __pyx_L7_except_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_level, __pyx_int_0) < 0) __PYX_ERR(0, 940, __pyx_L7_except_error)
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__49, __pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 940, __pyx_L7_except_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "WaveTools.py":941
 *             except:
 *                 logEvent("ERROR! Wavetools.py: Wavelenght is not defined for nonlinear waves. Enter wavelength in class arguments",level=0)
 *                 sys.exit(1)             # <<<<<<<<<<<<<<
 *             if ( (len(self.Ycoeff)!=self.Nf) or (len(self.Bcoeff)!=self.Nf) or (Ycoeff[0]==0.) or (Bcoeff[0]==0.) ):
 *                 logEvent("ERROR! Wavetools.py: Ycoeff and Bcoeff must have the same length and equal to Nf and the 1st order harmonic must not be zero",level=0)
 */
        __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_sys); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 941, __pyx_L7_except_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_exit); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 941, __pyx_L7_except_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_tuple__50, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 941, __pyx_L7_except_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        goto __pyx_L6_exception_handled;
      }
      __pyx_L7_except_error:;

      /* "WaveTools.py":936
 *             self.wavelength = 2.0*M_PI/self.k
 *         else:
 *             try:             # <<<<<<<<<<<<<<
 *                 self.k = 2.0*M_PI/wavelength
 *                 self.wavelength=wavelength
 */
      __Pyx_PyThreadState_assign
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_XGIVEREF(__pyx_t_14);
      __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_13, __pyx_t_14);
      goto __pyx_L1_error;
      __pyx_L6_exception_handled:;
      __Pyx_PyThreadState_assign
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_XGIVEREF(__pyx_t_14);
      __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_13, __pyx_t_14);
      __pyx_L12_try_end:;
    }

    /* "WaveTools.py":942
 *                 logEvent("ERROR! Wavetools.py: Wavelenght is not defined for nonlinear waves. Enter wavelength in class arguments",level=0)
 *                 sys.exit(1)
 *             if ( (len(self.Ycoeff)!=self.Nf) or (len(self.Bcoeff)!=self.Nf) or (Ycoeff[0]==0.) or (Bcoeff[0]==0.) ):             # <<<<<<<<<<<<<<
 *                 logEvent("ERROR! Wavetools.py: Ycoeff and Bcoeff must have the same length and equal to Nf and the 1st order harmonic must not be zero",level=0)
 *                 sys.exit(1)
 */
    __pyx_t_6 = ((PyObject *)__pyx_v_self->Ycoeff);
    __Pyx_INCREF(__pyx_t_6);
    __pyx_t_15 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_15 == -1)) __PYX_ERR(0, 942, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_3 = ((__pyx_t_15 != __pyx_v_self->Nf) != 0);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_4 = __pyx_t_3;
      goto __pyx_L16_bool_binop_done;
    }
    __pyx_t_6 = ((PyObject *)__pyx_v_self->Bcoeff);
    __Pyx_INCREF(__pyx_t_6);
    __pyx_t_15 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_15 == -1)) __PYX_ERR(0, 942, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_3 = ((__pyx_t_15 != __pyx_v_self->Nf) != 0);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_4 = __pyx_t_3;
      goto __pyx_L16_bool_binop_done;
    }
    __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_Ycoeff, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 942, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyFloat_EqObjC(__pyx_t_6, __pyx_float_0_, 0., 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 942, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 942, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (!__pyx_t_3) {
    } else {
      __pyx_t_4 = __pyx_t_3;
      goto __pyx_L16_bool_binop_done;
    }
    __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_Bcoeff, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 942, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = __Pyx_PyFloat_EqObjC(__pyx_t_7, __pyx_float_0_, 0., 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 942, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 942, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_4 = __pyx_t_3;
    __pyx_L16_bool_binop_done:;
    if (__pyx_t_4) {

      /* "WaveTools.py":943
 *                 sys.exit(1)
 *             if ( (len(self.Ycoeff)!=self.Nf) or (len(self.Bcoeff)!=self.Nf) or (Ycoeff[0]==0.) or (Bcoeff[0]==0.) ):
 *                 logEvent("ERROR! Wavetools.py: Ycoeff and Bcoeff must have the same length and equal to Nf and the 1st order harmonic must not be zero",level=0)             # <<<<<<<<<<<<<<
 *                 sys.exit(1)
 *             else:
 */
      __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_logEvent); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 943, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = PyDict_New(); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 943, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_level, __pyx_int_0) < 0) __PYX_ERR(0, 943, __pyx_L1_error)
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__51, __pyx_t_7); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 943, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "WaveTools.py":944
 *             if ( (len(self.Ycoeff)!=self.Nf) or (len(self.Bcoeff)!=self.Nf) or (Ycoeff[0]==0.) or (Bcoeff[0]==0.) ):
 *                 logEvent("ERROR! Wavetools.py: Ycoeff and Bcoeff must have the same length and equal to Nf and the 1st order harmonic must not be zero",level=0)
 *                 sys.exit(1)             # <<<<<<<<<<<<<<
 *             else:
 *                 for ii in range(len(self.tanhF)):
 */
      __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_sys); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 944, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_exit); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 944, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_tuple__52, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 944, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "WaveTools.py":942
 *                 logEvent("ERROR! Wavetools.py: Wavelenght is not defined for nonlinear waves. Enter wavelength in class arguments",level=0)
 *                 sys.exit(1)
 *             if ( (len(self.Ycoeff)!=self.Nf) or (len(self.Bcoeff)!=self.Nf) or (Ycoeff[0]==0.) or (Bcoeff[0]==0.) ):             # <<<<<<<<<<<<<<
 *                 logEvent("ERROR! Wavetools.py: Ycoeff and Bcoeff must have the same length and equal to Nf and the 1st order harmonic must not be zero",level=0)
 *                 sys.exit(1)
 */
      goto __pyx_L15;
    }

    /* "WaveTools.py":946
 *                 sys.exit(1)
 *             else:
 *                 for ii in range(len(self.tanhF)):             # <<<<<<<<<<<<<<
 *                     kk = (ii+1)*self.k
 *                     self.tanhF[ii] = float(np.tanh(kk*self.depth) )
 */
    /*else*/ {
      __pyx_t_9 = ((PyObject *)__pyx_v_self->tanhF);
      __Pyx_INCREF(__pyx_t_9);
      __pyx_t_15 = PyObject_Length(__pyx_t_9); if (unlikely(__pyx_t_15 == -1)) __PYX_ERR(0, 946, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = PyInt_FromSsize_t(__pyx_t_15); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 946, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 946, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_9);
      __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_7, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 946, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (likely(PyList_CheckExact(__pyx_t_9)) || PyTuple_CheckExact(__pyx_t_9)) {
        __pyx_t_7 = __pyx_t_9; __Pyx_INCREF(__pyx_t_7); __pyx_t_15 = 0;
        __pyx_t_16 = NULL;
      } else {
        __pyx_t_15 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_t_9); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 946, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_16 = Py_TYPE(__pyx_t_7)->tp_iternext; if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 946, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      for (;;) {
        if (likely(!__pyx_t_16)) {
          if (likely(PyList_CheckExact(__pyx_t_7))) {
            if (__pyx_t_15 >= PyList_GET_SIZE(__pyx_t_7)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_9 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_15); __Pyx_INCREF(__pyx_t_9); __pyx_t_15++; if (unlikely(0 < 0)) __PYX_ERR(0, 946, __pyx_L1_error)
            #else
            __pyx_t_9 = PySequence_ITEM(__pyx_t_7, __pyx_t_15); __pyx_t_15++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 946, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            #endif
          } else {
            if (__pyx_t_15 >= PyTuple_GET_SIZE(__pyx_t_7)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_15); __Pyx_INCREF(__pyx_t_9); __pyx_t_15++; if (unlikely(0 < 0)) __PYX_ERR(0, 946, __pyx_L1_error)
            #else
            __pyx_t_9 = PySequence_ITEM(__pyx_t_7, __pyx_t_15); __pyx_t_15++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 946, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            #endif
          }
        } else {
          __pyx_t_9 = __pyx_t_16(__pyx_t_7);
          if (unlikely(!__pyx_t_9)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 946, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_9);
        }
        __Pyx_XDECREF_SET(__pyx_v_ii, __pyx_t_9);
        __pyx_t_9 = 0;

        /* "WaveTools.py":947
 *             else:
 *                 for ii in range(len(self.tanhF)):
 *                     kk = (ii+1)*self.k             # <<<<<<<<<<<<<<
 *                     self.tanhF[ii] = float(np.tanh(kk*self.depth) )
 * 
 */
        __pyx_t_9 = __Pyx_PyInt_AddObjC(__pyx_v_ii, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 947, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_6 = PyFloat_FromDouble(__pyx_v_self->k); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 947, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_5 = PyNumber_Multiply(__pyx_t_9, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 947, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_XDECREF_SET(__pyx_v_kk, __pyx_t_5);
        __pyx_t_5 = 0;

        /* "WaveTools.py":948
 *                 for ii in range(len(self.tanhF)):
 *                     kk = (ii+1)*self.k
 *                     self.tanhF[ii] = float(np.tanh(kk*self.depth) )             # <<<<<<<<<<<<<<
 * 
 * 
 */
        __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 948, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_tanh); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 948, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = PyFloat_FromDouble(__pyx_v_self->depth); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 948, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_8 = PyNumber_Multiply(__pyx_v_kk, __pyx_t_6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 948, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
          __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_9);
          if (likely(__pyx_t_6)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
            __Pyx_INCREF(__pyx_t_6);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_9, function);
          }
        }
        if (!__pyx_t_6) {
          __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 948, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_GOTREF(__pyx_t_5);
        } else {
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_9)) {
            PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_8};
            __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 948, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
            PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_8};
            __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 948, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          } else
          #endif
          {
            __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 948, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_6); __pyx_t_6 = NULL;
            __Pyx_GIVEREF(__pyx_t_8);
            PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_t_8);
            __pyx_t_8 = 0;
            __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_2, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 948, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          }
        }
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = __Pyx_PyNumber_Float(__pyx_t_5); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 948, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_self->tanhF), __pyx_v_ii, __pyx_t_9) < 0)) __PYX_ERR(0, 948, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

        /* "WaveTools.py":946
 *                 sys.exit(1)
 *             else:
 *                 for ii in range(len(self.tanhF)):             # <<<<<<<<<<<<<<
 *                     kk = (ii+1)*self.k
 *                     self.tanhF[ii] = float(np.tanh(kk*self.depth) )
 */
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __pyx_L15:;
  }
  __pyx_L4:;

  /* "WaveTools.py":951
 * 
 * 
 *         self.kDir = self.k * self.waveDir             # <<<<<<<<<<<<<<
 *         self.amplitude = 0.5*waveHeight
 *         self.mV = np.array(meanVelocity)
 */
  __pyx_t_7 = PyFloat_FromDouble(__pyx_v_self->k); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 951, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_9 = PyNumber_Multiply(__pyx_t_7, ((PyObject *)__pyx_v_self->waveDir)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 951, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (!(likely(((__pyx_t_9) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_9, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 951, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_9);
  __Pyx_GOTREF(__pyx_v_self->kDir);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->kDir));
  __pyx_v_self->kDir = ((PyArrayObject *)__pyx_t_9);
  __pyx_t_9 = 0;

  /* "WaveTools.py":952
 * 
 *         self.kDir = self.k * self.waveDir
 *         self.amplitude = 0.5*waveHeight             # <<<<<<<<<<<<<<
 *         self.mV = np.array(meanVelocity)
 * #Checking that meanvelocity is a vector
 */
  __pyx_t_9 = PyNumber_Multiply(__pyx_float_0_5, __pyx_v_waveHeight); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 952, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_9); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 952, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_v_self->amplitude = __pyx_t_10;

  /* "WaveTools.py":953
 *         self.kDir = self.k * self.waveDir
 *         self.amplitude = 0.5*waveHeight
 *         self.mV = np.array(meanVelocity)             # <<<<<<<<<<<<<<
 * #Checking that meanvelocity is a vector
 * 
 */
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 953, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_array); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 953, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (!__pyx_t_7) {
    __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_meanVelocity); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 953, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_v_meanVelocity};
      __pyx_t_9 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 953, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_9);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_v_meanVelocity};
      __pyx_t_9 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 953, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_9);
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 953, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_7); __pyx_t_7 = NULL;
      __Pyx_INCREF(__pyx_v_meanVelocity);
      __Pyx_GIVEREF(__pyx_v_meanVelocity);
      PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_v_meanVelocity);
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_2, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 953, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (!(likely(((__pyx_t_9) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_9, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 953, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_9);
  __Pyx_GOTREF(__pyx_v_self->mV);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->mV));
  __pyx_v_self->mV = ((PyArrayObject *)__pyx_t_9);
  __pyx_t_9 = 0;

  /* "WaveTools.py":956
 * #Checking that meanvelocity is a vector
 * 
 *         if(len(meanVelocity) != 3):             # <<<<<<<<<<<<<<
 *             logEvent("ERROR! Wavetools.py: meanVelocity should be a vector with 3 components. ",level=0)
 *             sys.exit(1)
 */
  __pyx_t_15 = PyObject_Length(__pyx_v_meanVelocity); if (unlikely(__pyx_t_15 == -1)) __PYX_ERR(0, 956, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_15 != 3) != 0);
  if (__pyx_t_4) {

    /* "WaveTools.py":957
 * 
 *         if(len(meanVelocity) != 3):
 *             logEvent("ERROR! Wavetools.py: meanVelocity should be a vector with 3 components. ",level=0)             # <<<<<<<<<<<<<<
 *             sys.exit(1)
 *         if(self.Nf > 1000):
 */
    __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_logEvent); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 957, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 957, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_level, __pyx_int_0) < 0) __PYX_ERR(0, 957, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_tuple__53, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 957, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "WaveTools.py":958
 *         if(len(meanVelocity) != 3):
 *             logEvent("ERROR! Wavetools.py: meanVelocity should be a vector with 3 components. ",level=0)
 *             sys.exit(1)             # <<<<<<<<<<<<<<
 *         if(self.Nf > 1000):
 *             logEvent("ERROR! Wavetools.py: You are not really using more than 1000 Fourier modes for a regular wave, right? ",level=0)
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_sys); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 958, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_exit); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 958, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__54, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 958, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "WaveTools.py":956
 * #Checking that meanvelocity is a vector
 * 
 *         if(len(meanVelocity) != 3):             # <<<<<<<<<<<<<<
 *             logEvent("ERROR! Wavetools.py: meanVelocity should be a vector with 3 components. ",level=0)
 *             sys.exit(1)
 */
  }

  /* "WaveTools.py":959
 *             logEvent("ERROR! Wavetools.py: meanVelocity should be a vector with 3 components. ",level=0)
 *             sys.exit(1)
 *         if(self.Nf > 1000):             # <<<<<<<<<<<<<<
 *             logEvent("ERROR! Wavetools.py: You are not really using more than 1000 Fourier modes for a regular wave, right? ",level=0)
 *             sys.exit(1)
 */
  __pyx_t_4 = ((__pyx_v_self->Nf > 0x3E8) != 0);
  if (__pyx_t_4) {

    /* "WaveTools.py":960
 *             sys.exit(1)
 *         if(self.Nf > 1000):
 *             logEvent("ERROR! Wavetools.py: You are not really using more than 1000 Fourier modes for a regular wave, right? ",level=0)             # <<<<<<<<<<<<<<
 *             sys.exit(1)
 * 
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_logEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 960, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 960, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_level, __pyx_int_0) < 0) __PYX_ERR(0, 960, __pyx_L1_error)
    __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__55, __pyx_t_5); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 960, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "WaveTools.py":961
 *         if(self.Nf > 1000):
 *             logEvent("ERROR! Wavetools.py: You are not really using more than 1000 Fourier modes for a regular wave, right? ",level=0)
 *             sys.exit(1)             # <<<<<<<<<<<<<<
 * 
 * # C++ declarations
 */
    __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_sys); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 961, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_exit); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 961, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__56, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 961, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "WaveTools.py":959
 *             logEvent("ERROR! Wavetools.py: meanVelocity should be a vector with 3 components. ",level=0)
 *             sys.exit(1)
 *         if(self.Nf > 1000):             # <<<<<<<<<<<<<<
 *             logEvent("ERROR! Wavetools.py: You are not really using more than 1000 Fourier modes for a regular wave, right? ",level=0)
 *             sys.exit(1)
 */
  }

  /* "WaveTools.py":965
 * # C++ declarations
 * 
 *         self.tanhL =float(np.tanh(self.k*self.depth))             # <<<<<<<<<<<<<<
 *         for ij in range(3):
 *             self.kDir_c[ij] = self.kDir[ij]
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 965, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_tanh); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 965, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyFloat_FromDouble((__pyx_v_self->k * __pyx_v_self->depth)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 965, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_7) {
    __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 965, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_9);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_5};
      __pyx_t_9 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 965, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_5};
      __pyx_t_9 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 965, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 965, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_8, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 965, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_10 = __Pyx_PyObject_AsDouble(__pyx_t_9); if (unlikely(__pyx_t_10 == ((double)-1) && PyErr_Occurred())) __PYX_ERR(0, 965, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_v_self->tanhL = __pyx_t_10;

  /* "WaveTools.py":966
 * 
 *         self.tanhL =float(np.tanh(self.k*self.depth))
 *         for ij in range(3):             # <<<<<<<<<<<<<<
 *             self.kDir_c[ij] = self.kDir[ij]
 *             self.waveDir_c[ij] = self.waveDir[ij]
 */
  __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_tuple__57, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 966, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (likely(PyList_CheckExact(__pyx_t_9)) || PyTuple_CheckExact(__pyx_t_9)) {
    __pyx_t_2 = __pyx_t_9; __Pyx_INCREF(__pyx_t_2); __pyx_t_15 = 0;
    __pyx_t_16 = NULL;
  } else {
    __pyx_t_15 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_9); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 966, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_16 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 966, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  for (;;) {
    if (likely(!__pyx_t_16)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_15 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_9 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_15); __Pyx_INCREF(__pyx_t_9); __pyx_t_15++; if (unlikely(0 < 0)) __PYX_ERR(0, 966, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_2, __pyx_t_15); __pyx_t_15++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 966, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      } else {
        if (__pyx_t_15 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_15); __Pyx_INCREF(__pyx_t_9); __pyx_t_15++; if (unlikely(0 < 0)) __PYX_ERR(0, 966, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_2, __pyx_t_15); __pyx_t_15++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 966, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      }
    } else {
      __pyx_t_9 = __pyx_t_16(__pyx_t_2);
      if (unlikely(!__pyx_t_9)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 966, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_9);
    }
    __Pyx_XDECREF_SET(__pyx_v_ij, __pyx_t_9);
    __pyx_t_9 = 0;

    /* "WaveTools.py":967
 *         self.tanhL =float(np.tanh(self.k*self.depth))
 *         for ij in range(3):
 *             self.kDir_c[ij] = self.kDir[ij]             # <<<<<<<<<<<<<<
 *             self.waveDir_c[ij] = self.waveDir[ij]
 *             self.vDir_c[ij] = self.vDir[ij]
 */
    __pyx_t_9 = PyObject_GetItem(((PyObject *)__pyx_v_self->kDir), __pyx_v_ij); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 967, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_9); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 967, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_17 = __Pyx_PyIndex_AsSsize_t(__pyx_v_ij); if (unlikely((__pyx_t_17 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 967, __pyx_L1_error)
    (__pyx_v_self->kDir_c[__pyx_t_17]) = __pyx_t_10;

    /* "WaveTools.py":968
 *         for ij in range(3):
 *             self.kDir_c[ij] = self.kDir[ij]
 *             self.waveDir_c[ij] = self.waveDir[ij]             # <<<<<<<<<<<<<<
 *             self.vDir_c[ij] = self.vDir[ij]
 *             self.mV_c[ij] = self.mV[ij]
 */
    __pyx_t_9 = PyObject_GetItem(((PyObject *)__pyx_v_self->waveDir), __pyx_v_ij); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 968, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_9); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 968, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_17 = __Pyx_PyIndex_AsSsize_t(__pyx_v_ij); if (unlikely((__pyx_t_17 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 968, __pyx_L1_error)
    (__pyx_v_self->waveDir_c[__pyx_t_17]) = __pyx_t_10;

    /* "WaveTools.py":969
 *             self.kDir_c[ij] = self.kDir[ij]
 *             self.waveDir_c[ij] = self.waveDir[ij]
 *             self.vDir_c[ij] = self.vDir[ij]             # <<<<<<<<<<<<<<
 *             self.mV_c[ij] = self.mV[ij]
 *         self.kDir_ =  self.kDir_c
 */
    __pyx_t_9 = PyObject_GetItem(((PyObject *)__pyx_v_self->vDir), __pyx_v_ij); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 969, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_9); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 969, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_17 = __Pyx_PyIndex_AsSsize_t(__pyx_v_ij); if (unlikely((__pyx_t_17 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 969, __pyx_L1_error)
    (__pyx_v_self->vDir_c[__pyx_t_17]) = __pyx_t_10;

    /* "WaveTools.py":970
 *             self.waveDir_c[ij] = self.waveDir[ij]
 *             self.vDir_c[ij] = self.vDir[ij]
 *             self.mV_c[ij] = self.mV[ij]             # <<<<<<<<<<<<<<
 *         self.kDir_ =  self.kDir_c
 *         self.waveDir_ =  self.waveDir_c
 */
    __pyx_t_9 = PyObject_GetItem(((PyObject *)__pyx_v_self->mV), __pyx_v_ij); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 970, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_9); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 970, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_17 = __Pyx_PyIndex_AsSsize_t(__pyx_v_ij); if (unlikely((__pyx_t_17 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 970, __pyx_L1_error)
    (__pyx_v_self->mV_c[__pyx_t_17]) = __pyx_t_10;

    /* "WaveTools.py":966
 * 
 *         self.tanhL =float(np.tanh(self.k*self.depth))
 *         for ij in range(3):             # <<<<<<<<<<<<<<
 *             self.kDir_c[ij] = self.kDir[ij]
 *             self.waveDir_c[ij] = self.waveDir[ij]
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "WaveTools.py":971
 *             self.vDir_c[ij] = self.vDir[ij]
 *             self.mV_c[ij] = self.mV[ij]
 *         self.kDir_ =  self.kDir_c             # <<<<<<<<<<<<<<
 *         self.waveDir_ =  self.waveDir_c
 *         self.vDir_ =  self.vDir_c
 */
  __pyx_t_18 = __pyx_v_self->kDir_c;
  __pyx_v_self->kDir_ = __pyx_t_18;

  /* "WaveTools.py":972
 *             self.mV_c[ij] = self.mV[ij]
 *         self.kDir_ =  self.kDir_c
 *         self.waveDir_ =  self.waveDir_c             # <<<<<<<<<<<<<<
 *         self.vDir_ =  self.vDir_c
 *         self.mV_ =  self.mV_c
 */
  __pyx_t_18 = __pyx_v_self->waveDir_c;
  __pyx_v_self->waveDir_ = __pyx_t_18;

  /* "WaveTools.py":973
 *         self.kDir_ =  self.kDir_c
 *         self.waveDir_ =  self.waveDir_c
 *         self.vDir_ =  self.vDir_c             # <<<<<<<<<<<<<<
 *         self.mV_ =  self.mV_c
 * 
 */
  __pyx_t_18 = __pyx_v_self->vDir_c;
  __pyx_v_self->vDir_ = __pyx_t_18;

  /* "WaveTools.py":974
 *         self.waveDir_ =  self.waveDir_c
 *         self.vDir_ =  self.vDir_c
 *         self.mV_ =  self.mV_c             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_18 = __pyx_v_self->mV_c;
  __pyx_v_self->mV_ = __pyx_t_18;

  /* "WaveTools.py":979
 * 
 * 
 *         if self.waveType == "Fenton":             # <<<<<<<<<<<<<<
 *             for ij in range(Nf):
 *                 self.Ycoeff_c[ij] = self.Ycoeff[ij]
 */
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_self->waveType, __pyx_n_s_Fenton, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 979, __pyx_L1_error)
  if (__pyx_t_4) {

    /* "WaveTools.py":980
 * 
 *         if self.waveType == "Fenton":
 *             for ij in range(Nf):             # <<<<<<<<<<<<<<
 *                 self.Ycoeff_c[ij] = self.Ycoeff[ij]
 *                 self.Bcoeff_c[ij] = self.Bcoeff[ij]
 */
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 980, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_Nf);
    __Pyx_GIVEREF(__pyx_v_Nf);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_Nf);
    __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_2, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 980, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (likely(PyList_CheckExact(__pyx_t_9)) || PyTuple_CheckExact(__pyx_t_9)) {
      __pyx_t_2 = __pyx_t_9; __Pyx_INCREF(__pyx_t_2); __pyx_t_15 = 0;
      __pyx_t_16 = NULL;
    } else {
      __pyx_t_15 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_9); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 980, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_16 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 980, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    for (;;) {
      if (likely(!__pyx_t_16)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_15 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_9 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_15); __Pyx_INCREF(__pyx_t_9); __pyx_t_15++; if (unlikely(0 < 0)) __PYX_ERR(0, 980, __pyx_L1_error)
          #else
          __pyx_t_9 = PySequence_ITEM(__pyx_t_2, __pyx_t_15); __pyx_t_15++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 980, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          #endif
        } else {
          if (__pyx_t_15 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_15); __Pyx_INCREF(__pyx_t_9); __pyx_t_15++; if (unlikely(0 < 0)) __PYX_ERR(0, 980, __pyx_L1_error)
          #else
          __pyx_t_9 = PySequence_ITEM(__pyx_t_2, __pyx_t_15); __pyx_t_15++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 980, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          #endif
        }
      } else {
        __pyx_t_9 = __pyx_t_16(__pyx_t_2);
        if (unlikely(!__pyx_t_9)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 980, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_9);
      }
      __Pyx_XDECREF_SET(__pyx_v_ij, __pyx_t_9);
      __pyx_t_9 = 0;

      /* "WaveTools.py":981
 *         if self.waveType == "Fenton":
 *             for ij in range(Nf):
 *                 self.Ycoeff_c[ij] = self.Ycoeff[ij]             # <<<<<<<<<<<<<<
 *                 self.Bcoeff_c[ij] = self.Bcoeff[ij]
 *                 self.tanh_c[ij] = self.tanhF[ij]
 */
      __pyx_t_9 = PyObject_GetItem(((PyObject *)__pyx_v_self->Ycoeff), __pyx_v_ij); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 981, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_9); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 981, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_17 = __Pyx_PyIndex_AsSsize_t(__pyx_v_ij); if (unlikely((__pyx_t_17 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 981, __pyx_L1_error)
      (__pyx_v_self->Ycoeff_c[__pyx_t_17]) = __pyx_t_10;

      /* "WaveTools.py":982
 *             for ij in range(Nf):
 *                 self.Ycoeff_c[ij] = self.Ycoeff[ij]
 *                 self.Bcoeff_c[ij] = self.Bcoeff[ij]             # <<<<<<<<<<<<<<
 *                 self.tanh_c[ij] = self.tanhF[ij]
 *             self.Ycoeff_ =  self.Ycoeff_c
 */
      __pyx_t_9 = PyObject_GetItem(((PyObject *)__pyx_v_self->Bcoeff), __pyx_v_ij); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 982, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_9); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 982, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_17 = __Pyx_PyIndex_AsSsize_t(__pyx_v_ij); if (unlikely((__pyx_t_17 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 982, __pyx_L1_error)
      (__pyx_v_self->Bcoeff_c[__pyx_t_17]) = __pyx_t_10;

      /* "WaveTools.py":983
 *                 self.Ycoeff_c[ij] = self.Ycoeff[ij]
 *                 self.Bcoeff_c[ij] = self.Bcoeff[ij]
 *                 self.tanh_c[ij] = self.tanhF[ij]             # <<<<<<<<<<<<<<
 *             self.Ycoeff_ =  self.Ycoeff_c
 *             self.Bcoeff_ =  self.Bcoeff_c
 */
      __pyx_t_9 = PyObject_GetItem(((PyObject *)__pyx_v_self->tanhF), __pyx_v_ij); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 983, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_9); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 983, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_17 = __Pyx_PyIndex_AsSsize_t(__pyx_v_ij); if (unlikely((__pyx_t_17 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 983, __pyx_L1_error)
      (__pyx_v_self->tanh_c[__pyx_t_17]) = __pyx_t_10;

      /* "WaveTools.py":980
 * 
 *         if self.waveType == "Fenton":
 *             for ij in range(Nf):             # <<<<<<<<<<<<<<
 *                 self.Ycoeff_c[ij] = self.Ycoeff[ij]
 *                 self.Bcoeff_c[ij] = self.Bcoeff[ij]
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "WaveTools.py":984
 *                 self.Bcoeff_c[ij] = self.Bcoeff[ij]
 *                 self.tanh_c[ij] = self.tanhF[ij]
 *             self.Ycoeff_ =  self.Ycoeff_c             # <<<<<<<<<<<<<<
 *             self.Bcoeff_ =  self.Bcoeff_c
 *             self.tanhF_ = self.tanh_c
 */
    __pyx_t_18 = __pyx_v_self->Ycoeff_c;
    __pyx_v_self->Ycoeff_ = __pyx_t_18;

    /* "WaveTools.py":985
 *                 self.tanh_c[ij] = self.tanhF[ij]
 *             self.Ycoeff_ =  self.Ycoeff_c
 *             self.Bcoeff_ =  self.Bcoeff_c             # <<<<<<<<<<<<<<
 *             self.tanhF_ = self.tanh_c
 * 
 */
    __pyx_t_18 = __pyx_v_self->Bcoeff_c;
    __pyx_v_self->Bcoeff_ = __pyx_t_18;

    /* "WaveTools.py":986
 *             self.Ycoeff_ =  self.Ycoeff_c
 *             self.Bcoeff_ =  self.Bcoeff_c
 *             self.tanhF_ = self.tanh_c             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_18 = __pyx_v_self->tanh_c;
    __pyx_v_self->tanhF_ = __pyx_t_18;

    /* "WaveTools.py":979
 * 
 * 
 *         if self.waveType == "Fenton":             # <<<<<<<<<<<<<<
 *             for ij in range(Nf):
 *                 self.Ycoeff_c[ij] = self.Ycoeff[ij]
 */
  }

  /* "WaveTools.py":994
 * 
 * 
 *         if self.waveType == "Linear":             # <<<<<<<<<<<<<<
 *             self._cpp_eta = self.etaLinear
 *             self._cpp_u = self.uLinear
 */
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_self->waveType, __pyx_n_s_Linear, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 994, __pyx_L1_error)
  if (__pyx_t_4) {

    /* "WaveTools.py":995
 * 
 *         if self.waveType == "Linear":
 *             self._cpp_eta = self.etaLinear             # <<<<<<<<<<<<<<
 *             self._cpp_u = self.uLinear
 *         else:
 */
    __pyx_t_19 = ((struct __pyx_vtabstruct_9WaveTools_MonochromaticWaves *)__pyx_v_self->__pyx_vtab)->etaLinear;
    __pyx_v_self->_cpp_eta = __pyx_t_19;

    /* "WaveTools.py":996
 *         if self.waveType == "Linear":
 *             self._cpp_eta = self.etaLinear
 *             self._cpp_u = self.uLinear             # <<<<<<<<<<<<<<
 *         else:
 *             self._cpp_eta = self.etaFenton
 */
    __pyx_t_20 = ((struct __pyx_vtabstruct_9WaveTools_MonochromaticWaves *)__pyx_v_self->__pyx_vtab)->uLinear;
    __pyx_v_self->_cpp_u = __pyx_t_20;

    /* "WaveTools.py":994
 * 
 * 
 *         if self.waveType == "Linear":             # <<<<<<<<<<<<<<
 *             self._cpp_eta = self.etaLinear
 *             self._cpp_u = self.uLinear
 */
    goto __pyx_L29;
  }

  /* "WaveTools.py":998
 *             self._cpp_u = self.uLinear
 *         else:
 *             self._cpp_eta = self.etaFenton             # <<<<<<<<<<<<<<
 *             self._cpp_u = self.uFenton
 * 
 */
  /*else*/ {
    __pyx_t_21 = ((struct __pyx_vtabstruct_9WaveTools_MonochromaticWaves *)__pyx_v_self->__pyx_vtab)->etaFenton;
    __pyx_v_self->_cpp_eta = __pyx_t_21;

    /* "WaveTools.py":999
 *         else:
 *             self._cpp_eta = self.etaFenton
 *             self._cpp_u = self.uFenton             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_22 = ((struct __pyx_vtabstruct_9WaveTools_MonochromaticWaves *)__pyx_v_self->__pyx_vtab)->uFenton;
    __pyx_v_self->_cpp_u = __pyx_t_22;
  }
  __pyx_L29:;

  /* "WaveTools.py":893
 * 
 *             """
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *                  period,
 *                  waveHeight,
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("WaveTools.MonochromaticWaves.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_knownWaveTypes);
  __Pyx_XDECREF(__pyx_v_ii);
  __Pyx_XDECREF(__pyx_v_kk);
  __Pyx_XDECREF(__pyx_v_ij);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":1002
 * 
 * 
 *     def  etaLinear(self,  x,  t):             # <<<<<<<<<<<<<<
 * 
 *         return __cpp_eta_mode(x ,t, self.kDir_,self.omega,self.phi0,self.amplitude, self.fast)
 */

static double __pyx_f_9WaveTools_18MonochromaticWaves_etaLinear(struct __pyx_obj_9WaveTools_MonochromaticWaves *__pyx_v_self, double *__pyx_v_x, double __pyx_v_t) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("etaLinear", 0);

  /* "WaveTools.py":1004
 *     def  etaLinear(self,  x,  t):
 * 
 *         return __cpp_eta_mode(x ,t, self.kDir_,self.omega,self.phi0,self.amplitude, self.fast)             # <<<<<<<<<<<<<<
 * 
 *     def etaFenton(self,  x,  t):
 */
  __pyx_r = proteus::__cpp_eta_mode(__pyx_v_x, __pyx_v_t, __pyx_v_self->kDir_, __pyx_v_self->omega, __pyx_v_self->phi0, __pyx_v_self->amplitude, __pyx_v_self->fast);
  goto __pyx_L0;

  /* "WaveTools.py":1002
 * 
 * 
 *     def  etaLinear(self,  x,  t):             # <<<<<<<<<<<<<<
 * 
 *         return __cpp_eta_mode(x ,t, self.kDir_,self.omega,self.phi0,self.amplitude, self.fast)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":1006
 *         return __cpp_eta_mode(x ,t, self.kDir_,self.omega,self.phi0,self.amplitude, self.fast)
 * 
 *     def etaFenton(self,  x,  t):             # <<<<<<<<<<<<<<
 * 
 *         return __cpp_etaFenton(x,t,self.kDir_, self.k, self.omega,self.phi0,self.amplitude, self.Nf, self.Ycoeff_, self.fast)
 */

static double __pyx_f_9WaveTools_18MonochromaticWaves_etaFenton(struct __pyx_obj_9WaveTools_MonochromaticWaves *__pyx_v_self, double *__pyx_v_x, double __pyx_v_t) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("etaFenton", 0);

  /* "WaveTools.py":1008
 *     def etaFenton(self,  x,  t):
 * 
 *         return __cpp_etaFenton(x,t,self.kDir_, self.k, self.omega,self.phi0,self.amplitude, self.Nf, self.Ycoeff_, self.fast)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = proteus::__cpp_etaFenton(__pyx_v_x, __pyx_v_t, __pyx_v_self->kDir_, __pyx_v_self->k, __pyx_v_self->omega, __pyx_v_self->phi0, __pyx_v_self->amplitude, __pyx_v_self->Nf, __pyx_v_self->Ycoeff_, __pyx_v_self->fast);
  goto __pyx_L0;

  /* "WaveTools.py":1006
 *         return __cpp_eta_mode(x ,t, self.kDir_,self.omega,self.phi0,self.amplitude, self.fast)
 * 
 *     def etaFenton(self,  x,  t):             # <<<<<<<<<<<<<<
 * 
 *         return __cpp_etaFenton(x,t,self.kDir_, self.k, self.omega,self.phi0,self.amplitude, self.Nf, self.Ycoeff_, self.fast)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":1011
 * 
 * 
 *     def  uLinear(self, U, x,  t):             # <<<<<<<<<<<<<<
 *         __cpp_vel_mode_p(U, x, t, self.kDir_,self.k,self.omega,self.phi0,self.amplitude,self.mwl,self.depth,self.waveDir_,self.vDir_, self.tanhL, self.gAbs, self.fast)
 * 
 */

static void __pyx_f_9WaveTools_18MonochromaticWaves_uLinear(struct __pyx_obj_9WaveTools_MonochromaticWaves *__pyx_v_self, double *__pyx_v_U, double *__pyx_v_x, double __pyx_v_t) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("uLinear", 0);

  /* "WaveTools.py":1012
 * 
 *     def  uLinear(self, U, x,  t):
 *         __cpp_vel_mode_p(U, x, t, self.kDir_,self.k,self.omega,self.phi0,self.amplitude,self.mwl,self.depth,self.waveDir_,self.vDir_, self.tanhL, self.gAbs, self.fast)             # <<<<<<<<<<<<<<
 * 
 *     def  uFenton(self,  U, x,  t):
 */
  proteus::__cpp_vel_mode_p(__pyx_v_U, __pyx_v_x, __pyx_v_t, __pyx_v_self->kDir_, __pyx_v_self->k, __pyx_v_self->omega, __pyx_v_self->phi0, __pyx_v_self->amplitude, __pyx_v_self->mwl, __pyx_v_self->depth, __pyx_v_self->waveDir_, __pyx_v_self->vDir_, __pyx_v_self->tanhL, __pyx_v_self->gAbs, __pyx_v_self->fast);

  /* "WaveTools.py":1011
 * 
 * 
 *     def  uLinear(self, U, x,  t):             # <<<<<<<<<<<<<<
 *         __cpp_vel_mode_p(U, x, t, self.kDir_,self.k,self.omega,self.phi0,self.amplitude,self.mwl,self.depth,self.waveDir_,self.vDir_, self.tanhL, self.gAbs, self.fast)
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "WaveTools.py":1014
 *         __cpp_vel_mode_p(U, x, t, self.kDir_,self.k,self.omega,self.phi0,self.amplitude,self.mwl,self.depth,self.waveDir_,self.vDir_, self.tanhL, self.gAbs, self.fast)
 * 
 *     def  uFenton(self,  U, x,  t):             # <<<<<<<<<<<<<<
 *         __cpp_uFenton(U,x, t, self.kDir_,self.k,self.omega,self.phi0,self.amplitude,self.mwl, self.depth, self.gAbs,self.Nf, self.Bcoeff_, self.mV_,self.waveDir_,self.vDir_, self.tanhF_, self.fast)
 * 
 */

static void __pyx_f_9WaveTools_18MonochromaticWaves_uFenton(struct __pyx_obj_9WaveTools_MonochromaticWaves *__pyx_v_self, double *__pyx_v_U, double *__pyx_v_x, double __pyx_v_t) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("uFenton", 0);

  /* "WaveTools.py":1015
 * 
 *     def  uFenton(self,  U, x,  t):
 *         __cpp_uFenton(U,x, t, self.kDir_,self.k,self.omega,self.phi0,self.amplitude,self.mwl, self.depth, self.gAbs,self.Nf, self.Bcoeff_, self.mV_,self.waveDir_,self.vDir_, self.tanhF_, self.fast)             # <<<<<<<<<<<<<<
 * 
 *     def eta(self,x,t):
 */
  proteus::__cpp_uFenton(__pyx_v_U, __pyx_v_x, __pyx_v_t, __pyx_v_self->kDir_, __pyx_v_self->k, __pyx_v_self->omega, __pyx_v_self->phi0, __pyx_v_self->amplitude, __pyx_v_self->mwl, __pyx_v_self->depth, __pyx_v_self->gAbs, __pyx_v_self->Nf, __pyx_v_self->Bcoeff_, __pyx_v_self->mV_, __pyx_v_self->waveDir_, __pyx_v_self->vDir_, __pyx_v_self->tanhF_, __pyx_v_self->fast);

  /* "WaveTools.py":1014
 *         __cpp_vel_mode_p(U, x, t, self.kDir_,self.k,self.omega,self.phi0,self.amplitude,self.mwl,self.depth,self.waveDir_,self.vDir_, self.tanhL, self.gAbs, self.fast)
 * 
 *     def  uFenton(self,  U, x,  t):             # <<<<<<<<<<<<<<
 *         __cpp_uFenton(U,x, t, self.kDir_,self.k,self.omega,self.phi0,self.amplitude,self.mwl, self.depth, self.gAbs,self.Nf, self.Bcoeff_, self.mV_,self.waveDir_,self.vDir_, self.tanhF_, self.fast)
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "WaveTools.py":1017
 *         __cpp_uFenton(U,x, t, self.kDir_,self.k,self.omega,self.phi0,self.amplitude,self.mwl, self.depth, self.gAbs,self.Nf, self.Bcoeff_, self.mV_,self.waveDir_,self.vDir_, self.tanhF_, self.fast)
 * 
 *     def eta(self,x,t):             # <<<<<<<<<<<<<<
 *         """Calculates free surface elevation (MonochromaticWaves class)
 *         Parameters
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_18MonochromaticWaves_3eta(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9WaveTools_18MonochromaticWaves_2eta[] = "Calculates free surface elevation (MonochromaticWaves class)\n        Parameters\n        ----------\n        x : numpy.ndarray\n            Position vector\n        t : float\n            Time variable\n\n        Returns\n        --------\n        float\n            Free-surface elevation as a float\n\n        ";
static PyMethodDef __pyx_mdef_9WaveTools_18MonochromaticWaves_3eta = {"eta", (PyCFunction)__pyx_pw_9WaveTools_18MonochromaticWaves_3eta, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_18MonochromaticWaves_2eta};
static PyObject *__pyx_pw_9WaveTools_18MonochromaticWaves_3eta(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_t = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("eta (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_t,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("eta", 1, 2, 2, 1); __PYX_ERR(0, 1017, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "eta") < 0)) __PYX_ERR(0, 1017, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = values[0];
    __pyx_v_t = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("eta", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1017, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("WaveTools.MonochromaticWaves.eta", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9WaveTools_18MonochromaticWaves_2eta(((struct __pyx_obj_9WaveTools_MonochromaticWaves *)__pyx_v_self), __pyx_v_x, __pyx_v_t);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_18MonochromaticWaves_2eta(struct __pyx_obj_9WaveTools_MonochromaticWaves *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_t) {
  double __pyx_v_xx[3];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("eta", 0);

  /* "WaveTools.py":1033
 *         """
 *         cython.declare(xx=cython.double[3])
 *         xx[0] = x[0]             # <<<<<<<<<<<<<<
 *         xx[1] = x[1]
 *         xx[2] = x[2]
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_x, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1033, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1033, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  (__pyx_v_xx[0]) = __pyx_t_2;

  /* "WaveTools.py":1034
 *         cython.declare(xx=cython.double[3])
 *         xx[0] = x[0]
 *         xx[1] = x[1]             # <<<<<<<<<<<<<<
 *         xx[2] = x[2]
 *         if self.waveType =="Linear":
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_x, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1034, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1034, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  (__pyx_v_xx[1]) = __pyx_t_2;

  /* "WaveTools.py":1035
 *         xx[0] = x[0]
 *         xx[1] = x[1]
 *         xx[2] = x[2]             # <<<<<<<<<<<<<<
 *         if self.waveType =="Linear":
 *             return self.etaLinear(xx,t)
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_x, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1035, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1035, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  (__pyx_v_xx[2]) = __pyx_t_2;

  /* "WaveTools.py":1036
 *         xx[1] = x[1]
 *         xx[2] = x[2]
 *         if self.waveType =="Linear":             # <<<<<<<<<<<<<<
 *             return self.etaLinear(xx,t)
 *         else:
 */
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_v_self->waveType, __pyx_n_s_Linear, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1036, __pyx_L1_error)
  if (__pyx_t_3) {

    /* "WaveTools.py":1037
 *         xx[2] = x[2]
 *         if self.waveType =="Linear":
 *             return self.etaLinear(xx,t)             # <<<<<<<<<<<<<<
 *         else:
 *             return self.etaFenton(xx,t)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_t); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1037, __pyx_L1_error)
    __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_vtabstruct_9WaveTools_MonochromaticWaves *)__pyx_v_self->__pyx_vtab)->etaLinear(__pyx_v_self, __pyx_v_xx, __pyx_t_2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1037, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "WaveTools.py":1036
 *         xx[1] = x[1]
 *         xx[2] = x[2]
 *         if self.waveType =="Linear":             # <<<<<<<<<<<<<<
 *             return self.etaLinear(xx,t)
 *         else:
 */
  }

  /* "WaveTools.py":1039
 *             return self.etaLinear(xx,t)
 *         else:
 *             return self.etaFenton(xx,t)             # <<<<<<<<<<<<<<
 * 
 *     def u(self,x,t):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_t); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1039, __pyx_L1_error)
    __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_vtabstruct_9WaveTools_MonochromaticWaves *)__pyx_v_self->__pyx_vtab)->etaFenton(__pyx_v_self, __pyx_v_xx, __pyx_t_2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1039, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "WaveTools.py":1017
 *         __cpp_uFenton(U,x, t, self.kDir_,self.k,self.omega,self.phi0,self.amplitude,self.mwl, self.depth, self.gAbs,self.Nf, self.Bcoeff_, self.mV_,self.waveDir_,self.vDir_, self.tanhF_, self.fast)
 * 
 *     def eta(self,x,t):             # <<<<<<<<<<<<<<
 *         """Calculates free surface elevation (MonochromaticWaves class)
 *         Parameters
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("WaveTools.MonochromaticWaves.eta", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":1041
 *             return self.etaFenton(xx,t)
 * 
 *     def u(self,x,t):             # <<<<<<<<<<<<<<
 *         """Calculates wave velocity vector (MonochromaticWaves class).
 *         Parameters
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_18MonochromaticWaves_5u(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9WaveTools_18MonochromaticWaves_4u[] = "Calculates wave velocity vector (MonochromaticWaves class).\n        Parameters\n        ----------\n        x : numpy.ndarray\n            Position vector\n        t : float\n            Time variable\n\n        Returns\n        --------\n        numpy.ndarray\n            Velocity vector as 1D array\n\n        ";
static PyMethodDef __pyx_mdef_9WaveTools_18MonochromaticWaves_5u = {"u", (PyCFunction)__pyx_pw_9WaveTools_18MonochromaticWaves_5u, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_18MonochromaticWaves_4u};
static PyObject *__pyx_pw_9WaveTools_18MonochromaticWaves_5u(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_t = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("u (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_t,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("u", 1, 2, 2, 1); __PYX_ERR(0, 1041, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "u") < 0)) __PYX_ERR(0, 1041, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = values[0];
    __pyx_v_t = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("u", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1041, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("WaveTools.MonochromaticWaves.u", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9WaveTools_18MonochromaticWaves_4u(((struct __pyx_obj_9WaveTools_MonochromaticWaves *)__pyx_v_self), __pyx_v_x, __pyx_v_t);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_18MonochromaticWaves_4u(struct __pyx_obj_9WaveTools_MonochromaticWaves *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_t) {
  double __pyx_v_xx[3];
  double __pyx_v_cppU[3];
  long __pyx_v_ii;
  PyObject *__pyx_v_U = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  long __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  double __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("u", 0);

  /* "WaveTools.py":1058
 *         cython.declare(xx=cython.double[3])
 *         cython.declare(cppU=cython.double[3])
 *         for ii in range(3):             # <<<<<<<<<<<<<<
 *             xx[ii] = x[ii]
 *             cppU[ii] = 0.
 */
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {
    __pyx_v_ii = __pyx_t_1;

    /* "WaveTools.py":1059
 *         cython.declare(cppU=cython.double[3])
 *         for ii in range(3):
 *             xx[ii] = x[ii]             # <<<<<<<<<<<<<<
 *             cppU[ii] = 0.
 * 
 */
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_x, __pyx_v_ii, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1059, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1059, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    (__pyx_v_xx[__pyx_v_ii]) = __pyx_t_3;

    /* "WaveTools.py":1060
 *         for ii in range(3):
 *             xx[ii] = x[ii]
 *             cppU[ii] = 0.             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (__pyx_v_cppU[__pyx_v_ii]) = 0.;
  }

  /* "WaveTools.py":1063
 * 
 * 
 *         U = np.zeros(3,)             # <<<<<<<<<<<<<<
 *         if self.waveType =="Linear":
 *             self.uLinear(cppU,xx,t)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1063, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1063, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__58, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1063, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_U = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "WaveTools.py":1064
 * 
 *         U = np.zeros(3,)
 *         if self.waveType =="Linear":             # <<<<<<<<<<<<<<
 *             self.uLinear(cppU,xx,t)
 *             U[0] = cppU[0]
 */
  __pyx_t_5 = (__Pyx_PyString_Equals(__pyx_v_self->waveType, __pyx_n_s_Linear, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1064, __pyx_L1_error)
  if (__pyx_t_5) {

    /* "WaveTools.py":1065
 *         U = np.zeros(3,)
 *         if self.waveType =="Linear":
 *             self.uLinear(cppU,xx,t)             # <<<<<<<<<<<<<<
 *             U[0] = cppU[0]
 *             U[1] = cppU[1]
 */
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_t); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1065, __pyx_L1_error)
    ((struct __pyx_vtabstruct_9WaveTools_MonochromaticWaves *)__pyx_v_self->__pyx_vtab)->uLinear(__pyx_v_self, __pyx_v_cppU, __pyx_v_xx, __pyx_t_3);

    /* "WaveTools.py":1066
 *         if self.waveType =="Linear":
 *             self.uLinear(cppU,xx,t)
 *             U[0] = cppU[0]             # <<<<<<<<<<<<<<
 *             U[1] = cppU[1]
 *             U[2] = cppU[2]
 */
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v_cppU[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1066, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(__Pyx_SetItemInt(__pyx_v_U, 0, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1) < 0)) __PYX_ERR(0, 1066, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "WaveTools.py":1067
 *             self.uLinear(cppU,xx,t)
 *             U[0] = cppU[0]
 *             U[1] = cppU[1]             # <<<<<<<<<<<<<<
 *             U[2] = cppU[2]
 *         else:
 */
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v_cppU[1])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1067, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(__Pyx_SetItemInt(__pyx_v_U, 1, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1) < 0)) __PYX_ERR(0, 1067, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "WaveTools.py":1068
 *             U[0] = cppU[0]
 *             U[1] = cppU[1]
 *             U[2] = cppU[2]             # <<<<<<<<<<<<<<
 *         else:
 *             self.uFenton(cppU,xx,t)
 */
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v_cppU[2])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1068, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(__Pyx_SetItemInt(__pyx_v_U, 2, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1) < 0)) __PYX_ERR(0, 1068, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "WaveTools.py":1064
 * 
 *         U = np.zeros(3,)
 *         if self.waveType =="Linear":             # <<<<<<<<<<<<<<
 *             self.uLinear(cppU,xx,t)
 *             U[0] = cppU[0]
 */
    goto __pyx_L5;
  }

  /* "WaveTools.py":1070
 *             U[2] = cppU[2]
 *         else:
 *             self.uFenton(cppU,xx,t)             # <<<<<<<<<<<<<<
 *             U[0] = cppU[0]
 *             U[1] = cppU[1]
 */
  /*else*/ {
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_t); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1070, __pyx_L1_error)
    ((struct __pyx_vtabstruct_9WaveTools_MonochromaticWaves *)__pyx_v_self->__pyx_vtab)->uFenton(__pyx_v_self, __pyx_v_cppU, __pyx_v_xx, __pyx_t_3);

    /* "WaveTools.py":1071
 *         else:
 *             self.uFenton(cppU,xx,t)
 *             U[0] = cppU[0]             # <<<<<<<<<<<<<<
 *             U[1] = cppU[1]
 *             U[2] = cppU[2]
 */
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v_cppU[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1071, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(__Pyx_SetItemInt(__pyx_v_U, 0, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1) < 0)) __PYX_ERR(0, 1071, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "WaveTools.py":1072
 *             self.uFenton(cppU,xx,t)
 *             U[0] = cppU[0]
 *             U[1] = cppU[1]             # <<<<<<<<<<<<<<
 *             U[2] = cppU[2]
 *         return U
 */
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v_cppU[1])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1072, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(__Pyx_SetItemInt(__pyx_v_U, 1, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1) < 0)) __PYX_ERR(0, 1072, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "WaveTools.py":1073
 *             U[0] = cppU[0]
 *             U[1] = cppU[1]
 *             U[2] = cppU[2]             # <<<<<<<<<<<<<<
 *         return U
 * 
 */
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v_cppU[2])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1073, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(__Pyx_SetItemInt(__pyx_v_U, 2, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1) < 0)) __PYX_ERR(0, 1073, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_L5:;

  /* "WaveTools.py":1074
 *             U[1] = cppU[1]
 *             U[2] = cppU[2]
 *         return U             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_U);
  __pyx_r = __pyx_v_U;
  goto __pyx_L0;

  /* "WaveTools.py":1041
 *             return self.etaFenton(xx,t)
 * 
 *     def u(self,x,t):             # <<<<<<<<<<<<<<
 *         """Calculates wave velocity vector (MonochromaticWaves class).
 *         Parameters
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("WaveTools.MonochromaticWaves.u", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_U);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.pxd":62
 *     cdef double[1000] tanh_c
 *     cdef public:
 *         double wavelength             # <<<<<<<<<<<<<<
 *         double mwl
 *     cdef  cfeta _cpp_eta
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_18MonochromaticWaves_10wavelength_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9WaveTools_18MonochromaticWaves_10wavelength_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_18MonochromaticWaves_10wavelength___get__(((struct __pyx_obj_9WaveTools_MonochromaticWaves *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_18MonochromaticWaves_10wavelength___get__(struct __pyx_obj_9WaveTools_MonochromaticWaves *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->wavelength); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("WaveTools.MonochromaticWaves.wavelength.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9WaveTools_18MonochromaticWaves_10wavelength_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9WaveTools_18MonochromaticWaves_10wavelength_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_18MonochromaticWaves_10wavelength_2__set__(((struct __pyx_obj_9WaveTools_MonochromaticWaves *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9WaveTools_18MonochromaticWaves_10wavelength_2__set__(struct __pyx_obj_9WaveTools_MonochromaticWaves *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 62, __pyx_L1_error)
  __pyx_v_self->wavelength = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("WaveTools.MonochromaticWaves.wavelength.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.pxd":63
 *     cdef public:
 *         double wavelength
 *         double mwl             # <<<<<<<<<<<<<<
 *     cdef  cfeta _cpp_eta
 *     cdef  cfvel _cpp_u
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_18MonochromaticWaves_3mwl_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9WaveTools_18MonochromaticWaves_3mwl_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_18MonochromaticWaves_3mwl___get__(((struct __pyx_obj_9WaveTools_MonochromaticWaves *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_18MonochromaticWaves_3mwl___get__(struct __pyx_obj_9WaveTools_MonochromaticWaves *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->mwl); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("WaveTools.MonochromaticWaves.mwl.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9WaveTools_18MonochromaticWaves_3mwl_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9WaveTools_18MonochromaticWaves_3mwl_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_18MonochromaticWaves_3mwl_2__set__(((struct __pyx_obj_9WaveTools_MonochromaticWaves *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9WaveTools_18MonochromaticWaves_3mwl_2__set__(struct __pyx_obj_9WaveTools_MonochromaticWaves *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 63, __pyx_L1_error)
  __pyx_v_self->mwl = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("WaveTools.MonochromaticWaves.mwl.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":1111
 *              Switch for optimised functions
 *     """
 *     def __cinit__(self,             # <<<<<<<<<<<<<<
 *                  Tp,
 *                  Hs,
 */

/* Python wrapper */
static int __pyx_pw_9WaveTools_11RandomWaves_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9WaveTools_11RandomWaves_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_Tp = 0;
  PyObject *__pyx_v_Hs = 0;
  PyObject *__pyx_v_mwl = 0;
  PyObject *__pyx_v_depth = 0;
  PyObject *__pyx_v_waveDir = 0;
  PyObject *__pyx_v_g = 0;
  PyObject *__pyx_v_N = 0;
  PyObject *__pyx_v_bandFactor = 0;
  PyObject *__pyx_v_spectName = 0;
  PyObject *__pyx_v_spectral_params = 0;
  PyObject *__pyx_v_phi = 0;
  PyObject *__pyx_v_fast = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_Tp,&__pyx_n_s_Hs,&__pyx_n_s_mwl,&__pyx_n_s_depth,&__pyx_n_s_waveDir,&__pyx_n_s_g,&__pyx_n_s_N,&__pyx_n_s_bandFactor,&__pyx_n_s_spectName,&__pyx_n_s_spectral_params,&__pyx_n_s_phi,&__pyx_n_s_fast,0};
    PyObject* values[12] = {0,0,0,0,0,0,0,0,0,0,0,0};

    /* "WaveTools.py":1121
 *                  bandFactor,         #accelerationof gravity
 *                  spectName ,# random words will result in error and return the available spectra
 *                   spectral_params =  None, #JONPARAMS = {"gamma": 3.3, "TMA":True,"depth": depth}             # <<<<<<<<<<<<<<
 *                   phi=None,
 *                   fast = True
 */
    values[9] = ((PyObject *)Py_None);

    /* "WaveTools.py":1122
 *                  spectName ,# random words will result in error and return the available spectra
 *                   spectral_params =  None, #JONPARAMS = {"gamma": 3.3, "TMA":True,"depth": depth}
 *                   phi=None,             # <<<<<<<<<<<<<<
 *                   fast = True
 *                  ):
 */
    values[10] = ((PyObject *)Py_None);

    /* "WaveTools.py":1123
 *                   spectral_params =  None, #JONPARAMS = {"gamma": 3.3, "TMA":True,"depth": depth}
 *                   phi=None,
 *                   fast = True             # <<<<<<<<<<<<<<
 *                  ):
 *         self.fast= fast
 */
    values[11] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Tp)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Hs)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 9, 12, 1); __PYX_ERR(0, 1111, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mwl)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 9, 12, 2); __PYX_ERR(0, 1111, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_depth)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 9, 12, 3); __PYX_ERR(0, 1111, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_waveDir)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 9, 12, 4); __PYX_ERR(0, 1111, __pyx_L3_error)
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 9, 12, 5); __PYX_ERR(0, 1111, __pyx_L3_error)
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_N)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 9, 12, 6); __PYX_ERR(0, 1111, __pyx_L3_error)
        }
        case  7:
        if (likely((values[7] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bandFactor)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 9, 12, 7); __PYX_ERR(0, 1111, __pyx_L3_error)
        }
        case  8:
        if (likely((values[8] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_spectName)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 9, 12, 8); __PYX_ERR(0, 1111, __pyx_L3_error)
        }
        case  9:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_spectral_params);
          if (value) { values[9] = value; kw_args--; }
        }
        case 10:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_phi);
          if (value) { values[10] = value; kw_args--; }
        }
        case 11:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fast);
          if (value) { values[11] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1111, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_Tp = values[0];
    __pyx_v_Hs = values[1];
    __pyx_v_mwl = values[2];
    __pyx_v_depth = values[3];
    __pyx_v_waveDir = values[4];
    __pyx_v_g = values[5];
    __pyx_v_N = values[6];
    __pyx_v_bandFactor = values[7];
    __pyx_v_spectName = values[8];
    __pyx_v_spectral_params = values[9];
    __pyx_v_phi = values[10];
    __pyx_v_fast = values[11];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 9, 12, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1111, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("WaveTools.RandomWaves.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9WaveTools_11RandomWaves___cinit__(((struct __pyx_obj_9WaveTools_RandomWaves *)__pyx_v_self), __pyx_v_Tp, __pyx_v_Hs, __pyx_v_mwl, __pyx_v_depth, __pyx_v_waveDir, __pyx_v_g, __pyx_v_N, __pyx_v_bandFactor, __pyx_v_spectName, __pyx_v_spectral_params, __pyx_v_phi, __pyx_v_fast);

  /* "WaveTools.py":1111
 *              Switch for optimised functions
 *     """
 *     def __cinit__(self,             # <<<<<<<<<<<<<<
 *                  Tp,
 *                  Hs,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9WaveTools_11RandomWaves___cinit__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self, PyObject *__pyx_v_Tp, PyObject *__pyx_v_Hs, PyObject *__pyx_v_mwl, PyObject *__pyx_v_depth, PyObject *__pyx_v_waveDir, PyObject *__pyx_v_g, PyObject *__pyx_v_N, PyObject *__pyx_v_bandFactor, PyObject *__pyx_v_spectName, PyObject *__pyx_v_spectral_params, PyObject *__pyx_v_phi, PyObject *__pyx_v_fast) {
  PyObject *__pyx_v_validSpectra = NULL;
  PyObject *__pyx_v_spec_fun = NULL;
  double __pyx_v_fmax;
  double __pyx_v_fmin;
  PyObject *__pyx_v_fim = NULL;
  long __pyx_v_ii;
  PyObject *__pyx_v_ij = NULL;
  PyObject *__pyx_v_kk = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  double __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  int __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  long __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  PyObject *(*__pyx_t_19)(PyObject *);
  Py_ssize_t __pyx_t_20;
  double *__pyx_t_21;
  PyObject *(*__pyx_t_22)(PyObject *);
  Py_ssize_t __pyx_t_23;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_INCREF(__pyx_v_waveDir);

  /* "WaveTools.py":1125
 *                   fast = True
 *                  ):
 *         self.fast= fast             # <<<<<<<<<<<<<<
 *         validSpectra = [JONSWAP,PM_mod]
 *         spec_fun =loadExistingFunction(spectName, validSpectra)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_fast); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1125, __pyx_L1_error)
  __pyx_v_self->fast = __pyx_t_1;

  /* "WaveTools.py":1126
 *                  ):
 *         self.fast= fast
 *         validSpectra = [JONSWAP,PM_mod]             # <<<<<<<<<<<<<<
 *         spec_fun =loadExistingFunction(spectName, validSpectra)
 *         self.g = np.array(g)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_JONSWAP); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_PM_mod); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyList_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_v_validSpectra = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "WaveTools.py":1127
 *         self.fast= fast
 *         validSpectra = [JONSWAP,PM_mod]
 *         spec_fun =loadExistingFunction(spectName, validSpectra)             # <<<<<<<<<<<<<<
 *         self.g = np.array(g)
 *         waveDir =  setDirVector(np.array(waveDir))
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_loadExistingFunction); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_spectName, __pyx_v_validSpectra};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1127, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_spectName, __pyx_v_validSpectra};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1127, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1127, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_spectName);
    __Pyx_GIVEREF(__pyx_v_spectName);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_v_spectName);
    __Pyx_INCREF(__pyx_v_validSpectra);
    __Pyx_GIVEREF(__pyx_v_validSpectra);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_v_validSpectra);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1127, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_spec_fun = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "WaveTools.py":1128
 *         validSpectra = [JONSWAP,PM_mod]
 *         spec_fun =loadExistingFunction(spectName, validSpectra)
 *         self.g = np.array(g)             # <<<<<<<<<<<<<<
 *         waveDir =  setDirVector(np.array(waveDir))
 *         self.waveDir = waveDir
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_array); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_g); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1128, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_g};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1128, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_g};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1128, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1128, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_g);
      __Pyx_GIVEREF(__pyx_v_g);
      PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_v_g);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_2, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1128, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1128, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_4);
  __Pyx_GOTREF(__pyx_v_self->g);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->g));
  __pyx_v_self->g = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "WaveTools.py":1129
 *         spec_fun =loadExistingFunction(spectName, validSpectra)
 *         self.g = np.array(g)
 *         waveDir =  setDirVector(np.array(waveDir))             # <<<<<<<<<<<<<<
 *         self.waveDir = waveDir
 *         self.vDir = setVertDir(g)
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_setDirVector); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_array); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_waveDir); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1129, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_waveDir};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1129, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_waveDir};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1129, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1129, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_waveDir);
      __Pyx_GIVEREF(__pyx_v_waveDir);
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_v_waveDir);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1129, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (!__pyx_t_7) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1129, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_2};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1129, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_2};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1129, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1129, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1129, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF_SET(__pyx_v_waveDir, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "WaveTools.py":1130
 *         self.g = np.array(g)
 *         waveDir =  setDirVector(np.array(waveDir))
 *         self.waveDir = waveDir             # <<<<<<<<<<<<<<
 *         self.vDir = setVertDir(g)
 *         dirCheck(self.waveDir,self.vDir)
 */
  if (!(likely(((__pyx_v_waveDir) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_waveDir, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1130, __pyx_L1_error)
  __pyx_t_4 = __pyx_v_waveDir;
  __Pyx_INCREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __Pyx_GOTREF(__pyx_v_self->waveDir);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->waveDir));
  __pyx_v_self->waveDir = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "WaveTools.py":1131
 *         waveDir =  setDirVector(np.array(waveDir))
 *         self.waveDir = waveDir
 *         self.vDir = setVertDir(g)             # <<<<<<<<<<<<<<
 *         dirCheck(self.waveDir,self.vDir)
 *         self.gAbs = sqrt(self.g[0]*self.g[0]+self.g[1]*self.g[1]+self.g[2]*self.g[2])
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_setVertDir); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (!__pyx_t_8) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_g); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_v_g};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1131, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_v_g};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1131, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1131, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_8); __pyx_t_8 = NULL;
      __Pyx_INCREF(__pyx_v_g);
      __Pyx_GIVEREF(__pyx_v_g);
      PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_v_g);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_2, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1131, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1131, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_4);
  __Pyx_GOTREF(__pyx_v_self->vDir);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->vDir));
  __pyx_v_self->vDir = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "WaveTools.py":1132
 *         self.waveDir = waveDir
 *         self.vDir = setVertDir(g)
 *         dirCheck(self.waveDir,self.vDir)             # <<<<<<<<<<<<<<
 *         self.gAbs = sqrt(self.g[0]*self.g[0]+self.g[1]*self.g[1]+self.g[2]*self.g[2])
 *         self.Hs = Hs
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_dirCheck); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, ((PyObject *)__pyx_v_self->waveDir), ((PyObject *)__pyx_v_self->vDir)};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1132, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, ((PyObject *)__pyx_v_self->waveDir), ((PyObject *)__pyx_v_self->vDir)};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1132, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  {
    __pyx_t_8 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1132, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_self->waveDir));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self->waveDir));
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_5, ((PyObject *)__pyx_v_self->waveDir));
    __Pyx_INCREF(((PyObject *)__pyx_v_self->vDir));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self->vDir));
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_5, ((PyObject *)__pyx_v_self->vDir));
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1132, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "WaveTools.py":1133
 *         self.vDir = setVertDir(g)
 *         dirCheck(self.waveDir,self.vDir)
 *         self.gAbs = sqrt(self.g[0]*self.g[0]+self.g[1]*self.g[1]+self.g[2]*self.g[2])             # <<<<<<<<<<<<<<
 *         self.Hs = Hs
 *         self.depth = depth
 */
  __pyx_t_4 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->g), 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->g), 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = PyNumber_Multiply(__pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->g), 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->g), 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Add(__pyx_t_8, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->g), 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_8 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->g), 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = PyNumber_Add(__pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_8); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1133, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_self->gAbs = sqrt(__pyx_t_9);

  /* "WaveTools.py":1134
 *         dirCheck(self.waveDir,self.vDir)
 *         self.gAbs = sqrt(self.g[0]*self.g[0]+self.g[1]*self.g[1]+self.g[2]*self.g[2])
 *         self.Hs = Hs             # <<<<<<<<<<<<<<
 *         self.depth = depth
 *         self.Tp = Tp
 */
  __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_v_Hs); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1134, __pyx_L1_error)
  __pyx_v_self->Hs = __pyx_t_9;

  /* "WaveTools.py":1135
 *         self.gAbs = sqrt(self.g[0]*self.g[0]+self.g[1]*self.g[1]+self.g[2]*self.g[2])
 *         self.Hs = Hs
 *         self.depth = depth             # <<<<<<<<<<<<<<
 *         self.Tp = Tp
 *         self.fp = 1./Tp
 */
  __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_v_depth); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1135, __pyx_L1_error)
  __pyx_v_self->depth = __pyx_t_9;

  /* "WaveTools.py":1136
 *         self.Hs = Hs
 *         self.depth = depth
 *         self.Tp = Tp             # <<<<<<<<<<<<<<
 *         self.fp = 1./Tp
 *         self.bandFactor = bandFactor
 */
  __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_v_Tp); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1136, __pyx_L1_error)
  __pyx_v_self->Tp = __pyx_t_9;

  /* "WaveTools.py":1137
 *         self.depth = depth
 *         self.Tp = Tp
 *         self.fp = 1./Tp             # <<<<<<<<<<<<<<
 *         self.bandFactor = bandFactor
 *         self.N = N
 */
  __pyx_t_8 = __Pyx_PyFloat_DivideCObj(__pyx_float_1_, __pyx_v_Tp, 1., 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_8); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1137, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_self->fp = __pyx_t_9;

  /* "WaveTools.py":1138
 *         self.Tp = Tp
 *         self.fp = 1./Tp
 *         self.bandFactor = bandFactor             # <<<<<<<<<<<<<<
 *         self.N = N
 *         self.mwl = mwl
 */
  __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_v_bandFactor); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1138, __pyx_L1_error)
  __pyx_v_self->bandFactor = __pyx_t_9;

  /* "WaveTools.py":1139
 *         self.fp = 1./Tp
 *         self.bandFactor = bandFactor
 *         self.N = N             # <<<<<<<<<<<<<<
 *         self.mwl = mwl
 *         fmax = self.bandFactor*self.fp
 */
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_N); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1139, __pyx_L1_error)
  __pyx_v_self->N = __pyx_t_5;

  /* "WaveTools.py":1140
 *         self.bandFactor = bandFactor
 *         self.N = N
 *         self.mwl = mwl             # <<<<<<<<<<<<<<
 *         fmax = self.bandFactor*self.fp
 *         fmin = self.fp/self.bandFactor
 */
  __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_v_mwl); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1140, __pyx_L1_error)
  __pyx_v_self->mwl = __pyx_t_9;

  /* "WaveTools.py":1141
 *         self.N = N
 *         self.mwl = mwl
 *         fmax = self.bandFactor*self.fp             # <<<<<<<<<<<<<<
 *         fmin = self.fp/self.bandFactor
 *         self.df = (fmax-fmin)/float(self.N-1)
 */
  __pyx_v_fmax = (__pyx_v_self->bandFactor * __pyx_v_self->fp);

  /* "WaveTools.py":1142
 *         self.mwl = mwl
 *         fmax = self.bandFactor*self.fp
 *         fmin = self.fp/self.bandFactor             # <<<<<<<<<<<<<<
 *         self.df = (fmax-fmin)/float(self.N-1)
 *         self.fi = np.linspace(fmin,fmax,self.N)
 */
  if (unlikely(__pyx_v_self->bandFactor == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 1142, __pyx_L1_error)
  }
  __pyx_v_fmin = (__pyx_v_self->fp / __pyx_v_self->bandFactor);

  /* "WaveTools.py":1143
 *         fmax = self.bandFactor*self.fp
 *         fmin = self.fp/self.bandFactor
 *         self.df = (fmax-fmin)/float(self.N-1)             # <<<<<<<<<<<<<<
 *         self.fi = np.linspace(fmin,fmax,self.N)
 *         self.omega = 2.*M_PI*self.fi
 */
  __pyx_t_9 = (__pyx_v_fmax - __pyx_v_fmin);
  if (unlikely(((double)(__pyx_v_self->N - 1)) == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 1143, __pyx_L1_error)
  }
  __pyx_v_self->df = (__pyx_t_9 / ((double)(__pyx_v_self->N - 1)));

  /* "WaveTools.py":1144
 *         fmin = self.fp/self.bandFactor
 *         self.df = (fmax-fmin)/float(self.N-1)
 *         self.fi = np.linspace(fmin,fmax,self.N)             # <<<<<<<<<<<<<<
 *         self.omega = 2.*M_PI*self.fi
 *         self.ki = dispersion(self.omega,self.depth,g=self.gAbs)
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_linspace); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyFloat_FromDouble(__pyx_v_fmin); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_fmax); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_self->N); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_t_6, __pyx_t_2, __pyx_t_7};
    __pyx_t_8 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1144, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_t_6, __pyx_t_2, __pyx_t_7};
    __pyx_t_8 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1144, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  {
    __pyx_t_10 = PyTuple_New(3+__pyx_t_5); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1144, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_5, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_5, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_10, 2+__pyx_t_5, __pyx_t_7);
    __pyx_t_6 = 0;
    __pyx_t_2 = 0;
    __pyx_t_7 = 0;
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_10, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1144, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1144, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_8);
  __Pyx_GOTREF(__pyx_v_self->fi);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->fi));
  __pyx_v_self->fi = ((PyArrayObject *)__pyx_t_8);
  __pyx_t_8 = 0;

  /* "WaveTools.py":1145
 *         self.df = (fmax-fmin)/float(self.N-1)
 *         self.fi = np.linspace(fmin,fmax,self.N)
 *         self.omega = 2.*M_PI*self.fi             # <<<<<<<<<<<<<<
 *         self.ki = dispersion(self.omega,self.depth,g=self.gAbs)
 *         if phi is None:
 */
  __pyx_t_8 = PyFloat_FromDouble((2. * M_PI)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_4 = PyNumber_Multiply(__pyx_t_8, ((PyObject *)__pyx_v_self->fi)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1145, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_4);
  __Pyx_GOTREF(__pyx_v_self->omega);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->omega));
  __pyx_v_self->omega = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "WaveTools.py":1146
 *         self.fi = np.linspace(fmin,fmax,self.N)
 *         self.omega = 2.*M_PI*self.fi
 *         self.ki = dispersion(self.omega,self.depth,g=self.gAbs)             # <<<<<<<<<<<<<<
 *         if phi is None:
 *             self.phi = 2.0*M_PI*np.random.random(self.fi.shape[0])
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_dispersion); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_8 = PyFloat_FromDouble(__pyx_v_self->depth); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->omega));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->omega));
  PyTuple_SET_ITEM(__pyx_t_10, 0, ((PyObject *)__pyx_v_self->omega));
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_8);
  __pyx_t_8 = 0;
  __pyx_t_8 = PyDict_New(); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_7 = PyFloat_FromDouble(__pyx_v_self->gAbs); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_g, __pyx_t_7) < 0) __PYX_ERR(0, 1146, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_10, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (!(likely(((__pyx_t_7) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_7, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1146, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_7);
  __Pyx_GOTREF(__pyx_v_self->ki);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->ki));
  __pyx_v_self->ki = ((PyArrayObject *)__pyx_t_7);
  __pyx_t_7 = 0;

  /* "WaveTools.py":1147
 *         self.omega = 2.*M_PI*self.fi
 *         self.ki = dispersion(self.omega,self.depth,g=self.gAbs)
 *         if phi is None:             # <<<<<<<<<<<<<<
 *             self.phi = 2.0*M_PI*np.random.random(self.fi.shape[0])
 *             logEvent('INFO Wavetools.py: No phase array is given. Assigning random phases. Outputing the phasing of the random waves')
 */
  __pyx_t_11 = (__pyx_v_phi == Py_None);
  __pyx_t_12 = (__pyx_t_11 != 0);
  if (__pyx_t_12) {

    /* "WaveTools.py":1148
 *         self.ki = dispersion(self.omega,self.depth,g=self.gAbs)
 *         if phi is None:
 *             self.phi = 2.0*M_PI*np.random.random(self.fi.shape[0])             # <<<<<<<<<<<<<<
 *             logEvent('INFO Wavetools.py: No phase array is given. Assigning random phases. Outputing the phasing of the random waves')
 *         else:
 */
    __pyx_t_7 = PyFloat_FromDouble((2.0 * M_PI)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_10 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_random); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_random); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_self->fi->dimensions[0])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_10);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_10, function);
      }
    }
    if (!__pyx_t_2) {
      __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1148, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_8);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_10)) {
        PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_4};
        __pyx_t_8 = __Pyx_PyFunction_FastCall(__pyx_t_10, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1148, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_10)) {
        PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_4};
        __pyx_t_8 = __Pyx_PyCFunction_FastCall(__pyx_t_10, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1148, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1148, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2); __pyx_t_2 = NULL;
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_6, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1148, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = PyNumber_Multiply(__pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GIVEREF(__pyx_t_10);
    __Pyx_GOTREF(__pyx_v_self->phi);
    __Pyx_DECREF(__pyx_v_self->phi);
    __pyx_v_self->phi = __pyx_t_10;
    __pyx_t_10 = 0;

    /* "WaveTools.py":1149
 *         if phi is None:
 *             self.phi = 2.0*M_PI*np.random.random(self.fi.shape[0])
 *             logEvent('INFO Wavetools.py: No phase array is given. Assigning random phases. Outputing the phasing of the random waves')             # <<<<<<<<<<<<<<
 *         else:
 *             try:
 */
    __pyx_t_10 = __Pyx_GetModuleGlobalName(__pyx_n_s_logEvent); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_tuple__59, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "WaveTools.py":1147
 *         self.omega = 2.*M_PI*self.fi
 *         self.ki = dispersion(self.omega,self.depth,g=self.gAbs)
 *         if phi is None:             # <<<<<<<<<<<<<<
 *             self.phi = 2.0*M_PI*np.random.random(self.fi.shape[0])
 *             logEvent('INFO Wavetools.py: No phase array is given. Assigning random phases. Outputing the phasing of the random waves')
 */
    goto __pyx_L3;
  }

  /* "WaveTools.py":1151
 *             logEvent('INFO Wavetools.py: No phase array is given. Assigning random phases. Outputing the phasing of the random waves')
 *         else:
 *             try:             # <<<<<<<<<<<<<<
 *                 self.phi = np.array(phi)
 *                 if self.phi.shape[0] != self.fi.shape[0]:
 */
  /*else*/ {
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_13, &__pyx_t_14, &__pyx_t_15);
      __Pyx_XGOTREF(__pyx_t_13);
      __Pyx_XGOTREF(__pyx_t_14);
      __Pyx_XGOTREF(__pyx_t_15);
      /*try:*/ {

        /* "WaveTools.py":1152
 *         else:
 *             try:
 *                 self.phi = np.array(phi)             # <<<<<<<<<<<<<<
 *                 if self.phi.shape[0] != self.fi.shape[0]:
 *                     logEvent('ERROR! Wavetools.py: Phase array must have N elements')
 */
        __pyx_t_10 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1152, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_array); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1152, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_10 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_7);
          if (likely(__pyx_t_10)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_7, function);
          }
        }
        if (!__pyx_t_10) {
          __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_phi); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1152, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_8);
        } else {
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_7)) {
            PyObject *__pyx_temp[2] = {__pyx_t_10, __pyx_v_phi};
            __pyx_t_8 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1152, __pyx_L4_error)
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_GOTREF(__pyx_t_8);
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
            PyObject *__pyx_temp[2] = {__pyx_t_10, __pyx_v_phi};
            __pyx_t_8 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1152, __pyx_L4_error)
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_GOTREF(__pyx_t_8);
          } else
          #endif
          {
            __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1152, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_6);
            __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_10); __pyx_t_10 = NULL;
            __Pyx_INCREF(__pyx_v_phi);
            __Pyx_GIVEREF(__pyx_v_phi);
            PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_phi);
            __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_6, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1152, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          }
        }
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GIVEREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_v_self->phi);
        __Pyx_DECREF(__pyx_v_self->phi);
        __pyx_v_self->phi = __pyx_t_8;
        __pyx_t_8 = 0;

        /* "WaveTools.py":1153
 *             try:
 *                 self.phi = np.array(phi)
 *                 if self.phi.shape[0] != self.fi.shape[0]:             # <<<<<<<<<<<<<<
 *                     logEvent('ERROR! Wavetools.py: Phase array must have N elements')
 *                     sys.exit(1)
 */
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->phi, __pyx_n_s_shape); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1153, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_7 = __Pyx_GetItemInt(__pyx_t_8, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1153, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_self->fi->dimensions[0])); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1153, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_6 = PyObject_RichCompare(__pyx_t_7, __pyx_t_8, Py_NE); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1153, __pyx_L4_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 1153, __pyx_L4_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (__pyx_t_12) {

          /* "WaveTools.py":1154
 *                 self.phi = np.array(phi)
 *                 if self.phi.shape[0] != self.fi.shape[0]:
 *                     logEvent('ERROR! Wavetools.py: Phase array must have N elements')             # <<<<<<<<<<<<<<
 *                     sys.exit(1)
 * 
 */
          __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_logEvent); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1154, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__60, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1154, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

          /* "WaveTools.py":1155
 *                 if self.phi.shape[0] != self.fi.shape[0]:
 *                     logEvent('ERROR! Wavetools.py: Phase array must have N elements')
 *                     sys.exit(1)             # <<<<<<<<<<<<<<
 * 
 *             except:
 */
          __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_sys); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1155, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_exit); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1155, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__61, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1155, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

          /* "WaveTools.py":1153
 *             try:
 *                 self.phi = np.array(phi)
 *                 if self.phi.shape[0] != self.fi.shape[0]:             # <<<<<<<<<<<<<<
 *                     logEvent('ERROR! Wavetools.py: Phase array must have N elements')
 *                     sys.exit(1)
 */
        }

        /* "WaveTools.py":1151
 *             logEvent('INFO Wavetools.py: No phase array is given. Assigning random phases. Outputing the phasing of the random waves')
 *         else:
 *             try:             # <<<<<<<<<<<<<<
 *                 self.phi = np.array(phi)
 *                 if self.phi.shape[0] != self.fi.shape[0]:
 */
      }
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
      goto __pyx_L11_try_end;
      __pyx_L4_error:;
      __Pyx_PyThreadState_assign
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "WaveTools.py":1157
 *                     sys.exit(1)
 * 
 *             except:             # <<<<<<<<<<<<<<
 *                 logEvent('ERROR! Wavetools.py: phi argument must be an array with N elements')
 *                 sys.exit(1)
 */
      /*except:*/ {
        __Pyx_AddTraceback("WaveTools.RandomWaves.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(0, 1157, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GOTREF(__pyx_t_7);

        /* "WaveTools.py":1158
 * 
 *             except:
 *                 logEvent('ERROR! Wavetools.py: phi argument must be an array with N elements')             # <<<<<<<<<<<<<<
 *                 sys.exit(1)
 * 
 */
        __pyx_t_10 = __Pyx_GetModuleGlobalName(__pyx_n_s_logEvent); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1158, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_tuple__62, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1158, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "WaveTools.py":1159
 *             except:
 *                 logEvent('ERROR! Wavetools.py: phi argument must be an array with N elements')
 *                 sys.exit(1)             # <<<<<<<<<<<<<<
 * 
 *         #ai = np.sqrt((Si_J[1:]+Si_J[:-1])*(fi[1:]-fi[:-1]))
 */
        __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_sys); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1159, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_exit); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1159, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_tuple__63, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1159, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        goto __pyx_L5_exception_handled;
      }
      __pyx_L6_except_error:;

      /* "WaveTools.py":1151
 *             logEvent('INFO Wavetools.py: No phase array is given. Assigning random phases. Outputing the phasing of the random waves')
 *         else:
 *             try:             # <<<<<<<<<<<<<<
 *                 self.phi = np.array(phi)
 *                 if self.phi.shape[0] != self.fi.shape[0]:
 */
      __Pyx_PyThreadState_assign
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_XGIVEREF(__pyx_t_14);
      __Pyx_XGIVEREF(__pyx_t_15);
      __Pyx_ExceptionReset(__pyx_t_13, __pyx_t_14, __pyx_t_15);
      goto __pyx_L1_error;
      __pyx_L5_exception_handled:;
      __Pyx_PyThreadState_assign
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_XGIVEREF(__pyx_t_14);
      __Pyx_XGIVEREF(__pyx_t_15);
      __Pyx_ExceptionReset(__pyx_t_13, __pyx_t_14, __pyx_t_15);
      __pyx_L11_try_end:;
    }
  }
  __pyx_L3:;

  /* "WaveTools.py":1162
 * 
 *         #ai = np.sqrt((Si_J[1:]+Si_J[:-1])*(fi[1:]-fi[:-1]))
 *         fim = reduceToIntervals(self.fi,self.df)             # <<<<<<<<<<<<<<
 *         self.fim = fim
 *         if (spectral_params is None):
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_reduceToIntervals); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = PyFloat_FromDouble(__pyx_v_self->df); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, ((PyObject *)__pyx_v_self->fi), __pyx_t_8};
    __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1162, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, ((PyObject *)__pyx_v_self->fi), __pyx_t_8};
    __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1162, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  {
    __pyx_t_10 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_self->fi));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self->fi));
    PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_5, ((PyObject *)__pyx_v_self->fi));
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_5, __pyx_t_8);
    __pyx_t_8 = 0;
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_10, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_fim = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "WaveTools.py":1163
 *         #ai = np.sqrt((Si_J[1:]+Si_J[:-1])*(fi[1:]-fi[:-1]))
 *         fim = reduceToIntervals(self.fi,self.df)
 *         self.fim = fim             # <<<<<<<<<<<<<<
 *         if (spectral_params is None):
 *             self.Si_Jm = spec_fun(fim,self.fp,self.Hs)
 */
  if (!(likely(((__pyx_v_fim) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_fim, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1163, __pyx_L1_error)
  __pyx_t_7 = __pyx_v_fim;
  __Pyx_INCREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  __Pyx_GOTREF(__pyx_v_self->fim);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->fim));
  __pyx_v_self->fim = ((PyArrayObject *)__pyx_t_7);
  __pyx_t_7 = 0;

  /* "WaveTools.py":1164
 *         fim = reduceToIntervals(self.fi,self.df)
 *         self.fim = fim
 *         if (spectral_params is None):             # <<<<<<<<<<<<<<
 *             self.Si_Jm = spec_fun(fim,self.fp,self.Hs)
 *         else:
 */
  __pyx_t_12 = (__pyx_v_spectral_params == Py_None);
  __pyx_t_11 = (__pyx_t_12 != 0);
  if (__pyx_t_11) {

    /* "WaveTools.py":1165
 *         self.fim = fim
 *         if (spectral_params is None):
 *             self.Si_Jm = spec_fun(fim,self.fp,self.Hs)             # <<<<<<<<<<<<<<
 *         else:
 *             try:
 */
    __pyx_t_6 = PyFloat_FromDouble(__pyx_v_self->fp); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1165, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_10 = PyFloat_FromDouble(__pyx_v_self->Hs); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1165, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_INCREF(__pyx_v_spec_fun);
    __pyx_t_8 = __pyx_v_spec_fun; __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
        __pyx_t_5 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_8)) {
      PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_v_fim, __pyx_t_6, __pyx_t_10};
      __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1165, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
      PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_v_fim, __pyx_t_6, __pyx_t_10};
      __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1165, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(3+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1165, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_4) {
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4); __pyx_t_4 = NULL;
      }
      __Pyx_INCREF(__pyx_v_fim);
      __Pyx_GIVEREF(__pyx_v_fim);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_5, __pyx_v_fim);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_5, __pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_10);
      PyTuple_SET_ITEM(__pyx_t_2, 2+__pyx_t_5, __pyx_t_10);
      __pyx_t_6 = 0;
      __pyx_t_10 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_2, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1165, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (!(likely(((__pyx_t_7) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_7, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1165, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_7);
    __Pyx_GOTREF(__pyx_v_self->Si_Jm);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->Si_Jm));
    __pyx_v_self->Si_Jm = ((PyArrayObject *)__pyx_t_7);
    __pyx_t_7 = 0;

    /* "WaveTools.py":1164
 *         fim = reduceToIntervals(self.fi,self.df)
 *         self.fim = fim
 *         if (spectral_params is None):             # <<<<<<<<<<<<<<
 *             self.Si_Jm = spec_fun(fim,self.fp,self.Hs)
 *         else:
 */
    goto __pyx_L15;
  }

  /* "WaveTools.py":1167
 *             self.Si_Jm = spec_fun(fim,self.fp,self.Hs)
 *         else:
 *             try:             # <<<<<<<<<<<<<<
 *                 self.Si_Jm = spec_fun(fim,self.fp,self.Hs,**spectral_params)
 *             except:
 */
  /*else*/ {
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_15, &__pyx_t_14, &__pyx_t_13);
      __Pyx_XGOTREF(__pyx_t_15);
      __Pyx_XGOTREF(__pyx_t_14);
      __Pyx_XGOTREF(__pyx_t_13);
      /*try:*/ {

        /* "WaveTools.py":1168
 *         else:
 *             try:
 *                 self.Si_Jm = spec_fun(fim,self.fp,self.Hs,**spectral_params)             # <<<<<<<<<<<<<<
 *             except:
 *                 logEvent('ERROR! Wavetools.py: Additional spectral parameters are not valid for the %s spectrum' %spectName)
 */
        __pyx_t_7 = PyFloat_FromDouble(__pyx_v_self->fp); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1168, __pyx_L16_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = PyFloat_FromDouble(__pyx_v_self->Hs); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1168, __pyx_L16_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1168, __pyx_L16_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_INCREF(__pyx_v_fim);
        __Pyx_GIVEREF(__pyx_v_fim);
        PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_fim);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_8);
        __pyx_t_7 = 0;
        __pyx_t_8 = 0;
        if (unlikely(__pyx_v_spectral_params == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "argument after ** must be a mapping, not NoneType");
          __PYX_ERR(0, 1168, __pyx_L16_error)
        }
        if (likely(PyDict_CheckExact(__pyx_v_spectral_params))) {
          __pyx_t_8 = PyDict_Copy(__pyx_v_spectral_params); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1168, __pyx_L16_error)
          __Pyx_GOTREF(__pyx_t_8);
        } else {
          __pyx_t_8 = PyObject_CallFunctionObjArgs((PyObject*)&PyDict_Type, __pyx_v_spectral_params, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1168, __pyx_L16_error)
          __Pyx_GOTREF(__pyx_t_8);
        }
        __pyx_t_7 = __Pyx_PyObject_Call(__pyx_v_spec_fun, __pyx_t_2, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1168, __pyx_L16_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (!(likely(((__pyx_t_7) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_7, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1168, __pyx_L16_error)
        __Pyx_GIVEREF(__pyx_t_7);
        __Pyx_GOTREF(__pyx_v_self->Si_Jm);
        __Pyx_DECREF(((PyObject *)__pyx_v_self->Si_Jm));
        __pyx_v_self->Si_Jm = ((PyArrayObject *)__pyx_t_7);
        __pyx_t_7 = 0;

        /* "WaveTools.py":1167
 *             self.Si_Jm = spec_fun(fim,self.fp,self.Hs)
 *         else:
 *             try:             # <<<<<<<<<<<<<<
 *                 self.Si_Jm = spec_fun(fim,self.fp,self.Hs,**spectral_params)
 *             except:
 */
      }
      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      goto __pyx_L23_try_end;
      __pyx_L16_error:;
      __Pyx_PyThreadState_assign
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "WaveTools.py":1169
 *             try:
 *                 self.Si_Jm = spec_fun(fim,self.fp,self.Hs,**spectral_params)
 *             except:             # <<<<<<<<<<<<<<
 *                 logEvent('ERROR! Wavetools.py: Additional spectral parameters are not valid for the %s spectrum' %spectName)
 *                 sys.exit(1)
 */
      /*except:*/ {
        __Pyx_AddTraceback("WaveTools.RandomWaves.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_8, &__pyx_t_2) < 0) __PYX_ERR(0, 1169, __pyx_L18_except_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_2);

        /* "WaveTools.py":1170
 *                 self.Si_Jm = spec_fun(fim,self.fp,self.Hs,**spectral_params)
 *             except:
 *                 logEvent('ERROR! Wavetools.py: Additional spectral parameters are not valid for the %s spectrum' %spectName)             # <<<<<<<<<<<<<<
 *                 sys.exit(1)
 * 
 */
        __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_logEvent); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1170, __pyx_L18_except_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_ERROR_Wavetools_py_Additional_sp, __pyx_v_spectName); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1170, __pyx_L18_except_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_3 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_3)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_3);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
          }
        }
        if (!__pyx_t_3) {
          __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_4); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1170, __pyx_L18_except_error)
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_10);
        } else {
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_6)) {
            PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_4};
            __pyx_t_10 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1170, __pyx_L18_except_error)
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
            PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_4};
            __pyx_t_10 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1170, __pyx_L18_except_error)
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          } else
          #endif
          {
            __pyx_t_16 = PyTuple_New(1+1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1170, __pyx_L18_except_error)
            __Pyx_GOTREF(__pyx_t_16);
            __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_3); __pyx_t_3 = NULL;
            __Pyx_GIVEREF(__pyx_t_4);
            PyTuple_SET_ITEM(__pyx_t_16, 0+1, __pyx_t_4);
            __pyx_t_4 = 0;
            __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_16, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1170, __pyx_L18_except_error)
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          }
        }
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

        /* "WaveTools.py":1171
 *             except:
 *                 logEvent('ERROR! Wavetools.py: Additional spectral parameters are not valid for the %s spectrum' %spectName)
 *                 sys.exit(1)             # <<<<<<<<<<<<<<
 * 
 *         self.tanhF = np.zeros(N,"d")
 */
        __pyx_t_10 = __Pyx_GetModuleGlobalName(__pyx_n_s_sys); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1171, __pyx_L18_except_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_exit); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1171, __pyx_L18_except_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__64, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1171, __pyx_L18_except_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        goto __pyx_L17_exception_handled;
      }
      __pyx_L18_except_error:;

      /* "WaveTools.py":1167
 *             self.Si_Jm = spec_fun(fim,self.fp,self.Hs)
 *         else:
 *             try:             # <<<<<<<<<<<<<<
 *                 self.Si_Jm = spec_fun(fim,self.fp,self.Hs,**spectral_params)
 *             except:
 */
      __Pyx_PyThreadState_assign
      __Pyx_XGIVEREF(__pyx_t_15);
      __Pyx_XGIVEREF(__pyx_t_14);
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_ExceptionReset(__pyx_t_15, __pyx_t_14, __pyx_t_13);
      goto __pyx_L1_error;
      __pyx_L17_exception_handled:;
      __Pyx_PyThreadState_assign
      __Pyx_XGIVEREF(__pyx_t_15);
      __Pyx_XGIVEREF(__pyx_t_14);
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_ExceptionReset(__pyx_t_15, __pyx_t_14, __pyx_t_13);
      __pyx_L23_try_end:;
    }
  }
  __pyx_L15:;

  /* "WaveTools.py":1173
 *                 sys.exit(1)
 * 
 *         self.tanhF = np.zeros(N,"d")             # <<<<<<<<<<<<<<
 *         for ii in range(self.N):
 *             self.tanhF[ii] = float(np.tanh(self.ki[ii]*self.depth) )
 */
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_zeros); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_7)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_v_N, __pyx_n_s_d};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1173, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_v_N, __pyx_n_s_d};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1173, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  {
    __pyx_t_10 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1173, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    if (__pyx_t_8) {
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_8); __pyx_t_8 = NULL;
    }
    __Pyx_INCREF(__pyx_v_N);
    __Pyx_GIVEREF(__pyx_v_N);
    PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_5, __pyx_v_N);
    __Pyx_INCREF(__pyx_n_s_d);
    __Pyx_GIVEREF(__pyx_n_s_d);
    PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_5, __pyx_n_s_d);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_10, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1173, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1173, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->tanhF);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->tanhF));
  __pyx_v_self->tanhF = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "WaveTools.py":1174
 * 
 *         self.tanhF = np.zeros(N,"d")
 *         for ii in range(self.N):             # <<<<<<<<<<<<<<
 *             self.tanhF[ii] = float(np.tanh(self.ki[ii]*self.depth) )
 * 
 */
  __pyx_t_5 = __pyx_v_self->N;
  for (__pyx_t_17 = 0; __pyx_t_17 < __pyx_t_5; __pyx_t_17+=1) {
    __pyx_v_ii = __pyx_t_17;

    /* "WaveTools.py":1175
 *         self.tanhF = np.zeros(N,"d")
 *         for ii in range(self.N):
 *             self.tanhF[ii] = float(np.tanh(self.ki[ii]*self.depth) )             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1175, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_tanh); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1175, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->ki), __pyx_v_ii, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1175, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = PyFloat_FromDouble(__pyx_v_self->depth); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1175, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_6 = PyNumber_Multiply(__pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1175, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_10))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_10);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_10, function);
      }
    }
    if (!__pyx_t_8) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1175, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_10)) {
        PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_6};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_10, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1175, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_10)) {
        PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_6};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_10, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1175, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1175, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8); __pyx_t_8 = NULL;
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1175, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = __Pyx_PyNumber_Float(__pyx_t_2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1175, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_self->tanhF), __pyx_v_ii, __pyx_t_10, long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0)) __PYX_ERR(0, 1175, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  }

  /* "WaveTools.py":1178
 * 
 * 
 *         self.ai = np.sqrt(2.*returnRectangles(self.Si_Jm,fim))             # <<<<<<<<<<<<<<
 *         self.kDir = np.zeros((len(self.ki),3),)
 *         for ii in range(3):
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_sqrt); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_returnRectangles); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, ((PyObject *)__pyx_v_self->Si_Jm), __pyx_v_fim};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1178, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, ((PyObject *)__pyx_v_self->Si_Jm), __pyx_v_fim};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1178, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  {
    __pyx_t_16 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    if (__pyx_t_8) {
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_8); __pyx_t_8 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_self->Si_Jm));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self->Si_Jm));
    PyTuple_SET_ITEM(__pyx_t_16, 0+__pyx_t_5, ((PyObject *)__pyx_v_self->Si_Jm));
    __Pyx_INCREF(__pyx_v_fim);
    __Pyx_GIVEREF(__pyx_v_fim);
    PyTuple_SET_ITEM(__pyx_t_16, 1+__pyx_t_5, __pyx_v_fim);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_16, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyNumber_Multiply(__pyx_float_2_, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1178, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_10);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_6};
      __pyx_t_10 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1178, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_6};
      __pyx_t_10 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1178, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    {
      __pyx_t_16 = PyTuple_New(1+1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1178, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_2); __pyx_t_2 = NULL;
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_16, 0+1, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_16, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1178, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (!(likely(((__pyx_t_10) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_10, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1178, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_10);
  __Pyx_GOTREF(__pyx_v_self->ai);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->ai));
  __pyx_v_self->ai = ((PyArrayObject *)__pyx_t_10);
  __pyx_t_10 = 0;

  /* "WaveTools.py":1179
 * 
 *         self.ai = np.sqrt(2.*returnRectangles(self.Si_Jm,fim))
 *         self.kDir = np.zeros((len(self.ki),3),)             # <<<<<<<<<<<<<<
 *         for ii in range(3):
 *              self.kDir[:,ii] = self.ki[:] * self.waveDir[ii]
 */
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_zeros); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = ((PyObject *)__pyx_v_self->ki);
  __Pyx_INCREF(__pyx_t_7);
  __pyx_t_18 = PyObject_Length(__pyx_t_7); if (unlikely(__pyx_t_18 == -1)) __PYX_ERR(0, 1179, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyInt_FromSsize_t(__pyx_t_18); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
  __Pyx_INCREF(__pyx_int_3);
  __Pyx_GIVEREF(__pyx_int_3);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_int_3);
  __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_16))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_16);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_16, function);
    }
  }
  if (!__pyx_t_7) {
    __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_t_16, __pyx_t_6); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1179, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_10);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_16)) {
      PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_6};
      __pyx_t_10 = __Pyx_PyFunction_FastCall(__pyx_t_16, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1179, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_16)) {
      PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_6};
      __pyx_t_10 = __Pyx_PyCFunction_FastCall(__pyx_t_16, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1179, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1179, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_7); __pyx_t_7 = NULL;
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_16, __pyx_t_2, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1179, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  if (!(likely(((__pyx_t_10) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_10, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1179, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_10);
  __Pyx_GOTREF(__pyx_v_self->kDir);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->kDir));
  __pyx_v_self->kDir = ((PyArrayObject *)__pyx_t_10);
  __pyx_t_10 = 0;

  /* "WaveTools.py":1180
 *         self.ai = np.sqrt(2.*returnRectangles(self.Si_Jm,fim))
 *         self.kDir = np.zeros((len(self.ki),3),)
 *         for ii in range(3):             # <<<<<<<<<<<<<<
 *              self.kDir[:,ii] = self.ki[:] * self.waveDir[ii]
 *         if(self.N > 10000):
 */
  for (__pyx_t_17 = 0; __pyx_t_17 < 3; __pyx_t_17+=1) {
    __pyx_v_ii = __pyx_t_17;

    /* "WaveTools.py":1181
 *         self.kDir = np.zeros((len(self.ki),3),)
 *         for ii in range(3):
 *              self.kDir[:,ii] = self.ki[:] * self.waveDir[ii]             # <<<<<<<<<<<<<<
 *         if(self.N > 10000):
 *             logEvent("ERROR! Wavetools.py: Maximum number of frequencies for Random Waves is 10000 ",level=0)
 */
    __pyx_t_10 = __Pyx_PyObject_GetSlice(((PyObject *)__pyx_v_self->ki), 0, 0, NULL, NULL, &__pyx_slice__65, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1181, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_16 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->waveDir), __pyx_v_ii, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1181, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_2 = PyNumber_Multiply(__pyx_t_10, __pyx_t_16); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1181, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __pyx_t_16 = __Pyx_PyInt_From_long(__pyx_v_ii); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1181, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1181, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_INCREF(__pyx_slice__66);
    __Pyx_GIVEREF(__pyx_slice__66);
    PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_slice__66);
    __Pyx_GIVEREF(__pyx_t_16);
    PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_16);
    __pyx_t_16 = 0;
    if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_self->kDir), __pyx_t_10, __pyx_t_2) < 0)) __PYX_ERR(0, 1181, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }

  /* "WaveTools.py":1182
 *         for ii in range(3):
 *              self.kDir[:,ii] = self.ki[:] * self.waveDir[ii]
 *         if(self.N > 10000):             # <<<<<<<<<<<<<<
 *             logEvent("ERROR! Wavetools.py: Maximum number of frequencies for Random Waves is 10000 ",level=0)
 * 
 */
  __pyx_t_11 = ((__pyx_v_self->N > 0x2710) != 0);
  if (__pyx_t_11) {

    /* "WaveTools.py":1183
 *              self.kDir[:,ii] = self.ki[:] * self.waveDir[ii]
 *         if(self.N > 10000):
 *             logEvent("ERROR! Wavetools.py: Maximum number of frequencies for Random Waves is 10000 ",level=0)             # <<<<<<<<<<<<<<
 * 
 *     #C++ declarations
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_logEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1183, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_10 = PyDict_New(); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1183, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    if (PyDict_SetItem(__pyx_t_10, __pyx_n_s_level, __pyx_int_0) < 0) __PYX_ERR(0, 1183, __pyx_L1_error)
    __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__67, __pyx_t_10); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1183, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

    /* "WaveTools.py":1182
 *         for ii in range(3):
 *              self.kDir[:,ii] = self.ki[:] * self.waveDir[ii]
 *         if(self.N > 10000):             # <<<<<<<<<<<<<<
 *             logEvent("ERROR! Wavetools.py: Maximum number of frequencies for Random Waves is 10000 ",level=0)
 * 
 */
  }

  /* "WaveTools.py":1186
 * 
 *     #C++ declarations
 *         for ij in range(3):             # <<<<<<<<<<<<<<
 *             self.waveDir_c[ij] = self.waveDir[ij]
 *             self.vDir_c[ij] = self.vDir[ij]
 */
  __pyx_t_16 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_tuple__68, NULL); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  if (likely(PyList_CheckExact(__pyx_t_16)) || PyTuple_CheckExact(__pyx_t_16)) {
    __pyx_t_10 = __pyx_t_16; __Pyx_INCREF(__pyx_t_10); __pyx_t_18 = 0;
    __pyx_t_19 = NULL;
  } else {
    __pyx_t_18 = -1; __pyx_t_10 = PyObject_GetIter(__pyx_t_16); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1186, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_19 = Py_TYPE(__pyx_t_10)->tp_iternext; if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 1186, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  for (;;) {
    if (likely(!__pyx_t_19)) {
      if (likely(PyList_CheckExact(__pyx_t_10))) {
        if (__pyx_t_18 >= PyList_GET_SIZE(__pyx_t_10)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_16 = PyList_GET_ITEM(__pyx_t_10, __pyx_t_18); __Pyx_INCREF(__pyx_t_16); __pyx_t_18++; if (unlikely(0 < 0)) __PYX_ERR(0, 1186, __pyx_L1_error)
        #else
        __pyx_t_16 = PySequence_ITEM(__pyx_t_10, __pyx_t_18); __pyx_t_18++; if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1186, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        #endif
      } else {
        if (__pyx_t_18 >= PyTuple_GET_SIZE(__pyx_t_10)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_16 = PyTuple_GET_ITEM(__pyx_t_10, __pyx_t_18); __Pyx_INCREF(__pyx_t_16); __pyx_t_18++; if (unlikely(0 < 0)) __PYX_ERR(0, 1186, __pyx_L1_error)
        #else
        __pyx_t_16 = PySequence_ITEM(__pyx_t_10, __pyx_t_18); __pyx_t_18++; if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1186, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        #endif
      }
    } else {
      __pyx_t_16 = __pyx_t_19(__pyx_t_10);
      if (unlikely(!__pyx_t_16)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1186, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_16);
    }
    __Pyx_XDECREF_SET(__pyx_v_ij, __pyx_t_16);
    __pyx_t_16 = 0;

    /* "WaveTools.py":1187
 *     #C++ declarations
 *         for ij in range(3):
 *             self.waveDir_c[ij] = self.waveDir[ij]             # <<<<<<<<<<<<<<
 *             self.vDir_c[ij] = self.vDir[ij]
 *         self.waveDir_ =  self.waveDir_c
 */
    __pyx_t_16 = PyObject_GetItem(((PyObject *)__pyx_v_self->waveDir), __pyx_v_ij); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1187, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_16); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1187, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __pyx_t_20 = __Pyx_PyIndex_AsSsize_t(__pyx_v_ij); if (unlikely((__pyx_t_20 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1187, __pyx_L1_error)
    (__pyx_v_self->waveDir_c[__pyx_t_20]) = __pyx_t_9;

    /* "WaveTools.py":1188
 *         for ij in range(3):
 *             self.waveDir_c[ij] = self.waveDir[ij]
 *             self.vDir_c[ij] = self.vDir[ij]             # <<<<<<<<<<<<<<
 *         self.waveDir_ =  self.waveDir_c
 *         self.vDir_ =  self.vDir_c
 */
    __pyx_t_16 = PyObject_GetItem(((PyObject *)__pyx_v_self->vDir), __pyx_v_ij); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1188, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_16); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1188, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __pyx_t_20 = __Pyx_PyIndex_AsSsize_t(__pyx_v_ij); if (unlikely((__pyx_t_20 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1188, __pyx_L1_error)
    (__pyx_v_self->vDir_c[__pyx_t_20]) = __pyx_t_9;

    /* "WaveTools.py":1186
 * 
 *     #C++ declarations
 *         for ij in range(3):             # <<<<<<<<<<<<<<
 *             self.waveDir_c[ij] = self.waveDir[ij]
 *             self.vDir_c[ij] = self.vDir[ij]
 */
  }
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "WaveTools.py":1189
 *             self.waveDir_c[ij] = self.waveDir[ij]
 *             self.vDir_c[ij] = self.vDir[ij]
 *         self.waveDir_ =  self.waveDir_c             # <<<<<<<<<<<<<<
 *         self.vDir_ =  self.vDir_c
 * 
 */
  __pyx_t_21 = __pyx_v_self->waveDir_c;
  __pyx_v_self->waveDir_ = __pyx_t_21;

  /* "WaveTools.py":1190
 *             self.vDir_c[ij] = self.vDir[ij]
 *         self.waveDir_ =  self.waveDir_c
 *         self.vDir_ =  self.vDir_c             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_21 = __pyx_v_self->vDir_c;
  __pyx_v_self->vDir_ = __pyx_t_21;

  /* "WaveTools.py":1193
 * 
 * 
 *         for ij in range(self.N):             # <<<<<<<<<<<<<<
 *             for kk in range(3):
 *                 self.kDir_c[3*ij+kk] = self.kDir[ij,kk]
 */
  __pyx_t_10 = __Pyx_PyInt_From_int(__pyx_v_self->N); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_16 = PyTuple_New(1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_GIVEREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_10);
  __pyx_t_10 = 0;
  __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_16, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  if (likely(PyList_CheckExact(__pyx_t_10)) || PyTuple_CheckExact(__pyx_t_10)) {
    __pyx_t_16 = __pyx_t_10; __Pyx_INCREF(__pyx_t_16); __pyx_t_18 = 0;
    __pyx_t_19 = NULL;
  } else {
    __pyx_t_18 = -1; __pyx_t_16 = PyObject_GetIter(__pyx_t_10); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_19 = Py_TYPE(__pyx_t_16)->tp_iternext; if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 1193, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  for (;;) {
    if (likely(!__pyx_t_19)) {
      if (likely(PyList_CheckExact(__pyx_t_16))) {
        if (__pyx_t_18 >= PyList_GET_SIZE(__pyx_t_16)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_10 = PyList_GET_ITEM(__pyx_t_16, __pyx_t_18); __Pyx_INCREF(__pyx_t_10); __pyx_t_18++; if (unlikely(0 < 0)) __PYX_ERR(0, 1193, __pyx_L1_error)
        #else
        __pyx_t_10 = PySequence_ITEM(__pyx_t_16, __pyx_t_18); __pyx_t_18++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1193, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        #endif
      } else {
        if (__pyx_t_18 >= PyTuple_GET_SIZE(__pyx_t_16)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_10 = PyTuple_GET_ITEM(__pyx_t_16, __pyx_t_18); __Pyx_INCREF(__pyx_t_10); __pyx_t_18++; if (unlikely(0 < 0)) __PYX_ERR(0, 1193, __pyx_L1_error)
        #else
        __pyx_t_10 = PySequence_ITEM(__pyx_t_16, __pyx_t_18); __pyx_t_18++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1193, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        #endif
      }
    } else {
      __pyx_t_10 = __pyx_t_19(__pyx_t_16);
      if (unlikely(!__pyx_t_10)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1193, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_10);
    }
    __Pyx_XDECREF_SET(__pyx_v_ij, __pyx_t_10);
    __pyx_t_10 = 0;

    /* "WaveTools.py":1194
 * 
 *         for ij in range(self.N):
 *             for kk in range(3):             # <<<<<<<<<<<<<<
 *                 self.kDir_c[3*ij+kk] = self.kDir[ij,kk]
 *             self.omega_c[ij] = self.omega[ij]
 */
    __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_tuple__69, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1194, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    if (likely(PyList_CheckExact(__pyx_t_10)) || PyTuple_CheckExact(__pyx_t_10)) {
      __pyx_t_2 = __pyx_t_10; __Pyx_INCREF(__pyx_t_2); __pyx_t_20 = 0;
      __pyx_t_22 = NULL;
    } else {
      __pyx_t_20 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1194, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_22 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 1194, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    for (;;) {
      if (likely(!__pyx_t_22)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_20 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_10 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_20); __Pyx_INCREF(__pyx_t_10); __pyx_t_20++; if (unlikely(0 < 0)) __PYX_ERR(0, 1194, __pyx_L1_error)
          #else
          __pyx_t_10 = PySequence_ITEM(__pyx_t_2, __pyx_t_20); __pyx_t_20++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1194, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          #endif
        } else {
          if (__pyx_t_20 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_10 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_20); __Pyx_INCREF(__pyx_t_10); __pyx_t_20++; if (unlikely(0 < 0)) __PYX_ERR(0, 1194, __pyx_L1_error)
          #else
          __pyx_t_10 = PySequence_ITEM(__pyx_t_2, __pyx_t_20); __pyx_t_20++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1194, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          #endif
        }
      } else {
        __pyx_t_10 = __pyx_t_22(__pyx_t_2);
        if (unlikely(!__pyx_t_10)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1194, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_10);
      }
      __Pyx_XDECREF_SET(__pyx_v_kk, __pyx_t_10);
      __pyx_t_10 = 0;

      /* "WaveTools.py":1195
 *         for ij in range(self.N):
 *             for kk in range(3):
 *                 self.kDir_c[3*ij+kk] = self.kDir[ij,kk]             # <<<<<<<<<<<<<<
 *             self.omega_c[ij] = self.omega[ij]
 *             self.ki_c[ij]  =self.ki[ij]
 */
      __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1195, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_INCREF(__pyx_v_ij);
      __Pyx_GIVEREF(__pyx_v_ij);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_v_ij);
      __Pyx_INCREF(__pyx_v_kk);
      __Pyx_GIVEREF(__pyx_v_kk);
      PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_v_kk);
      __pyx_t_6 = PyObject_GetItem(((PyObject *)__pyx_v_self->kDir), __pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1195, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1195, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyNumber_Multiply(__pyx_int_3, __pyx_v_ij); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1195, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_10 = PyNumber_Add(__pyx_t_6, __pyx_v_kk); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1195, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_23 = __Pyx_PyIndex_AsSsize_t(__pyx_t_10); if (unlikely((__pyx_t_23 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1195, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      (__pyx_v_self->kDir_c[__pyx_t_23]) = __pyx_t_9;

      /* "WaveTools.py":1194
 * 
 *         for ij in range(self.N):
 *             for kk in range(3):             # <<<<<<<<<<<<<<
 *                 self.kDir_c[3*ij+kk] = self.kDir[ij,kk]
 *             self.omega_c[ij] = self.omega[ij]
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "WaveTools.py":1196
 *             for kk in range(3):
 *                 self.kDir_c[3*ij+kk] = self.kDir[ij,kk]
 *             self.omega_c[ij] = self.omega[ij]             # <<<<<<<<<<<<<<
 *             self.ki_c[ij]  =self.ki[ij]
 *             self.tanh_c[ij] = self.tanhF[ij]
 */
    __pyx_t_2 = PyObject_GetItem(((PyObject *)__pyx_v_self->omega), __pyx_v_ij); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1196, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1196, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_20 = __Pyx_PyIndex_AsSsize_t(__pyx_v_ij); if (unlikely((__pyx_t_20 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1196, __pyx_L1_error)
    (__pyx_v_self->omega_c[__pyx_t_20]) = __pyx_t_9;

    /* "WaveTools.py":1197
 *                 self.kDir_c[3*ij+kk] = self.kDir[ij,kk]
 *             self.omega_c[ij] = self.omega[ij]
 *             self.ki_c[ij]  =self.ki[ij]             # <<<<<<<<<<<<<<
 *             self.tanh_c[ij] = self.tanhF[ij]
 *             self.ai_c[ij] = self.ai[ij]
 */
    __pyx_t_2 = PyObject_GetItem(((PyObject *)__pyx_v_self->ki), __pyx_v_ij); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1197, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_20 = __Pyx_PyIndex_AsSsize_t(__pyx_v_ij); if (unlikely((__pyx_t_20 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1197, __pyx_L1_error)
    (__pyx_v_self->ki_c[__pyx_t_20]) = __pyx_t_9;

    /* "WaveTools.py":1198
 *             self.omega_c[ij] = self.omega[ij]
 *             self.ki_c[ij]  =self.ki[ij]
 *             self.tanh_c[ij] = self.tanhF[ij]             # <<<<<<<<<<<<<<
 *             self.ai_c[ij] = self.ai[ij]
 *             self.phi_c[ij] = self.phi[ij]
 */
    __pyx_t_2 = PyObject_GetItem(((PyObject *)__pyx_v_self->tanhF), __pyx_v_ij); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1198, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1198, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_20 = __Pyx_PyIndex_AsSsize_t(__pyx_v_ij); if (unlikely((__pyx_t_20 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1198, __pyx_L1_error)
    (__pyx_v_self->tanh_c[__pyx_t_20]) = __pyx_t_9;

    /* "WaveTools.py":1199
 *             self.ki_c[ij]  =self.ki[ij]
 *             self.tanh_c[ij] = self.tanhF[ij]
 *             self.ai_c[ij] = self.ai[ij]             # <<<<<<<<<<<<<<
 *             self.phi_c[ij] = self.phi[ij]
 * 
 */
    __pyx_t_2 = PyObject_GetItem(((PyObject *)__pyx_v_self->ai), __pyx_v_ij); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1199, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1199, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_20 = __Pyx_PyIndex_AsSsize_t(__pyx_v_ij); if (unlikely((__pyx_t_20 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1199, __pyx_L1_error)
    (__pyx_v_self->ai_c[__pyx_t_20]) = __pyx_t_9;

    /* "WaveTools.py":1200
 *             self.tanh_c[ij] = self.tanhF[ij]
 *             self.ai_c[ij] = self.ai[ij]
 *             self.phi_c[ij] = self.phi[ij]             # <<<<<<<<<<<<<<
 * 
 *         self.kDir_ = self.kDir_c
 */
    __pyx_t_2 = PyObject_GetItem(__pyx_v_self->phi, __pyx_v_ij); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1200, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1200, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_20 = __Pyx_PyIndex_AsSsize_t(__pyx_v_ij); if (unlikely((__pyx_t_20 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1200, __pyx_L1_error)
    (__pyx_v_self->phi_c[__pyx_t_20]) = __pyx_t_9;

    /* "WaveTools.py":1193
 * 
 * 
 *         for ij in range(self.N):             # <<<<<<<<<<<<<<
 *             for kk in range(3):
 *                 self.kDir_c[3*ij+kk] = self.kDir[ij,kk]
 */
  }
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

  /* "WaveTools.py":1202
 *             self.phi_c[ij] = self.phi[ij]
 * 
 *         self.kDir_ = self.kDir_c             # <<<<<<<<<<<<<<
 *         self.omega_ = self.omega_c
 *         self.ki_  =self.ki_c
 */
  __pyx_t_21 = __pyx_v_self->kDir_c;
  __pyx_v_self->kDir_ = __pyx_t_21;

  /* "WaveTools.py":1203
 * 
 *         self.kDir_ = self.kDir_c
 *         self.omega_ = self.omega_c             # <<<<<<<<<<<<<<
 *         self.ki_  =self.ki_c
 *         self.ai_ = self.ai_c
 */
  __pyx_t_21 = __pyx_v_self->omega_c;
  __pyx_v_self->omega_ = __pyx_t_21;

  /* "WaveTools.py":1204
 *         self.kDir_ = self.kDir_c
 *         self.omega_ = self.omega_c
 *         self.ki_  =self.ki_c             # <<<<<<<<<<<<<<
 *         self.ai_ = self.ai_c
 *         self.tanh_ = self.tanh_c
 */
  __pyx_t_21 = __pyx_v_self->ki_c;
  __pyx_v_self->ki_ = __pyx_t_21;

  /* "WaveTools.py":1205
 *         self.omega_ = self.omega_c
 *         self.ki_  =self.ki_c
 *         self.ai_ = self.ai_c             # <<<<<<<<<<<<<<
 *         self.tanh_ = self.tanh_c
 *         self.phi_ = self.phi_c
 */
  __pyx_t_21 = __pyx_v_self->ai_c;
  __pyx_v_self->ai_ = __pyx_t_21;

  /* "WaveTools.py":1206
 *         self.ki_  =self.ki_c
 *         self.ai_ = self.ai_c
 *         self.tanh_ = self.tanh_c             # <<<<<<<<<<<<<<
 *         self.phi_ = self.phi_c
 * 
 */
  __pyx_t_21 = __pyx_v_self->tanh_c;
  __pyx_v_self->tanh_ = __pyx_t_21;

  /* "WaveTools.py":1207
 *         self.ai_ = self.ai_c
 *         self.tanh_ = self.tanh_c
 *         self.phi_ = self.phi_c             # <<<<<<<<<<<<<<
 * 
 *     def _cpp_eta(self,  x,  t):
 */
  __pyx_t_21 = __pyx_v_self->phi_c;
  __pyx_v_self->phi_ = __pyx_t_21;

  /* "WaveTools.py":1111
 *              Switch for optimised functions
 *     """
 *     def __cinit__(self,             # <<<<<<<<<<<<<<
 *                  Tp,
 *                  Hs,
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_AddTraceback("WaveTools.RandomWaves.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_validSpectra);
  __Pyx_XDECREF(__pyx_v_spec_fun);
  __Pyx_XDECREF(__pyx_v_fim);
  __Pyx_XDECREF(__pyx_v_ij);
  __Pyx_XDECREF(__pyx_v_kk);
  __Pyx_XDECREF(__pyx_v_waveDir);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":1209
 *         self.phi_ = self.phi_c
 * 
 *     def _cpp_eta(self,  x,  t):             # <<<<<<<<<<<<<<
 * 
 *         return __cpp_etaRandom(x,t,self.kDir_, self.omega_,self.phi_,self.ai_, self.N, self.fast)
 */

static double __pyx_f_9WaveTools_11RandomWaves__cpp_eta(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self, double *__pyx_v_x, double __pyx_v_t) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_cpp_eta", 0);

  /* "WaveTools.py":1211
 *     def _cpp_eta(self,  x,  t):
 * 
 *         return __cpp_etaRandom(x,t,self.kDir_, self.omega_,self.phi_,self.ai_, self.N, self.fast)             # <<<<<<<<<<<<<<
 * 
 *     def eta(self, x, t):
 */
  __pyx_r = proteus::__cpp_etaRandom(__pyx_v_x, __pyx_v_t, __pyx_v_self->kDir_, __pyx_v_self->omega_, __pyx_v_self->phi_, __pyx_v_self->ai_, __pyx_v_self->N, __pyx_v_self->fast);
  goto __pyx_L0;

  /* "WaveTools.py":1209
 *         self.phi_ = self.phi_c
 * 
 *     def _cpp_eta(self,  x,  t):             # <<<<<<<<<<<<<<
 * 
 *         return __cpp_etaRandom(x,t,self.kDir_, self.omega_,self.phi_,self.ai_, self.N, self.fast)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":1213
 *         return __cpp_etaRandom(x,t,self.kDir_, self.omega_,self.phi_,self.ai_, self.N, self.fast)
 * 
 *     def eta(self, x, t):             # <<<<<<<<<<<<<<
 *         """Calculates free surface elevation (RandomWaves class)
 *         Parameters
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_11RandomWaves_3eta(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9WaveTools_11RandomWaves_2eta[] = "Calculates free surface elevation (RandomWaves class)\n        Parameters\n        ----------\n        x : numpy.ndarray\n            Position vector\n        t : float\n            Time variable\n\n        Returns\n        --------\n        float\n            Free-surface elevation as a float\n\n        ";
static PyMethodDef __pyx_mdef_9WaveTools_11RandomWaves_3eta = {"eta", (PyCFunction)__pyx_pw_9WaveTools_11RandomWaves_3eta, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_11RandomWaves_2eta};
static PyObject *__pyx_pw_9WaveTools_11RandomWaves_3eta(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_t = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("eta (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_t,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("eta", 1, 2, 2, 1); __PYX_ERR(0, 1213, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "eta") < 0)) __PYX_ERR(0, 1213, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = values[0];
    __pyx_v_t = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("eta", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1213, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("WaveTools.RandomWaves.eta", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9WaveTools_11RandomWaves_2eta(((struct __pyx_obj_9WaveTools_RandomWaves *)__pyx_v_self), __pyx_v_x, __pyx_v_t);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_11RandomWaves_2eta(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_t) {
  double __pyx_v_xx[3];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  __Pyx_RefNannySetupContext("eta", 0);

  /* "WaveTools.py":1229
 *         """
 *         cython.declare(xx=cython.double[3])
 *         xx[0] = x[0]             # <<<<<<<<<<<<<<
 *         xx[1] = x[1]
 *         xx[2] = x[2]
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_x, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1229, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  (__pyx_v_xx[0]) = __pyx_t_2;

  /* "WaveTools.py":1230
 *         cython.declare(xx=cython.double[3])
 *         xx[0] = x[0]
 *         xx[1] = x[1]             # <<<<<<<<<<<<<<
 *         xx[2] = x[2]
 *         return self._cpp_eta(xx,t)
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_x, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1230, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  (__pyx_v_xx[1]) = __pyx_t_2;

  /* "WaveTools.py":1231
 *         xx[0] = x[0]
 *         xx[1] = x[1]
 *         xx[2] = x[2]             # <<<<<<<<<<<<<<
 *         return self._cpp_eta(xx,t)
 * 
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_x, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1231, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  (__pyx_v_xx[2]) = __pyx_t_2;

  /* "WaveTools.py":1232
 *         xx[1] = x[1]
 *         xx[2] = x[2]
 *         return self._cpp_eta(xx,t)             # <<<<<<<<<<<<<<
 * 
 *     def _cpp_u(self,  U, x,  t):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_t); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1232, __pyx_L1_error)
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_vtabstruct_9WaveTools_RandomWaves *)__pyx_v_self->__pyx_vtab)->_cpp_eta(__pyx_v_self, __pyx_v_xx, __pyx_t_2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "WaveTools.py":1213
 *         return __cpp_etaRandom(x,t,self.kDir_, self.omega_,self.phi_,self.ai_, self.N, self.fast)
 * 
 *     def eta(self, x, t):             # <<<<<<<<<<<<<<
 *         """Calculates free surface elevation (RandomWaves class)
 *         Parameters
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("WaveTools.RandomWaves.eta", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":1234
 *         return self._cpp_eta(xx,t)
 * 
 *     def _cpp_u(self,  U, x,  t):             # <<<<<<<<<<<<<<
 *         __cpp_uRandom(U, x,t,self.kDir_, self.ki_, self.omega_,self.phi_,self.ai_,self.mwl,self.depth, self.N, self.waveDir_, self.vDir_, self.tanh_, self.gAbs, self.fast)
 * 
 */

static void __pyx_f_9WaveTools_11RandomWaves__cpp_u(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self, double *__pyx_v_U, double *__pyx_v_x, double __pyx_v_t) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_cpp_u", 0);

  /* "WaveTools.py":1235
 * 
 *     def _cpp_u(self,  U, x,  t):
 *         __cpp_uRandom(U, x,t,self.kDir_, self.ki_, self.omega_,self.phi_,self.ai_,self.mwl,self.depth, self.N, self.waveDir_, self.vDir_, self.tanh_, self.gAbs, self.fast)             # <<<<<<<<<<<<<<
 * 
 *     def u(self, x, t):
 */
  proteus::__cpp_uRandom(__pyx_v_U, __pyx_v_x, __pyx_v_t, __pyx_v_self->kDir_, __pyx_v_self->ki_, __pyx_v_self->omega_, __pyx_v_self->phi_, __pyx_v_self->ai_, __pyx_v_self->mwl, __pyx_v_self->depth, __pyx_v_self->N, __pyx_v_self->waveDir_, __pyx_v_self->vDir_, __pyx_v_self->tanh_, __pyx_v_self->gAbs, __pyx_v_self->fast);

  /* "WaveTools.py":1234
 *         return self._cpp_eta(xx,t)
 * 
 *     def _cpp_u(self,  U, x,  t):             # <<<<<<<<<<<<<<
 *         __cpp_uRandom(U, x,t,self.kDir_, self.ki_, self.omega_,self.phi_,self.ai_,self.mwl,self.depth, self.N, self.waveDir_, self.vDir_, self.tanh_, self.gAbs, self.fast)
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "WaveTools.py":1237
 *         __cpp_uRandom(U, x,t,self.kDir_, self.ki_, self.omega_,self.phi_,self.ai_,self.mwl,self.depth, self.N, self.waveDir_, self.vDir_, self.tanh_, self.gAbs, self.fast)
 * 
 *     def u(self, x, t):             # <<<<<<<<<<<<<<
 *         """Calculates wave velocity vector (RandomWaves class)
 *         Parameters
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_11RandomWaves_5u(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9WaveTools_11RandomWaves_4u[] = "Calculates wave velocity vector (RandomWaves class)\n        Parameters\n        ----------\n        x : numpy.ndarray\n            Position vector\n        t : float\n            Time variable\n\n        Returns\n        --------\n        numpy.ndarray\n            Velocity vector as 1D array\n\n        ";
static PyMethodDef __pyx_mdef_9WaveTools_11RandomWaves_5u = {"u", (PyCFunction)__pyx_pw_9WaveTools_11RandomWaves_5u, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_11RandomWaves_4u};
static PyObject *__pyx_pw_9WaveTools_11RandomWaves_5u(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_t = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("u (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_t,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("u", 1, 2, 2, 1); __PYX_ERR(0, 1237, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "u") < 0)) __PYX_ERR(0, 1237, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = values[0];
    __pyx_v_t = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("u", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1237, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("WaveTools.RandomWaves.u", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9WaveTools_11RandomWaves_4u(((struct __pyx_obj_9WaveTools_RandomWaves *)__pyx_v_self), __pyx_v_x, __pyx_v_t);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_11RandomWaves_4u(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_t) {
  double __pyx_v_xx[3];
  double __pyx_v_cppU[3];
  long __pyx_v_ii;
  PyObject *__pyx_v_U = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  long __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  double __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("u", 0);

  /* "WaveTools.py":1255
 *         cython.declare(xx=cython.double[3])
 *         cython.declare(cppU=cython.double[3])
 *         for ii in range(3):             # <<<<<<<<<<<<<<
 *             xx[ii] = x[ii]
 *             cppU[ii] = 0.
 */
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {
    __pyx_v_ii = __pyx_t_1;

    /* "WaveTools.py":1256
 *         cython.declare(cppU=cython.double[3])
 *         for ii in range(3):
 *             xx[ii] = x[ii]             # <<<<<<<<<<<<<<
 *             cppU[ii] = 0.
 *         U = np.zeros(3,)
 */
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_x, __pyx_v_ii, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1256, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1256, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    (__pyx_v_xx[__pyx_v_ii]) = __pyx_t_3;

    /* "WaveTools.py":1257
 *         for ii in range(3):
 *             xx[ii] = x[ii]
 *             cppU[ii] = 0.             # <<<<<<<<<<<<<<
 *         U = np.zeros(3,)
 *         self._cpp_u(cppU,xx,t)
 */
    (__pyx_v_cppU[__pyx_v_ii]) = 0.;
  }

  /* "WaveTools.py":1258
 *             xx[ii] = x[ii]
 *             cppU[ii] = 0.
 *         U = np.zeros(3,)             # <<<<<<<<<<<<<<
 *         self._cpp_u(cppU,xx,t)
 *         U[0] = cppU[0]
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__70, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_U = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "WaveTools.py":1259
 *             cppU[ii] = 0.
 *         U = np.zeros(3,)
 *         self._cpp_u(cppU,xx,t)             # <<<<<<<<<<<<<<
 *         U[0] = cppU[0]
 *         U[1] = cppU[1]
 */
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_t); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1259, __pyx_L1_error)
  ((struct __pyx_vtabstruct_9WaveTools_RandomWaves *)__pyx_v_self->__pyx_vtab)->_cpp_u(__pyx_v_self, __pyx_v_cppU, __pyx_v_xx, __pyx_t_3);

  /* "WaveTools.py":1260
 *         U = np.zeros(3,)
 *         self._cpp_u(cppU,xx,t)
 *         U[0] = cppU[0]             # <<<<<<<<<<<<<<
 *         U[1] = cppU[1]
 *         U[2] = cppU[2]
 */
  __pyx_t_2 = PyFloat_FromDouble((__pyx_v_cppU[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__Pyx_SetItemInt(__pyx_v_U, 0, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1) < 0)) __PYX_ERR(0, 1260, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "WaveTools.py":1261
 *         self._cpp_u(cppU,xx,t)
 *         U[0] = cppU[0]
 *         U[1] = cppU[1]             # <<<<<<<<<<<<<<
 *         U[2] = cppU[2]
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble((__pyx_v_cppU[1])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__Pyx_SetItemInt(__pyx_v_U, 1, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1) < 0)) __PYX_ERR(0, 1261, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "WaveTools.py":1262
 *         U[0] = cppU[0]
 *         U[1] = cppU[1]
 *         U[2] = cppU[2]             # <<<<<<<<<<<<<<
 * 
 *         return U
 */
  __pyx_t_2 = PyFloat_FromDouble((__pyx_v_cppU[2])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__Pyx_SetItemInt(__pyx_v_U, 2, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1) < 0)) __PYX_ERR(0, 1262, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "WaveTools.py":1264
 *         U[2] = cppU[2]
 * 
 *         return U             # <<<<<<<<<<<<<<
 *     def writeEtaSeries(self,Tstart,Tend,x0,fname,Lgen= np.array([0.,0,0])):
 *         """Writes a timeseries of the free-surface elevation
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_U);
  __pyx_r = __pyx_v_U;
  goto __pyx_L0;

  /* "WaveTools.py":1237
 *         __cpp_uRandom(U, x,t,self.kDir_, self.ki_, self.omega_,self.phi_,self.ai_,self.mwl,self.depth, self.N, self.waveDir_, self.vDir_, self.tanh_, self.gAbs, self.fast)
 * 
 *     def u(self, x, t):             # <<<<<<<<<<<<<<
 *         """Calculates wave velocity vector (RandomWaves class)
 *         Parameters
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("WaveTools.RandomWaves.u", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_U);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":1265
 * 
 *         return U
 *     def writeEtaSeries(self,Tstart,Tend,x0,fname,Lgen= np.array([0.,0,0])):             # <<<<<<<<<<<<<<
 *         """Writes a timeseries of the free-surface elevation
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_11RandomWaves_7writeEtaSeries(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9WaveTools_11RandomWaves_6writeEtaSeries[] = "Writes a timeseries of the free-surface elevation\n\n        It also returns the free surface elevation as a time-eta array.\n        If Lgen !=[0.,0.,0.,] then Tstart is modified to account for the\n        wave transformation at the most remote point of the relaxation zone.\n\n        Parameters\n        ----------\n        Tstart : float\n            Start time\n        Tend : float\n            End time\n        x0 : numpy.ndarray\n            Position vector of the time series\n        fname : string\n            Filename for timeseries file\n        Lgen : Optional[numpy.ndarray]\n            Length vector of relaxation zone\n\n\n        Returns\n        ----------\n        numpy.ndarray\n            2D numpy array Nx2 containing free-surface elevation in time.\n        ";
static PyMethodDef __pyx_mdef_9WaveTools_11RandomWaves_7writeEtaSeries = {"writeEtaSeries", (PyCFunction)__pyx_pw_9WaveTools_11RandomWaves_7writeEtaSeries, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_11RandomWaves_6writeEtaSeries};
static PyObject *__pyx_pw_9WaveTools_11RandomWaves_7writeEtaSeries(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_Tstart = 0;
  PyObject *__pyx_v_Tend = 0;
  PyObject *__pyx_v_x0 = 0;
  PyObject *__pyx_v_fname = 0;
  PyObject *__pyx_v_Lgen = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("writeEtaSeries (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_Tstart,&__pyx_n_s_Tend,&__pyx_n_s_x0,&__pyx_n_s_fname,&__pyx_n_s_Lgen,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[4] = __pyx_k__71;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Tstart)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Tend)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("writeEtaSeries", 0, 4, 5, 1); __PYX_ERR(0, 1265, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("writeEtaSeries", 0, 4, 5, 2); __PYX_ERR(0, 1265, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fname)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("writeEtaSeries", 0, 4, 5, 3); __PYX_ERR(0, 1265, __pyx_L3_error)
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Lgen);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "writeEtaSeries") < 0)) __PYX_ERR(0, 1265, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_Tstart = values[0];
    __pyx_v_Tend = values[1];
    __pyx_v_x0 = values[2];
    __pyx_v_fname = values[3];
    __pyx_v_Lgen = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("writeEtaSeries", 0, 4, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1265, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("WaveTools.RandomWaves.writeEtaSeries", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9WaveTools_11RandomWaves_6writeEtaSeries(((struct __pyx_obj_9WaveTools_RandomWaves *)__pyx_v_self), __pyx_v_Tstart, __pyx_v_Tend, __pyx_v_x0, __pyx_v_fname, __pyx_v_Lgen);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_11RandomWaves_6writeEtaSeries(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self, PyObject *__pyx_v_Tstart, PyObject *__pyx_v_Tend, PyObject *__pyx_v_x0, PyObject *__pyx_v_fname, PyObject *__pyx_v_Lgen) {
  double __pyx_v_dt;
  PyObject *__pyx_v_Tlag = NULL;
  Py_ssize_t __pyx_v_j;
  PyObject *__pyx_v_Np = NULL;
  PyObject *__pyx_v_time = NULL;
  PyObject *__pyx_v_etaR = NULL;
  Py_ssize_t __pyx_v_jj;
  PyObject *__pyx_v_series = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  __Pyx_RefNannySetupContext("writeEtaSeries", 0);
  __Pyx_INCREF(__pyx_v_Tstart);

  /* "WaveTools.py":1291
 *             2D numpy array Nx2 containing free-surface elevation in time.
 *         """
 *         if sum(Lgen[:]*self.waveDir[:])< 0 :             # <<<<<<<<<<<<<<
 *                 logEvent('ERROR! Wavetools.py: Location vector of generation zone should not be opposite to the wave direction')
 *                 sys.exit(1)
 */
  __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_v_Lgen, 0, 0, NULL, NULL, &__pyx_slice__72, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetSlice(((PyObject *)__pyx_v_self->waveDir), 0, 0, NULL, NULL, &__pyx_slice__73, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_sum, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_3, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1291, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 1291, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "WaveTools.py":1292
 *         """
 *         if sum(Lgen[:]*self.waveDir[:])< 0 :
 *                 logEvent('ERROR! Wavetools.py: Location vector of generation zone should not be opposite to the wave direction')             # <<<<<<<<<<<<<<
 *                 sys.exit(1)
 *         dt = self.Tp/50.
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_logEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1292, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__74, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1292, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "WaveTools.py":1293
 *         if sum(Lgen[:]*self.waveDir[:])< 0 :
 *                 logEvent('ERROR! Wavetools.py: Location vector of generation zone should not be opposite to the wave direction')
 *                 sys.exit(1)             # <<<<<<<<<<<<<<
 *         dt = self.Tp/50.
 *         Tlag = np.zeros(len(self.omega),)
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_sys); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1293, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_exit); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1293, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__75, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1293, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "WaveTools.py":1291
 *             2D numpy array Nx2 containing free-surface elevation in time.
 *         """
 *         if sum(Lgen[:]*self.waveDir[:])< 0 :             # <<<<<<<<<<<<<<
 *                 logEvent('ERROR! Wavetools.py: Location vector of generation zone should not be opposite to the wave direction')
 *                 sys.exit(1)
 */
  }

  /* "WaveTools.py":1294
 *                 logEvent('ERROR! Wavetools.py: Location vector of generation zone should not be opposite to the wave direction')
 *                 sys.exit(1)
 *         dt = self.Tp/50.             # <<<<<<<<<<<<<<
 *         Tlag = np.zeros(len(self.omega),)
 *         for j in range(len(self.omega)):
 */
  __pyx_v_dt = (__pyx_v_self->Tp / 50.);

  /* "WaveTools.py":1295
 *                 sys.exit(1)
 *         dt = self.Tp/50.
 *         Tlag = np.zeros(len(self.omega),)             # <<<<<<<<<<<<<<
 *         for j in range(len(self.omega)):
 *             Tlag[j] = sum(self.kDir[j,:]*Lgen[:])/self.omega[j]
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = ((PyObject *)__pyx_v_self->omega);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_5 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 1295, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1295, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_2};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1295, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_2};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1295, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1295, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1295, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_Tlag = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "WaveTools.py":1296
 *         dt = self.Tp/50.
 *         Tlag = np.zeros(len(self.omega),)
 *         for j in range(len(self.omega)):             # <<<<<<<<<<<<<<
 *             Tlag[j] = sum(self.kDir[j,:]*Lgen[:])/self.omega[j]
 *         Tlag = max(Tlag)
 */
  __pyx_t_3 = ((PyObject *)__pyx_v_self->omega);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_5 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 1296, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_5; __pyx_t_8+=1) {
    __pyx_v_j = __pyx_t_8;

    /* "WaveTools.py":1297
 *         Tlag = np.zeros(len(self.omega),)
 *         for j in range(len(self.omega)):
 *             Tlag[j] = sum(self.kDir[j,:]*Lgen[:])/self.omega[j]             # <<<<<<<<<<<<<<
 *         Tlag = max(Tlag)
 *         Tstart = Tstart - Tlag
 */
    __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_j); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1297, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1297, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
    __Pyx_INCREF(__pyx_slice__76);
    __Pyx_GIVEREF(__pyx_slice__76);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_slice__76);
    __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_GetItem(((PyObject *)__pyx_v_self->kDir), __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1297, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_v_Lgen, 0, 0, NULL, NULL, &__pyx_slice__77, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1297, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = PyNumber_Multiply(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1297, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1297, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_sum, __pyx_t_1, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1297, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->omega), __pyx_v_j, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1297, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_t_7, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1297, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_SetItemInt(__pyx_v_Tlag, __pyx_v_j, __pyx_t_3, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1) < 0)) __PYX_ERR(0, 1297, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }

  /* "WaveTools.py":1298
 *         for j in range(len(self.omega)):
 *             Tlag[j] = sum(self.kDir[j,:]*Lgen[:])/self.omega[j]
 *         Tlag = max(Tlag)             # <<<<<<<<<<<<<<
 *         Tstart = Tstart - Tlag
 *         Np = int((Tend - Tstart)/dt)
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_Tlag);
  __Pyx_GIVEREF(__pyx_v_Tlag);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_Tlag);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_max, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_Tlag, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "WaveTools.py":1299
 *             Tlag[j] = sum(self.kDir[j,:]*Lgen[:])/self.omega[j]
 *         Tlag = max(Tlag)
 *         Tstart = Tstart - Tlag             # <<<<<<<<<<<<<<
 *         Np = int((Tend - Tstart)/dt)
 *         time = np.linspace(Tstart,Tend,Np )
 */
  __pyx_t_1 = PyNumber_Subtract(__pyx_v_Tstart, __pyx_v_Tlag); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF_SET(__pyx_v_Tstart, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "WaveTools.py":1300
 *         Tlag = max(Tlag)
 *         Tstart = Tstart - Tlag
 *         Np = int((Tend - Tstart)/dt)             # <<<<<<<<<<<<<<
 *         time = np.linspace(Tstart,Tend,Np )
 *         etaR  = np.zeros(len(time), )
 */
  __pyx_t_1 = PyNumber_Subtract(__pyx_v_Tend, __pyx_v_Tstart); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_dt); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyNumber_Int(__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_Np = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "WaveTools.py":1301
 *         Tstart = Tstart - Tlag
 *         Np = int((Tend - Tstart)/dt)
 *         time = np.linspace(Tstart,Tend,Np )             # <<<<<<<<<<<<<<
 *         etaR  = np.zeros(len(time), )
 *         for jj in range(len(time)):
 */
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_linspace); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_9 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_v_Tstart, __pyx_v_Tend, __pyx_v_Np};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_9, 3+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1301, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_v_Tstart, __pyx_v_Tend, __pyx_v_Np};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_9, 3+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1301, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  {
    __pyx_t_2 = PyTuple_New(3+__pyx_t_9); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1301, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_INCREF(__pyx_v_Tstart);
    __Pyx_GIVEREF(__pyx_v_Tstart);
    PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_9, __pyx_v_Tstart);
    __Pyx_INCREF(__pyx_v_Tend);
    __Pyx_GIVEREF(__pyx_v_Tend);
    PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_9, __pyx_v_Tend);
    __Pyx_INCREF(__pyx_v_Np);
    __Pyx_GIVEREF(__pyx_v_Np);
    PyTuple_SET_ITEM(__pyx_t_2, 2+__pyx_t_9, __pyx_v_Np);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1301, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_time = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "WaveTools.py":1302
 *         Np = int((Tend - Tstart)/dt)
 *         time = np.linspace(Tstart,Tend,Np )
 *         etaR  = np.zeros(len(time), )             # <<<<<<<<<<<<<<
 *         for jj in range(len(time)):
 *             etaR[jj] = self.eta(x0,time[jj])
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = PyObject_Length(__pyx_v_time); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 1302, __pyx_L1_error)
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_7) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1302, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_1};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1302, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_1};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1302, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1302, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7); __pyx_t_7 = NULL;
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1302, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_etaR = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "WaveTools.py":1303
 *         time = np.linspace(Tstart,Tend,Np )
 *         etaR  = np.zeros(len(time), )
 *         for jj in range(len(time)):             # <<<<<<<<<<<<<<
 *             etaR[jj] = self.eta(x0,time[jj])
 *         np.savetxt(fname,zip(time,etaR))
 */
  __pyx_t_5 = PyObject_Length(__pyx_v_time); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 1303, __pyx_L1_error)
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_5; __pyx_t_8+=1) {
    __pyx_v_jj = __pyx_t_8;

    /* "WaveTools.py":1304
 *         etaR  = np.zeros(len(time), )
 *         for jj in range(len(time)):
 *             etaR[jj] = self.eta(x0,time[jj])             # <<<<<<<<<<<<<<
 *         np.savetxt(fname,zip(time,etaR))
 *         series = np.zeros((len(time),2),)
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_eta); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1304, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_time, __pyx_v_jj, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1304, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = NULL;
    __pyx_t_9 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_9 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_v_x0, __pyx_t_6};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1304, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_v_x0, __pyx_t_6};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1304, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1304, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_1) {
        __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_1); __pyx_t_1 = NULL;
      }
      __Pyx_INCREF(__pyx_v_x0);
      __Pyx_GIVEREF(__pyx_v_x0);
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_9, __pyx_v_x0);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_9, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1304, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(__Pyx_SetItemInt(__pyx_v_etaR, __pyx_v_jj, __pyx_t_3, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1) < 0)) __PYX_ERR(0, 1304, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }

  /* "WaveTools.py":1305
 *         for jj in range(len(time)):
 *             etaR[jj] = self.eta(x0,time[jj])
 *         np.savetxt(fname,zip(time,etaR))             # <<<<<<<<<<<<<<
 *         series = np.zeros((len(time),2),)
 *         series[:,0] = time
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_savetxt); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_time);
  __Pyx_GIVEREF(__pyx_v_time);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_time);
  __Pyx_INCREF(__pyx_v_etaR);
  __Pyx_GIVEREF(__pyx_v_etaR);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_etaR);
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_2, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
      __pyx_t_9 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_7)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_fname, __pyx_t_6};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1305, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_fname, __pyx_t_6};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1305, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  {
    __pyx_t_1 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1305, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_fname);
    __Pyx_GIVEREF(__pyx_v_fname);
    PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_9, __pyx_v_fname);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_9, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1305, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "WaveTools.py":1306
 *             etaR[jj] = self.eta(x0,time[jj])
 *         np.savetxt(fname,zip(time,etaR))
 *         series = np.zeros((len(time),2),)             # <<<<<<<<<<<<<<
 *         series[:,0] = time
 *         series[:,1] = etaR
 */
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_zeros); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_5 = PyObject_Length(__pyx_v_time); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 1306, __pyx_L1_error)
  __pyx_t_7 = PyInt_FromSsize_t(__pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
  __Pyx_INCREF(__pyx_int_2);
  __Pyx_GIVEREF(__pyx_int_2);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_int_2);
  __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_7) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1306, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_6};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1306, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_6};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1306, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1306, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_7); __pyx_t_7 = NULL;
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1306, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_series = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "WaveTools.py":1307
 *         np.savetxt(fname,zip(time,etaR))
 *         series = np.zeros((len(time),2),)
 *         series[:,0] = time             # <<<<<<<<<<<<<<
 *         series[:,1] = etaR
 * 
 */
  if (unlikely(PyObject_SetItem(__pyx_v_series, __pyx_tuple__79, __pyx_v_time) < 0)) __PYX_ERR(0, 1307, __pyx_L1_error)

  /* "WaveTools.py":1308
 *         series = np.zeros((len(time),2),)
 *         series[:,0] = time
 *         series[:,1] = etaR             # <<<<<<<<<<<<<<
 * 
 *         return series
 */
  if (unlikely(PyObject_SetItem(__pyx_v_series, __pyx_tuple__81, __pyx_v_etaR) < 0)) __PYX_ERR(0, 1308, __pyx_L1_error)

  /* "WaveTools.py":1310
 *         series[:,1] = etaR
 * 
 *         return series             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_series);
  __pyx_r = __pyx_v_series;
  goto __pyx_L0;

  /* "WaveTools.py":1265
 * 
 *         return U
 *     def writeEtaSeries(self,Tstart,Tend,x0,fname,Lgen= np.array([0.,0,0])):             # <<<<<<<<<<<<<<
 *         """Writes a timeseries of the free-surface elevation
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("WaveTools.RandomWaves.writeEtaSeries", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_Tlag);
  __Pyx_XDECREF(__pyx_v_Np);
  __Pyx_XDECREF(__pyx_v_time);
  __Pyx_XDECREF(__pyx_v_etaR);
  __Pyx_XDECREF(__pyx_v_series);
  __Pyx_XDECREF(__pyx_v_Tstart);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.pxd":91
 *     cdef double[10000] phi_c
 *     cdef public:
 *         double mwl,depth,gAbs,Tlag,Hs,Tp,fp,bandFactor,df             # <<<<<<<<<<<<<<
 *         int N
 *         np.ndarray fi,fim,Si_Jm,ki,omega,tanhF,g,waveDir,vDir,kDir,ai
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_11RandomWaves_3mwl_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9WaveTools_11RandomWaves_3mwl_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_11RandomWaves_3mwl___get__(((struct __pyx_obj_9WaveTools_RandomWaves *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_11RandomWaves_3mwl___get__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->mwl); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("WaveTools.RandomWaves.mwl.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9WaveTools_11RandomWaves_3mwl_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9WaveTools_11RandomWaves_3mwl_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_11RandomWaves_3mwl_2__set__(((struct __pyx_obj_9WaveTools_RandomWaves *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9WaveTools_11RandomWaves_3mwl_2__set__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 91, __pyx_L1_error)
  __pyx_v_self->mwl = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("WaveTools.RandomWaves.mwl.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_11RandomWaves_5depth_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9WaveTools_11RandomWaves_5depth_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_11RandomWaves_5depth___get__(((struct __pyx_obj_9WaveTools_RandomWaves *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_11RandomWaves_5depth___get__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->depth); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("WaveTools.RandomWaves.depth.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9WaveTools_11RandomWaves_5depth_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9WaveTools_11RandomWaves_5depth_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_11RandomWaves_5depth_2__set__(((struct __pyx_obj_9WaveTools_RandomWaves *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9WaveTools_11RandomWaves_5depth_2__set__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 91, __pyx_L1_error)
  __pyx_v_self->depth = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("WaveTools.RandomWaves.depth.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_11RandomWaves_4gAbs_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9WaveTools_11RandomWaves_4gAbs_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_11RandomWaves_4gAbs___get__(((struct __pyx_obj_9WaveTools_RandomWaves *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_11RandomWaves_4gAbs___get__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->gAbs); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("WaveTools.RandomWaves.gAbs.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9WaveTools_11RandomWaves_4gAbs_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9WaveTools_11RandomWaves_4gAbs_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_11RandomWaves_4gAbs_2__set__(((struct __pyx_obj_9WaveTools_RandomWaves *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9WaveTools_11RandomWaves_4gAbs_2__set__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 91, __pyx_L1_error)
  __pyx_v_self->gAbs = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("WaveTools.RandomWaves.gAbs.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_11RandomWaves_4Tlag_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9WaveTools_11RandomWaves_4Tlag_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_11RandomWaves_4Tlag___get__(((struct __pyx_obj_9WaveTools_RandomWaves *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_11RandomWaves_4Tlag___get__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->Tlag); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("WaveTools.RandomWaves.Tlag.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9WaveTools_11RandomWaves_4Tlag_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9WaveTools_11RandomWaves_4Tlag_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_11RandomWaves_4Tlag_2__set__(((struct __pyx_obj_9WaveTools_RandomWaves *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9WaveTools_11RandomWaves_4Tlag_2__set__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 91, __pyx_L1_error)
  __pyx_v_self->Tlag = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("WaveTools.RandomWaves.Tlag.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_11RandomWaves_2Hs_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9WaveTools_11RandomWaves_2Hs_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_11RandomWaves_2Hs___get__(((struct __pyx_obj_9WaveTools_RandomWaves *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_11RandomWaves_2Hs___get__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->Hs); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("WaveTools.RandomWaves.Hs.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9WaveTools_11RandomWaves_2Hs_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9WaveTools_11RandomWaves_2Hs_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_11RandomWaves_2Hs_2__set__(((struct __pyx_obj_9WaveTools_RandomWaves *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9WaveTools_11RandomWaves_2Hs_2__set__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 91, __pyx_L1_error)
  __pyx_v_self->Hs = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("WaveTools.RandomWaves.Hs.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_11RandomWaves_2Tp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9WaveTools_11RandomWaves_2Tp_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_11RandomWaves_2Tp___get__(((struct __pyx_obj_9WaveTools_RandomWaves *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_11RandomWaves_2Tp___get__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->Tp); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("WaveTools.RandomWaves.Tp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9WaveTools_11RandomWaves_2Tp_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9WaveTools_11RandomWaves_2Tp_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_11RandomWaves_2Tp_2__set__(((struct __pyx_obj_9WaveTools_RandomWaves *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9WaveTools_11RandomWaves_2Tp_2__set__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 91, __pyx_L1_error)
  __pyx_v_self->Tp = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("WaveTools.RandomWaves.Tp.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_11RandomWaves_2fp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9WaveTools_11RandomWaves_2fp_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_11RandomWaves_2fp___get__(((struct __pyx_obj_9WaveTools_RandomWaves *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_11RandomWaves_2fp___get__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->fp); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("WaveTools.RandomWaves.fp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9WaveTools_11RandomWaves_2fp_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9WaveTools_11RandomWaves_2fp_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_11RandomWaves_2fp_2__set__(((struct __pyx_obj_9WaveTools_RandomWaves *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9WaveTools_11RandomWaves_2fp_2__set__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 91, __pyx_L1_error)
  __pyx_v_self->fp = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("WaveTools.RandomWaves.fp.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_11RandomWaves_10bandFactor_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9WaveTools_11RandomWaves_10bandFactor_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_11RandomWaves_10bandFactor___get__(((struct __pyx_obj_9WaveTools_RandomWaves *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_11RandomWaves_10bandFactor___get__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->bandFactor); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("WaveTools.RandomWaves.bandFactor.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9WaveTools_11RandomWaves_10bandFactor_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9WaveTools_11RandomWaves_10bandFactor_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_11RandomWaves_10bandFactor_2__set__(((struct __pyx_obj_9WaveTools_RandomWaves *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9WaveTools_11RandomWaves_10bandFactor_2__set__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 91, __pyx_L1_error)
  __pyx_v_self->bandFactor = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("WaveTools.RandomWaves.bandFactor.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_11RandomWaves_2df_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9WaveTools_11RandomWaves_2df_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_11RandomWaves_2df___get__(((struct __pyx_obj_9WaveTools_RandomWaves *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_11RandomWaves_2df___get__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->df); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("WaveTools.RandomWaves.df.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9WaveTools_11RandomWaves_2df_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9WaveTools_11RandomWaves_2df_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_11RandomWaves_2df_2__set__(((struct __pyx_obj_9WaveTools_RandomWaves *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9WaveTools_11RandomWaves_2df_2__set__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 91, __pyx_L1_error)
  __pyx_v_self->df = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("WaveTools.RandomWaves.df.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.pxd":92
 *     cdef public:
 *         double mwl,depth,gAbs,Tlag,Hs,Tp,fp,bandFactor,df
 *         int N             # <<<<<<<<<<<<<<
 *         np.ndarray fi,fim,Si_Jm,ki,omega,tanhF,g,waveDir,vDir,kDir,ai
 *         cdef object phi
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_11RandomWaves_1N_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9WaveTools_11RandomWaves_1N_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_11RandomWaves_1N___get__(((struct __pyx_obj_9WaveTools_RandomWaves *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_11RandomWaves_1N___get__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->N); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("WaveTools.RandomWaves.N.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9WaveTools_11RandomWaves_1N_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9WaveTools_11RandomWaves_1N_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_11RandomWaves_1N_2__set__(((struct __pyx_obj_9WaveTools_RandomWaves *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9WaveTools_11RandomWaves_1N_2__set__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 92, __pyx_L1_error)
  __pyx_v_self->N = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("WaveTools.RandomWaves.N.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.pxd":93
 *         double mwl,depth,gAbs,Tlag,Hs,Tp,fp,bandFactor,df
 *         int N
 *         np.ndarray fi,fim,Si_Jm,ki,omega,tanhF,g,waveDir,vDir,kDir,ai             # <<<<<<<<<<<<<<
 *         cdef object phi
 *     cdef double _cpp_eta(self , double* x, double t)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_11RandomWaves_2fi_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9WaveTools_11RandomWaves_2fi_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_11RandomWaves_2fi___get__(((struct __pyx_obj_9WaveTools_RandomWaves *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_11RandomWaves_2fi___get__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->fi));
  __pyx_r = ((PyObject *)__pyx_v_self->fi);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9WaveTools_11RandomWaves_2fi_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9WaveTools_11RandomWaves_2fi_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_11RandomWaves_2fi_2__set__(((struct __pyx_obj_9WaveTools_RandomWaves *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9WaveTools_11RandomWaves_2fi_2__set__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 93, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->fi);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->fi));
  __pyx_v_self->fi = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("WaveTools.RandomWaves.fi.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9WaveTools_11RandomWaves_2fi_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_9WaveTools_11RandomWaves_2fi_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_11RandomWaves_2fi_4__del__(((struct __pyx_obj_9WaveTools_RandomWaves *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9WaveTools_11RandomWaves_2fi_4__del__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->fi);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->fi));
  __pyx_v_self->fi = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_11RandomWaves_3fim_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9WaveTools_11RandomWaves_3fim_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_11RandomWaves_3fim___get__(((struct __pyx_obj_9WaveTools_RandomWaves *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_11RandomWaves_3fim___get__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->fim));
  __pyx_r = ((PyObject *)__pyx_v_self->fim);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9WaveTools_11RandomWaves_3fim_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9WaveTools_11RandomWaves_3fim_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_11RandomWaves_3fim_2__set__(((struct __pyx_obj_9WaveTools_RandomWaves *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9WaveTools_11RandomWaves_3fim_2__set__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 93, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->fim);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->fim));
  __pyx_v_self->fim = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("WaveTools.RandomWaves.fim.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9WaveTools_11RandomWaves_3fim_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_9WaveTools_11RandomWaves_3fim_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_11RandomWaves_3fim_4__del__(((struct __pyx_obj_9WaveTools_RandomWaves *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9WaveTools_11RandomWaves_3fim_4__del__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->fim);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->fim));
  __pyx_v_self->fim = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_11RandomWaves_5Si_Jm_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9WaveTools_11RandomWaves_5Si_Jm_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_11RandomWaves_5Si_Jm___get__(((struct __pyx_obj_9WaveTools_RandomWaves *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_11RandomWaves_5Si_Jm___get__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->Si_Jm));
  __pyx_r = ((PyObject *)__pyx_v_self->Si_Jm);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9WaveTools_11RandomWaves_5Si_Jm_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9WaveTools_11RandomWaves_5Si_Jm_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_11RandomWaves_5Si_Jm_2__set__(((struct __pyx_obj_9WaveTools_RandomWaves *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9WaveTools_11RandomWaves_5Si_Jm_2__set__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 93, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->Si_Jm);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->Si_Jm));
  __pyx_v_self->Si_Jm = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("WaveTools.RandomWaves.Si_Jm.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9WaveTools_11RandomWaves_5Si_Jm_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_9WaveTools_11RandomWaves_5Si_Jm_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_11RandomWaves_5Si_Jm_4__del__(((struct __pyx_obj_9WaveTools_RandomWaves *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9WaveTools_11RandomWaves_5Si_Jm_4__del__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->Si_Jm);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->Si_Jm));
  __pyx_v_self->Si_Jm = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_11RandomWaves_2ki_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9WaveTools_11RandomWaves_2ki_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_11RandomWaves_2ki___get__(((struct __pyx_obj_9WaveTools_RandomWaves *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_11RandomWaves_2ki___get__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->ki));
  __pyx_r = ((PyObject *)__pyx_v_self->ki);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9WaveTools_11RandomWaves_2ki_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9WaveTools_11RandomWaves_2ki_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_11RandomWaves_2ki_2__set__(((struct __pyx_obj_9WaveTools_RandomWaves *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9WaveTools_11RandomWaves_2ki_2__set__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 93, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->ki);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->ki));
  __pyx_v_self->ki = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("WaveTools.RandomWaves.ki.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9WaveTools_11RandomWaves_2ki_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_9WaveTools_11RandomWaves_2ki_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_11RandomWaves_2ki_4__del__(((struct __pyx_obj_9WaveTools_RandomWaves *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9WaveTools_11RandomWaves_2ki_4__del__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->ki);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->ki));
  __pyx_v_self->ki = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_11RandomWaves_5omega_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9WaveTools_11RandomWaves_5omega_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_11RandomWaves_5omega___get__(((struct __pyx_obj_9WaveTools_RandomWaves *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_11RandomWaves_5omega___get__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->omega));
  __pyx_r = ((PyObject *)__pyx_v_self->omega);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9WaveTools_11RandomWaves_5omega_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9WaveTools_11RandomWaves_5omega_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_11RandomWaves_5omega_2__set__(((struct __pyx_obj_9WaveTools_RandomWaves *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9WaveTools_11RandomWaves_5omega_2__set__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 93, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->omega);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->omega));
  __pyx_v_self->omega = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("WaveTools.RandomWaves.omega.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9WaveTools_11RandomWaves_5omega_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_9WaveTools_11RandomWaves_5omega_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_11RandomWaves_5omega_4__del__(((struct __pyx_obj_9WaveTools_RandomWaves *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9WaveTools_11RandomWaves_5omega_4__del__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->omega);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->omega));
  __pyx_v_self->omega = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_11RandomWaves_5tanhF_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9WaveTools_11RandomWaves_5tanhF_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_11RandomWaves_5tanhF___get__(((struct __pyx_obj_9WaveTools_RandomWaves *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_11RandomWaves_5tanhF___get__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->tanhF));
  __pyx_r = ((PyObject *)__pyx_v_self->tanhF);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9WaveTools_11RandomWaves_5tanhF_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9WaveTools_11RandomWaves_5tanhF_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_11RandomWaves_5tanhF_2__set__(((struct __pyx_obj_9WaveTools_RandomWaves *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9WaveTools_11RandomWaves_5tanhF_2__set__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 93, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->tanhF);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->tanhF));
  __pyx_v_self->tanhF = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("WaveTools.RandomWaves.tanhF.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9WaveTools_11RandomWaves_5tanhF_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_9WaveTools_11RandomWaves_5tanhF_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_11RandomWaves_5tanhF_4__del__(((struct __pyx_obj_9WaveTools_RandomWaves *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9WaveTools_11RandomWaves_5tanhF_4__del__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->tanhF);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->tanhF));
  __pyx_v_self->tanhF = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_11RandomWaves_1g_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9WaveTools_11RandomWaves_1g_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_11RandomWaves_1g___get__(((struct __pyx_obj_9WaveTools_RandomWaves *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_11RandomWaves_1g___get__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->g));
  __pyx_r = ((PyObject *)__pyx_v_self->g);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9WaveTools_11RandomWaves_1g_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9WaveTools_11RandomWaves_1g_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_11RandomWaves_1g_2__set__(((struct __pyx_obj_9WaveTools_RandomWaves *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9WaveTools_11RandomWaves_1g_2__set__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 93, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->g);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->g));
  __pyx_v_self->g = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("WaveTools.RandomWaves.g.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9WaveTools_11RandomWaves_1g_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_9WaveTools_11RandomWaves_1g_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_11RandomWaves_1g_4__del__(((struct __pyx_obj_9WaveTools_RandomWaves *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9WaveTools_11RandomWaves_1g_4__del__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->g);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->g));
  __pyx_v_self->g = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_11RandomWaves_7waveDir_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9WaveTools_11RandomWaves_7waveDir_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_11RandomWaves_7waveDir___get__(((struct __pyx_obj_9WaveTools_RandomWaves *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_11RandomWaves_7waveDir___get__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->waveDir));
  __pyx_r = ((PyObject *)__pyx_v_self->waveDir);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9WaveTools_11RandomWaves_7waveDir_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9WaveTools_11RandomWaves_7waveDir_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_11RandomWaves_7waveDir_2__set__(((struct __pyx_obj_9WaveTools_RandomWaves *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9WaveTools_11RandomWaves_7waveDir_2__set__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 93, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->waveDir);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->waveDir));
  __pyx_v_self->waveDir = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("WaveTools.RandomWaves.waveDir.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9WaveTools_11RandomWaves_7waveDir_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_9WaveTools_11RandomWaves_7waveDir_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_11RandomWaves_7waveDir_4__del__(((struct __pyx_obj_9WaveTools_RandomWaves *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9WaveTools_11RandomWaves_7waveDir_4__del__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->waveDir);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->waveDir));
  __pyx_v_self->waveDir = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_11RandomWaves_4vDir_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9WaveTools_11RandomWaves_4vDir_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_11RandomWaves_4vDir___get__(((struct __pyx_obj_9WaveTools_RandomWaves *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_11RandomWaves_4vDir___get__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->vDir));
  __pyx_r = ((PyObject *)__pyx_v_self->vDir);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9WaveTools_11RandomWaves_4vDir_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9WaveTools_11RandomWaves_4vDir_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_11RandomWaves_4vDir_2__set__(((struct __pyx_obj_9WaveTools_RandomWaves *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9WaveTools_11RandomWaves_4vDir_2__set__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 93, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->vDir);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->vDir));
  __pyx_v_self->vDir = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("WaveTools.RandomWaves.vDir.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9WaveTools_11RandomWaves_4vDir_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_9WaveTools_11RandomWaves_4vDir_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_11RandomWaves_4vDir_4__del__(((struct __pyx_obj_9WaveTools_RandomWaves *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9WaveTools_11RandomWaves_4vDir_4__del__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->vDir);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->vDir));
  __pyx_v_self->vDir = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_11RandomWaves_4kDir_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9WaveTools_11RandomWaves_4kDir_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_11RandomWaves_4kDir___get__(((struct __pyx_obj_9WaveTools_RandomWaves *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_11RandomWaves_4kDir___get__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->kDir));
  __pyx_r = ((PyObject *)__pyx_v_self->kDir);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9WaveTools_11RandomWaves_4kDir_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9WaveTools_11RandomWaves_4kDir_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_11RandomWaves_4kDir_2__set__(((struct __pyx_obj_9WaveTools_RandomWaves *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9WaveTools_11RandomWaves_4kDir_2__set__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 93, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->kDir);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->kDir));
  __pyx_v_self->kDir = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("WaveTools.RandomWaves.kDir.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9WaveTools_11RandomWaves_4kDir_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_9WaveTools_11RandomWaves_4kDir_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_11RandomWaves_4kDir_4__del__(((struct __pyx_obj_9WaveTools_RandomWaves *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9WaveTools_11RandomWaves_4kDir_4__del__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->kDir);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->kDir));
  __pyx_v_self->kDir = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_11RandomWaves_2ai_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9WaveTools_11RandomWaves_2ai_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_11RandomWaves_2ai___get__(((struct __pyx_obj_9WaveTools_RandomWaves *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_11RandomWaves_2ai___get__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->ai));
  __pyx_r = ((PyObject *)__pyx_v_self->ai);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9WaveTools_11RandomWaves_2ai_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9WaveTools_11RandomWaves_2ai_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_11RandomWaves_2ai_2__set__(((struct __pyx_obj_9WaveTools_RandomWaves *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9WaveTools_11RandomWaves_2ai_2__set__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 93, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->ai);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->ai));
  __pyx_v_self->ai = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("WaveTools.RandomWaves.ai.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9WaveTools_11RandomWaves_2ai_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_9WaveTools_11RandomWaves_2ai_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_11RandomWaves_2ai_4__del__(((struct __pyx_obj_9WaveTools_RandomWaves *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9WaveTools_11RandomWaves_2ai_4__del__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->ai);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->ai));
  __pyx_v_self->ai = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.pxd":94
 *         int N
 *         np.ndarray fi,fim,Si_Jm,ki,omega,tanhF,g,waveDir,vDir,kDir,ai
 *         cdef object phi             # <<<<<<<<<<<<<<
 *     cdef double _cpp_eta(self , double* x, double t)
 *     cdef void _cpp_u(self, double *U, double* x, double t)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_11RandomWaves_3phi_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9WaveTools_11RandomWaves_3phi_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_11RandomWaves_3phi___get__(((struct __pyx_obj_9WaveTools_RandomWaves *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_11RandomWaves_3phi___get__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->phi);
  __pyx_r = __pyx_v_self->phi;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9WaveTools_11RandomWaves_3phi_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9WaveTools_11RandomWaves_3phi_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_11RandomWaves_3phi_2__set__(((struct __pyx_obj_9WaveTools_RandomWaves *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9WaveTools_11RandomWaves_3phi_2__set__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->phi);
  __Pyx_DECREF(__pyx_v_self->phi);
  __pyx_v_self->phi = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9WaveTools_11RandomWaves_3phi_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_9WaveTools_11RandomWaves_3phi_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_11RandomWaves_3phi_4__del__(((struct __pyx_obj_9WaveTools_RandomWaves *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9WaveTools_11RandomWaves_3phi_4__del__(struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->phi);
  __Pyx_DECREF(__pyx_v_self->phi);
  __pyx_v_self->phi = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":1351
 *                  Switch for optimised functions
 *     """
 *     def __cinit__(self,             # <<<<<<<<<<<<<<
 *                  Nspectra,
 *                  Tp, # np array with
 */

/* Python wrapper */
static int __pyx_pw_9WaveTools_23MultiSpectraRandomWaves_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9WaveTools_23MultiSpectraRandomWaves_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_Nspectra = 0;
  PyObject *__pyx_v_Tp = 0;
  PyObject *__pyx_v_Hs = 0;
  PyObject *__pyx_v_mwl = 0;
  PyObject *__pyx_v_depth = 0;
  PyObject *__pyx_v_waveDir = 0;
  PyObject *__pyx_v_g = 0;
  PyObject *__pyx_v_N = 0;
  PyObject *__pyx_v_bandFactor = 0;
  PyObject *__pyx_v_spectName = 0;
  PyObject *__pyx_v_spectral_params = 0;
  PyObject *__pyx_v_phi = 0;
  PyObject *__pyx_v_fast = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_Nspectra,&__pyx_n_s_Tp,&__pyx_n_s_Hs,&__pyx_n_s_mwl,&__pyx_n_s_depth,&__pyx_n_s_waveDir,&__pyx_n_s_g,&__pyx_n_s_N,&__pyx_n_s_bandFactor,&__pyx_n_s_spectName,&__pyx_n_s_spectral_params,&__pyx_n_s_phi,&__pyx_n_s_fast,0};
    PyObject* values[13] = {0,0,0,0,0,0,0,0,0,0,0,0,0};

    /* "WaveTools.py":1364
 *                  spectral_params, #JONPARAMS = {"gamma": 3.3, "TMA":True,"depth": depth}
 *                  phi,
 *                  fast=True             # <<<<<<<<<<<<<<
 *                  ):
 * # Checking length of arrays / lists to be equal to NSpectra
 */
    values[12] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Nspectra)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Tp)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 12, 13, 1); __PYX_ERR(0, 1351, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Hs)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 12, 13, 2); __PYX_ERR(0, 1351, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mwl)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 12, 13, 3); __PYX_ERR(0, 1351, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_depth)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 12, 13, 4); __PYX_ERR(0, 1351, __pyx_L3_error)
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_waveDir)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 12, 13, 5); __PYX_ERR(0, 1351, __pyx_L3_error)
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 12, 13, 6); __PYX_ERR(0, 1351, __pyx_L3_error)
        }
        case  7:
        if (likely((values[7] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_N)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 12, 13, 7); __PYX_ERR(0, 1351, __pyx_L3_error)
        }
        case  8:
        if (likely((values[8] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bandFactor)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 12, 13, 8); __PYX_ERR(0, 1351, __pyx_L3_error)
        }
        case  9:
        if (likely((values[9] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_spectName)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 12, 13, 9); __PYX_ERR(0, 1351, __pyx_L3_error)
        }
        case 10:
        if (likely((values[10] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_spectral_params)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 12, 13, 10); __PYX_ERR(0, 1351, __pyx_L3_error)
        }
        case 11:
        if (likely((values[11] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_phi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 12, 13, 11); __PYX_ERR(0, 1351, __pyx_L3_error)
        }
        case 12:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fast);
          if (value) { values[12] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1351, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_Nspectra = values[0];
    __pyx_v_Tp = values[1];
    __pyx_v_Hs = values[2];
    __pyx_v_mwl = values[3];
    __pyx_v_depth = values[4];
    __pyx_v_waveDir = values[5];
    __pyx_v_g = values[6];
    __pyx_v_N = values[7];
    __pyx_v_bandFactor = values[8];
    __pyx_v_spectName = values[9];
    __pyx_v_spectral_params = values[10];
    __pyx_v_phi = values[11];
    __pyx_v_fast = values[12];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 12, 13, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1351, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("WaveTools.MultiSpectraRandomWaves.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9WaveTools_23MultiSpectraRandomWaves___cinit__(((struct __pyx_obj_9WaveTools_MultiSpectraRandomWaves *)__pyx_v_self), __pyx_v_Nspectra, __pyx_v_Tp, __pyx_v_Hs, __pyx_v_mwl, __pyx_v_depth, __pyx_v_waveDir, __pyx_v_g, __pyx_v_N, __pyx_v_bandFactor, __pyx_v_spectName, __pyx_v_spectral_params, __pyx_v_phi, __pyx_v_fast);

  /* "WaveTools.py":1351
 *                  Switch for optimised functions
 *     """
 *     def __cinit__(self,             # <<<<<<<<<<<<<<
 *                  Nspectra,
 *                  Tp, # np array with
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9WaveTools_23MultiSpectraRandomWaves___cinit__(struct __pyx_obj_9WaveTools_MultiSpectraRandomWaves *__pyx_v_self, PyObject *__pyx_v_Nspectra, PyObject *__pyx_v_Tp, PyObject *__pyx_v_Hs, PyObject *__pyx_v_mwl, PyObject *__pyx_v_depth, PyObject *__pyx_v_waveDir, PyObject *__pyx_v_g, PyObject *__pyx_v_N, PyObject *__pyx_v_bandFactor, PyObject *__pyx_v_spectName, PyObject *__pyx_v_spectral_params, PyObject *__pyx_v_phi, PyObject *__pyx_v_fast) {
  PyObject *__pyx_v_nn = NULL;
  PyObject *__pyx_v_NN = NULL;
  PyObject *__pyx_v_kk = NULL;
  PyObject *__pyx_v_NN1 = NULL;
  struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_RW = NULL;
  PyObject *__pyx_v_ij = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  double __pyx_t_13;
  PyObject *(*__pyx_t_14)(PyObject *);
  int __pyx_t_15;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  Py_ssize_t __pyx_t_22;
  double *__pyx_t_23;
  PyObject *(*__pyx_t_24)(PyObject *);
  Py_ssize_t __pyx_t_25;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "WaveTools.py":1367
 *                  ):
 * # Checking length of arrays / lists to be equal to NSpectra
 *         self.fast = fast             # <<<<<<<<<<<<<<
 *         try:
 *             if (len(Tp) != Nspectra) or (len(Hs) != Nspectra) or (len(waveDir) != Nspectra) or \
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_fast); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1367, __pyx_L1_error)
  __pyx_v_self->fast = __pyx_t_1;

  /* "WaveTools.py":1368
 * # Checking length of arrays / lists to be equal to NSpectra
 *         self.fast = fast
 *         try:             # <<<<<<<<<<<<<<
 *             if (len(Tp) != Nspectra) or (len(Hs) != Nspectra) or (len(waveDir) != Nspectra) or \
 *                (len(N) != Nspectra) or (len(bandFactor) != Nspectra) or \
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    /*try:*/ {

      /* "WaveTools.py":1369
 *         self.fast = fast
 *         try:
 *             if (len(Tp) != Nspectra) or (len(Hs) != Nspectra) or (len(waveDir) != Nspectra) or \             # <<<<<<<<<<<<<<
 *                (len(N) != Nspectra) or (len(bandFactor) != Nspectra) or \
 *                (len(spectName) != Nspectra) or (len(spectral_params) != Nspectra) or(len(phi) != Nspectra):
 */
      __pyx_t_6 = PyObject_Length(__pyx_v_Tp); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 1369, __pyx_L3_error)
      __pyx_t_7 = PyInt_FromSsize_t(__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1369, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PyObject_RichCompare(__pyx_t_7, __pyx_v_Nspectra, Py_NE); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1369, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 1369, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (!__pyx_t_9) {
      } else {
        __pyx_t_5 = __pyx_t_9;
        goto __pyx_L12_bool_binop_done;
      }
      __pyx_t_6 = PyObject_Length(__pyx_v_Hs); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 1369, __pyx_L3_error)
      __pyx_t_8 = PyInt_FromSsize_t(__pyx_t_6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1369, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_7 = PyObject_RichCompare(__pyx_t_8, __pyx_v_Nspectra, Py_NE); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1369, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 1369, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (!__pyx_t_9) {
      } else {
        __pyx_t_5 = __pyx_t_9;
        goto __pyx_L12_bool_binop_done;
      }
      __pyx_t_6 = PyObject_Length(__pyx_v_waveDir); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 1369, __pyx_L3_error)
      __pyx_t_7 = PyInt_FromSsize_t(__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1369, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PyObject_RichCompare(__pyx_t_7, __pyx_v_Nspectra, Py_NE); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1369, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 1369, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (!__pyx_t_9) {
      } else {
        __pyx_t_5 = __pyx_t_9;
        goto __pyx_L12_bool_binop_done;
      }

      /* "WaveTools.py":1370
 *         try:
 *             if (len(Tp) != Nspectra) or (len(Hs) != Nspectra) or (len(waveDir) != Nspectra) or \
 *                (len(N) != Nspectra) or (len(bandFactor) != Nspectra) or \             # <<<<<<<<<<<<<<
 *                (len(spectName) != Nspectra) or (len(spectral_params) != Nspectra) or(len(phi) != Nspectra):
 * 
 */
      __pyx_t_6 = PyObject_Length(__pyx_v_N); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 1370, __pyx_L3_error)
      __pyx_t_8 = PyInt_FromSsize_t(__pyx_t_6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1370, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_7 = PyObject_RichCompare(__pyx_t_8, __pyx_v_Nspectra, Py_NE); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1370, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 1370, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (!__pyx_t_9) {
      } else {
        __pyx_t_5 = __pyx_t_9;
        goto __pyx_L12_bool_binop_done;
      }
      __pyx_t_6 = PyObject_Length(__pyx_v_bandFactor); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 1370, __pyx_L3_error)
      __pyx_t_7 = PyInt_FromSsize_t(__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1370, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PyObject_RichCompare(__pyx_t_7, __pyx_v_Nspectra, Py_NE); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1370, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 1370, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (!__pyx_t_9) {
      } else {
        __pyx_t_5 = __pyx_t_9;
        goto __pyx_L12_bool_binop_done;
      }

      /* "WaveTools.py":1371
 *             if (len(Tp) != Nspectra) or (len(Hs) != Nspectra) or (len(waveDir) != Nspectra) or \
 *                (len(N) != Nspectra) or (len(bandFactor) != Nspectra) or \
 *                (len(spectName) != Nspectra) or (len(spectral_params) != Nspectra) or(len(phi) != Nspectra):             # <<<<<<<<<<<<<<
 * 
 *                 logEvent('ERROR! Wavetools.py: Parameters passed in MultiSpectraRandomWaves must be in array or list form with length Nspectra  ')
 */
      __pyx_t_6 = PyObject_Length(__pyx_v_spectName); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 1371, __pyx_L3_error)
      __pyx_t_8 = PyInt_FromSsize_t(__pyx_t_6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1371, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_7 = PyObject_RichCompare(__pyx_t_8, __pyx_v_Nspectra, Py_NE); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1371, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 1371, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (!__pyx_t_9) {
      } else {
        __pyx_t_5 = __pyx_t_9;
        goto __pyx_L12_bool_binop_done;
      }
      __pyx_t_6 = PyObject_Length(__pyx_v_spectral_params); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 1371, __pyx_L3_error)
      __pyx_t_7 = PyInt_FromSsize_t(__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1371, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PyObject_RichCompare(__pyx_t_7, __pyx_v_Nspectra, Py_NE); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1371, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 1371, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (!__pyx_t_9) {
      } else {
        __pyx_t_5 = __pyx_t_9;
        goto __pyx_L12_bool_binop_done;
      }
      __pyx_t_6 = PyObject_Length(__pyx_v_phi); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 1371, __pyx_L3_error)
      __pyx_t_8 = PyInt_FromSsize_t(__pyx_t_6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1371, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_7 = PyObject_RichCompare(__pyx_t_8, __pyx_v_Nspectra, Py_NE); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1371, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 1371, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_5 = __pyx_t_9;
      __pyx_L12_bool_binop_done:;

      /* "WaveTools.py":1369
 *         self.fast = fast
 *         try:
 *             if (len(Tp) != Nspectra) or (len(Hs) != Nspectra) or (len(waveDir) != Nspectra) or \             # <<<<<<<<<<<<<<
 *                (len(N) != Nspectra) or (len(bandFactor) != Nspectra) or \
 *                (len(spectName) != Nspectra) or (len(spectral_params) != Nspectra) or(len(phi) != Nspectra):
 */
      if (__pyx_t_5) {

        /* "WaveTools.py":1373
 *                (len(spectName) != Nspectra) or (len(spectral_params) != Nspectra) or(len(phi) != Nspectra):
 * 
 *                 logEvent('ERROR! Wavetools.py: Parameters passed in MultiSpectraRandomWaves must be in array or list form with length Nspectra  ')             # <<<<<<<<<<<<<<
 *                 sys.exit(1)
 * 
 */
        __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_logEvent); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1373, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_tuple__82, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1373, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "WaveTools.py":1374
 * 
 *                 logEvent('ERROR! Wavetools.py: Parameters passed in MultiSpectraRandomWaves must be in array or list form with length Nspectra  ')
 *                 sys.exit(1)             # <<<<<<<<<<<<<<
 * 
 *         except:
 */
        __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_sys); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1374, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_exit); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1374, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_tuple__83, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1374, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "WaveTools.py":1369
 *         self.fast = fast
 *         try:
 *             if (len(Tp) != Nspectra) or (len(Hs) != Nspectra) or (len(waveDir) != Nspectra) or \             # <<<<<<<<<<<<<<
 *                (len(N) != Nspectra) or (len(bandFactor) != Nspectra) or \
 *                (len(spectName) != Nspectra) or (len(spectral_params) != Nspectra) or(len(phi) != Nspectra):
 */
      }

      /* "WaveTools.py":1368
 * # Checking length of arrays / lists to be equal to NSpectra
 *         self.fast = fast
 *         try:             # <<<<<<<<<<<<<<
 *             if (len(Tp) != Nspectra) or (len(Hs) != Nspectra) or (len(waveDir) != Nspectra) or \
 *                (len(N) != Nspectra) or (len(bandFactor) != Nspectra) or \
 */
    }
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L10_try_end;
    __pyx_L3_error:;
    __Pyx_PyThreadState_assign
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "WaveTools.py":1376
 *                 sys.exit(1)
 * 
 *         except:             # <<<<<<<<<<<<<<
 *             logEvent('ERROR! Wavetools.py: Parameters passed in MultiSpectraRandomWaves must be in array or list form with length Nspectra  ')
 *             sys.exit(1)
 */
    /*except:*/ {
      __Pyx_AddTraceback("WaveTools.MultiSpectraRandomWaves.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_7, &__pyx_t_10) < 0) __PYX_ERR(0, 1376, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_10);

      /* "WaveTools.py":1377
 * 
 *         except:
 *             logEvent('ERROR! Wavetools.py: Parameters passed in MultiSpectraRandomWaves must be in array or list form with length Nspectra  ')             # <<<<<<<<<<<<<<
 *             sys.exit(1)
 *         # Initialize numpy arrays for complete reconstruction
 */
      __pyx_t_11 = __Pyx_GetModuleGlobalName(__pyx_n_s_logEvent); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1377, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_tuple__84, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1377, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

      /* "WaveTools.py":1378
 *         except:
 *             logEvent('ERROR! Wavetools.py: Parameters passed in MultiSpectraRandomWaves must be in array or list form with length Nspectra  ')
 *             sys.exit(1)             # <<<<<<<<<<<<<<
 *         # Initialize numpy arrays for complete reconstruction
 *         self.Nall = 0
 */
      __pyx_t_12 = __Pyx_GetModuleGlobalName(__pyx_n_s_sys); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1378, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_exit); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1378, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_tuple__85, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1378, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      goto __pyx_L4_exception_handled;
    }
    __pyx_L5_except_error:;

    /* "WaveTools.py":1368
 * # Checking length of arrays / lists to be equal to NSpectra
 *         self.fast = fast
 *         try:             # <<<<<<<<<<<<<<
 *             if (len(Tp) != Nspectra) or (len(Hs) != Nspectra) or (len(waveDir) != Nspectra) or \
 *                (len(N) != Nspectra) or (len(bandFactor) != Nspectra) or \
 */
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    __pyx_L10_try_end:;
  }

  /* "WaveTools.py":1380
 *             sys.exit(1)
 *         # Initialize numpy arrays for complete reconstruction
 *         self.Nall = 0             # <<<<<<<<<<<<<<
 *         self.mwl = mwl
 *         self.depth = depth
 */
  __pyx_v_self->Nall = 0;

  /* "WaveTools.py":1381
 *         # Initialize numpy arrays for complete reconstruction
 *         self.Nall = 0
 *         self.mwl = mwl             # <<<<<<<<<<<<<<
 *         self.depth = depth
 *         self.g = np.array(g)
 */
  __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_v_mwl); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1381, __pyx_L1_error)
  __pyx_v_self->mwl = __pyx_t_13;

  /* "WaveTools.py":1382
 *         self.Nall = 0
 *         self.mwl = mwl
 *         self.depth = depth             # <<<<<<<<<<<<<<
 *         self.g = np.array(g)
 *         self.vDir = setVertDir(g)
 */
  __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_v_depth); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1382, __pyx_L1_error)
  __pyx_v_self->depth = __pyx_t_13;

  /* "WaveTools.py":1383
 *         self.mwl = mwl
 *         self.depth = depth
 *         self.g = np.array(g)             # <<<<<<<<<<<<<<
 *         self.vDir = setVertDir(g)
 *         self.gAbs = sqrt(g[0]*g[0]+g[1]*g[1]+g[2]*g[2])
 */
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1383, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_array); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1383, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  if (!__pyx_t_7) {
    __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_g); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1383, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_8)) {
      PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_v_g};
      __pyx_t_10 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1383, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_10);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
      PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_v_g};
      __pyx_t_10 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1383, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_10);
    } else
    #endif
    {
      __pyx_t_12 = PyTuple_New(1+1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1383, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_7); __pyx_t_7 = NULL;
      __Pyx_INCREF(__pyx_v_g);
      __Pyx_GIVEREF(__pyx_v_g);
      PyTuple_SET_ITEM(__pyx_t_12, 0+1, __pyx_v_g);
      __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_12, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1383, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (!(likely(((__pyx_t_10) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_10, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1383, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_10);
  __Pyx_GOTREF(__pyx_v_self->g);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->g));
  __pyx_v_self->g = ((PyArrayObject *)__pyx_t_10);
  __pyx_t_10 = 0;

  /* "WaveTools.py":1384
 *         self.depth = depth
 *         self.g = np.array(g)
 *         self.vDir = setVertDir(g)             # <<<<<<<<<<<<<<
 *         self.gAbs = sqrt(g[0]*g[0]+g[1]*g[1]+g[2]*g[2])
 * 
 */
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_setVertDir); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1384, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_12 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_12)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_12);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  if (!__pyx_t_12) {
    __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_g); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1384, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_8)) {
      PyObject *__pyx_temp[2] = {__pyx_t_12, __pyx_v_g};
      __pyx_t_10 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1384, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_GOTREF(__pyx_t_10);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
      PyObject *__pyx_temp[2] = {__pyx_t_12, __pyx_v_g};
      __pyx_t_10 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1384, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_GOTREF(__pyx_t_10);
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1384, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_12); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_12); __pyx_t_12 = NULL;
      __Pyx_INCREF(__pyx_v_g);
      __Pyx_GIVEREF(__pyx_v_g);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_v_g);
      __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_7, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1384, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (!(likely(((__pyx_t_10) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_10, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1384, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_10);
  __Pyx_GOTREF(__pyx_v_self->vDir);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->vDir));
  __pyx_v_self->vDir = ((PyArrayObject *)__pyx_t_10);
  __pyx_t_10 = 0;

  /* "WaveTools.py":1385
 *         self.g = np.array(g)
 *         self.vDir = setVertDir(g)
 *         self.gAbs = sqrt(g[0]*g[0]+g[1]*g[1]+g[2]*g[2])             # <<<<<<<<<<<<<<
 * 
 *         for nn in N:
 */
  __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_g, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_g, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_7 = PyNumber_Multiply(__pyx_t_10, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_g, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_g, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_12 = PyNumber_Multiply(__pyx_t_8, __pyx_t_10); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = PyNumber_Add(__pyx_t_7, __pyx_t_12); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_t_12 = __Pyx_GetItemInt(__pyx_v_g, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_g, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyNumber_Multiply(__pyx_t_12, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyNumber_Add(__pyx_t_10, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_t_7); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1385, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_self->gAbs = sqrt(__pyx_t_13);

  /* "WaveTools.py":1387
 *         self.gAbs = sqrt(g[0]*g[0]+g[1]*g[1]+g[2]*g[2])
 * 
 *         for nn in N:             # <<<<<<<<<<<<<<
 *             self.Nall+=nn
 *         if(self.Nall > 10000):
 */
  if (likely(PyList_CheckExact(__pyx_v_N)) || PyTuple_CheckExact(__pyx_v_N)) {
    __pyx_t_7 = __pyx_v_N; __Pyx_INCREF(__pyx_t_7); __pyx_t_6 = 0;
    __pyx_t_14 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_v_N); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1387, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_14 = Py_TYPE(__pyx_t_7)->tp_iternext; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1387, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_14)) {
      if (likely(PyList_CheckExact(__pyx_t_7))) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_7)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_8 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_6); __Pyx_INCREF(__pyx_t_8); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 1387, __pyx_L1_error)
        #else
        __pyx_t_8 = PySequence_ITEM(__pyx_t_7, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1387, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        #endif
      } else {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_7)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_6); __Pyx_INCREF(__pyx_t_8); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 1387, __pyx_L1_error)
        #else
        __pyx_t_8 = PySequence_ITEM(__pyx_t_7, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1387, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        #endif
      }
    } else {
      __pyx_t_8 = __pyx_t_14(__pyx_t_7);
      if (unlikely(!__pyx_t_8)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1387, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_8);
    }
    __Pyx_XDECREF_SET(__pyx_v_nn, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "WaveTools.py":1388
 * 
 *         for nn in N:
 *             self.Nall+=nn             # <<<<<<<<<<<<<<
 *         if(self.Nall > 10000):
 *             logEvent("ERROR! Wavetools.py: Maximum (number of frequencies) x (No of spectra) for MultispectraRandomWaves is 10000 ",level=0)
 */
    __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_self->Nall); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1388, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_10 = PyNumber_InPlaceAdd(__pyx_t_8, __pyx_v_nn); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1388, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_15 = __Pyx_PyInt_As_int(__pyx_t_10); if (unlikely((__pyx_t_15 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1388, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_v_self->Nall = __pyx_t_15;

    /* "WaveTools.py":1387
 *         self.gAbs = sqrt(g[0]*g[0]+g[1]*g[1]+g[2]*g[2])
 * 
 *         for nn in N:             # <<<<<<<<<<<<<<
 *             self.Nall+=nn
 *         if(self.Nall > 10000):
 */
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "WaveTools.py":1389
 *         for nn in N:
 *             self.Nall+=nn
 *         if(self.Nall > 10000):             # <<<<<<<<<<<<<<
 *             logEvent("ERROR! Wavetools.py: Maximum (number of frequencies) x (No of spectra) for MultispectraRandomWaves is 10000 ",level=0)
 * 
 */
  __pyx_t_5 = ((__pyx_v_self->Nall > 0x2710) != 0);
  if (__pyx_t_5) {

    /* "WaveTools.py":1390
 *             self.Nall+=nn
 *         if(self.Nall > 10000):
 *             logEvent("ERROR! Wavetools.py: Maximum (number of frequencies) x (No of spectra) for MultispectraRandomWaves is 10000 ",level=0)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_logEvent); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1390, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_10 = PyDict_New(); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1390, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    if (PyDict_SetItem(__pyx_t_10, __pyx_n_s_level, __pyx_int_0) < 0) __PYX_ERR(0, 1390, __pyx_L1_error)
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_tuple__86, __pyx_t_10); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1390, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "WaveTools.py":1389
 *         for nn in N:
 *             self.Nall+=nn
 *         if(self.Nall > 10000):             # <<<<<<<<<<<<<<
 *             logEvent("ERROR! Wavetools.py: Maximum (number of frequencies) x (No of spectra) for MultispectraRandomWaves is 10000 ",level=0)
 * 
 */
  }

  /* "WaveTools.py":1393
 * 
 * 
 *         self.tanhFM = np.zeros(self.Nall,"d")             # <<<<<<<<<<<<<<
 *         self.omegaM = np.zeros(self.Nall,"d")
 *         self.kiM = np.zeros(self.Nall,"d")
 */
  __pyx_t_10 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_zeros); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = __Pyx_PyInt_From_int(__pyx_v_self->Nall); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_12 = NULL;
  __pyx_t_15 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_12)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_12);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
      __pyx_t_15 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_7)) {
    PyObject *__pyx_temp[3] = {__pyx_t_12, __pyx_t_10, __pyx_n_s_d};
    __pyx_t_8 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_15, 2+__pyx_t_15); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1393, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
    PyObject *__pyx_temp[3] = {__pyx_t_12, __pyx_t_10, __pyx_n_s_d};
    __pyx_t_8 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_15, 2+__pyx_t_15); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1393, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  } else
  #endif
  {
    __pyx_t_11 = PyTuple_New(2+__pyx_t_15); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1393, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    if (__pyx_t_12) {
      __Pyx_GIVEREF(__pyx_t_12); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_12); __pyx_t_12 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_10);
    PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_15, __pyx_t_10);
    __Pyx_INCREF(__pyx_n_s_d);
    __Pyx_GIVEREF(__pyx_n_s_d);
    PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_15, __pyx_n_s_d);
    __pyx_t_10 = 0;
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_11, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1393, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1393, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_8);
  __Pyx_GOTREF(__pyx_v_self->tanhFM);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->tanhFM));
  __pyx_v_self->tanhFM = ((PyArrayObject *)__pyx_t_8);
  __pyx_t_8 = 0;

  /* "WaveTools.py":1394
 * 
 *         self.tanhFM = np.zeros(self.Nall,"d")
 *         self.omegaM = np.zeros(self.Nall,"d")             # <<<<<<<<<<<<<<
 *         self.kiM = np.zeros(self.Nall,"d")
 *         self.aiM = np.zeros(self.Nall,"d")
 */
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1394, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_zeros); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1394, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_self->Nall); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1394, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_10 = NULL;
  __pyx_t_15 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
    __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_11);
    if (likely(__pyx_t_10)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_11, function);
      __pyx_t_15 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_11)) {
    PyObject *__pyx_temp[3] = {__pyx_t_10, __pyx_t_7, __pyx_n_s_d};
    __pyx_t_8 = __Pyx_PyFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_15, 2+__pyx_t_15); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1394, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_11)) {
    PyObject *__pyx_temp[3] = {__pyx_t_10, __pyx_t_7, __pyx_n_s_d};
    __pyx_t_8 = __Pyx_PyCFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_15, 2+__pyx_t_15); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1394, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  {
    __pyx_t_12 = PyTuple_New(2+__pyx_t_15); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1394, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    if (__pyx_t_10) {
      __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_10); __pyx_t_10 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_12, 0+__pyx_t_15, __pyx_t_7);
    __Pyx_INCREF(__pyx_n_s_d);
    __Pyx_GIVEREF(__pyx_n_s_d);
    PyTuple_SET_ITEM(__pyx_t_12, 1+__pyx_t_15, __pyx_n_s_d);
    __pyx_t_7 = 0;
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_12, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1394, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  }
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1394, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_8);
  __Pyx_GOTREF(__pyx_v_self->omegaM);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->omegaM));
  __pyx_v_self->omegaM = ((PyArrayObject *)__pyx_t_8);
  __pyx_t_8 = 0;

  /* "WaveTools.py":1395
 *         self.tanhFM = np.zeros(self.Nall,"d")
 *         self.omegaM = np.zeros(self.Nall,"d")
 *         self.kiM = np.zeros(self.Nall,"d")             # <<<<<<<<<<<<<<
 *         self.aiM = np.zeros(self.Nall,"d")
 *         self.kDirM = np.zeros((self.Nall,3),"d")
 */
  __pyx_t_11 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_zeros); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_t_11 = __Pyx_PyInt_From_int(__pyx_v_self->Nall); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_7 = NULL;
  __pyx_t_15 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_12))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_12);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_12, function);
      __pyx_t_15 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_12)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_11, __pyx_n_s_d};
    __pyx_t_8 = __Pyx_PyFunction_FastCall(__pyx_t_12, __pyx_temp+1-__pyx_t_15, 2+__pyx_t_15); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1395, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_12)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_11, __pyx_n_s_d};
    __pyx_t_8 = __Pyx_PyCFunction_FastCall(__pyx_t_12, __pyx_temp+1-__pyx_t_15, 2+__pyx_t_15); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1395, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  } else
  #endif
  {
    __pyx_t_10 = PyTuple_New(2+__pyx_t_15); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1395, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_11);
    PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_15, __pyx_t_11);
    __Pyx_INCREF(__pyx_n_s_d);
    __Pyx_GIVEREF(__pyx_n_s_d);
    PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_15, __pyx_n_s_d);
    __pyx_t_11 = 0;
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_t_10, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1395, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  }
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1395, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_8);
  __Pyx_GOTREF(__pyx_v_self->kiM);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->kiM));
  __pyx_v_self->kiM = ((PyArrayObject *)__pyx_t_8);
  __pyx_t_8 = 0;

  /* "WaveTools.py":1396
 *         self.omegaM = np.zeros(self.Nall,"d")
 *         self.kiM = np.zeros(self.Nall,"d")
 *         self.aiM = np.zeros(self.Nall,"d")             # <<<<<<<<<<<<<<
 *         self.kDirM = np.zeros((self.Nall,3),"d")
 *         self.phiM= np.zeros(self.Nall,"d")
 */
  __pyx_t_12 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_zeros); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_t_12 = __Pyx_PyInt_From_int(__pyx_v_self->Nall); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_11 = NULL;
  __pyx_t_15 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_10))) {
    __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_10);
    if (likely(__pyx_t_11)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
      __Pyx_INCREF(__pyx_t_11);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_10, function);
      __pyx_t_15 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_10)) {
    PyObject *__pyx_temp[3] = {__pyx_t_11, __pyx_t_12, __pyx_n_s_d};
    __pyx_t_8 = __Pyx_PyFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_15, 2+__pyx_t_15); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1396, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_10)) {
    PyObject *__pyx_temp[3] = {__pyx_t_11, __pyx_t_12, __pyx_n_s_d};
    __pyx_t_8 = __Pyx_PyCFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_15, 2+__pyx_t_15); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1396, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_15); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1396, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_11) {
      __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_11); __pyx_t_11 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_12);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_15, __pyx_t_12);
    __Pyx_INCREF(__pyx_n_s_d);
    __Pyx_GIVEREF(__pyx_n_s_d);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_15, __pyx_n_s_d);
    __pyx_t_12 = 0;
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_7, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1396, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1396, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_8);
  __Pyx_GOTREF(__pyx_v_self->aiM);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->aiM));
  __pyx_v_self->aiM = ((PyArrayObject *)__pyx_t_8);
  __pyx_t_8 = 0;

  /* "WaveTools.py":1397
 *         self.kiM = np.zeros(self.Nall,"d")
 *         self.aiM = np.zeros(self.Nall,"d")
 *         self.kDirM = np.zeros((self.Nall,3),"d")             # <<<<<<<<<<<<<<
 *         self.phiM= np.zeros(self.Nall,"d")
 *         self.waveDir = np.zeros((self.Nall,3),"d")
 */
  __pyx_t_10 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1397, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_zeros); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1397, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = __Pyx_PyInt_From_int(__pyx_v_self->Nall); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1397, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_12 = PyTuple_New(2); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1397, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_10);
  __Pyx_INCREF(__pyx_int_3);
  __Pyx_GIVEREF(__pyx_int_3);
  PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_int_3);
  __pyx_t_10 = 0;
  __pyx_t_10 = NULL;
  __pyx_t_15 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_10)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
      __pyx_t_15 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_7)) {
    PyObject *__pyx_temp[3] = {__pyx_t_10, __pyx_t_12, __pyx_n_s_d};
    __pyx_t_8 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_15, 2+__pyx_t_15); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1397, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
    PyObject *__pyx_temp[3] = {__pyx_t_10, __pyx_t_12, __pyx_n_s_d};
    __pyx_t_8 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_15, 2+__pyx_t_15); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1397, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  } else
  #endif
  {
    __pyx_t_11 = PyTuple_New(2+__pyx_t_15); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1397, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    if (__pyx_t_10) {
      __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_10); __pyx_t_10 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_12);
    PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_15, __pyx_t_12);
    __Pyx_INCREF(__pyx_n_s_d);
    __Pyx_GIVEREF(__pyx_n_s_d);
    PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_15, __pyx_n_s_d);
    __pyx_t_12 = 0;
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_11, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1397, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1397, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_8);
  __Pyx_GOTREF(__pyx_v_self->kDirM);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->kDirM));
  __pyx_v_self->kDirM = ((PyArrayObject *)__pyx_t_8);
  __pyx_t_8 = 0;

  /* "WaveTools.py":1398
 *         self.aiM = np.zeros(self.Nall,"d")
 *         self.kDirM = np.zeros((self.Nall,3),"d")
 *         self.phiM= np.zeros(self.Nall,"d")             # <<<<<<<<<<<<<<
 *         self.waveDir = np.zeros((self.Nall,3),"d")
 * 
 */
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1398, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_zeros); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1398, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_self->Nall); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1398, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_12 = NULL;
  __pyx_t_15 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
    __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_11);
    if (likely(__pyx_t_12)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
      __Pyx_INCREF(__pyx_t_12);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_11, function);
      __pyx_t_15 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_11)) {
    PyObject *__pyx_temp[3] = {__pyx_t_12, __pyx_t_7, __pyx_n_s_d};
    __pyx_t_8 = __Pyx_PyFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_15, 2+__pyx_t_15); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1398, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_11)) {
    PyObject *__pyx_temp[3] = {__pyx_t_12, __pyx_t_7, __pyx_n_s_d};
    __pyx_t_8 = __Pyx_PyCFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_15, 2+__pyx_t_15); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1398, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  {
    __pyx_t_10 = PyTuple_New(2+__pyx_t_15); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1398, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    if (__pyx_t_12) {
      __Pyx_GIVEREF(__pyx_t_12); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_12); __pyx_t_12 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_15, __pyx_t_7);
    __Pyx_INCREF(__pyx_n_s_d);
    __Pyx_GIVEREF(__pyx_n_s_d);
    PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_15, __pyx_n_s_d);
    __pyx_t_7 = 0;
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_10, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1398, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  }
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1398, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_8);
  __Pyx_GOTREF(__pyx_v_self->phiM);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->phiM));
  __pyx_v_self->phiM = ((PyArrayObject *)__pyx_t_8);
  __pyx_t_8 = 0;

  /* "WaveTools.py":1399
 *         self.kDirM = np.zeros((self.Nall,3),"d")
 *         self.phiM= np.zeros(self.Nall,"d")
 *         self.waveDir = np.zeros((self.Nall,3),"d")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_11 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_zeros); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_t_11 = __Pyx_PyInt_From_int(__pyx_v_self->Nall); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_11);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_11);
  __Pyx_INCREF(__pyx_int_3);
  __Pyx_GIVEREF(__pyx_int_3);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_int_3);
  __pyx_t_11 = 0;
  __pyx_t_11 = NULL;
  __pyx_t_15 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_10))) {
    __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_10);
    if (likely(__pyx_t_11)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
      __Pyx_INCREF(__pyx_t_11);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_10, function);
      __pyx_t_15 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_10)) {
    PyObject *__pyx_temp[3] = {__pyx_t_11, __pyx_t_7, __pyx_n_s_d};
    __pyx_t_8 = __Pyx_PyFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_15, 2+__pyx_t_15); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1399, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_10)) {
    PyObject *__pyx_temp[3] = {__pyx_t_11, __pyx_t_7, __pyx_n_s_d};
    __pyx_t_8 = __Pyx_PyCFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_15, 2+__pyx_t_15); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1399, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  {
    __pyx_t_12 = PyTuple_New(2+__pyx_t_15); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1399, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    if (__pyx_t_11) {
      __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_11); __pyx_t_11 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_12, 0+__pyx_t_15, __pyx_t_7);
    __Pyx_INCREF(__pyx_n_s_d);
    __Pyx_GIVEREF(__pyx_n_s_d);
    PyTuple_SET_ITEM(__pyx_t_12, 1+__pyx_t_15, __pyx_n_s_d);
    __pyx_t_7 = 0;
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_12, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1399, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  }
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1399, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_8);
  __Pyx_GOTREF(__pyx_v_self->waveDir);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->waveDir));
  __pyx_v_self->waveDir = ((PyArrayObject *)__pyx_t_8);
  __pyx_t_8 = 0;

  /* "WaveTools.py":1402
 * 
 * 
 *         NN = 0             # <<<<<<<<<<<<<<
 *         for kk in range(Nspectra):
 *             logEvent("INFO Wavetools.py: Reading spectra No %s" %kk)
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_NN = __pyx_int_0;

  /* "WaveTools.py":1403
 * 
 *         NN = 0
 *         for kk in range(Nspectra):             # <<<<<<<<<<<<<<
 *             logEvent("INFO Wavetools.py: Reading spectra No %s" %kk)
 *             NN1 = NN
 */
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_INCREF(__pyx_v_Nspectra);
  __Pyx_GIVEREF(__pyx_v_Nspectra);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_Nspectra);
  __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_8, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (likely(PyList_CheckExact(__pyx_t_10)) || PyTuple_CheckExact(__pyx_t_10)) {
    __pyx_t_8 = __pyx_t_10; __Pyx_INCREF(__pyx_t_8); __pyx_t_6 = 0;
    __pyx_t_14 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_t_10); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1403, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_14 = Py_TYPE(__pyx_t_8)->tp_iternext; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1403, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  for (;;) {
    if (likely(!__pyx_t_14)) {
      if (likely(PyList_CheckExact(__pyx_t_8))) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_8)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_10 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_6); __Pyx_INCREF(__pyx_t_10); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 1403, __pyx_L1_error)
        #else
        __pyx_t_10 = PySequence_ITEM(__pyx_t_8, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1403, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        #endif
      } else {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_8)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_10 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_6); __Pyx_INCREF(__pyx_t_10); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 1403, __pyx_L1_error)
        #else
        __pyx_t_10 = PySequence_ITEM(__pyx_t_8, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1403, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        #endif
      }
    } else {
      __pyx_t_10 = __pyx_t_14(__pyx_t_8);
      if (unlikely(!__pyx_t_10)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1403, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_10);
    }
    __Pyx_XDECREF_SET(__pyx_v_kk, __pyx_t_10);
    __pyx_t_10 = 0;

    /* "WaveTools.py":1404
 *         NN = 0
 *         for kk in range(Nspectra):
 *             logEvent("INFO Wavetools.py: Reading spectra No %s" %kk)             # <<<<<<<<<<<<<<
 *             NN1 = NN
 *             NN +=N[kk]
 */
    __pyx_t_12 = __Pyx_GetModuleGlobalName(__pyx_n_s_logEvent); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1404, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_7 = __Pyx_PyString_Format(__pyx_kp_s_INFO_Wavetools_py_Reading_spectr, __pyx_v_kk); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1404, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_11 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_12))) {
      __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_12);
      if (likely(__pyx_t_11)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_12, function);
      }
    }
    if (!__pyx_t_11) {
      __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_t_7); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1404, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_10);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_12)) {
        PyObject *__pyx_temp[2] = {__pyx_t_11, __pyx_t_7};
        __pyx_t_10 = __Pyx_PyFunction_FastCall(__pyx_t_12, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1404, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_12)) {
        PyObject *__pyx_temp[2] = {__pyx_t_11, __pyx_t_7};
        __pyx_t_10 = __Pyx_PyCFunction_FastCall(__pyx_t_12, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1404, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else
      #endif
      {
        __pyx_t_16 = PyTuple_New(1+1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1404, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_11); __pyx_t_11 = NULL;
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_16, 0+1, __pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_t_16, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1404, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

    /* "WaveTools.py":1405
 *         for kk in range(Nspectra):
 *             logEvent("INFO Wavetools.py: Reading spectra No %s" %kk)
 *             NN1 = NN             # <<<<<<<<<<<<<<
 *             NN +=N[kk]
 *             RW = RandomWaves(
 */
    __Pyx_INCREF(__pyx_v_NN);
    __Pyx_XDECREF_SET(__pyx_v_NN1, __pyx_v_NN);

    /* "WaveTools.py":1406
 *             logEvent("INFO Wavetools.py: Reading spectra No %s" %kk)
 *             NN1 = NN
 *             NN +=N[kk]             # <<<<<<<<<<<<<<
 *             RW = RandomWaves(
 *                 Tp[kk], # np array with
 */
    __pyx_t_10 = PyObject_GetItem(__pyx_v_N, __pyx_v_kk); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1406, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_12 = PyNumber_InPlaceAdd(__pyx_v_NN, __pyx_t_10); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1406, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF_SET(__pyx_v_NN, __pyx_t_12);
    __pyx_t_12 = 0;

    /* "WaveTools.py":1408
 *             NN +=N[kk]
 *             RW = RandomWaves(
 *                 Tp[kk], # np array with             # <<<<<<<<<<<<<<
 *                 Hs[kk],
 *                 mwl,#m significant wave height
 */
    __pyx_t_12 = PyObject_GetItem(__pyx_v_Tp, __pyx_v_kk); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1408, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);

    /* "WaveTools.py":1409
 *             RW = RandomWaves(
 *                 Tp[kk], # np array with
 *                 Hs[kk],             # <<<<<<<<<<<<<<
 *                 mwl,#m significant wave height
 *                 depth,           #m depth
 */
    __pyx_t_10 = PyObject_GetItem(__pyx_v_Hs, __pyx_v_kk); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1409, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);

    /* "WaveTools.py":1412
 *                 mwl,#m significant wave height
 *                 depth,           #m depth
 *                 waveDir[kk],             # <<<<<<<<<<<<<<
 *                 g,      #peak  frequency
 *                 N[kk],
 */
    __pyx_t_16 = PyObject_GetItem(__pyx_v_waveDir, __pyx_v_kk); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1412, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);

    /* "WaveTools.py":1414
 *                 waveDir[kk],
 *                 g,      #peak  frequency
 *                 N[kk],             # <<<<<<<<<<<<<<
 *                 bandFactor[kk],         #accelerationof gravity
 *                 spectName[kk],# random words will result in error and return the available spectra
 */
    __pyx_t_7 = PyObject_GetItem(__pyx_v_N, __pyx_v_kk); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1414, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);

    /* "WaveTools.py":1415
 *                 g,      #peak  frequency
 *                 N[kk],
 *                 bandFactor[kk],         #accelerationof gravity             # <<<<<<<<<<<<<<
 *                 spectName[kk],# random words will result in error and return the available spectra
 *                 spectral_params[kk], #JONPARAMS = {"gamma": 3.3, "TMA":True,"depth": depth}
 */
    __pyx_t_11 = PyObject_GetItem(__pyx_v_bandFactor, __pyx_v_kk); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1415, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);

    /* "WaveTools.py":1416
 *                 N[kk],
 *                 bandFactor[kk],         #accelerationof gravity
 *                 spectName[kk],# random words will result in error and return the available spectra             # <<<<<<<<<<<<<<
 *                 spectral_params[kk], #JONPARAMS = {"gamma": 3.3, "TMA":True,"depth": depth}
 *                 phi[kk],
 */
    __pyx_t_17 = PyObject_GetItem(__pyx_v_spectName, __pyx_v_kk); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1416, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);

    /* "WaveTools.py":1417
 *                 bandFactor[kk],         #accelerationof gravity
 *                 spectName[kk],# random words will result in error and return the available spectra
 *                 spectral_params[kk], #JONPARAMS = {"gamma": 3.3, "TMA":True,"depth": depth}             # <<<<<<<<<<<<<<
 *                 phi[kk],
 *                 self.fast
 */
    __pyx_t_18 = PyObject_GetItem(__pyx_v_spectral_params, __pyx_v_kk); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1417, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);

    /* "WaveTools.py":1418
 *                 spectName[kk],# random words will result in error and return the available spectra
 *                 spectral_params[kk], #JONPARAMS = {"gamma": 3.3, "TMA":True,"depth": depth}
 *                 phi[kk],             # <<<<<<<<<<<<<<
 *                 self.fast
 *                 )
 */
    __pyx_t_19 = PyObject_GetItem(__pyx_v_phi, __pyx_v_kk); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 1418, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);

    /* "WaveTools.py":1419
 *                 spectral_params[kk], #JONPARAMS = {"gamma": 3.3, "TMA":True,"depth": depth}
 *                 phi[kk],
 *                 self.fast             # <<<<<<<<<<<<<<
 *                 )
 *             self.tanhFM[NN1:NN] = RW.tanhF
 */
    __pyx_t_20 = __Pyx_PyBool_FromLong(__pyx_v_self->fast); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1419, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_20);

    /* "WaveTools.py":1407
 *             NN1 = NN
 *             NN +=N[kk]
 *             RW = RandomWaves(             # <<<<<<<<<<<<<<
 *                 Tp[kk], # np array with
 *                 Hs[kk],
 */
    __pyx_t_21 = PyTuple_New(12); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 1407, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_21);
    __Pyx_GIVEREF(__pyx_t_12);
    PyTuple_SET_ITEM(__pyx_t_21, 0, __pyx_t_12);
    __Pyx_GIVEREF(__pyx_t_10);
    PyTuple_SET_ITEM(__pyx_t_21, 1, __pyx_t_10);
    __Pyx_INCREF(__pyx_v_mwl);
    __Pyx_GIVEREF(__pyx_v_mwl);
    PyTuple_SET_ITEM(__pyx_t_21, 2, __pyx_v_mwl);
    __Pyx_INCREF(__pyx_v_depth);
    __Pyx_GIVEREF(__pyx_v_depth);
    PyTuple_SET_ITEM(__pyx_t_21, 3, __pyx_v_depth);
    __Pyx_GIVEREF(__pyx_t_16);
    PyTuple_SET_ITEM(__pyx_t_21, 4, __pyx_t_16);
    __Pyx_INCREF(__pyx_v_g);
    __Pyx_GIVEREF(__pyx_v_g);
    PyTuple_SET_ITEM(__pyx_t_21, 5, __pyx_v_g);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_21, 6, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_11);
    PyTuple_SET_ITEM(__pyx_t_21, 7, __pyx_t_11);
    __Pyx_GIVEREF(__pyx_t_17);
    PyTuple_SET_ITEM(__pyx_t_21, 8, __pyx_t_17);
    __Pyx_GIVEREF(__pyx_t_18);
    PyTuple_SET_ITEM(__pyx_t_21, 9, __pyx_t_18);
    __Pyx_GIVEREF(__pyx_t_19);
    PyTuple_SET_ITEM(__pyx_t_21, 10, __pyx_t_19);
    __Pyx_GIVEREF(__pyx_t_20);
    PyTuple_SET_ITEM(__pyx_t_21, 11, __pyx_t_20);
    __pyx_t_12 = 0;
    __pyx_t_10 = 0;
    __pyx_t_16 = 0;
    __pyx_t_7 = 0;
    __pyx_t_11 = 0;
    __pyx_t_17 = 0;
    __pyx_t_18 = 0;
    __pyx_t_19 = 0;
    __pyx_t_20 = 0;
    __pyx_t_20 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9WaveTools_RandomWaves), __pyx_t_21, NULL); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1407, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_20);
    __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
    __Pyx_XDECREF_SET(__pyx_v_RW, ((struct __pyx_obj_9WaveTools_RandomWaves *)__pyx_t_20));
    __pyx_t_20 = 0;

    /* "WaveTools.py":1421
 *                 self.fast
 *                 )
 *             self.tanhFM[NN1:NN] = RW.tanhF             # <<<<<<<<<<<<<<
 *             self.omegaM[NN1:NN] = RW.omega
 *             self.kiM[NN1:NN] = RW.ki
 */
    __pyx_t_20 = ((PyObject *)__pyx_v_RW->tanhF);
    __Pyx_INCREF(__pyx_t_20);
    if (__Pyx_PyObject_SetSlice(((PyObject *)__pyx_v_self->tanhFM), __pyx_t_20, 0, 0, &__pyx_v_NN1, &__pyx_v_NN, NULL, 0, 0, 1) < 0) __PYX_ERR(0, 1421, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;

    /* "WaveTools.py":1422
 *                 )
 *             self.tanhFM[NN1:NN] = RW.tanhF
 *             self.omegaM[NN1:NN] = RW.omega             # <<<<<<<<<<<<<<
 *             self.kiM[NN1:NN] = RW.ki
 *             self.aiM[NN1:NN] = RW.ai
 */
    __pyx_t_20 = ((PyObject *)__pyx_v_RW->omega);
    __Pyx_INCREF(__pyx_t_20);
    if (__Pyx_PyObject_SetSlice(((PyObject *)__pyx_v_self->omegaM), __pyx_t_20, 0, 0, &__pyx_v_NN1, &__pyx_v_NN, NULL, 0, 0, 1) < 0) __PYX_ERR(0, 1422, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;

    /* "WaveTools.py":1423
 *             self.tanhFM[NN1:NN] = RW.tanhF
 *             self.omegaM[NN1:NN] = RW.omega
 *             self.kiM[NN1:NN] = RW.ki             # <<<<<<<<<<<<<<
 *             self.aiM[NN1:NN] = RW.ai
 *             self.kDirM[NN1:NN,:] =RW.kDir[:,:]
 */
    __pyx_t_20 = ((PyObject *)__pyx_v_RW->ki);
    __Pyx_INCREF(__pyx_t_20);
    if (__Pyx_PyObject_SetSlice(((PyObject *)__pyx_v_self->kiM), __pyx_t_20, 0, 0, &__pyx_v_NN1, &__pyx_v_NN, NULL, 0, 0, 1) < 0) __PYX_ERR(0, 1423, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;

    /* "WaveTools.py":1424
 *             self.omegaM[NN1:NN] = RW.omega
 *             self.kiM[NN1:NN] = RW.ki
 *             self.aiM[NN1:NN] = RW.ai             # <<<<<<<<<<<<<<
 *             self.kDirM[NN1:NN,:] =RW.kDir[:,:]
 *             self.phiM[NN1:NN] = RW.phi
 */
    __pyx_t_20 = ((PyObject *)__pyx_v_RW->ai);
    __Pyx_INCREF(__pyx_t_20);
    if (__Pyx_PyObject_SetSlice(((PyObject *)__pyx_v_self->aiM), __pyx_t_20, 0, 0, &__pyx_v_NN1, &__pyx_v_NN, NULL, 0, 0, 1) < 0) __PYX_ERR(0, 1424, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;

    /* "WaveTools.py":1425
 *             self.kiM[NN1:NN] = RW.ki
 *             self.aiM[NN1:NN] = RW.ai
 *             self.kDirM[NN1:NN,:] =RW.kDir[:,:]             # <<<<<<<<<<<<<<
 *             self.phiM[NN1:NN] = RW.phi
 *         for ij in range(3):
 */
    __pyx_t_20 = PyObject_GetItem(((PyObject *)__pyx_v_RW->kDir), __pyx_tuple__89); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1425, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_20);
    __pyx_t_21 = PySlice_New(__pyx_v_NN1, __pyx_v_NN, Py_None); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 1425, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_21);
    __pyx_t_19 = PyTuple_New(2); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 1425, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __Pyx_GIVEREF(__pyx_t_21);
    PyTuple_SET_ITEM(__pyx_t_19, 0, __pyx_t_21);
    __Pyx_INCREF(__pyx_slice__90);
    __Pyx_GIVEREF(__pyx_slice__90);
    PyTuple_SET_ITEM(__pyx_t_19, 1, __pyx_slice__90);
    __pyx_t_21 = 0;
    if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_self->kDirM), __pyx_t_19, __pyx_t_20) < 0)) __PYX_ERR(0, 1425, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;

    /* "WaveTools.py":1426
 *             self.aiM[NN1:NN] = RW.ai
 *             self.kDirM[NN1:NN,:] =RW.kDir[:,:]
 *             self.phiM[NN1:NN] = RW.phi             # <<<<<<<<<<<<<<
 *         for ij in range(3):
 *             self.vDir_c[ij] = self.vDir[ij]
 */
    __pyx_t_20 = __pyx_v_RW->phi;
    __Pyx_INCREF(__pyx_t_20);
    if (__Pyx_PyObject_SetSlice(((PyObject *)__pyx_v_self->phiM), __pyx_t_20, 0, 0, &__pyx_v_NN1, &__pyx_v_NN, NULL, 0, 0, 1) < 0) __PYX_ERR(0, 1426, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;

    /* "WaveTools.py":1403
 * 
 *         NN = 0
 *         for kk in range(Nspectra):             # <<<<<<<<<<<<<<
 *             logEvent("INFO Wavetools.py: Reading spectra No %s" %kk)
 *             NN1 = NN
 */
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "WaveTools.py":1427
 *             self.kDirM[NN1:NN,:] =RW.kDir[:,:]
 *             self.phiM[NN1:NN] = RW.phi
 *         for ij in range(3):             # <<<<<<<<<<<<<<
 *             self.vDir_c[ij] = self.vDir[ij]
 *         self.vDir_ =  self.vDir_c
 */
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_tuple__91, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1427, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (likely(PyList_CheckExact(__pyx_t_8)) || PyTuple_CheckExact(__pyx_t_8)) {
    __pyx_t_20 = __pyx_t_8; __Pyx_INCREF(__pyx_t_20); __pyx_t_6 = 0;
    __pyx_t_14 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_20 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1427, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_20);
    __pyx_t_14 = Py_TYPE(__pyx_t_20)->tp_iternext; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1427, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  for (;;) {
    if (likely(!__pyx_t_14)) {
      if (likely(PyList_CheckExact(__pyx_t_20))) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_20)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_8 = PyList_GET_ITEM(__pyx_t_20, __pyx_t_6); __Pyx_INCREF(__pyx_t_8); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 1427, __pyx_L1_error)
        #else
        __pyx_t_8 = PySequence_ITEM(__pyx_t_20, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1427, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        #endif
      } else {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_20)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_20, __pyx_t_6); __Pyx_INCREF(__pyx_t_8); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 1427, __pyx_L1_error)
        #else
        __pyx_t_8 = PySequence_ITEM(__pyx_t_20, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1427, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        #endif
      }
    } else {
      __pyx_t_8 = __pyx_t_14(__pyx_t_20);
      if (unlikely(!__pyx_t_8)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1427, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_8);
    }
    __Pyx_XDECREF_SET(__pyx_v_ij, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "WaveTools.py":1428
 *             self.phiM[NN1:NN] = RW.phi
 *         for ij in range(3):
 *             self.vDir_c[ij] = self.vDir[ij]             # <<<<<<<<<<<<<<
 *         self.vDir_ =  self.vDir_c
 * 
 */
    __pyx_t_8 = PyObject_GetItem(((PyObject *)__pyx_v_self->vDir), __pyx_v_ij); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1428, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_t_8); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1428, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_22 = __Pyx_PyIndex_AsSsize_t(__pyx_v_ij); if (unlikely((__pyx_t_22 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1428, __pyx_L1_error)
    (__pyx_v_self->vDir_c[__pyx_t_22]) = __pyx_t_13;

    /* "WaveTools.py":1427
 *             self.kDirM[NN1:NN,:] =RW.kDir[:,:]
 *             self.phiM[NN1:NN] = RW.phi
 *         for ij in range(3):             # <<<<<<<<<<<<<<
 *             self.vDir_c[ij] = self.vDir[ij]
 *         self.vDir_ =  self.vDir_c
 */
  }
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;

  /* "WaveTools.py":1429
 *         for ij in range(3):
 *             self.vDir_c[ij] = self.vDir[ij]
 *         self.vDir_ =  self.vDir_c             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_23 = __pyx_v_self->vDir_c;
  __pyx_v_self->vDir_ = __pyx_t_23;

  /* "WaveTools.py":1432
 * 
 * 
 *         for ij in range(self.Nall):             # <<<<<<<<<<<<<<
 *             for kk in range(3):
 *                 self.kDir_cM[3*ij+kk] = self.kDirM[ij,kk]
 */
  __pyx_t_20 = __Pyx_PyInt_From_int(__pyx_v_self->Nall); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1432, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1432, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_20);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_20);
  __pyx_t_20 = 0;
  __pyx_t_20 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_8, NULL); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1432, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (likely(PyList_CheckExact(__pyx_t_20)) || PyTuple_CheckExact(__pyx_t_20)) {
    __pyx_t_8 = __pyx_t_20; __Pyx_INCREF(__pyx_t_8); __pyx_t_6 = 0;
    __pyx_t_14 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_t_20); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1432, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_14 = Py_TYPE(__pyx_t_8)->tp_iternext; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1432, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  for (;;) {
    if (likely(!__pyx_t_14)) {
      if (likely(PyList_CheckExact(__pyx_t_8))) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_8)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_20 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_6); __Pyx_INCREF(__pyx_t_20); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 1432, __pyx_L1_error)
        #else
        __pyx_t_20 = PySequence_ITEM(__pyx_t_8, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1432, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_20);
        #endif
      } else {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_8)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_20 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_6); __Pyx_INCREF(__pyx_t_20); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 1432, __pyx_L1_error)
        #else
        __pyx_t_20 = PySequence_ITEM(__pyx_t_8, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1432, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_20);
        #endif
      }
    } else {
      __pyx_t_20 = __pyx_t_14(__pyx_t_8);
      if (unlikely(!__pyx_t_20)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1432, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_20);
    }
    __Pyx_XDECREF_SET(__pyx_v_ij, __pyx_t_20);
    __pyx_t_20 = 0;

    /* "WaveTools.py":1433
 * 
 *         for ij in range(self.Nall):
 *             for kk in range(3):             # <<<<<<<<<<<<<<
 *                 self.kDir_cM[3*ij+kk] = self.kDirM[ij,kk]
 *                 self.waveDir_cM[3*ij+kk] = self.kDirM[ij,kk] / self.kiM[ij]
 */
    __pyx_t_20 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_tuple__92, NULL); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1433, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_20);
    if (likely(PyList_CheckExact(__pyx_t_20)) || PyTuple_CheckExact(__pyx_t_20)) {
      __pyx_t_19 = __pyx_t_20; __Pyx_INCREF(__pyx_t_19); __pyx_t_22 = 0;
      __pyx_t_24 = NULL;
    } else {
      __pyx_t_22 = -1; __pyx_t_19 = PyObject_GetIter(__pyx_t_20); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 1433, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_19);
      __pyx_t_24 = Py_TYPE(__pyx_t_19)->tp_iternext; if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 1433, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
    for (;;) {
      if (likely(!__pyx_t_24)) {
        if (likely(PyList_CheckExact(__pyx_t_19))) {
          if (__pyx_t_22 >= PyList_GET_SIZE(__pyx_t_19)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_20 = PyList_GET_ITEM(__pyx_t_19, __pyx_t_22); __Pyx_INCREF(__pyx_t_20); __pyx_t_22++; if (unlikely(0 < 0)) __PYX_ERR(0, 1433, __pyx_L1_error)
          #else
          __pyx_t_20 = PySequence_ITEM(__pyx_t_19, __pyx_t_22); __pyx_t_22++; if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1433, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_20);
          #endif
        } else {
          if (__pyx_t_22 >= PyTuple_GET_SIZE(__pyx_t_19)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_20 = PyTuple_GET_ITEM(__pyx_t_19, __pyx_t_22); __Pyx_INCREF(__pyx_t_20); __pyx_t_22++; if (unlikely(0 < 0)) __PYX_ERR(0, 1433, __pyx_L1_error)
          #else
          __pyx_t_20 = PySequence_ITEM(__pyx_t_19, __pyx_t_22); __pyx_t_22++; if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1433, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_20);
          #endif
        }
      } else {
        __pyx_t_20 = __pyx_t_24(__pyx_t_19);
        if (unlikely(!__pyx_t_20)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1433, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_20);
      }
      __Pyx_XDECREF_SET(__pyx_v_kk, __pyx_t_20);
      __pyx_t_20 = 0;

      /* "WaveTools.py":1434
 *         for ij in range(self.Nall):
 *             for kk in range(3):
 *                 self.kDir_cM[3*ij+kk] = self.kDirM[ij,kk]             # <<<<<<<<<<<<<<
 *                 self.waveDir_cM[3*ij+kk] = self.kDirM[ij,kk] / self.kiM[ij]
 *             self.omega_cM[ij] = self.omegaM[ij]
 */
      __pyx_t_20 = PyTuple_New(2); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1434, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_20);
      __Pyx_INCREF(__pyx_v_ij);
      __Pyx_GIVEREF(__pyx_v_ij);
      PyTuple_SET_ITEM(__pyx_t_20, 0, __pyx_v_ij);
      __Pyx_INCREF(__pyx_v_kk);
      __Pyx_GIVEREF(__pyx_v_kk);
      PyTuple_SET_ITEM(__pyx_t_20, 1, __pyx_v_kk);
      __pyx_t_21 = PyObject_GetItem(((PyObject *)__pyx_v_self->kDirM), __pyx_t_20); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 1434, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_21);
      __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
      __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_t_21); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1434, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
      __pyx_t_21 = PyNumber_Multiply(__pyx_int_3, __pyx_v_ij); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 1434, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_21);
      __pyx_t_20 = PyNumber_Add(__pyx_t_21, __pyx_v_kk); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1434, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_20);
      __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
      __pyx_t_25 = __Pyx_PyIndex_AsSsize_t(__pyx_t_20); if (unlikely((__pyx_t_25 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1434, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
      (__pyx_v_self->kDir_cM[__pyx_t_25]) = __pyx_t_13;

      /* "WaveTools.py":1435
 *             for kk in range(3):
 *                 self.kDir_cM[3*ij+kk] = self.kDirM[ij,kk]
 *                 self.waveDir_cM[3*ij+kk] = self.kDirM[ij,kk] / self.kiM[ij]             # <<<<<<<<<<<<<<
 *             self.omega_cM[ij] = self.omegaM[ij]
 *             self.ki_cM[ij]  =self.kiM[ij]
 */
      __pyx_t_20 = PyTuple_New(2); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1435, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_20);
      __Pyx_INCREF(__pyx_v_ij);
      __Pyx_GIVEREF(__pyx_v_ij);
      PyTuple_SET_ITEM(__pyx_t_20, 0, __pyx_v_ij);
      __Pyx_INCREF(__pyx_v_kk);
      __Pyx_GIVEREF(__pyx_v_kk);
      PyTuple_SET_ITEM(__pyx_t_20, 1, __pyx_v_kk);
      __pyx_t_21 = PyObject_GetItem(((PyObject *)__pyx_v_self->kDirM), __pyx_t_20); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 1435, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_21);
      __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
      __pyx_t_20 = PyObject_GetItem(((PyObject *)__pyx_v_self->kiM), __pyx_v_ij); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1435, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_20);
      __pyx_t_18 = __Pyx_PyNumber_Divide(__pyx_t_21, __pyx_t_20); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1435, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_18);
      __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
      __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
      __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_t_18); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1435, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
      __pyx_t_18 = PyNumber_Multiply(__pyx_int_3, __pyx_v_ij); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1435, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_18);
      __pyx_t_20 = PyNumber_Add(__pyx_t_18, __pyx_v_kk); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1435, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_20);
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
      __pyx_t_25 = __Pyx_PyIndex_AsSsize_t(__pyx_t_20); if (unlikely((__pyx_t_25 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1435, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
      (__pyx_v_self->waveDir_cM[__pyx_t_25]) = __pyx_t_13;

      /* "WaveTools.py":1433
 * 
 *         for ij in range(self.Nall):
 *             for kk in range(3):             # <<<<<<<<<<<<<<
 *                 self.kDir_cM[3*ij+kk] = self.kDirM[ij,kk]
 *                 self.waveDir_cM[3*ij+kk] = self.kDirM[ij,kk] / self.kiM[ij]
 */
    }
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;

    /* "WaveTools.py":1436
 *                 self.kDir_cM[3*ij+kk] = self.kDirM[ij,kk]
 *                 self.waveDir_cM[3*ij+kk] = self.kDirM[ij,kk] / self.kiM[ij]
 *             self.omega_cM[ij] = self.omegaM[ij]             # <<<<<<<<<<<<<<
 *             self.ki_cM[ij]  =self.kiM[ij]
 *             self.tanh_cM[ij] = self.tanhFM[ij]
 */
    __pyx_t_19 = PyObject_GetItem(((PyObject *)__pyx_v_self->omegaM), __pyx_v_ij); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 1436, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_t_19); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1436, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    __pyx_t_22 = __Pyx_PyIndex_AsSsize_t(__pyx_v_ij); if (unlikely((__pyx_t_22 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1436, __pyx_L1_error)
    (__pyx_v_self->omega_cM[__pyx_t_22]) = __pyx_t_13;

    /* "WaveTools.py":1437
 *                 self.waveDir_cM[3*ij+kk] = self.kDirM[ij,kk] / self.kiM[ij]
 *             self.omega_cM[ij] = self.omegaM[ij]
 *             self.ki_cM[ij]  =self.kiM[ij]             # <<<<<<<<<<<<<<
 *             self.tanh_cM[ij] = self.tanhFM[ij]
 *             self.ai_cM[ij] = self.aiM[ij]
 */
    __pyx_t_19 = PyObject_GetItem(((PyObject *)__pyx_v_self->kiM), __pyx_v_ij); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 1437, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_t_19); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1437, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    __pyx_t_22 = __Pyx_PyIndex_AsSsize_t(__pyx_v_ij); if (unlikely((__pyx_t_22 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1437, __pyx_L1_error)
    (__pyx_v_self->ki_cM[__pyx_t_22]) = __pyx_t_13;

    /* "WaveTools.py":1438
 *             self.omega_cM[ij] = self.omegaM[ij]
 *             self.ki_cM[ij]  =self.kiM[ij]
 *             self.tanh_cM[ij] = self.tanhFM[ij]             # <<<<<<<<<<<<<<
 *             self.ai_cM[ij] = self.aiM[ij]
 *             self.phi_cM[ij] = self.phiM[ij]
 */
    __pyx_t_19 = PyObject_GetItem(((PyObject *)__pyx_v_self->tanhFM), __pyx_v_ij); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 1438, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_t_19); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1438, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    __pyx_t_22 = __Pyx_PyIndex_AsSsize_t(__pyx_v_ij); if (unlikely((__pyx_t_22 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1438, __pyx_L1_error)
    (__pyx_v_self->tanh_cM[__pyx_t_22]) = __pyx_t_13;

    /* "WaveTools.py":1439
 *             self.ki_cM[ij]  =self.kiM[ij]
 *             self.tanh_cM[ij] = self.tanhFM[ij]
 *             self.ai_cM[ij] = self.aiM[ij]             # <<<<<<<<<<<<<<
 *             self.phi_cM[ij] = self.phiM[ij]
 * 
 */
    __pyx_t_19 = PyObject_GetItem(((PyObject *)__pyx_v_self->aiM), __pyx_v_ij); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 1439, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_t_19); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1439, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    __pyx_t_22 = __Pyx_PyIndex_AsSsize_t(__pyx_v_ij); if (unlikely((__pyx_t_22 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1439, __pyx_L1_error)
    (__pyx_v_self->ai_cM[__pyx_t_22]) = __pyx_t_13;

    /* "WaveTools.py":1440
 *             self.tanh_cM[ij] = self.tanhFM[ij]
 *             self.ai_cM[ij] = self.aiM[ij]
 *             self.phi_cM[ij] = self.phiM[ij]             # <<<<<<<<<<<<<<
 * 
 *         self.kDirM_ = self.kDir_cM
 */
    __pyx_t_19 = PyObject_GetItem(((PyObject *)__pyx_v_self->phiM), __pyx_v_ij); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 1440, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_t_19); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1440, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    __pyx_t_22 = __Pyx_PyIndex_AsSsize_t(__pyx_v_ij); if (unlikely((__pyx_t_22 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1440, __pyx_L1_error)
    (__pyx_v_self->phi_cM[__pyx_t_22]) = __pyx_t_13;

    /* "WaveTools.py":1432
 * 
 * 
 *         for ij in range(self.Nall):             # <<<<<<<<<<<<<<
 *             for kk in range(3):
 *                 self.kDir_cM[3*ij+kk] = self.kDirM[ij,kk]
 */
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "WaveTools.py":1442
 *             self.phi_cM[ij] = self.phiM[ij]
 * 
 *         self.kDirM_ = self.kDir_cM             # <<<<<<<<<<<<<<
 *         self.omegaM_ = self.omega_cM
 *         self.kiM_  =self.ki_cM
 */
  __pyx_t_23 = __pyx_v_self->kDir_cM;
  __pyx_v_self->kDirM_ = __pyx_t_23;

  /* "WaveTools.py":1443
 * 
 *         self.kDirM_ = self.kDir_cM
 *         self.omegaM_ = self.omega_cM             # <<<<<<<<<<<<<<
 *         self.kiM_  =self.ki_cM
 *         self.aiM_ = self.ai_cM
 */
  __pyx_t_23 = __pyx_v_self->omega_cM;
  __pyx_v_self->omegaM_ = __pyx_t_23;

  /* "WaveTools.py":1444
 *         self.kDirM_ = self.kDir_cM
 *         self.omegaM_ = self.omega_cM
 *         self.kiM_  =self.ki_cM             # <<<<<<<<<<<<<<
 *         self.aiM_ = self.ai_cM
 *         self.tanhM_ = self.tanh_cM
 */
  __pyx_t_23 = __pyx_v_self->ki_cM;
  __pyx_v_self->kiM_ = __pyx_t_23;

  /* "WaveTools.py":1445
 *         self.omegaM_ = self.omega_cM
 *         self.kiM_  =self.ki_cM
 *         self.aiM_ = self.ai_cM             # <<<<<<<<<<<<<<
 *         self.tanhM_ = self.tanh_cM
 *         self.phiM_ = self.phi_cM
 */
  __pyx_t_23 = __pyx_v_self->ai_cM;
  __pyx_v_self->aiM_ = __pyx_t_23;

  /* "WaveTools.py":1446
 *         self.kiM_  =self.ki_cM
 *         self.aiM_ = self.ai_cM
 *         self.tanhM_ = self.tanh_cM             # <<<<<<<<<<<<<<
 *         self.phiM_ = self.phi_cM
 *         self.waveDirM_ =  self.waveDir_cM
 */
  __pyx_t_23 = __pyx_v_self->tanh_cM;
  __pyx_v_self->tanhM_ = __pyx_t_23;

  /* "WaveTools.py":1447
 *         self.aiM_ = self.ai_cM
 *         self.tanhM_ = self.tanh_cM
 *         self.phiM_ = self.phi_cM             # <<<<<<<<<<<<<<
 *         self.waveDirM_ =  self.waveDir_cM
 * 
 */
  __pyx_t_23 = __pyx_v_self->phi_cM;
  __pyx_v_self->phiM_ = __pyx_t_23;

  /* "WaveTools.py":1448
 *         self.tanhM_ = self.tanh_cM
 *         self.phiM_ = self.phi_cM
 *         self.waveDirM_ =  self.waveDir_cM             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_23 = __pyx_v_self->waveDir_cM;
  __pyx_v_self->waveDirM_ = __pyx_t_23;

  /* "WaveTools.py":1351
 *                  Switch for optimised functions
 *     """
 *     def __cinit__(self,             # <<<<<<<<<<<<<<
 *                  Nspectra,
 *                  Tp, # np array with
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_XDECREF(__pyx_t_20);
  __Pyx_XDECREF(__pyx_t_21);
  __Pyx_AddTraceback("WaveTools.MultiSpectraRandomWaves.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_nn);
  __Pyx_XDECREF(__pyx_v_NN);
  __Pyx_XDECREF(__pyx_v_kk);
  __Pyx_XDECREF(__pyx_v_NN1);
  __Pyx_XDECREF((PyObject *)__pyx_v_RW);
  __Pyx_XDECREF(__pyx_v_ij);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":1451
 * 
 * 
 *     def _cpp_eta(self,  x,  t):             # <<<<<<<<<<<<<<
 * 
 *         return __cpp_etaRandom(x,t,self.kDirM_, self.omegaM_,self.phiM_,self.aiM_, self.Nall,self.fast)
 */

static double __pyx_f_9WaveTools_23MultiSpectraRandomWaves__cpp_eta(struct __pyx_obj_9WaveTools_MultiSpectraRandomWaves *__pyx_v_self, double *__pyx_v_x, double __pyx_v_t) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_cpp_eta", 0);

  /* "WaveTools.py":1453
 *     def _cpp_eta(self,  x,  t):
 * 
 *         return __cpp_etaRandom(x,t,self.kDirM_, self.omegaM_,self.phiM_,self.aiM_, self.Nall,self.fast)             # <<<<<<<<<<<<<<
 * 
 *     def eta(self, x, t):
 */
  __pyx_r = proteus::__cpp_etaRandom(__pyx_v_x, __pyx_v_t, __pyx_v_self->kDirM_, __pyx_v_self->omegaM_, __pyx_v_self->phiM_, __pyx_v_self->aiM_, __pyx_v_self->Nall, __pyx_v_self->fast);
  goto __pyx_L0;

  /* "WaveTools.py":1451
 * 
 * 
 *     def _cpp_eta(self,  x,  t):             # <<<<<<<<<<<<<<
 * 
 *         return __cpp_etaRandom(x,t,self.kDirM_, self.omegaM_,self.phiM_,self.aiM_, self.Nall,self.fast)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":1455
 *         return __cpp_etaRandom(x,t,self.kDirM_, self.omegaM_,self.phiM_,self.aiM_, self.Nall,self.fast)
 * 
 *     def eta(self, x, t):             # <<<<<<<<<<<<<<
 *         """Calculates free surface elevation (RandomWaves class)
 *         Parameters
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_23MultiSpectraRandomWaves_3eta(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9WaveTools_23MultiSpectraRandomWaves_2eta[] = "Calculates free surface elevation (RandomWaves class)\n        Parameters\n        ----------\n        x : numpy.ndarray\n            Position vector\n        t : float\n            Time variable\n\n        Returns\n        --------\n        float\n            Free-surface elevation as a float\n\n        ";
static PyMethodDef __pyx_mdef_9WaveTools_23MultiSpectraRandomWaves_3eta = {"eta", (PyCFunction)__pyx_pw_9WaveTools_23MultiSpectraRandomWaves_3eta, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_23MultiSpectraRandomWaves_2eta};
static PyObject *__pyx_pw_9WaveTools_23MultiSpectraRandomWaves_3eta(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_t = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("eta (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_t,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("eta", 1, 2, 2, 1); __PYX_ERR(0, 1455, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "eta") < 0)) __PYX_ERR(0, 1455, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = values[0];
    __pyx_v_t = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("eta", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1455, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("WaveTools.MultiSpectraRandomWaves.eta", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9WaveTools_23MultiSpectraRandomWaves_2eta(((struct __pyx_obj_9WaveTools_MultiSpectraRandomWaves *)__pyx_v_self), __pyx_v_x, __pyx_v_t);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_23MultiSpectraRandomWaves_2eta(struct __pyx_obj_9WaveTools_MultiSpectraRandomWaves *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_t) {
  double __pyx_v_xx[3];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  __Pyx_RefNannySetupContext("eta", 0);

  /* "WaveTools.py":1471
 *         """
 *         cython.declare(xx=cython.double[3])
 *         xx[0] = x[0]             # <<<<<<<<<<<<<<
 *         xx[1] = x[1]
 *         xx[2] = x[2]
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_x, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1471, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1471, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  (__pyx_v_xx[0]) = __pyx_t_2;

  /* "WaveTools.py":1472
 *         cython.declare(xx=cython.double[3])
 *         xx[0] = x[0]
 *         xx[1] = x[1]             # <<<<<<<<<<<<<<
 *         xx[2] = x[2]
 *         return self._cpp_eta(xx,t)
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_x, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1472, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  (__pyx_v_xx[1]) = __pyx_t_2;

  /* "WaveTools.py":1473
 *         xx[0] = x[0]
 *         xx[1] = x[1]
 *         xx[2] = x[2]             # <<<<<<<<<<<<<<
 *         return self._cpp_eta(xx,t)
 * 
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_x, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1473, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1473, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  (__pyx_v_xx[2]) = __pyx_t_2;

  /* "WaveTools.py":1474
 *         xx[1] = x[1]
 *         xx[2] = x[2]
 *         return self._cpp_eta(xx,t)             # <<<<<<<<<<<<<<
 * 
 *     def _cpp_u(self,  U, x,  t):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_t); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1474, __pyx_L1_error)
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_vtabstruct_9WaveTools_MultiSpectraRandomWaves *)__pyx_v_self->__pyx_vtab)->_cpp_eta(__pyx_v_self, __pyx_v_xx, __pyx_t_2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1474, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "WaveTools.py":1455
 *         return __cpp_etaRandom(x,t,self.kDirM_, self.omegaM_,self.phiM_,self.aiM_, self.Nall,self.fast)
 * 
 *     def eta(self, x, t):             # <<<<<<<<<<<<<<
 *         """Calculates free surface elevation (RandomWaves class)
 *         Parameters
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("WaveTools.MultiSpectraRandomWaves.eta", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":1476
 *         return self._cpp_eta(xx,t)
 * 
 *     def _cpp_u(self,  U, x,  t):             # <<<<<<<<<<<<<<
 * 
 *         __cpp_uDir(U, x,t,self.kDirM_, self.kiM_, self.omegaM_,self.phiM_,self.aiM_,self.mwl,self.depth, self.Nall, self.waveDirM_, self.vDir_, self.tanhM_, self.gAbs, self.fast)
 */

static void __pyx_f_9WaveTools_23MultiSpectraRandomWaves__cpp_u(struct __pyx_obj_9WaveTools_MultiSpectraRandomWaves *__pyx_v_self, double *__pyx_v_U, double *__pyx_v_x, double __pyx_v_t) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_cpp_u", 0);

  /* "WaveTools.py":1478
 *     def _cpp_u(self,  U, x,  t):
 * 
 *         __cpp_uDir(U, x,t,self.kDirM_, self.kiM_, self.omegaM_,self.phiM_,self.aiM_,self.mwl,self.depth, self.Nall, self.waveDirM_, self.vDir_, self.tanhM_, self.gAbs, self.fast)             # <<<<<<<<<<<<<<
 * 
 *     def u(self, x, t):
 */
  proteus::__cpp_uDir(__pyx_v_U, __pyx_v_x, __pyx_v_t, __pyx_v_self->kDirM_, __pyx_v_self->kiM_, __pyx_v_self->omegaM_, __pyx_v_self->phiM_, __pyx_v_self->aiM_, __pyx_v_self->mwl, __pyx_v_self->depth, __pyx_v_self->Nall, __pyx_v_self->waveDirM_, __pyx_v_self->vDir_, __pyx_v_self->tanhM_, __pyx_v_self->gAbs, __pyx_v_self->fast);

  /* "WaveTools.py":1476
 *         return self._cpp_eta(xx,t)
 * 
 *     def _cpp_u(self,  U, x,  t):             # <<<<<<<<<<<<<<
 * 
 *         __cpp_uDir(U, x,t,self.kDirM_, self.kiM_, self.omegaM_,self.phiM_,self.aiM_,self.mwl,self.depth, self.Nall, self.waveDirM_, self.vDir_, self.tanhM_, self.gAbs, self.fast)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "WaveTools.py":1480
 *         __cpp_uDir(U, x,t,self.kDirM_, self.kiM_, self.omegaM_,self.phiM_,self.aiM_,self.mwl,self.depth, self.Nall, self.waveDirM_, self.vDir_, self.tanhM_, self.gAbs, self.fast)
 * 
 *     def u(self, x, t):             # <<<<<<<<<<<<<<
 *         """Calculates wave velocity vector (RandomWaves class)
 *         Parameters
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_23MultiSpectraRandomWaves_5u(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9WaveTools_23MultiSpectraRandomWaves_4u[] = "Calculates wave velocity vector (RandomWaves class)\n        Parameters\n        ----------\n        x : numpy.ndarray\n            Position vector\n        t : float\n            Time variable\n\n        Returns\n        --------\n        numpy.ndarray\n            Velocity vector as 1D array\n\n        ";
static PyMethodDef __pyx_mdef_9WaveTools_23MultiSpectraRandomWaves_5u = {"u", (PyCFunction)__pyx_pw_9WaveTools_23MultiSpectraRandomWaves_5u, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_23MultiSpectraRandomWaves_4u};
static PyObject *__pyx_pw_9WaveTools_23MultiSpectraRandomWaves_5u(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_t = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("u (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_t,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("u", 1, 2, 2, 1); __PYX_ERR(0, 1480, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "u") < 0)) __PYX_ERR(0, 1480, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = values[0];
    __pyx_v_t = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("u", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1480, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("WaveTools.MultiSpectraRandomWaves.u", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9WaveTools_23MultiSpectraRandomWaves_4u(((struct __pyx_obj_9WaveTools_MultiSpectraRandomWaves *)__pyx_v_self), __pyx_v_x, __pyx_v_t);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_23MultiSpectraRandomWaves_4u(struct __pyx_obj_9WaveTools_MultiSpectraRandomWaves *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_t) {
  double __pyx_v_xx[3];
  double __pyx_v_cppU[3];
  long __pyx_v_ii;
  PyObject *__pyx_v_U = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  long __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  double __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("u", 0);

  /* "WaveTools.py":1498
 *         cython.declare(xx=cython.double[3])
 *         cython.declare(cppU=cython.double[3])
 *         for ii in range(3):             # <<<<<<<<<<<<<<
 *             xx[ii] = x[ii]
 *             cppU[ii] = 0.
 */
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {
    __pyx_v_ii = __pyx_t_1;

    /* "WaveTools.py":1499
 *         cython.declare(cppU=cython.double[3])
 *         for ii in range(3):
 *             xx[ii] = x[ii]             # <<<<<<<<<<<<<<
 *             cppU[ii] = 0.
 *         U = np.zeros(3,)
 */
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_x, __pyx_v_ii, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1499, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1499, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    (__pyx_v_xx[__pyx_v_ii]) = __pyx_t_3;

    /* "WaveTools.py":1500
 *         for ii in range(3):
 *             xx[ii] = x[ii]
 *             cppU[ii] = 0.             # <<<<<<<<<<<<<<
 *         U = np.zeros(3,)
 *         self._cpp_u(cppU,xx,t)
 */
    (__pyx_v_cppU[__pyx_v_ii]) = 0.;
  }

  /* "WaveTools.py":1501
 *             xx[ii] = x[ii]
 *             cppU[ii] = 0.
 *         U = np.zeros(3,)             # <<<<<<<<<<<<<<
 *         self._cpp_u(cppU,xx,t)
 *         U[0] = cppU[0]
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__93, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_U = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "WaveTools.py":1502
 *             cppU[ii] = 0.
 *         U = np.zeros(3,)
 *         self._cpp_u(cppU,xx,t)             # <<<<<<<<<<<<<<
 *         U[0] = cppU[0]
 *         U[1] = cppU[1]
 */
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_t); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1502, __pyx_L1_error)
  ((struct __pyx_vtabstruct_9WaveTools_MultiSpectraRandomWaves *)__pyx_v_self->__pyx_vtab)->_cpp_u(__pyx_v_self, __pyx_v_cppU, __pyx_v_xx, __pyx_t_3);

  /* "WaveTools.py":1503
 *         U = np.zeros(3,)
 *         self._cpp_u(cppU,xx,t)
 *         U[0] = cppU[0]             # <<<<<<<<<<<<<<
 *         U[1] = cppU[1]
 *         U[2] = cppU[2]
 */
  __pyx_t_2 = PyFloat_FromDouble((__pyx_v_cppU[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__Pyx_SetItemInt(__pyx_v_U, 0, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1) < 0)) __PYX_ERR(0, 1503, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "WaveTools.py":1504
 *         self._cpp_u(cppU,xx,t)
 *         U[0] = cppU[0]
 *         U[1] = cppU[1]             # <<<<<<<<<<<<<<
 *         U[2] = cppU[2]
 *         return U
 */
  __pyx_t_2 = PyFloat_FromDouble((__pyx_v_cppU[1])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__Pyx_SetItemInt(__pyx_v_U, 1, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1) < 0)) __PYX_ERR(0, 1504, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "WaveTools.py":1505
 *         U[0] = cppU[0]
 *         U[1] = cppU[1]
 *         U[2] = cppU[2]             # <<<<<<<<<<<<<<
 *         return U
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble((__pyx_v_cppU[2])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__Pyx_SetItemInt(__pyx_v_U, 2, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1) < 0)) __PYX_ERR(0, 1505, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "WaveTools.py":1506
 *         U[1] = cppU[1]
 *         U[2] = cppU[2]
 *         return U             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_U);
  __pyx_r = __pyx_v_U;
  goto __pyx_L0;

  /* "WaveTools.py":1480
 *         __cpp_uDir(U, x,t,self.kDirM_, self.kiM_, self.omegaM_,self.phiM_,self.aiM_,self.mwl,self.depth, self.Nall, self.waveDirM_, self.vDir_, self.tanhM_, self.gAbs, self.fast)
 * 
 *     def u(self, x, t):             # <<<<<<<<<<<<<<
 *         """Calculates wave velocity vector (RandomWaves class)
 *         Parameters
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("WaveTools.MultiSpectraRandomWaves.u", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_U);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.pxd":122
 *     cdef double[10000] phi_cM
 *     cdef public:
 *         double mwl,depth             # <<<<<<<<<<<<<<
 *     cdef double _cpp_eta(self, double* x, double t)
 *     cdef void _cpp_u(self, double* U, double* x, double t)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_23MultiSpectraRandomWaves_3mwl_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9WaveTools_23MultiSpectraRandomWaves_3mwl_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_23MultiSpectraRandomWaves_3mwl___get__(((struct __pyx_obj_9WaveTools_MultiSpectraRandomWaves *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_23MultiSpectraRandomWaves_3mwl___get__(struct __pyx_obj_9WaveTools_MultiSpectraRandomWaves *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->mwl); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("WaveTools.MultiSpectraRandomWaves.mwl.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9WaveTools_23MultiSpectraRandomWaves_3mwl_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9WaveTools_23MultiSpectraRandomWaves_3mwl_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_23MultiSpectraRandomWaves_3mwl_2__set__(((struct __pyx_obj_9WaveTools_MultiSpectraRandomWaves *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9WaveTools_23MultiSpectraRandomWaves_3mwl_2__set__(struct __pyx_obj_9WaveTools_MultiSpectraRandomWaves *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 122, __pyx_L1_error)
  __pyx_v_self->mwl = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("WaveTools.MultiSpectraRandomWaves.mwl.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_23MultiSpectraRandomWaves_5depth_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9WaveTools_23MultiSpectraRandomWaves_5depth_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_23MultiSpectraRandomWaves_5depth___get__(((struct __pyx_obj_9WaveTools_MultiSpectraRandomWaves *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_23MultiSpectraRandomWaves_5depth___get__(struct __pyx_obj_9WaveTools_MultiSpectraRandomWaves *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->depth); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("WaveTools.MultiSpectraRandomWaves.depth.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9WaveTools_23MultiSpectraRandomWaves_5depth_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9WaveTools_23MultiSpectraRandomWaves_5depth_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_23MultiSpectraRandomWaves_5depth_2__set__(((struct __pyx_obj_9WaveTools_MultiSpectraRandomWaves *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9WaveTools_23MultiSpectraRandomWaves_5depth_2__set__(struct __pyx_obj_9WaveTools_MultiSpectraRandomWaves *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 122, __pyx_L1_error)
  __pyx_v_self->depth = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("WaveTools.MultiSpectraRandomWaves.depth.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":1554
 * 
 *     """
 *     def __cinit__(self,             # <<<<<<<<<<<<<<
 *                  M,  #half bin of frequencies
 *                  Tp, # np array with
 */

/* Python wrapper */
static int __pyx_pw_9WaveTools_16DirectionalWaves_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9WaveTools_16DirectionalWaves_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_M = 0;
  PyObject *__pyx_v_Tp = 0;
  PyObject *__pyx_v_Hs = 0;
  PyObject *__pyx_v_mwl = 0;
  PyObject *__pyx_v_depth = 0;
  PyObject *__pyx_v_waveDir0 = 0;
  PyObject *__pyx_v_g = 0;
  PyObject *__pyx_v_N = 0;
  PyObject *__pyx_v_bandFactor = 0;
  PyObject *__pyx_v_spectName = 0;
  PyObject *__pyx_v_spreadName = 0;
  PyObject *__pyx_v_spectral_params = 0;
  PyObject *__pyx_v_spread_params = 0;
  PyObject *__pyx_v_phi = 0;
  PyObject *__pyx_v_phiSymm = 0;
  PyObject *__pyx_v_fast = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_M,&__pyx_n_s_Tp,&__pyx_n_s_Hs,&__pyx_n_s_mwl,&__pyx_n_s_depth,&__pyx_n_s_waveDir0,&__pyx_n_s_g,&__pyx_n_s_N,&__pyx_n_s_bandFactor,&__pyx_n_s_spectName,&__pyx_n_s_spreadName,&__pyx_n_s_spectral_params,&__pyx_n_s_spread_params,&__pyx_n_s_phi,&__pyx_n_s_phiSymm,&__pyx_n_s_fast,0};
    PyObject* values[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

    /* "WaveTools.py":1566
 *                  spectName ,# random words will result in error and return the available spectra
 *                  spreadName ,# random words will result in error and return the available spectra
 *                  spectral_params = None, #JONPARAMS = {"gamma": 3.3, "TMA":True,"depth": depth}             # <<<<<<<<<<<<<<
 *                  spread_params = None,
 *                  phi=None, # phi must be an (2*M+1)*N numpy array
 */
    values[11] = ((PyObject *)Py_None);

    /* "WaveTools.py":1567
 *                  spreadName ,# random words will result in error and return the available spectra
 *                  spectral_params = None, #JONPARAMS = {"gamma": 3.3, "TMA":True,"depth": depth}
 *                  spread_params = None,             # <<<<<<<<<<<<<<
 *                  phi=None, # phi must be an (2*M+1)*N numpy array
 *                  phiSymm = False, # When true, phi[-pi/2,0] is symmetric to phi[0,pi/2]
 */
    values[12] = ((PyObject *)Py_None);

    /* "WaveTools.py":1568
 *                  spectral_params = None, #JONPARAMS = {"gamma": 3.3, "TMA":True,"depth": depth}
 *                  spread_params = None,
 *                  phi=None, # phi must be an (2*M+1)*N numpy array             # <<<<<<<<<<<<<<
 *                  phiSymm = False, # When true, phi[-pi/2,0] is symmetric to phi[0,pi/2]
 *                   fast = True ):
 */
    values[13] = ((PyObject *)Py_None);

    /* "WaveTools.py":1569
 *                  spread_params = None,
 *                  phi=None, # phi must be an (2*M+1)*N numpy array
 *                  phiSymm = False, # When true, phi[-pi/2,0] is symmetric to phi[0,pi/2]             # <<<<<<<<<<<<<<
 *                   fast = True ):
 *         self.fast = fast
 */
    values[14] = ((PyObject *)Py_False);

    /* "WaveTools.py":1570
 *                  phi=None, # phi must be an (2*M+1)*N numpy array
 *                  phiSymm = False, # When true, phi[-pi/2,0] is symmetric to phi[0,pi/2]
 *                   fast = True ):             # <<<<<<<<<<<<<<
 *         self.fast = fast
 *         validSpread = [cos2s,mitsuyasu]
 */
    values[15] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_M)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Tp)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 11, 16, 1); __PYX_ERR(0, 1554, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Hs)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 11, 16, 2); __PYX_ERR(0, 1554, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mwl)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 11, 16, 3); __PYX_ERR(0, 1554, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_depth)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 11, 16, 4); __PYX_ERR(0, 1554, __pyx_L3_error)
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_waveDir0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 11, 16, 5); __PYX_ERR(0, 1554, __pyx_L3_error)
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 11, 16, 6); __PYX_ERR(0, 1554, __pyx_L3_error)
        }
        case  7:
        if (likely((values[7] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_N)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 11, 16, 7); __PYX_ERR(0, 1554, __pyx_L3_error)
        }
        case  8:
        if (likely((values[8] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bandFactor)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 11, 16, 8); __PYX_ERR(0, 1554, __pyx_L3_error)
        }
        case  9:
        if (likely((values[9] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_spectName)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 11, 16, 9); __PYX_ERR(0, 1554, __pyx_L3_error)
        }
        case 10:
        if (likely((values[10] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_spreadName)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 11, 16, 10); __PYX_ERR(0, 1554, __pyx_L3_error)
        }
        case 11:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_spectral_params);
          if (value) { values[11] = value; kw_args--; }
        }
        case 12:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_spread_params);
          if (value) { values[12] = value; kw_args--; }
        }
        case 13:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_phi);
          if (value) { values[13] = value; kw_args--; }
        }
        case 14:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_phiSymm);
          if (value) { values[14] = value; kw_args--; }
        }
        case 15:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fast);
          if (value) { values[15] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1554, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_M = values[0];
    __pyx_v_Tp = values[1];
    __pyx_v_Hs = values[2];
    __pyx_v_mwl = values[3];
    __pyx_v_depth = values[4];
    __pyx_v_waveDir0 = values[5];
    __pyx_v_g = values[6];
    __pyx_v_N = values[7];
    __pyx_v_bandFactor = values[8];
    __pyx_v_spectName = values[9];
    __pyx_v_spreadName = values[10];
    __pyx_v_spectral_params = values[11];
    __pyx_v_spread_params = values[12];
    __pyx_v_phi = values[13];
    __pyx_v_phiSymm = values[14];
    __pyx_v_fast = values[15];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 11, 16, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1554, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("WaveTools.DirectionalWaves.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9WaveTools_16DirectionalWaves___cinit__(((struct __pyx_obj_9WaveTools_DirectionalWaves *)__pyx_v_self), __pyx_v_M, __pyx_v_Tp, __pyx_v_Hs, __pyx_v_mwl, __pyx_v_depth, __pyx_v_waveDir0, __pyx_v_g, __pyx_v_N, __pyx_v_bandFactor, __pyx_v_spectName, __pyx_v_spreadName, __pyx_v_spectral_params, __pyx_v_spread_params, __pyx_v_phi, __pyx_v_phiSymm, __pyx_v_fast);

  /* "WaveTools.py":1554
 * 
 *     """
 *     def __cinit__(self,             # <<<<<<<<<<<<<<
 *                  M,  #half bin of frequencies
 *                  Tp, # np array with
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9WaveTools_16DirectionalWaves___cinit__(struct __pyx_obj_9WaveTools_DirectionalWaves *__pyx_v_self, PyObject *__pyx_v_M, PyObject *__pyx_v_Tp, PyObject *__pyx_v_Hs, PyObject *__pyx_v_mwl, PyObject *__pyx_v_depth, PyObject *__pyx_v_waveDir0, PyObject *__pyx_v_g, PyObject *__pyx_v_N, PyObject *__pyx_v_bandFactor, PyObject *__pyx_v_spectName, PyObject *__pyx_v_spreadName, PyObject *__pyx_v_spectral_params, PyObject *__pyx_v_spread_params, PyObject *__pyx_v_phi, PyObject *__pyx_v_phiSymm, PyObject *__pyx_v_fast) {
  PyObject *__pyx_v_validSpread = NULL;
  PyObject *__pyx_v_spread_fun = NULL;
  struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_RW = NULL;
  PyObject *__pyx_v_rotation3D = NULL;
  PyObject *__pyx_v_thetas = NULL;
  PyObject *__pyx_v_dth = NULL;
  PyObject *__pyx_v_temp_array = NULL;
  PyObject *__pyx_v_directions = NULL;
  PyObject *__pyx_v_rr = NULL;
  PyObject *__pyx_v_theta = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_theta_m = NULL;
  PyObject *__pyx_v_Si_Sp = NULL;
  PyObject *__pyx_v_freq = NULL;
  PyObject *__pyx_v_ii = NULL;
  PyObject *__pyx_v_nn = NULL;
  PyObject *__pyx_v_mm = NULL;
  PyObject *__pyx_v_ij = NULL;
  PyObject *__pyx_v_kk = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  double __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  PyObject *(*__pyx_t_13)(PyObject *);
  int __pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  Py_ssize_t __pyx_t_19;
  PyObject *(*__pyx_t_20)(PyObject *);
  double *__pyx_t_21;
  Py_ssize_t __pyx_t_22;
  PyObject *(*__pyx_t_23)(PyObject *);
  Py_ssize_t __pyx_t_24;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "WaveTools.py":1571
 *                  phiSymm = False, # When true, phi[-pi/2,0] is symmetric to phi[0,pi/2]
 *                   fast = True ):
 *         self.fast = fast             # <<<<<<<<<<<<<<
 *         validSpread = [cos2s,mitsuyasu]
 *         spread_fun =  loadExistingFunction(spreadName, validSpread)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_fast); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1571, __pyx_L1_error)
  __pyx_v_self->fast = __pyx_t_1;

  /* "WaveTools.py":1572
 *                   fast = True ):
 *         self.fast = fast
 *         validSpread = [cos2s,mitsuyasu]             # <<<<<<<<<<<<<<
 *         spread_fun =  loadExistingFunction(spreadName, validSpread)
 *         self.Mtot = 2*M+1
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_cos2s); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_mitsuyasu); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyList_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_v_validSpread = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "WaveTools.py":1573
 *         self.fast = fast
 *         validSpread = [cos2s,mitsuyasu]
 *         spread_fun =  loadExistingFunction(spreadName, validSpread)             # <<<<<<<<<<<<<<
 *         self.Mtot = 2*M+1
 *         self.N = N
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_loadExistingFunction); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1573, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_spreadName, __pyx_v_validSpread};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1573, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_spreadName, __pyx_v_validSpread};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1573, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1573, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_spreadName);
    __Pyx_GIVEREF(__pyx_v_spreadName);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_v_spreadName);
    __Pyx_INCREF(__pyx_v_validSpread);
    __Pyx_GIVEREF(__pyx_v_validSpread);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_v_validSpread);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1573, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_spread_fun = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "WaveTools.py":1574
 *         validSpread = [cos2s,mitsuyasu]
 *         spread_fun =  loadExistingFunction(spreadName, validSpread)
 *         self.Mtot = 2*M+1             # <<<<<<<<<<<<<<
 *         self.N = N
 *         self.Nall = self.Mtot*self.N
 */
  __pyx_t_4 = PyNumber_Multiply(__pyx_int_2, __pyx_v_M); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_t_4, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1574, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_self->Mtot = __pyx_t_5;

  /* "WaveTools.py":1575
 *         spread_fun =  loadExistingFunction(spreadName, validSpread)
 *         self.Mtot = 2*M+1
 *         self.N = N             # <<<<<<<<<<<<<<
 *         self.Nall = self.Mtot*self.N
 *         self.waveDir0 = setDirVector(waveDir0)
 */
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_N); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1575, __pyx_L1_error)
  __pyx_v_self->N = __pyx_t_5;

  /* "WaveTools.py":1576
 *         self.Mtot = 2*M+1
 *         self.N = N
 *         self.Nall = self.Mtot*self.N             # <<<<<<<<<<<<<<
 *         self.waveDir0 = setDirVector(waveDir0)
 *         self.vDir = setVertDir(g)
 */
  __pyx_v_self->Nall = (__pyx_v_self->Mtot * __pyx_v_self->N);

  /* "WaveTools.py":1577
 *         self.N = N
 *         self.Nall = self.Mtot*self.N
 *         self.waveDir0 = setDirVector(waveDir0)             # <<<<<<<<<<<<<<
 *         self.vDir = setVertDir(g)
 *         if(self.Nall > 100000):
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_setDirVector); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_waveDir0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1577, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v_waveDir0};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1577, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v_waveDir0};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1577, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1577, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_INCREF(__pyx_v_waveDir0);
      __Pyx_GIVEREF(__pyx_v_waveDir0);
      PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_v_waveDir0);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1577, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1577, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->waveDir0);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->waveDir0));
  __pyx_v_self->waveDir0 = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "WaveTools.py":1578
 *         self.Nall = self.Mtot*self.N
 *         self.waveDir0 = setDirVector(waveDir0)
 *         self.vDir = setVertDir(g)             # <<<<<<<<<<<<<<
 *         if(self.Nall > 100000):
 *             logEvent("ERROR! Wavetools.py: Maximum (number of frequencies) x (No of spectra) for DirectionalWaves is 100000 ",level=0)
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_setVertDir); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_g); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1578, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_v_g};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1578, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_v_g};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1578, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1578, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2); __pyx_t_2 = NULL;
      __Pyx_INCREF(__pyx_v_g);
      __Pyx_GIVEREF(__pyx_v_g);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_g);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1578, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1578, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->vDir);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->vDir));
  __pyx_v_self->vDir = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "WaveTools.py":1579
 *         self.waveDir0 = setDirVector(waveDir0)
 *         self.vDir = setVertDir(g)
 *         if(self.Nall > 100000):             # <<<<<<<<<<<<<<
 *             logEvent("ERROR! Wavetools.py: Maximum (number of frequencies) x (No of spectra) for DirectionalWaves is 100000 ",level=0)
 * 
 */
  __pyx_t_7 = ((__pyx_v_self->Nall > 0x186A0) != 0);
  if (__pyx_t_7) {

    /* "WaveTools.py":1580
 *         self.vDir = setVertDir(g)
 *         if(self.Nall > 100000):
 *             logEvent("ERROR! Wavetools.py: Maximum (number of frequencies) x (No of spectra) for DirectionalWaves is 100000 ",level=0)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_logEvent); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1580, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1580, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_level, __pyx_int_0) < 0) __PYX_ERR(0, 1580, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__94, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1580, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "WaveTools.py":1579
 *         self.waveDir0 = setDirVector(waveDir0)
 *         self.vDir = setVertDir(g)
 *         if(self.Nall > 100000):             # <<<<<<<<<<<<<<
 *             logEvent("ERROR! Wavetools.py: Maximum (number of frequencies) x (No of spectra) for DirectionalWaves is 100000 ",level=0)
 * 
 */
  }

  /* "WaveTools.py":1585
 * 
 *  # Loading Random waves to get the frequency array the wavelegnths and the frequency spectrum
 *         RW = RandomWaves(             # <<<<<<<<<<<<<<
 *                              Tp, # np array with
 *                              Hs,
 */
  __pyx_t_6 = PyTuple_New(10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(__pyx_v_Tp);
  __Pyx_GIVEREF(__pyx_v_Tp);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_Tp);
  __Pyx_INCREF(__pyx_v_Hs);
  __Pyx_GIVEREF(__pyx_v_Hs);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_v_Hs);
  __Pyx_INCREF(__pyx_v_mwl);
  __Pyx_GIVEREF(__pyx_v_mwl);
  PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_v_mwl);
  __Pyx_INCREF(__pyx_v_depth);
  __Pyx_GIVEREF(__pyx_v_depth);
  PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_v_depth);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->waveDir0));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->waveDir0));
  PyTuple_SET_ITEM(__pyx_t_6, 4, ((PyObject *)__pyx_v_self->waveDir0));
  __Pyx_INCREF(__pyx_v_g);
  __Pyx_GIVEREF(__pyx_v_g);
  PyTuple_SET_ITEM(__pyx_t_6, 5, __pyx_v_g);
  __Pyx_INCREF(__pyx_v_N);
  __Pyx_GIVEREF(__pyx_v_N);
  PyTuple_SET_ITEM(__pyx_t_6, 6, __pyx_v_N);
  __Pyx_INCREF(__pyx_v_bandFactor);
  __Pyx_GIVEREF(__pyx_v_bandFactor);
  PyTuple_SET_ITEM(__pyx_t_6, 7, __pyx_v_bandFactor);
  __Pyx_INCREF(__pyx_v_spectName);
  __Pyx_GIVEREF(__pyx_v_spectName);
  PyTuple_SET_ITEM(__pyx_t_6, 8, __pyx_v_spectName);
  __Pyx_INCREF(__pyx_v_spectral_params);
  __Pyx_GIVEREF(__pyx_v_spectral_params);
  PyTuple_SET_ITEM(__pyx_t_6, 9, __pyx_v_spectral_params);

  /* "WaveTools.py":1596
 *                              spectName,# random words will result in error and return the available spectra
 *                              spectral_params, #JONPARAMS = {"gamma": 3.3, "TMA":True,"depth": depth}
 *                              phi = None             # <<<<<<<<<<<<<<
 *         )
 * 
 */
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1596, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_phi, Py_None) < 0) __PYX_ERR(0, 1596, __pyx_L1_error)

  /* "WaveTools.py":1585
 * 
 *  # Loading Random waves to get the frequency array the wavelegnths and the frequency spectrum
 *         RW = RandomWaves(             # <<<<<<<<<<<<<<
 *                              Tp, # np array with
 *                              Hs,
 */
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9WaveTools_RandomWaves), __pyx_t_6, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_RW = ((struct __pyx_obj_9WaveTools_RandomWaves *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "WaveTools.py":1602
 * 
 *         # Directional waves propagate usually in a plane -90 to 90 deg with respect to the direction vector, normal to the gavity direction. Rotating the waveDir0 vector around the g vector to produce the directional space
 *         from SpatialTools import rotation3D             # <<<<<<<<<<<<<<
 *         thetas = np.linspace(-M_PI/2,M_PI/2,2*M+1)
 *         dth = (thetas[1] - thetas[0])
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_rotation3D);
  __Pyx_GIVEREF(__pyx_n_s_rotation3D);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_rotation3D);
  __pyx_t_4 = __Pyx_Import(__pyx_n_s_SpatialTools, __pyx_t_3, -1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_4, __pyx_n_s_rotation3D); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_v_rotation3D = __pyx_t_3;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "WaveTools.py":1603
 *         # Directional waves propagate usually in a plane -90 to 90 deg with respect to the direction vector, normal to the gavity direction. Rotating the waveDir0 vector around the g vector to produce the directional space
 *         from SpatialTools import rotation3D
 *         thetas = np.linspace(-M_PI/2,M_PI/2,2*M+1)             # <<<<<<<<<<<<<<
 *         dth = (thetas[1] - thetas[0])
 *         self.waveDirs = np.zeros((2*M+1,3),)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1603, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_linspace); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1603, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyFloat_FromDouble(((-M_PI) / 2.0)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1603, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyFloat_FromDouble((M_PI / 2.0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1603, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_8 = PyNumber_Multiply(__pyx_int_2, __pyx_v_M); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1603, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = __Pyx_PyInt_AddObjC(__pyx_t_8, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1603, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[4] = {__pyx_t_8, __pyx_t_3, __pyx_t_2, __pyx_t_9};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1603, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[4] = {__pyx_t_8, __pyx_t_3, __pyx_t_2, __pyx_t_9};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1603, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  } else
  #endif
  {
    __pyx_t_10 = PyTuple_New(3+__pyx_t_5); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1603, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    if (__pyx_t_8) {
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_8); __pyx_t_8 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_5, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_5, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_10, 2+__pyx_t_5, __pyx_t_9);
    __pyx_t_3 = 0;
    __pyx_t_2 = 0;
    __pyx_t_9 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_10, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1603, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_thetas = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "WaveTools.py":1604
 *         from SpatialTools import rotation3D
 *         thetas = np.linspace(-M_PI/2,M_PI/2,2*M+1)
 *         dth = (thetas[1] - thetas[0])             # <<<<<<<<<<<<<<
 *         self.waveDirs = np.zeros((2*M+1,3),)
 *         self.phiDirs = np.zeros((2*M+1,N),)
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_thetas, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_thetas, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_10 = PyNumber_Subtract(__pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_dth = __pyx_t_10;
  __pyx_t_10 = 0;

  /* "WaveTools.py":1605
 *         thetas = np.linspace(-M_PI/2,M_PI/2,2*M+1)
 *         dth = (thetas[1] - thetas[0])
 *         self.waveDirs = np.zeros((2*M+1,3),)             # <<<<<<<<<<<<<<
 *         self.phiDirs = np.zeros((2*M+1,N),)
 *         self.aiDirs = np.zeros((2*M+1,N),)
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyNumber_Multiply(__pyx_int_2, __pyx_v_M); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_9 = __Pyx_PyInt_AddObjC(__pyx_t_6, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_9);
  __Pyx_INCREF(__pyx_int_3);
  __Pyx_GIVEREF(__pyx_int_3);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_int_3);
  __pyx_t_9 = 0;
  __pyx_t_9 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_9) {
    __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1605, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_10);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_t_6};
      __pyx_t_10 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1605, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_t_6};
      __pyx_t_10 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1605, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1605, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_9); __pyx_t_9 = NULL;
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_2, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1605, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_10) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_10, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1605, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_10);
  __Pyx_GOTREF(__pyx_v_self->waveDirs);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->waveDirs));
  __pyx_v_self->waveDirs = ((PyArrayObject *)__pyx_t_10);
  __pyx_t_10 = 0;

  /* "WaveTools.py":1606
 *         dth = (thetas[1] - thetas[0])
 *         self.waveDirs = np.zeros((2*M+1,3),)
 *         self.phiDirs = np.zeros((2*M+1,N),)             # <<<<<<<<<<<<<<
 *         self.aiDirs = np.zeros((2*M+1,N),)
 *         self.gAbs = sqrt(g[0]*g[0]+g[1]*g[1]+g[2]*g[2])
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Multiply(__pyx_int_2, __pyx_v_M); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyInt_AddObjC(__pyx_t_4, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6);
  __Pyx_INCREF(__pyx_v_N);
  __Pyx_GIVEREF(__pyx_v_N);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_N);
  __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1606, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_10);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_4};
      __pyx_t_10 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1606, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_4};
      __pyx_t_10 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1606, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    {
      __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1606, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_9, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1606, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_10) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_10, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1606, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_10);
  __Pyx_GOTREF(__pyx_v_self->phiDirs);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->phiDirs));
  __pyx_v_self->phiDirs = ((PyArrayObject *)__pyx_t_10);
  __pyx_t_10 = 0;

  /* "WaveTools.py":1607
 *         self.waveDirs = np.zeros((2*M+1,3),)
 *         self.phiDirs = np.zeros((2*M+1,N),)
 *         self.aiDirs = np.zeros((2*M+1,N),)             # <<<<<<<<<<<<<<
 *         self.gAbs = sqrt(g[0]*g[0]+g[1]*g[1]+g[2]*g[2])
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Multiply(__pyx_int_2, __pyx_v_M); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyInt_AddObjC(__pyx_t_2, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4);
  __Pyx_INCREF(__pyx_v_N);
  __Pyx_GIVEREF(__pyx_v_N);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_N);
  __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_9);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_9, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1607, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_10);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_9)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_10 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1607, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_10 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1607, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1607, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_6, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1607, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (!(likely(((__pyx_t_10) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_10, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1607, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_10);
  __Pyx_GOTREF(__pyx_v_self->aiDirs);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->aiDirs));
  __pyx_v_self->aiDirs = ((PyArrayObject *)__pyx_t_10);
  __pyx_t_10 = 0;

  /* "WaveTools.py":1608
 *         self.phiDirs = np.zeros((2*M+1,N),)
 *         self.aiDirs = np.zeros((2*M+1,N),)
 *         self.gAbs = sqrt(g[0]*g[0]+g[1]*g[1]+g[2]*g[2])             # <<<<<<<<<<<<<<
 * 
 *         temp_array = np.zeros((1,3),)
 */
  __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_g, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_9 = __Pyx_GetItemInt(__pyx_v_g, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_10, __pyx_t_9); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = __Pyx_GetItemInt(__pyx_v_g, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_g, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_9, __pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = PyNumber_Add(__pyx_t_6, __pyx_t_2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_g, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_g, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_9 = PyNumber_Multiply(__pyx_t_2, __pyx_t_6); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyNumber_Add(__pyx_t_10, __pyx_t_9); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1608, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_self->gAbs = sqrt(__pyx_t_11);

  /* "WaveTools.py":1610
 *         self.gAbs = sqrt(g[0]*g[0]+g[1]*g[1]+g[2]*g[2])
 * 
 *         temp_array = np.zeros((1,3),)             # <<<<<<<<<<<<<<
 *         temp_array[0,:] = waveDir0
 *         directions = range(0,self.Mtot)
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_zeros); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_tuple__96, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_v_temp_array = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "WaveTools.py":1611
 * 
 *         temp_array = np.zeros((1,3),)
 *         temp_array[0,:] = waveDir0             # <<<<<<<<<<<<<<
 *         directions = range(0,self.Mtot)
 * 
 */
  if (unlikely(PyObject_SetItem(__pyx_v_temp_array, __pyx_tuple__98, __pyx_v_waveDir0) < 0)) __PYX_ERR(0, 1611, __pyx_L1_error)

  /* "WaveTools.py":1612
 *         temp_array = np.zeros((1,3),)
 *         temp_array[0,:] = waveDir0
 *         directions = range(0,self.Mtot)             # <<<<<<<<<<<<<<
 * 
 * # initialising wave directions
 */
  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_self->Mtot); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_9, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_v_directions = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "WaveTools.py":1615
 * 
 * # initialising wave directions
 *         for rr in directions:             # <<<<<<<<<<<<<<
 *             theta = thetas[rr]
 *             self.waveDirs[rr,:] = rotation3D(temp_array,theta,self.vDir)[0,:]
 */
  if (likely(PyList_CheckExact(__pyx_v_directions)) || PyTuple_CheckExact(__pyx_v_directions)) {
    __pyx_t_6 = __pyx_v_directions; __Pyx_INCREF(__pyx_t_6); __pyx_t_12 = 0;
    __pyx_t_13 = NULL;
  } else {
    __pyx_t_12 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_v_directions); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1615, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_13 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1615, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_13)) {
      if (likely(PyList_CheckExact(__pyx_t_6))) {
        if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_9 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_12); __Pyx_INCREF(__pyx_t_9); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 1615, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_6, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1615, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      } else {
        if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_12); __Pyx_INCREF(__pyx_t_9); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 1615, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_6, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1615, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      }
    } else {
      __pyx_t_9 = __pyx_t_13(__pyx_t_6);
      if (unlikely(!__pyx_t_9)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1615, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_9);
    }
    __Pyx_XDECREF_SET(__pyx_v_rr, __pyx_t_9);
    __pyx_t_9 = 0;

    /* "WaveTools.py":1616
 * # initialising wave directions
 *         for rr in directions:
 *             theta = thetas[rr]             # <<<<<<<<<<<<<<
 *             self.waveDirs[rr,:] = rotation3D(temp_array,theta,self.vDir)[0,:]
 *             self.waveDirs[rr,:]=setDirVector( self.waveDirs[rr,:])
 */
    __pyx_t_9 = PyObject_GetItem(__pyx_v_thetas, __pyx_v_rr); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1616, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_XDECREF_SET(__pyx_v_theta, __pyx_t_9);
    __pyx_t_9 = 0;

    /* "WaveTools.py":1617
 *         for rr in directions:
 *             theta = thetas[rr]
 *             self.waveDirs[rr,:] = rotation3D(temp_array,theta,self.vDir)[0,:]             # <<<<<<<<<<<<<<
 *             self.waveDirs[rr,:]=setDirVector( self.waveDirs[rr,:])
 * 
 */
    __Pyx_INCREF(__pyx_v_rotation3D);
    __pyx_t_10 = __pyx_v_rotation3D; __pyx_t_2 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_10))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_10);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_10, function);
        __pyx_t_5 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_10)) {
      PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_temp_array, __pyx_v_theta, ((PyObject *)__pyx_v_self->vDir)};
      __pyx_t_9 = __Pyx_PyFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1617, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_9);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_10)) {
      PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_temp_array, __pyx_v_theta, ((PyObject *)__pyx_v_self->vDir)};
      __pyx_t_9 = __Pyx_PyCFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1617, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_9);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(3+__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1617, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_INCREF(__pyx_v_temp_array);
      __Pyx_GIVEREF(__pyx_v_temp_array);
      PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_5, __pyx_v_temp_array);
      __Pyx_INCREF(__pyx_v_theta);
      __Pyx_GIVEREF(__pyx_v_theta);
      PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_5, __pyx_v_theta);
      __Pyx_INCREF(((PyObject *)__pyx_v_self->vDir));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self->vDir));
      PyTuple_SET_ITEM(__pyx_t_4, 2+__pyx_t_5, ((PyObject *)__pyx_v_self->vDir));
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_4, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1617, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = PyObject_GetItem(__pyx_t_9, __pyx_tuple__100); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1617, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1617, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_INCREF(__pyx_v_rr);
    __Pyx_GIVEREF(__pyx_v_rr);
    PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_v_rr);
    __Pyx_INCREF(__pyx_slice__101);
    __Pyx_GIVEREF(__pyx_slice__101);
    PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_slice__101);
    if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_self->waveDirs), __pyx_t_9, __pyx_t_10) < 0)) __PYX_ERR(0, 1617, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

    /* "WaveTools.py":1618
 *             theta = thetas[rr]
 *             self.waveDirs[rr,:] = rotation3D(temp_array,theta,self.vDir)[0,:]
 *             self.waveDirs[rr,:]=setDirVector( self.waveDirs[rr,:])             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_setDirVector); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1618, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1618, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_rr);
    __Pyx_GIVEREF(__pyx_v_rr);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_rr);
    __Pyx_INCREF(__pyx_slice__102);
    __Pyx_GIVEREF(__pyx_slice__102);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_slice__102);
    __pyx_t_2 = PyObject_GetItem(((PyObject *)__pyx_v_self->waveDirs), __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1618, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    if (!__pyx_t_4) {
      __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1618, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_10);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_9)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
        __pyx_t_10 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1618, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
        __pyx_t_10 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1618, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else
      #endif
      {
        __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1618, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_GIVEREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_2);
        __pyx_t_2 = 0;
        __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_3, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1618, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1618, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_INCREF(__pyx_v_rr);
    __Pyx_GIVEREF(__pyx_v_rr);
    PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_v_rr);
    __Pyx_INCREF(__pyx_slice__103);
    __Pyx_GIVEREF(__pyx_slice__103);
    PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_slice__103);
    if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_self->waveDirs), __pyx_t_9, __pyx_t_10) < 0)) __PYX_ERR(0, 1618, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

    /* "WaveTools.py":1615
 * 
 * # initialising wave directions
 *         for rr in directions:             # <<<<<<<<<<<<<<
 *             theta = thetas[rr]
 *             self.waveDirs[rr,:] = rotation3D(temp_array,theta,self.vDir)[0,:]
 */
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "WaveTools.py":1622
 * 
 * # Initialising phasing
 *         if phi is None:             # <<<<<<<<<<<<<<
 *             self.phiDirs = 2.0*M_PI*np.random.rand(self.Mtot,RW.fi.shape[0])
 *         elif np.shape(phi) == (2*M+1,RW.fi.shape[0]):
 */
  __pyx_t_7 = (__pyx_v_phi == Py_None);
  __pyx_t_14 = (__pyx_t_7 != 0);
  if (__pyx_t_14) {

    /* "WaveTools.py":1623
 * # Initialising phasing
 *         if phi is None:
 *             self.phiDirs = 2.0*M_PI*np.random.rand(self.Mtot,RW.fi.shape[0])             # <<<<<<<<<<<<<<
 *         elif np.shape(phi) == (2*M+1,RW.fi.shape[0]):
 *             self.phiDirs = phi
 */
    __pyx_t_6 = PyFloat_FromDouble((2.0 * M_PI)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1623, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1623, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_random); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1623, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_rand); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1623, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->Mtot); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1623, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_RW->fi->dimensions[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1623, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
        __pyx_t_5 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_9)) {
      PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, __pyx_t_2};
      __pyx_t_10 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1623, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
      PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, __pyx_t_2};
      __pyx_t_10 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1623, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1623, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_4) {
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4); __pyx_t_4 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_5, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_5, __pyx_t_2);
      __pyx_t_3 = 0;
      __pyx_t_2 = 0;
      __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_8, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1623, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = PyNumber_Multiply(__pyx_t_6, __pyx_t_10); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1623, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (!(likely(((__pyx_t_9) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_9, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1623, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_9);
    __Pyx_GOTREF(__pyx_v_self->phiDirs);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->phiDirs));
    __pyx_v_self->phiDirs = ((PyArrayObject *)__pyx_t_9);
    __pyx_t_9 = 0;

    /* "WaveTools.py":1622
 * 
 * # Initialising phasing
 *         if phi is None:             # <<<<<<<<<<<<<<
 *             self.phiDirs = 2.0*M_PI*np.random.rand(self.Mtot,RW.fi.shape[0])
 *         elif np.shape(phi) == (2*M+1,RW.fi.shape[0]):
 */
    goto __pyx_L6;
  }

  /* "WaveTools.py":1624
 *         if phi is None:
 *             self.phiDirs = 2.0*M_PI*np.random.rand(self.Mtot,RW.fi.shape[0])
 *         elif np.shape(phi) == (2*M+1,RW.fi.shape[0]):             # <<<<<<<<<<<<<<
 *             self.phiDirs = phi
 *         else:
 */
  __pyx_t_10 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1624, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_shape); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1624, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_10)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (!__pyx_t_10) {
    __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_phi); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1624, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_10, __pyx_v_phi};
      __pyx_t_9 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1624, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_GOTREF(__pyx_t_9);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_10, __pyx_v_phi};
      __pyx_t_9 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1624, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_GOTREF(__pyx_t_9);
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1624, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_10); __pyx_t_10 = NULL;
      __Pyx_INCREF(__pyx_v_phi);
      __Pyx_GIVEREF(__pyx_v_phi);
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_v_phi);
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1624, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyNumber_Multiply(__pyx_int_2, __pyx_v_M); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1624, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = __Pyx_PyInt_AddObjC(__pyx_t_6, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1624, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_RW->fi->dimensions[0])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1624, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1624, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_6);
  __pyx_t_8 = 0;
  __pyx_t_6 = 0;
  __pyx_t_6 = PyObject_RichCompare(__pyx_t_9, __pyx_t_10, Py_EQ); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1624, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_14 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_14 < 0)) __PYX_ERR(0, 1624, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (__pyx_t_14) {

    /* "WaveTools.py":1625
 *             self.phiDirs = 2.0*M_PI*np.random.rand(self.Mtot,RW.fi.shape[0])
 *         elif np.shape(phi) == (2*M+1,RW.fi.shape[0]):
 *             self.phiDirs = phi             # <<<<<<<<<<<<<<
 *         else:
 *             logEvent("ERROR! Wavetools.py: phi in DirectionalWaves class must be given either as None or as a list with 2*M + 1 numpy arrays with length N")
 */
    if (!(likely(((__pyx_v_phi) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_phi, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1625, __pyx_L1_error)
    __pyx_t_6 = __pyx_v_phi;
    __Pyx_INCREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __Pyx_GOTREF(__pyx_v_self->phiDirs);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->phiDirs));
    __pyx_v_self->phiDirs = ((PyArrayObject *)__pyx_t_6);
    __pyx_t_6 = 0;

    /* "WaveTools.py":1624
 *         if phi is None:
 *             self.phiDirs = 2.0*M_PI*np.random.rand(self.Mtot,RW.fi.shape[0])
 *         elif np.shape(phi) == (2*M+1,RW.fi.shape[0]):             # <<<<<<<<<<<<<<
 *             self.phiDirs = phi
 *         else:
 */
    goto __pyx_L6;
  }

  /* "WaveTools.py":1627
 *             self.phiDirs = phi
 *         else:
 *             logEvent("ERROR! Wavetools.py: phi in DirectionalWaves class must be given either as None or as a list with 2*M + 1 numpy arrays with length N")             # <<<<<<<<<<<<<<
 *             sys.exit(1)
 * 
 */
  /*else*/ {
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_logEvent); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1627, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__104, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1627, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

    /* "WaveTools.py":1628
 *         else:
 *             logEvent("ERROR! Wavetools.py: phi in DirectionalWaves class must be given either as None or as a list with 2*M + 1 numpy arrays with length N")
 *             sys.exit(1)             # <<<<<<<<<<<<<<
 * 
 *         if (phiSymm):
 */
    __pyx_t_10 = __Pyx_GetModuleGlobalName(__pyx_n_s_sys); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1628, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_exit); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1628, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__105, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1628, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  }
  __pyx_L6:;

  /* "WaveTools.py":1630
 *             sys.exit(1)
 * 
 *         if (phiSymm):             # <<<<<<<<<<<<<<
 *             for i in range(0,M):
 *                 self.phiDirs[M+1+i,:] = self.phiDirs[self.M - 1 - i,:]
 */
  __pyx_t_14 = __Pyx_PyObject_IsTrue(__pyx_v_phiSymm); if (unlikely(__pyx_t_14 < 0)) __PYX_ERR(0, 1630, __pyx_L1_error)
  if (__pyx_t_14) {

    /* "WaveTools.py":1631
 * 
 *         if (phiSymm):
 *             for i in range(0,M):             # <<<<<<<<<<<<<<
 *                 self.phiDirs[M+1+i,:] = self.phiDirs[self.M - 1 - i,:]
 * 
 */
    __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1631, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_int_0);
    __Pyx_INCREF(__pyx_v_M);
    __Pyx_GIVEREF(__pyx_v_M);
    PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_v_M);
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_10, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1631, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (likely(PyList_CheckExact(__pyx_t_6)) || PyTuple_CheckExact(__pyx_t_6)) {
      __pyx_t_10 = __pyx_t_6; __Pyx_INCREF(__pyx_t_10); __pyx_t_12 = 0;
      __pyx_t_13 = NULL;
    } else {
      __pyx_t_12 = -1; __pyx_t_10 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1631, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_13 = Py_TYPE(__pyx_t_10)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1631, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    for (;;) {
      if (likely(!__pyx_t_13)) {
        if (likely(PyList_CheckExact(__pyx_t_10))) {
          if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_10)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = PyList_GET_ITEM(__pyx_t_10, __pyx_t_12); __Pyx_INCREF(__pyx_t_6); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 1631, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_10, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1631, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        } else {
          if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_10)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_10, __pyx_t_12); __Pyx_INCREF(__pyx_t_6); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 1631, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_10, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1631, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        }
      } else {
        __pyx_t_6 = __pyx_t_13(__pyx_t_10);
        if (unlikely(!__pyx_t_6)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1631, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_6);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "WaveTools.py":1632
 *         if (phiSymm):
 *             for i in range(0,M):
 *                 self.phiDirs[M+1+i,:] = self.phiDirs[self.M - 1 - i,:]             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_M); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1632, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_9 = __Pyx_PyInt_SubtractObjC(__pyx_t_6, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1632, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyNumber_Subtract(__pyx_t_9, __pyx_v_i); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1632, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1632, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_6);
      __Pyx_INCREF(__pyx_slice__106);
      __Pyx_GIVEREF(__pyx_slice__106);
      PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_slice__106);
      __pyx_t_6 = 0;
      __pyx_t_6 = PyObject_GetItem(((PyObject *)__pyx_v_self->phiDirs), __pyx_t_9); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1632, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyInt_AddObjC(__pyx_v_M, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1632, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_8 = PyNumber_Add(__pyx_t_9, __pyx_v_i); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1632, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1632, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8);
      __Pyx_INCREF(__pyx_slice__107);
      __Pyx_GIVEREF(__pyx_slice__107);
      PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_slice__107);
      __pyx_t_8 = 0;
      if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_self->phiDirs), __pyx_t_9, __pyx_t_6) < 0)) __PYX_ERR(0, 1632, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "WaveTools.py":1631
 * 
 *         if (phiSymm):
 *             for i in range(0,M):             # <<<<<<<<<<<<<<
 *                 self.phiDirs[M+1+i,:] = self.phiDirs[self.M - 1 - i,:]
 * 
 */
    }
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

    /* "WaveTools.py":1630
 *             sys.exit(1)
 * 
 *         if (phiSymm):             # <<<<<<<<<<<<<<
 *             for i in range(0,M):
 *                 self.phiDirs[M+1+i,:] = self.phiDirs[self.M - 1 - i,:]
 */
  }

  /* "WaveTools.py":1637
 * 
 * 
 *         theta_m = reduceToIntervals(thetas,dth)             # <<<<<<<<<<<<<<
 *         if (spread_params is None):
 *             Si_Sp = spread_fun(theta_m,RW.fim)
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_reduceToIntervals); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1637, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_9 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_v_thetas, __pyx_v_dth};
    __pyx_t_10 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1637, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_GOTREF(__pyx_t_10);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_v_thetas, __pyx_v_dth};
    __pyx_t_10 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1637, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_GOTREF(__pyx_t_10);
  } else
  #endif
  {
    __pyx_t_8 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1637, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_9) {
      __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_9); __pyx_t_9 = NULL;
    }
    __Pyx_INCREF(__pyx_v_thetas);
    __Pyx_GIVEREF(__pyx_v_thetas);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_5, __pyx_v_thetas);
    __Pyx_INCREF(__pyx_v_dth);
    __Pyx_GIVEREF(__pyx_v_dth);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_5, __pyx_v_dth);
    __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1637, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_theta_m = __pyx_t_10;
  __pyx_t_10 = 0;

  /* "WaveTools.py":1638
 * 
 *         theta_m = reduceToIntervals(thetas,dth)
 *         if (spread_params is None):             # <<<<<<<<<<<<<<
 *             Si_Sp = spread_fun(theta_m,RW.fim)
 *         else:
 */
  __pyx_t_14 = (__pyx_v_spread_params == Py_None);
  __pyx_t_7 = (__pyx_t_14 != 0);
  if (__pyx_t_7) {

    /* "WaveTools.py":1639
 *         theta_m = reduceToIntervals(thetas,dth)
 *         if (spread_params is None):
 *             Si_Sp = spread_fun(theta_m,RW.fim)             # <<<<<<<<<<<<<<
 *         else:
 *             try:
 */
    __Pyx_INCREF(__pyx_v_spread_fun);
    __pyx_t_6 = __pyx_v_spread_fun; __pyx_t_8 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_5 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_v_theta_m, ((PyObject *)__pyx_v_RW->fim)};
      __pyx_t_10 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1639, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_10);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_v_theta_m, ((PyObject *)__pyx_v_RW->fim)};
      __pyx_t_10 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1639, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_10);
    } else
    #endif
    {
      __pyx_t_9 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1639, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (__pyx_t_8) {
        __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8); __pyx_t_8 = NULL;
      }
      __Pyx_INCREF(__pyx_v_theta_m);
      __Pyx_GIVEREF(__pyx_v_theta_m);
      PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_5, __pyx_v_theta_m);
      __Pyx_INCREF(((PyObject *)__pyx_v_RW->fim));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_RW->fim));
      PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_5, ((PyObject *)__pyx_v_RW->fim));
      __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_9, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1639, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_Si_Sp = __pyx_t_10;
    __pyx_t_10 = 0;

    /* "WaveTools.py":1638
 * 
 *         theta_m = reduceToIntervals(thetas,dth)
 *         if (spread_params is None):             # <<<<<<<<<<<<<<
 *             Si_Sp = spread_fun(theta_m,RW.fim)
 *         else:
 */
    goto __pyx_L10;
  }

  /* "WaveTools.py":1641
 *             Si_Sp = spread_fun(theta_m,RW.fim)
 *         else:
 *             try:             # <<<<<<<<<<<<<<
 *                 Si_Sp = spread_fun(theta_m,RW.fim, **spread_params)
 *             except:
 */
  /*else*/ {
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17);
      __Pyx_XGOTREF(__pyx_t_15);
      __Pyx_XGOTREF(__pyx_t_16);
      __Pyx_XGOTREF(__pyx_t_17);
      /*try:*/ {

        /* "WaveTools.py":1642
 *         else:
 *             try:
 *                 Si_Sp = spread_fun(theta_m,RW.fim, **spread_params)             # <<<<<<<<<<<<<<
 *             except:
 *                 logEvent('ERROR! Wavetools.py: Additional spread parameters are not valid for the %s spectrum' %spectName)
 */
        __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1642, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_INCREF(__pyx_v_theta_m);
        __Pyx_GIVEREF(__pyx_v_theta_m);
        PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_v_theta_m);
        __Pyx_INCREF(((PyObject *)__pyx_v_RW->fim));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_RW->fim));
        PyTuple_SET_ITEM(__pyx_t_10, 1, ((PyObject *)__pyx_v_RW->fim));
        if (unlikely(__pyx_v_spread_params == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "argument after ** must be a mapping, not NoneType");
          __PYX_ERR(0, 1642, __pyx_L11_error)
        }
        if (likely(PyDict_CheckExact(__pyx_v_spread_params))) {
          __pyx_t_6 = PyDict_Copy(__pyx_v_spread_params); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1642, __pyx_L11_error)
          __Pyx_GOTREF(__pyx_t_6);
        } else {
          __pyx_t_6 = PyObject_CallFunctionObjArgs((PyObject*)&PyDict_Type, __pyx_v_spread_params, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1642, __pyx_L11_error)
          __Pyx_GOTREF(__pyx_t_6);
        }
        __pyx_t_9 = __Pyx_PyObject_Call(__pyx_v_spread_fun, __pyx_t_10, __pyx_t_6); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1642, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_v_Si_Sp = __pyx_t_9;
        __pyx_t_9 = 0;

        /* "WaveTools.py":1641
 *             Si_Sp = spread_fun(theta_m,RW.fim)
 *         else:
 *             try:             # <<<<<<<<<<<<<<
 *                 Si_Sp = spread_fun(theta_m,RW.fim, **spread_params)
 *             except:
 */
      }
      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
      __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
      goto __pyx_L18_try_end;
      __pyx_L11_error:;
      __Pyx_PyThreadState_assign
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "WaveTools.py":1643
 *             try:
 *                 Si_Sp = spread_fun(theta_m,RW.fim, **spread_params)
 *             except:             # <<<<<<<<<<<<<<
 *                 logEvent('ERROR! Wavetools.py: Additional spread parameters are not valid for the %s spectrum' %spectName)
 *                 sys.exit(1)
 */
      /*except:*/ {
        __Pyx_AddTraceback("WaveTools.DirectionalWaves.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_9, &__pyx_t_6, &__pyx_t_10) < 0) __PYX_ERR(0, 1643, __pyx_L13_except_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GOTREF(__pyx_t_10);

        /* "WaveTools.py":1644
 *                 Si_Sp = spread_fun(theta_m,RW.fim, **spread_params)
 *             except:
 *                 logEvent('ERROR! Wavetools.py: Additional spread parameters are not valid for the %s spectrum' %spectName)             # <<<<<<<<<<<<<<
 *                 sys.exit(1)
 * 
 */
        __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_logEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1644, __pyx_L13_except_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_ERROR_Wavetools_py_Additional_sp_2, __pyx_v_spectName); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1644, __pyx_L13_except_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_2, function);
          }
        }
        if (!__pyx_t_4) {
          __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1644, __pyx_L13_except_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_GOTREF(__pyx_t_8);
        } else {
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_2)) {
            PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
            __pyx_t_8 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1644, __pyx_L13_except_error)
            __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
            PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
            __pyx_t_8 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1644, __pyx_L13_except_error)
            __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          } else
          #endif
          {
            __pyx_t_18 = PyTuple_New(1+1); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1644, __pyx_L13_except_error)
            __Pyx_GOTREF(__pyx_t_18);
            __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_18, 0, __pyx_t_4); __pyx_t_4 = NULL;
            __Pyx_GIVEREF(__pyx_t_3);
            PyTuple_SET_ITEM(__pyx_t_18, 0+1, __pyx_t_3);
            __pyx_t_3 = 0;
            __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_18, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1644, __pyx_L13_except_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
          }
        }
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "WaveTools.py":1645
 *             except:
 *                 logEvent('ERROR! Wavetools.py: Additional spread parameters are not valid for the %s spectrum' %spectName)
 *                 sys.exit(1)             # <<<<<<<<<<<<<<
 * 
 *         # Setting amplitudes
 */
        __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_sys); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1645, __pyx_L13_except_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_exit); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1645, __pyx_L13_except_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__108, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1645, __pyx_L13_except_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        goto __pyx_L12_exception_handled;
      }
      __pyx_L13_except_error:;

      /* "WaveTools.py":1641
 *             Si_Sp = spread_fun(theta_m,RW.fim)
 *         else:
 *             try:             # <<<<<<<<<<<<<<
 *                 Si_Sp = spread_fun(theta_m,RW.fim, **spread_params)
 *             except:
 */
      __Pyx_PyThreadState_assign
      __Pyx_XGIVEREF(__pyx_t_15);
      __Pyx_XGIVEREF(__pyx_t_16);
      __Pyx_XGIVEREF(__pyx_t_17);
      __Pyx_ExceptionReset(__pyx_t_15, __pyx_t_16, __pyx_t_17);
      goto __pyx_L1_error;
      __pyx_L12_exception_handled:;
      __Pyx_PyThreadState_assign
      __Pyx_XGIVEREF(__pyx_t_15);
      __Pyx_XGIVEREF(__pyx_t_16);
      __Pyx_XGIVEREF(__pyx_t_17);
      __Pyx_ExceptionReset(__pyx_t_15, __pyx_t_16, __pyx_t_17);
      __pyx_L18_try_end:;
    }
  }
  __pyx_L10:;

  /* "WaveTools.py":1649
 *         # Setting amplitudes
 *         #Normalising the spreading function
 *         freq = range(0,N)             # <<<<<<<<<<<<<<
 *     # Normalising integral over all frequencies
 *         for ii in freq:
 */
  __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1649, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_int_0);
  __Pyx_INCREF(__pyx_v_N);
  __Pyx_GIVEREF(__pyx_v_N);
  PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_v_N);
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_10, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1649, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_v_freq = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "WaveTools.py":1651
 *         freq = range(0,N)
 *     # Normalising integral over all frequencies
 *         for ii in freq:             # <<<<<<<<<<<<<<
 *             Si_Sp[:,ii] = normIntegral(Si_Sp[:,ii],theta_m)
 *             Si_Sp[:,ii]*= RW.Si_Jm[ii]
 */
  if (likely(PyList_CheckExact(__pyx_v_freq)) || PyTuple_CheckExact(__pyx_v_freq)) {
    __pyx_t_6 = __pyx_v_freq; __Pyx_INCREF(__pyx_t_6); __pyx_t_12 = 0;
    __pyx_t_13 = NULL;
  } else {
    __pyx_t_12 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_v_freq); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1651, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_13 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1651, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_13)) {
      if (likely(PyList_CheckExact(__pyx_t_6))) {
        if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_10 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_12); __Pyx_INCREF(__pyx_t_10); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 1651, __pyx_L1_error)
        #else
        __pyx_t_10 = PySequence_ITEM(__pyx_t_6, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1651, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        #endif
      } else {
        if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_10 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_12); __Pyx_INCREF(__pyx_t_10); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 1651, __pyx_L1_error)
        #else
        __pyx_t_10 = PySequence_ITEM(__pyx_t_6, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1651, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        #endif
      }
    } else {
      __pyx_t_10 = __pyx_t_13(__pyx_t_6);
      if (unlikely(!__pyx_t_10)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1651, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_10);
    }
    __Pyx_XDECREF_SET(__pyx_v_ii, __pyx_t_10);
    __pyx_t_10 = 0;

    /* "WaveTools.py":1652
 *     # Normalising integral over all frequencies
 *         for ii in freq:
 *             Si_Sp[:,ii] = normIntegral(Si_Sp[:,ii],theta_m)             # <<<<<<<<<<<<<<
 *             Si_Sp[:,ii]*= RW.Si_Jm[ii]
 *     # Creating amplitudes spectrum
 */
    __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_normIntegral); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1652, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (unlikely(!__pyx_v_Si_Sp)) { __Pyx_RaiseUnboundLocalError("Si_Sp"); __PYX_ERR(0, 1652, __pyx_L1_error) }
    __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1652, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_INCREF(__pyx_slice__109);
    __Pyx_GIVEREF(__pyx_slice__109);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_slice__109);
    __Pyx_INCREF(__pyx_v_ii);
    __Pyx_GIVEREF(__pyx_v_ii);
    PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_v_ii);
    __pyx_t_2 = PyObject_GetItem(__pyx_v_Si_Sp, __pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1652, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
        __pyx_t_5 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_9)) {
      PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_2, __pyx_v_theta_m};
      __pyx_t_10 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1652, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
      PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_2, __pyx_v_theta_m};
      __pyx_t_10 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1652, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_18 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1652, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_18);
      if (__pyx_t_8) {
        __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_18, 0, __pyx_t_8); __pyx_t_8 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_18, 0+__pyx_t_5, __pyx_t_2);
      __Pyx_INCREF(__pyx_v_theta_m);
      __Pyx_GIVEREF(__pyx_v_theta_m);
      PyTuple_SET_ITEM(__pyx_t_18, 1+__pyx_t_5, __pyx_v_theta_m);
      __pyx_t_2 = 0;
      __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_18, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1652, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    }
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_v_Si_Sp)) { __Pyx_RaiseUnboundLocalError("Si_Sp"); __PYX_ERR(0, 1652, __pyx_L1_error) }
    __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1652, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_INCREF(__pyx_slice__110);
    __Pyx_GIVEREF(__pyx_slice__110);
    PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_slice__110);
    __Pyx_INCREF(__pyx_v_ii);
    __Pyx_GIVEREF(__pyx_v_ii);
    PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_v_ii);
    if (unlikely(PyObject_SetItem(__pyx_v_Si_Sp, __pyx_t_9, __pyx_t_10) < 0)) __PYX_ERR(0, 1652, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

    /* "WaveTools.py":1653
 *         for ii in freq:
 *             Si_Sp[:,ii] = normIntegral(Si_Sp[:,ii],theta_m)
 *             Si_Sp[:,ii]*= RW.Si_Jm[ii]             # <<<<<<<<<<<<<<
 *     # Creating amplitudes spectrum
 *         self.aiDirs[:] = np.sqrt(2.*returnRectangles3D(Si_Sp,theta_m,RW.fim))
 */
    __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1653, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_INCREF(__pyx_slice__111);
    __Pyx_GIVEREF(__pyx_slice__111);
    PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_slice__111);
    __Pyx_INCREF(__pyx_v_ii);
    __Pyx_GIVEREF(__pyx_v_ii);
    PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_v_ii);
    if (unlikely(!__pyx_v_Si_Sp)) { __Pyx_RaiseUnboundLocalError("Si_Sp"); __PYX_ERR(0, 1653, __pyx_L1_error) }
    __pyx_t_9 = PyObject_GetItem(__pyx_v_Si_Sp, __pyx_t_10); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1653, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_18 = PyObject_GetItem(((PyObject *)__pyx_v_RW->Si_Jm), __pyx_v_ii); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1653, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_2 = PyNumber_InPlaceMultiply(__pyx_t_9, __pyx_t_18); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1653, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    if (unlikely(!__pyx_v_Si_Sp)) { __Pyx_RaiseUnboundLocalError("Si_Sp"); __PYX_ERR(0, 1653, __pyx_L1_error) }
    if (unlikely(PyObject_SetItem(__pyx_v_Si_Sp, __pyx_t_10, __pyx_t_2) < 0)) __PYX_ERR(0, 1653, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

    /* "WaveTools.py":1651
 *         freq = range(0,N)
 *     # Normalising integral over all frequencies
 *         for ii in freq:             # <<<<<<<<<<<<<<
 *             Si_Sp[:,ii] = normIntegral(Si_Sp[:,ii],theta_m)
 *             Si_Sp[:,ii]*= RW.Si_Jm[ii]
 */
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "WaveTools.py":1655
 *             Si_Sp[:,ii]*= RW.Si_Jm[ii]
 *     # Creating amplitudes spectrum
 *         self.aiDirs[:] = np.sqrt(2.*returnRectangles3D(Si_Sp,theta_m,RW.fim))             # <<<<<<<<<<<<<<
 *         self.mwl = mwl
 *         self.depth = depth
 */
  __pyx_t_10 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1655, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_sqrt); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1655, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_18 = __Pyx_GetModuleGlobalName(__pyx_n_s_returnRectangles3D); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1655, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  if (unlikely(!__pyx_v_Si_Sp)) { __Pyx_RaiseUnboundLocalError("Si_Sp"); __PYX_ERR(0, 1655, __pyx_L1_error) }
  __pyx_t_9 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_18))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_18);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_18);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_18, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_18)) {
    PyObject *__pyx_temp[4] = {__pyx_t_9, __pyx_v_Si_Sp, __pyx_v_theta_m, ((PyObject *)__pyx_v_RW->fim)};
    __pyx_t_10 = __Pyx_PyFunction_FastCall(__pyx_t_18, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1655, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_GOTREF(__pyx_t_10);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_18)) {
    PyObject *__pyx_temp[4] = {__pyx_t_9, __pyx_v_Si_Sp, __pyx_v_theta_m, ((PyObject *)__pyx_v_RW->fim)};
    __pyx_t_10 = __Pyx_PyCFunction_FastCall(__pyx_t_18, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1655, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_GOTREF(__pyx_t_10);
  } else
  #endif
  {
    __pyx_t_8 = PyTuple_New(3+__pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1655, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_9) {
      __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_9); __pyx_t_9 = NULL;
    }
    __Pyx_INCREF(__pyx_v_Si_Sp);
    __Pyx_GIVEREF(__pyx_v_Si_Sp);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_5, __pyx_v_Si_Sp);
    __Pyx_INCREF(__pyx_v_theta_m);
    __Pyx_GIVEREF(__pyx_v_theta_m);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_5, __pyx_v_theta_m);
    __Pyx_INCREF(((PyObject *)__pyx_v_RW->fim));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_RW->fim));
    PyTuple_SET_ITEM(__pyx_t_8, 2+__pyx_t_5, ((PyObject *)__pyx_v_RW->fim));
    __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_18, __pyx_t_8, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1655, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  __pyx_t_18 = PyNumber_Multiply(__pyx_float_2_, __pyx_t_10); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1655, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_10)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_10) {
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_18); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1655, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __Pyx_GOTREF(__pyx_t_6);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_10, __pyx_t_18};
      __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1655, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_10, __pyx_t_18};
      __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1655, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1655, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_10); __pyx_t_10 = NULL;
      __Pyx_GIVEREF(__pyx_t_18);
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_18);
      __pyx_t_18 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_8, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1655, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PyObject_SetSlice(((PyObject *)__pyx_v_self->aiDirs), __pyx_t_6, 0, 0, NULL, NULL, &__pyx_slice__112, 0, 0, 1) < 0) __PYX_ERR(0, 1655, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "WaveTools.py":1656
 *     # Creating amplitudes spectrum
 *         self.aiDirs[:] = np.sqrt(2.*returnRectangles3D(Si_Sp,theta_m,RW.fim))
 *         self.mwl = mwl             # <<<<<<<<<<<<<<
 *         self.depth = depth
 *         self.kDirs = np.zeros((self.N, self.Mtot, 3),"d")
 */
  __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_v_mwl); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1656, __pyx_L1_error)
  __pyx_v_self->mwl = __pyx_t_11;

  /* "WaveTools.py":1657
 *         self.aiDirs[:] = np.sqrt(2.*returnRectangles3D(Si_Sp,theta_m,RW.fim))
 *         self.mwl = mwl
 *         self.depth = depth             # <<<<<<<<<<<<<<
 *         self.kDirs = np.zeros((self.N, self.Mtot, 3),"d")
 *         for nn in range(self.N):
 */
  __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_v_depth); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1657, __pyx_L1_error)
  __pyx_v_self->depth = __pyx_t_11;

  /* "WaveTools.py":1658
 *         self.mwl = mwl
 *         self.depth = depth
 *         self.kDirs = np.zeros((self.N, self.Mtot, 3),"d")             # <<<<<<<<<<<<<<
 *         for nn in range(self.N):
 *             for mm in range(self.Mtot):
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->N); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_18 = __Pyx_PyInt_From_int(__pyx_v_self->Mtot); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_10 = PyTuple_New(3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_18);
  PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_18);
  __Pyx_INCREF(__pyx_int_3);
  __Pyx_GIVEREF(__pyx_int_3);
  PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_int_3);
  __pyx_t_2 = 0;
  __pyx_t_18 = 0;
  __pyx_t_18 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_18)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_18);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_8)) {
    PyObject *__pyx_temp[3] = {__pyx_t_18, __pyx_t_10, __pyx_n_s_d};
    __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1658, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
    PyObject *__pyx_temp[3] = {__pyx_t_18, __pyx_t_10, __pyx_n_s_d};
    __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1658, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  } else
  #endif
  {
    __pyx_t_2 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1658, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (__pyx_t_18) {
      __Pyx_GIVEREF(__pyx_t_18); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_18); __pyx_t_18 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_10);
    PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_5, __pyx_t_10);
    __Pyx_INCREF(__pyx_n_s_d);
    __Pyx_GIVEREF(__pyx_n_s_d);
    PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_5, __pyx_n_s_d);
    __pyx_t_10 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_2, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1658, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1658, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_6);
  __Pyx_GOTREF(__pyx_v_self->kDirs);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->kDirs));
  __pyx_v_self->kDirs = ((PyArrayObject *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "WaveTools.py":1659
 *         self.depth = depth
 *         self.kDirs = np.zeros((self.N, self.Mtot, 3),"d")
 *         for nn in range(self.N):             # <<<<<<<<<<<<<<
 *             for mm in range(self.Mtot):
 *                 self.kDirs[nn,mm,:] = RW.ki[nn]*self.waveDirs[mm,:]
 */
  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_self->N); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1659, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1659, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_8, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1659, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (likely(PyList_CheckExact(__pyx_t_6)) || PyTuple_CheckExact(__pyx_t_6)) {
    __pyx_t_8 = __pyx_t_6; __Pyx_INCREF(__pyx_t_8); __pyx_t_12 = 0;
    __pyx_t_13 = NULL;
  } else {
    __pyx_t_12 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1659, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_13 = Py_TYPE(__pyx_t_8)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1659, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  for (;;) {
    if (likely(!__pyx_t_13)) {
      if (likely(PyList_CheckExact(__pyx_t_8))) {
        if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_8)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_6 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_12); __Pyx_INCREF(__pyx_t_6); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 1659, __pyx_L1_error)
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_8, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1659, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
      } else {
        if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_8)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_12); __Pyx_INCREF(__pyx_t_6); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 1659, __pyx_L1_error)
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_8, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1659, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
      }
    } else {
      __pyx_t_6 = __pyx_t_13(__pyx_t_8);
      if (unlikely(!__pyx_t_6)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1659, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_6);
    }
    __Pyx_XDECREF_SET(__pyx_v_nn, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "WaveTools.py":1660
 *         self.kDirs = np.zeros((self.N, self.Mtot, 3),"d")
 *         for nn in range(self.N):
 *             for mm in range(self.Mtot):             # <<<<<<<<<<<<<<
 *                 self.kDirs[nn,mm,:] = RW.ki[nn]*self.waveDirs[mm,:]
 * 
 */
    __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_self->Mtot); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1660, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1660, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_2, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1660, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (likely(PyList_CheckExact(__pyx_t_6)) || PyTuple_CheckExact(__pyx_t_6)) {
      __pyx_t_2 = __pyx_t_6; __Pyx_INCREF(__pyx_t_2); __pyx_t_19 = 0;
      __pyx_t_20 = NULL;
    } else {
      __pyx_t_19 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1660, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_20 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1660, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    for (;;) {
      if (likely(!__pyx_t_20)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_19 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_19); __Pyx_INCREF(__pyx_t_6); __pyx_t_19++; if (unlikely(0 < 0)) __PYX_ERR(0, 1660, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_2, __pyx_t_19); __pyx_t_19++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1660, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        } else {
          if (__pyx_t_19 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_19); __Pyx_INCREF(__pyx_t_6); __pyx_t_19++; if (unlikely(0 < 0)) __PYX_ERR(0, 1660, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_2, __pyx_t_19); __pyx_t_19++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1660, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        }
      } else {
        __pyx_t_6 = __pyx_t_20(__pyx_t_2);
        if (unlikely(!__pyx_t_6)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1660, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_6);
      }
      __Pyx_XDECREF_SET(__pyx_v_mm, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "WaveTools.py":1661
 *         for nn in range(self.N):
 *             for mm in range(self.Mtot):
 *                 self.kDirs[nn,mm,:] = RW.ki[nn]*self.waveDirs[mm,:]             # <<<<<<<<<<<<<<
 * 
 *         for ij in range(3):
 */
      __pyx_t_6 = PyObject_GetItem(((PyObject *)__pyx_v_RW->ki), __pyx_v_nn); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1661, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1661, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_INCREF(__pyx_v_mm);
      __Pyx_GIVEREF(__pyx_v_mm);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_v_mm);
      __Pyx_INCREF(__pyx_slice__113);
      __Pyx_GIVEREF(__pyx_slice__113);
      PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_slice__113);
      __pyx_t_18 = PyObject_GetItem(((PyObject *)__pyx_v_self->waveDirs), __pyx_t_10); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1661, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_18);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = PyNumber_Multiply(__pyx_t_6, __pyx_t_18); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1661, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
      __pyx_t_18 = PyTuple_New(3); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1661, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_18);
      __Pyx_INCREF(__pyx_v_nn);
      __Pyx_GIVEREF(__pyx_v_nn);
      PyTuple_SET_ITEM(__pyx_t_18, 0, __pyx_v_nn);
      __Pyx_INCREF(__pyx_v_mm);
      __Pyx_GIVEREF(__pyx_v_mm);
      PyTuple_SET_ITEM(__pyx_t_18, 1, __pyx_v_mm);
      __Pyx_INCREF(__pyx_slice__114);
      __Pyx_GIVEREF(__pyx_slice__114);
      PyTuple_SET_ITEM(__pyx_t_18, 2, __pyx_slice__114);
      if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_self->kDirs), __pyx_t_18, __pyx_t_10) < 0)) __PYX_ERR(0, 1661, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

      /* "WaveTools.py":1660
 *         self.kDirs = np.zeros((self.N, self.Mtot, 3),"d")
 *         for nn in range(self.N):
 *             for mm in range(self.Mtot):             # <<<<<<<<<<<<<<
 *                 self.kDirs[nn,mm,:] = RW.ki[nn]*self.waveDirs[mm,:]
 * 
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "WaveTools.py":1659
 *         self.depth = depth
 *         self.kDirs = np.zeros((self.N, self.Mtot, 3),"d")
 *         for nn in range(self.N):             # <<<<<<<<<<<<<<
 *             for mm in range(self.Mtot):
 *                 self.kDirs[nn,mm,:] = RW.ki[nn]*self.waveDirs[mm,:]
 */
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "WaveTools.py":1663
 *                 self.kDirs[nn,mm,:] = RW.ki[nn]*self.waveDirs[mm,:]
 * 
 *         for ij in range(3):             # <<<<<<<<<<<<<<
 *             self.vDir_c[ij] = self.vDir[ij]
 *         self.vDir_ =  self.vDir_c
 */
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_tuple__115, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1663, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (likely(PyList_CheckExact(__pyx_t_8)) || PyTuple_CheckExact(__pyx_t_8)) {
    __pyx_t_2 = __pyx_t_8; __Pyx_INCREF(__pyx_t_2); __pyx_t_12 = 0;
    __pyx_t_13 = NULL;
  } else {
    __pyx_t_12 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1663, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_13 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1663, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  for (;;) {
    if (likely(!__pyx_t_13)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_8 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_12); __Pyx_INCREF(__pyx_t_8); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 1663, __pyx_L1_error)
        #else
        __pyx_t_8 = PySequence_ITEM(__pyx_t_2, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1663, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        #endif
      } else {
        if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_12); __Pyx_INCREF(__pyx_t_8); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 1663, __pyx_L1_error)
        #else
        __pyx_t_8 = PySequence_ITEM(__pyx_t_2, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1663, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        #endif
      }
    } else {
      __pyx_t_8 = __pyx_t_13(__pyx_t_2);
      if (unlikely(!__pyx_t_8)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1663, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_8);
    }
    __Pyx_XDECREF_SET(__pyx_v_ij, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "WaveTools.py":1664
 * 
 *         for ij in range(3):
 *             self.vDir_c[ij] = self.vDir[ij]             # <<<<<<<<<<<<<<
 *         self.vDir_ =  self.vDir_c
 * 
 */
    __pyx_t_8 = PyObject_GetItem(((PyObject *)__pyx_v_self->vDir), __pyx_v_ij); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1664, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_t_8); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1664, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_19 = __Pyx_PyIndex_AsSsize_t(__pyx_v_ij); if (unlikely((__pyx_t_19 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1664, __pyx_L1_error)
    (__pyx_v_self->vDir_c[__pyx_t_19]) = __pyx_t_11;

    /* "WaveTools.py":1663
 *                 self.kDirs[nn,mm,:] = RW.ki[nn]*self.waveDirs[mm,:]
 * 
 *         for ij in range(3):             # <<<<<<<<<<<<<<
 *             self.vDir_c[ij] = self.vDir[ij]
 *         self.vDir_ =  self.vDir_c
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "WaveTools.py":1665
 *         for ij in range(3):
 *             self.vDir_c[ij] = self.vDir[ij]
 *         self.vDir_ =  self.vDir_c             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_21 = __pyx_v_self->vDir_c;
  __pyx_v_self->vDir_ = __pyx_t_21;

  /* "WaveTools.py":1668
 * 
 * 
 *         for mm in range(self.Mtot):             # <<<<<<<<<<<<<<
 *             for nn in range(self.N):
 *                 ij = mm * self.N + nn
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->Mtot); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1668, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1668, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1668, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_8 = __pyx_t_2; __Pyx_INCREF(__pyx_t_8); __pyx_t_12 = 0;
    __pyx_t_13 = NULL;
  } else {
    __pyx_t_12 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1668, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_13 = Py_TYPE(__pyx_t_8)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1668, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_13)) {
      if (likely(PyList_CheckExact(__pyx_t_8))) {
        if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_8)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_12); __Pyx_INCREF(__pyx_t_2); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 1668, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_8, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1668, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_8)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_12); __Pyx_INCREF(__pyx_t_2); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 1668, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_8, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1668, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_13(__pyx_t_8);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1668, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_mm, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "WaveTools.py":1669
 * 
 *         for mm in range(self.Mtot):
 *             for nn in range(self.N):             # <<<<<<<<<<<<<<
 *                 ij = mm * self.N + nn
 *                 self.ai_c[ij] = self.aiDirs[mm,nn]
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->N); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1669, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_10 = PyTuple_New(1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1669, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_10, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1669, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
      __pyx_t_10 = __pyx_t_2; __Pyx_INCREF(__pyx_t_10); __pyx_t_19 = 0;
      __pyx_t_20 = NULL;
    } else {
      __pyx_t_19 = -1; __pyx_t_10 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1669, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_20 = Py_TYPE(__pyx_t_10)->tp_iternext; if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1669, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      if (likely(!__pyx_t_20)) {
        if (likely(PyList_CheckExact(__pyx_t_10))) {
          if (__pyx_t_19 >= PyList_GET_SIZE(__pyx_t_10)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyList_GET_ITEM(__pyx_t_10, __pyx_t_19); __Pyx_INCREF(__pyx_t_2); __pyx_t_19++; if (unlikely(0 < 0)) __PYX_ERR(0, 1669, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_10, __pyx_t_19); __pyx_t_19++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1669, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        } else {
          if (__pyx_t_19 >= PyTuple_GET_SIZE(__pyx_t_10)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_10, __pyx_t_19); __Pyx_INCREF(__pyx_t_2); __pyx_t_19++; if (unlikely(0 < 0)) __PYX_ERR(0, 1669, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_10, __pyx_t_19); __pyx_t_19++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1669, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        }
      } else {
        __pyx_t_2 = __pyx_t_20(__pyx_t_10);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1669, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_2);
      }
      __Pyx_XDECREF_SET(__pyx_v_nn, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "WaveTools.py":1670
 *         for mm in range(self.Mtot):
 *             for nn in range(self.N):
 *                 ij = mm * self.N + nn             # <<<<<<<<<<<<<<
 *                 self.ai_c[ij] = self.aiDirs[mm,nn]
 *                 self.phi_c[ij] = self.phiDirs[mm,nn]
 */
      __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->N); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1670, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_18 = PyNumber_Multiply(__pyx_v_mm, __pyx_t_2); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1670, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_18);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyNumber_Add(__pyx_t_18, __pyx_v_nn); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1670, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
      __Pyx_XDECREF_SET(__pyx_v_ij, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "WaveTools.py":1671
 *             for nn in range(self.N):
 *                 ij = mm * self.N + nn
 *                 self.ai_c[ij] = self.aiDirs[mm,nn]             # <<<<<<<<<<<<<<
 *                 self.phi_c[ij] = self.phiDirs[mm,nn]
 *                 self.omega_c[ij] = RW.omega[nn]
 */
      __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1671, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_v_mm);
      __Pyx_GIVEREF(__pyx_v_mm);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_mm);
      __Pyx_INCREF(__pyx_v_nn);
      __Pyx_GIVEREF(__pyx_v_nn);
      PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_nn);
      __pyx_t_18 = PyObject_GetItem(((PyObject *)__pyx_v_self->aiDirs), __pyx_t_2); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1671, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_18);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_t_18); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1671, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
      __pyx_t_22 = __Pyx_PyIndex_AsSsize_t(__pyx_v_ij); if (unlikely((__pyx_t_22 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1671, __pyx_L1_error)
      (__pyx_v_self->ai_c[__pyx_t_22]) = __pyx_t_11;

      /* "WaveTools.py":1672
 *                 ij = mm * self.N + nn
 *                 self.ai_c[ij] = self.aiDirs[mm,nn]
 *                 self.phi_c[ij] = self.phiDirs[mm,nn]             # <<<<<<<<<<<<<<
 *                 self.omega_c[ij] = RW.omega[nn]
 *                 self.ki_c[ij]  =RW.ki[nn]
 */
      __pyx_t_18 = PyTuple_New(2); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1672, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_18);
      __Pyx_INCREF(__pyx_v_mm);
      __Pyx_GIVEREF(__pyx_v_mm);
      PyTuple_SET_ITEM(__pyx_t_18, 0, __pyx_v_mm);
      __Pyx_INCREF(__pyx_v_nn);
      __Pyx_GIVEREF(__pyx_v_nn);
      PyTuple_SET_ITEM(__pyx_t_18, 1, __pyx_v_nn);
      __pyx_t_2 = PyObject_GetItem(((PyObject *)__pyx_v_self->phiDirs), __pyx_t_18); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1672, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
      __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1672, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_22 = __Pyx_PyIndex_AsSsize_t(__pyx_v_ij); if (unlikely((__pyx_t_22 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1672, __pyx_L1_error)
      (__pyx_v_self->phi_c[__pyx_t_22]) = __pyx_t_11;

      /* "WaveTools.py":1673
 *                 self.ai_c[ij] = self.aiDirs[mm,nn]
 *                 self.phi_c[ij] = self.phiDirs[mm,nn]
 *                 self.omega_c[ij] = RW.omega[nn]             # <<<<<<<<<<<<<<
 *                 self.ki_c[ij]  =RW.ki[nn]
 *                 self.tanh_c[ij] = RW.tanhF[nn]
 */
      __pyx_t_2 = PyObject_GetItem(((PyObject *)__pyx_v_RW->omega), __pyx_v_nn); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1673, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1673, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_22 = __Pyx_PyIndex_AsSsize_t(__pyx_v_ij); if (unlikely((__pyx_t_22 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1673, __pyx_L1_error)
      (__pyx_v_self->omega_c[__pyx_t_22]) = __pyx_t_11;

      /* "WaveTools.py":1674
 *                 self.phi_c[ij] = self.phiDirs[mm,nn]
 *                 self.omega_c[ij] = RW.omega[nn]
 *                 self.ki_c[ij]  =RW.ki[nn]             # <<<<<<<<<<<<<<
 *                 self.tanh_c[ij] = RW.tanhF[nn]
 *                 for kk in range(3):
 */
      __pyx_t_2 = PyObject_GetItem(((PyObject *)__pyx_v_RW->ki), __pyx_v_nn); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1674, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1674, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_22 = __Pyx_PyIndex_AsSsize_t(__pyx_v_ij); if (unlikely((__pyx_t_22 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1674, __pyx_L1_error)
      (__pyx_v_self->ki_c[__pyx_t_22]) = __pyx_t_11;

      /* "WaveTools.py":1675
 *                 self.omega_c[ij] = RW.omega[nn]
 *                 self.ki_c[ij]  =RW.ki[nn]
 *                 self.tanh_c[ij] = RW.tanhF[nn]             # <<<<<<<<<<<<<<
 *                 for kk in range(3):
 *                     self.kDir_c[3*ij+kk] = self.kDirs[nn,mm,kk]
 */
      __pyx_t_2 = PyObject_GetItem(((PyObject *)__pyx_v_RW->tanhF), __pyx_v_nn); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1675, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1675, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_22 = __Pyx_PyIndex_AsSsize_t(__pyx_v_ij); if (unlikely((__pyx_t_22 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1675, __pyx_L1_error)
      (__pyx_v_self->tanh_c[__pyx_t_22]) = __pyx_t_11;

      /* "WaveTools.py":1676
 *                 self.ki_c[ij]  =RW.ki[nn]
 *                 self.tanh_c[ij] = RW.tanhF[nn]
 *                 for kk in range(3):             # <<<<<<<<<<<<<<
 *                     self.kDir_c[3*ij+kk] = self.kDirs[nn,mm,kk]
 *                     self.waveDir_c[3*ij+kk] = self.waveDirs[mm,kk]
 */
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_tuple__116, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1676, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
        __pyx_t_18 = __pyx_t_2; __Pyx_INCREF(__pyx_t_18); __pyx_t_22 = 0;
        __pyx_t_23 = NULL;
      } else {
        __pyx_t_22 = -1; __pyx_t_18 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1676, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_18);
        __pyx_t_23 = Py_TYPE(__pyx_t_18)->tp_iternext; if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 1676, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      for (;;) {
        if (likely(!__pyx_t_23)) {
          if (likely(PyList_CheckExact(__pyx_t_18))) {
            if (__pyx_t_22 >= PyList_GET_SIZE(__pyx_t_18)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_2 = PyList_GET_ITEM(__pyx_t_18, __pyx_t_22); __Pyx_INCREF(__pyx_t_2); __pyx_t_22++; if (unlikely(0 < 0)) __PYX_ERR(0, 1676, __pyx_L1_error)
            #else
            __pyx_t_2 = PySequence_ITEM(__pyx_t_18, __pyx_t_22); __pyx_t_22++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1676, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            #endif
          } else {
            if (__pyx_t_22 >= PyTuple_GET_SIZE(__pyx_t_18)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_18, __pyx_t_22); __Pyx_INCREF(__pyx_t_2); __pyx_t_22++; if (unlikely(0 < 0)) __PYX_ERR(0, 1676, __pyx_L1_error)
            #else
            __pyx_t_2 = PySequence_ITEM(__pyx_t_18, __pyx_t_22); __pyx_t_22++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1676, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            #endif
          }
        } else {
          __pyx_t_2 = __pyx_t_23(__pyx_t_18);
          if (unlikely(!__pyx_t_2)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 1676, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_2);
        }
        __Pyx_XDECREF_SET(__pyx_v_kk, __pyx_t_2);
        __pyx_t_2 = 0;

        /* "WaveTools.py":1677
 *                 self.tanh_c[ij] = RW.tanhF[nn]
 *                 for kk in range(3):
 *                     self.kDir_c[3*ij+kk] = self.kDirs[nn,mm,kk]             # <<<<<<<<<<<<<<
 *                     self.waveDir_c[3*ij+kk] = self.waveDirs[mm,kk]
 * 
 */
        __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1677, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_INCREF(__pyx_v_nn);
        __Pyx_GIVEREF(__pyx_v_nn);
        PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_nn);
        __Pyx_INCREF(__pyx_v_mm);
        __Pyx_GIVEREF(__pyx_v_mm);
        PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_mm);
        __Pyx_INCREF(__pyx_v_kk);
        __Pyx_GIVEREF(__pyx_v_kk);
        PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_kk);
        __pyx_t_6 = PyObject_GetItem(((PyObject *)__pyx_v_self->kDirs), __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1677, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1677, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = PyNumber_Multiply(__pyx_int_3, __pyx_v_ij); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1677, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_2 = PyNumber_Add(__pyx_t_6, __pyx_v_kk); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1677, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_24 = __Pyx_PyIndex_AsSsize_t(__pyx_t_2); if (unlikely((__pyx_t_24 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1677, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        (__pyx_v_self->kDir_c[__pyx_t_24]) = __pyx_t_11;

        /* "WaveTools.py":1678
 *                 for kk in range(3):
 *                     self.kDir_c[3*ij+kk] = self.kDirs[nn,mm,kk]
 *                     self.waveDir_c[3*ij+kk] = self.waveDirs[mm,kk]             # <<<<<<<<<<<<<<
 * 
 *         self.kDir_ = self.kDir_c
 */
        __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1678, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_INCREF(__pyx_v_mm);
        __Pyx_GIVEREF(__pyx_v_mm);
        PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_mm);
        __Pyx_INCREF(__pyx_v_kk);
        __Pyx_GIVEREF(__pyx_v_kk);
        PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_kk);
        __pyx_t_6 = PyObject_GetItem(((PyObject *)__pyx_v_self->waveDirs), __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1678, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1678, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = PyNumber_Multiply(__pyx_int_3, __pyx_v_ij); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1678, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_2 = PyNumber_Add(__pyx_t_6, __pyx_v_kk); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1678, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_24 = __Pyx_PyIndex_AsSsize_t(__pyx_t_2); if (unlikely((__pyx_t_24 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1678, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        (__pyx_v_self->waveDir_c[__pyx_t_24]) = __pyx_t_11;

        /* "WaveTools.py":1676
 *                 self.ki_c[ij]  =RW.ki[nn]
 *                 self.tanh_c[ij] = RW.tanhF[nn]
 *                 for kk in range(3):             # <<<<<<<<<<<<<<
 *                     self.kDir_c[3*ij+kk] = self.kDirs[nn,mm,kk]
 *                     self.waveDir_c[3*ij+kk] = self.waveDirs[mm,kk]
 */
      }
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;

      /* "WaveTools.py":1669
 * 
 *         for mm in range(self.Mtot):
 *             for nn in range(self.N):             # <<<<<<<<<<<<<<
 *                 ij = mm * self.N + nn
 *                 self.ai_c[ij] = self.aiDirs[mm,nn]
 */
    }
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

    /* "WaveTools.py":1668
 * 
 * 
 *         for mm in range(self.Mtot):             # <<<<<<<<<<<<<<
 *             for nn in range(self.N):
 *                 ij = mm * self.N + nn
 */
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "WaveTools.py":1680
 *                     self.waveDir_c[3*ij+kk] = self.waveDirs[mm,kk]
 * 
 *         self.kDir_ = self.kDir_c             # <<<<<<<<<<<<<<
 *         self.omega_ = self.omega_c
 *         self.ki_  =self.ki_c
 */
  __pyx_t_21 = __pyx_v_self->kDir_c;
  __pyx_v_self->kDir_ = __pyx_t_21;

  /* "WaveTools.py":1681
 * 
 *         self.kDir_ = self.kDir_c
 *         self.omega_ = self.omega_c             # <<<<<<<<<<<<<<
 *         self.ki_  =self.ki_c
 *         self.ai_ = self.ai_c
 */
  __pyx_t_21 = __pyx_v_self->omega_c;
  __pyx_v_self->omega_ = __pyx_t_21;

  /* "WaveTools.py":1682
 *         self.kDir_ = self.kDir_c
 *         self.omega_ = self.omega_c
 *         self.ki_  =self.ki_c             # <<<<<<<<<<<<<<
 *         self.ai_ = self.ai_c
 *         self.tanh_ = self.tanh_c
 */
  __pyx_t_21 = __pyx_v_self->ki_c;
  __pyx_v_self->ki_ = __pyx_t_21;

  /* "WaveTools.py":1683
 *         self.omega_ = self.omega_c
 *         self.ki_  =self.ki_c
 *         self.ai_ = self.ai_c             # <<<<<<<<<<<<<<
 *         self.tanh_ = self.tanh_c
 *         self.phi_ = self.phi_c
 */
  __pyx_t_21 = __pyx_v_self->ai_c;
  __pyx_v_self->ai_ = __pyx_t_21;

  /* "WaveTools.py":1684
 *         self.ki_  =self.ki_c
 *         self.ai_ = self.ai_c
 *         self.tanh_ = self.tanh_c             # <<<<<<<<<<<<<<
 *         self.phi_ = self.phi_c
 *         self.waveDir_ =  self.waveDir_c
 */
  __pyx_t_21 = __pyx_v_self->tanh_c;
  __pyx_v_self->tanh_ = __pyx_t_21;

  /* "WaveTools.py":1685
 *         self.ai_ = self.ai_c
 *         self.tanh_ = self.tanh_c
 *         self.phi_ = self.phi_c             # <<<<<<<<<<<<<<
 *         self.waveDir_ =  self.waveDir_c
 * 
 */
  __pyx_t_21 = __pyx_v_self->phi_c;
  __pyx_v_self->phi_ = __pyx_t_21;

  /* "WaveTools.py":1686
 *         self.tanh_ = self.tanh_c
 *         self.phi_ = self.phi_c
 *         self.waveDir_ =  self.waveDir_c             # <<<<<<<<<<<<<<
 * 
 *     def _cpp_eta(self,  x,  t):
 */
  __pyx_t_21 = __pyx_v_self->waveDir_c;
  __pyx_v_self->waveDir_ = __pyx_t_21;

  /* "WaveTools.py":1554
 * 
 *     """
 *     def __cinit__(self,             # <<<<<<<<<<<<<<
 *                  M,  #half bin of frequencies
 *                  Tp, # np array with
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_AddTraceback("WaveTools.DirectionalWaves.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_validSpread);
  __Pyx_XDECREF(__pyx_v_spread_fun);
  __Pyx_XDECREF((PyObject *)__pyx_v_RW);
  __Pyx_XDECREF(__pyx_v_rotation3D);
  __Pyx_XDECREF(__pyx_v_thetas);
  __Pyx_XDECREF(__pyx_v_dth);
  __Pyx_XDECREF(__pyx_v_temp_array);
  __Pyx_XDECREF(__pyx_v_directions);
  __Pyx_XDECREF(__pyx_v_rr);
  __Pyx_XDECREF(__pyx_v_theta);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_theta_m);
  __Pyx_XDECREF(__pyx_v_Si_Sp);
  __Pyx_XDECREF(__pyx_v_freq);
  __Pyx_XDECREF(__pyx_v_ii);
  __Pyx_XDECREF(__pyx_v_nn);
  __Pyx_XDECREF(__pyx_v_mm);
  __Pyx_XDECREF(__pyx_v_ij);
  __Pyx_XDECREF(__pyx_v_kk);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":1688
 *         self.waveDir_ =  self.waveDir_c
 * 
 *     def _cpp_eta(self,  x,  t):             # <<<<<<<<<<<<<<
 * 
 *         return __cpp_etaRandom(x,t,self.kDir_, self.omega_,self.phi_,self.ai_, self.Nall, self.fast)
 */

static double __pyx_f_9WaveTools_16DirectionalWaves__cpp_eta(struct __pyx_obj_9WaveTools_DirectionalWaves *__pyx_v_self, double *__pyx_v_x, double __pyx_v_t) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_cpp_eta", 0);

  /* "WaveTools.py":1690
 *     def _cpp_eta(self,  x,  t):
 * 
 *         return __cpp_etaRandom(x,t,self.kDir_, self.omega_,self.phi_,self.ai_, self.Nall, self.fast)             # <<<<<<<<<<<<<<
 * 
 *     def eta(self, x, t):
 */
  __pyx_r = proteus::__cpp_etaRandom(__pyx_v_x, __pyx_v_t, __pyx_v_self->kDir_, __pyx_v_self->omega_, __pyx_v_self->phi_, __pyx_v_self->ai_, __pyx_v_self->Nall, __pyx_v_self->fast);
  goto __pyx_L0;

  /* "WaveTools.py":1688
 *         self.waveDir_ =  self.waveDir_c
 * 
 *     def _cpp_eta(self,  x,  t):             # <<<<<<<<<<<<<<
 * 
 *         return __cpp_etaRandom(x,t,self.kDir_, self.omega_,self.phi_,self.ai_, self.Nall, self.fast)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":1692
 *         return __cpp_etaRandom(x,t,self.kDir_, self.omega_,self.phi_,self.ai_, self.Nall, self.fast)
 * 
 *     def eta(self, x, t):             # <<<<<<<<<<<<<<
 *         """Calculates free surface elevation (RandomWaves class)
 *         Parameters
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_16DirectionalWaves_3eta(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9WaveTools_16DirectionalWaves_2eta[] = "Calculates free surface elevation (RandomWaves class)\n        Parameters\n        ----------\n        x : numpy.ndarray\n            Position vector\n        t : float\n            Time variable\n\n        Returns\n        --------\n        float\n            Free-surface elevation as a float\n\n        ";
static PyMethodDef __pyx_mdef_9WaveTools_16DirectionalWaves_3eta = {"eta", (PyCFunction)__pyx_pw_9WaveTools_16DirectionalWaves_3eta, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_16DirectionalWaves_2eta};
static PyObject *__pyx_pw_9WaveTools_16DirectionalWaves_3eta(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_t = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("eta (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_t,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("eta", 1, 2, 2, 1); __PYX_ERR(0, 1692, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "eta") < 0)) __PYX_ERR(0, 1692, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = values[0];
    __pyx_v_t = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("eta", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1692, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("WaveTools.DirectionalWaves.eta", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9WaveTools_16DirectionalWaves_2eta(((struct __pyx_obj_9WaveTools_DirectionalWaves *)__pyx_v_self), __pyx_v_x, __pyx_v_t);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_16DirectionalWaves_2eta(struct __pyx_obj_9WaveTools_DirectionalWaves *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_t) {
  double __pyx_v_xx[3];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  __Pyx_RefNannySetupContext("eta", 0);

  /* "WaveTools.py":1708
 *         """
 *         cython.declare(xx=cython.double[3])
 *         xx[0] = x[0]             # <<<<<<<<<<<<<<
 *         xx[1] = x[1]
 *         xx[2] = x[2]
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_x, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1708, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1708, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  (__pyx_v_xx[0]) = __pyx_t_2;

  /* "WaveTools.py":1709
 *         cython.declare(xx=cython.double[3])
 *         xx[0] = x[0]
 *         xx[1] = x[1]             # <<<<<<<<<<<<<<
 *         xx[2] = x[2]
 *         return self._cpp_eta(xx,t)
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_x, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1709, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1709, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  (__pyx_v_xx[1]) = __pyx_t_2;

  /* "WaveTools.py":1710
 *         xx[0] = x[0]
 *         xx[1] = x[1]
 *         xx[2] = x[2]             # <<<<<<<<<<<<<<
 *         return self._cpp_eta(xx,t)
 * 
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_x, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1710, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1710, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  (__pyx_v_xx[2]) = __pyx_t_2;

  /* "WaveTools.py":1711
 *         xx[1] = x[1]
 *         xx[2] = x[2]
 *         return self._cpp_eta(xx,t)             # <<<<<<<<<<<<<<
 * 
 *     def _cpp_u(self,U,  x,  t):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_t); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1711, __pyx_L1_error)
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_vtabstruct_9WaveTools_DirectionalWaves *)__pyx_v_self->__pyx_vtab)->_cpp_eta(__pyx_v_self, __pyx_v_xx, __pyx_t_2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1711, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "WaveTools.py":1692
 *         return __cpp_etaRandom(x,t,self.kDir_, self.omega_,self.phi_,self.ai_, self.Nall, self.fast)
 * 
 *     def eta(self, x, t):             # <<<<<<<<<<<<<<
 *         """Calculates free surface elevation (RandomWaves class)
 *         Parameters
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("WaveTools.DirectionalWaves.eta", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":1713
 *         return self._cpp_eta(xx,t)
 * 
 *     def _cpp_u(self,U,  x,  t):             # <<<<<<<<<<<<<<
 * 
 *         __cpp_uDir(U, x,t,self.kDir_, self.ki_, self.omega_,self.phi_,self.ai_,self.mwl,self.depth, self.Nall, self.waveDir_, self.vDir_, self.tanh_, self.gAbs, self.fast)
 */

static void __pyx_f_9WaveTools_16DirectionalWaves__cpp_u(struct __pyx_obj_9WaveTools_DirectionalWaves *__pyx_v_self, double *__pyx_v_U, double *__pyx_v_x, double __pyx_v_t) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_cpp_u", 0);

  /* "WaveTools.py":1715
 *     def _cpp_u(self,U,  x,  t):
 * 
 *         __cpp_uDir(U, x,t,self.kDir_, self.ki_, self.omega_,self.phi_,self.ai_,self.mwl,self.depth, self.Nall, self.waveDir_, self.vDir_, self.tanh_, self.gAbs, self.fast)             # <<<<<<<<<<<<<<
 * 
 *     def u(self, x, t):
 */
  proteus::__cpp_uDir(__pyx_v_U, __pyx_v_x, __pyx_v_t, __pyx_v_self->kDir_, __pyx_v_self->ki_, __pyx_v_self->omega_, __pyx_v_self->phi_, __pyx_v_self->ai_, __pyx_v_self->mwl, __pyx_v_self->depth, __pyx_v_self->Nall, __pyx_v_self->waveDir_, __pyx_v_self->vDir_, __pyx_v_self->tanh_, __pyx_v_self->gAbs, __pyx_v_self->fast);

  /* "WaveTools.py":1713
 *         return self._cpp_eta(xx,t)
 * 
 *     def _cpp_u(self,U,  x,  t):             # <<<<<<<<<<<<<<
 * 
 *         __cpp_uDir(U, x,t,self.kDir_, self.ki_, self.omega_,self.phi_,self.ai_,self.mwl,self.depth, self.Nall, self.waveDir_, self.vDir_, self.tanh_, self.gAbs, self.fast)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "WaveTools.py":1717
 *         __cpp_uDir(U, x,t,self.kDir_, self.ki_, self.omega_,self.phi_,self.ai_,self.mwl,self.depth, self.Nall, self.waveDir_, self.vDir_, self.tanh_, self.gAbs, self.fast)
 * 
 *     def u(self, x, t):             # <<<<<<<<<<<<<<
 *         """Calculates wave velocity vector (RandomWaves class)
 *         Parameters
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_16DirectionalWaves_5u(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9WaveTools_16DirectionalWaves_4u[] = "Calculates wave velocity vector (RandomWaves class)\n        Parameters\n        ----------\n        x : numpy.ndarray\n            Position vector\n        t : float\n            Time variable\n\n        Returns\n        --------\n        numpy.ndarray\n            Velocity vector as 1D array\n\n        ";
static PyMethodDef __pyx_mdef_9WaveTools_16DirectionalWaves_5u = {"u", (PyCFunction)__pyx_pw_9WaveTools_16DirectionalWaves_5u, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_16DirectionalWaves_4u};
static PyObject *__pyx_pw_9WaveTools_16DirectionalWaves_5u(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_t = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("u (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_t,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("u", 1, 2, 2, 1); __PYX_ERR(0, 1717, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "u") < 0)) __PYX_ERR(0, 1717, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = values[0];
    __pyx_v_t = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("u", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1717, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("WaveTools.DirectionalWaves.u", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9WaveTools_16DirectionalWaves_4u(((struct __pyx_obj_9WaveTools_DirectionalWaves *)__pyx_v_self), __pyx_v_x, __pyx_v_t);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_16DirectionalWaves_4u(struct __pyx_obj_9WaveTools_DirectionalWaves *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_t) {
  double __pyx_v_xx[3];
  double __pyx_v_cppU[3];
  long __pyx_v_ii;
  PyObject *__pyx_v_U = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  long __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  double __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("u", 0);

  /* "WaveTools.py":1735
 *         cython.declare(xx=cython.double[3])
 *         cython.declare(cppU=cython.double[3])
 *         for ii in range(3):             # <<<<<<<<<<<<<<
 *             xx[ii] = x[ii]
 *             cppU[ii] = 0.
 */
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {
    __pyx_v_ii = __pyx_t_1;

    /* "WaveTools.py":1736
 *         cython.declare(cppU=cython.double[3])
 *         for ii in range(3):
 *             xx[ii] = x[ii]             # <<<<<<<<<<<<<<
 *             cppU[ii] = 0.
 *         U = np.zeros(3,)
 */
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_x, __pyx_v_ii, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1736, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1736, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    (__pyx_v_xx[__pyx_v_ii]) = __pyx_t_3;

    /* "WaveTools.py":1737
 *         for ii in range(3):
 *             xx[ii] = x[ii]
 *             cppU[ii] = 0.             # <<<<<<<<<<<<<<
 *         U = np.zeros(3,)
 *         self._cpp_u(cppU,xx,t)
 */
    (__pyx_v_cppU[__pyx_v_ii]) = 0.;
  }

  /* "WaveTools.py":1738
 *             xx[ii] = x[ii]
 *             cppU[ii] = 0.
 *         U = np.zeros(3,)             # <<<<<<<<<<<<<<
 *         self._cpp_u(cppU,xx,t)
 *         U[0] = cppU[0]
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1738, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1738, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__117, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1738, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_U = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "WaveTools.py":1739
 *             cppU[ii] = 0.
 *         U = np.zeros(3,)
 *         self._cpp_u(cppU,xx,t)             # <<<<<<<<<<<<<<
 *         U[0] = cppU[0]
 *         U[1] = cppU[1]
 */
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_t); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1739, __pyx_L1_error)
  ((struct __pyx_vtabstruct_9WaveTools_DirectionalWaves *)__pyx_v_self->__pyx_vtab)->_cpp_u(__pyx_v_self, __pyx_v_cppU, __pyx_v_xx, __pyx_t_3);

  /* "WaveTools.py":1740
 *         U = np.zeros(3,)
 *         self._cpp_u(cppU,xx,t)
 *         U[0] = cppU[0]             # <<<<<<<<<<<<<<
 *         U[1] = cppU[1]
 *         U[2] = cppU[2]
 */
  __pyx_t_2 = PyFloat_FromDouble((__pyx_v_cppU[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1740, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__Pyx_SetItemInt(__pyx_v_U, 0, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1) < 0)) __PYX_ERR(0, 1740, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "WaveTools.py":1741
 *         self._cpp_u(cppU,xx,t)
 *         U[0] = cppU[0]
 *         U[1] = cppU[1]             # <<<<<<<<<<<<<<
 *         U[2] = cppU[2]
 *         return U
 */
  __pyx_t_2 = PyFloat_FromDouble((__pyx_v_cppU[1])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1741, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__Pyx_SetItemInt(__pyx_v_U, 1, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1) < 0)) __PYX_ERR(0, 1741, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "WaveTools.py":1742
 *         U[0] = cppU[0]
 *         U[1] = cppU[1]
 *         U[2] = cppU[2]             # <<<<<<<<<<<<<<
 *         return U
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble((__pyx_v_cppU[2])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1742, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__Pyx_SetItemInt(__pyx_v_U, 2, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1) < 0)) __PYX_ERR(0, 1742, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "WaveTools.py":1743
 *         U[1] = cppU[1]
 *         U[2] = cppU[2]
 *         return U             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_U);
  __pyx_r = __pyx_v_U;
  goto __pyx_L0;

  /* "WaveTools.py":1717
 *         __cpp_uDir(U, x,t,self.kDir_, self.ki_, self.omega_,self.phi_,self.ai_,self.mwl,self.depth, self.Nall, self.waveDir_, self.vDir_, self.tanh_, self.gAbs, self.fast)
 * 
 *     def u(self, x, t):             # <<<<<<<<<<<<<<
 *         """Calculates wave velocity vector (RandomWaves class)
 *         Parameters
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("WaveTools.DirectionalWaves.u", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_U);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.pxd":148
 *     cdef double[100000] phi_c
 *     cdef public:
 *         double mwl,depth             # <<<<<<<<<<<<<<
 *     cdef double _cpp_eta(self, double* x, double t)
 *     cdef void _cpp_u(self, double* U, double* x, double t)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_16DirectionalWaves_3mwl_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9WaveTools_16DirectionalWaves_3mwl_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_16DirectionalWaves_3mwl___get__(((struct __pyx_obj_9WaveTools_DirectionalWaves *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_16DirectionalWaves_3mwl___get__(struct __pyx_obj_9WaveTools_DirectionalWaves *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->mwl); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("WaveTools.DirectionalWaves.mwl.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9WaveTools_16DirectionalWaves_3mwl_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9WaveTools_16DirectionalWaves_3mwl_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_16DirectionalWaves_3mwl_2__set__(((struct __pyx_obj_9WaveTools_DirectionalWaves *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9WaveTools_16DirectionalWaves_3mwl_2__set__(struct __pyx_obj_9WaveTools_DirectionalWaves *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 148, __pyx_L1_error)
  __pyx_v_self->mwl = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("WaveTools.DirectionalWaves.mwl.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_16DirectionalWaves_5depth_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9WaveTools_16DirectionalWaves_5depth_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_16DirectionalWaves_5depth___get__(((struct __pyx_obj_9WaveTools_DirectionalWaves *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_16DirectionalWaves_5depth___get__(struct __pyx_obj_9WaveTools_DirectionalWaves *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->depth); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("WaveTools.DirectionalWaves.depth.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9WaveTools_16DirectionalWaves_5depth_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9WaveTools_16DirectionalWaves_5depth_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_16DirectionalWaves_5depth_2__set__(((struct __pyx_obj_9WaveTools_DirectionalWaves *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9WaveTools_16DirectionalWaves_5depth_2__set__(struct __pyx_obj_9WaveTools_DirectionalWaves *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 148, __pyx_L1_error)
  __pyx_v_self->depth = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("WaveTools.DirectionalWaves.depth.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":1790
 * 
 *     """
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *                  timeSeriesFile, # e.g.= "Timeseries.txt",
 *                  skiprows,
 */

/* Python wrapper */
static int __pyx_pw_9WaveTools_10TimeSeries_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9WaveTools_10TimeSeries_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_timeSeriesFile = 0;
  PyObject *__pyx_v_skiprows = 0;
  PyObject *__pyx_v_timeSeriesPosition = 0;
  PyObject *__pyx_v_depth = 0;
  PyObject *__pyx_v_N = 0;
  PyObject *__pyx_v_mwl = 0;
  PyObject *__pyx_v_waveDir = 0;
  PyObject *__pyx_v_g = 0;
  PyObject *__pyx_v_cutoffTotal = 0;
  PyObject *__pyx_v_rec_direct = 0;
  PyObject *__pyx_v_window_params = 0;
  PyObject *__pyx_v_arrayData = 0;
  PyObject *__pyx_v_seriesArray = 0;
  PyObject *__pyx_v_Lgen = 0;
  PyObject *__pyx_v_fast = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_timeSeriesFile,&__pyx_n_s_skiprows,&__pyx_n_s_timeSeriesPosition,&__pyx_n_s_depth,&__pyx_n_s_N,&__pyx_n_s_mwl,&__pyx_n_s_waveDir,&__pyx_n_s_g,&__pyx_n_s_cutoffTotal,&__pyx_n_s_rec_direct,&__pyx_n_s_window_params,&__pyx_n_s_arrayData,&__pyx_n_s_seriesArray,&__pyx_n_s_Lgen,&__pyx_n_s_fast,0};
    PyObject* values[15] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    values[8] = ((PyObject *)__pyx_float_0_01);

    /* "WaveTools.py":1800
 *                  g,
 *                  cutoffTotal = 0.01,
 *                  rec_direct = True,             # <<<<<<<<<<<<<<
 *                  window_params = None, #If rec_direct = False then wind_params = {"Nwaves":Nwaves,"Tm":Tm,"Window":wind_filt,"Overlap":overlap,"Cutoff":cutoff}
 *                  arrayData = False,
 */
    values[9] = ((PyObject *)Py_True);

    /* "WaveTools.py":1801
 *                  cutoffTotal = 0.01,
 *                  rec_direct = True,
 *                  window_params = None, #If rec_direct = False then wind_params = {"Nwaves":Nwaves,"Tm":Tm,"Window":wind_filt,"Overlap":overlap,"Cutoff":cutoff}             # <<<<<<<<<<<<<<
 *                  arrayData = False,
 *                  seriesArray = None,
 */
    values[10] = ((PyObject *)Py_None);

    /* "WaveTools.py":1802
 *                  rec_direct = True,
 *                  window_params = None, #If rec_direct = False then wind_params = {"Nwaves":Nwaves,"Tm":Tm,"Window":wind_filt,"Overlap":overlap,"Cutoff":cutoff}
 *                  arrayData = False,             # <<<<<<<<<<<<<<
 *                  seriesArray = None,
 *                  Lgen = np.array([0.,0.,0]),
 */
    values[11] = ((PyObject *)Py_False);

    /* "WaveTools.py":1803
 *                  window_params = None, #If rec_direct = False then wind_params = {"Nwaves":Nwaves,"Tm":Tm,"Window":wind_filt,"Overlap":overlap,"Cutoff":cutoff}
 *                  arrayData = False,
 *                  seriesArray = None,             # <<<<<<<<<<<<<<
 *                  Lgen = np.array([0.,0.,0]),
 *                  fast = True
 */
    values[12] = ((PyObject *)Py_None);
    values[13] = __pyx_k__118;

    /* "WaveTools.py":1805
 *                  seriesArray = None,
 *                  Lgen = np.array([0.,0.,0]),
 *                  fast = True             # <<<<<<<<<<<<<<
 *                  ):
 *         self.fast = fast
 */
    values[14] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_timeSeriesFile)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_skiprows)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 8, 15, 1); __PYX_ERR(0, 1790, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_timeSeriesPosition)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 8, 15, 2); __PYX_ERR(0, 1790, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_depth)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 8, 15, 3); __PYX_ERR(0, 1790, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_N)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 8, 15, 4); __PYX_ERR(0, 1790, __pyx_L3_error)
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mwl)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 8, 15, 5); __PYX_ERR(0, 1790, __pyx_L3_error)
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_waveDir)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 8, 15, 6); __PYX_ERR(0, 1790, __pyx_L3_error)
        }
        case  7:
        if (likely((values[7] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 8, 15, 7); __PYX_ERR(0, 1790, __pyx_L3_error)
        }
        case  8:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cutoffTotal);
          if (value) { values[8] = value; kw_args--; }
        }
        case  9:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rec_direct);
          if (value) { values[9] = value; kw_args--; }
        }
        case 10:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_window_params);
          if (value) { values[10] = value; kw_args--; }
        }
        case 11:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_arrayData);
          if (value) { values[11] = value; kw_args--; }
        }
        case 12:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_seriesArray);
          if (value) { values[12] = value; kw_args--; }
        }
        case 13:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Lgen);
          if (value) { values[13] = value; kw_args--; }
        }
        case 14:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fast);
          if (value) { values[14] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 1790, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_timeSeriesFile = values[0];
    __pyx_v_skiprows = values[1];
    __pyx_v_timeSeriesPosition = values[2];
    __pyx_v_depth = values[3];
    __pyx_v_N = values[4];
    __pyx_v_mwl = values[5];
    __pyx_v_waveDir = values[6];
    __pyx_v_g = values[7];
    __pyx_v_cutoffTotal = values[8];
    __pyx_v_rec_direct = values[9];
    __pyx_v_window_params = values[10];
    __pyx_v_arrayData = values[11];
    __pyx_v_seriesArray = values[12];
    __pyx_v_Lgen = values[13];
    __pyx_v_fast = values[14];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 8, 15, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1790, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("WaveTools.TimeSeries.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9WaveTools_10TimeSeries___init__(((struct __pyx_obj_9WaveTools_TimeSeries *)__pyx_v_self), __pyx_v_timeSeriesFile, __pyx_v_skiprows, __pyx_v_timeSeriesPosition, __pyx_v_depth, __pyx_v_N, __pyx_v_mwl, __pyx_v_waveDir, __pyx_v_g, __pyx_v_cutoffTotal, __pyx_v_rec_direct, __pyx_v_window_params, __pyx_v_arrayData, __pyx_v_seriesArray, __pyx_v_Lgen, __pyx_v_fast);

  /* "WaveTools.py":1790
 * 
 *     """
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *                  timeSeriesFile, # e.g.= "Timeseries.txt",
 *                  skiprows,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9WaveTools_10TimeSeries___init__(struct __pyx_obj_9WaveTools_TimeSeries *__pyx_v_self, PyObject *__pyx_v_timeSeriesFile, PyObject *__pyx_v_skiprows, PyObject *__pyx_v_timeSeriesPosition, PyObject *__pyx_v_depth, PyObject *__pyx_v_N, PyObject *__pyx_v_mwl, PyObject *__pyx_v_waveDir, PyObject *__pyx_v_g, PyObject *__pyx_v_cutoffTotal, PyObject *__pyx_v_rec_direct, PyObject *__pyx_v_window_params, PyObject *__pyx_v_arrayData, PyObject *__pyx_v_seriesArray, PyObject *__pyx_v_Lgen, PyObject *__pyx_v_fast) {
  CYTHON_UNUSED PyObject *__pyx_v_Nwaves = NULL;
  PyObject *__pyx_v_tdata = NULL;
  PyObject *__pyx_v_filetype = NULL;
  PyObject *__pyx_v_fid = NULL;
  Py_ssize_t __pyx_v_ncols;
  PyObject *__pyx_v_time_temp = NULL;
  int __pyx_v_doInterp;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_dt_temp = NULL;
  PyObject *__pyx_v_Nf = NULL;
  Py_ssize_t __pyx_v_nfft;
  PyObject *__pyx_v_decomp = NULL;
  PyObject *__pyx_v_ipeak = NULL;
  PyObject *__pyx_v_imax = NULL;
  PyObject *__pyx_v_imin = NULL;
  PyObject *__pyx_v_ii = NULL;
  PyObject *__pyx_v_ij = NULL;
  PyObject *__pyx_v_kk = NULL;
  PyObject *__pyx_v_windowName = NULL;
  PyObject *__pyx_v_validWindows = NULL;
  PyObject *__pyx_v_wind_filt = NULL;
  double __pyx_v_diff;
  PyObject *__pyx_v_jj = NULL;
  PyObject *__pyx_v_span = NULL;
  PyObject *__pyx_v_tfirst = NULL;
  PyObject *__pyx_v_tlast = NULL;
  PyObject *__pyx_v_ispan1 = NULL;
  PyObject *__pyx_v_ispan2 = NULL;
  PyObject *__pyx_v_tstart = NULL;
  PyObject *__pyx_v_wind = NULL;
  PyObject *__pyx_v_Nftemp = NULL;
  PyObject *__pyx_v_ki = NULL;
  PyObject *__pyx_v_kDir = NULL;
  PyObject *__pyx_v_Tlag = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  double __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *(*__pyx_t_11)(PyObject *);
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  long __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  PyObject *(*__pyx_t_17)(PyObject *);
  Py_ssize_t __pyx_t_18;
  double *__pyx_t_19;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  double __pyx_t_23;
  double __pyx_t_24;
  int __pyx_t_25;
  PyObject *__pyx_t_26 = NULL;
  PyObject *__pyx_t_27 = NULL;
  PyObject *(*__pyx_t_28)(PyObject *);
  Py_ssize_t __pyx_t_29;
  double (*__pyx_t_30)(struct __pyx_obj_9WaveTools_TimeSeries *, double *, double);
  void (*__pyx_t_31)(struct __pyx_obj_9WaveTools_TimeSeries *, double *, double *, double);
  double (*__pyx_t_32)(struct __pyx_obj_9WaveTools_TimeSeries *, double *, double);
  void (*__pyx_t_33)(struct __pyx_obj_9WaveTools_TimeSeries *, double *, double *, double);
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "WaveTools.py":1807
 *                  fast = True
 *                  ):
 *         self.fast = fast             # <<<<<<<<<<<<<<
 *         self.rec_direct = rec_direct
 *         # Setting the depth
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_fast); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1807, __pyx_L1_error)
  __pyx_v_self->fast = __pyx_t_1;

  /* "WaveTools.py":1808
 *                  ):
 *         self.fast = fast
 *         self.rec_direct = rec_direct             # <<<<<<<<<<<<<<
 *         # Setting the depth
 *         self.depth = depth
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_rec_direct); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1808, __pyx_L1_error)
  __pyx_v_self->rec_direct = __pyx_t_1;

  /* "WaveTools.py":1810
 *         self.rec_direct = rec_direct
 *         # Setting the depth
 *         self.depth = depth             # <<<<<<<<<<<<<<
 *         # Number of wave components
 *         self.N = N
 */
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_depth); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1810, __pyx_L1_error)
  __pyx_v_self->depth = __pyx_t_2;

  /* "WaveTools.py":1812
 *         self.depth = depth
 *         # Number of wave components
 *         self.N = N             # <<<<<<<<<<<<<<
 *         self.tanhF = np.zeros(N,"d")
 *         Nwaves = None
 */
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_N); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1812, __pyx_L1_error)
  __pyx_v_self->N = __pyx_t_3;

  /* "WaveTools.py":1813
 *         # Number of wave components
 *         self.N = N
 *         self.tanhF = np.zeros(N,"d")             # <<<<<<<<<<<<<<
 *         Nwaves = None
 *         # Position of timeSeriesFile
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1813, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_zeros); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1813, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  __pyx_t_3 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_3 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_N, __pyx_n_s_d};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_3, 2+__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1813, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_N, __pyx_n_s_d};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_3, 2+__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1813, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1813, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_N);
    __Pyx_GIVEREF(__pyx_v_N);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_3, __pyx_v_N);
    __Pyx_INCREF(__pyx_n_s_d);
    __Pyx_GIVEREF(__pyx_n_s_d);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_3, __pyx_n_s_d);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1813, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1813, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_4);
  __Pyx_GOTREF(__pyx_v_self->tanhF);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->tanhF));
  __pyx_v_self->tanhF = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "WaveTools.py":1814
 *         self.N = N
 *         self.tanhF = np.zeros(N,"d")
 *         Nwaves = None             # <<<<<<<<<<<<<<
 *         # Position of timeSeriesFile
 *         if(len(timeSeriesPosition)==3):
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_Nwaves = Py_None;

  /* "WaveTools.py":1816
 *         Nwaves = None
 *         # Position of timeSeriesFile
 *         if(len(timeSeriesPosition)==3):             # <<<<<<<<<<<<<<
 *             self.x0 = timeSeriesPosition
 *         else:
 */
  __pyx_t_8 = PyObject_Length(__pyx_v_timeSeriesPosition); if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(0, 1816, __pyx_L1_error)
  __pyx_t_9 = ((__pyx_t_8 == 3) != 0);
  if (__pyx_t_9) {

    /* "WaveTools.py":1817
 *         # Position of timeSeriesFile
 *         if(len(timeSeriesPosition)==3):
 *             self.x0 = timeSeriesPosition             # <<<<<<<<<<<<<<
 *         else:
 *             logEvent("ERROR! Wavetools.py: Location vector for timeSeries must have three-components",level=0)
 */
    if (!(likely(((__pyx_v_timeSeriesPosition) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_timeSeriesPosition, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1817, __pyx_L1_error)
    __pyx_t_4 = __pyx_v_timeSeriesPosition;
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __Pyx_GOTREF(__pyx_v_self->x0);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->x0));
    __pyx_v_self->x0 = ((PyArrayObject *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "WaveTools.py":1816
 *         Nwaves = None
 *         # Position of timeSeriesFile
 *         if(len(timeSeriesPosition)==3):             # <<<<<<<<<<<<<<
 *             self.x0 = timeSeriesPosition
 *         else:
 */
    goto __pyx_L3;
  }

  /* "WaveTools.py":1819
 *             self.x0 = timeSeriesPosition
 *         else:
 *             logEvent("ERROR! Wavetools.py: Location vector for timeSeries must have three-components",level=0)             # <<<<<<<<<<<<<<
 *             sys.exit(1)
 * 
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_logEvent); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1819, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = PyDict_New(); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1819, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_level, __pyx_int_0) < 0) __PYX_ERR(0, 1819, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__119, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1819, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "WaveTools.py":1820
 *         else:
 *             logEvent("ERROR! Wavetools.py: Location vector for timeSeries must have three-components",level=0)
 *             sys.exit(1)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_sys); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1820, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_exit); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1820, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__120, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1820, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __pyx_L3:;

  /* "WaveTools.py":1824
 * 
 *         # Mean water level
 *         self.mwl = mwl             # <<<<<<<<<<<<<<
 *         # Wave direction
 *         self.waveDir = setDirVector(waveDir)
 */
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_mwl); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1824, __pyx_L1_error)
  __pyx_v_self->mwl = __pyx_t_2;

  /* "WaveTools.py":1826
 *         self.mwl = mwl
 *         # Wave direction
 *         self.waveDir = setDirVector(waveDir)             # <<<<<<<<<<<<<<
 *         # Gravity
 *         self.g = np.array(g)
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_setDirVector); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1826, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_waveDir); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1826, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_waveDir};
      __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1826, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_7);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_waveDir};
      __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1826, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_7);
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1826, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_INCREF(__pyx_v_waveDir);
      __Pyx_GIVEREF(__pyx_v_waveDir);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_waveDir);
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_5, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1826, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (!(likely(((__pyx_t_7) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_7, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1826, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_7);
  __Pyx_GOTREF(__pyx_v_self->waveDir);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->waveDir));
  __pyx_v_self->waveDir = ((PyArrayObject *)__pyx_t_7);
  __pyx_t_7 = 0;

  /* "WaveTools.py":1828
 *         self.waveDir = setDirVector(waveDir)
 *         # Gravity
 *         self.g = np.array(g)             # <<<<<<<<<<<<<<
 *         # Derived variables
 *         # Gravity magnitude
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1828, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_array); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1828, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_g); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1828, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v_g};
      __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1828, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_7);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v_g};
      __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1828, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_7);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1828, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_INCREF(__pyx_v_g);
      __Pyx_GIVEREF(__pyx_v_g);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_g);
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1828, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (!(likely(((__pyx_t_7) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_7, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1828, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_7);
  __Pyx_GOTREF(__pyx_v_self->g);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->g));
  __pyx_v_self->g = ((PyArrayObject *)__pyx_t_7);
  __pyx_t_7 = 0;

  /* "WaveTools.py":1831
 *         # Derived variables
 *         # Gravity magnitude
 *         self.gAbs = sqrt(sum(g * g))             # <<<<<<<<<<<<<<
 *         # Definition of gravity direction
 *         self.vDir = setVertDir(g)
 */
  __pyx_t_7 = PyNumber_Multiply(__pyx_v_g, __pyx_v_g); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1831, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1831, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_sum, __pyx_t_5, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1831, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_7); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1831, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_self->gAbs = sqrt(__pyx_t_2);

  /* "WaveTools.py":1833
 *         self.gAbs = sqrt(sum(g * g))
 *         # Definition of gravity direction
 *         self.vDir = setVertDir(g)             # <<<<<<<<<<<<<<
 *         dirCheck(self.waveDir,self.vDir)
 *         #Reading time series
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_setVertDir); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1833, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_g); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1833, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_g};
      __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1833, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_7);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_g};
      __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1833, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_7);
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1833, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_INCREF(__pyx_v_g);
      __Pyx_GIVEREF(__pyx_v_g);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_g);
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1833, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (!(likely(((__pyx_t_7) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_7, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1833, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_7);
  __Pyx_GOTREF(__pyx_v_self->vDir);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->vDir));
  __pyx_v_self->vDir = ((PyArrayObject *)__pyx_t_7);
  __pyx_t_7 = 0;

  /* "WaveTools.py":1834
 *         # Definition of gravity direction
 *         self.vDir = setVertDir(g)
 *         dirCheck(self.waveDir,self.vDir)             # <<<<<<<<<<<<<<
 *         #Reading time series
 * 
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_dirCheck); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  __pyx_t_3 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_3 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, ((PyObject *)__pyx_v_self->waveDir), ((PyObject *)__pyx_v_self->vDir)};
    __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_3, 2+__pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1834, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_7);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, ((PyObject *)__pyx_v_self->waveDir), ((PyObject *)__pyx_v_self->vDir)};
    __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_3, 2+__pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1834, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_7);
  } else
  #endif
  {
    __pyx_t_4 = PyTuple_New(2+__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1834, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_self->waveDir));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self->waveDir));
    PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_3, ((PyObject *)__pyx_v_self->waveDir));
    __Pyx_INCREF(((PyObject *)__pyx_v_self->vDir));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self->vDir));
    PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_3, ((PyObject *)__pyx_v_self->vDir));
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1834, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "WaveTools.py":1838
 * 
 * 
 *         if(arrayData):             # <<<<<<<<<<<<<<
 *             tdata = seriesArray
 *         else:
 */
  __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_v_arrayData); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 1838, __pyx_L1_error)
  if (__pyx_t_9) {

    /* "WaveTools.py":1839
 * 
 *         if(arrayData):
 *             tdata = seriesArray             # <<<<<<<<<<<<<<
 *         else:
 *             filetype = timeSeriesFile[-4:]
 */
    __Pyx_INCREF(__pyx_v_seriesArray);
    __pyx_v_tdata = __pyx_v_seriesArray;

    /* "WaveTools.py":1838
 * 
 * 
 *         if(arrayData):             # <<<<<<<<<<<<<<
 *             tdata = seriesArray
 *         else:
 */
    goto __pyx_L4;
  }

  /* "WaveTools.py":1841
 *             tdata = seriesArray
 *         else:
 *             filetype = timeSeriesFile[-4:]             # <<<<<<<<<<<<<<
 *             fid = open(timeSeriesFile,"r")
 *             if (filetype !=".txt") and (filetype != ".csv"):
 */
  /*else*/ {
    __pyx_t_7 = __Pyx_PyObject_GetSlice(__pyx_v_timeSeriesFile, -4L, 0, NULL, NULL, &__pyx_slice__121, 1, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1841, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_v_filetype = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "WaveTools.py":1842
 *         else:
 *             filetype = timeSeriesFile[-4:]
 *             fid = open(timeSeriesFile,"r")             # <<<<<<<<<<<<<<
 *             if (filetype !=".txt") and (filetype != ".csv"):
 *                 logEvent("ERROR! Wavetools.py: File %s must be given in .txt or .csv format" % (timeSeriesFile),level=0)
 */
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1842, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_v_timeSeriesFile);
    __Pyx_GIVEREF(__pyx_v_timeSeriesFile);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_timeSeriesFile);
    __Pyx_INCREF(__pyx_n_s_r);
    __Pyx_GIVEREF(__pyx_n_s_r);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_n_s_r);
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_7, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1842, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_v_fid = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "WaveTools.py":1843
 *             filetype = timeSeriesFile[-4:]
 *             fid = open(timeSeriesFile,"r")
 *             if (filetype !=".txt") and (filetype != ".csv"):             # <<<<<<<<<<<<<<
 *                 logEvent("ERROR! Wavetools.py: File %s must be given in .txt or .csv format" % (timeSeriesFile),level=0)
 *                 sys.exit(1)
 */
    __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_v_filetype, __pyx_kp_s_txt, Py_NE)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 1843, __pyx_L1_error)
    if (__pyx_t_10) {
    } else {
      __pyx_t_9 = __pyx_t_10;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_v_filetype, __pyx_kp_s_csv, Py_NE)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 1843, __pyx_L1_error)
    __pyx_t_9 = __pyx_t_10;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_9) {

      /* "WaveTools.py":1844
 *             fid = open(timeSeriesFile,"r")
 *             if (filetype !=".txt") and (filetype != ".csv"):
 *                 logEvent("ERROR! Wavetools.py: File %s must be given in .txt or .csv format" % (timeSeriesFile),level=0)             # <<<<<<<<<<<<<<
 *                 sys.exit(1)
 *             elif (filetype == ".csv"):
 */
      __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_logEvent); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1844, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = __Pyx_PyString_Format(__pyx_kp_s_ERROR_Wavetools_py_File_s_must_b, __pyx_v_timeSeriesFile); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1844, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1844, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_7 = PyDict_New(); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1844, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_level, __pyx_int_0) < 0) __PYX_ERR(0, 1844, __pyx_L1_error)
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1844, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "WaveTools.py":1845
 *             if (filetype !=".txt") and (filetype != ".csv"):
 *                 logEvent("ERROR! Wavetools.py: File %s must be given in .txt or .csv format" % (timeSeriesFile),level=0)
 *                 sys.exit(1)             # <<<<<<<<<<<<<<
 *             elif (filetype == ".csv"):
 *                 tdata = np.loadtxt(fid,skiprows=skiprows,delimiter=",")
 */
      __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_sys); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1845, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_exit); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1845, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_tuple__122, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1845, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "WaveTools.py":1843
 *             filetype = timeSeriesFile[-4:]
 *             fid = open(timeSeriesFile,"r")
 *             if (filetype !=".txt") and (filetype != ".csv"):             # <<<<<<<<<<<<<<
 *                 logEvent("ERROR! Wavetools.py: File %s must be given in .txt or .csv format" % (timeSeriesFile),level=0)
 *                 sys.exit(1)
 */
      goto __pyx_L5;
    }

    /* "WaveTools.py":1846
 *                 logEvent("ERROR! Wavetools.py: File %s must be given in .txt or .csv format" % (timeSeriesFile),level=0)
 *                 sys.exit(1)
 *             elif (filetype == ".csv"):             # <<<<<<<<<<<<<<
 *                 tdata = np.loadtxt(fid,skiprows=skiprows,delimiter=",")
 *             else:
 */
    __pyx_t_9 = (__Pyx_PyString_Equals(__pyx_v_filetype, __pyx_kp_s_csv, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 1846, __pyx_L1_error)
    if (__pyx_t_9) {

      /* "WaveTools.py":1847
 *                 sys.exit(1)
 *             elif (filetype == ".csv"):
 *                 tdata = np.loadtxt(fid,skiprows=skiprows,delimiter=",")             # <<<<<<<<<<<<<<
 *             else:
 *                 tdata = np.loadtxt(fid,skiprows=skiprows)
 */
      __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1847, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_loadtxt); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1847, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1847, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_v_fid);
      __Pyx_GIVEREF(__pyx_v_fid);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_fid);
      __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1847, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_skiprows, __pyx_v_skiprows) < 0) __PYX_ERR(0, 1847, __pyx_L1_error)
      if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_delimiter, __pyx_kp_s__123) < 0) __PYX_ERR(0, 1847, __pyx_L1_error)
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_6, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1847, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_tdata = __pyx_t_5;
      __pyx_t_5 = 0;

      /* "WaveTools.py":1846
 *                 logEvent("ERROR! Wavetools.py: File %s must be given in .txt or .csv format" % (timeSeriesFile),level=0)
 *                 sys.exit(1)
 *             elif (filetype == ".csv"):             # <<<<<<<<<<<<<<
 *                 tdata = np.loadtxt(fid,skiprows=skiprows,delimiter=",")
 *             else:
 */
      goto __pyx_L5;
    }

    /* "WaveTools.py":1849
 *                 tdata = np.loadtxt(fid,skiprows=skiprows,delimiter=",")
 *             else:
 *                 tdata = np.loadtxt(fid,skiprows=skiprows)             # <<<<<<<<<<<<<<
 *             fid.close()
 *         #Checks for tseries file
 */
    /*else*/ {
      __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1849, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_loadtxt); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1849, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1849, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_v_fid);
      __Pyx_GIVEREF(__pyx_v_fid);
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_fid);
      __pyx_t_6 = PyDict_New(); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1849, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_skiprows, __pyx_v_skiprows) < 0) __PYX_ERR(0, 1849, __pyx_L1_error)
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1849, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_v_tdata = __pyx_t_7;
      __pyx_t_7 = 0;
    }
    __pyx_L5:;

    /* "WaveTools.py":1850
 *             else:
 *                 tdata = np.loadtxt(fid,skiprows=skiprows)
 *             fid.close()             # <<<<<<<<<<<<<<
 *         #Checks for tseries file
 *         # Only 2 columns: time & eta
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_fid, __pyx_n_s_close); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1850, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1850, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_7 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1850, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __pyx_L4:;

  /* "WaveTools.py":1853
 *         #Checks for tseries file
 *         # Only 2 columns: time & eta
 *         ncols = len(tdata[0,:])             # <<<<<<<<<<<<<<
 *         if ncols != 2:
 *             logEvent("ERROR! Wavetools.py: Timeseries file (%s) must have only two columns [time, eta]" % (timeSeriesFile),level=0)
 */
  if (unlikely(!__pyx_v_tdata)) { __Pyx_RaiseUnboundLocalError("tdata"); __PYX_ERR(0, 1853, __pyx_L1_error) }
  __pyx_t_7 = PyObject_GetItem(__pyx_v_tdata, __pyx_tuple__125); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1853, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyObject_Length(__pyx_t_7); if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(0, 1853, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_ncols = __pyx_t_8;

  /* "WaveTools.py":1854
 *         # Only 2 columns: time & eta
 *         ncols = len(tdata[0,:])
 *         if ncols != 2:             # <<<<<<<<<<<<<<
 *             logEvent("ERROR! Wavetools.py: Timeseries file (%s) must have only two columns [time, eta]" % (timeSeriesFile),level=0)
 *             sys.exit(1)
 */
  __pyx_t_9 = ((__pyx_v_ncols != 2) != 0);
  if (__pyx_t_9) {

    /* "WaveTools.py":1855
 *         ncols = len(tdata[0,:])
 *         if ncols != 2:
 *             logEvent("ERROR! Wavetools.py: Timeseries file (%s) must have only two columns [time, eta]" % (timeSeriesFile),level=0)             # <<<<<<<<<<<<<<
 *             sys.exit(1)
 *         time_temp = tdata[:,0]
 */
    __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_logEvent); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1855, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = __Pyx_PyString_Format(__pyx_kp_s_ERROR_Wavetools_py_Timeseries_fi, __pyx_v_timeSeriesFile); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1855, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1855, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = PyDict_New(); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1855, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_level, __pyx_int_0) < 0) __PYX_ERR(0, 1855, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1855, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "WaveTools.py":1856
 *         if ncols != 2:
 *             logEvent("ERROR! Wavetools.py: Timeseries file (%s) must have only two columns [time, eta]" % (timeSeriesFile),level=0)
 *             sys.exit(1)             # <<<<<<<<<<<<<<
 *         time_temp = tdata[:,0]
 *         self.dt = (time_temp[-1]-time_temp[0])/(len(time_temp)-1)
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_sys); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1856, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_exit); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1856, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__126, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1856, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "WaveTools.py":1854
 *         # Only 2 columns: time & eta
 *         ncols = len(tdata[0,:])
 *         if ncols != 2:             # <<<<<<<<<<<<<<
 *             logEvent("ERROR! Wavetools.py: Timeseries file (%s) must have only two columns [time, eta]" % (timeSeriesFile),level=0)
 *             sys.exit(1)
 */
  }

  /* "WaveTools.py":1857
 *             logEvent("ERROR! Wavetools.py: Timeseries file (%s) must have only two columns [time, eta]" % (timeSeriesFile),level=0)
 *             sys.exit(1)
 *         time_temp = tdata[:,0]             # <<<<<<<<<<<<<<
 *         self.dt = (time_temp[-1]-time_temp[0])/(len(time_temp)-1)
 * 
 */
  if (unlikely(!__pyx_v_tdata)) { __Pyx_RaiseUnboundLocalError("tdata"); __PYX_ERR(0, 1857, __pyx_L1_error) }
  __pyx_t_4 = PyObject_GetItem(__pyx_v_tdata, __pyx_tuple__128); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1857, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_time_temp = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "WaveTools.py":1858
 *             sys.exit(1)
 *         time_temp = tdata[:,0]
 *         self.dt = (time_temp[-1]-time_temp[0])/(len(time_temp)-1)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_time_temp, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1858, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_time_temp, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1858, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = PyNumber_Subtract(__pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1858, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_8 = PyObject_Length(__pyx_v_time_temp); if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(0, 1858, __pyx_L1_error)
  __pyx_t_6 = PyInt_FromSsize_t((__pyx_t_8 - 1)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1858, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1858, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1858, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_self->dt = __pyx_t_2;

  /* "WaveTools.py":1863
 * 
 *         # If necessary, perform interpolation
 *         doInterp = False             # <<<<<<<<<<<<<<
 *         for i in range(1,len(time_temp)):
 *             dt_temp = time_temp[i]-time_temp[i-1]
 */
  __pyx_v_doInterp = 0;

  /* "WaveTools.py":1864
 *         # If necessary, perform interpolation
 *         doInterp = False
 *         for i in range(1,len(time_temp)):             # <<<<<<<<<<<<<<
 *             dt_temp = time_temp[i]-time_temp[i-1]
 *         #check if time is at first column
 */
  __pyx_t_8 = PyObject_Length(__pyx_v_time_temp); if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(0, 1864, __pyx_L1_error)
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1864, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1864, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_int_1);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1864, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
    __pyx_t_6 = __pyx_t_4; __Pyx_INCREF(__pyx_t_6); __pyx_t_8 = 0;
    __pyx_t_11 = NULL;
  } else {
    __pyx_t_8 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1864, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_11 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1864, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  for (;;) {
    if (likely(!__pyx_t_11)) {
      if (likely(PyList_CheckExact(__pyx_t_6))) {
        if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_8); __Pyx_INCREF(__pyx_t_4); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 1864, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_6, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1864, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_8); __Pyx_INCREF(__pyx_t_4); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 1864, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_6, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1864, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_11(__pyx_t_6);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1864, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "WaveTools.py":1865
 *         doInterp = False
 *         for i in range(1,len(time_temp)):
 *             dt_temp = time_temp[i]-time_temp[i-1]             # <<<<<<<<<<<<<<
 *         #check if time is at first column
 *             if time_temp[i]<=time_temp[i-1]:
 */
    __pyx_t_4 = PyObject_GetItem(__pyx_v_time_temp, __pyx_v_i); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1865, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyInt_SubtractObjC(__pyx_v_i, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1865, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = PyObject_GetItem(__pyx_v_time_temp, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1865, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_Subtract(__pyx_t_4, __pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1865, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF_SET(__pyx_v_dt_temp, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "WaveTools.py":1867
 *             dt_temp = time_temp[i]-time_temp[i-1]
 *         #check if time is at first column
 *             if time_temp[i]<=time_temp[i-1]:             # <<<<<<<<<<<<<<
 *                 logEvent("ERROR! WaveTools.py:  Found not consistent time entry between %s and %s row in %s file. Time variable must be always at the first column of the file and increasing monotonically" %(i-1,i,timeSeriesFile) )
 *                 sys.exit(1)
 */
    __pyx_t_5 = PyObject_GetItem(__pyx_v_time_temp, __pyx_v_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1867, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = __Pyx_PyInt_SubtractObjC(__pyx_v_i, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1867, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_4 = PyObject_GetItem(__pyx_v_time_temp, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1867, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyObject_RichCompare(__pyx_t_5, __pyx_t_4, Py_LE); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1867, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 1867, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (__pyx_t_9) {

      /* "WaveTools.py":1868
 *         #check if time is at first column
 *             if time_temp[i]<=time_temp[i-1]:
 *                 logEvent("ERROR! WaveTools.py:  Found not consistent time entry between %s and %s row in %s file. Time variable must be always at the first column of the file and increasing monotonically" %(i-1,i,timeSeriesFile) )             # <<<<<<<<<<<<<<
 *                 sys.exit(1)
 *         #check if sampling rate is constant
 */
      __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_logEvent); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1868, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyInt_SubtractObjC(__pyx_v_i, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1868, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_12 = PyTuple_New(3); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1868, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_5);
      __Pyx_INCREF(__pyx_v_i);
      __Pyx_GIVEREF(__pyx_v_i);
      PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_v_i);
      __Pyx_INCREF(__pyx_v_timeSeriesFile);
      __Pyx_GIVEREF(__pyx_v_timeSeriesFile);
      PyTuple_SET_ITEM(__pyx_t_12, 2, __pyx_v_timeSeriesFile);
      __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_ERROR_WaveTools_py_Found_not_con, __pyx_t_12); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1868, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_12 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_12)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_12);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      if (!__pyx_t_12) {
        __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1868, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_7);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[2] = {__pyx_t_12, __pyx_t_5};
          __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1868, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[2] = {__pyx_t_12, __pyx_t_5};
          __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1868, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else
        #endif
        {
          __pyx_t_13 = PyTuple_New(1+1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1868, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_GIVEREF(__pyx_t_12); PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_12); __pyx_t_12 = NULL;
          __Pyx_GIVEREF(__pyx_t_5);
          PyTuple_SET_ITEM(__pyx_t_13, 0+1, __pyx_t_5);
          __pyx_t_5 = 0;
          __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_13, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1868, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "WaveTools.py":1869
 *             if time_temp[i]<=time_temp[i-1]:
 *                 logEvent("ERROR! WaveTools.py:  Found not consistent time entry between %s and %s row in %s file. Time variable must be always at the first column of the file and increasing monotonically" %(i-1,i,timeSeriesFile) )
 *                 sys.exit(1)             # <<<<<<<<<<<<<<
 *         #check if sampling rate is constant
 *             if dt_temp!=self.dt:
 */
      __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_sys); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1869, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_exit); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1869, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__129, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1869, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "WaveTools.py":1867
 *             dt_temp = time_temp[i]-time_temp[i-1]
 *         #check if time is at first column
 *             if time_temp[i]<=time_temp[i-1]:             # <<<<<<<<<<<<<<
 *                 logEvent("ERROR! WaveTools.py:  Found not consistent time entry between %s and %s row in %s file. Time variable must be always at the first column of the file and increasing monotonically" %(i-1,i,timeSeriesFile) )
 *                 sys.exit(1)
 */
    }

    /* "WaveTools.py":1871
 *                 sys.exit(1)
 *         #check if sampling rate is constant
 *             if dt_temp!=self.dt:             # <<<<<<<<<<<<<<
 *                 doInterp = True
 *         if(doInterp):
 */
    __pyx_t_7 = PyFloat_FromDouble(__pyx_v_self->dt); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1871, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_4 = PyObject_RichCompare(__pyx_v_dt_temp, __pyx_t_7, Py_NE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1871, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 1871, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_9) {

      /* "WaveTools.py":1872
 *         #check if sampling rate is constant
 *             if dt_temp!=self.dt:
 *                 doInterp = True             # <<<<<<<<<<<<<<
 *         if(doInterp):
 *             logEvent("INFO WaveTools.py: Not constant sampling rate found, proceeding to signal interpolation to a constant sampling rate",level=0)
 */
      __pyx_v_doInterp = 1;

      /* "WaveTools.py":1871
 *                 sys.exit(1)
 *         #check if sampling rate is constant
 *             if dt_temp!=self.dt:             # <<<<<<<<<<<<<<
 *                 doInterp = True
 *         if(doInterp):
 */
    }

    /* "WaveTools.py":1864
 *         # If necessary, perform interpolation
 *         doInterp = False
 *         for i in range(1,len(time_temp)):             # <<<<<<<<<<<<<<
 *             dt_temp = time_temp[i]-time_temp[i-1]
 *         #check if time is at first column
 */
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "WaveTools.py":1873
 *             if dt_temp!=self.dt:
 *                 doInterp = True
 *         if(doInterp):             # <<<<<<<<<<<<<<
 *             logEvent("INFO WaveTools.py: Not constant sampling rate found, proceeding to signal interpolation to a constant sampling rate",level=0)
 *             self.time = np.linspace(time_temp[0],time_temp[-1],len(time_temp))
 */
  __pyx_t_9 = (__pyx_v_doInterp != 0);
  if (__pyx_t_9) {

    /* "WaveTools.py":1874
 *                 doInterp = True
 *         if(doInterp):
 *             logEvent("INFO WaveTools.py: Not constant sampling rate found, proceeding to signal interpolation to a constant sampling rate",level=0)             # <<<<<<<<<<<<<<
 *             self.time = np.linspace(time_temp[0],time_temp[-1],len(time_temp))
 *             self.etaS = np.interp(self.time,time_temp,tdata[:,1])
 */
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_logEvent); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1874, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1874, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_level, __pyx_int_0) < 0) __PYX_ERR(0, 1874, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__130, __pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1874, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "WaveTools.py":1875
 *         if(doInterp):
 *             logEvent("INFO WaveTools.py: Not constant sampling rate found, proceeding to signal interpolation to a constant sampling rate",level=0)
 *             self.time = np.linspace(time_temp[0],time_temp[-1],len(time_temp))             # <<<<<<<<<<<<<<
 *             self.etaS = np.interp(self.time,time_temp,tdata[:,1])
 *         else:
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1875, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_linspace); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1875, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_time_temp, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1875, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_13 = __Pyx_GetItemInt(__pyx_v_time_temp, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1875, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_8 = PyObject_Length(__pyx_v_time_temp); if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(0, 1875, __pyx_L1_error)
    __pyx_t_5 = PyInt_FromSsize_t(__pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1875, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_12 = NULL;
    __pyx_t_3 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_12)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_12);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_3 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[4] = {__pyx_t_12, __pyx_t_4, __pyx_t_13, __pyx_t_5};
      __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_3, 3+__pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1875, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[4] = {__pyx_t_12, __pyx_t_4, __pyx_t_13, __pyx_t_5};
      __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_3, 3+__pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1875, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_14 = PyTuple_New(3+__pyx_t_3); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1875, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      if (__pyx_t_12) {
        __Pyx_GIVEREF(__pyx_t_12); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_12); __pyx_t_12 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_14, 0+__pyx_t_3, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_13);
      PyTuple_SET_ITEM(__pyx_t_14, 1+__pyx_t_3, __pyx_t_13);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_14, 2+__pyx_t_3, __pyx_t_5);
      __pyx_t_4 = 0;
      __pyx_t_13 = 0;
      __pyx_t_5 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_14, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1875, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!(likely(((__pyx_t_7) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_7, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1875, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_7);
    __Pyx_GOTREF(__pyx_v_self->time);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->time));
    __pyx_v_self->time = ((PyArrayObject *)__pyx_t_7);
    __pyx_t_7 = 0;

    /* "WaveTools.py":1876
 *             logEvent("INFO WaveTools.py: Not constant sampling rate found, proceeding to signal interpolation to a constant sampling rate",level=0)
 *             self.time = np.linspace(time_temp[0],time_temp[-1],len(time_temp))
 *             self.etaS = np.interp(self.time,time_temp,tdata[:,1])             # <<<<<<<<<<<<<<
 *         else:
 *             self.time = time_temp
 */
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1876, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_interp); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1876, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_v_tdata)) { __Pyx_RaiseUnboundLocalError("tdata"); __PYX_ERR(0, 1876, __pyx_L1_error) }
    __pyx_t_6 = PyObject_GetItem(__pyx_v_tdata, __pyx_tuple__132); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1876, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = NULL;
    __pyx_t_3 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_14))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_14);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_14, function);
        __pyx_t_3 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_14)) {
      PyObject *__pyx_temp[4] = {__pyx_t_5, ((PyObject *)__pyx_v_self->time), __pyx_v_time_temp, __pyx_t_6};
      __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_14, __pyx_temp+1-__pyx_t_3, 3+__pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1876, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_14)) {
      PyObject *__pyx_temp[4] = {__pyx_t_5, ((PyObject *)__pyx_v_self->time), __pyx_v_time_temp, __pyx_t_6};
      __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_14, __pyx_temp+1-__pyx_t_3, 3+__pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1876, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    {
      __pyx_t_13 = PyTuple_New(3+__pyx_t_3); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1876, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_self->time));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self->time));
      PyTuple_SET_ITEM(__pyx_t_13, 0+__pyx_t_3, ((PyObject *)__pyx_v_self->time));
      __Pyx_INCREF(__pyx_v_time_temp);
      __Pyx_GIVEREF(__pyx_v_time_temp);
      PyTuple_SET_ITEM(__pyx_t_13, 1+__pyx_t_3, __pyx_v_time_temp);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_13, 2+__pyx_t_3, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_13, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1876, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    }
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    if (!(likely(((__pyx_t_7) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_7, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1876, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_7);
    __Pyx_GOTREF(__pyx_v_self->etaS);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->etaS));
    __pyx_v_self->etaS = ((PyArrayObject *)__pyx_t_7);
    __pyx_t_7 = 0;

    /* "WaveTools.py":1873
 *             if dt_temp!=self.dt:
 *                 doInterp = True
 *         if(doInterp):             # <<<<<<<<<<<<<<
 *             logEvent("INFO WaveTools.py: Not constant sampling rate found, proceeding to signal interpolation to a constant sampling rate",level=0)
 *             self.time = np.linspace(time_temp[0],time_temp[-1],len(time_temp))
 */
    goto __pyx_L13;
  }

  /* "WaveTools.py":1878
 *             self.etaS = np.interp(self.time,time_temp,tdata[:,1])
 *         else:
 *             self.time = time_temp             # <<<<<<<<<<<<<<
 *             self.etaS = tdata[:,1]
 * 
 */
  /*else*/ {
    if (!(likely(((__pyx_v_time_temp) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_time_temp, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1878, __pyx_L1_error)
    __pyx_t_7 = __pyx_v_time_temp;
    __Pyx_INCREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    __Pyx_GOTREF(__pyx_v_self->time);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->time));
    __pyx_v_self->time = ((PyArrayObject *)__pyx_t_7);
    __pyx_t_7 = 0;

    /* "WaveTools.py":1879
 *         else:
 *             self.time = time_temp
 *             self.etaS = tdata[:,1]             # <<<<<<<<<<<<<<
 * 
 *         self.t0  = self.time[0]
 */
    if (unlikely(!__pyx_v_tdata)) { __Pyx_RaiseUnboundLocalError("tdata"); __PYX_ERR(0, 1879, __pyx_L1_error) }
    __pyx_t_7 = PyObject_GetItem(__pyx_v_tdata, __pyx_tuple__134); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1879, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (!(likely(((__pyx_t_7) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_7, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1879, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_7);
    __Pyx_GOTREF(__pyx_v_self->etaS);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->etaS));
    __pyx_v_self->etaS = ((PyArrayObject *)__pyx_t_7);
    __pyx_t_7 = 0;
  }
  __pyx_L13:;

  /* "WaveTools.py":1881
 *             self.etaS = tdata[:,1]
 * 
 *         self.t0  = self.time[0]             # <<<<<<<<<<<<<<
 *         # Remove mean level from raw data
 *         self.etaS -= np.mean(self.etaS)
 */
  __pyx_t_7 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->time), 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1881, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_7); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1881, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_self->t0 = __pyx_t_2;

  /* "WaveTools.py":1883
 *         self.t0  = self.time[0]
 *         # Remove mean level from raw data
 *         self.etaS -= np.mean(self.etaS)             # <<<<<<<<<<<<<<
 *         # Filter out first 2.5 % and last 2.5% to make the signal periodic
 *         self.etaS *= costap(len(self.time),cutoff=cutoffTotal)
 */
  __pyx_t_14 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1883, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_mean); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1883, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __pyx_t_14 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_13))) {
    __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_13);
    if (likely(__pyx_t_14)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
      __Pyx_INCREF(__pyx_t_14);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_13, function);
    }
  }
  if (!__pyx_t_14) {
    __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_13, ((PyObject *)__pyx_v_self->etaS)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1883, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_13)) {
      PyObject *__pyx_temp[2] = {__pyx_t_14, ((PyObject *)__pyx_v_self->etaS)};
      __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_13, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1883, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_GOTREF(__pyx_t_7);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_13)) {
      PyObject *__pyx_temp[2] = {__pyx_t_14, ((PyObject *)__pyx_v_self->etaS)};
      __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_13, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1883, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_GOTREF(__pyx_t_7);
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1883, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_14); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_14); __pyx_t_14 = NULL;
      __Pyx_INCREF(((PyObject *)__pyx_v_self->etaS));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self->etaS));
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, ((PyObject *)__pyx_v_self->etaS));
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_13, __pyx_t_6, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1883, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  __pyx_t_13 = PyNumber_InPlaceSubtract(((PyObject *)__pyx_v_self->etaS), __pyx_t_7); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1883, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (!(likely(((__pyx_t_13) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_13, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1883, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_13);
  __Pyx_GOTREF(__pyx_v_self->etaS);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->etaS));
  __pyx_v_self->etaS = ((PyArrayObject *)__pyx_t_13);
  __pyx_t_13 = 0;

  /* "WaveTools.py":1885
 *         self.etaS -= np.mean(self.etaS)
 *         # Filter out first 2.5 % and last 2.5% to make the signal periodic
 *         self.etaS *= costap(len(self.time),cutoff=cutoffTotal)             # <<<<<<<<<<<<<<
 *         # clear tdata from memory
 *         del tdata
 */
  __pyx_t_13 = __Pyx_GetModuleGlobalName(__pyx_n_s_costap); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1885, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_7 = ((PyObject *)__pyx_v_self->time);
  __Pyx_INCREF(__pyx_t_7);
  __pyx_t_8 = PyObject_Length(__pyx_t_7); if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(0, 1885, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyInt_FromSsize_t(__pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1885, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1885, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = PyDict_New(); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1885, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_cutoff, __pyx_v_cutoffTotal) < 0) __PYX_ERR(0, 1885, __pyx_L1_error)
  __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_13, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1885, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyNumber_InPlaceMultiply(((PyObject *)__pyx_v_self->etaS), __pyx_t_14); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1885, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  if (!(likely(((__pyx_t_7) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_7, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1885, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_7);
  __Pyx_GOTREF(__pyx_v_self->etaS);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->etaS));
  __pyx_v_self->etaS = ((PyArrayObject *)__pyx_t_7);
  __pyx_t_7 = 0;

  /* "WaveTools.py":1887
 *         self.etaS *= costap(len(self.time),cutoff=cutoffTotal)
 *         # clear tdata from memory
 *         del tdata             # <<<<<<<<<<<<<<
 *         # Calculate time lenght
 *         self.tlength = (self.time[-1]-self.time[0])
 */
  if (unlikely(!__pyx_v_tdata)) { __Pyx_RaiseUnboundLocalError("tdata"); __PYX_ERR(0, 1887, __pyx_L1_error) }
  __Pyx_DECREF(__pyx_v_tdata);
  __pyx_v_tdata = NULL;

  /* "WaveTools.py":1889
 *         del tdata
 *         # Calculate time lenght
 *         self.tlength = (self.time[-1]-self.time[0])             # <<<<<<<<<<<<<<
 *         # Matrix initialisation
 *         self.windows_handover = []
 */
  __pyx_t_7 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->time), -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1889, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_14 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->time), 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1889, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __pyx_t_6 = PyNumber_Subtract(__pyx_t_7, __pyx_t_14); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1889, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1889, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_self->tlength = __pyx_t_2;

  /* "WaveTools.py":1891
 *         self.tlength = (self.time[-1]-self.time[0])
 *         # Matrix initialisation
 *         self.windows_handover = []             # <<<<<<<<<<<<<<
 *         self.windows_rec = []
 *         self.Twindow = 10.
 */
  __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1891, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  __Pyx_GOTREF(__pyx_v_self->windows_handover);
  __Pyx_DECREF(__pyx_v_self->windows_handover);
  __pyx_v_self->windows_handover = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "WaveTools.py":1892
 *         # Matrix initialisation
 *         self.windows_handover = []
 *         self.windows_rec = []             # <<<<<<<<<<<<<<
 *         self.Twindow = 10.
 * 
 */
  __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1892, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  __Pyx_GOTREF(__pyx_v_self->windows_rec);
  __Pyx_DECREF(__pyx_v_self->windows_rec);
  __pyx_v_self->windows_rec = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "WaveTools.py":1893
 *         self.windows_handover = []
 *         self.windows_rec = []
 *         self.Twindow = 10.             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->Twindow = 10.;

  /* "WaveTools.py":1897
 * 
 *     # Direct decomposition of the time series for using at reconstruct_direct
 *         if (self.rec_direct):             # <<<<<<<<<<<<<<
 *             Nf = self.N
 *             nfft=len(self.time)
 */
  __pyx_t_9 = (__pyx_v_self->rec_direct != 0);
  if (__pyx_t_9) {

    /* "WaveTools.py":1898
 *     # Direct decomposition of the time series for using at reconstruct_direct
 *         if (self.rec_direct):
 *             Nf = self.N             # <<<<<<<<<<<<<<
 *             nfft=len(self.time)
 *             logEvent("INFO: WaveTools.py: performing a direct series decomposition")
 */
    __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_self->N); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1898, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_v_Nf = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "WaveTools.py":1899
 *         if (self.rec_direct):
 *             Nf = self.N
 *             nfft=len(self.time)             # <<<<<<<<<<<<<<
 *             logEvent("INFO: WaveTools.py: performing a direct series decomposition")
 *             decomp = decompose_tseries(self.time,self.etaS,self.dt)
 */
    __pyx_t_6 = ((PyObject *)__pyx_v_self->time);
    __Pyx_INCREF(__pyx_t_6);
    __pyx_t_8 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(0, 1899, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_nfft = __pyx_t_8;

    /* "WaveTools.py":1900
 *             Nf = self.N
 *             nfft=len(self.time)
 *             logEvent("INFO: WaveTools.py: performing a direct series decomposition")             # <<<<<<<<<<<<<<
 *             decomp = decompose_tseries(self.time,self.etaS,self.dt)
 *             self.ai = decomp[1]
 */
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_logEvent); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1900, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__135, NULL); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1900, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

    /* "WaveTools.py":1901
 *             nfft=len(self.time)
 *             logEvent("INFO: WaveTools.py: performing a direct series decomposition")
 *             decomp = decompose_tseries(self.time,self.etaS,self.dt)             # <<<<<<<<<<<<<<
 *             self.ai = decomp[1]
 *             ipeak = np.where(self.ai == max(self.ai))[0][0]
 */
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_decompose_tseries); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1901, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyFloat_FromDouble(__pyx_v_self->dt); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1901, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_13 = NULL;
    __pyx_t_3 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_13)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_13);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_3 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[4] = {__pyx_t_13, ((PyObject *)__pyx_v_self->time), ((PyObject *)__pyx_v_self->etaS), __pyx_t_7};
      __pyx_t_14 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_3, 3+__pyx_t_3); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1901, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[4] = {__pyx_t_13, ((PyObject *)__pyx_v_self->time), ((PyObject *)__pyx_v_self->etaS), __pyx_t_7};
      __pyx_t_14 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_3, 3+__pyx_t_3); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1901, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(3+__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1901, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (__pyx_t_13) {
        __Pyx_GIVEREF(__pyx_t_13); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_13); __pyx_t_13 = NULL;
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_self->time));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self->time));
      PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_3, ((PyObject *)__pyx_v_self->time));
      __Pyx_INCREF(((PyObject *)__pyx_v_self->etaS));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self->etaS));
      PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_3, ((PyObject *)__pyx_v_self->etaS));
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_3, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_5, NULL); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1901, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_decomp = __pyx_t_14;
    __pyx_t_14 = 0;

    /* "WaveTools.py":1902
 *             logEvent("INFO: WaveTools.py: performing a direct series decomposition")
 *             decomp = decompose_tseries(self.time,self.etaS,self.dt)
 *             self.ai = decomp[1]             # <<<<<<<<<<<<<<
 *             ipeak = np.where(self.ai == max(self.ai))[0][0]
 *             imax = min(ipeak + Nf/2,len(self.ai))
 */
    __pyx_t_14 = __Pyx_GetItemInt(__pyx_v_decomp, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1902, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    if (!(likely(((__pyx_t_14) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_14, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1902, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_14);
    __Pyx_GOTREF(__pyx_v_self->ai);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->ai));
    __pyx_v_self->ai = ((PyArrayObject *)__pyx_t_14);
    __pyx_t_14 = 0;

    /* "WaveTools.py":1903
 *             decomp = decompose_tseries(self.time,self.etaS,self.dt)
 *             self.ai = decomp[1]
 *             ipeak = np.where(self.ai == max(self.ai))[0][0]             # <<<<<<<<<<<<<<
 *             imax = min(ipeak + Nf/2,len(self.ai))
 *             imin = max(0,ipeak - Nf/2)
 */
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1903, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_where); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1903, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1903, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(((PyObject *)__pyx_v_self->ai));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self->ai));
    PyTuple_SET_ITEM(__pyx_t_6, 0, ((PyObject *)__pyx_v_self->ai));
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_max, __pyx_t_6, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1903, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyObject_RichCompare(((PyObject *)__pyx_v_self->ai), __pyx_t_7, Py_EQ); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1903, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_7) {
      __pyx_t_14 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1903, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_14);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_6};
        __pyx_t_14 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1903, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_6};
        __pyx_t_14 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1903, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      {
        __pyx_t_13 = PyTuple_New(1+1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1903, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_7); __pyx_t_7 = NULL;
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_13, 0+1, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_13, NULL); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1903, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_14, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1903, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_t_14 = __Pyx_GetItemInt(__pyx_t_5, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1903, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_ipeak = __pyx_t_14;
    __pyx_t_14 = 0;

    /* "WaveTools.py":1904
 *             self.ai = decomp[1]
 *             ipeak = np.where(self.ai == max(self.ai))[0][0]
 *             imax = min(ipeak + Nf/2,len(self.ai))             # <<<<<<<<<<<<<<
 *             imin = max(0,ipeak - Nf/2)
 *             self.ai = self.ai[imin:imax]
 */
    __pyx_t_14 = ((PyObject *)__pyx_v_self->ai);
    __Pyx_INCREF(__pyx_t_14);
    __pyx_t_8 = PyObject_Length(__pyx_t_14); if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(0, 1904, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_t_14 = __Pyx_PyNumber_Divide(__pyx_v_Nf, __pyx_int_2); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1904, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_5 = PyNumber_Add(__pyx_v_ipeak, __pyx_t_14); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1904, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_t_13 = PyInt_FromSsize_t(__pyx_t_8); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1904, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_6 = PyObject_RichCompare(__pyx_t_13, __pyx_t_5, Py_LT); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1904, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 1904, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (__pyx_t_9) {
      __pyx_t_6 = PyInt_FromSsize_t(__pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1904, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_14 = __pyx_t_6;
      __pyx_t_6 = 0;
    } else {
      __Pyx_INCREF(__pyx_t_5);
      __pyx_t_14 = __pyx_t_5;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __pyx_t_14;
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_v_imax = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "WaveTools.py":1905
 *             ipeak = np.where(self.ai == max(self.ai))[0][0]
 *             imax = min(ipeak + Nf/2,len(self.ai))
 *             imin = max(0,ipeak - Nf/2)             # <<<<<<<<<<<<<<
 *             self.ai = self.ai[imin:imax]
 *             self.omega = decomp[0][imin:imax]
 */
    __pyx_t_5 = __Pyx_PyNumber_Divide(__pyx_v_Nf, __pyx_int_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1905, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_14 = PyNumber_Subtract(__pyx_v_ipeak, __pyx_t_5); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1905, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_15 = 0;
    __pyx_t_6 = __Pyx_PyInt_From_long(__pyx_t_15); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1905, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_13 = PyObject_RichCompare(__pyx_t_14, __pyx_t_6, Py_GT); __Pyx_XGOTREF(__pyx_t_13); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1905, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_13); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 1905, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    if (__pyx_t_9) {
      __Pyx_INCREF(__pyx_t_14);
      __pyx_t_5 = __pyx_t_14;
    } else {
      __pyx_t_13 = __Pyx_PyInt_From_long(__pyx_t_15); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1905, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_5 = __pyx_t_13;
      __pyx_t_13 = 0;
    }
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_t_14 = __pyx_t_5;
    __Pyx_INCREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_imin = __pyx_t_14;
    __pyx_t_14 = 0;

    /* "WaveTools.py":1906
 *             imax = min(ipeak + Nf/2,len(self.ai))
 *             imin = max(0,ipeak - Nf/2)
 *             self.ai = self.ai[imin:imax]             # <<<<<<<<<<<<<<
 *             self.omega = decomp[0][imin:imax]
 *             self.phi = - decomp[2][imin:imax]
 */
    __pyx_t_14 = __Pyx_PyObject_GetSlice(((PyObject *)__pyx_v_self->ai), 0, 0, &__pyx_v_imin, &__pyx_v_imax, NULL, 0, 0, 1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1906, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    if (!(likely(((__pyx_t_14) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_14, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1906, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_14);
    __Pyx_GOTREF(__pyx_v_self->ai);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->ai));
    __pyx_v_self->ai = ((PyArrayObject *)__pyx_t_14);
    __pyx_t_14 = 0;

    /* "WaveTools.py":1907
 *             imin = max(0,ipeak - Nf/2)
 *             self.ai = self.ai[imin:imax]
 *             self.omega = decomp[0][imin:imax]             # <<<<<<<<<<<<<<
 *             self.phi = - decomp[2][imin:imax]
 *             self.ki = dispersion(self.omega,self.depth,g=self.gAbs)
 */
    __pyx_t_14 = __Pyx_GetItemInt(__pyx_v_decomp, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1907, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_5 = __Pyx_PyObject_GetSlice(__pyx_t_14, 0, 0, &__pyx_v_imin, &__pyx_v_imax, NULL, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1907, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1907, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_5);
    __Pyx_GOTREF(__pyx_v_self->omega);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->omega));
    __pyx_v_self->omega = ((PyArrayObject *)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "WaveTools.py":1908
 *             self.ai = self.ai[imin:imax]
 *             self.omega = decomp[0][imin:imax]
 *             self.phi = - decomp[2][imin:imax]             # <<<<<<<<<<<<<<
 *             self.ki = dispersion(self.omega,self.depth,g=self.gAbs)
 *             self.Nf = imax - imin
 */
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_decomp, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1908, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_14 = __Pyx_PyObject_GetSlice(__pyx_t_5, 0, 0, &__pyx_v_imin, &__pyx_v_imax, NULL, 0, 0, 1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1908, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_Negative(__pyx_t_14); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1908, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1908, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_5);
    __Pyx_GOTREF(__pyx_v_self->phi);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->phi));
    __pyx_v_self->phi = ((PyArrayObject *)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "WaveTools.py":1909
 *             self.omega = decomp[0][imin:imax]
 *             self.phi = - decomp[2][imin:imax]
 *             self.ki = dispersion(self.omega,self.depth,g=self.gAbs)             # <<<<<<<<<<<<<<
 *             self.Nf = imax - imin
 *             self.setup = decomp[3]
 */
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_dispersion); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1909, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_14 = PyFloat_FromDouble(__pyx_v_self->depth); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1909, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_13 = PyTuple_New(2); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1909, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_INCREF(((PyObject *)__pyx_v_self->omega));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self->omega));
    PyTuple_SET_ITEM(__pyx_t_13, 0, ((PyObject *)__pyx_v_self->omega));
    __Pyx_GIVEREF(__pyx_t_14);
    PyTuple_SET_ITEM(__pyx_t_13, 1, __pyx_t_14);
    __pyx_t_14 = 0;
    __pyx_t_14 = PyDict_New(); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1909, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_6 = PyFloat_FromDouble(__pyx_v_self->gAbs); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1909, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (PyDict_SetItem(__pyx_t_14, __pyx_n_s_g, __pyx_t_6) < 0) __PYX_ERR(0, 1909, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_13, __pyx_t_14); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1909, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1909, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_6);
    __Pyx_GOTREF(__pyx_v_self->ki);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->ki));
    __pyx_v_self->ki = ((PyArrayObject *)__pyx_t_6);
    __pyx_t_6 = 0;

    /* "WaveTools.py":1910
 *             self.phi = - decomp[2][imin:imax]
 *             self.ki = dispersion(self.omega,self.depth,g=self.gAbs)
 *             self.Nf = imax - imin             # <<<<<<<<<<<<<<
 *             self.setup = decomp[3]
 *             self.kDir = np.zeros((len(self.ki),3),"d")
 */
    __pyx_t_6 = PyNumber_Subtract(__pyx_v_imax, __pyx_v_imin); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1910, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_6); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1910, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_self->Nf = __pyx_t_3;

    /* "WaveTools.py":1911
 *             self.ki = dispersion(self.omega,self.depth,g=self.gAbs)
 *             self.Nf = imax - imin
 *             self.setup = decomp[3]             # <<<<<<<<<<<<<<
 *             self.kDir = np.zeros((len(self.ki),3),"d")
 *             for ii in range(len(self.ki)):
 */
    __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_decomp, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1911, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1911, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_self->setup = __pyx_t_2;

    /* "WaveTools.py":1912
 *             self.Nf = imax - imin
 *             self.setup = decomp[3]
 *             self.kDir = np.zeros((len(self.ki),3),"d")             # <<<<<<<<<<<<<<
 *             for ii in range(len(self.ki)):
 *                 self.kDir[ii,:] = self.ki[ii]*self.waveDir[:]
 */
    __pyx_t_14 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1912, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_zeros); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1912, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_t_14 = ((PyObject *)__pyx_v_self->ki);
    __Pyx_INCREF(__pyx_t_14);
    __pyx_t_8 = PyObject_Length(__pyx_t_14); if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(0, 1912, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_t_14 = PyInt_FromSsize_t(__pyx_t_8); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1912, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1912, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_14);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_14);
    __Pyx_INCREF(__pyx_int_3);
    __Pyx_GIVEREF(__pyx_int_3);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_int_3);
    __pyx_t_14 = 0;
    __pyx_t_14 = NULL;
    __pyx_t_3 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_13))) {
      __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_13);
      if (likely(__pyx_t_14)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
        __Pyx_INCREF(__pyx_t_14);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_13, function);
        __pyx_t_3 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_13)) {
      PyObject *__pyx_temp[3] = {__pyx_t_14, __pyx_t_5, __pyx_n_s_d};
      __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_13, __pyx_temp+1-__pyx_t_3, 2+__pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1912, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_13)) {
      PyObject *__pyx_temp[3] = {__pyx_t_14, __pyx_t_5, __pyx_n_s_d};
      __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_13, __pyx_temp+1-__pyx_t_3, 2+__pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1912, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(2+__pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1912, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_14) {
        __Pyx_GIVEREF(__pyx_t_14); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_14); __pyx_t_14 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_3, __pyx_t_5);
      __Pyx_INCREF(__pyx_n_s_d);
      __Pyx_GIVEREF(__pyx_n_s_d);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_3, __pyx_n_s_d);
      __pyx_t_5 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_13, __pyx_t_7, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1912, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1912, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_6);
    __Pyx_GOTREF(__pyx_v_self->kDir);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->kDir));
    __pyx_v_self->kDir = ((PyArrayObject *)__pyx_t_6);
    __pyx_t_6 = 0;

    /* "WaveTools.py":1913
 *             self.setup = decomp[3]
 *             self.kDir = np.zeros((len(self.ki),3),"d")
 *             for ii in range(len(self.ki)):             # <<<<<<<<<<<<<<
 *                 self.kDir[ii,:] = self.ki[ii]*self.waveDir[:]
 * 
 */
    __pyx_t_6 = ((PyObject *)__pyx_v_self->ki);
    __Pyx_INCREF(__pyx_t_6);
    __pyx_t_8 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(0, 1913, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyInt_FromSsize_t(__pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1913, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_13 = PyTuple_New(1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1913, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_13, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1913, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    if (likely(PyList_CheckExact(__pyx_t_6)) || PyTuple_CheckExact(__pyx_t_6)) {
      __pyx_t_13 = __pyx_t_6; __Pyx_INCREF(__pyx_t_13); __pyx_t_8 = 0;
      __pyx_t_11 = NULL;
    } else {
      __pyx_t_8 = -1; __pyx_t_13 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1913, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_11 = Py_TYPE(__pyx_t_13)->tp_iternext; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1913, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    for (;;) {
      if (likely(!__pyx_t_11)) {
        if (likely(PyList_CheckExact(__pyx_t_13))) {
          if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_13)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = PyList_GET_ITEM(__pyx_t_13, __pyx_t_8); __Pyx_INCREF(__pyx_t_6); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 1913, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_13, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1913, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        } else {
          if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_13)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_13, __pyx_t_8); __Pyx_INCREF(__pyx_t_6); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 1913, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_13, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1913, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        }
      } else {
        __pyx_t_6 = __pyx_t_11(__pyx_t_13);
        if (unlikely(!__pyx_t_6)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1913, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_6);
      }
      __Pyx_XDECREF_SET(__pyx_v_ii, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "WaveTools.py":1914
 *             self.kDir = np.zeros((len(self.ki),3),"d")
 *             for ii in range(len(self.ki)):
 *                 self.kDir[ii,:] = self.ki[ii]*self.waveDir[:]             # <<<<<<<<<<<<<<
 * 
 *             for ij in range(self.Nf):
 */
      __pyx_t_6 = PyObject_GetItem(((PyObject *)__pyx_v_self->ki), __pyx_v_ii); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1914, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = __Pyx_PyObject_GetSlice(((PyObject *)__pyx_v_self->waveDir), 0, 0, NULL, NULL, &__pyx_slice__136, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1914, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_5 = PyNumber_Multiply(__pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1914, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1914, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_v_ii);
      __Pyx_GIVEREF(__pyx_v_ii);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_ii);
      __Pyx_INCREF(__pyx_slice__137);
      __Pyx_GIVEREF(__pyx_slice__137);
      PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_slice__137);
      if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_self->kDir), __pyx_t_7, __pyx_t_5) < 0)) __PYX_ERR(0, 1914, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "WaveTools.py":1913
 *             self.setup = decomp[3]
 *             self.kDir = np.zeros((len(self.ki),3),"d")
 *             for ii in range(len(self.ki)):             # <<<<<<<<<<<<<<
 *                 self.kDir[ii,:] = self.ki[ii]*self.waveDir[:]
 * 
 */
    }
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

    /* "WaveTools.py":1916
 *                 self.kDir[ii,:] = self.ki[ii]*self.waveDir[:]
 * 
 *             for ij in range(self.Nf):             # <<<<<<<<<<<<<<
 *                 self.omega_c[ij] = self.omega[ij]
 *                 self.ki_c[ij]  =self.ki[ij]
 */
    __pyx_t_13 = __Pyx_PyInt_From_int(__pyx_v_self->Nf); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1916, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1916, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_13);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_13);
    __pyx_t_13 = 0;
    __pyx_t_13 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_5, NULL); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1916, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (likely(PyList_CheckExact(__pyx_t_13)) || PyTuple_CheckExact(__pyx_t_13)) {
      __pyx_t_5 = __pyx_t_13; __Pyx_INCREF(__pyx_t_5); __pyx_t_8 = 0;
      __pyx_t_11 = NULL;
    } else {
      __pyx_t_8 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_13); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1916, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_11 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1916, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    for (;;) {
      if (likely(!__pyx_t_11)) {
        if (likely(PyList_CheckExact(__pyx_t_5))) {
          if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_13 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_8); __Pyx_INCREF(__pyx_t_13); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 1916, __pyx_L1_error)
          #else
          __pyx_t_13 = PySequence_ITEM(__pyx_t_5, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1916, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          #endif
        } else {
          if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_13 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_8); __Pyx_INCREF(__pyx_t_13); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 1916, __pyx_L1_error)
          #else
          __pyx_t_13 = PySequence_ITEM(__pyx_t_5, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1916, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          #endif
        }
      } else {
        __pyx_t_13 = __pyx_t_11(__pyx_t_5);
        if (unlikely(!__pyx_t_13)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1916, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_13);
      }
      __Pyx_XDECREF_SET(__pyx_v_ij, __pyx_t_13);
      __pyx_t_13 = 0;

      /* "WaveTools.py":1917
 * 
 *             for ij in range(self.Nf):
 *                 self.omega_c[ij] = self.omega[ij]             # <<<<<<<<<<<<<<
 *                 self.ki_c[ij]  =self.ki[ij]
 *                 self.tanh_c[ij] = np.tanh(self.ki[ij]*self.depth)
 */
      __pyx_t_13 = PyObject_GetItem(((PyObject *)__pyx_v_self->omega), __pyx_v_ij); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1917, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_13); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1917, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __pyx_t_16 = __Pyx_PyIndex_AsSsize_t(__pyx_v_ij); if (unlikely((__pyx_t_16 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1917, __pyx_L1_error)
      (__pyx_v_self->omega_c[__pyx_t_16]) = __pyx_t_2;

      /* "WaveTools.py":1918
 *             for ij in range(self.Nf):
 *                 self.omega_c[ij] = self.omega[ij]
 *                 self.ki_c[ij]  =self.ki[ij]             # <<<<<<<<<<<<<<
 *                 self.tanh_c[ij] = np.tanh(self.ki[ij]*self.depth)
 *                 self.ai_c[ij] = self.ai[ij]
 */
      __pyx_t_13 = PyObject_GetItem(((PyObject *)__pyx_v_self->ki), __pyx_v_ij); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1918, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_13); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1918, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __pyx_t_16 = __Pyx_PyIndex_AsSsize_t(__pyx_v_ij); if (unlikely((__pyx_t_16 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1918, __pyx_L1_error)
      (__pyx_v_self->ki_c[__pyx_t_16]) = __pyx_t_2;

      /* "WaveTools.py":1919
 *                 self.omega_c[ij] = self.omega[ij]
 *                 self.ki_c[ij]  =self.ki[ij]
 *                 self.tanh_c[ij] = np.tanh(self.ki[ij]*self.depth)             # <<<<<<<<<<<<<<
 *                 self.ai_c[ij] = self.ai[ij]
 *                 self.phi_c[ij] = self.phi[ij]
 */
      __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1919, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_tanh); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1919, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyObject_GetItem(((PyObject *)__pyx_v_self->ki), __pyx_v_ij); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1919, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_14 = PyFloat_FromDouble(__pyx_v_self->depth); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1919, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_4 = PyNumber_Multiply(__pyx_t_7, __pyx_t_14); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1919, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __pyx_t_14 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_14)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_14);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      if (!__pyx_t_14) {
        __pyx_t_13 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_4); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1919, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_13);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_6)) {
          PyObject *__pyx_temp[2] = {__pyx_t_14, __pyx_t_4};
          __pyx_t_13 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1919, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
          PyObject *__pyx_temp[2] = {__pyx_t_14, __pyx_t_4};
          __pyx_t_13 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1919, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else
        #endif
        {
          __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1919, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_GIVEREF(__pyx_t_14); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_14); __pyx_t_14 = NULL;
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_4);
          __pyx_t_4 = 0;
          __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_7, NULL); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1919, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_13); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1919, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __pyx_t_16 = __Pyx_PyIndex_AsSsize_t(__pyx_v_ij); if (unlikely((__pyx_t_16 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1919, __pyx_L1_error)
      (__pyx_v_self->tanh_c[__pyx_t_16]) = __pyx_t_2;

      /* "WaveTools.py":1920
 *                 self.ki_c[ij]  =self.ki[ij]
 *                 self.tanh_c[ij] = np.tanh(self.ki[ij]*self.depth)
 *                 self.ai_c[ij] = self.ai[ij]             # <<<<<<<<<<<<<<
 *                 self.phi_c[ij] = self.phi[ij]
 *                 for kk in range(3):
 */
      __pyx_t_13 = PyObject_GetItem(((PyObject *)__pyx_v_self->ai), __pyx_v_ij); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1920, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_13); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1920, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __pyx_t_16 = __Pyx_PyIndex_AsSsize_t(__pyx_v_ij); if (unlikely((__pyx_t_16 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1920, __pyx_L1_error)
      (__pyx_v_self->ai_c[__pyx_t_16]) = __pyx_t_2;

      /* "WaveTools.py":1921
 *                 self.tanh_c[ij] = np.tanh(self.ki[ij]*self.depth)
 *                 self.ai_c[ij] = self.ai[ij]
 *                 self.phi_c[ij] = self.phi[ij]             # <<<<<<<<<<<<<<
 *                 for kk in range(3):
 *                     self.kDir_c[3*ij+kk] = self.kDir[ij,kk]
 */
      __pyx_t_13 = PyObject_GetItem(((PyObject *)__pyx_v_self->phi), __pyx_v_ij); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1921, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_13); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1921, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __pyx_t_16 = __Pyx_PyIndex_AsSsize_t(__pyx_v_ij); if (unlikely((__pyx_t_16 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1921, __pyx_L1_error)
      (__pyx_v_self->phi_c[__pyx_t_16]) = __pyx_t_2;

      /* "WaveTools.py":1922
 *                 self.ai_c[ij] = self.ai[ij]
 *                 self.phi_c[ij] = self.phi[ij]
 *                 for kk in range(3):             # <<<<<<<<<<<<<<
 *                     self.kDir_c[3*ij+kk] = self.kDir[ij,kk]
 *             self.kDir_ = self.kDir_c
 */
      __pyx_t_13 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_tuple__138, NULL); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1922, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      if (likely(PyList_CheckExact(__pyx_t_13)) || PyTuple_CheckExact(__pyx_t_13)) {
        __pyx_t_6 = __pyx_t_13; __Pyx_INCREF(__pyx_t_6); __pyx_t_16 = 0;
        __pyx_t_17 = NULL;
      } else {
        __pyx_t_16 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_13); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1922, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_17 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1922, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      for (;;) {
        if (likely(!__pyx_t_17)) {
          if (likely(PyList_CheckExact(__pyx_t_6))) {
            if (__pyx_t_16 >= PyList_GET_SIZE(__pyx_t_6)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_13 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_16); __Pyx_INCREF(__pyx_t_13); __pyx_t_16++; if (unlikely(0 < 0)) __PYX_ERR(0, 1922, __pyx_L1_error)
            #else
            __pyx_t_13 = PySequence_ITEM(__pyx_t_6, __pyx_t_16); __pyx_t_16++; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1922, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_13);
            #endif
          } else {
            if (__pyx_t_16 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_13 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_16); __Pyx_INCREF(__pyx_t_13); __pyx_t_16++; if (unlikely(0 < 0)) __PYX_ERR(0, 1922, __pyx_L1_error)
            #else
            __pyx_t_13 = PySequence_ITEM(__pyx_t_6, __pyx_t_16); __pyx_t_16++; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1922, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_13);
            #endif
          }
        } else {
          __pyx_t_13 = __pyx_t_17(__pyx_t_6);
          if (unlikely(!__pyx_t_13)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 1922, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_13);
        }
        __Pyx_XDECREF_SET(__pyx_v_kk, __pyx_t_13);
        __pyx_t_13 = 0;

        /* "WaveTools.py":1923
 *                 self.phi_c[ij] = self.phi[ij]
 *                 for kk in range(3):
 *                     self.kDir_c[3*ij+kk] = self.kDir[ij,kk]             # <<<<<<<<<<<<<<
 *             self.kDir_ = self.kDir_c
 *             self.omega_ = self.omega_c
 */
        __pyx_t_13 = PyTuple_New(2); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1923, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_INCREF(__pyx_v_ij);
        __Pyx_GIVEREF(__pyx_v_ij);
        PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_v_ij);
        __Pyx_INCREF(__pyx_v_kk);
        __Pyx_GIVEREF(__pyx_v_kk);
        PyTuple_SET_ITEM(__pyx_t_13, 1, __pyx_v_kk);
        __pyx_t_7 = PyObject_GetItem(((PyObject *)__pyx_v_self->kDir), __pyx_t_13); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1923, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_7); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1923, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = PyNumber_Multiply(__pyx_int_3, __pyx_v_ij); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1923, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_13 = PyNumber_Add(__pyx_t_7, __pyx_v_kk); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1923, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_18 = __Pyx_PyIndex_AsSsize_t(__pyx_t_13); if (unlikely((__pyx_t_18 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1923, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        (__pyx_v_self->kDir_c[__pyx_t_18]) = __pyx_t_2;

        /* "WaveTools.py":1922
 *                 self.ai_c[ij] = self.ai[ij]
 *                 self.phi_c[ij] = self.phi[ij]
 *                 for kk in range(3):             # <<<<<<<<<<<<<<
 *                     self.kDir_c[3*ij+kk] = self.kDir[ij,kk]
 *             self.kDir_ = self.kDir_c
 */
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "WaveTools.py":1916
 *                 self.kDir[ii,:] = self.ki[ii]*self.waveDir[:]
 * 
 *             for ij in range(self.Nf):             # <<<<<<<<<<<<<<
 *                 self.omega_c[ij] = self.omega[ij]
 *                 self.ki_c[ij]  =self.ki[ij]
 */
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "WaveTools.py":1924
 *                 for kk in range(3):
 *                     self.kDir_c[3*ij+kk] = self.kDir[ij,kk]
 *             self.kDir_ = self.kDir_c             # <<<<<<<<<<<<<<
 *             self.omega_ = self.omega_c
 *             self.ki_  =self.ki_c
 */
    __pyx_t_19 = __pyx_v_self->kDir_c;
    __pyx_v_self->kDir_ = __pyx_t_19;

    /* "WaveTools.py":1925
 *                     self.kDir_c[3*ij+kk] = self.kDir[ij,kk]
 *             self.kDir_ = self.kDir_c
 *             self.omega_ = self.omega_c             # <<<<<<<<<<<<<<
 *             self.ki_  =self.ki_c
 *             self.ai_ = self.ai_c
 */
    __pyx_t_19 = __pyx_v_self->omega_c;
    __pyx_v_self->omega_ = __pyx_t_19;

    /* "WaveTools.py":1926
 *             self.kDir_ = self.kDir_c
 *             self.omega_ = self.omega_c
 *             self.ki_  =self.ki_c             # <<<<<<<<<<<<<<
 *             self.ai_ = self.ai_c
 *             self.tanh_ = self.tanh_c
 */
    __pyx_t_19 = __pyx_v_self->ki_c;
    __pyx_v_self->ki_ = __pyx_t_19;

    /* "WaveTools.py":1927
 *             self.omega_ = self.omega_c
 *             self.ki_  =self.ki_c
 *             self.ai_ = self.ai_c             # <<<<<<<<<<<<<<
 *             self.tanh_ = self.tanh_c
 *             self.phi_ = self.phi_c
 */
    __pyx_t_19 = __pyx_v_self->ai_c;
    __pyx_v_self->ai_ = __pyx_t_19;

    /* "WaveTools.py":1928
 *             self.ki_  =self.ki_c
 *             self.ai_ = self.ai_c
 *             self.tanh_ = self.tanh_c             # <<<<<<<<<<<<<<
 *             self.phi_ = self.phi_c
 * 
 */
    __pyx_t_19 = __pyx_v_self->tanh_c;
    __pyx_v_self->tanh_ = __pyx_t_19;

    /* "WaveTools.py":1929
 *             self.ai_ = self.ai_c
 *             self.tanh_ = self.tanh_c
 *             self.phi_ = self.phi_c             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_19 = __pyx_v_self->phi_c;
    __pyx_v_self->phi_ = __pyx_t_19;

    /* "WaveTools.py":1897
 * 
 *     # Direct decomposition of the time series for using at reconstruct_direct
 *         if (self.rec_direct):             # <<<<<<<<<<<<<<
 *             Nf = self.N
 *             nfft=len(self.time)
 */
    goto __pyx_L14;
  }

  /* "WaveTools.py":1937
 *                 # Spectral windowing
 *         else:
 *             if (window_params is None):             # <<<<<<<<<<<<<<
 *                 logEvent("ERROR! WaveTools.py: Set parameters for spectral windowing. Argument window_params must be a dictionary")
 *                 sys.exit(1)
 */
  /*else*/ {
    __pyx_t_9 = (__pyx_v_window_params == Py_None);
    __pyx_t_10 = (__pyx_t_9 != 0);
    if (__pyx_t_10) {

      /* "WaveTools.py":1938
 *         else:
 *             if (window_params is None):
 *                 logEvent("ERROR! WaveTools.py: Set parameters for spectral windowing. Argument window_params must be a dictionary")             # <<<<<<<<<<<<<<
 *                 sys.exit(1)
 *             try:
 */
      __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_logEvent); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1938, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__139, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1938, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "WaveTools.py":1939
 *             if (window_params is None):
 *                 logEvent("ERROR! WaveTools.py: Set parameters for spectral windowing. Argument window_params must be a dictionary")
 *                 sys.exit(1)             # <<<<<<<<<<<<<<
 *             try:
 *                 self.Nwaves = window_params["Nwaves"]
 */
      __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_sys); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1939, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_exit); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1939, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__140, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1939, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "WaveTools.py":1937
 *                 # Spectral windowing
 *         else:
 *             if (window_params is None):             # <<<<<<<<<<<<<<
 *                 logEvent("ERROR! WaveTools.py: Set parameters for spectral windowing. Argument window_params must be a dictionary")
 *                 sys.exit(1)
 */
    }

    /* "WaveTools.py":1940
 *                 logEvent("ERROR! WaveTools.py: Set parameters for spectral windowing. Argument window_params must be a dictionary")
 *                 sys.exit(1)
 *             try:             # <<<<<<<<<<<<<<
 *                 self.Nwaves = window_params["Nwaves"]
 *             except:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_20, &__pyx_t_21, &__pyx_t_22);
      __Pyx_XGOTREF(__pyx_t_20);
      __Pyx_XGOTREF(__pyx_t_21);
      __Pyx_XGOTREF(__pyx_t_22);
      /*try:*/ {

        /* "WaveTools.py":1941
 *                 sys.exit(1)
 *             try:
 *                 self.Nwaves = window_params["Nwaves"]             # <<<<<<<<<<<<<<
 *             except:
 *                 logEvent("ERROR! WaveTools.py: Dictionary key 'Nwaves' (waves per window) not found in window_params dictionary")
 */
        __pyx_t_6 = PyObject_GetItem(__pyx_v_window_params, __pyx_n_s_Nwaves); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1941, __pyx_L22_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_6); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1941, __pyx_L22_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_v_self->Nwaves = __pyx_t_3;

        /* "WaveTools.py":1940
 *                 logEvent("ERROR! WaveTools.py: Set parameters for spectral windowing. Argument window_params must be a dictionary")
 *                 sys.exit(1)
 *             try:             # <<<<<<<<<<<<<<
 *                 self.Nwaves = window_params["Nwaves"]
 *             except:
 */
      }
      __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
      __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
      __Pyx_XDECREF(__pyx_t_22); __pyx_t_22 = 0;
      goto __pyx_L29_try_end;
      __pyx_L22_error:;
      __Pyx_PyThreadState_assign
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "WaveTools.py":1942
 *             try:
 *                 self.Nwaves = window_params["Nwaves"]
 *             except:             # <<<<<<<<<<<<<<
 *                 logEvent("ERROR! WaveTools.py: Dictionary key 'Nwaves' (waves per window) not found in window_params dictionary")
 *                 sys.exit(1)
 */
      /*except:*/ {
        __Pyx_AddTraceback("WaveTools.TimeSeries.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_5, &__pyx_t_13) < 0) __PYX_ERR(0, 1942, __pyx_L24_except_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GOTREF(__pyx_t_13);

        /* "WaveTools.py":1943
 *                 self.Nwaves = window_params["Nwaves"]
 *             except:
 *                 logEvent("ERROR! WaveTools.py: Dictionary key 'Nwaves' (waves per window) not found in window_params dictionary")             # <<<<<<<<<<<<<<
 *                 sys.exit(1)
 * 
 */
        __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_logEvent); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1943, __pyx_L24_except_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_tuple__141, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1943, __pyx_L24_except_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "WaveTools.py":1944
 *             except:
 *                 logEvent("ERROR! WaveTools.py: Dictionary key 'Nwaves' (waves per window) not found in window_params dictionary")
 *                 sys.exit(1)             # <<<<<<<<<<<<<<
 * 
 *             try:
 */
        __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_sys); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1944, __pyx_L24_except_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_exit); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1944, __pyx_L24_except_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_tuple__142, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1944, __pyx_L24_except_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        goto __pyx_L23_exception_handled;
      }
      __pyx_L24_except_error:;

      /* "WaveTools.py":1940
 *                 logEvent("ERROR! WaveTools.py: Set parameters for spectral windowing. Argument window_params must be a dictionary")
 *                 sys.exit(1)
 *             try:             # <<<<<<<<<<<<<<
 *                 self.Nwaves = window_params["Nwaves"]
 *             except:
 */
      __Pyx_PyThreadState_assign
      __Pyx_XGIVEREF(__pyx_t_20);
      __Pyx_XGIVEREF(__pyx_t_21);
      __Pyx_XGIVEREF(__pyx_t_22);
      __Pyx_ExceptionReset(__pyx_t_20, __pyx_t_21, __pyx_t_22);
      goto __pyx_L1_error;
      __pyx_L23_exception_handled:;
      __Pyx_PyThreadState_assign
      __Pyx_XGIVEREF(__pyx_t_20);
      __Pyx_XGIVEREF(__pyx_t_21);
      __Pyx_XGIVEREF(__pyx_t_22);
      __Pyx_ExceptionReset(__pyx_t_20, __pyx_t_21, __pyx_t_22);
      __pyx_L29_try_end:;
    }

    /* "WaveTools.py":1946
 *                 sys.exit(1)
 * 
 *             try:             # <<<<<<<<<<<<<<
 *                 self.Tm = window_params["Tm"]
 *             except:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_22, &__pyx_t_21, &__pyx_t_20);
      __Pyx_XGOTREF(__pyx_t_22);
      __Pyx_XGOTREF(__pyx_t_21);
      __Pyx_XGOTREF(__pyx_t_20);
      /*try:*/ {

        /* "WaveTools.py":1947
 * 
 *             try:
 *                 self.Tm = window_params["Tm"]             # <<<<<<<<<<<<<<
 *             except:
 *                 logEvent("ERROR! WaveTools.py: Dictionary key 'Tm' (mean or characteristic wave period) not found in window_params dictionary")
 */
        __pyx_t_13 = PyObject_GetItem(__pyx_v_window_params, __pyx_n_s_Tm); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1947, __pyx_L32_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_13); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1947, __pyx_L32_error)
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __pyx_v_self->Tm = __pyx_t_2;

        /* "WaveTools.py":1946
 *                 sys.exit(1)
 * 
 *             try:             # <<<<<<<<<<<<<<
 *                 self.Tm = window_params["Tm"]
 *             except:
 */
      }
      __Pyx_XDECREF(__pyx_t_22); __pyx_t_22 = 0;
      __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
      __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
      goto __pyx_L39_try_end;
      __pyx_L32_error:;
      __Pyx_PyThreadState_assign
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;

      /* "WaveTools.py":1948
 *             try:
 *                 self.Tm = window_params["Tm"]
 *             except:             # <<<<<<<<<<<<<<
 *                 logEvent("ERROR! WaveTools.py: Dictionary key 'Tm' (mean or characteristic wave period) not found in window_params dictionary")
 *                 sys.exit(1)
 */
      /*except:*/ {
        __Pyx_AddTraceback("WaveTools.TimeSeries.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_13, &__pyx_t_5, &__pyx_t_6) < 0) __PYX_ERR(0, 1948, __pyx_L34_except_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GOTREF(__pyx_t_6);

        /* "WaveTools.py":1949
 *                 self.Tm = window_params["Tm"]
 *             except:
 *                 logEvent("ERROR! WaveTools.py: Dictionary key 'Tm' (mean or characteristic wave period) not found in window_params dictionary")             # <<<<<<<<<<<<<<
 *                 sys.exit(1)
 * 
 */
        __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_logEvent); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1949, __pyx_L34_except_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__143, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1949, __pyx_L34_except_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "WaveTools.py":1950
 *             except:
 *                 logEvent("ERROR! WaveTools.py: Dictionary key 'Tm' (mean or characteristic wave period) not found in window_params dictionary")
 *                 sys.exit(1)             # <<<<<<<<<<<<<<
 * 
 *             try:
 */
        __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_sys); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1950, __pyx_L34_except_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_exit); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1950, __pyx_L34_except_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__144, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1950, __pyx_L34_except_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        goto __pyx_L33_exception_handled;
      }
      __pyx_L34_except_error:;

      /* "WaveTools.py":1946
 *                 sys.exit(1)
 * 
 *             try:             # <<<<<<<<<<<<<<
 *                 self.Tm = window_params["Tm"]
 *             except:
 */
      __Pyx_PyThreadState_assign
      __Pyx_XGIVEREF(__pyx_t_22);
      __Pyx_XGIVEREF(__pyx_t_21);
      __Pyx_XGIVEREF(__pyx_t_20);
      __Pyx_ExceptionReset(__pyx_t_22, __pyx_t_21, __pyx_t_20);
      goto __pyx_L1_error;
      __pyx_L33_exception_handled:;
      __Pyx_PyThreadState_assign
      __Pyx_XGIVEREF(__pyx_t_22);
      __Pyx_XGIVEREF(__pyx_t_21);
      __Pyx_XGIVEREF(__pyx_t_20);
      __Pyx_ExceptionReset(__pyx_t_22, __pyx_t_21, __pyx_t_20);
      __pyx_L39_try_end:;
    }

    /* "WaveTools.py":1952
 *                 sys.exit(1)
 * 
 *             try:             # <<<<<<<<<<<<<<
 *                 windowName = window_params["Window"]
 *             except:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_20, &__pyx_t_21, &__pyx_t_22);
      __Pyx_XGOTREF(__pyx_t_20);
      __Pyx_XGOTREF(__pyx_t_21);
      __Pyx_XGOTREF(__pyx_t_22);
      /*try:*/ {

        /* "WaveTools.py":1953
 * 
 *             try:
 *                 windowName = window_params["Window"]             # <<<<<<<<<<<<<<
 *             except:
 *                 logEvent("ERROR! WaveTools.py: Dictionary key 'Window' (window function type) not found in window_params dictionary")
 */
        __pyx_t_6 = PyObject_GetItem(__pyx_v_window_params, __pyx_n_s_Window); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1953, __pyx_L42_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_v_windowName = __pyx_t_6;
        __pyx_t_6 = 0;

        /* "WaveTools.py":1952
 *                 sys.exit(1)
 * 
 *             try:             # <<<<<<<<<<<<<<
 *                 windowName = window_params["Window"]
 *             except:
 */
      }
      __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
      __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
      __Pyx_XDECREF(__pyx_t_22); __pyx_t_22 = 0;
      goto __pyx_L49_try_end;
      __pyx_L42_error:;
      __Pyx_PyThreadState_assign
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "WaveTools.py":1954
 *             try:
 *                 windowName = window_params["Window"]
 *             except:             # <<<<<<<<<<<<<<
 *                 logEvent("ERROR! WaveTools.py: Dictionary key 'Window' (window function type) not found in window_params dictionary")
 *                 sys.exit(1)
 */
      /*except:*/ {
        __Pyx_AddTraceback("WaveTools.TimeSeries.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_5, &__pyx_t_13) < 0) __PYX_ERR(0, 1954, __pyx_L44_except_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GOTREF(__pyx_t_13);

        /* "WaveTools.py":1955
 *                 windowName = window_params["Window"]
 *             except:
 *                 logEvent("ERROR! WaveTools.py: Dictionary key 'Window' (window function type) not found in window_params dictionary")             # <<<<<<<<<<<<<<
 *                 sys.exit(1)
 * 
 */
        __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_logEvent); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1955, __pyx_L44_except_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_tuple__145, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1955, __pyx_L44_except_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "WaveTools.py":1956
 *             except:
 *                 logEvent("ERROR! WaveTools.py: Dictionary key 'Window' (window function type) not found in window_params dictionary")
 *                 sys.exit(1)             # <<<<<<<<<<<<<<
 * 
 *             if(self.Nwaves > 0.5*self.tlength / self.Tm):
 */
        __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_sys); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1956, __pyx_L44_except_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_exit); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1956, __pyx_L44_except_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_tuple__146, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1956, __pyx_L44_except_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        goto __pyx_L43_exception_handled;
      }
      __pyx_L44_except_error:;

      /* "WaveTools.py":1952
 *                 sys.exit(1)
 * 
 *             try:             # <<<<<<<<<<<<<<
 *                 windowName = window_params["Window"]
 *             except:
 */
      __Pyx_PyThreadState_assign
      __Pyx_XGIVEREF(__pyx_t_20);
      __Pyx_XGIVEREF(__pyx_t_21);
      __Pyx_XGIVEREF(__pyx_t_22);
      __Pyx_ExceptionReset(__pyx_t_20, __pyx_t_21, __pyx_t_22);
      goto __pyx_L1_error;
      __pyx_L43_exception_handled:;
      __Pyx_PyThreadState_assign
      __Pyx_XGIVEREF(__pyx_t_20);
      __Pyx_XGIVEREF(__pyx_t_21);
      __Pyx_XGIVEREF(__pyx_t_22);
      __Pyx_ExceptionReset(__pyx_t_20, __pyx_t_21, __pyx_t_22);
      __pyx_L49_try_end:;
    }

    /* "WaveTools.py":1958
 *                 sys.exit(1)
 * 
 *             if(self.Nwaves > 0.5*self.tlength / self.Tm):             # <<<<<<<<<<<<<<
 *                 logEvent("ERROR! WaveTools.py: Reconstruction is expected to have two windows or more. Plese reduce the number of waves per window or switch to direct decomposition )")
 *                 sys.exit(1)
 */
    __pyx_t_2 = (0.5 * __pyx_v_self->tlength);
    if (unlikely(__pyx_v_self->Tm == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 1958, __pyx_L1_error)
    }
    __pyx_t_10 = ((__pyx_v_self->Nwaves > (__pyx_t_2 / __pyx_v_self->Tm)) != 0);
    if (__pyx_t_10) {

      /* "WaveTools.py":1959
 * 
 *             if(self.Nwaves > 0.5*self.tlength / self.Tm):
 *                 logEvent("ERROR! WaveTools.py: Reconstruction is expected to have two windows or more. Plese reduce the number of waves per window or switch to direct decomposition )")             # <<<<<<<<<<<<<<
 *                 sys.exit(1)
 * 
 */
      __pyx_t_13 = __Pyx_GetModuleGlobalName(__pyx_n_s_logEvent); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1959, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_13, __pyx_tuple__147, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1959, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "WaveTools.py":1960
 *             if(self.Nwaves > 0.5*self.tlength / self.Tm):
 *                 logEvent("ERROR! WaveTools.py: Reconstruction is expected to have two windows or more. Plese reduce the number of waves per window or switch to direct decomposition )")
 *                 sys.exit(1)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_sys); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1960, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_exit); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1960, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_13, __pyx_tuple__148, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1960, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "WaveTools.py":1958
 *                 sys.exit(1)
 * 
 *             if(self.Nwaves > 0.5*self.tlength / self.Tm):             # <<<<<<<<<<<<<<
 *                 logEvent("ERROR! WaveTools.py: Reconstruction is expected to have two windows or more. Plese reduce the number of waves per window or switch to direct decomposition )")
 *                 sys.exit(1)
 */
    }

    /* "WaveTools.py":1964
 * 
 * 
 *             validWindows = [costap, tophat]             # <<<<<<<<<<<<<<
 *             wind_filt =  loadExistingFunction(windowName, validWindows)
 *             logEvent("INFO WaveTools.py: performing series decomposition with spectral windows")
 */
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_costap); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1964, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_13 = __Pyx_GetModuleGlobalName(__pyx_n_s_tophat); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1964, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_6 = PyList_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1964, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5);
    PyList_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_13);
    PyList_SET_ITEM(__pyx_t_6, 1, __pyx_t_13);
    __pyx_t_5 = 0;
    __pyx_t_13 = 0;
    __pyx_v_validWindows = ((PyObject*)__pyx_t_6);
    __pyx_t_6 = 0;

    /* "WaveTools.py":1965
 * 
 *             validWindows = [costap, tophat]
 *             wind_filt =  loadExistingFunction(windowName, validWindows)             # <<<<<<<<<<<<<<
 *             logEvent("INFO WaveTools.py: performing series decomposition with spectral windows")
 *             # Portion of overlap, compared to window time
 */
    __pyx_t_13 = __Pyx_GetModuleGlobalName(__pyx_n_s_loadExistingFunction); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1965, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    if (unlikely(!__pyx_v_windowName)) { __Pyx_RaiseUnboundLocalError("windowName"); __PYX_ERR(0, 1965, __pyx_L1_error) }
    __pyx_t_5 = NULL;
    __pyx_t_3 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_13))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_13);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_13, function);
        __pyx_t_3 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_13)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_windowName, __pyx_v_validWindows};
      __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_13, __pyx_temp+1-__pyx_t_3, 2+__pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1965, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_6);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_13)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_windowName, __pyx_v_validWindows};
      __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_13, __pyx_temp+1-__pyx_t_3, 2+__pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1965, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_6);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(2+__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1965, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(__pyx_v_windowName);
      __Pyx_GIVEREF(__pyx_v_windowName);
      PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_3, __pyx_v_windowName);
      __Pyx_INCREF(__pyx_v_validWindows);
      __Pyx_GIVEREF(__pyx_v_validWindows);
      PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_3, __pyx_v_validWindows);
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_13, __pyx_t_4, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1965, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __pyx_v_wind_filt = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "WaveTools.py":1966
 *             validWindows = [costap, tophat]
 *             wind_filt =  loadExistingFunction(windowName, validWindows)
 *             logEvent("INFO WaveTools.py: performing series decomposition with spectral windows")             # <<<<<<<<<<<<<<
 *             # Portion of overlap, compared to window time
 *             try:
 */
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_logEvent); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1966, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__149, NULL); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1966, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

    /* "WaveTools.py":1968
 *             logEvent("INFO WaveTools.py: performing series decomposition with spectral windows")
 *             # Portion of overlap, compared to window time
 *             try:             # <<<<<<<<<<<<<<
 *                 self.overlap = window_params["Overlap"]
 *             except:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_22, &__pyx_t_21, &__pyx_t_20);
      __Pyx_XGOTREF(__pyx_t_22);
      __Pyx_XGOTREF(__pyx_t_21);
      __Pyx_XGOTREF(__pyx_t_20);
      /*try:*/ {

        /* "WaveTools.py":1969
 *             # Portion of overlap, compared to window time
 *             try:
 *                 self.overlap = window_params["Overlap"]             # <<<<<<<<<<<<<<
 *             except:
 *                 self.overlap = 0.7
 */
        __pyx_t_13 = PyObject_GetItem(__pyx_v_window_params, __pyx_n_s_Overlap); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1969, __pyx_L53_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_13); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1969, __pyx_L53_error)
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __pyx_v_self->overlap = __pyx_t_2;

        /* "WaveTools.py":1968
 *             logEvent("INFO WaveTools.py: performing series decomposition with spectral windows")
 *             # Portion of overlap, compared to window time
 *             try:             # <<<<<<<<<<<<<<
 *                 self.overlap = window_params["Overlap"]
 *             except:
 */
      }
      __Pyx_XDECREF(__pyx_t_22); __pyx_t_22 = 0;
      __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
      __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
      goto __pyx_L60_try_end;
      __pyx_L53_error:;
      __Pyx_PyThreadState_assign
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;

      /* "WaveTools.py":1970
 *             try:
 *                 self.overlap = window_params["Overlap"]
 *             except:             # <<<<<<<<<<<<<<
 *                 self.overlap = 0.7
 *                 logEvent("INFO WaveTools.py: Overlap entry in window_params dictionary not found. Setting default value of 0.7 (70% of the window length)")
 */
      /*except:*/ {
        __Pyx_AddTraceback("WaveTools.TimeSeries.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_13, &__pyx_t_6, &__pyx_t_4) < 0) __PYX_ERR(0, 1970, __pyx_L55_except_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GOTREF(__pyx_t_4);

        /* "WaveTools.py":1971
 *                 self.overlap = window_params["Overlap"]
 *             except:
 *                 self.overlap = 0.7             # <<<<<<<<<<<<<<
 *                 logEvent("INFO WaveTools.py: Overlap entry in window_params dictionary not found. Setting default value of 0.7 (70% of the window length)")
 * 
 */
        __pyx_v_self->overlap = 0.7;

        /* "WaveTools.py":1972
 *             except:
 *                 self.overlap = 0.7
 *                 logEvent("INFO WaveTools.py: Overlap entry in window_params dictionary not found. Setting default value of 0.7 (70% of the window length)")             # <<<<<<<<<<<<<<
 * 
 *             try:
 */
        __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_logEvent); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1972, __pyx_L55_except_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__150, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1972, __pyx_L55_except_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        goto __pyx_L54_exception_handled;
      }
      __pyx_L55_except_error:;

      /* "WaveTools.py":1968
 *             logEvent("INFO WaveTools.py: performing series decomposition with spectral windows")
 *             # Portion of overlap, compared to window time
 *             try:             # <<<<<<<<<<<<<<
 *                 self.overlap = window_params["Overlap"]
 *             except:
 */
      __Pyx_PyThreadState_assign
      __Pyx_XGIVEREF(__pyx_t_22);
      __Pyx_XGIVEREF(__pyx_t_21);
      __Pyx_XGIVEREF(__pyx_t_20);
      __Pyx_ExceptionReset(__pyx_t_22, __pyx_t_21, __pyx_t_20);
      goto __pyx_L1_error;
      __pyx_L54_exception_handled:;
      __Pyx_PyThreadState_assign
      __Pyx_XGIVEREF(__pyx_t_22);
      __Pyx_XGIVEREF(__pyx_t_21);
      __Pyx_XGIVEREF(__pyx_t_20);
      __Pyx_ExceptionReset(__pyx_t_22, __pyx_t_21, __pyx_t_20);
      __pyx_L60_try_end:;
    }

    /* "WaveTools.py":1974
 *                 logEvent("INFO WaveTools.py: Overlap entry in window_params dictionary not found. Setting default value of 0.7 (70% of the window length)")
 * 
 *             try:             # <<<<<<<<<<<<<<
 *                 self.cutoff = window_params["Cutoff"]
 *             except:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_20, &__pyx_t_21, &__pyx_t_22);
      __Pyx_XGOTREF(__pyx_t_20);
      __Pyx_XGOTREF(__pyx_t_21);
      __Pyx_XGOTREF(__pyx_t_22);
      /*try:*/ {

        /* "WaveTools.py":1975
 * 
 *             try:
 *                 self.cutoff = window_params["Cutoff"]             # <<<<<<<<<<<<<<
 *             except:
 *                 self.cutoff= 0.1
 */
        __pyx_t_4 = PyObject_GetItem(__pyx_v_window_params, __pyx_n_s_Cutoff); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1975, __pyx_L63_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1975, __pyx_L63_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_v_self->cutoff = __pyx_t_2;

        /* "WaveTools.py":1974
 *                 logEvent("INFO WaveTools.py: Overlap entry in window_params dictionary not found. Setting default value of 0.7 (70% of the window length)")
 * 
 *             try:             # <<<<<<<<<<<<<<
 *                 self.cutoff = window_params["Cutoff"]
 *             except:
 */
      }
      __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
      __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
      __Pyx_XDECREF(__pyx_t_22); __pyx_t_22 = 0;
      goto __pyx_L70_try_end;
      __pyx_L63_error:;
      __Pyx_PyThreadState_assign
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "WaveTools.py":1976
 *             try:
 *                 self.cutoff = window_params["Cutoff"]
 *             except:             # <<<<<<<<<<<<<<
 *                 self.cutoff= 0.1
 *                 logEvent("INFO WaveTools.py: Cutoff entry in window_params dictionary not found. Setting default value of 0.1 (1/10 of the window length)")
 */
      /*except:*/ {
        __Pyx_AddTraceback("WaveTools.TimeSeries.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_6, &__pyx_t_13) < 0) __PYX_ERR(0, 1976, __pyx_L65_except_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GOTREF(__pyx_t_13);

        /* "WaveTools.py":1977
 *                 self.cutoff = window_params["Cutoff"]
 *             except:
 *                 self.cutoff= 0.1             # <<<<<<<<<<<<<<
 *                 logEvent("INFO WaveTools.py: Cutoff entry in window_params dictionary not found. Setting default value of 0.1 (1/10 of the window length)")
 * 
 */
        __pyx_v_self->cutoff = 0.1;

        /* "WaveTools.py":1978
 *             except:
 *                 self.cutoff= 0.1
 *                 logEvent("INFO WaveTools.py: Cutoff entry in window_params dictionary not found. Setting default value of 0.1 (1/10 of the window length)")             # <<<<<<<<<<<<<<
 * 
 * 
 */
        __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_logEvent); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1978, __pyx_L65_except_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_tuple__151, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1978, __pyx_L65_except_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        goto __pyx_L64_exception_handled;
      }
      __pyx_L65_except_error:;

      /* "WaveTools.py":1974
 *                 logEvent("INFO WaveTools.py: Overlap entry in window_params dictionary not found. Setting default value of 0.7 (70% of the window length)")
 * 
 *             try:             # <<<<<<<<<<<<<<
 *                 self.cutoff = window_params["Cutoff"]
 *             except:
 */
      __Pyx_PyThreadState_assign
      __Pyx_XGIVEREF(__pyx_t_20);
      __Pyx_XGIVEREF(__pyx_t_21);
      __Pyx_XGIVEREF(__pyx_t_22);
      __Pyx_ExceptionReset(__pyx_t_20, __pyx_t_21, __pyx_t_22);
      goto __pyx_L1_error;
      __pyx_L64_exception_handled:;
      __Pyx_PyThreadState_assign
      __Pyx_XGIVEREF(__pyx_t_20);
      __Pyx_XGIVEREF(__pyx_t_21);
      __Pyx_XGIVEREF(__pyx_t_22);
      __Pyx_ExceptionReset(__pyx_t_20, __pyx_t_21, __pyx_t_22);
      __pyx_L70_try_end:;
    }

    /* "WaveTools.py":1984
 *             # Portion of window filtered with the Costap filter
 *             # Setting the handover time, either at the middle of the overlap or just after the filter
 *             self.handover = max(1.1 *self.cutoff,  self.overlap / 2.)             # <<<<<<<<<<<<<<
 *             if (self.handover > 0.9 * self.overlap):
 *                 logEvent("ERROR! Wavetools.py: Window handover is not optimal as the cutoff is too close to the overlap. Decrease cutoff or increase overlap")
 */
    __pyx_t_2 = (__pyx_v_self->overlap / 2.);
    __pyx_t_23 = (1.1 * __pyx_v_self->cutoff);
    if (((__pyx_t_2 > __pyx_t_23) != 0)) {
      __pyx_t_24 = __pyx_t_2;
    } else {
      __pyx_t_24 = __pyx_t_23;
    }
    __pyx_v_self->handover = __pyx_t_24;

    /* "WaveTools.py":1985
 *             # Setting the handover time, either at the middle of the overlap or just after the filter
 *             self.handover = max(1.1 *self.cutoff,  self.overlap / 2.)
 *             if (self.handover > 0.9 * self.overlap):             # <<<<<<<<<<<<<<
 *                 logEvent("ERROR! Wavetools.py: Window handover is not optimal as the cutoff is too close to the overlap. Decrease cutoff or increase overlap")
 *                 sys.exit(1)
 */
    __pyx_t_10 = ((__pyx_v_self->handover > (0.9 * __pyx_v_self->overlap)) != 0);
    if (__pyx_t_10) {

      /* "WaveTools.py":1986
 *             self.handover = max(1.1 *self.cutoff,  self.overlap / 2.)
 *             if (self.handover > 0.9 * self.overlap):
 *                 logEvent("ERROR! Wavetools.py: Window handover is not optimal as the cutoff is too close to the overlap. Decrease cutoff or increase overlap")             # <<<<<<<<<<<<<<
 *                 sys.exit(1)
 *             self.Twindow =  self.Tm * self.Nwaves            # setting the window duration (approx.). Twindow = Tmean * Nwaves
 */
      __pyx_t_13 = __Pyx_GetModuleGlobalName(__pyx_n_s_logEvent); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1986, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_13, __pyx_tuple__152, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1986, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "WaveTools.py":1987
 *             if (self.handover > 0.9 * self.overlap):
 *                 logEvent("ERROR! Wavetools.py: Window handover is not optimal as the cutoff is too close to the overlap. Decrease cutoff or increase overlap")
 *                 sys.exit(1)             # <<<<<<<<<<<<<<
 *             self.Twindow =  self.Tm * self.Nwaves            # setting the window duration (approx.). Twindow = Tmean * Nwaves
 *             self.Toverlap = self.overlap * self.Twindow
 */
      __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_sys); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1987, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_exit); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1987, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_13, __pyx_tuple__153, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1987, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "WaveTools.py":1985
 *             # Setting the handover time, either at the middle of the overlap or just after the filter
 *             self.handover = max(1.1 *self.cutoff,  self.overlap / 2.)
 *             if (self.handover > 0.9 * self.overlap):             # <<<<<<<<<<<<<<
 *                 logEvent("ERROR! Wavetools.py: Window handover is not optimal as the cutoff is too close to the overlap. Decrease cutoff or increase overlap")
 *                 sys.exit(1)
 */
    }

    /* "WaveTools.py":1988
 *                 logEvent("ERROR! Wavetools.py: Window handover is not optimal as the cutoff is too close to the overlap. Decrease cutoff or increase overlap")
 *                 sys.exit(1)
 *             self.Twindow =  self.Tm * self.Nwaves            # setting the window duration (approx.). Twindow = Tmean * Nwaves             # <<<<<<<<<<<<<<
 *             self.Toverlap = self.overlap * self.Twindow
 *             self.Nwindows = int( (self.tlength -   self.Twindow ) / (self.Twindow - self.Toverlap) ) + 1             #Getting the actual number of windows  (N-1) * (Twindow - Toverlap) + Twindow = total time
 */
    __pyx_v_self->Twindow = (__pyx_v_self->Tm * __pyx_v_self->Nwaves);

    /* "WaveTools.py":1989
 *                 sys.exit(1)
 *             self.Twindow =  self.Tm * self.Nwaves            # setting the window duration (approx.). Twindow = Tmean * Nwaves
 *             self.Toverlap = self.overlap * self.Twindow             # <<<<<<<<<<<<<<
 *             self.Nwindows = int( (self.tlength -   self.Twindow ) / (self.Twindow - self.Toverlap) ) + 1             #Getting the actual number of windows  (N-1) * (Twindow - Toverlap) + Twindow = total time
 *             self.Twindow = self.tlength/(1. + (1. - self.overlap)*(self.Nwindows-1))            # Correct Twindow and Toverlap for duration and integer number of windows
 */
    __pyx_v_self->Toverlap = (__pyx_v_self->overlap * __pyx_v_self->Twindow);

    /* "WaveTools.py":1990
 *             self.Twindow =  self.Tm * self.Nwaves            # setting the window duration (approx.). Twindow = Tmean * Nwaves
 *             self.Toverlap = self.overlap * self.Twindow
 *             self.Nwindows = int( (self.tlength -   self.Twindow ) / (self.Twindow - self.Toverlap) ) + 1             #Getting the actual number of windows  (N-1) * (Twindow - Toverlap) + Twindow = total time             # <<<<<<<<<<<<<<
 *             self.Twindow = self.tlength/(1. + (1. - self.overlap)*(self.Nwindows-1))            # Correct Twindow and Toverlap for duration and integer number of windows
 *             self.Toverlap = self.overlap*self.Twindow
 */
    __pyx_t_24 = (__pyx_v_self->tlength - __pyx_v_self->Twindow);
    __pyx_t_2 = (__pyx_v_self->Twindow - __pyx_v_self->Toverlap);
    if (unlikely(__pyx_t_2 == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 1990, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_PyInt_FromDouble((__pyx_t_24 / __pyx_t_2)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1990, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_13 = __Pyx_PyInt_AddObjC(__pyx_t_6, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1990, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_13); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1990, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __pyx_v_self->Nwindows = __pyx_t_3;

    /* "WaveTools.py":1991
 *             self.Toverlap = self.overlap * self.Twindow
 *             self.Nwindows = int( (self.tlength -   self.Twindow ) / (self.Twindow - self.Toverlap) ) + 1             #Getting the actual number of windows  (N-1) * (Twindow - Toverlap) + Twindow = total time
 *             self.Twindow = self.tlength/(1. + (1. - self.overlap)*(self.Nwindows-1))            # Correct Twindow and Toverlap for duration and integer number of windows             # <<<<<<<<<<<<<<
 *             self.Toverlap = self.overlap*self.Twindow
 *             logEvent("INFO: Wavetools.py: Correcting window duration for matching the exact time range of the series. Window duration correspond to %s waves approx." %(self.Twindow / self.Tm) )
 */
    __pyx_t_2 = (1. + ((1. - __pyx_v_self->overlap) * (__pyx_v_self->Nwindows - 1)));
    if (unlikely(__pyx_t_2 == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 1991, __pyx_L1_error)
    }
    __pyx_v_self->Twindow = (__pyx_v_self->tlength / __pyx_t_2);

    /* "WaveTools.py":1992
 *             self.Nwindows = int( (self.tlength -   self.Twindow ) / (self.Twindow - self.Toverlap) ) + 1             #Getting the actual number of windows  (N-1) * (Twindow - Toverlap) + Twindow = total time
 *             self.Twindow = self.tlength/(1. + (1. - self.overlap)*(self.Nwindows-1))            # Correct Twindow and Toverlap for duration and integer number of windows
 *             self.Toverlap = self.overlap*self.Twindow             # <<<<<<<<<<<<<<
 *             logEvent("INFO: Wavetools.py: Correcting window duration for matching the exact time range of the series. Window duration correspond to %s waves approx." %(self.Twindow / self.Tm) )
 *             diff = (self.Nwindows-1.)*(self.Twindow -self.Toverlap)+self.Twindow - self.tlength
 */
    __pyx_v_self->Toverlap = (__pyx_v_self->overlap * __pyx_v_self->Twindow);

    /* "WaveTools.py":1993
 *             self.Twindow = self.tlength/(1. + (1. - self.overlap)*(self.Nwindows-1))            # Correct Twindow and Toverlap for duration and integer number of windows
 *             self.Toverlap = self.overlap*self.Twindow
 *             logEvent("INFO: Wavetools.py: Correcting window duration for matching the exact time range of the series. Window duration correspond to %s waves approx." %(self.Twindow / self.Tm) )             # <<<<<<<<<<<<<<
 *             diff = (self.Nwindows-1.)*(self.Twindow -self.Toverlap)+self.Twindow - self.tlength
 *             logEvent("INFO: Wavetools.py: Checking duration of windowed time series: %s per cent difference from original duration" %(100*diff) )
 */
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_logEvent); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1993, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (unlikely(__pyx_v_self->Tm == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 1993, __pyx_L1_error)
    }
    __pyx_t_4 = PyFloat_FromDouble((__pyx_v_self->Twindow / __pyx_v_self->Tm)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1993, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_INFO_Wavetools_py_Correcting_win, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1993, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (!__pyx_t_4) {
      __pyx_t_13 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1993, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_13);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_5};
        __pyx_t_13 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1993, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_5};
        __pyx_t_13 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1993, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1993, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_5);
        __pyx_t_5 = 0;
        __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_7, NULL); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1993, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

    /* "WaveTools.py":1994
 *             self.Toverlap = self.overlap*self.Twindow
 *             logEvent("INFO: Wavetools.py: Correcting window duration for matching the exact time range of the series. Window duration correspond to %s waves approx." %(self.Twindow / self.Tm) )
 *             diff = (self.Nwindows-1.)*(self.Twindow -self.Toverlap)+self.Twindow - self.tlength             # <<<<<<<<<<<<<<
 *             logEvent("INFO: Wavetools.py: Checking duration of windowed time series: %s per cent difference from original duration" %(100*diff) )
 *             logEvent("INFO: Wavetools.py: Using %s windows for reconstruction with %s sec duration and %s per cent overlap" %(self.Nwindows, self.Twindow,100*self.overlap ))
 */
    __pyx_v_diff = ((((__pyx_v_self->Nwindows - 1.) * (__pyx_v_self->Twindow - __pyx_v_self->Toverlap)) + __pyx_v_self->Twindow) - __pyx_v_self->tlength);

    /* "WaveTools.py":1995
 *             logEvent("INFO: Wavetools.py: Correcting window duration for matching the exact time range of the series. Window duration correspond to %s waves approx." %(self.Twindow / self.Tm) )
 *             diff = (self.Nwindows-1.)*(self.Twindow -self.Toverlap)+self.Twindow - self.tlength
 *             logEvent("INFO: Wavetools.py: Checking duration of windowed time series: %s per cent difference from original duration" %(100*diff) )             # <<<<<<<<<<<<<<
 *             logEvent("INFO: Wavetools.py: Using %s windows for reconstruction with %s sec duration and %s per cent overlap" %(self.Nwindows, self.Twindow,100*self.overlap ))
 * # Setting where each window starts and ends
 */
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_logEvent); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1995, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyFloat_FromDouble((100.0 * __pyx_v_diff)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1995, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_INFO_Wavetools_py_Checking_durat, __pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1995, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (!__pyx_t_7) {
      __pyx_t_13 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1995, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_13);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_5};
        __pyx_t_13 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1995, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_5};
        __pyx_t_13 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1995, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      {
        __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1995, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_7); __pyx_t_7 = NULL;
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_5);
        __pyx_t_5 = 0;
        __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_4, NULL); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1995, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

    /* "WaveTools.py":1996
 *             diff = (self.Nwindows-1.)*(self.Twindow -self.Toverlap)+self.Twindow - self.tlength
 *             logEvent("INFO: Wavetools.py: Checking duration of windowed time series: %s per cent difference from original duration" %(100*diff) )
 *             logEvent("INFO: Wavetools.py: Using %s windows for reconstruction with %s sec duration and %s per cent overlap" %(self.Nwindows, self.Twindow,100*self.overlap ))             # <<<<<<<<<<<<<<
 * # Setting where each window starts and ends
 *             for jj in range(self.Nwindows):
 */
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_logEvent); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1996, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_self->Nwindows); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1996, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->Twindow); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1996, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = PyFloat_FromDouble((100.0 * __pyx_v_self->overlap)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1996, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_14 = PyTuple_New(3); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1996, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_14, 1, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_14, 2, __pyx_t_7);
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyString_Format(__pyx_kp_s_INFO_Wavetools_py_Using_s_window, __pyx_t_14); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1996, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_t_14 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_14)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_14);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (!__pyx_t_14) {
      __pyx_t_13 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1996, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_13);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[2] = {__pyx_t_14, __pyx_t_7};
        __pyx_t_13 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1996, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[2] = {__pyx_t_14, __pyx_t_7};
        __pyx_t_13 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1996, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else
      #endif
      {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1996, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_14); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_14); __pyx_t_14 = NULL;
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_5, NULL); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1996, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

    /* "WaveTools.py":1998
 *             logEvent("INFO: Wavetools.py: Using %s windows for reconstruction with %s sec duration and %s per cent overlap" %(self.Nwindows, self.Twindow,100*self.overlap ))
 * # Setting where each window starts and ends
 *             for jj in range(self.Nwindows):             # <<<<<<<<<<<<<<
 *                 span = np.zeros(2,"d")
 *                 tfirst = self.time[0] + self.Twindow
 */
    __pyx_t_13 = __Pyx_PyInt_From_int(__pyx_v_self->Nwindows); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1998, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1998, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_13);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_13);
    __pyx_t_13 = 0;
    __pyx_t_13 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_6, NULL); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1998, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (likely(PyList_CheckExact(__pyx_t_13)) || PyTuple_CheckExact(__pyx_t_13)) {
      __pyx_t_6 = __pyx_t_13; __Pyx_INCREF(__pyx_t_6); __pyx_t_8 = 0;
      __pyx_t_11 = NULL;
    } else {
      __pyx_t_8 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_13); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1998, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_11 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1998, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    for (;;) {
      if (likely(!__pyx_t_11)) {
        if (likely(PyList_CheckExact(__pyx_t_6))) {
          if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_6)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_13 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_8); __Pyx_INCREF(__pyx_t_13); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 1998, __pyx_L1_error)
          #else
          __pyx_t_13 = PySequence_ITEM(__pyx_t_6, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1998, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          #endif
        } else {
          if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_13 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_8); __Pyx_INCREF(__pyx_t_13); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 1998, __pyx_L1_error)
          #else
          __pyx_t_13 = PySequence_ITEM(__pyx_t_6, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1998, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          #endif
        }
      } else {
        __pyx_t_13 = __pyx_t_11(__pyx_t_6);
        if (unlikely(!__pyx_t_13)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1998, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_13);
      }
      __Pyx_XDECREF_SET(__pyx_v_jj, __pyx_t_13);
      __pyx_t_13 = 0;

      /* "WaveTools.py":1999
 * # Setting where each window starts and ends
 *             for jj in range(self.Nwindows):
 *                 span = np.zeros(2,"d")             # <<<<<<<<<<<<<<
 *                 tfirst = self.time[0] + self.Twindow
 *                 tlast = self.time[-1] - self.Twindow
 */
      __pyx_t_13 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1999, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_zeros); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1999, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__154, NULL); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1999, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF_SET(__pyx_v_span, __pyx_t_13);
      __pyx_t_13 = 0;

      /* "WaveTools.py":2000
 *             for jj in range(self.Nwindows):
 *                 span = np.zeros(2,"d")
 *                 tfirst = self.time[0] + self.Twindow             # <<<<<<<<<<<<<<
 *                 tlast = self.time[-1] - self.Twindow
 *                 if jj == 0:
 */
      __pyx_t_13 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->time), 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2000, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->Twindow); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2000, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = PyNumber_Add(__pyx_t_13, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2000, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF_SET(__pyx_v_tfirst, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "WaveTools.py":2001
 *                 span = np.zeros(2,"d")
 *                 tfirst = self.time[0] + self.Twindow
 *                 tlast = self.time[-1] - self.Twindow             # <<<<<<<<<<<<<<
 *                 if jj == 0:
 *                     ispan1 = 0
 */
      __pyx_t_7 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->time), -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2001, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->Twindow); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2001, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_13 = PyNumber_Subtract(__pyx_t_7, __pyx_t_5); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2001, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF_SET(__pyx_v_tlast, __pyx_t_13);
      __pyx_t_13 = 0;

      /* "WaveTools.py":2002
 *                 tfirst = self.time[0] + self.Twindow
 *                 tlast = self.time[-1] - self.Twindow
 *                 if jj == 0:             # <<<<<<<<<<<<<<
 *                     ispan1 = 0
 *                     ispan2 = np.where(self.time> tfirst)[0][0]
 */
      __pyx_t_13 = __Pyx_PyInt_EqObjC(__pyx_v_jj, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2002, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_13); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 2002, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      if (__pyx_t_10) {

        /* "WaveTools.py":2003
 *                 tlast = self.time[-1] - self.Twindow
 *                 if jj == 0:
 *                     ispan1 = 0             # <<<<<<<<<<<<<<
 *                     ispan2 = np.where(self.time> tfirst)[0][0]
 *                 elif jj == self.Nwindows-1:
 */
        __Pyx_INCREF(__pyx_int_0);
        __Pyx_XDECREF_SET(__pyx_v_ispan1, __pyx_int_0);

        /* "WaveTools.py":2004
 *                 if jj == 0:
 *                     ispan1 = 0
 *                     ispan2 = np.where(self.time> tfirst)[0][0]             # <<<<<<<<<<<<<<
 *                 elif jj == self.Nwindows-1:
 *                     ispan1 = np.where(self.time > tlast)[0][0]
 */
        __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2004, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_where); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2004, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = PyObject_RichCompare(((PyObject *)__pyx_v_self->time), __pyx_v_tfirst, Py_GT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2004, __pyx_L1_error)
        __pyx_t_14 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
          __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_7);
          if (likely(__pyx_t_14)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
            __Pyx_INCREF(__pyx_t_14);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_7, function);
          }
        }
        if (!__pyx_t_14) {
          __pyx_t_13 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_5); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2004, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_13);
        } else {
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_7)) {
            PyObject *__pyx_temp[2] = {__pyx_t_14, __pyx_t_5};
            __pyx_t_13 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2004, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
            __Pyx_GOTREF(__pyx_t_13);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
            PyObject *__pyx_temp[2] = {__pyx_t_14, __pyx_t_5};
            __pyx_t_13 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2004, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
            __Pyx_GOTREF(__pyx_t_13);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          } else
          #endif
          {
            __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2004, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_GIVEREF(__pyx_t_14); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_14); __pyx_t_14 = NULL;
            __Pyx_GIVEREF(__pyx_t_5);
            PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_5);
            __pyx_t_5 = 0;
            __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_4, NULL); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2004, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_13);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          }
        }
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_GetItemInt(__pyx_t_13, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2004, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __pyx_t_13 = __Pyx_GetItemInt(__pyx_t_7, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2004, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_XDECREF_SET(__pyx_v_ispan2, __pyx_t_13);
        __pyx_t_13 = 0;

        /* "WaveTools.py":2002
 *                 tfirst = self.time[0] + self.Twindow
 *                 tlast = self.time[-1] - self.Twindow
 *                 if jj == 0:             # <<<<<<<<<<<<<<
 *                     ispan1 = 0
 *                     ispan2 = np.where(self.time> tfirst)[0][0]
 */
        goto __pyx_L76;
      }

      /* "WaveTools.py":2005
 *                     ispan1 = 0
 *                     ispan2 = np.where(self.time> tfirst)[0][0]
 *                 elif jj == self.Nwindows-1:             # <<<<<<<<<<<<<<
 *                     ispan1 = np.where(self.time > tlast)[0][0]
 *                     ispan2 = len(self.time)-1
 */
      __pyx_t_13 = __Pyx_PyInt_From_long((__pyx_v_self->Nwindows - 1)); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2005, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_7 = PyObject_RichCompare(__pyx_v_jj, __pyx_t_13, Py_EQ); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2005, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 2005, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (__pyx_t_10) {

        /* "WaveTools.py":2006
 *                     ispan2 = np.where(self.time> tfirst)[0][0]
 *                 elif jj == self.Nwindows-1:
 *                     ispan1 = np.where(self.time > tlast)[0][0]             # <<<<<<<<<<<<<<
 *                     ispan2 = len(self.time)-1
 *                 else:
 */
        __pyx_t_13 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2006, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_where); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2006, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __pyx_t_13 = PyObject_RichCompare(((PyObject *)__pyx_v_self->time), __pyx_v_tlast, Py_GT); __Pyx_XGOTREF(__pyx_t_13); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2006, __pyx_L1_error)
        __pyx_t_5 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
          }
        }
        if (!__pyx_t_5) {
          __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_13); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2006, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          __Pyx_GOTREF(__pyx_t_7);
        } else {
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_4)) {
            PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_13};
            __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2006, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
            PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_13};
            __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2006, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          } else
          #endif
          {
            __pyx_t_14 = PyTuple_New(1+1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2006, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_14);
            __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_5); __pyx_t_5 = NULL;
            __Pyx_GIVEREF(__pyx_t_13);
            PyTuple_SET_ITEM(__pyx_t_14, 0+1, __pyx_t_13);
            __pyx_t_13 = 0;
            __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_14, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2006, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          }
        }
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_7, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2006, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_GetItemInt(__pyx_t_4, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2006, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF_SET(__pyx_v_ispan1, __pyx_t_7);
        __pyx_t_7 = 0;

        /* "WaveTools.py":2007
 *                 elif jj == self.Nwindows-1:
 *                     ispan1 = np.where(self.time > tlast)[0][0]
 *                     ispan2 = len(self.time)-1             # <<<<<<<<<<<<<<
 *                 else:
 *                     tstart = self.time[ispan2] - self.Toverlap
 */
        __pyx_t_7 = ((PyObject *)__pyx_v_self->time);
        __Pyx_INCREF(__pyx_t_7);
        __pyx_t_16 = PyObject_Length(__pyx_t_7); if (unlikely(__pyx_t_16 == -1)) __PYX_ERR(0, 2007, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = PyInt_FromSsize_t((__pyx_t_16 - 1)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2007, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_XDECREF_SET(__pyx_v_ispan2, __pyx_t_7);
        __pyx_t_7 = 0;

        /* "WaveTools.py":2005
 *                     ispan1 = 0
 *                     ispan2 = np.where(self.time> tfirst)[0][0]
 *                 elif jj == self.Nwindows-1:             # <<<<<<<<<<<<<<
 *                     ispan1 = np.where(self.time > tlast)[0][0]
 *                     ispan2 = len(self.time)-1
 */
        goto __pyx_L76;
      }

      /* "WaveTools.py":2009
 *                     ispan2 = len(self.time)-1
 *                 else:
 *                     tstart = self.time[ispan2] - self.Toverlap             # <<<<<<<<<<<<<<
 *                     ispan1 = np.where(self.time > tstart)[0][0]
 *                     ispan2 = np.where(self.time > tstart + self.Twindow )[0][0]
 */
      /*else*/ {
        if (unlikely(!__pyx_v_ispan2)) { __Pyx_RaiseUnboundLocalError("ispan2"); __PYX_ERR(0, 2009, __pyx_L1_error) }
        __pyx_t_7 = PyObject_GetItem(((PyObject *)__pyx_v_self->time), __pyx_v_ispan2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2009, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->Toverlap); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2009, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_14 = PyNumber_Subtract(__pyx_t_7, __pyx_t_4); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2009, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF_SET(__pyx_v_tstart, __pyx_t_14);
        __pyx_t_14 = 0;

        /* "WaveTools.py":2010
 *                 else:
 *                     tstart = self.time[ispan2] - self.Toverlap
 *                     ispan1 = np.where(self.time > tstart)[0][0]             # <<<<<<<<<<<<<<
 *                     ispan2 = np.where(self.time > tstart + self.Twindow )[0][0]
 *                 span[0] = ispan1
 */
        __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2010, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_where); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2010, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = PyObject_RichCompare(((PyObject *)__pyx_v_self->time), __pyx_v_tstart, Py_GT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2010, __pyx_L1_error)
        __pyx_t_13 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
          __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_7);
          if (likely(__pyx_t_13)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
            __Pyx_INCREF(__pyx_t_13);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_7, function);
          }
        }
        if (!__pyx_t_13) {
          __pyx_t_14 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_4); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2010, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_14);
        } else {
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_7)) {
            PyObject *__pyx_temp[2] = {__pyx_t_13, __pyx_t_4};
            __pyx_t_14 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2010, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
            __Pyx_GOTREF(__pyx_t_14);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
            PyObject *__pyx_temp[2] = {__pyx_t_13, __pyx_t_4};
            __pyx_t_14 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2010, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
            __Pyx_GOTREF(__pyx_t_14);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          } else
          #endif
          {
            __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2010, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_GIVEREF(__pyx_t_13); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_13); __pyx_t_13 = NULL;
            __Pyx_GIVEREF(__pyx_t_4);
            PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_4);
            __pyx_t_4 = 0;
            __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_5, NULL); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2010, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_14);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          }
        }
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_GetItemInt(__pyx_t_14, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2010, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __pyx_t_14 = __Pyx_GetItemInt(__pyx_t_7, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2010, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_XDECREF_SET(__pyx_v_ispan1, __pyx_t_14);
        __pyx_t_14 = 0;

        /* "WaveTools.py":2011
 *                     tstart = self.time[ispan2] - self.Toverlap
 *                     ispan1 = np.where(self.time > tstart)[0][0]
 *                     ispan2 = np.where(self.time > tstart + self.Twindow )[0][0]             # <<<<<<<<<<<<<<
 *                 span[0] = ispan1
 *                 span[1] = ispan2
 */
        __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2011, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_where); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2011, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = PyFloat_FromDouble(__pyx_v_self->Twindow); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2011, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_4 = PyNumber_Add(__pyx_v_tstart, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2011, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = PyObject_RichCompare(((PyObject *)__pyx_v_self->time), __pyx_t_4, Py_GT); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2011, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
          }
        }
        if (!__pyx_t_4) {
          __pyx_t_14 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_7); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2011, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_14);
        } else {
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_5)) {
            PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_7};
            __pyx_t_14 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2011, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_GOTREF(__pyx_t_14);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
            PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_7};
            __pyx_t_14 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2011, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_GOTREF(__pyx_t_14);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          } else
          #endif
          {
            __pyx_t_13 = PyTuple_New(1+1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2011, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_13);
            __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_4); __pyx_t_4 = NULL;
            __Pyx_GIVEREF(__pyx_t_7);
            PyTuple_SET_ITEM(__pyx_t_13, 0+1, __pyx_t_7);
            __pyx_t_7 = 0;
            __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_13, NULL); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2011, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_14);
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          }
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_14, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2011, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __pyx_t_14 = __Pyx_GetItemInt(__pyx_t_5, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2011, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF_SET(__pyx_v_ispan2, __pyx_t_14);
        __pyx_t_14 = 0;
      }
      __pyx_L76:;

      /* "WaveTools.py":2012
 *                     ispan1 = np.where(self.time > tstart)[0][0]
 *                     ispan2 = np.where(self.time > tstart + self.Twindow )[0][0]
 *                 span[0] = ispan1             # <<<<<<<<<<<<<<
 *                 span[1] = ispan2
 * # Storing time series in windows and handover times
 */
      if (unlikely(__Pyx_SetItemInt(__pyx_v_span, 0, __pyx_v_ispan1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1) < 0)) __PYX_ERR(0, 2012, __pyx_L1_error)

      /* "WaveTools.py":2013
 *                     ispan2 = np.where(self.time > tstart + self.Twindow )[0][0]
 *                 span[0] = ispan1
 *                 span[1] = ispan2             # <<<<<<<<<<<<<<
 * # Storing time series in windows and handover times
 *                 self.windows_handover.append( self.time[ispan2] - self.handover*self.Twindow )
 */
      if (unlikely(__Pyx_SetItemInt(__pyx_v_span, 1, __pyx_v_ispan2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1) < 0)) __PYX_ERR(0, 2013, __pyx_L1_error)

      /* "WaveTools.py":2015
 *                 span[1] = ispan2
 * # Storing time series in windows and handover times
 *                 self.windows_handover.append( self.time[ispan2] - self.handover*self.Twindow )             # <<<<<<<<<<<<<<
 *                 self.windows_rec.append(np.array(zip(self.time[ispan1:ispan2],self.etaS[ispan1:ispan2])))
 * # Decomposing windows to frequency domain
 */
      if (unlikely(__pyx_v_self->windows_handover == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "append");
        __PYX_ERR(0, 2015, __pyx_L1_error)
      }
      __pyx_t_14 = PyObject_GetItem(((PyObject *)__pyx_v_self->time), __pyx_v_ispan2); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2015, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_5 = PyFloat_FromDouble((__pyx_v_self->handover * __pyx_v_self->Twindow)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2015, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_13 = PyNumber_Subtract(__pyx_t_14, __pyx_t_5); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2015, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_25 = __Pyx_PyList_Append(__pyx_v_self->windows_handover, __pyx_t_13); if (unlikely(__pyx_t_25 == -1)) __PYX_ERR(0, 2015, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

      /* "WaveTools.py":2016
 * # Storing time series in windows and handover times
 *                 self.windows_handover.append( self.time[ispan2] - self.handover*self.Twindow )
 *                 self.windows_rec.append(np.array(zip(self.time[ispan1:ispan2],self.etaS[ispan1:ispan2])))             # <<<<<<<<<<<<<<
 * # Decomposing windows to frequency domain
 *             self.decompose_window = []
 */
      if (unlikely(__pyx_v_self->windows_rec == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "append");
        __PYX_ERR(0, 2016, __pyx_L1_error)
      }
      __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2016, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_array); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2016, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_GetSlice(((PyObject *)__pyx_v_self->time), 0, 0, &__pyx_v_ispan1, &__pyx_v_ispan2, NULL, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2016, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = __Pyx_PyObject_GetSlice(((PyObject *)__pyx_v_self->etaS), 0, 0, &__pyx_v_ispan1, &__pyx_v_ispan2, NULL, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2016, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2016, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_7);
      __pyx_t_5 = 0;
      __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_4, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2016, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_14))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_14);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_14, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_13 = __Pyx_PyObject_CallOneArg(__pyx_t_14, __pyx_t_7); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2016, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_13);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_14)) {
          PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_7};
          __pyx_t_13 = __Pyx_PyFunction_FastCall(__pyx_t_14, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2016, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_14)) {
          PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_7};
          __pyx_t_13 = __Pyx_PyCFunction_FastCall(__pyx_t_14, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2016, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        } else
        #endif
        {
          __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2016, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
          __Pyx_GIVEREF(__pyx_t_7);
          PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_7);
          __pyx_t_7 = 0;
          __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_5, NULL); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2016, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __pyx_t_25 = __Pyx_PyList_Append(__pyx_v_self->windows_rec, __pyx_t_13); if (unlikely(__pyx_t_25 == -1)) __PYX_ERR(0, 2016, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

      /* "WaveTools.py":1998
 *             logEvent("INFO: Wavetools.py: Using %s windows for reconstruction with %s sec duration and %s per cent overlap" %(self.Nwindows, self.Twindow,100*self.overlap ))
 * # Setting where each window starts and ends
 *             for jj in range(self.Nwindows):             # <<<<<<<<<<<<<<
 *                 span = np.zeros(2,"d")
 *                 tfirst = self.time[0] + self.Twindow
 */
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "WaveTools.py":2018
 *                 self.windows_rec.append(np.array(zip(self.time[ispan1:ispan2],self.etaS[ispan1:ispan2])))
 * # Decomposing windows to frequency domain
 *             self.decompose_window = []             # <<<<<<<<<<<<<<
 * #            style = "k-"
 * #            ii = 0
 */
    __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2018, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __Pyx_GOTREF(__pyx_v_self->decompose_window);
    __Pyx_DECREF(__pyx_v_self->decompose_window);
    __pyx_v_self->decompose_window = ((PyObject*)__pyx_t_6);
    __pyx_t_6 = 0;

    /* "WaveTools.py":2022
 * #            ii = 0
 * 
 *             for wind in self.windows_rec:             # <<<<<<<<<<<<<<
 *                 nfft=len(wind[:,0])
 *                 wind[:,1] *=wind_filt(nfft,cutoff = self.cutoff)
 */
    if (unlikely(__pyx_v_self->windows_rec == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(0, 2022, __pyx_L1_error)
    }
    __pyx_t_6 = __pyx_v_self->windows_rec; __Pyx_INCREF(__pyx_t_6); __pyx_t_8 = 0;
    for (;;) {
      if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_6)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_13 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_8); __Pyx_INCREF(__pyx_t_13); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 2022, __pyx_L1_error)
      #else
      __pyx_t_13 = PySequence_ITEM(__pyx_t_6, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2022, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      #endif
      __Pyx_XDECREF_SET(__pyx_v_wind, __pyx_t_13);
      __pyx_t_13 = 0;

      /* "WaveTools.py":2023
 * 
 *             for wind in self.windows_rec:
 *                 nfft=len(wind[:,0])             # <<<<<<<<<<<<<<
 *                 wind[:,1] *=wind_filt(nfft,cutoff = self.cutoff)
 *                 decomp = decompose_tseries(wind[:,0],wind[:,1],self.dt)
 */
      __pyx_t_13 = PyObject_GetItem(__pyx_v_wind, __pyx_tuple__156); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2023, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_16 = PyObject_Length(__pyx_t_13); if (unlikely(__pyx_t_16 == -1)) __PYX_ERR(0, 2023, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __pyx_v_nfft = __pyx_t_16;

      /* "WaveTools.py":2024
 *             for wind in self.windows_rec:
 *                 nfft=len(wind[:,0])
 *                 wind[:,1] *=wind_filt(nfft,cutoff = self.cutoff)             # <<<<<<<<<<<<<<
 *                 decomp = decompose_tseries(wind[:,0],wind[:,1],self.dt)
 *                 self.N = min(self.N, len(decomp[0]))
 */
      __Pyx_INCREF(__pyx_tuple__158);
      __pyx_t_26 = __pyx_tuple__158;
      __pyx_t_13 = PyObject_GetItem(__pyx_v_wind, __pyx_t_26); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2024, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_14 = PyInt_FromSsize_t(__pyx_v_nfft); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2024, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2024, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_14);
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_14);
      __pyx_t_14 = 0;
      __pyx_t_14 = PyDict_New(); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2024, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_7 = PyFloat_FromDouble(__pyx_v_self->cutoff); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2024, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (PyDict_SetItem(__pyx_t_14, __pyx_n_s_cutoff, __pyx_t_7) < 0) __PYX_ERR(0, 2024, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_v_wind_filt, __pyx_t_5, __pyx_t_14); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2024, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __pyx_t_14 = PyNumber_InPlaceMultiply(__pyx_t_13, __pyx_t_7); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2024, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(PyObject_SetItem(__pyx_v_wind, __pyx_t_26, __pyx_t_14) < 0)) __PYX_ERR(0, 2024, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;

      /* "WaveTools.py":2025
 *                 nfft=len(wind[:,0])
 *                 wind[:,1] *=wind_filt(nfft,cutoff = self.cutoff)
 *                 decomp = decompose_tseries(wind[:,0],wind[:,1],self.dt)             # <<<<<<<<<<<<<<
 *                 self.N = min(self.N, len(decomp[0]))
 *                 Nftemp = self.N
 */
      __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_decompose_tseries); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2025, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_13 = PyObject_GetItem(__pyx_v_wind, __pyx_tuple__160); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2025, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_5 = PyObject_GetItem(__pyx_v_wind, __pyx_tuple__162); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2025, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->dt); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2025, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_12 = NULL;
      __pyx_t_3 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_12)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_12);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
          __pyx_t_3 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[4] = {__pyx_t_12, __pyx_t_13, __pyx_t_5, __pyx_t_4};
        __pyx_t_14 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_3, 3+__pyx_t_3); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2025, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[4] = {__pyx_t_12, __pyx_t_13, __pyx_t_5, __pyx_t_4};
        __pyx_t_14 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_3, 3+__pyx_t_3); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2025, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      {
        __pyx_t_27 = PyTuple_New(3+__pyx_t_3); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 2025, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_27);
        if (__pyx_t_12) {
          __Pyx_GIVEREF(__pyx_t_12); PyTuple_SET_ITEM(__pyx_t_27, 0, __pyx_t_12); __pyx_t_12 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_13);
        PyTuple_SET_ITEM(__pyx_t_27, 0+__pyx_t_3, __pyx_t_13);
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_27, 1+__pyx_t_3, __pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_27, 2+__pyx_t_3, __pyx_t_4);
        __pyx_t_13 = 0;
        __pyx_t_5 = 0;
        __pyx_t_4 = 0;
        __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_27, NULL); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2025, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF_SET(__pyx_v_decomp, __pyx_t_14);
      __pyx_t_14 = 0;

      /* "WaveTools.py":2026
 *                 wind[:,1] *=wind_filt(nfft,cutoff = self.cutoff)
 *                 decomp = decompose_tseries(wind[:,0],wind[:,1],self.dt)
 *                 self.N = min(self.N, len(decomp[0]))             # <<<<<<<<<<<<<<
 *                 Nftemp = self.N
 *                 ipeak =  np.where(decomp[1] == max(decomp[1]))[0][0]
 */
      __pyx_t_14 = __Pyx_GetItemInt(__pyx_v_decomp, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2026, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_16 = PyObject_Length(__pyx_t_14); if (unlikely(__pyx_t_16 == -1)) __PYX_ERR(0, 2026, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __pyx_t_3 = __pyx_v_self->N;
      if (((__pyx_t_16 < __pyx_t_3) != 0)) {
        __pyx_t_18 = __pyx_t_16;
      } else {
        __pyx_t_18 = __pyx_t_3;
      }
      __pyx_v_self->N = __pyx_t_18;

      /* "WaveTools.py":2027
 *                 decomp = decompose_tseries(wind[:,0],wind[:,1],self.dt)
 *                 self.N = min(self.N, len(decomp[0]))
 *                 Nftemp = self.N             # <<<<<<<<<<<<<<
 *                 ipeak =  np.where(decomp[1] == max(decomp[1]))[0][0]
 *                 imax = min(ipeak + Nftemp/2,len(decomp[1]))
 */
      __pyx_t_14 = __Pyx_PyInt_From_int(__pyx_v_self->N); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2027, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_XDECREF_SET(__pyx_v_Nftemp, __pyx_t_14);
      __pyx_t_14 = 0;

      /* "WaveTools.py":2028
 *                 self.N = min(self.N, len(decomp[0]))
 *                 Nftemp = self.N
 *                 ipeak =  np.where(decomp[1] == max(decomp[1]))[0][0]             # <<<<<<<<<<<<<<
 *                 imax = min(ipeak + Nftemp/2,len(decomp[1]))
 *                 imin = max(0,ipeak - Nftemp/2)
 */
      __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2028, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_27 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_where); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 2028, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_27);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_decomp, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2028, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_decomp, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2028, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2028, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_max, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2028, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = PyObject_RichCompare(__pyx_t_7, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2028, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_27))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_27);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_27);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_27, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_14 = __Pyx_PyObject_CallOneArg(__pyx_t_27, __pyx_t_5); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2028, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_14);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_27)) {
          PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_5};
          __pyx_t_14 = __Pyx_PyFunction_FastCall(__pyx_t_27, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2028, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_14);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_27)) {
          PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_5};
          __pyx_t_14 = __Pyx_PyCFunction_FastCall(__pyx_t_27, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2028, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_14);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else
        #endif
        {
          __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2028, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4); __pyx_t_4 = NULL;
          __Pyx_GIVEREF(__pyx_t_5);
          PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_5);
          __pyx_t_5 = 0;
          __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_27, __pyx_t_7, NULL); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2028, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_14);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
      __pyx_t_27 = __Pyx_GetItemInt(__pyx_t_14, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 2028, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_27);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __pyx_t_14 = __Pyx_GetItemInt(__pyx_t_27, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2028, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
      __Pyx_XDECREF_SET(__pyx_v_ipeak, __pyx_t_14);
      __pyx_t_14 = 0;

      /* "WaveTools.py":2029
 *                 Nftemp = self.N
 *                 ipeak =  np.where(decomp[1] == max(decomp[1]))[0][0]
 *                 imax = min(ipeak + Nftemp/2,len(decomp[1]))             # <<<<<<<<<<<<<<
 *                 imin = max(0,ipeak - Nftemp/2)
 *                 self.Nf = imax-imin
 */
      __pyx_t_14 = __Pyx_GetItemInt(__pyx_v_decomp, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2029, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_18 = PyObject_Length(__pyx_t_14); if (unlikely(__pyx_t_18 == -1)) __PYX_ERR(0, 2029, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __pyx_t_14 = __Pyx_PyNumber_Divide(__pyx_v_Nftemp, __pyx_int_2); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2029, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_27 = PyNumber_Add(__pyx_v_ipeak, __pyx_t_14); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 2029, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_27);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __pyx_t_7 = PyInt_FromSsize_t(__pyx_t_18); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2029, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_5 = PyObject_RichCompare(__pyx_t_7, __pyx_t_27, Py_LT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2029, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 2029, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_10) {
        __pyx_t_5 = PyInt_FromSsize_t(__pyx_t_18); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2029, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_14 = __pyx_t_5;
        __pyx_t_5 = 0;
      } else {
        __Pyx_INCREF(__pyx_t_27);
        __pyx_t_14 = __pyx_t_27;
      }
      __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
      __pyx_t_27 = __pyx_t_14;
      __Pyx_INCREF(__pyx_t_27);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_XDECREF_SET(__pyx_v_imax, __pyx_t_27);
      __pyx_t_27 = 0;

      /* "WaveTools.py":2030
 *                 ipeak =  np.where(decomp[1] == max(decomp[1]))[0][0]
 *                 imax = min(ipeak + Nftemp/2,len(decomp[1]))
 *                 imin = max(0,ipeak - Nftemp/2)             # <<<<<<<<<<<<<<
 *                 self.Nf = imax-imin
 *                 if (self.Nf < self.N):
 */
      __pyx_t_27 = __Pyx_PyNumber_Divide(__pyx_v_Nftemp, __pyx_int_2); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 2030, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_27);
      __pyx_t_14 = PyNumber_Subtract(__pyx_v_ipeak, __pyx_t_27); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2030, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
      __pyx_t_15 = 0;
      __pyx_t_5 = __Pyx_PyInt_From_long(__pyx_t_15); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2030, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = PyObject_RichCompare(__pyx_t_14, __pyx_t_5, Py_GT); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2030, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 2030, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (__pyx_t_10) {
        __Pyx_INCREF(__pyx_t_14);
        __pyx_t_27 = __pyx_t_14;
      } else {
        __pyx_t_7 = __Pyx_PyInt_From_long(__pyx_t_15); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2030, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_27 = __pyx_t_7;
        __pyx_t_7 = 0;
      }
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __pyx_t_14 = __pyx_t_27;
      __Pyx_INCREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
      __Pyx_XDECREF_SET(__pyx_v_imin, __pyx_t_14);
      __pyx_t_14 = 0;

      /* "WaveTools.py":2031
 *                 imax = min(ipeak + Nftemp/2,len(decomp[1]))
 *                 imin = max(0,ipeak - Nftemp/2)
 *                 self.Nf = imax-imin             # <<<<<<<<<<<<<<
 *                 if (self.Nf < self.N):
 *                     if imin == 0:
 */
      __pyx_t_14 = PyNumber_Subtract(__pyx_v_imax, __pyx_v_imin); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2031, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_14); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2031, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __pyx_v_self->Nf = __pyx_t_3;

      /* "WaveTools.py":2032
 *                 imin = max(0,ipeak - Nftemp/2)
 *                 self.Nf = imax-imin
 *                 if (self.Nf < self.N):             # <<<<<<<<<<<<<<
 *                     if imin == 0:
 *                         imax = imax + (self.N - self.Nf)
 */
      __pyx_t_10 = ((__pyx_v_self->Nf < __pyx_v_self->N) != 0);
      if (__pyx_t_10) {

        /* "WaveTools.py":2033
 *                 self.Nf = imax-imin
 *                 if (self.Nf < self.N):
 *                     if imin == 0:             # <<<<<<<<<<<<<<
 *                         imax = imax + (self.N - self.Nf)
 *                     else:
 */
        __pyx_t_14 = __Pyx_PyInt_EqObjC(__pyx_v_imin, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2033, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_14); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 2033, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        if (__pyx_t_10) {

          /* "WaveTools.py":2034
 *                 if (self.Nf < self.N):
 *                     if imin == 0:
 *                         imax = imax + (self.N - self.Nf)             # <<<<<<<<<<<<<<
 *                     else:
 *                         imin = imin - (self.N - self.Nf)
 */
          __pyx_t_14 = __Pyx_PyInt_From_int((__pyx_v_self->N - __pyx_v_self->Nf)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2034, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_14);
          __pyx_t_27 = PyNumber_Add(__pyx_v_imax, __pyx_t_14); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 2034, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_27);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          __Pyx_DECREF_SET(__pyx_v_imax, __pyx_t_27);
          __pyx_t_27 = 0;

          /* "WaveTools.py":2033
 *                 self.Nf = imax-imin
 *                 if (self.Nf < self.N):
 *                     if imin == 0:             # <<<<<<<<<<<<<<
 *                         imax = imax + (self.N - self.Nf)
 *                     else:
 */
          goto __pyx_L80;
        }

        /* "WaveTools.py":2036
 *                         imax = imax + (self.N - self.Nf)
 *                     else:
 *                         imin = imin - (self.N - self.Nf)             # <<<<<<<<<<<<<<
 *                     self.Nf = self.N
 * 
 */
        /*else*/ {
          __pyx_t_27 = __Pyx_PyInt_From_int((__pyx_v_self->N - __pyx_v_self->Nf)); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 2036, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_27);
          __pyx_t_14 = PyNumber_Subtract(__pyx_v_imin, __pyx_t_27); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2036, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_14);
          __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
          __Pyx_DECREF_SET(__pyx_v_imin, __pyx_t_14);
          __pyx_t_14 = 0;
        }
        __pyx_L80:;

        /* "WaveTools.py":2037
 *                     else:
 *                         imin = imin - (self.N - self.Nf)
 *                     self.Nf = self.N             # <<<<<<<<<<<<<<
 * 
 *                 decomp[1] = decomp[1][imin:imax]
 */
        __pyx_t_3 = __pyx_v_self->N;
        __pyx_v_self->Nf = __pyx_t_3;

        /* "WaveTools.py":2032
 *                 imin = max(0,ipeak - Nftemp/2)
 *                 self.Nf = imax-imin
 *                 if (self.Nf < self.N):             # <<<<<<<<<<<<<<
 *                     if imin == 0:
 *                         imax = imax + (self.N - self.Nf)
 */
      }

      /* "WaveTools.py":2039
 *                     self.Nf = self.N
 * 
 *                 decomp[1] = decomp[1][imin:imax]             # <<<<<<<<<<<<<<
 *                 decomp[0] = decomp[0][imin:imax]
 *                 decomp[2] = -decomp[2][imin:imax]
 */
      __pyx_t_14 = __Pyx_GetItemInt(__pyx_v_decomp, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2039, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_27 = __Pyx_PyObject_GetSlice(__pyx_t_14, 0, 0, &__pyx_v_imin, &__pyx_v_imax, NULL, 0, 0, 1); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 2039, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_27);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      if (unlikely(__Pyx_SetItemInt(__pyx_v_decomp, 1, __pyx_t_27, long, 1, __Pyx_PyInt_From_long, 0, 0, 1) < 0)) __PYX_ERR(0, 2039, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;

      /* "WaveTools.py":2040
 * 
 *                 decomp[1] = decomp[1][imin:imax]
 *                 decomp[0] = decomp[0][imin:imax]             # <<<<<<<<<<<<<<
 *                 decomp[2] = -decomp[2][imin:imax]
 *                 ki = dispersion(decomp[0],self.depth,g=self.gAbs)
 */
      __pyx_t_27 = __Pyx_GetItemInt(__pyx_v_decomp, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 2040, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_27);
      __pyx_t_14 = __Pyx_PyObject_GetSlice(__pyx_t_27, 0, 0, &__pyx_v_imin, &__pyx_v_imax, NULL, 0, 0, 1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2040, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
      if (unlikely(__Pyx_SetItemInt(__pyx_v_decomp, 0, __pyx_t_14, long, 1, __Pyx_PyInt_From_long, 0, 0, 1) < 0)) __PYX_ERR(0, 2040, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

      /* "WaveTools.py":2041
 *                 decomp[1] = decomp[1][imin:imax]
 *                 decomp[0] = decomp[0][imin:imax]
 *                 decomp[2] = -decomp[2][imin:imax]             # <<<<<<<<<<<<<<
 *                 ki = dispersion(decomp[0],self.depth,g=self.gAbs)
 *                 kDir = np.zeros((len(ki),3),"d")
 */
      __pyx_t_14 = __Pyx_GetItemInt(__pyx_v_decomp, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2041, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_27 = __Pyx_PyObject_GetSlice(__pyx_t_14, 0, 0, &__pyx_v_imin, &__pyx_v_imax, NULL, 0, 0, 1); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 2041, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_27);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __pyx_t_14 = PyNumber_Negative(__pyx_t_27); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2041, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
      if (unlikely(__Pyx_SetItemInt(__pyx_v_decomp, 2, __pyx_t_14, long, 1, __Pyx_PyInt_From_long, 0, 0, 1) < 0)) __PYX_ERR(0, 2041, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

      /* "WaveTools.py":2042
 *                 decomp[0] = decomp[0][imin:imax]
 *                 decomp[2] = -decomp[2][imin:imax]
 *                 ki = dispersion(decomp[0],self.depth,g=self.gAbs)             # <<<<<<<<<<<<<<
 *                 kDir = np.zeros((len(ki),3),"d")
 *                 Tlag = np.zeros(ki.shape,)
 */
      __pyx_t_14 = __Pyx_GetModuleGlobalName(__pyx_n_s_dispersion); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2042, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_27 = __Pyx_GetItemInt(__pyx_v_decomp, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 2042, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_27);
      __pyx_t_7 = PyFloat_FromDouble(__pyx_v_self->depth); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2042, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2042, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_27);
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_27);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_7);
      __pyx_t_27 = 0;
      __pyx_t_7 = 0;
      __pyx_t_7 = PyDict_New(); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2042, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_27 = PyFloat_FromDouble(__pyx_v_self->gAbs); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 2042, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_27);
      if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_g, __pyx_t_27) < 0) __PYX_ERR(0, 2042, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
      __pyx_t_27 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_5, __pyx_t_7); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 2042, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_27);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF_SET(__pyx_v_ki, __pyx_t_27);
      __pyx_t_27 = 0;

      /* "WaveTools.py":2043
 *                 decomp[2] = -decomp[2][imin:imax]
 *                 ki = dispersion(decomp[0],self.depth,g=self.gAbs)
 *                 kDir = np.zeros((len(ki),3),"d")             # <<<<<<<<<<<<<<
 *                 Tlag = np.zeros(ki.shape,)
 *                 for ii in range(len(ki)):
 */
      __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2043, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_zeros); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2043, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_18 = PyObject_Length(__pyx_v_ki); if (unlikely(__pyx_t_18 == -1)) __PYX_ERR(0, 2043, __pyx_L1_error)
      __pyx_t_7 = PyInt_FromSsize_t(__pyx_t_18); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2043, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_14 = PyTuple_New(2); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2043, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_7);
      __Pyx_INCREF(__pyx_int_3);
      __Pyx_GIVEREF(__pyx_int_3);
      PyTuple_SET_ITEM(__pyx_t_14, 1, __pyx_int_3);
      __pyx_t_7 = 0;
      __pyx_t_7 = NULL;
      __pyx_t_3 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_3 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_14, __pyx_n_s_d};
        __pyx_t_27 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_3, 2+__pyx_t_3); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 2043, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_27);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_14, __pyx_n_s_d};
        __pyx_t_27 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_3, 2+__pyx_t_3); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 2043, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_27);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      } else
      #endif
      {
        __pyx_t_4 = PyTuple_New(2+__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2043, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        if (__pyx_t_7) {
          __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_7); __pyx_t_7 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_14);
        PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_3, __pyx_t_14);
        __Pyx_INCREF(__pyx_n_s_d);
        __Pyx_GIVEREF(__pyx_n_s_d);
        PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_3, __pyx_n_s_d);
        __pyx_t_14 = 0;
        __pyx_t_27 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, NULL); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 2043, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_27);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF_SET(__pyx_v_kDir, __pyx_t_27);
      __pyx_t_27 = 0;

      /* "WaveTools.py":2044
 *                 ki = dispersion(decomp[0],self.depth,g=self.gAbs)
 *                 kDir = np.zeros((len(ki),3),"d")
 *                 Tlag = np.zeros(ki.shape,)             # <<<<<<<<<<<<<<
 *                 for ii in range(len(ki)):
 *                     kDir[ii,:] = ki[ii]*self.waveDir[:]
 */
      __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2044, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2044, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_ki, __pyx_n_s_shape); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2044, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_14 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_14)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_14);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      if (!__pyx_t_14) {
        __pyx_t_27 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 2044, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_27);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[2] = {__pyx_t_14, __pyx_t_5};
          __pyx_t_27 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 2044, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
          __Pyx_GOTREF(__pyx_t_27);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[2] = {__pyx_t_14, __pyx_t_5};
          __pyx_t_27 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 2044, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
          __Pyx_GOTREF(__pyx_t_27);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else
        #endif
        {
          __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2044, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_GIVEREF(__pyx_t_14); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_14); __pyx_t_14 = NULL;
          __Pyx_GIVEREF(__pyx_t_5);
          PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_5);
          __pyx_t_5 = 0;
          __pyx_t_27 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 2044, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_27);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF_SET(__pyx_v_Tlag, __pyx_t_27);
      __pyx_t_27 = 0;

      /* "WaveTools.py":2045
 *                 kDir = np.zeros((len(ki),3),"d")
 *                 Tlag = np.zeros(ki.shape,)
 *                 for ii in range(len(ki)):             # <<<<<<<<<<<<<<
 *                     kDir[ii,:] = ki[ii]*self.waveDir[:]
 *                     Tlag[ii] = sum(Lgen[:]*kDir[ii,:])/decomp[0][ii]
 */
      __pyx_t_18 = PyObject_Length(__pyx_v_ki); if (unlikely(__pyx_t_18 == -1)) __PYX_ERR(0, 2045, __pyx_L1_error)
      __pyx_t_27 = PyInt_FromSsize_t(__pyx_t_18); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 2045, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_27);
      __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2045, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_27);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_27);
      __pyx_t_27 = 0;
      __pyx_t_27 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_4, NULL); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 2045, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_27);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (likely(PyList_CheckExact(__pyx_t_27)) || PyTuple_CheckExact(__pyx_t_27)) {
        __pyx_t_4 = __pyx_t_27; __Pyx_INCREF(__pyx_t_4); __pyx_t_18 = 0;
        __pyx_t_11 = NULL;
      } else {
        __pyx_t_18 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_27); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2045, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_11 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2045, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
      for (;;) {
        if (likely(!__pyx_t_11)) {
          if (likely(PyList_CheckExact(__pyx_t_4))) {
            if (__pyx_t_18 >= PyList_GET_SIZE(__pyx_t_4)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_27 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_18); __Pyx_INCREF(__pyx_t_27); __pyx_t_18++; if (unlikely(0 < 0)) __PYX_ERR(0, 2045, __pyx_L1_error)
            #else
            __pyx_t_27 = PySequence_ITEM(__pyx_t_4, __pyx_t_18); __pyx_t_18++; if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 2045, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_27);
            #endif
          } else {
            if (__pyx_t_18 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_27 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_18); __Pyx_INCREF(__pyx_t_27); __pyx_t_18++; if (unlikely(0 < 0)) __PYX_ERR(0, 2045, __pyx_L1_error)
            #else
            __pyx_t_27 = PySequence_ITEM(__pyx_t_4, __pyx_t_18); __pyx_t_18++; if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 2045, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_27);
            #endif
          }
        } else {
          __pyx_t_27 = __pyx_t_11(__pyx_t_4);
          if (unlikely(!__pyx_t_27)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 2045, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_27);
        }
        __Pyx_XDECREF_SET(__pyx_v_ii, __pyx_t_27);
        __pyx_t_27 = 0;

        /* "WaveTools.py":2046
 *                 Tlag = np.zeros(ki.shape,)
 *                 for ii in range(len(ki)):
 *                     kDir[ii,:] = ki[ii]*self.waveDir[:]             # <<<<<<<<<<<<<<
 *                     Tlag[ii] = sum(Lgen[:]*kDir[ii,:])/decomp[0][ii]
 *                 self.Tlag = max(Tlag)
 */
        __pyx_t_27 = PyObject_GetItem(__pyx_v_ki, __pyx_v_ii); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 2046, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_27);
        __pyx_t_7 = __Pyx_PyObject_GetSlice(((PyObject *)__pyx_v_self->waveDir), 0, 0, NULL, NULL, &__pyx_slice__163, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2046, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_5 = PyNumber_Multiply(__pyx_t_27, __pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2046, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2046, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_INCREF(__pyx_v_ii);
        __Pyx_GIVEREF(__pyx_v_ii);
        PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_ii);
        __Pyx_INCREF(__pyx_slice__164);
        __Pyx_GIVEREF(__pyx_slice__164);
        PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_slice__164);
        if (unlikely(PyObject_SetItem(__pyx_v_kDir, __pyx_t_7, __pyx_t_5) < 0)) __PYX_ERR(0, 2046, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "WaveTools.py":2047
 *                 for ii in range(len(ki)):
 *                     kDir[ii,:] = ki[ii]*self.waveDir[:]
 *                     Tlag[ii] = sum(Lgen[:]*kDir[ii,:])/decomp[0][ii]             # <<<<<<<<<<<<<<
 *                 self.Tlag = max(Tlag)
 *                 if self.Tlag > (self.Toverlap/2. - self.cutoff*self.Twindow):
 */
        __pyx_t_5 = __Pyx_PyObject_GetSlice(__pyx_v_Lgen, 0, 0, NULL, NULL, &__pyx_slice__165, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2047, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2047, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_INCREF(__pyx_v_ii);
        __Pyx_GIVEREF(__pyx_v_ii);
        PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_ii);
        __Pyx_INCREF(__pyx_slice__166);
        __Pyx_GIVEREF(__pyx_slice__166);
        PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_slice__166);
        __pyx_t_27 = PyObject_GetItem(__pyx_v_kDir, __pyx_t_7); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 2047, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_27);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = PyNumber_Multiply(__pyx_t_5, __pyx_t_27); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2047, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
        __pyx_t_27 = PyTuple_New(1); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 2047, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_27);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_27, 0, __pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_sum, __pyx_t_27, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2047, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
        __pyx_t_27 = __Pyx_GetItemInt(__pyx_v_decomp, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 2047, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_27);
        __pyx_t_5 = PyObject_GetItem(__pyx_t_27, __pyx_v_ii); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2047, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
        __pyx_t_27 = __Pyx_PyNumber_Divide(__pyx_t_7, __pyx_t_5); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 2047, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_27);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(PyObject_SetItem(__pyx_v_Tlag, __pyx_v_ii, __pyx_t_27) < 0)) __PYX_ERR(0, 2047, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;

        /* "WaveTools.py":2045
 *                 kDir = np.zeros((len(ki),3),"d")
 *                 Tlag = np.zeros(ki.shape,)
 *                 for ii in range(len(ki)):             # <<<<<<<<<<<<<<
 *                     kDir[ii,:] = ki[ii]*self.waveDir[:]
 *                     Tlag[ii] = sum(Lgen[:]*kDir[ii,:])/decomp[0][ii]
 */
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "WaveTools.py":2048
 *                     kDir[ii,:] = ki[ii]*self.waveDir[:]
 *                     Tlag[ii] = sum(Lgen[:]*kDir[ii,:])/decomp[0][ii]
 *                 self.Tlag = max(Tlag)             # <<<<<<<<<<<<<<
 *                 if self.Tlag > (self.Toverlap/2. - self.cutoff*self.Twindow):
 *                     logEvent("ERROR!: WaveTools.py: Relaxation zone lenght does not allow for spatial coherency in the windows method.Please a) increase number of waves per window or b) increase overlap or c) decrease lenght of the relaxation zone")
 */
      __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2048, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_v_Tlag);
      __Pyx_GIVEREF(__pyx_v_Tlag);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_Tlag);
      __pyx_t_27 = __Pyx_PyObject_Call(__pyx_builtin_max, __pyx_t_4, NULL); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 2048, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_27);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_27); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2048, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
      __pyx_v_self->Tlag = __pyx_t_2;

      /* "WaveTools.py":2049
 *                     Tlag[ii] = sum(Lgen[:]*kDir[ii,:])/decomp[0][ii]
 *                 self.Tlag = max(Tlag)
 *                 if self.Tlag > (self.Toverlap/2. - self.cutoff*self.Twindow):             # <<<<<<<<<<<<<<
 *                     logEvent("ERROR!: WaveTools.py: Relaxation zone lenght does not allow for spatial coherency in the windows method.Please a) increase number of waves per window or b) increase overlap or c) decrease lenght of the relaxation zone")
 *                     sys.exit(1)
 */
      __pyx_t_10 = ((__pyx_v_self->Tlag > ((__pyx_v_self->Toverlap / 2.) - (__pyx_v_self->cutoff * __pyx_v_self->Twindow))) != 0);
      if (__pyx_t_10) {

        /* "WaveTools.py":2050
 *                 self.Tlag = max(Tlag)
 *                 if self.Tlag > (self.Toverlap/2. - self.cutoff*self.Twindow):
 *                     logEvent("ERROR!: WaveTools.py: Relaxation zone lenght does not allow for spatial coherency in the windows method.Please a) increase number of waves per window or b) increase overlap or c) decrease lenght of the relaxation zone")             # <<<<<<<<<<<<<<
 *                     sys.exit(1)
 *                 decomp.append(kDir)
 */
        __pyx_t_27 = __Pyx_GetModuleGlobalName(__pyx_n_s_logEvent); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 2050, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_27);
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_27, __pyx_tuple__167, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2050, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "WaveTools.py":2051
 *                 if self.Tlag > (self.Toverlap/2. - self.cutoff*self.Twindow):
 *                     logEvent("ERROR!: WaveTools.py: Relaxation zone lenght does not allow for spatial coherency in the windows method.Please a) increase number of waves per window or b) increase overlap or c) decrease lenght of the relaxation zone")
 *                     sys.exit(1)             # <<<<<<<<<<<<<<
 *                 decomp.append(kDir)
 *                 decomp.append(ki)
 */
        __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_sys); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2051, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_27 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_exit); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 2051, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_27);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_27, __pyx_tuple__168, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2051, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "WaveTools.py":2049
 *                     Tlag[ii] = sum(Lgen[:]*kDir[ii,:])/decomp[0][ii]
 *                 self.Tlag = max(Tlag)
 *                 if self.Tlag > (self.Toverlap/2. - self.cutoff*self.Twindow):             # <<<<<<<<<<<<<<
 *                     logEvent("ERROR!: WaveTools.py: Relaxation zone lenght does not allow for spatial coherency in the windows method.Please a) increase number of waves per window or b) increase overlap or c) decrease lenght of the relaxation zone")
 *                     sys.exit(1)
 */
      }

      /* "WaveTools.py":2052
 *                     logEvent("ERROR!: WaveTools.py: Relaxation zone lenght does not allow for spatial coherency in the windows method.Please a) increase number of waves per window or b) increase overlap or c) decrease lenght of the relaxation zone")
 *                     sys.exit(1)
 *                 decomp.append(kDir)             # <<<<<<<<<<<<<<
 *                 decomp.append(ki)
 * 
 */
      __pyx_t_25 = __Pyx_PyObject_Append(__pyx_v_decomp, __pyx_v_kDir); if (unlikely(__pyx_t_25 == -1)) __PYX_ERR(0, 2052, __pyx_L1_error)

      /* "WaveTools.py":2053
 *                     sys.exit(1)
 *                 decomp.append(kDir)
 *                 decomp.append(ki)             # <<<<<<<<<<<<<<
 * 
 *                 self.decompose_window.append(decomp)
 */
      __pyx_t_25 = __Pyx_PyObject_Append(__pyx_v_decomp, __pyx_v_ki); if (unlikely(__pyx_t_25 == -1)) __PYX_ERR(0, 2053, __pyx_L1_error)

      /* "WaveTools.py":2055
 *                 decomp.append(ki)
 * 
 *                 self.decompose_window.append(decomp)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      if (unlikely(__pyx_v_self->decompose_window == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "append");
        __PYX_ERR(0, 2055, __pyx_L1_error)
      }
      __pyx_t_25 = __Pyx_PyList_Append(__pyx_v_self->decompose_window, __pyx_v_decomp); if (unlikely(__pyx_t_25 == -1)) __PYX_ERR(0, 2055, __pyx_L1_error)

      /* "WaveTools.py":2022
 * #            ii = 0
 * 
 *             for wind in self.windows_rec:             # <<<<<<<<<<<<<<
 *                 nfft=len(wind[:,0])
 *                 wind[:,1] *=wind_filt(nfft,cutoff = self.cutoff)
 */
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "WaveTools.py":2060
 *         #c++ declarations
 * 
 *             for ii in range(len(self.windows_handover)):             # <<<<<<<<<<<<<<
 *                 self.whand_c[ii] = self.windows_handover[ii]
 *                 self.T0[ii] = self.windows_rec[ii][0,0]
 */
    __pyx_t_6 = __pyx_v_self->windows_handover;
    __Pyx_INCREF(__pyx_t_6);
    if (unlikely(__pyx_t_6 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 2060, __pyx_L1_error)
    }
    __pyx_t_8 = PyList_GET_SIZE(__pyx_t_6); if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(0, 2060, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyInt_FromSsize_t(__pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2060, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2060, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_4, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2060, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (likely(PyList_CheckExact(__pyx_t_6)) || PyTuple_CheckExact(__pyx_t_6)) {
      __pyx_t_4 = __pyx_t_6; __Pyx_INCREF(__pyx_t_4); __pyx_t_8 = 0;
      __pyx_t_11 = NULL;
    } else {
      __pyx_t_8 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2060, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_11 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2060, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    for (;;) {
      if (likely(!__pyx_t_11)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_8); __Pyx_INCREF(__pyx_t_6); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 2060, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_4, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2060, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        } else {
          if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_8); __Pyx_INCREF(__pyx_t_6); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 2060, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_4, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2060, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        }
      } else {
        __pyx_t_6 = __pyx_t_11(__pyx_t_4);
        if (unlikely(!__pyx_t_6)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 2060, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_6);
      }
      __Pyx_XDECREF_SET(__pyx_v_ii, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "WaveTools.py":2061
 * 
 *             for ii in range(len(self.windows_handover)):
 *                 self.whand_c[ii] = self.windows_handover[ii]             # <<<<<<<<<<<<<<
 *                 self.T0[ii] = self.windows_rec[ii][0,0]
 *             self.whand_ = self.whand_c
 */
      if (unlikely(__pyx_v_self->windows_handover == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 2061, __pyx_L1_error)
      }
      __pyx_t_6 = PyObject_GetItem(__pyx_v_self->windows_handover, __pyx_v_ii); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2061, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2061, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_18 = __Pyx_PyIndex_AsSsize_t(__pyx_v_ii); if (unlikely((__pyx_t_18 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 2061, __pyx_L1_error)
      (__pyx_v_self->whand_c[__pyx_t_18]) = __pyx_t_2;

      /* "WaveTools.py":2062
 *             for ii in range(len(self.windows_handover)):
 *                 self.whand_c[ii] = self.windows_handover[ii]
 *                 self.T0[ii] = self.windows_rec[ii][0,0]             # <<<<<<<<<<<<<<
 *             self.whand_ = self.whand_c
 *             self.T0_ = self.T0
 */
      if (unlikely(__pyx_v_self->windows_rec == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 2062, __pyx_L1_error)
      }
      __pyx_t_6 = PyObject_GetItem(__pyx_v_self->windows_rec, __pyx_v_ii); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2062, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_27 = PyObject_GetItem(__pyx_t_6, __pyx_tuple__169); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 2062, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_27);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_27); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2062, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
      __pyx_t_18 = __Pyx_PyIndex_AsSsize_t(__pyx_v_ii); if (unlikely((__pyx_t_18 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 2062, __pyx_L1_error)
      (__pyx_v_self->T0[__pyx_t_18]) = __pyx_t_2;

      /* "WaveTools.py":2060
 *         #c++ declarations
 * 
 *             for ii in range(len(self.windows_handover)):             # <<<<<<<<<<<<<<
 *                 self.whand_c[ii] = self.windows_handover[ii]
 *                 self.T0[ii] = self.windows_rec[ii][0,0]
 */
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "WaveTools.py":2063
 *                 self.whand_c[ii] = self.windows_handover[ii]
 *                 self.T0[ii] = self.windows_rec[ii][0,0]
 *             self.whand_ = self.whand_c             # <<<<<<<<<<<<<<
 *             self.T0_ = self.T0
 *             for ii in range(self.Nwindows):
 */
    __pyx_t_19 = __pyx_v_self->whand_c;
    __pyx_v_self->whand_ = __pyx_t_19;

    /* "WaveTools.py":2064
 *                 self.T0[ii] = self.windows_rec[ii][0,0]
 *             self.whand_ = self.whand_c
 *             self.T0_ = self.T0             # <<<<<<<<<<<<<<
 *             for ii in range(self.Nwindows):
 *                 for jj in range(self.N):
 */
    __pyx_t_19 = __pyx_v_self->T0;
    __pyx_v_self->T0_ = __pyx_t_19;

    /* "WaveTools.py":2065
 *             self.whand_ = self.whand_c
 *             self.T0_ = self.T0
 *             for ii in range(self.Nwindows):             # <<<<<<<<<<<<<<
 *                 for jj in range(self.N):
 *                     ij = ii*self.N + jj
 */
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_self->Nwindows); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2065, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_27 = PyTuple_New(1); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 2065, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_27);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_27, 0, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_27, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2065, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
    if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
      __pyx_t_27 = __pyx_t_4; __Pyx_INCREF(__pyx_t_27); __pyx_t_8 = 0;
      __pyx_t_11 = NULL;
    } else {
      __pyx_t_8 = -1; __pyx_t_27 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 2065, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_27);
      __pyx_t_11 = Py_TYPE(__pyx_t_27)->tp_iternext; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2065, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    for (;;) {
      if (likely(!__pyx_t_11)) {
        if (likely(PyList_CheckExact(__pyx_t_27))) {
          if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_27)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyList_GET_ITEM(__pyx_t_27, __pyx_t_8); __Pyx_INCREF(__pyx_t_4); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 2065, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_27, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2065, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        } else {
          if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_27)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_27, __pyx_t_8); __Pyx_INCREF(__pyx_t_4); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 2065, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_27, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2065, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        }
      } else {
        __pyx_t_4 = __pyx_t_11(__pyx_t_27);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 2065, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_4);
      }
      __Pyx_XDECREF_SET(__pyx_v_ii, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "WaveTools.py":2066
 *             self.T0_ = self.T0
 *             for ii in range(self.Nwindows):
 *                 for jj in range(self.N):             # <<<<<<<<<<<<<<
 *                     ij = ii*self.N + jj
 *                     if(jj <len(self.decompose_window[ii][0])):
 */
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_self->N); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2066, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2066, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2066, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
        __pyx_t_6 = __pyx_t_4; __Pyx_INCREF(__pyx_t_6); __pyx_t_18 = 0;
        __pyx_t_17 = NULL;
      } else {
        __pyx_t_18 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2066, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_17 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 2066, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      for (;;) {
        if (likely(!__pyx_t_17)) {
          if (likely(PyList_CheckExact(__pyx_t_6))) {
            if (__pyx_t_18 >= PyList_GET_SIZE(__pyx_t_6)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_4 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_18); __Pyx_INCREF(__pyx_t_4); __pyx_t_18++; if (unlikely(0 < 0)) __PYX_ERR(0, 2066, __pyx_L1_error)
            #else
            __pyx_t_4 = PySequence_ITEM(__pyx_t_6, __pyx_t_18); __pyx_t_18++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2066, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            #endif
          } else {
            if (__pyx_t_18 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_18); __Pyx_INCREF(__pyx_t_4); __pyx_t_18++; if (unlikely(0 < 0)) __PYX_ERR(0, 2066, __pyx_L1_error)
            #else
            __pyx_t_4 = PySequence_ITEM(__pyx_t_6, __pyx_t_18); __pyx_t_18++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2066, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            #endif
          }
        } else {
          __pyx_t_4 = __pyx_t_17(__pyx_t_6);
          if (unlikely(!__pyx_t_4)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 2066, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_4);
        }
        __Pyx_XDECREF_SET(__pyx_v_jj, __pyx_t_4);
        __pyx_t_4 = 0;

        /* "WaveTools.py":2067
 *             for ii in range(self.Nwindows):
 *                 for jj in range(self.N):
 *                     ij = ii*self.N + jj             # <<<<<<<<<<<<<<
 *                     if(jj <len(self.decompose_window[ii][0])):
 *                         self.omega_c[ij] = self.decompose_window[ii][0][jj]
 */
        __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_self->N); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2067, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = PyNumber_Multiply(__pyx_v_ii, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2067, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = PyNumber_Add(__pyx_t_5, __pyx_v_jj); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2067, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF_SET(__pyx_v_ij, __pyx_t_4);
        __pyx_t_4 = 0;

        /* "WaveTools.py":2068
 *                 for jj in range(self.N):
 *                     ij = ii*self.N + jj
 *                     if(jj <len(self.decompose_window[ii][0])):             # <<<<<<<<<<<<<<
 *                         self.omega_c[ij] = self.decompose_window[ii][0][jj]
 *                         self.ki_c[ij]  = self.decompose_window[ii][5][jj]
 */
        if (unlikely(__pyx_v_self->decompose_window == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          __PYX_ERR(0, 2068, __pyx_L1_error)
        }
        __pyx_t_4 = PyObject_GetItem(__pyx_v_self->decompose_window, __pyx_v_ii); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2068, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_4, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2068, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_16 = PyObject_Length(__pyx_t_5); if (unlikely(__pyx_t_16 == -1)) __PYX_ERR(0, 2068, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = PyInt_FromSsize_t(__pyx_t_16); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2068, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_4 = PyObject_RichCompare(__pyx_v_jj, __pyx_t_5, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2068, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 2068, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (__pyx_t_10) {

          /* "WaveTools.py":2069
 *                     ij = ii*self.N + jj
 *                     if(jj <len(self.decompose_window[ii][0])):
 *                         self.omega_c[ij] = self.decompose_window[ii][0][jj]             # <<<<<<<<<<<<<<
 *                         self.ki_c[ij]  = self.decompose_window[ii][5][jj]
 *                         self.tanh_c[ij] = np.tanh(self.ki_c[ij]*self.depth)
 */
          if (unlikely(__pyx_v_self->decompose_window == Py_None)) {
            PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
            __PYX_ERR(0, 2069, __pyx_L1_error)
          }
          __pyx_t_4 = PyObject_GetItem(__pyx_v_self->decompose_window, __pyx_v_ii); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2069, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_4, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2069, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_4 = PyObject_GetItem(__pyx_t_5, __pyx_v_jj); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2069, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2069, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_16 = __Pyx_PyIndex_AsSsize_t(__pyx_v_ij); if (unlikely((__pyx_t_16 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 2069, __pyx_L1_error)
          (__pyx_v_self->omega_c[__pyx_t_16]) = __pyx_t_2;

          /* "WaveTools.py":2070
 *                     if(jj <len(self.decompose_window[ii][0])):
 *                         self.omega_c[ij] = self.decompose_window[ii][0][jj]
 *                         self.ki_c[ij]  = self.decompose_window[ii][5][jj]             # <<<<<<<<<<<<<<
 *                         self.tanh_c[ij] = np.tanh(self.ki_c[ij]*self.depth)
 *                         self.ai_c[ij] = self.decompose_window[ii][1][jj]
 */
          if (unlikely(__pyx_v_self->decompose_window == Py_None)) {
            PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
            __PYX_ERR(0, 2070, __pyx_L1_error)
          }
          __pyx_t_4 = PyObject_GetItem(__pyx_v_self->decompose_window, __pyx_v_ii); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2070, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_4, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2070, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_4 = PyObject_GetItem(__pyx_t_5, __pyx_v_jj); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2070, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2070, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_16 = __Pyx_PyIndex_AsSsize_t(__pyx_v_ij); if (unlikely((__pyx_t_16 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 2070, __pyx_L1_error)
          (__pyx_v_self->ki_c[__pyx_t_16]) = __pyx_t_2;

          /* "WaveTools.py":2071
 *                         self.omega_c[ij] = self.decompose_window[ii][0][jj]
 *                         self.ki_c[ij]  = self.decompose_window[ii][5][jj]
 *                         self.tanh_c[ij] = np.tanh(self.ki_c[ij]*self.depth)             # <<<<<<<<<<<<<<
 *                         self.ai_c[ij] = self.decompose_window[ii][1][jj]
 *                         self.phi_c[ij] =self.decompose_window[ii][2][jj]
 */
          __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2071, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_tanh); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2071, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_16 = __Pyx_PyIndex_AsSsize_t(__pyx_v_ij); if (unlikely((__pyx_t_16 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 2071, __pyx_L1_error)
          __pyx_t_5 = PyFloat_FromDouble(((__pyx_v_self->ki_c[__pyx_t_16]) * __pyx_v_self->depth)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2071, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_14 = NULL;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
            __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_7);
            if (likely(__pyx_t_14)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
              __Pyx_INCREF(__pyx_t_14);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_7, function);
            }
          }
          if (!__pyx_t_14) {
            __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2071, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_GOTREF(__pyx_t_4);
          } else {
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(__pyx_t_7)) {
              PyObject *__pyx_temp[2] = {__pyx_t_14, __pyx_t_5};
              __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2071, __pyx_L1_error)
              __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
              __Pyx_GOTREF(__pyx_t_4);
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            } else
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
              PyObject *__pyx_temp[2] = {__pyx_t_14, __pyx_t_5};
              __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2071, __pyx_L1_error)
              __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
              __Pyx_GOTREF(__pyx_t_4);
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            } else
            #endif
            {
              __pyx_t_13 = PyTuple_New(1+1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2071, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_13);
              __Pyx_GIVEREF(__pyx_t_14); PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_14); __pyx_t_14 = NULL;
              __Pyx_GIVEREF(__pyx_t_5);
              PyTuple_SET_ITEM(__pyx_t_13, 0+1, __pyx_t_5);
              __pyx_t_5 = 0;
              __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_13, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2071, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_4);
              __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            }
          }
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2071, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_16 = __Pyx_PyIndex_AsSsize_t(__pyx_v_ij); if (unlikely((__pyx_t_16 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 2071, __pyx_L1_error)
          (__pyx_v_self->tanh_c[__pyx_t_16]) = __pyx_t_2;

          /* "WaveTools.py":2072
 *                         self.ki_c[ij]  = self.decompose_window[ii][5][jj]
 *                         self.tanh_c[ij] = np.tanh(self.ki_c[ij]*self.depth)
 *                         self.ai_c[ij] = self.decompose_window[ii][1][jj]             # <<<<<<<<<<<<<<
 *                         self.phi_c[ij] =self.decompose_window[ii][2][jj]
 *                         for kk in range(3):
 */
          if (unlikely(__pyx_v_self->decompose_window == Py_None)) {
            PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
            __PYX_ERR(0, 2072, __pyx_L1_error)
          }
          __pyx_t_4 = PyObject_GetItem(__pyx_v_self->decompose_window, __pyx_v_ii); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2072, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_7 = __Pyx_GetItemInt(__pyx_t_4, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2072, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_4 = PyObject_GetItem(__pyx_t_7, __pyx_v_jj); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2072, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2072, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_16 = __Pyx_PyIndex_AsSsize_t(__pyx_v_ij); if (unlikely((__pyx_t_16 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 2072, __pyx_L1_error)
          (__pyx_v_self->ai_c[__pyx_t_16]) = __pyx_t_2;

          /* "WaveTools.py":2073
 *                         self.tanh_c[ij] = np.tanh(self.ki_c[ij]*self.depth)
 *                         self.ai_c[ij] = self.decompose_window[ii][1][jj]
 *                         self.phi_c[ij] =self.decompose_window[ii][2][jj]             # <<<<<<<<<<<<<<
 *                         for kk in range(3):
 *                             self.kDir_c[3*ij+kk] = self.decompose_window[ii][4][jj,kk]
 */
          if (unlikely(__pyx_v_self->decompose_window == Py_None)) {
            PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
            __PYX_ERR(0, 2073, __pyx_L1_error)
          }
          __pyx_t_4 = PyObject_GetItem(__pyx_v_self->decompose_window, __pyx_v_ii); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2073, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_7 = __Pyx_GetItemInt(__pyx_t_4, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2073, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_4 = PyObject_GetItem(__pyx_t_7, __pyx_v_jj); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2073, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2073, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_16 = __Pyx_PyIndex_AsSsize_t(__pyx_v_ij); if (unlikely((__pyx_t_16 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 2073, __pyx_L1_error)
          (__pyx_v_self->phi_c[__pyx_t_16]) = __pyx_t_2;

          /* "WaveTools.py":2074
 *                         self.ai_c[ij] = self.decompose_window[ii][1][jj]
 *                         self.phi_c[ij] =self.decompose_window[ii][2][jj]
 *                         for kk in range(3):             # <<<<<<<<<<<<<<
 *                             self.kDir_c[3*ij+kk] = self.decompose_window[ii][4][jj,kk]
 *                     else:
 */
          __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_tuple__170, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2074, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
            __pyx_t_7 = __pyx_t_4; __Pyx_INCREF(__pyx_t_7); __pyx_t_16 = 0;
            __pyx_t_28 = NULL;
          } else {
            __pyx_t_16 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2074, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __pyx_t_28 = Py_TYPE(__pyx_t_7)->tp_iternext; if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 2074, __pyx_L1_error)
          }
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          for (;;) {
            if (likely(!__pyx_t_28)) {
              if (likely(PyList_CheckExact(__pyx_t_7))) {
                if (__pyx_t_16 >= PyList_GET_SIZE(__pyx_t_7)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_4 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_16); __Pyx_INCREF(__pyx_t_4); __pyx_t_16++; if (unlikely(0 < 0)) __PYX_ERR(0, 2074, __pyx_L1_error)
                #else
                __pyx_t_4 = PySequence_ITEM(__pyx_t_7, __pyx_t_16); __pyx_t_16++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2074, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_4);
                #endif
              } else {
                if (__pyx_t_16 >= PyTuple_GET_SIZE(__pyx_t_7)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_16); __Pyx_INCREF(__pyx_t_4); __pyx_t_16++; if (unlikely(0 < 0)) __PYX_ERR(0, 2074, __pyx_L1_error)
                #else
                __pyx_t_4 = PySequence_ITEM(__pyx_t_7, __pyx_t_16); __pyx_t_16++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2074, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_4);
                #endif
              }
            } else {
              __pyx_t_4 = __pyx_t_28(__pyx_t_7);
              if (unlikely(!__pyx_t_4)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else __PYX_ERR(0, 2074, __pyx_L1_error)
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_4);
            }
            __Pyx_XDECREF_SET(__pyx_v_kk, __pyx_t_4);
            __pyx_t_4 = 0;

            /* "WaveTools.py":2075
 *                         self.phi_c[ij] =self.decompose_window[ii][2][jj]
 *                         for kk in range(3):
 *                             self.kDir_c[3*ij+kk] = self.decompose_window[ii][4][jj,kk]             # <<<<<<<<<<<<<<
 *                     else:
 *                         self.omega_c[ij] =1.
 */
            if (unlikely(__pyx_v_self->decompose_window == Py_None)) {
              PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
              __PYX_ERR(0, 2075, __pyx_L1_error)
            }
            __pyx_t_4 = PyObject_GetItem(__pyx_v_self->decompose_window, __pyx_v_ii); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2075, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_13 = __Pyx_GetItemInt(__pyx_t_4, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2075, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_13);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2075, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_INCREF(__pyx_v_jj);
            __Pyx_GIVEREF(__pyx_v_jj);
            PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_jj);
            __Pyx_INCREF(__pyx_v_kk);
            __Pyx_GIVEREF(__pyx_v_kk);
            PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_kk);
            __pyx_t_5 = PyObject_GetItem(__pyx_t_13, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2075, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2075, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_5 = PyNumber_Multiply(__pyx_int_3, __pyx_v_ij); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2075, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_4 = PyNumber_Add(__pyx_t_5, __pyx_v_kk); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2075, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_29 = __Pyx_PyIndex_AsSsize_t(__pyx_t_4); if (unlikely((__pyx_t_29 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 2075, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            (__pyx_v_self->kDir_c[__pyx_t_29]) = __pyx_t_2;

            /* "WaveTools.py":2074
 *                         self.ai_c[ij] = self.decompose_window[ii][1][jj]
 *                         self.phi_c[ij] =self.decompose_window[ii][2][jj]
 *                         for kk in range(3):             # <<<<<<<<<<<<<<
 *                             self.kDir_c[3*ij+kk] = self.decompose_window[ii][4][jj,kk]
 *                     else:
 */
          }
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

          /* "WaveTools.py":2068
 *                 for jj in range(self.N):
 *                     ij = ii*self.N + jj
 *                     if(jj <len(self.decompose_window[ii][0])):             # <<<<<<<<<<<<<<
 *                         self.omega_c[ij] = self.decompose_window[ii][0][jj]
 *                         self.ki_c[ij]  = self.decompose_window[ii][5][jj]
 */
          goto __pyx_L90;
        }

        /* "WaveTools.py":2077
 *                             self.kDir_c[3*ij+kk] = self.decompose_window[ii][4][jj,kk]
 *                     else:
 *                         self.omega_c[ij] =1.             # <<<<<<<<<<<<<<
 *                         self.ki_c[ij]  = 1.
 *                         self.tanh_c[ij] = 1.
 */
        /*else*/ {
          __pyx_t_16 = __Pyx_PyIndex_AsSsize_t(__pyx_v_ij); if (unlikely((__pyx_t_16 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 2077, __pyx_L1_error)
          (__pyx_v_self->omega_c[__pyx_t_16]) = 1.;

          /* "WaveTools.py":2078
 *                     else:
 *                         self.omega_c[ij] =1.
 *                         self.ki_c[ij]  = 1.             # <<<<<<<<<<<<<<
 *                         self.tanh_c[ij] = 1.
 *                         self.ai_c[ij] = 0.
 */
          __pyx_t_16 = __Pyx_PyIndex_AsSsize_t(__pyx_v_ij); if (unlikely((__pyx_t_16 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 2078, __pyx_L1_error)
          (__pyx_v_self->ki_c[__pyx_t_16]) = 1.;

          /* "WaveTools.py":2079
 *                         self.omega_c[ij] =1.
 *                         self.ki_c[ij]  = 1.
 *                         self.tanh_c[ij] = 1.             # <<<<<<<<<<<<<<
 *                         self.ai_c[ij] = 0.
 *                         self.phi_c[ij] =0.
 */
          __pyx_t_16 = __Pyx_PyIndex_AsSsize_t(__pyx_v_ij); if (unlikely((__pyx_t_16 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 2079, __pyx_L1_error)
          (__pyx_v_self->tanh_c[__pyx_t_16]) = 1.;

          /* "WaveTools.py":2080
 *                         self.ki_c[ij]  = 1.
 *                         self.tanh_c[ij] = 1.
 *                         self.ai_c[ij] = 0.             # <<<<<<<<<<<<<<
 *                         self.phi_c[ij] =0.
 *                         for kk in range(3):
 */
          __pyx_t_16 = __Pyx_PyIndex_AsSsize_t(__pyx_v_ij); if (unlikely((__pyx_t_16 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 2080, __pyx_L1_error)
          (__pyx_v_self->ai_c[__pyx_t_16]) = 0.;

          /* "WaveTools.py":2081
 *                         self.tanh_c[ij] = 1.
 *                         self.ai_c[ij] = 0.
 *                         self.phi_c[ij] =0.             # <<<<<<<<<<<<<<
 *                         for kk in range(3):
 *                             self.kDir_c[3*ij+kk] = 1.
 */
          __pyx_t_16 = __Pyx_PyIndex_AsSsize_t(__pyx_v_ij); if (unlikely((__pyx_t_16 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 2081, __pyx_L1_error)
          (__pyx_v_self->phi_c[__pyx_t_16]) = 0.;

          /* "WaveTools.py":2082
 *                         self.ai_c[ij] = 0.
 *                         self.phi_c[ij] =0.
 *                         for kk in range(3):             # <<<<<<<<<<<<<<
 *                             self.kDir_c[3*ij+kk] = 1.
 * 
 */
          __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_tuple__171, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2082, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          if (likely(PyList_CheckExact(__pyx_t_7)) || PyTuple_CheckExact(__pyx_t_7)) {
            __pyx_t_4 = __pyx_t_7; __Pyx_INCREF(__pyx_t_4); __pyx_t_16 = 0;
            __pyx_t_28 = NULL;
          } else {
            __pyx_t_16 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2082, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_28 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 2082, __pyx_L1_error)
          }
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          for (;;) {
            if (likely(!__pyx_t_28)) {
              if (likely(PyList_CheckExact(__pyx_t_4))) {
                if (__pyx_t_16 >= PyList_GET_SIZE(__pyx_t_4)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_7 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_16); __Pyx_INCREF(__pyx_t_7); __pyx_t_16++; if (unlikely(0 < 0)) __PYX_ERR(0, 2082, __pyx_L1_error)
                #else
                __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_16); __pyx_t_16++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2082, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_7);
                #endif
              } else {
                if (__pyx_t_16 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_16); __Pyx_INCREF(__pyx_t_7); __pyx_t_16++; if (unlikely(0 < 0)) __PYX_ERR(0, 2082, __pyx_L1_error)
                #else
                __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_16); __pyx_t_16++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2082, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_7);
                #endif
              }
            } else {
              __pyx_t_7 = __pyx_t_28(__pyx_t_4);
              if (unlikely(!__pyx_t_7)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else __PYX_ERR(0, 2082, __pyx_L1_error)
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_7);
            }
            __Pyx_XDECREF_SET(__pyx_v_kk, __pyx_t_7);
            __pyx_t_7 = 0;

            /* "WaveTools.py":2083
 *                         self.phi_c[ij] =0.
 *                         for kk in range(3):
 *                             self.kDir_c[3*ij+kk] = 1.             # <<<<<<<<<<<<<<
 * 
 *             self.kDir_ = self.kDir_c
 */
            __pyx_t_7 = PyNumber_Multiply(__pyx_int_3, __pyx_v_ij); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2083, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __pyx_t_5 = PyNumber_Add(__pyx_t_7, __pyx_v_kk); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2083, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __pyx_t_29 = __Pyx_PyIndex_AsSsize_t(__pyx_t_5); if (unlikely((__pyx_t_29 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 2083, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            (__pyx_v_self->kDir_c[__pyx_t_29]) = 1.;

            /* "WaveTools.py":2082
 *                         self.ai_c[ij] = 0.
 *                         self.phi_c[ij] =0.
 *                         for kk in range(3):             # <<<<<<<<<<<<<<
 *                             self.kDir_c[3*ij+kk] = 1.
 * 
 */
          }
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        }
        __pyx_L90:;

        /* "WaveTools.py":2066
 *             self.T0_ = self.T0
 *             for ii in range(self.Nwindows):
 *                 for jj in range(self.N):             # <<<<<<<<<<<<<<
 *                     ij = ii*self.N + jj
 *                     if(jj <len(self.decompose_window[ii][0])):
 */
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "WaveTools.py":2065
 *             self.whand_ = self.whand_c
 *             self.T0_ = self.T0
 *             for ii in range(self.Nwindows):             # <<<<<<<<<<<<<<
 *                 for jj in range(self.N):
 *                     ij = ii*self.N + jj
 */
    }
    __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;

    /* "WaveTools.py":2085
 *                             self.kDir_c[3*ij+kk] = 1.
 * 
 *             self.kDir_ = self.kDir_c             # <<<<<<<<<<<<<<
 *             self.omega_ = self.omega_c
 *             self.ki_  =self.ki_c
 */
    __pyx_t_19 = __pyx_v_self->kDir_c;
    __pyx_v_self->kDir_ = __pyx_t_19;

    /* "WaveTools.py":2086
 * 
 *             self.kDir_ = self.kDir_c
 *             self.omega_ = self.omega_c             # <<<<<<<<<<<<<<
 *             self.ki_  =self.ki_c
 *             self.ai_ = self.ai_c
 */
    __pyx_t_19 = __pyx_v_self->omega_c;
    __pyx_v_self->omega_ = __pyx_t_19;

    /* "WaveTools.py":2087
 *             self.kDir_ = self.kDir_c
 *             self.omega_ = self.omega_c
 *             self.ki_  =self.ki_c             # <<<<<<<<<<<<<<
 *             self.ai_ = self.ai_c
 *             self.tanh_ = self.tanh_c
 */
    __pyx_t_19 = __pyx_v_self->ki_c;
    __pyx_v_self->ki_ = __pyx_t_19;

    /* "WaveTools.py":2088
 *             self.omega_ = self.omega_c
 *             self.ki_  =self.ki_c
 *             self.ai_ = self.ai_c             # <<<<<<<<<<<<<<
 *             self.tanh_ = self.tanh_c
 *             self.phi_ = self.phi_c
 */
    __pyx_t_19 = __pyx_v_self->ai_c;
    __pyx_v_self->ai_ = __pyx_t_19;

    /* "WaveTools.py":2089
 *             self.ki_  =self.ki_c
 *             self.ai_ = self.ai_c
 *             self.tanh_ = self.tanh_c             # <<<<<<<<<<<<<<
 *             self.phi_ = self.phi_c
 * 
 */
    __pyx_t_19 = __pyx_v_self->tanh_c;
    __pyx_v_self->tanh_ = __pyx_t_19;

    /* "WaveTools.py":2090
 *             self.ai_ = self.ai_c
 *             self.tanh_ = self.tanh_c
 *             self.phi_ = self.phi_c             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_19 = __pyx_v_self->phi_c;
    __pyx_v_self->phi_ = __pyx_t_19;

    /* "WaveTools.py":2093
 * 
 * 
 *             self.Nall = self.Nf*self.Nwindows             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_self->Nall = (__pyx_v_self->Nf * __pyx_v_self->Nwindows);
  }
  __pyx_L14:;

  /* "WaveTools.py":2097
 * 
 * 
 *         for ii in range(3):             # <<<<<<<<<<<<<<
 *             self.x0_c[ii] = self.x0[ii]
 *             self.waveDir_c[ii] = self.waveDir[ii]
 */
  __pyx_t_27 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_tuple__172, NULL); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 2097, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_27);
  if (likely(PyList_CheckExact(__pyx_t_27)) || PyTuple_CheckExact(__pyx_t_27)) {
    __pyx_t_6 = __pyx_t_27; __Pyx_INCREF(__pyx_t_6); __pyx_t_8 = 0;
    __pyx_t_11 = NULL;
  } else {
    __pyx_t_8 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_27); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2097, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_11 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2097, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
  for (;;) {
    if (likely(!__pyx_t_11)) {
      if (likely(PyList_CheckExact(__pyx_t_6))) {
        if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_27 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_8); __Pyx_INCREF(__pyx_t_27); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 2097, __pyx_L1_error)
        #else
        __pyx_t_27 = PySequence_ITEM(__pyx_t_6, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 2097, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_27);
        #endif
      } else {
        if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_27 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_8); __Pyx_INCREF(__pyx_t_27); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 2097, __pyx_L1_error)
        #else
        __pyx_t_27 = PySequence_ITEM(__pyx_t_6, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 2097, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_27);
        #endif
      }
    } else {
      __pyx_t_27 = __pyx_t_11(__pyx_t_6);
      if (unlikely(!__pyx_t_27)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 2097, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_27);
    }
    __Pyx_XDECREF_SET(__pyx_v_ii, __pyx_t_27);
    __pyx_t_27 = 0;

    /* "WaveTools.py":2098
 * 
 *         for ii in range(3):
 *             self.x0_c[ii] = self.x0[ii]             # <<<<<<<<<<<<<<
 *             self.waveDir_c[ii] = self.waveDir[ii]
 *             self.vDir_c[ii] = self.vDir[ii]
 */
    __pyx_t_27 = PyObject_GetItem(((PyObject *)__pyx_v_self->x0), __pyx_v_ii); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 2098, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_27);
    __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_27); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2098, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
    __pyx_t_18 = __Pyx_PyIndex_AsSsize_t(__pyx_v_ii); if (unlikely((__pyx_t_18 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 2098, __pyx_L1_error)
    (__pyx_v_self->x0_c[__pyx_t_18]) = __pyx_t_2;

    /* "WaveTools.py":2099
 *         for ii in range(3):
 *             self.x0_c[ii] = self.x0[ii]
 *             self.waveDir_c[ii] = self.waveDir[ii]             # <<<<<<<<<<<<<<
 *             self.vDir_c[ii] = self.vDir[ii]
 *         self.x0_ = self.x0_c
 */
    __pyx_t_27 = PyObject_GetItem(((PyObject *)__pyx_v_self->waveDir), __pyx_v_ii); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 2099, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_27);
    __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_27); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2099, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
    __pyx_t_18 = __Pyx_PyIndex_AsSsize_t(__pyx_v_ii); if (unlikely((__pyx_t_18 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 2099, __pyx_L1_error)
    (__pyx_v_self->waveDir_c[__pyx_t_18]) = __pyx_t_2;

    /* "WaveTools.py":2100
 *             self.x0_c[ii] = self.x0[ii]
 *             self.waveDir_c[ii] = self.waveDir[ii]
 *             self.vDir_c[ii] = self.vDir[ii]             # <<<<<<<<<<<<<<
 *         self.x0_ = self.x0_c
 *         self.waveDir_ = self.waveDir_c
 */
    __pyx_t_27 = PyObject_GetItem(((PyObject *)__pyx_v_self->vDir), __pyx_v_ii); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 2100, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_27);
    __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_27); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2100, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
    __pyx_t_18 = __Pyx_PyIndex_AsSsize_t(__pyx_v_ii); if (unlikely((__pyx_t_18 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 2100, __pyx_L1_error)
    (__pyx_v_self->vDir_c[__pyx_t_18]) = __pyx_t_2;

    /* "WaveTools.py":2097
 * 
 * 
 *         for ii in range(3):             # <<<<<<<<<<<<<<
 *             self.x0_c[ii] = self.x0[ii]
 *             self.waveDir_c[ii] = self.waveDir[ii]
 */
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "WaveTools.py":2101
 *             self.waveDir_c[ii] = self.waveDir[ii]
 *             self.vDir_c[ii] = self.vDir[ii]
 *         self.x0_ = self.x0_c             # <<<<<<<<<<<<<<
 *         self.waveDir_ = self.waveDir_c
 *         self.vDir_ = self.vDir_c
 */
  __pyx_t_19 = __pyx_v_self->x0_c;
  memcpy(&(__pyx_v_self->x0_[0]), __pyx_t_19, sizeof(__pyx_v_self->x0_[0]) * (3 - 0));

  /* "WaveTools.py":2102
 *             self.vDir_c[ii] = self.vDir[ii]
 *         self.x0_ = self.x0_c
 *         self.waveDir_ = self.waveDir_c             # <<<<<<<<<<<<<<
 *         self.vDir_ = self.vDir_c
 *         if(self.rec_direct):
 */
  __pyx_t_19 = __pyx_v_self->waveDir_c;
  __pyx_v_self->waveDir_ = __pyx_t_19;

  /* "WaveTools.py":2103
 *         self.x0_ = self.x0_c
 *         self.waveDir_ = self.waveDir_c
 *         self.vDir_ = self.vDir_c             # <<<<<<<<<<<<<<
 *         if(self.rec_direct):
 *             self.eta = self.etaDirect
 */
  __pyx_t_19 = __pyx_v_self->vDir_c;
  __pyx_v_self->vDir_ = __pyx_t_19;

  /* "WaveTools.py":2104
 *         self.waveDir_ = self.waveDir_c
 *         self.vDir_ = self.vDir_c
 *         if(self.rec_direct):             # <<<<<<<<<<<<<<
 *             self.eta = self.etaDirect
 *             self.u = self.uDirect
 */
  __pyx_t_10 = (__pyx_v_self->rec_direct != 0);
  if (__pyx_t_10) {

    /* "WaveTools.py":2105
 *         self.vDir_ = self.vDir_c
 *         if(self.rec_direct):
 *             self.eta = self.etaDirect             # <<<<<<<<<<<<<<
 *             self.u = self.uDirect
 *             self._cpp_eta = self._cpp_etaDirect
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_etaDirect); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2105, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __Pyx_GOTREF(__pyx_v_self->eta);
    __Pyx_DECREF(__pyx_v_self->eta);
    __pyx_v_self->eta = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "WaveTools.py":2106
 *         if(self.rec_direct):
 *             self.eta = self.etaDirect
 *             self.u = self.uDirect             # <<<<<<<<<<<<<<
 *             self._cpp_eta = self._cpp_etaDirect
 *             self._cpp_u = self._cpp_uDirect
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_uDirect); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2106, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __Pyx_GOTREF(__pyx_v_self->u);
    __Pyx_DECREF(__pyx_v_self->u);
    __pyx_v_self->u = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "WaveTools.py":2107
 *             self.eta = self.etaDirect
 *             self.u = self.uDirect
 *             self._cpp_eta = self._cpp_etaDirect             # <<<<<<<<<<<<<<
 *             self._cpp_u = self._cpp_uDirect
 *         else:
 */
    __pyx_t_30 = ((struct __pyx_vtabstruct_9WaveTools_TimeSeries *)__pyx_v_self->__pyx_vtab)->_cpp_etaDirect;
    __pyx_v_self->_cpp_eta = __pyx_t_30;

    /* "WaveTools.py":2108
 *             self.u = self.uDirect
 *             self._cpp_eta = self._cpp_etaDirect
 *             self._cpp_u = self._cpp_uDirect             # <<<<<<<<<<<<<<
 *         else:
 *             self.eta =  self.etaWindow
 */
    __pyx_t_31 = ((struct __pyx_vtabstruct_9WaveTools_TimeSeries *)__pyx_v_self->__pyx_vtab)->_cpp_uDirect;
    __pyx_v_self->_cpp_u = __pyx_t_31;

    /* "WaveTools.py":2104
 *         self.waveDir_ = self.waveDir_c
 *         self.vDir_ = self.vDir_c
 *         if(self.rec_direct):             # <<<<<<<<<<<<<<
 *             self.eta = self.etaDirect
 *             self.u = self.uDirect
 */
    goto __pyx_L97;
  }

  /* "WaveTools.py":2110
 *             self._cpp_u = self._cpp_uDirect
 *         else:
 *             self.eta =  self.etaWindow             # <<<<<<<<<<<<<<
 *             self.u = self.uWindow
 *             self._cpp_eta = self._cpp_etaWindow
 */
  /*else*/ {
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_etaWindow); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2110, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __Pyx_GOTREF(__pyx_v_self->eta);
    __Pyx_DECREF(__pyx_v_self->eta);
    __pyx_v_self->eta = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "WaveTools.py":2111
 *         else:
 *             self.eta =  self.etaWindow
 *             self.u = self.uWindow             # <<<<<<<<<<<<<<
 *             self._cpp_eta = self._cpp_etaWindow
 *             self._cpp_u = self._cpp_uWindow
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_uWindow); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2111, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __Pyx_GOTREF(__pyx_v_self->u);
    __Pyx_DECREF(__pyx_v_self->u);
    __pyx_v_self->u = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "WaveTools.py":2112
 *             self.eta =  self.etaWindow
 *             self.u = self.uWindow
 *             self._cpp_eta = self._cpp_etaWindow             # <<<<<<<<<<<<<<
 *             self._cpp_u = self._cpp_uWindow
 * 
 */
    __pyx_t_32 = ((struct __pyx_vtabstruct_9WaveTools_TimeSeries *)__pyx_v_self->__pyx_vtab)->_cpp_etaWindow;
    __pyx_v_self->_cpp_eta = __pyx_t_32;

    /* "WaveTools.py":2113
 *             self.u = self.uWindow
 *             self._cpp_eta = self._cpp_etaWindow
 *             self._cpp_u = self._cpp_uWindow             # <<<<<<<<<<<<<<
 * 
 *     def windOut(self):
 */
    __pyx_t_33 = ((struct __pyx_vtabstruct_9WaveTools_TimeSeries *)__pyx_v_self->__pyx_vtab)->_cpp_uWindow;
    __pyx_v_self->_cpp_u = __pyx_t_33;
  }
  __pyx_L97:;

  /* "WaveTools.py":1790
 * 
 *     """
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *                  timeSeriesFile, # e.g.= "Timeseries.txt",
 *                  skiprows,
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_26);
  __Pyx_XDECREF(__pyx_t_27);
  __Pyx_AddTraceback("WaveTools.TimeSeries.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_Nwaves);
  __Pyx_XDECREF(__pyx_v_tdata);
  __Pyx_XDECREF(__pyx_v_filetype);
  __Pyx_XDECREF(__pyx_v_fid);
  __Pyx_XDECREF(__pyx_v_time_temp);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_dt_temp);
  __Pyx_XDECREF(__pyx_v_Nf);
  __Pyx_XDECREF(__pyx_v_decomp);
  __Pyx_XDECREF(__pyx_v_ipeak);
  __Pyx_XDECREF(__pyx_v_imax);
  __Pyx_XDECREF(__pyx_v_imin);
  __Pyx_XDECREF(__pyx_v_ii);
  __Pyx_XDECREF(__pyx_v_ij);
  __Pyx_XDECREF(__pyx_v_kk);
  __Pyx_XDECREF(__pyx_v_windowName);
  __Pyx_XDECREF(__pyx_v_validWindows);
  __Pyx_XDECREF(__pyx_v_wind_filt);
  __Pyx_XDECREF(__pyx_v_jj);
  __Pyx_XDECREF(__pyx_v_span);
  __Pyx_XDECREF(__pyx_v_tfirst);
  __Pyx_XDECREF(__pyx_v_tlast);
  __Pyx_XDECREF(__pyx_v_ispan1);
  __Pyx_XDECREF(__pyx_v_ispan2);
  __Pyx_XDECREF(__pyx_v_tstart);
  __Pyx_XDECREF(__pyx_v_wind);
  __Pyx_XDECREF(__pyx_v_Nftemp);
  __Pyx_XDECREF(__pyx_v_ki);
  __Pyx_XDECREF(__pyx_v_kDir);
  __Pyx_XDECREF(__pyx_v_Tlag);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":2115
 *             self._cpp_u = self._cpp_uWindow
 * 
 *     def windOut(self):             # <<<<<<<<<<<<<<
 *         return {"TWindow":self.Twindow,"TOverlap":self.Toverlap,"Tlag":self.Tlag, "rec_direct":self.rec_direct}
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_10TimeSeries_3windOut(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_9WaveTools_10TimeSeries_3windOut = {"windOut", (PyCFunction)__pyx_pw_9WaveTools_10TimeSeries_3windOut, METH_NOARGS, 0};
static PyObject *__pyx_pw_9WaveTools_10TimeSeries_3windOut(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("windOut (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_10TimeSeries_2windOut(((struct __pyx_obj_9WaveTools_TimeSeries *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_10TimeSeries_2windOut(struct __pyx_obj_9WaveTools_TimeSeries *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("windOut", 0);

  /* "WaveTools.py":2116
 * 
 *     def windOut(self):
 *         return {"TWindow":self.Twindow,"TOverlap":self.Toverlap,"Tlag":self.Tlag, "rec_direct":self.rec_direct}             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->Twindow); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_TWindow, __pyx_t_2) < 0) __PYX_ERR(0, 2116, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->Toverlap); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_TOverlap, __pyx_t_2) < 0) __PYX_ERR(0, 2116, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->Tlag); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_Tlag, __pyx_t_2) < 0) __PYX_ERR(0, 2116, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->rec_direct); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_rec_direct, __pyx_t_2) < 0) __PYX_ERR(0, 2116, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "WaveTools.py":2115
 *             self._cpp_u = self._cpp_uWindow
 * 
 *     def windOut(self):             # <<<<<<<<<<<<<<
 *         return {"TWindow":self.Twindow,"TOverlap":self.Toverlap,"Tlag":self.Tlag, "rec_direct":self.rec_direct}
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("WaveTools.TimeSeries.windOut", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":2119
 * 
 * 
 *     def _cpp_etaDirect(self,x,t):             # <<<<<<<<<<<<<<
 *         return __cpp_etaDirect(x,self.x0_,t,self.kDir_,self.omega_,self.phi_,self.ai_,self.Nf, self.fast)
 *     def _cpp_uDirect(self,U,x,t):
 */

static double __pyx_f_9WaveTools_10TimeSeries__cpp_etaDirect(struct __pyx_obj_9WaveTools_TimeSeries *__pyx_v_self, double *__pyx_v_x, double __pyx_v_t) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_cpp_etaDirect", 0);

  /* "WaveTools.py":2120
 * 
 *     def _cpp_etaDirect(self,x,t):
 *         return __cpp_etaDirect(x,self.x0_,t,self.kDir_,self.omega_,self.phi_,self.ai_,self.Nf, self.fast)             # <<<<<<<<<<<<<<
 *     def _cpp_uDirect(self,U,x,t):
 *         __cpp_uDirect(U,x,self.x0_,t,self.kDir_,self.ki_,self.omega_,self.phi_,self.ai_,self.mwl,self.depth,self.Nf,self.waveDir_, self.vDir_, self.tanh_, self.gAbs, self.fast)
 */
  __pyx_r = proteus::__cpp_etaDirect(__pyx_v_x, __pyx_v_self->x0_, __pyx_v_t, __pyx_v_self->kDir_, __pyx_v_self->omega_, __pyx_v_self->phi_, __pyx_v_self->ai_, __pyx_v_self->Nf, __pyx_v_self->fast);
  goto __pyx_L0;

  /* "WaveTools.py":2119
 * 
 * 
 *     def _cpp_etaDirect(self,x,t):             # <<<<<<<<<<<<<<
 *         return __cpp_etaDirect(x,self.x0_,t,self.kDir_,self.omega_,self.phi_,self.ai_,self.Nf, self.fast)
 *     def _cpp_uDirect(self,U,x,t):
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":2121
 *     def _cpp_etaDirect(self,x,t):
 *         return __cpp_etaDirect(x,self.x0_,t,self.kDir_,self.omega_,self.phi_,self.ai_,self.Nf, self.fast)
 *     def _cpp_uDirect(self,U,x,t):             # <<<<<<<<<<<<<<
 *         __cpp_uDirect(U,x,self.x0_,t,self.kDir_,self.ki_,self.omega_,self.phi_,self.ai_,self.mwl,self.depth,self.Nf,self.waveDir_, self.vDir_, self.tanh_, self.gAbs, self.fast)
 * 
 */

static void __pyx_f_9WaveTools_10TimeSeries__cpp_uDirect(struct __pyx_obj_9WaveTools_TimeSeries *__pyx_v_self, double *__pyx_v_U, double *__pyx_v_x, double __pyx_v_t) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_cpp_uDirect", 0);

  /* "WaveTools.py":2122
 *         return __cpp_etaDirect(x,self.x0_,t,self.kDir_,self.omega_,self.phi_,self.ai_,self.Nf, self.fast)
 *     def _cpp_uDirect(self,U,x,t):
 *         __cpp_uDirect(U,x,self.x0_,t,self.kDir_,self.ki_,self.omega_,self.phi_,self.ai_,self.mwl,self.depth,self.Nf,self.waveDir_, self.vDir_, self.tanh_, self.gAbs, self.fast)             # <<<<<<<<<<<<<<
 * 
 *     def etaDirect(self, x, t):
 */
  proteus::__cpp_uDirect(__pyx_v_U, __pyx_v_x, __pyx_v_self->x0_, __pyx_v_t, __pyx_v_self->kDir_, __pyx_v_self->ki_, __pyx_v_self->omega_, __pyx_v_self->phi_, __pyx_v_self->ai_, __pyx_v_self->mwl, __pyx_v_self->depth, __pyx_v_self->Nf, __pyx_v_self->waveDir_, __pyx_v_self->vDir_, __pyx_v_self->tanh_, __pyx_v_self->gAbs, __pyx_v_self->fast);

  /* "WaveTools.py":2121
 *     def _cpp_etaDirect(self,x,t):
 *         return __cpp_etaDirect(x,self.x0_,t,self.kDir_,self.omega_,self.phi_,self.ai_,self.Nf, self.fast)
 *     def _cpp_uDirect(self,U,x,t):             # <<<<<<<<<<<<<<
 *         __cpp_uDirect(U,x,self.x0_,t,self.kDir_,self.ki_,self.omega_,self.phi_,self.ai_,self.mwl,self.depth,self.Nf,self.waveDir_, self.vDir_, self.tanh_, self.gAbs, self.fast)
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "WaveTools.py":2124
 *         __cpp_uDirect(U,x,self.x0_,t,self.kDir_,self.ki_,self.omega_,self.phi_,self.ai_,self.mwl,self.depth,self.Nf,self.waveDir_, self.vDir_, self.tanh_, self.gAbs, self.fast)
 * 
 *     def etaDirect(self, x, t):             # <<<<<<<<<<<<<<
 * 
 *         """Calculates free surface elevation(Timeseries class-direct method
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_10TimeSeries_5etaDirect(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9WaveTools_10TimeSeries_4etaDirect[] = "Calculates free surface elevation(Timeseries class-direct method\n        Parameters\n        ----------\n        x : numpy.ndarray\n            Position vector\n        t : float\n            Time variable\n\n        Returns\n        --------\n        float\n            Free-surface elevation as a float\n\n        ";
static PyMethodDef __pyx_mdef_9WaveTools_10TimeSeries_5etaDirect = {"etaDirect", (PyCFunction)__pyx_pw_9WaveTools_10TimeSeries_5etaDirect, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_10TimeSeries_4etaDirect};
static PyObject *__pyx_pw_9WaveTools_10TimeSeries_5etaDirect(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_t = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("etaDirect (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_t,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("etaDirect", 1, 2, 2, 1); __PYX_ERR(0, 2124, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "etaDirect") < 0)) __PYX_ERR(0, 2124, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = values[0];
    __pyx_v_t = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("etaDirect", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2124, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("WaveTools.TimeSeries.etaDirect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9WaveTools_10TimeSeries_4etaDirect(((struct __pyx_obj_9WaveTools_TimeSeries *)__pyx_v_self), __pyx_v_x, __pyx_v_t);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_10TimeSeries_4etaDirect(struct __pyx_obj_9WaveTools_TimeSeries *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_t) {
  double __pyx_v_xx[3];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  __Pyx_RefNannySetupContext("etaDirect", 0);

  /* "WaveTools.py":2141
 *         """
 *         cython.declare(xx=cython.double[3])
 *         xx[0] = x[0]             # <<<<<<<<<<<<<<
 *         xx[1] = x[1]
 *         xx[2] = x[2]
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_x, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2141, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  (__pyx_v_xx[0]) = __pyx_t_2;

  /* "WaveTools.py":2142
 *         cython.declare(xx=cython.double[3])
 *         xx[0] = x[0]
 *         xx[1] = x[1]             # <<<<<<<<<<<<<<
 *         xx[2] = x[2]
 *         return self._cpp_etaDirect(xx,t)
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_x, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2142, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  (__pyx_v_xx[1]) = __pyx_t_2;

  /* "WaveTools.py":2143
 *         xx[0] = x[0]
 *         xx[1] = x[1]
 *         xx[2] = x[2]             # <<<<<<<<<<<<<<
 *         return self._cpp_etaDirect(xx,t)
 * 
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_x, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2143, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  (__pyx_v_xx[2]) = __pyx_t_2;

  /* "WaveTools.py":2144
 *         xx[1] = x[1]
 *         xx[2] = x[2]
 *         return self._cpp_etaDirect(xx,t)             # <<<<<<<<<<<<<<
 * 
 *     def uDirect(self, x, t):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_t); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2144, __pyx_L1_error)
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_vtabstruct_9WaveTools_TimeSeries *)__pyx_v_self->__pyx_vtab)->_cpp_etaDirect(__pyx_v_self, __pyx_v_xx, __pyx_t_2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "WaveTools.py":2124
 *         __cpp_uDirect(U,x,self.x0_,t,self.kDir_,self.ki_,self.omega_,self.phi_,self.ai_,self.mwl,self.depth,self.Nf,self.waveDir_, self.vDir_, self.tanh_, self.gAbs, self.fast)
 * 
 *     def etaDirect(self, x, t):             # <<<<<<<<<<<<<<
 * 
 *         """Calculates free surface elevation(Timeseries class-direct method
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("WaveTools.TimeSeries.etaDirect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":2146
 *         return self._cpp_etaDirect(xx,t)
 * 
 *     def uDirect(self, x, t):             # <<<<<<<<<<<<<<
 *         """Calculates wave velocity vector (Timeseries class-direct method)
 *         Parameters
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_10TimeSeries_7uDirect(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9WaveTools_10TimeSeries_6uDirect[] = "Calculates wave velocity vector (Timeseries class-direct method)\n        Parameters\n        ----------\n        x : numpy.ndarray\n            Position vector\n        t : float\n            Time variable\n\n        Returns\n        --------\n        numpy.ndarray\n            Velocity vector as 1D array\n\n        ";
static PyMethodDef __pyx_mdef_9WaveTools_10TimeSeries_7uDirect = {"uDirect", (PyCFunction)__pyx_pw_9WaveTools_10TimeSeries_7uDirect, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_10TimeSeries_6uDirect};
static PyObject *__pyx_pw_9WaveTools_10TimeSeries_7uDirect(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_t = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("uDirect (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_t,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("uDirect", 1, 2, 2, 1); __PYX_ERR(0, 2146, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "uDirect") < 0)) __PYX_ERR(0, 2146, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = values[0];
    __pyx_v_t = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("uDirect", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2146, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("WaveTools.TimeSeries.uDirect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9WaveTools_10TimeSeries_6uDirect(((struct __pyx_obj_9WaveTools_TimeSeries *)__pyx_v_self), __pyx_v_x, __pyx_v_t);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_10TimeSeries_6uDirect(struct __pyx_obj_9WaveTools_TimeSeries *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_t) {
  double __pyx_v_xx[3];
  double __pyx_v_cppU[3];
  long __pyx_v_ii;
  PyObject *__pyx_v_U = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  long __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  double __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("uDirect", 0);

  /* "WaveTools.py":2164
 *         cython.declare(xx=cython.double[3])
 *         cython.declare(cppU=cython.double[3])
 *         for ii in range(3):             # <<<<<<<<<<<<<<
 *             xx[ii] = x[ii]
 *             cppU[ii] = 0.
 */
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {
    __pyx_v_ii = __pyx_t_1;

    /* "WaveTools.py":2165
 *         cython.declare(cppU=cython.double[3])
 *         for ii in range(3):
 *             xx[ii] = x[ii]             # <<<<<<<<<<<<<<
 *             cppU[ii] = 0.
 *         U = np.zeros(3,)
 */
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_x, __pyx_v_ii, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2165, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2165, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    (__pyx_v_xx[__pyx_v_ii]) = __pyx_t_3;

    /* "WaveTools.py":2166
 *         for ii in range(3):
 *             xx[ii] = x[ii]
 *             cppU[ii] = 0.             # <<<<<<<<<<<<<<
 *         U = np.zeros(3,)
 *         self._cpp_uDirect(cppU,xx,t)
 */
    (__pyx_v_cppU[__pyx_v_ii]) = 0.;
  }

  /* "WaveTools.py":2167
 *             xx[ii] = x[ii]
 *             cppU[ii] = 0.
 *         U = np.zeros(3,)             # <<<<<<<<<<<<<<
 *         self._cpp_uDirect(cppU,xx,t)
 *         U[0] = cppU[0]
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__173, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_U = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "WaveTools.py":2168
 *             cppU[ii] = 0.
 *         U = np.zeros(3,)
 *         self._cpp_uDirect(cppU,xx,t)             # <<<<<<<<<<<<<<
 *         U[0] = cppU[0]
 *         U[1] = cppU[1]
 */
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_t); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2168, __pyx_L1_error)
  ((struct __pyx_vtabstruct_9WaveTools_TimeSeries *)__pyx_v_self->__pyx_vtab)->_cpp_uDirect(__pyx_v_self, __pyx_v_cppU, __pyx_v_xx, __pyx_t_3);

  /* "WaveTools.py":2169
 *         U = np.zeros(3,)
 *         self._cpp_uDirect(cppU,xx,t)
 *         U[0] = cppU[0]             # <<<<<<<<<<<<<<
 *         U[1] = cppU[1]
 *         U[2] = cppU[2]
 */
  __pyx_t_2 = PyFloat_FromDouble((__pyx_v_cppU[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__Pyx_SetItemInt(__pyx_v_U, 0, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1) < 0)) __PYX_ERR(0, 2169, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "WaveTools.py":2170
 *         self._cpp_uDirect(cppU,xx,t)
 *         U[0] = cppU[0]
 *         U[1] = cppU[1]             # <<<<<<<<<<<<<<
 *         U[2] = cppU[2]
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble((__pyx_v_cppU[1])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__Pyx_SetItemInt(__pyx_v_U, 1, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1) < 0)) __PYX_ERR(0, 2170, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "WaveTools.py":2171
 *         U[0] = cppU[0]
 *         U[1] = cppU[1]
 *         U[2] = cppU[2]             # <<<<<<<<<<<<<<
 * 
 *         return U
 */
  __pyx_t_2 = PyFloat_FromDouble((__pyx_v_cppU[2])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__Pyx_SetItemInt(__pyx_v_U, 2, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1) < 0)) __PYX_ERR(0, 2171, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "WaveTools.py":2173
 *         U[2] = cppU[2]
 * 
 *         return U             # <<<<<<<<<<<<<<
 * 
 *     def findWindow(self,t):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_U);
  __pyx_r = __pyx_v_U;
  goto __pyx_L0;

  /* "WaveTools.py":2146
 *         return self._cpp_etaDirect(xx,t)
 * 
 *     def uDirect(self, x, t):             # <<<<<<<<<<<<<<
 *         """Calculates wave velocity vector (Timeseries class-direct method)
 *         Parameters
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("WaveTools.TimeSeries.uDirect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_U);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":2175
 *         return U
 * 
 *     def findWindow(self,t):             # <<<<<<<<<<<<<<
 *         """Returns the current spectral window in TimeSeries class."
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_10TimeSeries_9findWindow(PyObject *__pyx_v_self, PyObject *__pyx_v_t); /*proto*/
static char __pyx_doc_9WaveTools_10TimeSeries_8findWindow[] = "Returns the current spectral window in TimeSeries class.\"\n\n        Parameters\n        ----------\n\n        t : float\n                Time variable\n\n        Returns\n        -------\n        int\n            Index of window as an integer\n\n        ";
static PyMethodDef __pyx_mdef_9WaveTools_10TimeSeries_9findWindow = {"findWindow", (PyCFunction)__pyx_pw_9WaveTools_10TimeSeries_9findWindow, METH_O, __pyx_doc_9WaveTools_10TimeSeries_8findWindow};
static PyObject *__pyx_pw_9WaveTools_10TimeSeries_9findWindow(PyObject *__pyx_v_self, PyObject *__pyx_v_t) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("findWindow (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_10TimeSeries_8findWindow(((struct __pyx_obj_9WaveTools_TimeSeries *)__pyx_v_self), ((PyObject *)__pyx_v_t));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_10TimeSeries_8findWindow(struct __pyx_obj_9WaveTools_TimeSeries *__pyx_v_self, PyObject *__pyx_v_t) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("findWindow", 0);

  /* "WaveTools.py":2190
 * 
 *         """
 *         return __cpp_findWindow(t,self.handover, self.t0,self.Twindow,self.Nwindows, self.whand_) #Nw             # <<<<<<<<<<<<<<
 * 
 *     def _cpp_etaWindow(self,x,t):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_t); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2190, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_From_int(proteus::__cpp_findWindow(__pyx_t_1, __pyx_v_self->handover, __pyx_v_self->t0, __pyx_v_self->Twindow, __pyx_v_self->Nwindows, __pyx_v_self->whand_)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "WaveTools.py":2175
 *         return U
 * 
 *     def findWindow(self,t):             # <<<<<<<<<<<<<<
 *         """Returns the current spectral window in TimeSeries class."
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("WaveTools.TimeSeries.findWindow", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":2192
 *         return __cpp_findWindow(t,self.handover, self.t0,self.Twindow,self.Nwindows, self.whand_) #Nw
 * 
 *     def _cpp_etaWindow(self,x,t):             # <<<<<<<<<<<<<<
 *         Nw = __cpp_findWindow(t,self.handover, self.t0,self.Twindow,self.Nwindows, self.whand_) #Nw
 * 
 */

static double __pyx_f_9WaveTools_10TimeSeries__cpp_etaWindow(struct __pyx_obj_9WaveTools_TimeSeries *__pyx_v_self, double *__pyx_v_x, double __pyx_v_t) {
  int __pyx_v_Nw;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_cpp_etaWindow", 0);

  /* "WaveTools.py":2193
 * 
 *     def _cpp_etaWindow(self,x,t):
 *         Nw = __cpp_findWindow(t,self.handover, self.t0,self.Twindow,self.Nwindows, self.whand_) #Nw             # <<<<<<<<<<<<<<
 * 
 *         return __cpp_etaWindow(x,self.x0_,t,self.T0_,self.kDir_,self.omega_,self.phi_,self.ai_,self.Nf,Nw, self.fast)
 */
  __pyx_v_Nw = proteus::__cpp_findWindow(__pyx_v_t, __pyx_v_self->handover, __pyx_v_self->t0, __pyx_v_self->Twindow, __pyx_v_self->Nwindows, __pyx_v_self->whand_);

  /* "WaveTools.py":2195
 *         Nw = __cpp_findWindow(t,self.handover, self.t0,self.Twindow,self.Nwindows, self.whand_) #Nw
 * 
 *         return __cpp_etaWindow(x,self.x0_,t,self.T0_,self.kDir_,self.omega_,self.phi_,self.ai_,self.Nf,Nw, self.fast)             # <<<<<<<<<<<<<<
 *     def _cpp_uWindow(self,U, x,t):
 *         Nw = __cpp_findWindow(t,self.handover, self.t0,self.Twindow,self.Nwindows, self.whand_) #Nw
 */
  __pyx_r = proteus::__cpp_etaWindow(__pyx_v_x, __pyx_v_self->x0_, __pyx_v_t, __pyx_v_self->T0_, __pyx_v_self->kDir_, __pyx_v_self->omega_, __pyx_v_self->phi_, __pyx_v_self->ai_, __pyx_v_self->Nf, __pyx_v_Nw, __pyx_v_self->fast);
  goto __pyx_L0;

  /* "WaveTools.py":2192
 *         return __cpp_findWindow(t,self.handover, self.t0,self.Twindow,self.Nwindows, self.whand_) #Nw
 * 
 *     def _cpp_etaWindow(self,x,t):             # <<<<<<<<<<<<<<
 *         Nw = __cpp_findWindow(t,self.handover, self.t0,self.Twindow,self.Nwindows, self.whand_) #Nw
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":2196
 * 
 *         return __cpp_etaWindow(x,self.x0_,t,self.T0_,self.kDir_,self.omega_,self.phi_,self.ai_,self.Nf,Nw, self.fast)
 *     def _cpp_uWindow(self,U, x,t):             # <<<<<<<<<<<<<<
 *         Nw = __cpp_findWindow(t,self.handover, self.t0,self.Twindow,self.Nwindows, self.whand_) #Nw
 *         __cpp_uWindow(U,x,self.x0_,t,self.T0_,self.kDir_,self.ki_,self.omega_,self.phi_,self.ai_,self.mwl,self.depth,self.Nf,Nw,self.waveDir_, self.vDir_, self.tanh_, self.gAbs, self.fast)
 */

static void __pyx_f_9WaveTools_10TimeSeries__cpp_uWindow(struct __pyx_obj_9WaveTools_TimeSeries *__pyx_v_self, double *__pyx_v_U, double *__pyx_v_x, double __pyx_v_t) {
  int __pyx_v_Nw;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_cpp_uWindow", 0);

  /* "WaveTools.py":2197
 *         return __cpp_etaWindow(x,self.x0_,t,self.T0_,self.kDir_,self.omega_,self.phi_,self.ai_,self.Nf,Nw, self.fast)
 *     def _cpp_uWindow(self,U, x,t):
 *         Nw = __cpp_findWindow(t,self.handover, self.t0,self.Twindow,self.Nwindows, self.whand_) #Nw             # <<<<<<<<<<<<<<
 *         __cpp_uWindow(U,x,self.x0_,t,self.T0_,self.kDir_,self.ki_,self.omega_,self.phi_,self.ai_,self.mwl,self.depth,self.Nf,Nw,self.waveDir_, self.vDir_, self.tanh_, self.gAbs, self.fast)
 * 
 */
  __pyx_v_Nw = proteus::__cpp_findWindow(__pyx_v_t, __pyx_v_self->handover, __pyx_v_self->t0, __pyx_v_self->Twindow, __pyx_v_self->Nwindows, __pyx_v_self->whand_);

  /* "WaveTools.py":2198
 *     def _cpp_uWindow(self,U, x,t):
 *         Nw = __cpp_findWindow(t,self.handover, self.t0,self.Twindow,self.Nwindows, self.whand_) #Nw
 *         __cpp_uWindow(U,x,self.x0_,t,self.T0_,self.kDir_,self.ki_,self.omega_,self.phi_,self.ai_,self.mwl,self.depth,self.Nf,Nw,self.waveDir_, self.vDir_, self.tanh_, self.gAbs, self.fast)             # <<<<<<<<<<<<<<
 * 
 *     def etaWindow(self, x, t):
 */
  proteus::__cpp_uWindow(__pyx_v_U, __pyx_v_x, __pyx_v_self->x0_, __pyx_v_t, __pyx_v_self->T0_, __pyx_v_self->kDir_, __pyx_v_self->ki_, __pyx_v_self->omega_, __pyx_v_self->phi_, __pyx_v_self->ai_, __pyx_v_self->mwl, __pyx_v_self->depth, __pyx_v_self->Nf, __pyx_v_Nw, __pyx_v_self->waveDir_, __pyx_v_self->vDir_, __pyx_v_self->tanh_, __pyx_v_self->gAbs, __pyx_v_self->fast);

  /* "WaveTools.py":2196
 * 
 *         return __cpp_etaWindow(x,self.x0_,t,self.T0_,self.kDir_,self.omega_,self.phi_,self.ai_,self.Nf,Nw, self.fast)
 *     def _cpp_uWindow(self,U, x,t):             # <<<<<<<<<<<<<<
 *         Nw = __cpp_findWindow(t,self.handover, self.t0,self.Twindow,self.Nwindows, self.whand_) #Nw
 *         __cpp_uWindow(U,x,self.x0_,t,self.T0_,self.kDir_,self.ki_,self.omega_,self.phi_,self.ai_,self.mwl,self.depth,self.Nf,Nw,self.waveDir_, self.vDir_, self.tanh_, self.gAbs, self.fast)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "WaveTools.py":2200
 *         __cpp_uWindow(U,x,self.x0_,t,self.T0_,self.kDir_,self.ki_,self.omega_,self.phi_,self.ai_,self.mwl,self.depth,self.Nf,Nw,self.waveDir_, self.vDir_, self.tanh_, self.gAbs, self.fast)
 * 
 *     def etaWindow(self, x, t):             # <<<<<<<<<<<<<<
 *         """Calculates free surface elevation(Timeseries class-window method
 *         Parameters
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_10TimeSeries_11etaWindow(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9WaveTools_10TimeSeries_10etaWindow[] = "Calculates free surface elevation(Timeseries class-window method\n        Parameters\n        ----------\n        x : numpy.ndarray\n            Position vector\n        t : float\n            Time variable\n\n        Returns\n        --------\n        float\n            Free-surface elevation as a float\n\n        ";
static PyMethodDef __pyx_mdef_9WaveTools_10TimeSeries_11etaWindow = {"etaWindow", (PyCFunction)__pyx_pw_9WaveTools_10TimeSeries_11etaWindow, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_10TimeSeries_10etaWindow};
static PyObject *__pyx_pw_9WaveTools_10TimeSeries_11etaWindow(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_t = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("etaWindow (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_t,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("etaWindow", 1, 2, 2, 1); __PYX_ERR(0, 2200, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "etaWindow") < 0)) __PYX_ERR(0, 2200, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = values[0];
    __pyx_v_t = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("etaWindow", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2200, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("WaveTools.TimeSeries.etaWindow", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9WaveTools_10TimeSeries_10etaWindow(((struct __pyx_obj_9WaveTools_TimeSeries *)__pyx_v_self), __pyx_v_x, __pyx_v_t);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_10TimeSeries_10etaWindow(struct __pyx_obj_9WaveTools_TimeSeries *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_t) {
  double __pyx_v_xx[3];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  __Pyx_RefNannySetupContext("etaWindow", 0);

  /* "WaveTools.py":2216
 *         """
 *         cython.declare(xx=cython.double[3])
 *         xx[0] = x[0]             # <<<<<<<<<<<<<<
 *         xx[1] = x[1]
 *         xx[2] = x[2]
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_x, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2216, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  (__pyx_v_xx[0]) = __pyx_t_2;

  /* "WaveTools.py":2217
 *         cython.declare(xx=cython.double[3])
 *         xx[0] = x[0]
 *         xx[1] = x[1]             # <<<<<<<<<<<<<<
 *         xx[2] = x[2]
 *         return self._cpp_etaWindow(xx,t)
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_x, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2217, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  (__pyx_v_xx[1]) = __pyx_t_2;

  /* "WaveTools.py":2218
 *         xx[0] = x[0]
 *         xx[1] = x[1]
 *         xx[2] = x[2]             # <<<<<<<<<<<<<<
 *         return self._cpp_etaWindow(xx,t)
 * 
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_x, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2218, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  (__pyx_v_xx[2]) = __pyx_t_2;

  /* "WaveTools.py":2219
 *         xx[1] = x[1]
 *         xx[2] = x[2]
 *         return self._cpp_etaWindow(xx,t)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_t); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2219, __pyx_L1_error)
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_vtabstruct_9WaveTools_TimeSeries *)__pyx_v_self->__pyx_vtab)->_cpp_etaWindow(__pyx_v_self, __pyx_v_xx, __pyx_t_2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "WaveTools.py":2200
 *         __cpp_uWindow(U,x,self.x0_,t,self.T0_,self.kDir_,self.ki_,self.omega_,self.phi_,self.ai_,self.mwl,self.depth,self.Nf,Nw,self.waveDir_, self.vDir_, self.tanh_, self.gAbs, self.fast)
 * 
 *     def etaWindow(self, x, t):             # <<<<<<<<<<<<<<
 *         """Calculates free surface elevation(Timeseries class-window method
 *         Parameters
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("WaveTools.TimeSeries.etaWindow", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":2222
 * 
 * 
 *     def uWindow(self, x, t):             # <<<<<<<<<<<<<<
 *         """Calculates wave velocity vector (Timeseries class-window method)
 *         Parameters
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_10TimeSeries_13uWindow(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9WaveTools_10TimeSeries_12uWindow[] = "Calculates wave velocity vector (Timeseries class-window method)\n        Parameters\n        ----------\n        x : numpy.ndarray\n            Position vector\n        t : float\n            Time variable\n\n        Returns\n        --------\n        numpy.ndarray\n            Velocity vector as 1D array\n\n        ";
static PyMethodDef __pyx_mdef_9WaveTools_10TimeSeries_13uWindow = {"uWindow", (PyCFunction)__pyx_pw_9WaveTools_10TimeSeries_13uWindow, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_10TimeSeries_12uWindow};
static PyObject *__pyx_pw_9WaveTools_10TimeSeries_13uWindow(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_t = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("uWindow (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_t,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("uWindow", 1, 2, 2, 1); __PYX_ERR(0, 2222, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "uWindow") < 0)) __PYX_ERR(0, 2222, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = values[0];
    __pyx_v_t = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("uWindow", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2222, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("WaveTools.TimeSeries.uWindow", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9WaveTools_10TimeSeries_12uWindow(((struct __pyx_obj_9WaveTools_TimeSeries *)__pyx_v_self), __pyx_v_x, __pyx_v_t);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_10TimeSeries_12uWindow(struct __pyx_obj_9WaveTools_TimeSeries *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_t) {
  double __pyx_v_xx[3];
  double __pyx_v_cppU[3];
  long __pyx_v_ii;
  PyObject *__pyx_v_U = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  long __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  double __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("uWindow", 0);

  /* "WaveTools.py":2239
 *         cython.declare(xx=cython.double[3])
 *         cython.declare(cppU=cython.double[3])
 *         for ii in range(3):             # <<<<<<<<<<<<<<
 *             xx[ii] = x[ii]
 *             cppU[ii] = 0.
 */
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {
    __pyx_v_ii = __pyx_t_1;

    /* "WaveTools.py":2240
 *         cython.declare(cppU=cython.double[3])
 *         for ii in range(3):
 *             xx[ii] = x[ii]             # <<<<<<<<<<<<<<
 *             cppU[ii] = 0.
 *         U = np.zeros(3,)
 */
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_x, __pyx_v_ii, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2240, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2240, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    (__pyx_v_xx[__pyx_v_ii]) = __pyx_t_3;

    /* "WaveTools.py":2241
 *         for ii in range(3):
 *             xx[ii] = x[ii]
 *             cppU[ii] = 0.             # <<<<<<<<<<<<<<
 *         U = np.zeros(3,)
 *         self._cpp_uWindow(cppU,xx,t)
 */
    (__pyx_v_cppU[__pyx_v_ii]) = 0.;
  }

  /* "WaveTools.py":2242
 *             xx[ii] = x[ii]
 *             cppU[ii] = 0.
 *         U = np.zeros(3,)             # <<<<<<<<<<<<<<
 *         self._cpp_uWindow(cppU,xx,t)
 *         U[0] = cppU[0]
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__174, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_U = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "WaveTools.py":2243
 *             cppU[ii] = 0.
 *         U = np.zeros(3,)
 *         self._cpp_uWindow(cppU,xx,t)             # <<<<<<<<<<<<<<
 *         U[0] = cppU[0]
 *         U[1] = cppU[1]
 */
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_t); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2243, __pyx_L1_error)
  ((struct __pyx_vtabstruct_9WaveTools_TimeSeries *)__pyx_v_self->__pyx_vtab)->_cpp_uWindow(__pyx_v_self, __pyx_v_cppU, __pyx_v_xx, __pyx_t_3);

  /* "WaveTools.py":2244
 *         U = np.zeros(3,)
 *         self._cpp_uWindow(cppU,xx,t)
 *         U[0] = cppU[0]             # <<<<<<<<<<<<<<
 *         U[1] = cppU[1]
 *         U[2] = cppU[2]
 */
  __pyx_t_2 = PyFloat_FromDouble((__pyx_v_cppU[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2244, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__Pyx_SetItemInt(__pyx_v_U, 0, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1) < 0)) __PYX_ERR(0, 2244, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "WaveTools.py":2245
 *         self._cpp_uWindow(cppU,xx,t)
 *         U[0] = cppU[0]
 *         U[1] = cppU[1]             # <<<<<<<<<<<<<<
 *         U[2] = cppU[2]
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble((__pyx_v_cppU[1])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__Pyx_SetItemInt(__pyx_v_U, 1, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1) < 0)) __PYX_ERR(0, 2245, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "WaveTools.py":2246
 *         U[0] = cppU[0]
 *         U[1] = cppU[1]
 *         U[2] = cppU[2]             # <<<<<<<<<<<<<<
 * 
 *         return U
 */
  __pyx_t_2 = PyFloat_FromDouble((__pyx_v_cppU[2])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__Pyx_SetItemInt(__pyx_v_U, 2, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1) < 0)) __PYX_ERR(0, 2246, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "WaveTools.py":2248
 *         U[2] = cppU[2]
 * 
 *         return U             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_U);
  __pyx_r = __pyx_v_U;
  goto __pyx_L0;

  /* "WaveTools.py":2222
 * 
 * 
 *     def uWindow(self, x, t):             # <<<<<<<<<<<<<<
 *         """Calculates wave velocity vector (Timeseries class-window method)
 *         Parameters
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("WaveTools.TimeSeries.uWindow", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_U);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.pxd":188
 *     cdef double[1000000] T0
 *     cdef public:
 *         double wavelength,mwl             # <<<<<<<<<<<<<<
 *         object eta,u
 *     cdef cfeta2 _cpp_eta
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_10TimeSeries_10wavelength_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9WaveTools_10TimeSeries_10wavelength_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_10TimeSeries_10wavelength___get__(((struct __pyx_obj_9WaveTools_TimeSeries *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_10TimeSeries_10wavelength___get__(struct __pyx_obj_9WaveTools_TimeSeries *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->wavelength); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("WaveTools.TimeSeries.wavelength.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9WaveTools_10TimeSeries_10wavelength_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9WaveTools_10TimeSeries_10wavelength_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_10TimeSeries_10wavelength_2__set__(((struct __pyx_obj_9WaveTools_TimeSeries *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9WaveTools_10TimeSeries_10wavelength_2__set__(struct __pyx_obj_9WaveTools_TimeSeries *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 188, __pyx_L1_error)
  __pyx_v_self->wavelength = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("WaveTools.TimeSeries.wavelength.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_10TimeSeries_3mwl_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9WaveTools_10TimeSeries_3mwl_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_10TimeSeries_3mwl___get__(((struct __pyx_obj_9WaveTools_TimeSeries *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_10TimeSeries_3mwl___get__(struct __pyx_obj_9WaveTools_TimeSeries *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->mwl); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("WaveTools.TimeSeries.mwl.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9WaveTools_10TimeSeries_3mwl_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9WaveTools_10TimeSeries_3mwl_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_10TimeSeries_3mwl_2__set__(((struct __pyx_obj_9WaveTools_TimeSeries *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9WaveTools_10TimeSeries_3mwl_2__set__(struct __pyx_obj_9WaveTools_TimeSeries *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 188, __pyx_L1_error)
  __pyx_v_self->mwl = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("WaveTools.TimeSeries.mwl.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.pxd":189
 *     cdef public:
 *         double wavelength,mwl
 *         object eta,u             # <<<<<<<<<<<<<<
 *     cdef cfeta2 _cpp_eta
 *     cdef cfvel2 _cpp_u
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_10TimeSeries_3eta_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9WaveTools_10TimeSeries_3eta_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_10TimeSeries_3eta___get__(((struct __pyx_obj_9WaveTools_TimeSeries *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_10TimeSeries_3eta___get__(struct __pyx_obj_9WaveTools_TimeSeries *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->eta);
  __pyx_r = __pyx_v_self->eta;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9WaveTools_10TimeSeries_3eta_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9WaveTools_10TimeSeries_3eta_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_10TimeSeries_3eta_2__set__(((struct __pyx_obj_9WaveTools_TimeSeries *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9WaveTools_10TimeSeries_3eta_2__set__(struct __pyx_obj_9WaveTools_TimeSeries *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->eta);
  __Pyx_DECREF(__pyx_v_self->eta);
  __pyx_v_self->eta = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9WaveTools_10TimeSeries_3eta_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_9WaveTools_10TimeSeries_3eta_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_10TimeSeries_3eta_4__del__(((struct __pyx_obj_9WaveTools_TimeSeries *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9WaveTools_10TimeSeries_3eta_4__del__(struct __pyx_obj_9WaveTools_TimeSeries *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->eta);
  __Pyx_DECREF(__pyx_v_self->eta);
  __pyx_v_self->eta = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_10TimeSeries_1u_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9WaveTools_10TimeSeries_1u_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_10TimeSeries_1u___get__(((struct __pyx_obj_9WaveTools_TimeSeries *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_10TimeSeries_1u___get__(struct __pyx_obj_9WaveTools_TimeSeries *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->u);
  __pyx_r = __pyx_v_self->u;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9WaveTools_10TimeSeries_1u_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9WaveTools_10TimeSeries_1u_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_10TimeSeries_1u_2__set__(((struct __pyx_obj_9WaveTools_TimeSeries *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9WaveTools_10TimeSeries_1u_2__set__(struct __pyx_obj_9WaveTools_TimeSeries *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->u);
  __Pyx_DECREF(__pyx_v_self->u);
  __pyx_v_self->u = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9WaveTools_10TimeSeries_1u_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_9WaveTools_10TimeSeries_1u_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_10TimeSeries_1u_4__del__(((struct __pyx_obj_9WaveTools_TimeSeries *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9WaveTools_10TimeSeries_1u_4__del__(struct __pyx_obj_9WaveTools_TimeSeries *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->u);
  __Pyx_DECREF(__pyx_v_self->u);
  __pyx_v_self->u = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":2303
 *     """
 * 
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *                  Tstart,
 *                  Tend,
 */

static PyObject *__pyx_pf_9WaveTools_50__defaults__(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__defaults__", 0);
  __Pyx_XDECREF(__pyx_r);

  /* "WaveTools.py":2322
 *                  Nfreq = 32,
 *                  checkAcc = True,
 *                  fast= True):             # <<<<<<<<<<<<<<
 *         RW  =         RandomWaves(
 *                                  Tp, # np array with
 */
  __pyx_t_1 = PyTuple_New(7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)Py_None));
  __Pyx_GIVEREF(((PyObject *)Py_None));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_None));
  __Pyx_INCREF(((PyObject *)Py_None));
  __Pyx_GIVEREF(((PyObject *)Py_None));
  PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)Py_None));
  __Pyx_INCREF(__Pyx_CyFunction_Defaults(__pyx_defaults, __pyx_self)->__pyx_arg_Lgen);
  __Pyx_GIVEREF(__Pyx_CyFunction_Defaults(__pyx_defaults, __pyx_self)->__pyx_arg_Lgen);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __Pyx_CyFunction_Defaults(__pyx_defaults, __pyx_self)->__pyx_arg_Lgen);
  __Pyx_INCREF(((PyObject *)__pyx_int_15));
  __Pyx_GIVEREF(((PyObject *)__pyx_int_15));
  PyTuple_SET_ITEM(__pyx_t_1, 3, ((PyObject *)__pyx_int_15));
  __Pyx_INCREF(((PyObject *)__pyx_int_32));
  __Pyx_GIVEREF(((PyObject *)__pyx_int_32));
  PyTuple_SET_ITEM(__pyx_t_1, 4, ((PyObject *)__pyx_int_32));
  __Pyx_INCREF(((PyObject *)Py_True));
  __Pyx_GIVEREF(((PyObject *)Py_True));
  PyTuple_SET_ITEM(__pyx_t_1, 5, ((PyObject *)Py_True));
  __Pyx_INCREF(((PyObject *)Py_True));
  __Pyx_GIVEREF(((PyObject *)Py_True));
  PyTuple_SET_ITEM(__pyx_t_1, 6, ((PyObject *)Py_True));

  /* "WaveTools.py":2303
 *     """
 * 
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *                  Tstart,
 *                  Tend,
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  PyTuple_SET_ITEM(__pyx_t_2, 1, Py_None);
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("WaveTools.__defaults__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_15RandomWavesFast_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9WaveTools_15RandomWavesFast_1__init__ = {"__init__", (PyCFunction)__pyx_pw_9WaveTools_15RandomWavesFast_1__init__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9WaveTools_15RandomWavesFast_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_Tstart = 0;
  PyObject *__pyx_v_Tend = 0;
  PyObject *__pyx_v_x0 = 0;
  PyObject *__pyx_v_Tp = 0;
  PyObject *__pyx_v_Hs = 0;
  PyObject *__pyx_v_mwl = 0;
  PyObject *__pyx_v_depth = 0;
  PyObject *__pyx_v_waveDir = 0;
  PyObject *__pyx_v_g = 0;
  PyObject *__pyx_v_N = 0;
  PyObject *__pyx_v_bandFactor = 0;
  PyObject *__pyx_v_spectName = 0;
  PyObject *__pyx_v_spectral_params = 0;
  PyObject *__pyx_v_phi = 0;
  PyObject *__pyx_v_Lgen = 0;
  PyObject *__pyx_v_Nwaves = 0;
  PyObject *__pyx_v_Nfreq = 0;
  PyObject *__pyx_v_checkAcc = 0;
  PyObject *__pyx_v_fast = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_Tstart,&__pyx_n_s_Tend,&__pyx_n_s_x0,&__pyx_n_s_Tp,&__pyx_n_s_Hs,&__pyx_n_s_mwl,&__pyx_n_s_depth,&__pyx_n_s_waveDir,&__pyx_n_s_g,&__pyx_n_s_N,&__pyx_n_s_bandFactor,&__pyx_n_s_spectName,&__pyx_n_s_spectral_params,&__pyx_n_s_phi,&__pyx_n_s_Lgen,&__pyx_n_s_Nwaves,&__pyx_n_s_Nfreq,&__pyx_n_s_checkAcc,&__pyx_n_s_fast,0};
    PyObject* values[20] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    __pyx_defaults *__pyx_dynamic_args = __Pyx_CyFunction_Defaults(__pyx_defaults, __pyx_self);
    values[13] = ((PyObject *)((PyObject *)Py_None));
    values[14] = ((PyObject *)((PyObject *)Py_None));
    values[15] = __pyx_dynamic_args->__pyx_arg_Lgen;
    values[16] = ((PyObject *)((PyObject *)__pyx_int_15));
    values[17] = ((PyObject *)((PyObject *)__pyx_int_32));
    values[18] = ((PyObject *)((PyObject *)Py_True));
    values[19] = ((PyObject *)((PyObject *)Py_True));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 20: values[19] = PyTuple_GET_ITEM(__pyx_args, 19);
        case 19: values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
        case 18: values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
        case 17: values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Tstart)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 13, 20, 1); __PYX_ERR(0, 2303, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Tend)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 13, 20, 2); __PYX_ERR(0, 2303, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 13, 20, 3); __PYX_ERR(0, 2303, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Tp)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 13, 20, 4); __PYX_ERR(0, 2303, __pyx_L3_error)
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Hs)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 13, 20, 5); __PYX_ERR(0, 2303, __pyx_L3_error)
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mwl)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 13, 20, 6); __PYX_ERR(0, 2303, __pyx_L3_error)
        }
        case  7:
        if (likely((values[7] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_depth)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 13, 20, 7); __PYX_ERR(0, 2303, __pyx_L3_error)
        }
        case  8:
        if (likely((values[8] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_waveDir)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 13, 20, 8); __PYX_ERR(0, 2303, __pyx_L3_error)
        }
        case  9:
        if (likely((values[9] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 13, 20, 9); __PYX_ERR(0, 2303, __pyx_L3_error)
        }
        case 10:
        if (likely((values[10] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_N)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 13, 20, 10); __PYX_ERR(0, 2303, __pyx_L3_error)
        }
        case 11:
        if (likely((values[11] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bandFactor)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 13, 20, 11); __PYX_ERR(0, 2303, __pyx_L3_error)
        }
        case 12:
        if (likely((values[12] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_spectName)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 13, 20, 12); __PYX_ERR(0, 2303, __pyx_L3_error)
        }
        case 13:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_spectral_params);
          if (value) { values[13] = value; kw_args--; }
        }
        case 14:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_phi);
          if (value) { values[14] = value; kw_args--; }
        }
        case 15:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Lgen);
          if (value) { values[15] = value; kw_args--; }
        }
        case 16:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Nwaves);
          if (value) { values[16] = value; kw_args--; }
        }
        case 17:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Nfreq);
          if (value) { values[17] = value; kw_args--; }
        }
        case 18:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_checkAcc);
          if (value) { values[18] = value; kw_args--; }
        }
        case 19:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fast);
          if (value) { values[19] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 2303, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 20: values[19] = PyTuple_GET_ITEM(__pyx_args, 19);
        case 19: values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
        case 18: values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
        case 17: values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_Tstart = values[1];
    __pyx_v_Tend = values[2];
    __pyx_v_x0 = values[3];
    __pyx_v_Tp = values[4];
    __pyx_v_Hs = values[5];
    __pyx_v_mwl = values[6];
    __pyx_v_depth = values[7];
    __pyx_v_waveDir = values[8];
    __pyx_v_g = values[9];
    __pyx_v_N = values[10];
    __pyx_v_bandFactor = values[11];
    __pyx_v_spectName = values[12];
    __pyx_v_spectral_params = values[13];
    __pyx_v_phi = values[14];
    __pyx_v_Lgen = values[15];
    __pyx_v_Nwaves = values[16];
    __pyx_v_Nfreq = values[17];
    __pyx_v_checkAcc = values[18];
    __pyx_v_fast = values[19];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 13, 20, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2303, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("WaveTools.RandomWavesFast.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9WaveTools_15RandomWavesFast___init__(__pyx_self, __pyx_v_self, __pyx_v_Tstart, __pyx_v_Tend, __pyx_v_x0, __pyx_v_Tp, __pyx_v_Hs, __pyx_v_mwl, __pyx_v_depth, __pyx_v_waveDir, __pyx_v_g, __pyx_v_N, __pyx_v_bandFactor, __pyx_v_spectName, __pyx_v_spectral_params, __pyx_v_phi, __pyx_v_Lgen, __pyx_v_Nwaves, __pyx_v_Nfreq, __pyx_v_checkAcc, __pyx_v_fast);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_15RandomWavesFast___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_Tstart, PyObject *__pyx_v_Tend, PyObject *__pyx_v_x0, PyObject *__pyx_v_Tp, PyObject *__pyx_v_Hs, PyObject *__pyx_v_mwl, PyObject *__pyx_v_depth, PyObject *__pyx_v_waveDir, PyObject *__pyx_v_g, PyObject *__pyx_v_N, PyObject *__pyx_v_bandFactor, PyObject *__pyx_v_spectName, PyObject *__pyx_v_spectral_params, PyObject *__pyx_v_phi, PyObject *__pyx_v_Lgen, PyObject *__pyx_v_Nwaves, PyObject *__pyx_v_Nfreq, PyObject *__pyx_v_checkAcc, PyObject *__pyx_v_fast) {
  struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_RW = NULL;
  double __pyx_v_cutoff_win;
  double __pyx_v_overl;
  PyObject *__pyx_v_fname = NULL;
  PyObject *__pyx_v_duration = NULL;
  PyObject *__pyx_v_Tm = NULL;
  PyObject *__pyx_v_Nwaves_tot = NULL;
  struct __pyx_obj_9WaveTools_TimeSeries *__pyx_v_TS = NULL;
  PyObject *__pyx_v_cut = NULL;
  PyObject *__pyx_v_ts = NULL;
  PyObject *__pyx_v_te = NULL;
  PyObject *__pyx_v_i1 = NULL;
  PyObject *__pyx_v_i2 = NULL;
  PyObject *__pyx_v_errors = NULL;
  PyObject *__pyx_v_ii = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  __Pyx_RefNannySetupContext("__init__", 0);
  __Pyx_INCREF(__pyx_v_Nwaves);

  /* "WaveTools.py":2323
 *                  checkAcc = True,
 *                  fast= True):
 *         RW  =         RandomWaves(             # <<<<<<<<<<<<<<
 *                                  Tp, # np array with
 *                                  Hs,
 */
  __pyx_t_1 = PyTuple_New(11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_Tp);
  __Pyx_GIVEREF(__pyx_v_Tp);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_Tp);
  __Pyx_INCREF(__pyx_v_Hs);
  __Pyx_GIVEREF(__pyx_v_Hs);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_Hs);
  __Pyx_INCREF(__pyx_v_mwl);
  __Pyx_GIVEREF(__pyx_v_mwl);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_mwl);
  __Pyx_INCREF(__pyx_v_depth);
  __Pyx_GIVEREF(__pyx_v_depth);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_v_depth);
  __Pyx_INCREF(__pyx_v_waveDir);
  __Pyx_GIVEREF(__pyx_v_waveDir);
  PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_v_waveDir);
  __Pyx_INCREF(__pyx_v_g);
  __Pyx_GIVEREF(__pyx_v_g);
  PyTuple_SET_ITEM(__pyx_t_1, 5, __pyx_v_g);
  __Pyx_INCREF(__pyx_v_N);
  __Pyx_GIVEREF(__pyx_v_N);
  PyTuple_SET_ITEM(__pyx_t_1, 6, __pyx_v_N);
  __Pyx_INCREF(__pyx_v_bandFactor);
  __Pyx_GIVEREF(__pyx_v_bandFactor);
  PyTuple_SET_ITEM(__pyx_t_1, 7, __pyx_v_bandFactor);
  __Pyx_INCREF(__pyx_v_spectName);
  __Pyx_GIVEREF(__pyx_v_spectName);
  PyTuple_SET_ITEM(__pyx_t_1, 8, __pyx_v_spectName);
  __Pyx_INCREF(__pyx_v_spectral_params);
  __Pyx_GIVEREF(__pyx_v_spectral_params);
  PyTuple_SET_ITEM(__pyx_t_1, 9, __pyx_v_spectral_params);
  __Pyx_INCREF(__pyx_v_phi);
  __Pyx_GIVEREF(__pyx_v_phi);
  PyTuple_SET_ITEM(__pyx_t_1, 10, __pyx_v_phi);
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9WaveTools_RandomWaves), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_RW = ((struct __pyx_obj_9WaveTools_RandomWaves *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "WaveTools.py":2336
 *                                  phi
 *                              )
 *         self.Hs = Hs             # <<<<<<<<<<<<<<
 *         self.Tp = Tp
 *         self.depth = depth
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_Hs, __pyx_v_Hs) < 0) __PYX_ERR(0, 2336, __pyx_L1_error)

  /* "WaveTools.py":2337
 *                              )
 *         self.Hs = Hs
 *         self.Tp = Tp             # <<<<<<<<<<<<<<
 *         self.depth = depth
 *         self.mwl = mwl
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_Tp, __pyx_v_Tp) < 0) __PYX_ERR(0, 2337, __pyx_L1_error)

  /* "WaveTools.py":2338
 *         self.Hs = Hs
 *         self.Tp = Tp
 *         self.depth = depth             # <<<<<<<<<<<<<<
 *         self.mwl = mwl
 *         cutoff_win = 0.1
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_depth, __pyx_v_depth) < 0) __PYX_ERR(0, 2338, __pyx_L1_error)

  /* "WaveTools.py":2339
 *         self.Tp = Tp
 *         self.depth = depth
 *         self.mwl = mwl             # <<<<<<<<<<<<<<
 *         cutoff_win = 0.1
 *         overl = 0.7
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_mwl, __pyx_v_mwl) < 0) __PYX_ERR(0, 2339, __pyx_L1_error)

  /* "WaveTools.py":2340
 *         self.depth = depth
 *         self.mwl = mwl
 *         cutoff_win = 0.1             # <<<<<<<<<<<<<<
 *         overl = 0.7
 *         fname = "RandomSeries"+"_Hs_"+str(self.Hs)+"_Tp_"+str(self.Tp)+"_depth_"+str(self.depth)
 */
  __pyx_v_cutoff_win = 0.1;

  /* "WaveTools.py":2341
 *         self.mwl = mwl
 *         cutoff_win = 0.1
 *         overl = 0.7             # <<<<<<<<<<<<<<
 *         fname = "RandomSeries"+"_Hs_"+str(self.Hs)+"_Tp_"+str(self.Tp)+"_depth_"+str(self.depth)
 *         self.series = RW.writeEtaSeries(Tstart,Tend,x0,fname,4.*Lgen)
 */
  __pyx_v_overl = 0.7;

  /* "WaveTools.py":2342
 *         cutoff_win = 0.1
 *         overl = 0.7
 *         fname = "RandomSeries"+"_Hs_"+str(self.Hs)+"_Tp_"+str(self.Tp)+"_depth_"+str(self.depth)             # <<<<<<<<<<<<<<
 *         self.series = RW.writeEtaSeries(Tstart,Tend,x0,fname,4.*Lgen)
 *         self.cutoff = max(0.2*self.Tp , cutoff_win*Nwaves*Tp)
 */
  __pyx_t_2 = PyNumber_Add(__pyx_n_s_RandomSeries, __pyx_n_s_Hs_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_Hs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_t_3, __pyx_n_s_Tp_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_Tp); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_n_s_depth_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_depth); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_fname = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "WaveTools.py":2343
 *         overl = 0.7
 *         fname = "RandomSeries"+"_Hs_"+str(self.Hs)+"_Tp_"+str(self.Tp)+"_depth_"+str(self.depth)
 *         self.series = RW.writeEtaSeries(Tstart,Tend,x0,fname,4.*Lgen)             # <<<<<<<<<<<<<<
 *         self.cutoff = max(0.2*self.Tp , cutoff_win*Nwaves*Tp)
 *         duration = (self.series[-1,0]-self.series[0,0])
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_RW), __pyx_n_s_writeEtaSeries); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_float_4_, __pyx_v_Lgen); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[6] = {__pyx_t_4, __pyx_v_Tstart, __pyx_v_Tend, __pyx_v_x0, __pyx_v_fname, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 5+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2343, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[6] = {__pyx_t_4, __pyx_v_Tstart, __pyx_v_Tend, __pyx_v_x0, __pyx_v_fname, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 5+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2343, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(5+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2343, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_v_Tstart);
    __Pyx_GIVEREF(__pyx_v_Tstart);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_v_Tstart);
    __Pyx_INCREF(__pyx_v_Tend);
    __Pyx_GIVEREF(__pyx_v_Tend);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_v_Tend);
    __Pyx_INCREF(__pyx_v_x0);
    __Pyx_GIVEREF(__pyx_v_x0);
    PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_5, __pyx_v_x0);
    __Pyx_INCREF(__pyx_v_fname);
    __Pyx_GIVEREF(__pyx_v_fname);
    PyTuple_SET_ITEM(__pyx_t_6, 3+__pyx_t_5, __pyx_v_fname);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_6, 4+__pyx_t_5, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2343, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_series, __pyx_t_1) < 0) __PYX_ERR(0, 2343, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "WaveTools.py":2344
 *         fname = "RandomSeries"+"_Hs_"+str(self.Hs)+"_Tp_"+str(self.Tp)+"_depth_"+str(self.depth)
 *         self.series = RW.writeEtaSeries(Tstart,Tend,x0,fname,4.*Lgen)
 *         self.cutoff = max(0.2*self.Tp , cutoff_win*Nwaves*Tp)             # <<<<<<<<<<<<<<
 *         duration = (self.series[-1,0]-self.series[0,0])
 *         self.cutoff  = self.cutoff / duration
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_cutoff_win); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2344, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_1, __pyx_v_Nwaves); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2344, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Multiply(__pyx_t_2, __pyx_v_Tp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2344, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_Tp); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2344, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = PyNumber_Multiply(__pyx_float_0_2, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2344, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_6, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2344, __pyx_L1_error)
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 2344, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_7) {
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = __pyx_t_1;
  } else {
    __Pyx_INCREF(__pyx_t_6);
    __pyx_t_2 = __pyx_t_6;
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __pyx_t_2;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_cutoff, __pyx_t_1) < 0) __PYX_ERR(0, 2344, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "WaveTools.py":2345
 *         self.series = RW.writeEtaSeries(Tstart,Tend,x0,fname,4.*Lgen)
 *         self.cutoff = max(0.2*self.Tp , cutoff_win*Nwaves*Tp)
 *         duration = (self.series[-1,0]-self.series[0,0])             # <<<<<<<<<<<<<<
 *         self.cutoff  = self.cutoff / duration
 *         Tm = self.Tp/1.1
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_series); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetItem(__pyx_t_1, __pyx_tuple__175); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_series); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = PyObject_GetItem(__pyx_t_1, __pyx_tuple__176); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Subtract(__pyx_t_2, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_duration = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "WaveTools.py":2346
 *         self.cutoff = max(0.2*self.Tp , cutoff_win*Nwaves*Tp)
 *         duration = (self.series[-1,0]-self.series[0,0])
 *         self.cutoff  = self.cutoff / duration             # <<<<<<<<<<<<<<
 *         Tm = self.Tp/1.1
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_cutoff); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2346, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_v_duration); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2346, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_cutoff, __pyx_t_6) < 0) __PYX_ERR(0, 2346, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "WaveTools.py":2347
 *         duration = (self.series[-1,0]-self.series[0,0])
 *         self.cutoff  = self.cutoff / duration
 *         Tm = self.Tp/1.1             # <<<<<<<<<<<<<<
 * 
 *             #Checking if there are enough windows
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_Tp); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_1 = __Pyx_PyFloat_DivideObjC(__pyx_t_6, __pyx_float_1_1, 1.1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_Tm = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "WaveTools.py":2350
 * 
 *             #Checking if there are enough windows
 *         Nwaves_tot = round((self.series[-1,0]-self.series[0,0])/Tm)             # <<<<<<<<<<<<<<
 *         Nwaves = min(Nwaves,Nwaves_tot)
 *         self.Nwind = int(Nwaves_tot/Nwaves)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_series); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = PyObject_GetItem(__pyx_t_1, __pyx_tuple__177); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_series); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetItem(__pyx_t_1, __pyx_tuple__178); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Subtract(__pyx_t_6, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_v_Tm); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_round, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_Nwaves_tot = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "WaveTools.py":2351
 *             #Checking if there are enough windows
 *         Nwaves_tot = round((self.series[-1,0]-self.series[0,0])/Tm)
 *         Nwaves = min(Nwaves,Nwaves_tot)             # <<<<<<<<<<<<<<
 *         self.Nwind = int(Nwaves_tot/Nwaves)
 *         self.rec_d = False
 */
  __Pyx_INCREF(__pyx_v_Nwaves_tot);
  __pyx_t_2 = __pyx_v_Nwaves_tot;
  __Pyx_INCREF(__pyx_v_Nwaves);
  __pyx_t_1 = __pyx_v_Nwaves;
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_t_1, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2351, __pyx_L1_error)
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 2351, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_7) {
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_6 = __pyx_t_2;
  } else {
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_6 = __pyx_t_1;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __pyx_t_6;
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF_SET(__pyx_v_Nwaves, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "WaveTools.py":2352
 *         Nwaves_tot = round((self.series[-1,0]-self.series[0,0])/Tm)
 *         Nwaves = min(Nwaves,Nwaves_tot)
 *         self.Nwind = int(Nwaves_tot/Nwaves)             # <<<<<<<<<<<<<<
 *         self.rec_d = False
 *         if self.Nwind < 3:
 */
  __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_v_Nwaves_tot, __pyx_v_Nwaves); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyNumber_Int(__pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_Nwind, __pyx_t_6) < 0) __PYX_ERR(0, 2352, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "WaveTools.py":2353
 *         Nwaves = min(Nwaves,Nwaves_tot)
 *         self.Nwind = int(Nwaves_tot/Nwaves)
 *         self.rec_d = False             # <<<<<<<<<<<<<<
 *         if self.Nwind < 3:
 *             logEvent("ERROR!: WaveTools.py: Found too few windows in RandomWavesFast. Consider increasing Tend (this is independent from the duration of the simulation)")
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_rec_d, Py_False) < 0) __PYX_ERR(0, 2353, __pyx_L1_error)

  /* "WaveTools.py":2354
 *         self.Nwind = int(Nwaves_tot/Nwaves)
 *         self.rec_d = False
 *         if self.Nwind < 3:             # <<<<<<<<<<<<<<
 *             logEvent("ERROR!: WaveTools.py: Found too few windows in RandomWavesFast. Consider increasing Tend (this is independent from the duration of the simulation)")
 *             sys.exit(1)
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_Nwind); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_6, __pyx_int_3, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2354, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 2354, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_7) {

    /* "WaveTools.py":2355
 *         self.rec_d = False
 *         if self.Nwind < 3:
 *             logEvent("ERROR!: WaveTools.py: Found too few windows in RandomWavesFast. Consider increasing Tend (this is independent from the duration of the simulation)")             # <<<<<<<<<<<<<<
 *             sys.exit(1)
 * 
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_logEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2355, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__179, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2355, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "WaveTools.py":2356
 *         if self.Nwind < 3:
 *             logEvent("ERROR!: WaveTools.py: Found too few windows in RandomWavesFast. Consider increasing Tend (this is independent from the duration of the simulation)")
 *             sys.exit(1)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_sys); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2356, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_exit); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2356, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__180, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2356, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "WaveTools.py":2354
 *         self.Nwind = int(Nwaves_tot/Nwaves)
 *         self.rec_d = False
 *         if self.Nwind < 3:             # <<<<<<<<<<<<<<
 *             logEvent("ERROR!: WaveTools.py: Found too few windows in RandomWavesFast. Consider increasing Tend (this is independent from the duration of the simulation)")
 *             sys.exit(1)
 */
  }

  /* "WaveTools.py":2362
 * 
 * 
 *         self.fast = fast             # <<<<<<<<<<<<<<
 *         TS = TimeSeries(
 *                  fname, # e.g.= "Timeseries.txt",
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_fast, __pyx_v_fast) < 0) __PYX_ERR(0, 2362, __pyx_L1_error)

  /* "WaveTools.py":2367
 *                  0,
 *                  x0,
 *                  self.depth ,             # <<<<<<<<<<<<<<
 *                  Nfreq ,          #number of frequency bins
 *                  self.mwl ,        #mean water level
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_depth); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);

  /* "WaveTools.py":2369
 *                  self.depth ,
 *                  Nfreq ,          #number of frequency bins
 *                  self.mwl ,        #mean water level             # <<<<<<<<<<<<<<
 *                  waveDir,
 *                  g,
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_mwl); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2369, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "WaveTools.py":2363
 * 
 *         self.fast = fast
 *         TS = TimeSeries(             # <<<<<<<<<<<<<<
 *                  fname, # e.g.= "Timeseries.txt",
 *                  0,
 */
  __pyx_t_1 = PyTuple_New(8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2363, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_fname);
  __Pyx_GIVEREF(__pyx_v_fname);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_fname);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_0);
  __Pyx_INCREF(__pyx_v_x0);
  __Pyx_GIVEREF(__pyx_v_x0);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_x0);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_6);
  __Pyx_INCREF(__pyx_v_Nfreq);
  __Pyx_GIVEREF(__pyx_v_Nfreq);
  PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_v_Nfreq);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 5, __pyx_t_2);
  __Pyx_INCREF(__pyx_v_waveDir);
  __Pyx_GIVEREF(__pyx_v_waveDir);
  PyTuple_SET_ITEM(__pyx_t_1, 6, __pyx_v_waveDir);
  __Pyx_INCREF(__pyx_v_g);
  __Pyx_GIVEREF(__pyx_v_g);
  PyTuple_SET_ITEM(__pyx_t_1, 7, __pyx_v_g);
  __pyx_t_6 = 0;
  __pyx_t_2 = 0;

  /* "WaveTools.py":2372
 *                  waveDir,
 *                  g,
 *                  cutoffTotal = self.cutoff,             # <<<<<<<<<<<<<<
 *                  rec_direct = self.rec_d,
 *                  window_params = {"Nwaves":Nwaves ,"Tm":Tm,"Window":"costap","Overlap":overl,"Cutoff":cutoff_win},
 */
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_cutoff); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_cutoffTotal, __pyx_t_6) < 0) __PYX_ERR(0, 2372, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "WaveTools.py":2373
 *                  g,
 *                  cutoffTotal = self.cutoff,
 *                  rec_direct = self.rec_d,             # <<<<<<<<<<<<<<
 *                  window_params = {"Nwaves":Nwaves ,"Tm":Tm,"Window":"costap","Overlap":overl,"Cutoff":cutoff_win},
 *                  arrayData = True,
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_rec_d); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_rec_direct, __pyx_t_6) < 0) __PYX_ERR(0, 2372, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "WaveTools.py":2374
 *                  cutoffTotal = self.cutoff,
 *                  rec_direct = self.rec_d,
 *                  window_params = {"Nwaves":Nwaves ,"Tm":Tm,"Window":"costap","Overlap":overl,"Cutoff":cutoff_win},             # <<<<<<<<<<<<<<
 *                  arrayData = True,
 *                  seriesArray = self.series,
 */
  __pyx_t_6 = PyDict_New(); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_Nwaves, __pyx_v_Nwaves) < 0) __PYX_ERR(0, 2374, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_Tm, __pyx_v_Tm) < 0) __PYX_ERR(0, 2374, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_Window, __pyx_n_s_costap) < 0) __PYX_ERR(0, 2374, __pyx_L1_error)
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_overl); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_Overlap, __pyx_t_3) < 0) __PYX_ERR(0, 2374, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_cutoff_win); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_Cutoff, __pyx_t_3) < 0) __PYX_ERR(0, 2374, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_window_params, __pyx_t_6) < 0) __PYX_ERR(0, 2372, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "WaveTools.py":2375
 *                  rec_direct = self.rec_d,
 *                  window_params = {"Nwaves":Nwaves ,"Tm":Tm,"Window":"costap","Overlap":overl,"Cutoff":cutoff_win},
 *                  arrayData = True,             # <<<<<<<<<<<<<<
 *                  seriesArray = self.series,
 *                  Lgen = Lgen,
 */
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_arrayData, Py_True) < 0) __PYX_ERR(0, 2372, __pyx_L1_error)

  /* "WaveTools.py":2376
 *                  window_params = {"Nwaves":Nwaves ,"Tm":Tm,"Window":"costap","Overlap":overl,"Cutoff":cutoff_win},
 *                  arrayData = True,
 *                  seriesArray = self.series,             # <<<<<<<<<<<<<<
 *                  Lgen = Lgen,
 *             fast=self.fast
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_series); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2376, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_seriesArray, __pyx_t_6) < 0) __PYX_ERR(0, 2372, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "WaveTools.py":2377
 *                  arrayData = True,
 *                  seriesArray = self.series,
 *                  Lgen = Lgen,             # <<<<<<<<<<<<<<
 *             fast=self.fast
 *                  )
 */
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_Lgen, __pyx_v_Lgen) < 0) __PYX_ERR(0, 2372, __pyx_L1_error)

  /* "WaveTools.py":2378
 *                  seriesArray = self.series,
 *                  Lgen = Lgen,
 *             fast=self.fast             # <<<<<<<<<<<<<<
 *                  )
 * 
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_fast); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_fast, __pyx_t_6) < 0) __PYX_ERR(0, 2372, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "WaveTools.py":2363
 * 
 *         self.fast = fast
 *         TS = TimeSeries(             # <<<<<<<<<<<<<<
 *                  fname, # e.g.= "Timeseries.txt",
 *                  0,
 */
  __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9WaveTools_TimeSeries), __pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2363, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_TS = ((struct __pyx_obj_9WaveTools_TimeSeries *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "WaveTools.py":2381
 *                  )
 * 
 *         self.windows = TS.windows_rec             # <<<<<<<<<<<<<<
 *         self.ho = TS.windows_handover
 *         #Checking accuracy of the approximation
 */
  __pyx_t_6 = __pyx_v_TS->windows_rec;
  __Pyx_INCREF(__pyx_t_6);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_windows, __pyx_t_6) < 0) __PYX_ERR(0, 2381, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "WaveTools.py":2382
 * 
 *         self.windows = TS.windows_rec
 *         self.ho = TS.windows_handover             # <<<<<<<<<<<<<<
 *         #Checking accuracy of the approximation
 *         cut = 2.* self.cutoff * duration
 */
  __pyx_t_6 = __pyx_v_TS->windows_handover;
  __Pyx_INCREF(__pyx_t_6);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_ho, __pyx_t_6) < 0) __PYX_ERR(0, 2382, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "WaveTools.py":2384
 *         self.ho = TS.windows_handover
 *         #Checking accuracy of the approximation
 *         cut = 2.* self.cutoff * duration             # <<<<<<<<<<<<<<
 *         ts = self.series[0,0]+cut
 *         te = self.series[-1,0]-cut
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_cutoff); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2384, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = PyNumber_Multiply(__pyx_float_2_, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2384, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_v_duration); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2384, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_cut = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "WaveTools.py":2385
 *         #Checking accuracy of the approximation
 *         cut = 2.* self.cutoff * duration
 *         ts = self.series[0,0]+cut             # <<<<<<<<<<<<<<
 *         te = self.series[-1,0]-cut
 *         i1 = np.where(self.series[:,0]>ts)[0][0]
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_series); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = PyObject_GetItem(__pyx_t_6, __pyx_tuple__181); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyNumber_Add(__pyx_t_2, __pyx_v_cut); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_ts = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "WaveTools.py":2386
 *         cut = 2.* self.cutoff * duration
 *         ts = self.series[0,0]+cut
 *         te = self.series[-1,0]-cut             # <<<<<<<<<<<<<<
 *         i1 = np.where(self.series[:,0]>ts)[0][0]
 *         i2 = np.where(self.series[:,0]<te)[0][-1]
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_series); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = PyObject_GetItem(__pyx_t_6, __pyx_tuple__182); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyNumber_Subtract(__pyx_t_2, __pyx_v_cut); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_te = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "WaveTools.py":2387
 *         ts = self.series[0,0]+cut
 *         te = self.series[-1,0]-cut
 *         i1 = np.where(self.series[:,0]>ts)[0][0]             # <<<<<<<<<<<<<<
 *         i2 = np.where(self.series[:,0]<te)[0][-1]
 *         errors = np.zeros(len(self.series),)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_where); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_series); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetItem(__pyx_t_2, __pyx_tuple__184); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_3, __pyx_v_ts, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2387, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2387, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_6);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_2};
      __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2387, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_2};
      __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2387, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2387, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2387, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_6, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_i1 = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "WaveTools.py":2388
 *         te = self.series[-1,0]-cut
 *         i1 = np.where(self.series[:,0]>ts)[0][0]
 *         i2 = np.where(self.series[:,0]<te)[0][-1]             # <<<<<<<<<<<<<<
 *         errors = np.zeros(len(self.series),)
 *         for ii in range(i1,i2):
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_where); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_series); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetItem(__pyx_t_1, __pyx_tuple__186); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_2, __pyx_v_te, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2388, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2388, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_6);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_1};
      __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2388, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_1};
      __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2388, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2388, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2); __pyx_t_2 = NULL;
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2388, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_6, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_4, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_i2 = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "WaveTools.py":2389
 *         i1 = np.where(self.series[:,0]>ts)[0][0]
 *         i2 = np.where(self.series[:,0]<te)[0][-1]
 *         errors = np.zeros(len(self.series),)             # <<<<<<<<<<<<<<
 *         for ii in range(i1,i2):
 *             errors[ii] = abs(self.series[ii,1]-TS.eta(x0,self.series[ii,0]) )
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_series); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_8 = PyObject_Length(__pyx_t_4); if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(0, 2389, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_1) {
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2389, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_6);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_4};
      __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2389, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_4};
      __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2389, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2389, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1); __pyx_t_1 = NULL;
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2389, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_errors = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "WaveTools.py":2390
 *         i2 = np.where(self.series[:,0]<te)[0][-1]
 *         errors = np.zeros(len(self.series),)
 *         for ii in range(i1,i2):             # <<<<<<<<<<<<<<
 *             errors[ii] = abs(self.series[ii,1]-TS.eta(x0,self.series[ii,0]) )
 *         self.er1 = max(errors[:])/self.Hs
 */
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(__pyx_v_i1);
  __Pyx_GIVEREF(__pyx_v_i1);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_i1);
  __Pyx_INCREF(__pyx_v_i2);
  __Pyx_GIVEREF(__pyx_v_i2);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_v_i2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_6 = __pyx_t_3; __Pyx_INCREF(__pyx_t_6); __pyx_t_8 = 0;
    __pyx_t_9 = NULL;
  } else {
    __pyx_t_8 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2390, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_9 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2390, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_9)) {
      if (likely(PyList_CheckExact(__pyx_t_6))) {
        if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_8); __Pyx_INCREF(__pyx_t_3); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 2390, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_6, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2390, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_8); __Pyx_INCREF(__pyx_t_3); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 2390, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_6, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2390, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_9(__pyx_t_6);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 2390, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_ii, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "WaveTools.py":2391
 *         errors = np.zeros(len(self.series),)
 *         for ii in range(i1,i2):
 *             errors[ii] = abs(self.series[ii,1]-TS.eta(x0,self.series[ii,0]) )             # <<<<<<<<<<<<<<
 *         self.er1 = max(errors[:])/self.Hs
 *         if self.er1 > 0.01 and checkAcc:
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_series); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2391, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2391, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_ii);
    __Pyx_GIVEREF(__pyx_v_ii);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_ii);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_1);
    __pyx_t_4 = PyObject_GetItem(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2391, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_series); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2391, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2391, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_ii);
    __Pyx_GIVEREF(__pyx_v_ii);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_ii);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_0);
    __pyx_t_10 = PyObject_GetItem(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2391, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_v_TS->eta);
    __pyx_t_1 = __pyx_v_TS->eta; __pyx_t_3 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_5 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_x0, __pyx_t_10};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2391, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_x0, __pyx_t_10};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2391, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    } else
    #endif
    {
      __pyx_t_11 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2391, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_INCREF(__pyx_v_x0);
      __Pyx_GIVEREF(__pyx_v_x0);
      PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_5, __pyx_v_x0);
      __Pyx_GIVEREF(__pyx_t_10);
      PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_5, __pyx_t_10);
      __pyx_t_10 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_11, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2391, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Subtract(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2391, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Absolute(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2391, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(PyObject_SetItem(__pyx_v_errors, __pyx_v_ii, __pyx_t_2) < 0)) __PYX_ERR(0, 2391, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "WaveTools.py":2390
 *         i2 = np.where(self.series[:,0]<te)[0][-1]
 *         errors = np.zeros(len(self.series),)
 *         for ii in range(i1,i2):             # <<<<<<<<<<<<<<
 *             errors[ii] = abs(self.series[ii,1]-TS.eta(x0,self.series[ii,0]) )
 *         self.er1 = max(errors[:])/self.Hs
 */
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "WaveTools.py":2392
 *         for ii in range(i1,i2):
 *             errors[ii] = abs(self.series[ii,1]-TS.eta(x0,self.series[ii,0]) )
 *         self.er1 = max(errors[:])/self.Hs             # <<<<<<<<<<<<<<
 *         if self.er1 > 0.01 and checkAcc:
 *                 logEvent("ERROR!: WaveTools.py: Found large errors (>1%) during window reconstruction at RandomWavesFast. Please a) Increase Nfreq, b) Decrease waves per window. You can set checkAcc = False if you want to proceed with these errors")
 */
  __pyx_t_6 = __Pyx_PyObject_GetSlice(__pyx_v_errors, 0, 0, NULL, NULL, &__pyx_slice__187, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_max, __pyx_t_2, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_Hs); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_t_6, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_er1, __pyx_t_1) < 0) __PYX_ERR(0, 2392, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "WaveTools.py":2393
 *             errors[ii] = abs(self.series[ii,1]-TS.eta(x0,self.series[ii,0]) )
 *         self.er1 = max(errors[:])/self.Hs
 *         if self.er1 > 0.01 and checkAcc:             # <<<<<<<<<<<<<<
 *                 logEvent("ERROR!: WaveTools.py: Found large errors (>1%) during window reconstruction at RandomWavesFast. Please a) Increase Nfreq, b) Decrease waves per window. You can set checkAcc = False if you want to proceed with these errors")
 *                 sys.exit(1)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_er1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_float_0_01, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2393, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 2393, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_12) {
  } else {
    __pyx_t_7 = __pyx_t_12;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_v_checkAcc); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 2393, __pyx_L1_error)
  __pyx_t_7 = __pyx_t_12;
  __pyx_L7_bool_binop_done:;
  if (__pyx_t_7) {

    /* "WaveTools.py":2394
 *         self.er1 = max(errors[:])/self.Hs
 *         if self.er1 > 0.01 and checkAcc:
 *                 logEvent("ERROR!: WaveTools.py: Found large errors (>1%) during window reconstruction at RandomWavesFast. Please a) Increase Nfreq, b) Decrease waves per window. You can set checkAcc = False if you want to proceed with these errors")             # <<<<<<<<<<<<<<
 *                 sys.exit(1)
 * 
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_logEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2394, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__188, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2394, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "WaveTools.py":2395
 *         if self.er1 > 0.01 and checkAcc:
 *                 logEvent("ERROR!: WaveTools.py: Found large errors (>1%) during window reconstruction at RandomWavesFast. Please a) Increase Nfreq, b) Decrease waves per window. You can set checkAcc = False if you want to proceed with these errors")
 *                 sys.exit(1)             # <<<<<<<<<<<<<<
 * 
 *         self.eta = TS.eta
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_sys); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2395, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_exit); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2395, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__189, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2395, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "WaveTools.py":2393
 *             errors[ii] = abs(self.series[ii,1]-TS.eta(x0,self.series[ii,0]) )
 *         self.er1 = max(errors[:])/self.Hs
 *         if self.er1 > 0.01 and checkAcc:             # <<<<<<<<<<<<<<
 *                 logEvent("ERROR!: WaveTools.py: Found large errors (>1%) during window reconstruction at RandomWavesFast. Please a) Increase Nfreq, b) Decrease waves per window. You can set checkAcc = False if you want to proceed with these errors")
 *                 sys.exit(1)
 */
  }

  /* "WaveTools.py":2397
 *                 sys.exit(1)
 * 
 *         self.eta = TS.eta             # <<<<<<<<<<<<<<
 *         self.u = TS.u
 *         self.windOut = TS.windOut
 */
  __pyx_t_1 = __pyx_v_TS->eta;
  __Pyx_INCREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_eta, __pyx_t_1) < 0) __PYX_ERR(0, 2397, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "WaveTools.py":2398
 * 
 *         self.eta = TS.eta
 *         self.u = TS.u             # <<<<<<<<<<<<<<
 *         self.windOut = TS.windOut
 * 
 */
  __pyx_t_1 = __pyx_v_TS->u;
  __Pyx_INCREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_u, __pyx_t_1) < 0) __PYX_ERR(0, 2398, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "WaveTools.py":2399
 *         self.eta = TS.eta
 *         self.u = TS.u
 *         self.windOut = TS.windOut             # <<<<<<<<<<<<<<
 * 
 *     def printOut(self):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_TS), __pyx_n_s_windOut); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_windOut, __pyx_t_1) < 0) __PYX_ERR(0, 2399, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "WaveTools.py":2303
 *     """
 * 
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *                  Tstart,
 *                  Tend,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("WaveTools.RandomWavesFast.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_RW);
  __Pyx_XDECREF(__pyx_v_fname);
  __Pyx_XDECREF(__pyx_v_duration);
  __Pyx_XDECREF(__pyx_v_Tm);
  __Pyx_XDECREF(__pyx_v_Nwaves_tot);
  __Pyx_XDECREF((PyObject *)__pyx_v_TS);
  __Pyx_XDECREF(__pyx_v_cut);
  __Pyx_XDECREF(__pyx_v_ts);
  __Pyx_XDECREF(__pyx_v_te);
  __Pyx_XDECREF(__pyx_v_i1);
  __Pyx_XDECREF(__pyx_v_i2);
  __Pyx_XDECREF(__pyx_v_errors);
  __Pyx_XDECREF(__pyx_v_ii);
  __Pyx_XDECREF(__pyx_v_Nwaves);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":2401
 *         self.windOut = TS.windOut
 * 
 *     def printOut(self):             # <<<<<<<<<<<<<<
 *         """Prints some properties of the time series - ONLY FOR TESTING
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_15RandomWavesFast_3printOut(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_9WaveTools_15RandomWavesFast_2printOut[] = "Prints some properties of the time series - ONLY FOR TESTING\n\n\n        ";
static PyMethodDef __pyx_mdef_9WaveTools_15RandomWavesFast_3printOut = {"printOut", (PyCFunction)__pyx_pw_9WaveTools_15RandomWavesFast_3printOut, METH_O, __pyx_doc_9WaveTools_15RandomWavesFast_2printOut};
static PyObject *__pyx_pw_9WaveTools_15RandomWavesFast_3printOut(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("printOut (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_15RandomWavesFast_2printOut(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_15RandomWavesFast_2printOut(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("printOut", 0);

  /* "WaveTools.py":2406
 * 
 *         """
 *         print "Number of windows=",self.Nwind             # <<<<<<<<<<<<<<
 *         print "Direct reconstruction? ",self.rec_d
 *         print "Start Time =", self.series[0,0]
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_Nwind); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2406, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2406, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_kp_s_Number_of_windows);
  __Pyx_GIVEREF(__pyx_kp_s_Number_of_windows);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_s_Number_of_windows);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __pyx_t_1 = 0;
  if (__Pyx_Print(0, __pyx_t_2, 1) < 0) __PYX_ERR(0, 2406, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "WaveTools.py":2407
 *         """
 *         print "Number of windows=",self.Nwind
 *         print "Direct reconstruction? ",self.rec_d             # <<<<<<<<<<<<<<
 *         print "Start Time =", self.series[0,0]
 *         print "End time= ",self.series[-1,0]
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_rec_d); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_kp_s_Direct_reconstruction);
  __Pyx_GIVEREF(__pyx_kp_s_Direct_reconstruction);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_s_Direct_reconstruction);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
  __pyx_t_2 = 0;
  if (__Pyx_Print(0, __pyx_t_1, 1) < 0) __PYX_ERR(0, 2407, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "WaveTools.py":2408
 *         print "Number of windows=",self.Nwind
 *         print "Direct reconstruction? ",self.rec_d
 *         print "Start Time =", self.series[0,0]             # <<<<<<<<<<<<<<
 *         print "End time= ",self.series[-1,0]
 *         print "Cutoff=", self.cutoff
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_series); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetItem(__pyx_t_1, __pyx_tuple__190); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_kp_s_Start_Time);
  __Pyx_GIVEREF(__pyx_kp_s_Start_Time);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_s_Start_Time);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
  __pyx_t_2 = 0;
  if (__Pyx_Print(0, __pyx_t_1, 1) < 0) __PYX_ERR(0, 2408, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "WaveTools.py":2409
 *         print "Direct reconstruction? ",self.rec_d
 *         print "Start Time =", self.series[0,0]
 *         print "End time= ",self.series[-1,0]             # <<<<<<<<<<<<<<
 *         print "Cutoff=", self.cutoff
 *         print "Er1 =", self.er1
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_series); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetItem(__pyx_t_1, __pyx_tuple__191); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_kp_s_End_time);
  __Pyx_GIVEREF(__pyx_kp_s_End_time);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_s_End_time);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
  __pyx_t_2 = 0;
  if (__Pyx_Print(0, __pyx_t_1, 1) < 0) __PYX_ERR(0, 2409, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "WaveTools.py":2410
 *         print "Start Time =", self.series[0,0]
 *         print "End time= ",self.series[-1,0]
 *         print "Cutoff=", self.cutoff             # <<<<<<<<<<<<<<
 *         print "Er1 =", self.er1
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_cutoff); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2410, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2410, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_kp_s_Cutoff_2);
  __Pyx_GIVEREF(__pyx_kp_s_Cutoff_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_s_Cutoff_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __pyx_t_1 = 0;
  if (__Pyx_Print(0, __pyx_t_2, 1) < 0) __PYX_ERR(0, 2410, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "WaveTools.py":2411
 *         print "End time= ",self.series[-1,0]
 *         print "Cutoff=", self.cutoff
 *         print "Er1 =", self.er1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_er1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_kp_s_Er1);
  __Pyx_GIVEREF(__pyx_kp_s_Er1);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_s_Er1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
  __pyx_t_2 = 0;
  if (__Pyx_Print(0, __pyx_t_1, 1) < 0) __PYX_ERR(0, 2411, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "WaveTools.py":2401
 *         self.windOut = TS.windOut
 * 
 *     def printOut(self):             # <<<<<<<<<<<<<<
 *         """Prints some properties of the time series - ONLY FOR TESTING
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("WaveTools.RandomWavesFast.printOut", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":2452
 *            Switch for enabling optimised functions
 *     """
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *                  Tstart,
 *                  Tend,
 */

/* Python wrapper */
static int __pyx_pw_9WaveTools_13RandomNLWaves_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9WaveTools_13RandomNLWaves_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_Tstart = 0;
  CYTHON_UNUSED PyObject *__pyx_v_Tend = 0;
  PyObject *__pyx_v_Tp = 0;
  PyObject *__pyx_v_Hs = 0;
  PyObject *__pyx_v_mwl = 0;
  PyObject *__pyx_v_depth = 0;
  PyObject *__pyx_v_waveDir = 0;
  PyObject *__pyx_v_g = 0;
  PyObject *__pyx_v_N = 0;
  PyObject *__pyx_v_bandFactor = 0;
  PyObject *__pyx_v_spectName = 0;
  PyObject *__pyx_v_spectral_params = 0;
  PyObject *__pyx_v_phi = 0;
  PyObject *__pyx_v_fast = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_Tstart,&__pyx_n_s_Tend,&__pyx_n_s_Tp,&__pyx_n_s_Hs,&__pyx_n_s_mwl,&__pyx_n_s_depth,&__pyx_n_s_waveDir,&__pyx_n_s_g,&__pyx_n_s_N,&__pyx_n_s_bandFactor,&__pyx_n_s_spectName,&__pyx_n_s_spectral_params,&__pyx_n_s_phi,&__pyx_n_s_fast,0};
    PyObject* values[14] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0};

    /* "WaveTools.py":2464
 *                  bandFactor,              #width factor for band around peak frequency fp
 *                  spectName,               #random words will result in error and return the available spectra
 *                  spectral_params=None,    #JONPARAMS = {"gamma": 3.3, "TMA":True,"depth": depth}             # <<<<<<<<<<<<<<
 *                  phi=None,                 #array of component phases
 *                  fast = True                 ):
 */
    values[11] = ((PyObject *)Py_None);

    /* "WaveTools.py":2465
 *                  spectName,               #random words will result in error and return the available spectra
 *                  spectral_params=None,    #JONPARAMS = {"gamma": 3.3, "TMA":True,"depth": depth}
 *                  phi=None,                 #array of component phases             # <<<<<<<<<<<<<<
 *                  fast = True                 ):
 *         self.fast= fast
 */
    values[12] = ((PyObject *)Py_None);

    /* "WaveTools.py":2466
 *                  spectral_params=None,    #JONPARAMS = {"gamma": 3.3, "TMA":True,"depth": depth}
 *                  phi=None,                 #array of component phases
 *                  fast = True                 ):             # <<<<<<<<<<<<<<
 *         self.fast= fast
 *         RW = RandomWaves(Tp,Hs,mwl,depth,waveDir,g,N,bandFactor,spectName,spectral_params,phi,fast = self.fast )
 */
    values[13] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Tstart)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Tend)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 11, 14, 1); __PYX_ERR(0, 2452, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Tp)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 11, 14, 2); __PYX_ERR(0, 2452, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Hs)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 11, 14, 3); __PYX_ERR(0, 2452, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mwl)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 11, 14, 4); __PYX_ERR(0, 2452, __pyx_L3_error)
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_depth)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 11, 14, 5); __PYX_ERR(0, 2452, __pyx_L3_error)
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_waveDir)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 11, 14, 6); __PYX_ERR(0, 2452, __pyx_L3_error)
        }
        case  7:
        if (likely((values[7] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 11, 14, 7); __PYX_ERR(0, 2452, __pyx_L3_error)
        }
        case  8:
        if (likely((values[8] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_N)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 11, 14, 8); __PYX_ERR(0, 2452, __pyx_L3_error)
        }
        case  9:
        if (likely((values[9] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bandFactor)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 11, 14, 9); __PYX_ERR(0, 2452, __pyx_L3_error)
        }
        case 10:
        if (likely((values[10] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_spectName)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 11, 14, 10); __PYX_ERR(0, 2452, __pyx_L3_error)
        }
        case 11:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_spectral_params);
          if (value) { values[11] = value; kw_args--; }
        }
        case 12:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_phi);
          if (value) { values[12] = value; kw_args--; }
        }
        case 13:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fast);
          if (value) { values[13] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 2452, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_Tstart = values[0];
    __pyx_v_Tend = values[1];
    __pyx_v_Tp = values[2];
    __pyx_v_Hs = values[3];
    __pyx_v_mwl = values[4];
    __pyx_v_depth = values[5];
    __pyx_v_waveDir = values[6];
    __pyx_v_g = values[7];
    __pyx_v_N = values[8];
    __pyx_v_bandFactor = values[9];
    __pyx_v_spectName = values[10];
    __pyx_v_spectral_params = values[11];
    __pyx_v_phi = values[12];
    __pyx_v_fast = values[13];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 11, 14, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2452, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("WaveTools.RandomNLWaves.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9WaveTools_13RandomNLWaves___init__(((struct __pyx_obj_9WaveTools_RandomNLWaves *)__pyx_v_self), __pyx_v_Tstart, __pyx_v_Tend, __pyx_v_Tp, __pyx_v_Hs, __pyx_v_mwl, __pyx_v_depth, __pyx_v_waveDir, __pyx_v_g, __pyx_v_N, __pyx_v_bandFactor, __pyx_v_spectName, __pyx_v_spectral_params, __pyx_v_phi, __pyx_v_fast);

  /* "WaveTools.py":2452
 *            Switch for enabling optimised functions
 *     """
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *                  Tstart,
 *                  Tend,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9WaveTools_13RandomNLWaves___init__(struct __pyx_obj_9WaveTools_RandomNLWaves *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_Tstart, CYTHON_UNUSED PyObject *__pyx_v_Tend, PyObject *__pyx_v_Tp, PyObject *__pyx_v_Hs, PyObject *__pyx_v_mwl, PyObject *__pyx_v_depth, PyObject *__pyx_v_waveDir, PyObject *__pyx_v_g, PyObject *__pyx_v_N, PyObject *__pyx_v_bandFactor, PyObject *__pyx_v_spectName, PyObject *__pyx_v_spectral_params, PyObject *__pyx_v_phi, PyObject *__pyx_v_fast) {
  struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_RW = NULL;
  int __pyx_v_ii;
  PyObject *__pyx_v_ij = NULL;
  PyObject *__pyx_v_kk = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  PyObject *(*__pyx_t_11)(PyObject *);
  Py_ssize_t __pyx_t_12;
  PyObject *(*__pyx_t_13)(PyObject *);
  Py_ssize_t __pyx_t_14;
  double *__pyx_t_15;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "WaveTools.py":2467
 *                  phi=None,                 #array of component phases
 *                  fast = True                 ):
 *         self.fast= fast             # <<<<<<<<<<<<<<
 *         RW = RandomWaves(Tp,Hs,mwl,depth,waveDir,g,N,bandFactor,spectName,spectral_params,phi,fast = self.fast )
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_fast); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2467, __pyx_L1_error)
  __pyx_v_self->fast = __pyx_t_1;

  /* "WaveTools.py":2468
 *                  fast = True                 ):
 *         self.fast= fast
 *         RW = RandomWaves(Tp,Hs,mwl,depth,waveDir,g,N,bandFactor,spectName,spectral_params,phi,fast = self.fast )             # <<<<<<<<<<<<<<
 * 
 *         self.gAbs = RW.gAbs
 */
  __pyx_t_2 = PyTuple_New(11); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_Tp);
  __Pyx_GIVEREF(__pyx_v_Tp);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_Tp);
  __Pyx_INCREF(__pyx_v_Hs);
  __Pyx_GIVEREF(__pyx_v_Hs);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_Hs);
  __Pyx_INCREF(__pyx_v_mwl);
  __Pyx_GIVEREF(__pyx_v_mwl);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_mwl);
  __Pyx_INCREF(__pyx_v_depth);
  __Pyx_GIVEREF(__pyx_v_depth);
  PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_v_depth);
  __Pyx_INCREF(__pyx_v_waveDir);
  __Pyx_GIVEREF(__pyx_v_waveDir);
  PyTuple_SET_ITEM(__pyx_t_2, 4, __pyx_v_waveDir);
  __Pyx_INCREF(__pyx_v_g);
  __Pyx_GIVEREF(__pyx_v_g);
  PyTuple_SET_ITEM(__pyx_t_2, 5, __pyx_v_g);
  __Pyx_INCREF(__pyx_v_N);
  __Pyx_GIVEREF(__pyx_v_N);
  PyTuple_SET_ITEM(__pyx_t_2, 6, __pyx_v_N);
  __Pyx_INCREF(__pyx_v_bandFactor);
  __Pyx_GIVEREF(__pyx_v_bandFactor);
  PyTuple_SET_ITEM(__pyx_t_2, 7, __pyx_v_bandFactor);
  __Pyx_INCREF(__pyx_v_spectName);
  __Pyx_GIVEREF(__pyx_v_spectName);
  PyTuple_SET_ITEM(__pyx_t_2, 8, __pyx_v_spectName);
  __Pyx_INCREF(__pyx_v_spectral_params);
  __Pyx_GIVEREF(__pyx_v_spectral_params);
  PyTuple_SET_ITEM(__pyx_t_2, 9, __pyx_v_spectral_params);
  __Pyx_INCREF(__pyx_v_phi);
  __Pyx_GIVEREF(__pyx_v_phi);
  PyTuple_SET_ITEM(__pyx_t_2, 10, __pyx_v_phi);
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_self->fast); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_fast, __pyx_t_4) < 0) __PYX_ERR(0, 2468, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9WaveTools_RandomWaves), __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_RW = ((struct __pyx_obj_9WaveTools_RandomWaves *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "WaveTools.py":2470
 *         RW = RandomWaves(Tp,Hs,mwl,depth,waveDir,g,N,bandFactor,spectName,spectral_params,phi,fast = self.fast )
 * 
 *         self.gAbs = RW.gAbs             # <<<<<<<<<<<<<<
 *         self.eta_linear = RW.eta
 *         self.eta = self.wtError
 */
  __pyx_t_5 = __pyx_v_RW->gAbs;
  __pyx_v_self->gAbs = __pyx_t_5;

  /* "WaveTools.py":2471
 * 
 *         self.gAbs = RW.gAbs
 *         self.eta_linear = RW.eta             # <<<<<<<<<<<<<<
 *         self.eta = self.wtError
 *         self.u = self.wtError
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_RW), __pyx_n_s_eta); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2471, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __Pyx_GOTREF(__pyx_v_self->eta_linear);
  __Pyx_DECREF(__pyx_v_self->eta_linear);
  __pyx_v_self->eta_linear = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "WaveTools.py":2472
 *         self.gAbs = RW.gAbs
 *         self.eta_linear = RW.eta
 *         self.eta = self.wtError             # <<<<<<<<<<<<<<
 *         self.u = self.wtError
 *         self.omega = RW.omega
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_wtError); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __Pyx_GOTREF(__pyx_v_self->eta);
  __Pyx_DECREF(__pyx_v_self->eta);
  __pyx_v_self->eta = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "WaveTools.py":2473
 *         self.eta_linear = RW.eta
 *         self.eta = self.wtError
 *         self.u = self.wtError             # <<<<<<<<<<<<<<
 *         self.omega = RW.omega
 *         self.ai = RW.ai
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_wtError); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2473, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __Pyx_GOTREF(__pyx_v_self->u);
  __Pyx_DECREF(__pyx_v_self->u);
  __pyx_v_self->u = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "WaveTools.py":2474
 *         self.eta = self.wtError
 *         self.u = self.wtError
 *         self.omega = RW.omega             # <<<<<<<<<<<<<<
 *         self.ai = RW.ai
 *         self.ki = RW.ki
 */
  __pyx_t_4 = ((PyObject *)__pyx_v_RW->omega);
  __Pyx_INCREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __Pyx_GOTREF(__pyx_v_self->omega);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->omega));
  __pyx_v_self->omega = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "WaveTools.py":2475
 *         self.u = self.wtError
 *         self.omega = RW.omega
 *         self.ai = RW.ai             # <<<<<<<<<<<<<<
 *         self.ki = RW.ki
 *         self.kDir = RW.kDir
 */
  __pyx_t_4 = ((PyObject *)__pyx_v_RW->ai);
  __Pyx_INCREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __Pyx_GOTREF(__pyx_v_self->ai);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->ai));
  __pyx_v_self->ai = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "WaveTools.py":2476
 *         self.omega = RW.omega
 *         self.ai = RW.ai
 *         self.ki = RW.ki             # <<<<<<<<<<<<<<
 *         self.kDir = RW.kDir
 *         self.phi = RW.phi
 */
  __pyx_t_4 = ((PyObject *)__pyx_v_RW->ki);
  __Pyx_INCREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __Pyx_GOTREF(__pyx_v_self->ki);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->ki));
  __pyx_v_self->ki = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "WaveTools.py":2477
 *         self.ai = RW.ai
 *         self.ki = RW.ki
 *         self.kDir = RW.kDir             # <<<<<<<<<<<<<<
 *         self.phi = RW.phi
 *         self.N = N
 */
  __pyx_t_4 = ((PyObject *)__pyx_v_RW->kDir);
  __Pyx_INCREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __Pyx_GOTREF(__pyx_v_self->kDir);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->kDir));
  __pyx_v_self->kDir = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "WaveTools.py":2478
 *         self.ki = RW.ki
 *         self.kDir = RW.kDir
 *         self.phi = RW.phi             # <<<<<<<<<<<<<<
 *         self.N = N
 *         self.depth = depth
 */
  if (!(likely(((__pyx_v_RW->phi) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_RW->phi, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 2478, __pyx_L1_error)
  __pyx_t_4 = __pyx_v_RW->phi;
  __Pyx_INCREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __Pyx_GOTREF(__pyx_v_self->phi);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->phi));
  __pyx_v_self->phi = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "WaveTools.py":2479
 *         self.kDir = RW.kDir
 *         self.phi = RW.phi
 *         self.N = N             # <<<<<<<<<<<<<<
 *         self.depth = depth
 *         self.tanhKd = np.zeros(self.N,"d")
 */
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_N); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2479, __pyx_L1_error)
  __pyx_v_self->N = __pyx_t_6;

  /* "WaveTools.py":2480
 *         self.phi = RW.phi
 *         self.N = N
 *         self.depth = depth             # <<<<<<<<<<<<<<
 *         self.tanhKd = np.zeros(self.N,"d")
 *         self.sinhKd = np.zeros(self.N,"d")
 */
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_depth); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2480, __pyx_L1_error)
  __pyx_v_self->depth = __pyx_t_5;

  /* "WaveTools.py":2481
 *         self.N = N
 *         self.depth = depth
 *         self.tanhKd = np.zeros(self.N,"d")             # <<<<<<<<<<<<<<
 *         self.sinhKd = np.zeros(self.N,"d")
 *         for ii in range(self.N):
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2481, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2481, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->N); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2481, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_3, __pyx_n_s_d};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2481, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_3, __pyx_n_s_d};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2481, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_8 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2481, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_6, __pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_d);
    __Pyx_GIVEREF(__pyx_n_s_d);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_6, __pyx_n_s_d);
    __pyx_t_3 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2481, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 2481, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_4);
  __Pyx_GOTREF(__pyx_v_self->tanhKd);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->tanhKd));
  __pyx_v_self->tanhKd = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "WaveTools.py":2482
 *         self.depth = depth
 *         self.tanhKd = np.zeros(self.N,"d")
 *         self.sinhKd = np.zeros(self.N,"d")             # <<<<<<<<<<<<<<
 *         for ii in range(self.N):
 *             self.tanhKd[ii] = np.tanh(self.ki[ii]*self.depth)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->N); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_8)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_d};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2482, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_d};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2482, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2482, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_d);
    __Pyx_GIVEREF(__pyx_n_s_d);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_n_s_d);
    __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2482, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 2482, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_4);
  __Pyx_GOTREF(__pyx_v_self->sinhKd);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->sinhKd));
  __pyx_v_self->sinhKd = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "WaveTools.py":2483
 *         self.tanhKd = np.zeros(self.N,"d")
 *         self.sinhKd = np.zeros(self.N,"d")
 *         for ii in range(self.N):             # <<<<<<<<<<<<<<
 *             self.tanhKd[ii] = np.tanh(self.ki[ii]*self.depth)
 *             self.sinhKd[ii] = np.sinh(self.ki[ii]*self.depth)
 */
  __pyx_t_6 = __pyx_v_self->N;
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_6; __pyx_t_9+=1) {
    __pyx_v_ii = __pyx_t_9;

    /* "WaveTools.py":2484
 *         self.sinhKd = np.zeros(self.N,"d")
 *         for ii in range(self.N):
 *             self.tanhKd[ii] = np.tanh(self.ki[ii]*self.depth)             # <<<<<<<<<<<<<<
 *             self.sinhKd[ii] = np.sinh(self.ki[ii]*self.depth)
 *         self.waveDir = RW.waveDir
 */
    __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2484, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_tanh); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2484, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->ki), __pyx_v_ii, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2484, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->depth); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2484, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_Multiply(__pyx_t_8, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2484, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    if (!__pyx_t_2) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2484, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_3};
        __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2484, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_3};
        __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2484, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      {
        __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2484, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_2); __pyx_t_2 = NULL;
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2484, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_self->tanhKd), __pyx_v_ii, __pyx_t_4, int, 1, __Pyx_PyInt_From_int, 0, 1, 1) < 0)) __PYX_ERR(0, 2484, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "WaveTools.py":2485
 *         for ii in range(self.N):
 *             self.tanhKd[ii] = np.tanh(self.ki[ii]*self.depth)
 *             self.sinhKd[ii] = np.sinh(self.ki[ii]*self.depth)             # <<<<<<<<<<<<<<
 *         self.waveDir = RW.waveDir
 * 
 */
    __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2485, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_sinh); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2485, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->ki), __pyx_v_ii, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2485, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->depth); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2485, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyNumber_Multiply(__pyx_t_7, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2485, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    if (!__pyx_t_3) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2485, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_8)) {
        PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_2};
        __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2485, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
        PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_2};
        __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2485, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2485, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3); __pyx_t_3 = NULL;
        __Pyx_GIVEREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_2);
        __pyx_t_2 = 0;
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2485, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_self->sinhKd), __pyx_v_ii, __pyx_t_4, int, 1, __Pyx_PyInt_From_int, 0, 1, 1) < 0)) __PYX_ERR(0, 2485, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }

  /* "WaveTools.py":2486
 *             self.tanhKd[ii] = np.tanh(self.ki[ii]*self.depth)
 *             self.sinhKd[ii] = np.sinh(self.ki[ii]*self.depth)
 *         self.waveDir = RW.waveDir             # <<<<<<<<<<<<<<
 * 
 *         for ij in range(self.N):
 */
  __pyx_t_4 = ((PyObject *)__pyx_v_RW->waveDir);
  __Pyx_INCREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __Pyx_GOTREF(__pyx_v_self->waveDir);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->waveDir));
  __pyx_v_self->waveDir = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "WaveTools.py":2488
 *         self.waveDir = RW.waveDir
 * 
 *         for ij in range(self.N):             # <<<<<<<<<<<<<<
 *             for kk in range(3):
 *                 self.kDir_c[3*ij+kk] = self.kDir[ij,kk]
 */
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_self->N); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
    __pyx_t_8 = __pyx_t_4; __Pyx_INCREF(__pyx_t_8); __pyx_t_10 = 0;
    __pyx_t_11 = NULL;
  } else {
    __pyx_t_10 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2488, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_11 = Py_TYPE(__pyx_t_8)->tp_iternext; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2488, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  for (;;) {
    if (likely(!__pyx_t_11)) {
      if (likely(PyList_CheckExact(__pyx_t_8))) {
        if (__pyx_t_10 >= PyList_GET_SIZE(__pyx_t_8)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_10); __Pyx_INCREF(__pyx_t_4); __pyx_t_10++; if (unlikely(0 < 0)) __PYX_ERR(0, 2488, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_8, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2488, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_10 >= PyTuple_GET_SIZE(__pyx_t_8)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_10); __Pyx_INCREF(__pyx_t_4); __pyx_t_10++; if (unlikely(0 < 0)) __PYX_ERR(0, 2488, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_8, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2488, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_11(__pyx_t_8);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 2488, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_ij, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "WaveTools.py":2489
 * 
 *         for ij in range(self.N):
 *             for kk in range(3):             # <<<<<<<<<<<<<<
 *                 self.kDir_c[3*ij+kk] = self.kDir[ij,kk]
 *             self.omega_c[ij] = self.omega[ij]
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_tuple__192, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2489, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
      __pyx_t_7 = __pyx_t_4; __Pyx_INCREF(__pyx_t_7); __pyx_t_12 = 0;
      __pyx_t_13 = NULL;
    } else {
      __pyx_t_12 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2489, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_13 = Py_TYPE(__pyx_t_7)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2489, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    for (;;) {
      if (likely(!__pyx_t_13)) {
        if (likely(PyList_CheckExact(__pyx_t_7))) {
          if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_7)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_12); __Pyx_INCREF(__pyx_t_4); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 2489, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_7, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2489, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        } else {
          if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_7)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_12); __Pyx_INCREF(__pyx_t_4); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 2489, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_7, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2489, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        }
      } else {
        __pyx_t_4 = __pyx_t_13(__pyx_t_7);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 2489, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_4);
      }
      __Pyx_XDECREF_SET(__pyx_v_kk, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "WaveTools.py":2490
 *         for ij in range(self.N):
 *             for kk in range(3):
 *                 self.kDir_c[3*ij+kk] = self.kDir[ij,kk]             # <<<<<<<<<<<<<<
 *             self.omega_c[ij] = self.omega[ij]
 *             self.ki_c[ij]  =self.ki[ij]
 */
      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2490, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_v_ij);
      __Pyx_GIVEREF(__pyx_v_ij);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_ij);
      __Pyx_INCREF(__pyx_v_kk);
      __Pyx_GIVEREF(__pyx_v_kk);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_kk);
      __pyx_t_2 = PyObject_GetItem(((PyObject *)__pyx_v_self->kDir), __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2490, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2490, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyNumber_Multiply(__pyx_int_3, __pyx_v_ij); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2490, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = PyNumber_Add(__pyx_t_2, __pyx_v_kk); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2490, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_14 = __Pyx_PyIndex_AsSsize_t(__pyx_t_4); if (unlikely((__pyx_t_14 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 2490, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      (__pyx_v_self->kDir_c[__pyx_t_14]) = __pyx_t_5;

      /* "WaveTools.py":2489
 * 
 *         for ij in range(self.N):
 *             for kk in range(3):             # <<<<<<<<<<<<<<
 *                 self.kDir_c[3*ij+kk] = self.kDir[ij,kk]
 *             self.omega_c[ij] = self.omega[ij]
 */
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "WaveTools.py":2491
 *             for kk in range(3):
 *                 self.kDir_c[3*ij+kk] = self.kDir[ij,kk]
 *             self.omega_c[ij] = self.omega[ij]             # <<<<<<<<<<<<<<
 *             self.ki_c[ij]  =self.ki[ij]
 *             self.tanh_c[ij] = self.tanhKd[ij]
 */
    __pyx_t_7 = PyObject_GetItem(((PyObject *)__pyx_v_self->omega), __pyx_v_ij); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2491, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_7); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2491, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_v_ij); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 2491, __pyx_L1_error)
    (__pyx_v_self->omega_c[__pyx_t_12]) = __pyx_t_5;

    /* "WaveTools.py":2492
 *                 self.kDir_c[3*ij+kk] = self.kDir[ij,kk]
 *             self.omega_c[ij] = self.omega[ij]
 *             self.ki_c[ij]  =self.ki[ij]             # <<<<<<<<<<<<<<
 *             self.tanh_c[ij] = self.tanhKd[ij]
 *             self.sinh_c[ij] = self.sinhKd[ij]
 */
    __pyx_t_7 = PyObject_GetItem(((PyObject *)__pyx_v_self->ki), __pyx_v_ij); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2492, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_7); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2492, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_v_ij); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 2492, __pyx_L1_error)
    (__pyx_v_self->ki_c[__pyx_t_12]) = __pyx_t_5;

    /* "WaveTools.py":2493
 *             self.omega_c[ij] = self.omega[ij]
 *             self.ki_c[ij]  =self.ki[ij]
 *             self.tanh_c[ij] = self.tanhKd[ij]             # <<<<<<<<<<<<<<
 *             self.sinh_c[ij] = self.sinhKd[ij]
 *             self.ai_c[ij] = self.ai[ij]
 */
    __pyx_t_7 = PyObject_GetItem(((PyObject *)__pyx_v_self->tanhKd), __pyx_v_ij); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2493, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_7); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2493, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_v_ij); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 2493, __pyx_L1_error)
    (__pyx_v_self->tanh_c[__pyx_t_12]) = __pyx_t_5;

    /* "WaveTools.py":2494
 *             self.ki_c[ij]  =self.ki[ij]
 *             self.tanh_c[ij] = self.tanhKd[ij]
 *             self.sinh_c[ij] = self.sinhKd[ij]             # <<<<<<<<<<<<<<
 *             self.ai_c[ij] = self.ai[ij]
 *             self.phi_c[ij] = self.phi[ij]
 */
    __pyx_t_7 = PyObject_GetItem(((PyObject *)__pyx_v_self->sinhKd), __pyx_v_ij); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2494, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_7); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2494, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_v_ij); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 2494, __pyx_L1_error)
    (__pyx_v_self->sinh_c[__pyx_t_12]) = __pyx_t_5;

    /* "WaveTools.py":2495
 *             self.tanh_c[ij] = self.tanhKd[ij]
 *             self.sinh_c[ij] = self.sinhKd[ij]
 *             self.ai_c[ij] = self.ai[ij]             # <<<<<<<<<<<<<<
 *             self.phi_c[ij] = self.phi[ij]
 * 
 */
    __pyx_t_7 = PyObject_GetItem(((PyObject *)__pyx_v_self->ai), __pyx_v_ij); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2495, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_7); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2495, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_v_ij); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 2495, __pyx_L1_error)
    (__pyx_v_self->ai_c[__pyx_t_12]) = __pyx_t_5;

    /* "WaveTools.py":2496
 *             self.sinh_c[ij] = self.sinhKd[ij]
 *             self.ai_c[ij] = self.ai[ij]
 *             self.phi_c[ij] = self.phi[ij]             # <<<<<<<<<<<<<<
 * 
 *         self.kDir_ = self.kDir_c
 */
    __pyx_t_7 = PyObject_GetItem(((PyObject *)__pyx_v_self->phi), __pyx_v_ij); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2496, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_7); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2496, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_v_ij); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 2496, __pyx_L1_error)
    (__pyx_v_self->phi_c[__pyx_t_12]) = __pyx_t_5;

    /* "WaveTools.py":2488
 *         self.waveDir = RW.waveDir
 * 
 *         for ij in range(self.N):             # <<<<<<<<<<<<<<
 *             for kk in range(3):
 *                 self.kDir_c[3*ij+kk] = self.kDir[ij,kk]
 */
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "WaveTools.py":2498
 *             self.phi_c[ij] = self.phi[ij]
 * 
 *         self.kDir_ = self.kDir_c             # <<<<<<<<<<<<<<
 *         self.omega_ = self.omega_c
 *         self.ki_  =self.ki_c
 */
  __pyx_t_15 = __pyx_v_self->kDir_c;
  __pyx_v_self->kDir_ = __pyx_t_15;

  /* "WaveTools.py":2499
 * 
 *         self.kDir_ = self.kDir_c
 *         self.omega_ = self.omega_c             # <<<<<<<<<<<<<<
 *         self.ki_  =self.ki_c
 *         self.ai_ = self.ai_c
 */
  __pyx_t_15 = __pyx_v_self->omega_c;
  __pyx_v_self->omega_ = __pyx_t_15;

  /* "WaveTools.py":2500
 *         self.kDir_ = self.kDir_c
 *         self.omega_ = self.omega_c
 *         self.ki_  =self.ki_c             # <<<<<<<<<<<<<<
 *         self.ai_ = self.ai_c
 *         self.tanhKd_ = self.tanh_c
 */
  __pyx_t_15 = __pyx_v_self->ki_c;
  __pyx_v_self->ki_ = __pyx_t_15;

  /* "WaveTools.py":2501
 *         self.omega_ = self.omega_c
 *         self.ki_  =self.ki_c
 *         self.ai_ = self.ai_c             # <<<<<<<<<<<<<<
 *         self.tanhKd_ = self.tanh_c
 *         self.sinhKd_ = self.sinh_c
 */
  __pyx_t_15 = __pyx_v_self->ai_c;
  __pyx_v_self->ai_ = __pyx_t_15;

  /* "WaveTools.py":2502
 *         self.ki_  =self.ki_c
 *         self.ai_ = self.ai_c
 *         self.tanhKd_ = self.tanh_c             # <<<<<<<<<<<<<<
 *         self.sinhKd_ = self.sinh_c
 *         self.phi_ = self.phi_c
 */
  __pyx_t_15 = __pyx_v_self->tanh_c;
  __pyx_v_self->tanhKd_ = __pyx_t_15;

  /* "WaveTools.py":2503
 *         self.ai_ = self.ai_c
 *         self.tanhKd_ = self.tanh_c
 *         self.sinhKd_ = self.sinh_c             # <<<<<<<<<<<<<<
 *         self.phi_ = self.phi_c
 * 
 */
  __pyx_t_15 = __pyx_v_self->sinh_c;
  __pyx_v_self->sinhKd_ = __pyx_t_15;

  /* "WaveTools.py":2504
 *         self.tanhKd_ = self.tanh_c
 *         self.sinhKd_ = self.sinh_c
 *         self.phi_ = self.phi_c             # <<<<<<<<<<<<<<
 * 
 *         #c++ declarations
 */
  __pyx_t_15 = __pyx_v_self->phi_c;
  __pyx_v_self->phi_ = __pyx_t_15;

  /* "WaveTools.py":2452
 *            Switch for enabling optimised functions
 *     """
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *                  Tstart,
 *                  Tend,
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("WaveTools.RandomNLWaves.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_RW);
  __Pyx_XDECREF(__pyx_v_ij);
  __Pyx_XDECREF(__pyx_v_kk);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":2508
 *         #c++ declarations
 * 
 *     def _cpp_eta_2ndOrder(self,x,t):             # <<<<<<<<<<<<<<
 *         return __cpp_eta2nd(x,t,self.kDir_,self.ki_,self.omega_,self.phi_,self.ai_,self.N,self.sinhKd_,self.tanhKd_, self.fast)
 *     def eta_2ndOrder(self,x,t):
 */

static double __pyx_f_9WaveTools_13RandomNLWaves__cpp_eta_2ndOrder(struct __pyx_obj_9WaveTools_RandomNLWaves *__pyx_v_self, double *__pyx_v_x, double __pyx_v_t) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_cpp_eta_2ndOrder", 0);

  /* "WaveTools.py":2509
 * 
 *     def _cpp_eta_2ndOrder(self,x,t):
 *         return __cpp_eta2nd(x,t,self.kDir_,self.ki_,self.omega_,self.phi_,self.ai_,self.N,self.sinhKd_,self.tanhKd_, self.fast)             # <<<<<<<<<<<<<<
 *     def eta_2ndOrder(self,x,t):
 *         """Calculates the free surface elevation for 2nd-order terms
 */
  __pyx_r = proteus::__cpp_eta2nd(__pyx_v_x, __pyx_v_t, __pyx_v_self->kDir_, __pyx_v_self->ki_, __pyx_v_self->omega_, __pyx_v_self->phi_, __pyx_v_self->ai_, __pyx_v_self->N, __pyx_v_self->sinhKd_, __pyx_v_self->tanhKd_, __pyx_v_self->fast);
  goto __pyx_L0;

  /* "WaveTools.py":2508
 *         #c++ declarations
 * 
 *     def _cpp_eta_2ndOrder(self,x,t):             # <<<<<<<<<<<<<<
 *         return __cpp_eta2nd(x,t,self.kDir_,self.ki_,self.omega_,self.phi_,self.ai_,self.N,self.sinhKd_,self.tanhKd_, self.fast)
 *     def eta_2ndOrder(self,x,t):
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":2510
 *     def _cpp_eta_2ndOrder(self,x,t):
 *         return __cpp_eta2nd(x,t,self.kDir_,self.ki_,self.omega_,self.phi_,self.ai_,self.N,self.sinhKd_,self.tanhKd_, self.fast)
 *     def eta_2ndOrder(self,x,t):             # <<<<<<<<<<<<<<
 *         """Calculates the free surface elevation for 2nd-order terms
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_13RandomNLWaves_3eta_2ndOrder(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9WaveTools_13RandomNLWaves_2eta_2ndOrder[] = "Calculates the free surface elevation for 2nd-order terms\n\n        Uses 2nd order random wave theory\n\n        Parameters\n        ----------\n        x : numpy.ndarray\n            Position vector\n        t : float\n            Time variable\n\n        Returns\n        --------\n        float\n            Free-surface elevation as a float\n\n        ";
static PyMethodDef __pyx_mdef_9WaveTools_13RandomNLWaves_3eta_2ndOrder = {"eta_2ndOrder", (PyCFunction)__pyx_pw_9WaveTools_13RandomNLWaves_3eta_2ndOrder, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_13RandomNLWaves_2eta_2ndOrder};
static PyObject *__pyx_pw_9WaveTools_13RandomNLWaves_3eta_2ndOrder(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_t = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("eta_2ndOrder (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_t,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("eta_2ndOrder", 1, 2, 2, 1); __PYX_ERR(0, 2510, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "eta_2ndOrder") < 0)) __PYX_ERR(0, 2510, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = values[0];
    __pyx_v_t = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("eta_2ndOrder", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2510, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("WaveTools.RandomNLWaves.eta_2ndOrder", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9WaveTools_13RandomNLWaves_2eta_2ndOrder(((struct __pyx_obj_9WaveTools_RandomNLWaves *)__pyx_v_self), __pyx_v_x, __pyx_v_t);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_13RandomNLWaves_2eta_2ndOrder(struct __pyx_obj_9WaveTools_RandomNLWaves *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_t) {
  double __pyx_v_xx[3];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  __Pyx_RefNannySetupContext("eta_2ndOrder", 0);

  /* "WaveTools.py":2530
 * 
 *         cython.declare(xx=cython.double[3])
 *         xx[0] = x[0]             # <<<<<<<<<<<<<<
 *         xx[1] = x[1]
 *         xx[2] = x[2]
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_x, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2530, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2530, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  (__pyx_v_xx[0]) = __pyx_t_2;

  /* "WaveTools.py":2531
 *         cython.declare(xx=cython.double[3])
 *         xx[0] = x[0]
 *         xx[1] = x[1]             # <<<<<<<<<<<<<<
 *         xx[2] = x[2]
 *         return self._cpp_eta_2ndOrder(xx,t)
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_x, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2531, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2531, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  (__pyx_v_xx[1]) = __pyx_t_2;

  /* "WaveTools.py":2532
 *         xx[0] = x[0]
 *         xx[1] = x[1]
 *         xx[2] = x[2]             # <<<<<<<<<<<<<<
 *         return self._cpp_eta_2ndOrder(xx,t)
 *         '''
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_x, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2532, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2532, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  (__pyx_v_xx[2]) = __pyx_t_2;

  /* "WaveTools.py":2533
 *         xx[1] = x[1]
 *         xx[2] = x[2]
 *         return self._cpp_eta_2ndOrder(xx,t)             # <<<<<<<<<<<<<<
 *         '''
 *         Eta2nd = 0.
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_t); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2533, __pyx_L1_error)
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_vtabstruct_9WaveTools_RandomNLWaves *)__pyx_v_self->__pyx_vtab)->_cpp_eta_2ndOrder(__pyx_v_self, __pyx_v_xx, __pyx_t_2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2533, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "WaveTools.py":2510
 *     def _cpp_eta_2ndOrder(self,x,t):
 *         return __cpp_eta2nd(x,t,self.kDir_,self.ki_,self.omega_,self.phi_,self.ai_,self.N,self.sinhKd_,self.tanhKd_, self.fast)
 *     def eta_2ndOrder(self,x,t):             # <<<<<<<<<<<<<<
 *         """Calculates the free surface elevation for 2nd-order terms
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("WaveTools.RandomNLWaves.eta_2ndOrder", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":2543
 *         '''
 * 
 *     def _cpp_eta_short(self,x,t):             # <<<<<<<<<<<<<<
 *         return __cpp_eta_short(x,t,self.kDir_,self.ki_,self.omega_,self.phi_,self.ai_,self.N,self.sinhKd_,self.tanhKd_,self.gAbs, self.fast)
 * 
 */

static double __pyx_f_9WaveTools_13RandomNLWaves__cpp_eta_short(struct __pyx_obj_9WaveTools_RandomNLWaves *__pyx_v_self, double *__pyx_v_x, double __pyx_v_t) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_cpp_eta_short", 0);

  /* "WaveTools.py":2544
 * 
 *     def _cpp_eta_short(self,x,t):
 *         return __cpp_eta_short(x,t,self.kDir_,self.ki_,self.omega_,self.phi_,self.ai_,self.N,self.sinhKd_,self.tanhKd_,self.gAbs, self.fast)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = proteus::__cpp_eta_short(__pyx_v_x, __pyx_v_t, __pyx_v_self->kDir_, __pyx_v_self->ki_, __pyx_v_self->omega_, __pyx_v_self->phi_, __pyx_v_self->ai_, __pyx_v_self->N, __pyx_v_self->sinhKd_, __pyx_v_self->tanhKd_, __pyx_v_self->gAbs, __pyx_v_self->fast);
  goto __pyx_L0;

  /* "WaveTools.py":2543
 *         '''
 * 
 *     def _cpp_eta_short(self,x,t):             # <<<<<<<<<<<<<<
 *         return __cpp_eta_short(x,t,self.kDir_,self.ki_,self.omega_,self.phi_,self.ai_,self.N,self.sinhKd_,self.tanhKd_,self.gAbs, self.fast)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":2548
 * 
 *     #higher harmonics
 *     def eta_short(self,x,t):             # <<<<<<<<<<<<<<
 *         """Calculates the free surface elevation for higher-order terms
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_13RandomNLWaves_5eta_short(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9WaveTools_13RandomNLWaves_4eta_short[] = "Calculates the free surface elevation for higher-order terms\n\n        Uses 2nd order random wave theory\n\n        Parameters\n        ----------\n        x : numpy.ndarray\n            Position vector\n        t : float\n            Time variable\n\n        Returns\n        --------\n        float\n            Free-surface elevation as a float\n\n        ";
static PyMethodDef __pyx_mdef_9WaveTools_13RandomNLWaves_5eta_short = {"eta_short", (PyCFunction)__pyx_pw_9WaveTools_13RandomNLWaves_5eta_short, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_13RandomNLWaves_4eta_short};
static PyObject *__pyx_pw_9WaveTools_13RandomNLWaves_5eta_short(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_t = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("eta_short (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_t,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("eta_short", 1, 2, 2, 1); __PYX_ERR(0, 2548, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "eta_short") < 0)) __PYX_ERR(0, 2548, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = values[0];
    __pyx_v_t = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("eta_short", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2548, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("WaveTools.RandomNLWaves.eta_short", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9WaveTools_13RandomNLWaves_4eta_short(((struct __pyx_obj_9WaveTools_RandomNLWaves *)__pyx_v_self), __pyx_v_x, __pyx_v_t);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_13RandomNLWaves_4eta_short(struct __pyx_obj_9WaveTools_RandomNLWaves *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_t) {
  double __pyx_v_xx[3];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  __Pyx_RefNannySetupContext("eta_short", 0);

  /* "WaveTools.py":2567
 *         """
 *         cython.declare(xx=cython.double[3])
 *         xx[0] = x[0]             # <<<<<<<<<<<<<<
 *         xx[1] = x[1]
 *         xx[2] = x[2]
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_x, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2567, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2567, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  (__pyx_v_xx[0]) = __pyx_t_2;

  /* "WaveTools.py":2568
 *         cython.declare(xx=cython.double[3])
 *         xx[0] = x[0]
 *         xx[1] = x[1]             # <<<<<<<<<<<<<<
 *         xx[2] = x[2]
 *         return self._cpp_eta_short(xx,t)
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_x, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2568, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2568, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  (__pyx_v_xx[1]) = __pyx_t_2;

  /* "WaveTools.py":2569
 *         xx[0] = x[0]
 *         xx[1] = x[1]
 *         xx[2] = x[2]             # <<<<<<<<<<<<<<
 *         return self._cpp_eta_short(xx,t)
 *         '''
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_x, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2569, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2569, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  (__pyx_v_xx[2]) = __pyx_t_2;

  /* "WaveTools.py":2570
 *         xx[1] = x[1]
 *         xx[2] = x[2]
 *         return self._cpp_eta_short(xx,t)             # <<<<<<<<<<<<<<
 *         '''
 *         Etashort = 0.
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_t); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2570, __pyx_L1_error)
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_vtabstruct_9WaveTools_RandomNLWaves *)__pyx_v_self->__pyx_vtab)->_cpp_eta_short(__pyx_v_self, __pyx_v_xx, __pyx_t_2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2570, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "WaveTools.py":2548
 * 
 *     #higher harmonics
 *     def eta_short(self,x,t):             # <<<<<<<<<<<<<<
 *         """Calculates the free surface elevation for higher-order terms
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("WaveTools.RandomNLWaves.eta_short", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":2585
 *         '''
 * 
 *     def _cpp_eta_long(self,x,t):             # <<<<<<<<<<<<<<
 *         return __cpp_eta_long(x,t,self.kDir_,self.ki_,self.omega_,self.phi_,self.ai_,self.N,self.sinhKd_,self.tanhKd_,self.gAbs, self.fast)
 * 
 */

static double __pyx_f_9WaveTools_13RandomNLWaves__cpp_eta_long(struct __pyx_obj_9WaveTools_RandomNLWaves *__pyx_v_self, double *__pyx_v_x, double __pyx_v_t) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_cpp_eta_long", 0);

  /* "WaveTools.py":2586
 * 
 *     def _cpp_eta_long(self,x,t):
 *         return __cpp_eta_long(x,t,self.kDir_,self.ki_,self.omega_,self.phi_,self.ai_,self.N,self.sinhKd_,self.tanhKd_,self.gAbs, self.fast)             # <<<<<<<<<<<<<<
 * 
 *     #lower harmonics
 */
  __pyx_r = proteus::__cpp_eta_long(__pyx_v_x, __pyx_v_t, __pyx_v_self->kDir_, __pyx_v_self->ki_, __pyx_v_self->omega_, __pyx_v_self->phi_, __pyx_v_self->ai_, __pyx_v_self->N, __pyx_v_self->sinhKd_, __pyx_v_self->tanhKd_, __pyx_v_self->gAbs, __pyx_v_self->fast);
  goto __pyx_L0;

  /* "WaveTools.py":2585
 *         '''
 * 
 *     def _cpp_eta_long(self,x,t):             # <<<<<<<<<<<<<<
 *         return __cpp_eta_long(x,t,self.kDir_,self.ki_,self.omega_,self.phi_,self.ai_,self.N,self.sinhKd_,self.tanhKd_,self.gAbs, self.fast)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":2589
 * 
 *     #lower harmonics
 *     def eta_long(self,x,t):             # <<<<<<<<<<<<<<
 *         """Calculates the free surface elevation for lower-order terms
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_13RandomNLWaves_7eta_long(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9WaveTools_13RandomNLWaves_6eta_long[] = "Calculates the free surface elevation for lower-order terms\n\n        Uses 2nd order random wave theory\n\n        Parameters\n        ----------\n        x : numpy.ndarray\n            Position vector\n        t : float\n            Time variable\n\n        Returns\n        --------\n        float\n            Free-surface elevation as a float\n\n        ";
static PyMethodDef __pyx_mdef_9WaveTools_13RandomNLWaves_7eta_long = {"eta_long", (PyCFunction)__pyx_pw_9WaveTools_13RandomNLWaves_7eta_long, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_13RandomNLWaves_6eta_long};
static PyObject *__pyx_pw_9WaveTools_13RandomNLWaves_7eta_long(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_t = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("eta_long (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_t,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("eta_long", 1, 2, 2, 1); __PYX_ERR(0, 2589, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "eta_long") < 0)) __PYX_ERR(0, 2589, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = values[0];
    __pyx_v_t = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("eta_long", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2589, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("WaveTools.RandomNLWaves.eta_long", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9WaveTools_13RandomNLWaves_6eta_long(((struct __pyx_obj_9WaveTools_RandomNLWaves *)__pyx_v_self), __pyx_v_x, __pyx_v_t);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_13RandomNLWaves_6eta_long(struct __pyx_obj_9WaveTools_RandomNLWaves *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_t) {
  double __pyx_v_xx[3];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  __Pyx_RefNannySetupContext("eta_long", 0);

  /* "WaveTools.py":2608
 *         """
 *         cython.declare(xx=cython.double[3])
 *         xx[0] = x[0]             # <<<<<<<<<<<<<<
 *         xx[1] = x[1]
 *         xx[2] = x[2]
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_x, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2608, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  (__pyx_v_xx[0]) = __pyx_t_2;

  /* "WaveTools.py":2609
 *         cython.declare(xx=cython.double[3])
 *         xx[0] = x[0]
 *         xx[1] = x[1]             # <<<<<<<<<<<<<<
 *         xx[2] = x[2]
 *         return self._cpp_eta_long(xx,t)
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_x, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2609, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2609, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  (__pyx_v_xx[1]) = __pyx_t_2;

  /* "WaveTools.py":2610
 *         xx[0] = x[0]
 *         xx[1] = x[1]
 *         xx[2] = x[2]             # <<<<<<<<<<<<<<
 *         return self._cpp_eta_long(xx,t)
 * 
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_x, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2610, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  (__pyx_v_xx[2]) = __pyx_t_2;

  /* "WaveTools.py":2611
 *         xx[1] = x[1]
 *         xx[2] = x[2]
 *         return self._cpp_eta_long(xx,t)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_t); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2611, __pyx_L1_error)
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_vtabstruct_9WaveTools_RandomNLWaves *)__pyx_v_self->__pyx_vtab)->_cpp_eta_long(__pyx_v_self, __pyx_v_xx, __pyx_t_2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2611, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "WaveTools.py":2589
 * 
 *     #lower harmonics
 *     def eta_long(self,x,t):             # <<<<<<<<<<<<<<
 *         """Calculates the free surface elevation for lower-order terms
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("WaveTools.RandomNLWaves.eta_long", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":2627
 * 
 *     #set-up calculation
 *     def eta_setUp(self,x,t):             # <<<<<<<<<<<<<<
 *         """Calculates the free surface elevation set up
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_13RandomNLWaves_9eta_setUp(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9WaveTools_13RandomNLWaves_8eta_setUp[] = "Calculates the free surface elevation set up\n\n        Uses 2nd order random wave theory\n\n        Parameters\n        ----------\n        x : numpy.ndarray\n            Position vector\n        t : float\n            Time variable\n\n        Returns\n        --------\n        float\n            Free-surface elevation as a float\n\n        ";
static PyMethodDef __pyx_mdef_9WaveTools_13RandomNLWaves_9eta_setUp = {"eta_setUp", (PyCFunction)__pyx_pw_9WaveTools_13RandomNLWaves_9eta_setUp, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_13RandomNLWaves_8eta_setUp};
static PyObject *__pyx_pw_9WaveTools_13RandomNLWaves_9eta_setUp(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_x = 0;
  CYTHON_UNUSED PyObject *__pyx_v_t = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("eta_setUp (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_t,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("eta_setUp", 1, 2, 2, 1); __PYX_ERR(0, 2627, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "eta_setUp") < 0)) __PYX_ERR(0, 2627, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = values[0];
    __pyx_v_t = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("eta_setUp", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2627, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("WaveTools.RandomNLWaves.eta_setUp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9WaveTools_13RandomNLWaves_8eta_setUp(((struct __pyx_obj_9WaveTools_RandomNLWaves *)__pyx_v_self), __pyx_v_x, __pyx_v_t);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_13RandomNLWaves_8eta_setUp(struct __pyx_obj_9WaveTools_RandomNLWaves *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_x, CYTHON_UNUSED PyObject *__pyx_v_t) {
  PyObject *__pyx_v_EtasetUp = NULL;
  long __pyx_v_i;
  PyObject *__pyx_v_wwi_setUp = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  long __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  double __pyx_t_7;
  __Pyx_RefNannySetupContext("eta_setUp", 0);

  /* "WaveTools.py":2647
 * 
 * 
 *         EtasetUp = 0.             # <<<<<<<<<<<<<<
 *         for i in range(0,self.N):
 *             wwi_setUp = (self.ai[i]**2*self.ki[i])/(2*sinh(2*self.ki[i]*self.depth))
 */
  __Pyx_INCREF(__pyx_float_0_);
  __pyx_v_EtasetUp = __pyx_float_0_;

  /* "WaveTools.py":2648
 * 
 *         EtasetUp = 0.
 *         for i in range(0,self.N):             # <<<<<<<<<<<<<<
 *             wwi_setUp = (self.ai[i]**2*self.ki[i])/(2*sinh(2*self.ki[i]*self.depth))
 *             EtasetUp += wwi_setUp
 */
  __pyx_t_1 = __pyx_v_self->N;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "WaveTools.py":2649
 *         EtasetUp = 0.
 *         for i in range(0,self.N):
 *             wwi_setUp = (self.ai[i]**2*self.ki[i])/(2*sinh(2*self.ki[i]*self.depth))             # <<<<<<<<<<<<<<
 *             EtasetUp += wwi_setUp
 *         return EtasetUp
 */
    __pyx_t_3 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->ai), __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2649, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyNumber_Power(__pyx_t_3, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2649, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->ki), __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2649, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyNumber_Multiply(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2649, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->ki), __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2649, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyNumber_Multiply(__pyx_int_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2649, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->depth); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2649, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = PyNumber_Multiply(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2649, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2649, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyFloat_FromDouble((2.0 * sinh(__pyx_t_7))); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2649, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2649, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF_SET(__pyx_v_wwi_setUp, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "WaveTools.py":2650
 *         for i in range(0,self.N):
 *             wwi_setUp = (self.ai[i]**2*self.ki[i])/(2*sinh(2*self.ki[i]*self.depth))
 *             EtasetUp += wwi_setUp             # <<<<<<<<<<<<<<
 *         return EtasetUp
 * 
 */
    __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_EtasetUp, __pyx_v_wwi_setUp); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2650, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_EtasetUp, __pyx_t_3);
    __pyx_t_3 = 0;
  }

  /* "WaveTools.py":2651
 *             wwi_setUp = (self.ai[i]**2*self.ki[i])/(2*sinh(2*self.ki[i]*self.depth))
 *             EtasetUp += wwi_setUp
 *         return EtasetUp             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_EtasetUp);
  __pyx_r = __pyx_v_EtasetUp;
  goto __pyx_L0;

  /* "WaveTools.py":2627
 * 
 *     #set-up calculation
 *     def eta_setUp(self,x,t):             # <<<<<<<<<<<<<<
 *         """Calculates the free surface elevation set up
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("WaveTools.RandomNLWaves.eta_setUp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_EtasetUp);
  __Pyx_XDECREF(__pyx_v_wwi_setUp);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":2656
 * 
 *     #overall free surface elevation
 *     def eta_overall(self,x,t,setUp=False):             # <<<<<<<<<<<<<<
 *         """Calculates the free surface elevation with 2nd order corrections
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_13RandomNLWaves_11eta_overall(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9WaveTools_13RandomNLWaves_10eta_overall[] = "Calculates the free surface elevation with 2nd order corrections\n\n        Uses 2nd order random wave theory\n\n        Parameters\n        ----------\n        x : numpy.ndarray\n            Position vector\n        t : float\n            Time variable\n\n        Returns\n        --------\n        float\n            Free-surface elevation as a float\n\n        ";
static PyMethodDef __pyx_mdef_9WaveTools_13RandomNLWaves_11eta_overall = {"eta_overall", (PyCFunction)__pyx_pw_9WaveTools_13RandomNLWaves_11eta_overall, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_13RandomNLWaves_10eta_overall};
static PyObject *__pyx_pw_9WaveTools_13RandomNLWaves_11eta_overall(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_t = 0;
  PyObject *__pyx_v_setUp = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("eta_overall (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_t,&__pyx_n_s_setUp,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("eta_overall", 0, 2, 3, 1); __PYX_ERR(0, 2656, __pyx_L3_error)
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_setUp);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "eta_overall") < 0)) __PYX_ERR(0, 2656, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_x = values[0];
    __pyx_v_t = values[1];
    __pyx_v_setUp = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("eta_overall", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2656, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("WaveTools.RandomNLWaves.eta_overall", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9WaveTools_13RandomNLWaves_10eta_overall(((struct __pyx_obj_9WaveTools_RandomNLWaves *)__pyx_v_self), __pyx_v_x, __pyx_v_t, __pyx_v_setUp);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_13RandomNLWaves_10eta_overall(struct __pyx_obj_9WaveTools_RandomNLWaves *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_t, PyObject *__pyx_v_setUp) {
  double __pyx_v_xx[3];
  PyObject *__pyx_v_Etaoverall = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("eta_overall", 0);

  /* "WaveTools.py":2675
 *         """
 *         cython.declare(xx=cython.double[3])
 *         xx[0] = x[0]             # <<<<<<<<<<<<<<
 *         xx[1] = x[1]
 *         xx[2] = x[2]
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_x, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2675, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2675, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  (__pyx_v_xx[0]) = __pyx_t_2;

  /* "WaveTools.py":2676
 *         cython.declare(xx=cython.double[3])
 *         xx[0] = x[0]
 *         xx[1] = x[1]             # <<<<<<<<<<<<<<
 *         xx[2] = x[2]
 *         Etaoverall =  self.eta_linear(x,t) + self._cpp_eta_2ndOrder(xx,t) + self._cpp_eta_short(xx,t) + self._cpp_eta_long(xx,t)
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_x, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2676, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2676, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  (__pyx_v_xx[1]) = __pyx_t_2;

  /* "WaveTools.py":2677
 *         xx[0] = x[0]
 *         xx[1] = x[1]
 *         xx[2] = x[2]             # <<<<<<<<<<<<<<
 *         Etaoverall =  self.eta_linear(x,t) + self._cpp_eta_2ndOrder(xx,t) + self._cpp_eta_short(xx,t) + self._cpp_eta_long(xx,t)
 *         if setUp:
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_x, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2677, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2677, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  (__pyx_v_xx[2]) = __pyx_t_2;

  /* "WaveTools.py":2678
 *         xx[1] = x[1]
 *         xx[2] = x[2]
 *         Etaoverall =  self.eta_linear(x,t) + self._cpp_eta_2ndOrder(xx,t) + self._cpp_eta_short(xx,t) + self._cpp_eta_long(xx,t)             # <<<<<<<<<<<<<<
 *         if setUp:
 *             Etaoverall -= self.eta_setUp(xx,t)
 */
  __Pyx_INCREF(__pyx_v_self->eta_linear);
  __pyx_t_3 = __pyx_v_self->eta_linear; __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_x, __pyx_v_t};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2678, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_x, __pyx_v_t};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2678, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2678, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_v_x);
    __Pyx_GIVEREF(__pyx_v_x);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_v_x);
    __Pyx_INCREF(__pyx_v_t);
    __Pyx_GIVEREF(__pyx_v_t);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_v_t);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2678, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_t); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2678, __pyx_L1_error)
  __pyx_t_3 = PyFloat_FromDouble(((struct __pyx_vtabstruct_9WaveTools_RandomNLWaves *)__pyx_v_self->__pyx_vtab)->_cpp_eta_2ndOrder(__pyx_v_self, __pyx_v_xx, __pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = PyNumber_Add(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_t); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2678, __pyx_L1_error)
  __pyx_t_3 = PyFloat_FromDouble(((struct __pyx_vtabstruct_9WaveTools_RandomNLWaves *)__pyx_v_self->__pyx_vtab)->_cpp_eta_short(__pyx_v_self, __pyx_v_xx, __pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyNumber_Add(__pyx_t_6, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_t); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2678, __pyx_L1_error)
  __pyx_t_3 = PyFloat_FromDouble(((struct __pyx_vtabstruct_9WaveTools_RandomNLWaves *)__pyx_v_self->__pyx_vtab)->_cpp_eta_long(__pyx_v_self, __pyx_v_xx, __pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = PyNumber_Add(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_Etaoverall = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "WaveTools.py":2679
 *         xx[2] = x[2]
 *         Etaoverall =  self.eta_linear(x,t) + self._cpp_eta_2ndOrder(xx,t) + self._cpp_eta_short(xx,t) + self._cpp_eta_long(xx,t)
 *         if setUp:             # <<<<<<<<<<<<<<
 *             Etaoverall -= self.eta_setUp(xx,t)
 *         return Etaoverall
 */
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_v_setUp); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 2679, __pyx_L1_error)
  if (__pyx_t_7) {

    /* "WaveTools.py":2680
 *         Etaoverall =  self.eta_linear(x,t) + self._cpp_eta_2ndOrder(xx,t) + self._cpp_eta_short(xx,t) + self._cpp_eta_long(xx,t)
 *         if setUp:
 *             Etaoverall -= self.eta_setUp(xx,t)             # <<<<<<<<<<<<<<
 *         return Etaoverall
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_eta_setUp); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2680, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_carray_to_py_double(__pyx_v_xx, 3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2680, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_1, __pyx_v_t};
      __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2680, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_1, __pyx_v_t};
      __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2680, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2680, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_4) {
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4); __pyx_t_4 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_5, __pyx_t_1);
      __Pyx_INCREF(__pyx_v_t);
      __Pyx_GIVEREF(__pyx_v_t);
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_5, __pyx_v_t);
      __pyx_t_1 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2680, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_InPlaceSubtract(__pyx_v_Etaoverall, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2680, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF_SET(__pyx_v_Etaoverall, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "WaveTools.py":2679
 *         xx[2] = x[2]
 *         Etaoverall =  self.eta_linear(x,t) + self._cpp_eta_2ndOrder(xx,t) + self._cpp_eta_short(xx,t) + self._cpp_eta_long(xx,t)
 *         if setUp:             # <<<<<<<<<<<<<<
 *             Etaoverall -= self.eta_setUp(xx,t)
 *         return Etaoverall
 */
  }

  /* "WaveTools.py":2681
 *         if setUp:
 *             Etaoverall -= self.eta_setUp(xx,t)
 *         return Etaoverall             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_Etaoverall);
  __pyx_r = __pyx_v_Etaoverall;
  goto __pyx_L0;

  /* "WaveTools.py":2656
 * 
 *     #overall free surface elevation
 *     def eta_overall(self,x,t,setUp=False):             # <<<<<<<<<<<<<<
 *         """Calculates the free surface elevation with 2nd order corrections
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("WaveTools.RandomNLWaves.eta_overall", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_Etaoverall);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":2685
 * 
 * 
 *     def writeEtaSeries(self,Tstart,Tend,dt,x0,fname, mode="all",setUp=False,Lgen=np.array([0.,0.,0.])):             # <<<<<<<<<<<<<<
 *         """Writes a timeseries of the free-surface elevation
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_13RandomNLWaves_13writeEtaSeries(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9WaveTools_13RandomNLWaves_12writeEtaSeries[] = "Writes a timeseries of the free-surface elevation\n\n        It also returns the free surface elevation as a time-eta array.\n        If Lgen !=[0.,0.,0.,] then Tstart is modified to account for the\n        wave transformation at the most remote point of the relaxation zone.\n\n        Parameters\n        ----------\n        Tstart : float\n            Start time\n        Tend : float\n            End time\n        dt : float\n            Sampling interval\n        x0 : numpy.ndarray\n            Position vector of the time series\n        fname : string\n            Filename for timeseries file\n        mode: Optional[string]\n            Mode of set up calculations (all, long, short, setup)\n        setUp: Optional[bool]\n            Switch for activating setup calculation\n        Lgen : Optional[numpy.ndarray]\n            Length vector of relaxation zone\n\n\n        Returns\n        ----------\n        numpy.ndarray\n            2D numpy array Nx2 containing free-surface elevation in time.\n        ";
static PyMethodDef __pyx_mdef_9WaveTools_13RandomNLWaves_13writeEtaSeries = {"writeEtaSeries", (PyCFunction)__pyx_pw_9WaveTools_13RandomNLWaves_13writeEtaSeries, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_13RandomNLWaves_12writeEtaSeries};
static PyObject *__pyx_pw_9WaveTools_13RandomNLWaves_13writeEtaSeries(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_Tstart = 0;
  PyObject *__pyx_v_Tend = 0;
  PyObject *__pyx_v_dt = 0;
  PyObject *__pyx_v_x0 = 0;
  PyObject *__pyx_v_fname = 0;
  PyObject *__pyx_v_mode = 0;
  PyObject *__pyx_v_setUp = 0;
  PyObject *__pyx_v_Lgen = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("writeEtaSeries (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_Tstart,&__pyx_n_s_Tend,&__pyx_n_s_dt,&__pyx_n_s_x0,&__pyx_n_s_fname,&__pyx_n_s_mode,&__pyx_n_s_setUp,&__pyx_n_s_Lgen,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    values[5] = ((PyObject *)__pyx_n_s_all);
    values[6] = ((PyObject *)Py_False);
    values[7] = __pyx_k__193;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Tstart)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Tend)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("writeEtaSeries", 0, 5, 8, 1); __PYX_ERR(0, 2685, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dt)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("writeEtaSeries", 0, 5, 8, 2); __PYX_ERR(0, 2685, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("writeEtaSeries", 0, 5, 8, 3); __PYX_ERR(0, 2685, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fname)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("writeEtaSeries", 0, 5, 8, 4); __PYX_ERR(0, 2685, __pyx_L3_error)
        }
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mode);
          if (value) { values[5] = value; kw_args--; }
        }
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_setUp);
          if (value) { values[6] = value; kw_args--; }
        }
        case  7:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Lgen);
          if (value) { values[7] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "writeEtaSeries") < 0)) __PYX_ERR(0, 2685, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_Tstart = values[0];
    __pyx_v_Tend = values[1];
    __pyx_v_dt = values[2];
    __pyx_v_x0 = values[3];
    __pyx_v_fname = values[4];
    __pyx_v_mode = values[5];
    __pyx_v_setUp = values[6];
    __pyx_v_Lgen = values[7];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("writeEtaSeries", 0, 5, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2685, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("WaveTools.RandomNLWaves.writeEtaSeries", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9WaveTools_13RandomNLWaves_12writeEtaSeries(((struct __pyx_obj_9WaveTools_RandomNLWaves *)__pyx_v_self), __pyx_v_Tstart, __pyx_v_Tend, __pyx_v_dt, __pyx_v_x0, __pyx_v_fname, __pyx_v_mode, __pyx_v_setUp, __pyx_v_Lgen);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_13RandomNLWaves_12writeEtaSeries(struct __pyx_obj_9WaveTools_RandomNLWaves *__pyx_v_self, PyObject *__pyx_v_Tstart, PyObject *__pyx_v_Tend, PyObject *__pyx_v_dt, PyObject *__pyx_v_x0, PyObject *__pyx_v_fname, PyObject *__pyx_v_mode, PyObject *__pyx_v_setUp, PyObject *__pyx_v_Lgen) {
  PyObject *__pyx_v_Tlag = NULL;
  Py_ssize_t __pyx_v_j;
  PyObject *__pyx_v_Nseries = NULL;
  PyObject *__pyx_v_timelst = NULL;
  PyObject *__pyx_v_series = NULL;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_v_time = NULL;
  PyObject *__pyx_v_delimiter = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  __Pyx_RefNannySetupContext("writeEtaSeries", 0);
  __Pyx_INCREF(__pyx_v_Tstart);

  /* "WaveTools.py":2717
 *             2D numpy array Nx2 containing free-surface elevation in time.
 *         """
 *         if sum(Lgen[:]*self.waveDir[:])< 0 :             # <<<<<<<<<<<<<<
 *             logEvent('ERROR! Wavetools.py: Location vector of generation zone should not be opposite to the wave direction')
 *             sys.exit(1)
 */
  __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_v_Lgen, 0, 0, NULL, NULL, &__pyx_slice__194, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2717, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetSlice(((PyObject *)__pyx_v_self->waveDir), 0, 0, NULL, NULL, &__pyx_slice__195, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2717, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2717, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2717, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_sum, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2717, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_3, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2717, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 2717, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "WaveTools.py":2718
 *         """
 *         if sum(Lgen[:]*self.waveDir[:])< 0 :
 *             logEvent('ERROR! Wavetools.py: Location vector of generation zone should not be opposite to the wave direction')             # <<<<<<<<<<<<<<
 *             sys.exit(1)
 * 
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_logEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2718, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__196, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2718, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "WaveTools.py":2719
 *         if sum(Lgen[:]*self.waveDir[:])< 0 :
 *             logEvent('ERROR! Wavetools.py: Location vector of generation zone should not be opposite to the wave direction')
 *             sys.exit(1)             # <<<<<<<<<<<<<<
 * 
 *         Tlag = np.zeros(len(self.omega),)
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_sys); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2719, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_exit); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2719, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__197, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2719, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "WaveTools.py":2717
 *             2D numpy array Nx2 containing free-surface elevation in time.
 *         """
 *         if sum(Lgen[:]*self.waveDir[:])< 0 :             # <<<<<<<<<<<<<<
 *             logEvent('ERROR! Wavetools.py: Location vector of generation zone should not be opposite to the wave direction')
 *             sys.exit(1)
 */
  }

  /* "WaveTools.py":2721
 *             sys.exit(1)
 * 
 *         Tlag = np.zeros(len(self.omega),)             # <<<<<<<<<<<<<<
 *         for j in range(len(self.omega)):
 *             Tlag[j] = sum(self.kDir[j,:]*Lgen[:])/self.omega[j]
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2721, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2721, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = ((PyObject *)__pyx_v_self->omega);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_5 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 2721, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2721, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2721, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_2};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2721, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_2};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2721, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2721, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2721, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_Tlag = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "WaveTools.py":2722
 * 
 *         Tlag = np.zeros(len(self.omega),)
 *         for j in range(len(self.omega)):             # <<<<<<<<<<<<<<
 *             Tlag[j] = sum(self.kDir[j,:]*Lgen[:])/self.omega[j]
 *         Tlag = max(Tlag)
 */
  __pyx_t_3 = ((PyObject *)__pyx_v_self->omega);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_5 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 2722, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_5; __pyx_t_8+=1) {
    __pyx_v_j = __pyx_t_8;

    /* "WaveTools.py":2723
 *         Tlag = np.zeros(len(self.omega),)
 *         for j in range(len(self.omega)):
 *             Tlag[j] = sum(self.kDir[j,:]*Lgen[:])/self.omega[j]             # <<<<<<<<<<<<<<
 *         Tlag = max(Tlag)
 *         Tstart = Tstart - Tlag
 */
    __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_j); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2723, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2723, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
    __Pyx_INCREF(__pyx_slice__198);
    __Pyx_GIVEREF(__pyx_slice__198);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_slice__198);
    __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_GetItem(((PyObject *)__pyx_v_self->kDir), __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2723, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_v_Lgen, 0, 0, NULL, NULL, &__pyx_slice__199, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2723, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = PyNumber_Multiply(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2723, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2723, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_sum, __pyx_t_1, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2723, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->omega), __pyx_v_j, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2723, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_t_7, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2723, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_SetItemInt(__pyx_v_Tlag, __pyx_v_j, __pyx_t_3, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1) < 0)) __PYX_ERR(0, 2723, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }

  /* "WaveTools.py":2724
 *         for j in range(len(self.omega)):
 *             Tlag[j] = sum(self.kDir[j,:]*Lgen[:])/self.omega[j]
 *         Tlag = max(Tlag)             # <<<<<<<<<<<<<<
 *         Tstart = Tstart - Tlag
 * 
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2724, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_Tlag);
  __Pyx_GIVEREF(__pyx_v_Tlag);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_Tlag);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_max, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2724, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_Tlag, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "WaveTools.py":2725
 *             Tlag[j] = sum(self.kDir[j,:]*Lgen[:])/self.omega[j]
 *         Tlag = max(Tlag)
 *         Tstart = Tstart - Tlag             # <<<<<<<<<<<<<<
 * 
 *         Nseries = int((Tend - Tstart)/dt) + 1
 */
  __pyx_t_1 = PyNumber_Subtract(__pyx_v_Tstart, __pyx_v_Tlag); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2725, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF_SET(__pyx_v_Tstart, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "WaveTools.py":2727
 *         Tstart = Tstart - Tlag
 * 
 *         Nseries = int((Tend - Tstart)/dt) + 1             # <<<<<<<<<<<<<<
 *         timelst=np.linspace(Tstart, Tend, Nseries)
 *         series = np.zeros((Nseries,2),)
 */
  __pyx_t_1 = PyNumber_Subtract(__pyx_v_Tend, __pyx_v_Tstart); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2727, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_v_dt); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2727, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyNumber_Int(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2727, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2727, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_Nseries = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "WaveTools.py":2728
 * 
 *         Nseries = int((Tend - Tstart)/dt) + 1
 *         timelst=np.linspace(Tstart, Tend, Nseries)             # <<<<<<<<<<<<<<
 *         series = np.zeros((Nseries,2),)
 *         series[:,0] = timelst
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2728, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_linspace); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2728, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
      __pyx_t_9 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_7)) {
    PyObject *__pyx_temp[4] = {__pyx_t_1, __pyx_v_Tstart, __pyx_v_Tend, __pyx_v_Nseries};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_9, 3+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2728, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
    PyObject *__pyx_temp[4] = {__pyx_t_1, __pyx_v_Tstart, __pyx_v_Tend, __pyx_v_Nseries};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_9, 3+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2728, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  {
    __pyx_t_2 = PyTuple_New(3+__pyx_t_9); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2728, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (__pyx_t_1) {
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1); __pyx_t_1 = NULL;
    }
    __Pyx_INCREF(__pyx_v_Tstart);
    __Pyx_GIVEREF(__pyx_v_Tstart);
    PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_9, __pyx_v_Tstart);
    __Pyx_INCREF(__pyx_v_Tend);
    __Pyx_GIVEREF(__pyx_v_Tend);
    PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_9, __pyx_v_Tend);
    __Pyx_INCREF(__pyx_v_Nseries);
    __Pyx_GIVEREF(__pyx_v_Nseries);
    PyTuple_SET_ITEM(__pyx_t_2, 2+__pyx_t_9, __pyx_v_Nseries);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2728, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_timelst = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "WaveTools.py":2729
 *         Nseries = int((Tend - Tstart)/dt) + 1
 *         timelst=np.linspace(Tstart, Tend, Nseries)
 *         series = np.zeros((Nseries,2),)             # <<<<<<<<<<<<<<
 *         series[:,0] = timelst
 *         for i in range(len(timelst)):
 */
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2729, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2729, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2729, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(__pyx_v_Nseries);
  __Pyx_GIVEREF(__pyx_v_Nseries);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_Nseries);
  __Pyx_INCREF(__pyx_int_2);
  __Pyx_GIVEREF(__pyx_int_2);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_int_2);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_1) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2729, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_7};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2729, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_7};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2729, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2729, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1); __pyx_t_1 = NULL;
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2729, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_series = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "WaveTools.py":2730
 *         timelst=np.linspace(Tstart, Tend, Nseries)
 *         series = np.zeros((Nseries,2),)
 *         series[:,0] = timelst             # <<<<<<<<<<<<<<
 *         for i in range(len(timelst)):
 *             time = series[i,0]
 */
  if (unlikely(PyObject_SetItem(__pyx_v_series, __pyx_tuple__201, __pyx_v_timelst) < 0)) __PYX_ERR(0, 2730, __pyx_L1_error)

  /* "WaveTools.py":2731
 *         series = np.zeros((Nseries,2),)
 *         series[:,0] = timelst
 *         for i in range(len(timelst)):             # <<<<<<<<<<<<<<
 *             time = series[i,0]
 *             if mode == "all":
 */
  __pyx_t_5 = PyObject_Length(__pyx_v_timelst); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 2731, __pyx_L1_error)
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_5; __pyx_t_8+=1) {
    __pyx_v_i = __pyx_t_8;

    /* "WaveTools.py":2732
 *         series[:,0] = timelst
 *         for i in range(len(timelst)):
 *             time = series[i,0]             # <<<<<<<<<<<<<<
 *             if mode == "all":
 *                 series[i,1] = self.eta_overall(x0,time,setUp)
 */
    __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2732, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2732, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_0);
    __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_GetItem(__pyx_v_series, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2732, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF_SET(__pyx_v_time, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "WaveTools.py":2733
 *         for i in range(len(timelst)):
 *             time = series[i,0]
 *             if mode == "all":             # <<<<<<<<<<<<<<
 *                 series[i,1] = self.eta_overall(x0,time,setUp)
 *             elif mode == "setup":
 */
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_all, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 2733, __pyx_L1_error)
    if (__pyx_t_4) {

      /* "WaveTools.py":2734
 *             time = series[i,0]
 *             if mode == "all":
 *                 series[i,1] = self.eta_overall(x0,time,setUp)             # <<<<<<<<<<<<<<
 *             elif mode == "setup":
 *                 series[i,1] = self.eta_setUp(x0,time)
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_eta_overall); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2734, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = NULL;
      __pyx_t_9 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_9 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[4] = {__pyx_t_6, __pyx_v_x0, __pyx_v_time, __pyx_v_setUp};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_9, 3+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2734, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[4] = {__pyx_t_6, __pyx_v_x0, __pyx_v_time, __pyx_v_setUp};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_9, 3+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2734, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(3+__pyx_t_9); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2734, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        if (__pyx_t_6) {
          __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
        }
        __Pyx_INCREF(__pyx_v_x0);
        __Pyx_GIVEREF(__pyx_v_x0);
        PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_9, __pyx_v_x0);
        __Pyx_INCREF(__pyx_v_time);
        __Pyx_GIVEREF(__pyx_v_time);
        PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_9, __pyx_v_time);
        __Pyx_INCREF(__pyx_v_setUp);
        __Pyx_GIVEREF(__pyx_v_setUp);
        PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_9, __pyx_v_setUp);
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2734, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2734, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2734, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2);
      __Pyx_INCREF(__pyx_int_1);
      __Pyx_GIVEREF(__pyx_int_1);
      PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_int_1);
      __pyx_t_2 = 0;
      if (unlikely(PyObject_SetItem(__pyx_v_series, __pyx_t_7, __pyx_t_3) < 0)) __PYX_ERR(0, 2734, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "WaveTools.py":2733
 *         for i in range(len(timelst)):
 *             time = series[i,0]
 *             if mode == "all":             # <<<<<<<<<<<<<<
 *                 series[i,1] = self.eta_overall(x0,time,setUp)
 *             elif mode == "setup":
 */
      goto __pyx_L8;
    }

    /* "WaveTools.py":2735
 *             if mode == "all":
 *                 series[i,1] = self.eta_overall(x0,time,setUp)
 *             elif mode == "setup":             # <<<<<<<<<<<<<<
 *                 series[i,1] = self.eta_setUp(x0,time)
 *             elif mode == "short":
 */
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_setup, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 2735, __pyx_L1_error)
    if (__pyx_t_4) {

      /* "WaveTools.py":2736
 *                 series[i,1] = self.eta_overall(x0,time,setUp)
 *             elif mode == "setup":
 *                 series[i,1] = self.eta_setUp(x0,time)             # <<<<<<<<<<<<<<
 *             elif mode == "short":
 *                 series[i,1] = self.eta_short(x0,time) + self.eta_2ndOrder(x0,time)
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_eta_setUp); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2736, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_2 = NULL;
      __pyx_t_9 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
          __pyx_t_9 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_x0, __pyx_v_time};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2736, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_x0, __pyx_v_time};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2736, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2736, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        if (__pyx_t_2) {
          __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2); __pyx_t_2 = NULL;
        }
        __Pyx_INCREF(__pyx_v_x0);
        __Pyx_GIVEREF(__pyx_v_x0);
        PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_9, __pyx_v_x0);
        __Pyx_INCREF(__pyx_v_time);
        __Pyx_GIVEREF(__pyx_v_time);
        PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_9, __pyx_v_time);
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2736, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyInt_FromSsize_t(__pyx_v_i); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2736, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2736, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
      __Pyx_INCREF(__pyx_int_1);
      __Pyx_GIVEREF(__pyx_int_1);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_int_1);
      __pyx_t_7 = 0;
      if (unlikely(PyObject_SetItem(__pyx_v_series, __pyx_t_6, __pyx_t_3) < 0)) __PYX_ERR(0, 2736, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "WaveTools.py":2735
 *             if mode == "all":
 *                 series[i,1] = self.eta_overall(x0,time,setUp)
 *             elif mode == "setup":             # <<<<<<<<<<<<<<
 *                 series[i,1] = self.eta_setUp(x0,time)
 *             elif mode == "short":
 */
      goto __pyx_L8;
    }

    /* "WaveTools.py":2737
 *             elif mode == "setup":
 *                 series[i,1] = self.eta_setUp(x0,time)
 *             elif mode == "short":             # <<<<<<<<<<<<<<
 *                 series[i,1] = self.eta_short(x0,time) + self.eta_2ndOrder(x0,time)
 *             elif mode == "long":
 */
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_short, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 2737, __pyx_L1_error)
    if (__pyx_t_4) {

      /* "WaveTools.py":2738
 *                 series[i,1] = self.eta_setUp(x0,time)
 *             elif mode == "short":
 *                 series[i,1] = self.eta_short(x0,time) + self.eta_2ndOrder(x0,time)             # <<<<<<<<<<<<<<
 *             elif mode == "long":
 *                 series[i,1] = self.eta_long(x0,time)
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_eta_short); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2738, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      __pyx_t_9 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
          __pyx_t_9 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_v_x0, __pyx_v_time};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2738, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_v_x0, __pyx_v_time};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2738, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else
      #endif
      {
        __pyx_t_2 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2738, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        if (__pyx_t_7) {
          __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_7); __pyx_t_7 = NULL;
        }
        __Pyx_INCREF(__pyx_v_x0);
        __Pyx_GIVEREF(__pyx_v_x0);
        PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_9, __pyx_v_x0);
        __Pyx_INCREF(__pyx_v_time);
        __Pyx_GIVEREF(__pyx_v_time);
        PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_9, __pyx_v_time);
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2738, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_eta_2ndOrder); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2738, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = NULL;
      __pyx_t_9 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_9 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_v_x0, __pyx_v_time};
        __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2738, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_6);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_v_x0, __pyx_v_time};
        __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2738, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_6);
      } else
      #endif
      {
        __pyx_t_1 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2738, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (__pyx_t_7) {
          __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_7); __pyx_t_7 = NULL;
        }
        __Pyx_INCREF(__pyx_v_x0);
        __Pyx_GIVEREF(__pyx_v_x0);
        PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_9, __pyx_v_x0);
        __Pyx_INCREF(__pyx_v_time);
        __Pyx_GIVEREF(__pyx_v_time);
        PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_9, __pyx_v_time);
        __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2738, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2738, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyInt_FromSsize_t(__pyx_v_i); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2738, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2738, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6);
      __Pyx_INCREF(__pyx_int_1);
      __Pyx_GIVEREF(__pyx_int_1);
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_1);
      __pyx_t_6 = 0;
      if (unlikely(PyObject_SetItem(__pyx_v_series, __pyx_t_3, __pyx_t_2) < 0)) __PYX_ERR(0, 2738, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "WaveTools.py":2737
 *             elif mode == "setup":
 *                 series[i,1] = self.eta_setUp(x0,time)
 *             elif mode == "short":             # <<<<<<<<<<<<<<
 *                 series[i,1] = self.eta_short(x0,time) + self.eta_2ndOrder(x0,time)
 *             elif mode == "long":
 */
      goto __pyx_L8;
    }

    /* "WaveTools.py":2739
 *             elif mode == "short":
 *                 series[i,1] = self.eta_short(x0,time) + self.eta_2ndOrder(x0,time)
 *             elif mode == "long":             # <<<<<<<<<<<<<<
 *                 series[i,1] = self.eta_long(x0,time)
 *             elif mode == "linear":
 */
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_long, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 2739, __pyx_L1_error)
    if (__pyx_t_4) {

      /* "WaveTools.py":2740
 *                 series[i,1] = self.eta_short(x0,time) + self.eta_2ndOrder(x0,time)
 *             elif mode == "long":
 *                 series[i,1] = self.eta_long(x0,time)             # <<<<<<<<<<<<<<
 *             elif mode == "linear":
 *                 series[i,1] = self.eta_linear(x0,time)
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_eta_long); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2740, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = NULL;
      __pyx_t_9 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_9 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_v_x0, __pyx_v_time};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2740, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_v_x0, __pyx_v_time};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2740, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else
      #endif
      {
        __pyx_t_1 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2740, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (__pyx_t_6) {
          __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6); __pyx_t_6 = NULL;
        }
        __Pyx_INCREF(__pyx_v_x0);
        __Pyx_GIVEREF(__pyx_v_x0);
        PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_9, __pyx_v_x0);
        __Pyx_INCREF(__pyx_v_time);
        __Pyx_GIVEREF(__pyx_v_time);
        PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_9, __pyx_v_time);
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2740, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2740, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2740, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
      __Pyx_INCREF(__pyx_int_1);
      __Pyx_GIVEREF(__pyx_int_1);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_1);
      __pyx_t_3 = 0;
      if (unlikely(PyObject_SetItem(__pyx_v_series, __pyx_t_1, __pyx_t_2) < 0)) __PYX_ERR(0, 2740, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "WaveTools.py":2739
 *             elif mode == "short":
 *                 series[i,1] = self.eta_short(x0,time) + self.eta_2ndOrder(x0,time)
 *             elif mode == "long":             # <<<<<<<<<<<<<<
 *                 series[i,1] = self.eta_long(x0,time)
 *             elif mode == "linear":
 */
      goto __pyx_L8;
    }

    /* "WaveTools.py":2741
 *             elif mode == "long":
 *                 series[i,1] = self.eta_long(x0,time)
 *             elif mode == "linear":             # <<<<<<<<<<<<<<
 *                 series[i,1] = self.eta_linear(x0,time)
 *             else:
 */
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_linear, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 2741, __pyx_L1_error)
    if (__pyx_t_4) {

      /* "WaveTools.py":2742
 *                 series[i,1] = self.eta_long(x0,time)
 *             elif mode == "linear":
 *                 series[i,1] = self.eta_linear(x0,time)             # <<<<<<<<<<<<<<
 *             else:
 *                 logEvent('ERROR! Wavetools.pyx: Argument mode in RandomNLWaves.writeEtaSeries should be "all", "setup", "short", "long" or "linear"')
 */
      __Pyx_INCREF(__pyx_v_self->eta_linear);
      __pyx_t_1 = __pyx_v_self->eta_linear; __pyx_t_3 = NULL;
      __pyx_t_9 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
          __pyx_t_9 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_x0, __pyx_v_time};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2742, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_x0, __pyx_v_time};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2742, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2742, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        if (__pyx_t_3) {
          __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3); __pyx_t_3 = NULL;
        }
        __Pyx_INCREF(__pyx_v_x0);
        __Pyx_GIVEREF(__pyx_v_x0);
        PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_9, __pyx_v_x0);
        __Pyx_INCREF(__pyx_v_time);
        __Pyx_GIVEREF(__pyx_v_time);
        PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_9, __pyx_v_time);
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2742, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2742, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2742, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
      __Pyx_INCREF(__pyx_int_1);
      __Pyx_GIVEREF(__pyx_int_1);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_int_1);
      __pyx_t_1 = 0;
      if (unlikely(PyObject_SetItem(__pyx_v_series, __pyx_t_6, __pyx_t_2) < 0)) __PYX_ERR(0, 2742, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "WaveTools.py":2741
 *             elif mode == "long":
 *                 series[i,1] = self.eta_long(x0,time)
 *             elif mode == "linear":             # <<<<<<<<<<<<<<
 *                 series[i,1] = self.eta_linear(x0,time)
 *             else:
 */
      goto __pyx_L8;
    }

    /* "WaveTools.py":2744
 *                 series[i,1] = self.eta_linear(x0,time)
 *             else:
 *                 logEvent('ERROR! Wavetools.pyx: Argument mode in RandomNLWaves.writeEtaSeries should be "all", "setup", "short", "long" or "linear"')             # <<<<<<<<<<<<<<
 *                 sys.exit(1)
 *         delimiter =" "
 */
    /*else*/ {
      __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_logEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2744, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__202, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2744, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "WaveTools.py":2745
 *             else:
 *                 logEvent('ERROR! Wavetools.pyx: Argument mode in RandomNLWaves.writeEtaSeries should be "all", "setup", "short", "long" or "linear"')
 *                 sys.exit(1)             # <<<<<<<<<<<<<<
 *         delimiter =" "
 *         if fname[-4:]==".csv":
 */
      __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_sys); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2745, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_exit); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2745, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__203, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2745, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __pyx_L8:;
  }

  /* "WaveTools.py":2746
 *                 logEvent('ERROR! Wavetools.pyx: Argument mode in RandomNLWaves.writeEtaSeries should be "all", "setup", "short", "long" or "linear"')
 *                 sys.exit(1)
 *         delimiter =" "             # <<<<<<<<<<<<<<
 *         if fname[-4:]==".csv":
 *             delimiter = ","
 */
  __Pyx_INCREF(__pyx_kp_s__204);
  __pyx_v_delimiter = __pyx_kp_s__204;

  /* "WaveTools.py":2747
 *                 sys.exit(1)
 *         delimiter =" "
 *         if fname[-4:]==".csv":             # <<<<<<<<<<<<<<
 *             delimiter = ","
 *         np.savetxt(fname,series,delimiter=delimiter)
 */
  __pyx_t_6 = __Pyx_PyObject_GetSlice(__pyx_v_fname, -4L, 0, NULL, NULL, &__pyx_slice__205, 1, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2747, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_6, __pyx_kp_s_csv, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 2747, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (__pyx_t_4) {

    /* "WaveTools.py":2748
 *         delimiter =" "
 *         if fname[-4:]==".csv":
 *             delimiter = ","             # <<<<<<<<<<<<<<
 *         np.savetxt(fname,series,delimiter=delimiter)
 *         return series
 */
    __Pyx_INCREF(__pyx_kp_s__123);
    __Pyx_DECREF_SET(__pyx_v_delimiter, __pyx_kp_s__123);

    /* "WaveTools.py":2747
 *                 sys.exit(1)
 *         delimiter =" "
 *         if fname[-4:]==".csv":             # <<<<<<<<<<<<<<
 *             delimiter = ","
 *         np.savetxt(fname,series,delimiter=delimiter)
 */
  }

  /* "WaveTools.py":2749
 *         if fname[-4:]==".csv":
 *             delimiter = ","
 *         np.savetxt(fname,series,delimiter=delimiter)             # <<<<<<<<<<<<<<
 *         return series
 * 
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2749, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_savetxt); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2749, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2749, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(__pyx_v_fname);
  __Pyx_GIVEREF(__pyx_v_fname);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_fname);
  __Pyx_INCREF(__pyx_v_series);
  __Pyx_GIVEREF(__pyx_v_series);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_v_series);
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2749, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_delimiter, __pyx_v_delimiter) < 0) __PYX_ERR(0, 2749, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2749, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "WaveTools.py":2750
 *             delimiter = ","
 *         np.savetxt(fname,series,delimiter=delimiter)
 *         return series             # <<<<<<<<<<<<<<
 * 
 *     def wtError(self,x,t):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_series);
  __pyx_r = __pyx_v_series;
  goto __pyx_L0;

  /* "WaveTools.py":2685
 * 
 * 
 *     def writeEtaSeries(self,Tstart,Tend,dt,x0,fname, mode="all",setUp=False,Lgen=np.array([0.,0.,0.])):             # <<<<<<<<<<<<<<
 *         """Writes a timeseries of the free-surface elevation
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("WaveTools.RandomNLWaves.writeEtaSeries", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_Tlag);
  __Pyx_XDECREF(__pyx_v_Nseries);
  __Pyx_XDECREF(__pyx_v_timelst);
  __Pyx_XDECREF(__pyx_v_series);
  __Pyx_XDECREF(__pyx_v_time);
  __Pyx_XDECREF(__pyx_v_delimiter);
  __Pyx_XDECREF(__pyx_v_Tstart);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":2752
 *         return series
 * 
 *     def wtError(self,x,t):             # <<<<<<<<<<<<<<
 *         """Raises error for using RandomNLWavesFast class instead
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_13RandomNLWaves_15wtError(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9WaveTools_13RandomNLWaves_14wtError[] = "Raises error for using RandomNLWavesFast class instead\n\n        Parameters\n        ----------\n        x : numpy.ndarray\n            Position vector\n        t : float\n            Time variable\n\n\n        Returns\n        --------\n        None\n\n        Raises\n        --------\n        SystemExit\n\n        ";
static PyMethodDef __pyx_mdef_9WaveTools_13RandomNLWaves_15wtError = {"wtError", (PyCFunction)__pyx_pw_9WaveTools_13RandomNLWaves_15wtError, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_13RandomNLWaves_14wtError};
static PyObject *__pyx_pw_9WaveTools_13RandomNLWaves_15wtError(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_x = 0;
  CYTHON_UNUSED PyObject *__pyx_v_t = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("wtError (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_t,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("wtError", 1, 2, 2, 1); __PYX_ERR(0, 2752, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "wtError") < 0)) __PYX_ERR(0, 2752, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = values[0];
    __pyx_v_t = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("wtError", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2752, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("WaveTools.RandomNLWaves.wtError", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9WaveTools_13RandomNLWaves_14wtError(((struct __pyx_obj_9WaveTools_RandomNLWaves *)__pyx_v_self), __pyx_v_x, __pyx_v_t);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_13RandomNLWaves_14wtError(CYTHON_UNUSED struct __pyx_obj_9WaveTools_RandomNLWaves *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_x, CYTHON_UNUSED PyObject *__pyx_v_t) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("wtError", 0);

  /* "WaveTools.py":2773
 *         """
 * 
 *         logEvent("ERROR! Wavetools.py: eta and u functions not available for this class. Please use RandomNLWavesFast for generating random waves with nonlinear correction",0)             # <<<<<<<<<<<<<<
 *         sys.exit(1)
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_logEvent); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2773, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__206, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2773, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "WaveTools.py":2774
 * 
 *         logEvent("ERROR! Wavetools.py: eta and u functions not available for this class. Please use RandomNLWavesFast for generating random waves with nonlinear correction",0)
 *         sys.exit(1)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_sys); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2774, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_exit); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2774, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__207, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2774, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "WaveTools.py":2752
 *         return series
 * 
 *     def wtError(self,x,t):             # <<<<<<<<<<<<<<
 *         """Raises error for using RandomNLWavesFast class instead
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("WaveTools.RandomNLWaves.wtError", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.pxd":220
 *     cdef double _cpp_eta_long(self,double* x, double t)
 *     cdef public:
 *         object eta             # <<<<<<<<<<<<<<
 *         object u
 *         object eta_linear
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_13RandomNLWaves_3eta_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9WaveTools_13RandomNLWaves_3eta_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_13RandomNLWaves_3eta___get__(((struct __pyx_obj_9WaveTools_RandomNLWaves *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_13RandomNLWaves_3eta___get__(struct __pyx_obj_9WaveTools_RandomNLWaves *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->eta);
  __pyx_r = __pyx_v_self->eta;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9WaveTools_13RandomNLWaves_3eta_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9WaveTools_13RandomNLWaves_3eta_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_13RandomNLWaves_3eta_2__set__(((struct __pyx_obj_9WaveTools_RandomNLWaves *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9WaveTools_13RandomNLWaves_3eta_2__set__(struct __pyx_obj_9WaveTools_RandomNLWaves *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->eta);
  __Pyx_DECREF(__pyx_v_self->eta);
  __pyx_v_self->eta = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9WaveTools_13RandomNLWaves_3eta_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_9WaveTools_13RandomNLWaves_3eta_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_13RandomNLWaves_3eta_4__del__(((struct __pyx_obj_9WaveTools_RandomNLWaves *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9WaveTools_13RandomNLWaves_3eta_4__del__(struct __pyx_obj_9WaveTools_RandomNLWaves *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->eta);
  __Pyx_DECREF(__pyx_v_self->eta);
  __pyx_v_self->eta = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.pxd":221
 *     cdef public:
 *         object eta
 *         object u             # <<<<<<<<<<<<<<
 *         object eta_linear
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_13RandomNLWaves_1u_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9WaveTools_13RandomNLWaves_1u_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_13RandomNLWaves_1u___get__(((struct __pyx_obj_9WaveTools_RandomNLWaves *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_13RandomNLWaves_1u___get__(struct __pyx_obj_9WaveTools_RandomNLWaves *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->u);
  __pyx_r = __pyx_v_self->u;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9WaveTools_13RandomNLWaves_1u_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9WaveTools_13RandomNLWaves_1u_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_13RandomNLWaves_1u_2__set__(((struct __pyx_obj_9WaveTools_RandomNLWaves *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9WaveTools_13RandomNLWaves_1u_2__set__(struct __pyx_obj_9WaveTools_RandomNLWaves *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->u);
  __Pyx_DECREF(__pyx_v_self->u);
  __pyx_v_self->u = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9WaveTools_13RandomNLWaves_1u_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_9WaveTools_13RandomNLWaves_1u_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_13RandomNLWaves_1u_4__del__(((struct __pyx_obj_9WaveTools_RandomNLWaves *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9WaveTools_13RandomNLWaves_1u_4__del__(struct __pyx_obj_9WaveTools_RandomNLWaves *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->u);
  __Pyx_DECREF(__pyx_v_self->u);
  __pyx_v_self->u = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.pxd":222
 *         object eta
 *         object u
 *         object eta_linear             # <<<<<<<<<<<<<<
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_13RandomNLWaves_10eta_linear_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9WaveTools_13RandomNLWaves_10eta_linear_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_13RandomNLWaves_10eta_linear___get__(((struct __pyx_obj_9WaveTools_RandomNLWaves *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_13RandomNLWaves_10eta_linear___get__(struct __pyx_obj_9WaveTools_RandomNLWaves *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->eta_linear);
  __pyx_r = __pyx_v_self->eta_linear;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9WaveTools_13RandomNLWaves_10eta_linear_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9WaveTools_13RandomNLWaves_10eta_linear_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_13RandomNLWaves_10eta_linear_2__set__(((struct __pyx_obj_9WaveTools_RandomNLWaves *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9WaveTools_13RandomNLWaves_10eta_linear_2__set__(struct __pyx_obj_9WaveTools_RandomNLWaves *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->eta_linear);
  __Pyx_DECREF(__pyx_v_self->eta_linear);
  __pyx_v_self->eta_linear = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9WaveTools_13RandomNLWaves_10eta_linear_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_9WaveTools_13RandomNLWaves_10eta_linear_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9WaveTools_13RandomNLWaves_10eta_linear_4__del__(((struct __pyx_obj_9WaveTools_RandomNLWaves *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9WaveTools_13RandomNLWaves_10eta_linear_4__del__(struct __pyx_obj_9WaveTools_RandomNLWaves *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->eta_linear);
  __Pyx_DECREF(__pyx_v_self->eta_linear);
  __pyx_v_self->eta_linear = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":2828
 *              Switch for enabling optimised functions
 *     """
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *                  Tstart,
 *                  Tend,
 */

static PyObject *__pyx_pf_9WaveTools_52__defaults__(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__defaults__", 0);
  __Pyx_XDECREF(__pyx_r);

  /* "WaveTools.py":2847
 *                  Nfreq = 32,
 *                  NLongW = 10.,
 *                  fast = True             # <<<<<<<<<<<<<<
 *                  ):
 *         self.fast = fast
 */
  __pyx_t_1 = PyTuple_New(7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2828, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)Py_None));
  __Pyx_GIVEREF(((PyObject *)Py_None));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_None));
  __Pyx_INCREF(((PyObject *)Py_None));
  __Pyx_GIVEREF(((PyObject *)Py_None));
  PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)Py_None));
  __Pyx_INCREF(__Pyx_CyFunction_Defaults(__pyx_defaults1, __pyx_self)->__pyx_arg_Lgen);
  __Pyx_GIVEREF(__Pyx_CyFunction_Defaults(__pyx_defaults1, __pyx_self)->__pyx_arg_Lgen);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __Pyx_CyFunction_Defaults(__pyx_defaults1, __pyx_self)->__pyx_arg_Lgen);
  __Pyx_INCREF(((PyObject *)__pyx_int_15));
  __Pyx_GIVEREF(((PyObject *)__pyx_int_15));
  PyTuple_SET_ITEM(__pyx_t_1, 3, ((PyObject *)__pyx_int_15));
  __Pyx_INCREF(((PyObject *)__pyx_int_32));
  __Pyx_GIVEREF(((PyObject *)__pyx_int_32));
  PyTuple_SET_ITEM(__pyx_t_1, 4, ((PyObject *)__pyx_int_32));
  __Pyx_INCREF(((PyObject*)__pyx_float_10_));
  __Pyx_GIVEREF(((PyObject*)__pyx_float_10_));
  PyTuple_SET_ITEM(__pyx_t_1, 5, ((PyObject*)__pyx_float_10_));
  __Pyx_INCREF(((PyObject *)Py_True));
  __Pyx_GIVEREF(((PyObject *)Py_True));
  PyTuple_SET_ITEM(__pyx_t_1, 6, ((PyObject *)Py_True));

  /* "WaveTools.py":2828
 *              Switch for enabling optimised functions
 *     """
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *                  Tstart,
 *                  Tend,
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2828, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  PyTuple_SET_ITEM(__pyx_t_2, 1, Py_None);
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("WaveTools.__defaults__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_17RandomNLWavesFast_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9WaveTools_17RandomNLWavesFast_1__init__ = {"__init__", (PyCFunction)__pyx_pw_9WaveTools_17RandomNLWavesFast_1__init__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9WaveTools_17RandomNLWavesFast_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_Tstart = 0;
  PyObject *__pyx_v_Tend = 0;
  PyObject *__pyx_v_x0 = 0;
  PyObject *__pyx_v_Tp = 0;
  PyObject *__pyx_v_Hs = 0;
  PyObject *__pyx_v_mwl = 0;
  PyObject *__pyx_v_depth = 0;
  PyObject *__pyx_v_waveDir = 0;
  PyObject *__pyx_v_g = 0;
  PyObject *__pyx_v_N = 0;
  PyObject *__pyx_v_bandFactor = 0;
  PyObject *__pyx_v_spectName = 0;
  PyObject *__pyx_v_spectral_params = 0;
  PyObject *__pyx_v_phi = 0;
  PyObject *__pyx_v_Lgen = 0;
  PyObject *__pyx_v_Nwaves = 0;
  PyObject *__pyx_v_Nfreq = 0;
  PyObject *__pyx_v_NLongW = 0;
  PyObject *__pyx_v_fast = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_Tstart,&__pyx_n_s_Tend,&__pyx_n_s_x0,&__pyx_n_s_Tp,&__pyx_n_s_Hs,&__pyx_n_s_mwl,&__pyx_n_s_depth,&__pyx_n_s_waveDir,&__pyx_n_s_g,&__pyx_n_s_N,&__pyx_n_s_bandFactor,&__pyx_n_s_spectName,&__pyx_n_s_spectral_params,&__pyx_n_s_phi,&__pyx_n_s_Lgen,&__pyx_n_s_Nwaves,&__pyx_n_s_Nfreq,&__pyx_n_s_NLongW,&__pyx_n_s_fast,0};
    PyObject* values[20] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    __pyx_defaults1 *__pyx_dynamic_args = __Pyx_CyFunction_Defaults(__pyx_defaults1, __pyx_self);
    values[13] = ((PyObject *)((PyObject *)Py_None));
    values[14] = ((PyObject *)((PyObject *)Py_None));
    values[15] = __pyx_dynamic_args->__pyx_arg_Lgen;
    values[16] = ((PyObject *)((PyObject *)__pyx_int_15));
    values[17] = ((PyObject *)((PyObject *)__pyx_int_32));
    values[18] = ((PyObject *)((PyObject*)__pyx_float_10_));
    values[19] = ((PyObject *)((PyObject *)Py_True));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 20: values[19] = PyTuple_GET_ITEM(__pyx_args, 19);
        case 19: values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
        case 18: values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
        case 17: values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Tstart)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 13, 20, 1); __PYX_ERR(0, 2828, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Tend)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 13, 20, 2); __PYX_ERR(0, 2828, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 13, 20, 3); __PYX_ERR(0, 2828, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Tp)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 13, 20, 4); __PYX_ERR(0, 2828, __pyx_L3_error)
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Hs)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 13, 20, 5); __PYX_ERR(0, 2828, __pyx_L3_error)
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mwl)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 13, 20, 6); __PYX_ERR(0, 2828, __pyx_L3_error)
        }
        case  7:
        if (likely((values[7] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_depth)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 13, 20, 7); __PYX_ERR(0, 2828, __pyx_L3_error)
        }
        case  8:
        if (likely((values[8] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_waveDir)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 13, 20, 8); __PYX_ERR(0, 2828, __pyx_L3_error)
        }
        case  9:
        if (likely((values[9] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 13, 20, 9); __PYX_ERR(0, 2828, __pyx_L3_error)
        }
        case 10:
        if (likely((values[10] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_N)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 13, 20, 10); __PYX_ERR(0, 2828, __pyx_L3_error)
        }
        case 11:
        if (likely((values[11] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bandFactor)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 13, 20, 11); __PYX_ERR(0, 2828, __pyx_L3_error)
        }
        case 12:
        if (likely((values[12] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_spectName)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 13, 20, 12); __PYX_ERR(0, 2828, __pyx_L3_error)
        }
        case 13:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_spectral_params);
          if (value) { values[13] = value; kw_args--; }
        }
        case 14:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_phi);
          if (value) { values[14] = value; kw_args--; }
        }
        case 15:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Lgen);
          if (value) { values[15] = value; kw_args--; }
        }
        case 16:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Nwaves);
          if (value) { values[16] = value; kw_args--; }
        }
        case 17:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Nfreq);
          if (value) { values[17] = value; kw_args--; }
        }
        case 18:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_NLongW);
          if (value) { values[18] = value; kw_args--; }
        }
        case 19:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fast);
          if (value) { values[19] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 2828, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 20: values[19] = PyTuple_GET_ITEM(__pyx_args, 19);
        case 19: values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
        case 18: values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
        case 17: values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_Tstart = values[1];
    __pyx_v_Tend = values[2];
    __pyx_v_x0 = values[3];
    __pyx_v_Tp = values[4];
    __pyx_v_Hs = values[5];
    __pyx_v_mwl = values[6];
    __pyx_v_depth = values[7];
    __pyx_v_waveDir = values[8];
    __pyx_v_g = values[9];
    __pyx_v_N = values[10];
    __pyx_v_bandFactor = values[11];
    __pyx_v_spectName = values[12];
    __pyx_v_spectral_params = values[13];
    __pyx_v_phi = values[14];
    __pyx_v_Lgen = values[15];
    __pyx_v_Nwaves = values[16];
    __pyx_v_Nfreq = values[17];
    __pyx_v_NLongW = values[18];
    __pyx_v_fast = values[19];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 13, 20, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2828, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("WaveTools.RandomNLWavesFast.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9WaveTools_17RandomNLWavesFast___init__(__pyx_self, __pyx_v_self, __pyx_v_Tstart, __pyx_v_Tend, __pyx_v_x0, __pyx_v_Tp, __pyx_v_Hs, __pyx_v_mwl, __pyx_v_depth, __pyx_v_waveDir, __pyx_v_g, __pyx_v_N, __pyx_v_bandFactor, __pyx_v_spectName, __pyx_v_spectral_params, __pyx_v_phi, __pyx_v_Lgen, __pyx_v_Nwaves, __pyx_v_Nfreq, __pyx_v_NLongW, __pyx_v_fast);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_17RandomNLWavesFast___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_Tstart, PyObject *__pyx_v_Tend, PyObject *__pyx_v_x0, PyObject *__pyx_v_Tp, PyObject *__pyx_v_Hs, PyObject *__pyx_v_mwl, PyObject *__pyx_v_depth, PyObject *__pyx_v_waveDir, PyObject *__pyx_v_g, PyObject *__pyx_v_N, PyObject *__pyx_v_bandFactor, PyObject *__pyx_v_spectName, PyObject *__pyx_v_spectral_params, PyObject *__pyx_v_phi, PyObject *__pyx_v_Lgen, PyObject *__pyx_v_Nwaves, PyObject *__pyx_v_Nfreq, PyObject *__pyx_v_NLongW, PyObject *__pyx_v_fast) {
  struct __pyx_obj_9WaveTools_RandomWaves *__pyx_v_aR = NULL;
  struct __pyx_obj_9WaveTools_RandomNLWaves *__pyx_v_aRN = NULL;
  PyObject *__pyx_v_Tmax = NULL;
  PyObject *__pyx_v_modes = NULL;
  PyObject *__pyx_v_periods = NULL;
  PyObject *__pyx_v_ii = NULL;
  PyObject *__pyx_v_mode = NULL;
  PyObject *__pyx_v_fname = NULL;
  PyObject *__pyx_v_dt = NULL;
  PyObject *__pyx_v_series = NULL;
  PyObject *__pyx_v_Tstart_temp = NULL;
  PyObject *__pyx_v_cutoff = NULL;
  PyObject *__pyx_v_Nwaves_tot = NULL;
  PyObject *__pyx_v_Nwind = NULL;
  int __pyx_v_rec_d;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  __Pyx_RefNannySetupContext("__init__", 0);
  __Pyx_INCREF(__pyx_v_Nwaves);

  /* "WaveTools.py":2849
 *                  fast = True
 *                  ):
 *         self.fast = fast             # <<<<<<<<<<<<<<
 *         aR = RandomWaves(Tp,Hs,mwl,depth,waveDir,g,N,bandFactor,spectName,spectral_params,phi,fast = self.fast)
 *         aRN = RandomNLWaves(Tstart,Tend,Tp,Hs,mwl,depth,waveDir,g,N,bandFactor,spectName,spectral_params,phi, fast = self.fast)
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_fast, __pyx_v_fast) < 0) __PYX_ERR(0, 2849, __pyx_L1_error)

  /* "WaveTools.py":2850
 *                  ):
 *         self.fast = fast
 *         aR = RandomWaves(Tp,Hs,mwl,depth,waveDir,g,N,bandFactor,spectName,spectral_params,phi,fast = self.fast)             # <<<<<<<<<<<<<<
 *         aRN = RandomNLWaves(Tstart,Tend,Tp,Hs,mwl,depth,waveDir,g,N,bandFactor,spectName,spectral_params,phi, fast = self.fast)
 *         self.omega = aR.omega
 */
  __pyx_t_1 = PyTuple_New(11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2850, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_Tp);
  __Pyx_GIVEREF(__pyx_v_Tp);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_Tp);
  __Pyx_INCREF(__pyx_v_Hs);
  __Pyx_GIVEREF(__pyx_v_Hs);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_Hs);
  __Pyx_INCREF(__pyx_v_mwl);
  __Pyx_GIVEREF(__pyx_v_mwl);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_mwl);
  __Pyx_INCREF(__pyx_v_depth);
  __Pyx_GIVEREF(__pyx_v_depth);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_v_depth);
  __Pyx_INCREF(__pyx_v_waveDir);
  __Pyx_GIVEREF(__pyx_v_waveDir);
  PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_v_waveDir);
  __Pyx_INCREF(__pyx_v_g);
  __Pyx_GIVEREF(__pyx_v_g);
  PyTuple_SET_ITEM(__pyx_t_1, 5, __pyx_v_g);
  __Pyx_INCREF(__pyx_v_N);
  __Pyx_GIVEREF(__pyx_v_N);
  PyTuple_SET_ITEM(__pyx_t_1, 6, __pyx_v_N);
  __Pyx_INCREF(__pyx_v_bandFactor);
  __Pyx_GIVEREF(__pyx_v_bandFactor);
  PyTuple_SET_ITEM(__pyx_t_1, 7, __pyx_v_bandFactor);
  __Pyx_INCREF(__pyx_v_spectName);
  __Pyx_GIVEREF(__pyx_v_spectName);
  PyTuple_SET_ITEM(__pyx_t_1, 8, __pyx_v_spectName);
  __Pyx_INCREF(__pyx_v_spectral_params);
  __Pyx_GIVEREF(__pyx_v_spectral_params);
  PyTuple_SET_ITEM(__pyx_t_1, 9, __pyx_v_spectral_params);
  __Pyx_INCREF(__pyx_v_phi);
  __Pyx_GIVEREF(__pyx_v_phi);
  PyTuple_SET_ITEM(__pyx_t_1, 10, __pyx_v_phi);
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2850, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_fast); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2850, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_fast, __pyx_t_3) < 0) __PYX_ERR(0, 2850, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9WaveTools_RandomWaves), __pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2850, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_aR = ((struct __pyx_obj_9WaveTools_RandomWaves *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "WaveTools.py":2851
 *         self.fast = fast
 *         aR = RandomWaves(Tp,Hs,mwl,depth,waveDir,g,N,bandFactor,spectName,spectral_params,phi,fast = self.fast)
 *         aRN = RandomNLWaves(Tstart,Tend,Tp,Hs,mwl,depth,waveDir,g,N,bandFactor,spectName,spectral_params,phi, fast = self.fast)             # <<<<<<<<<<<<<<
 *         self.omega = aR.omega
 *         self.mwl = mwl
 */
  __pyx_t_3 = PyTuple_New(13); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2851, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_Tstart);
  __Pyx_GIVEREF(__pyx_v_Tstart);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_Tstart);
  __Pyx_INCREF(__pyx_v_Tend);
  __Pyx_GIVEREF(__pyx_v_Tend);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_Tend);
  __Pyx_INCREF(__pyx_v_Tp);
  __Pyx_GIVEREF(__pyx_v_Tp);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_Tp);
  __Pyx_INCREF(__pyx_v_Hs);
  __Pyx_GIVEREF(__pyx_v_Hs);
  PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_v_Hs);
  __Pyx_INCREF(__pyx_v_mwl);
  __Pyx_GIVEREF(__pyx_v_mwl);
  PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_v_mwl);
  __Pyx_INCREF(__pyx_v_depth);
  __Pyx_GIVEREF(__pyx_v_depth);
  PyTuple_SET_ITEM(__pyx_t_3, 5, __pyx_v_depth);
  __Pyx_INCREF(__pyx_v_waveDir);
  __Pyx_GIVEREF(__pyx_v_waveDir);
  PyTuple_SET_ITEM(__pyx_t_3, 6, __pyx_v_waveDir);
  __Pyx_INCREF(__pyx_v_g);
  __Pyx_GIVEREF(__pyx_v_g);
  PyTuple_SET_ITEM(__pyx_t_3, 7, __pyx_v_g);
  __Pyx_INCREF(__pyx_v_N);
  __Pyx_GIVEREF(__pyx_v_N);
  PyTuple_SET_ITEM(__pyx_t_3, 8, __pyx_v_N);
  __Pyx_INCREF(__pyx_v_bandFactor);
  __Pyx_GIVEREF(__pyx_v_bandFactor);
  PyTuple_SET_ITEM(__pyx_t_3, 9, __pyx_v_bandFactor);
  __Pyx_INCREF(__pyx_v_spectName);
  __Pyx_GIVEREF(__pyx_v_spectName);
  PyTuple_SET_ITEM(__pyx_t_3, 10, __pyx_v_spectName);
  __Pyx_INCREF(__pyx_v_spectral_params);
  __Pyx_GIVEREF(__pyx_v_spectral_params);
  PyTuple_SET_ITEM(__pyx_t_3, 11, __pyx_v_spectral_params);
  __Pyx_INCREF(__pyx_v_phi);
  __Pyx_GIVEREF(__pyx_v_phi);
  PyTuple_SET_ITEM(__pyx_t_3, 12, __pyx_v_phi);
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2851, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_fast); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2851, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_fast, __pyx_t_1) < 0) __PYX_ERR(0, 2851, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9WaveTools_RandomNLWaves), __pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2851, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_aRN = ((struct __pyx_obj_9WaveTools_RandomNLWaves *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "WaveTools.py":2852
 *         aR = RandomWaves(Tp,Hs,mwl,depth,waveDir,g,N,bandFactor,spectName,spectral_params,phi,fast = self.fast)
 *         aRN = RandomNLWaves(Tstart,Tend,Tp,Hs,mwl,depth,waveDir,g,N,bandFactor,spectName,spectral_params,phi, fast = self.fast)
 *         self.omega = aR.omega             # <<<<<<<<<<<<<<
 *         self.mwl = mwl
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_aR->omega);
  __Pyx_INCREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_omega, __pyx_t_1) < 0) __PYX_ERR(0, 2852, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "WaveTools.py":2853
 *         aRN = RandomNLWaves(Tstart,Tend,Tp,Hs,mwl,depth,waveDir,g,N,bandFactor,spectName,spectral_params,phi, fast = self.fast)
 *         self.omega = aR.omega
 *         self.mwl = mwl             # <<<<<<<<<<<<<<
 * 
 *         Tmax =  NLongW*Tp/1.1
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_mwl, __pyx_v_mwl) < 0) __PYX_ERR(0, 2853, __pyx_L1_error)

  /* "WaveTools.py":2855
 *         self.mwl = mwl
 * 
 *         Tmax =  NLongW*Tp/1.1             # <<<<<<<<<<<<<<
 *         modes = ["short","linear","long"]
 *         periods = [Tp/2./1.1,Tp/1.1, Tmax]
 */
  __pyx_t_1 = PyNumber_Multiply(__pyx_v_NLongW, __pyx_v_Tp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2855, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyFloat_DivideObjC(__pyx_t_1, __pyx_float_1_1, 1.1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2855, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_Tmax = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "WaveTools.py":2856
 * 
 *         Tmax =  NLongW*Tp/1.1
 *         modes = ["short","linear","long"]             # <<<<<<<<<<<<<<
 *         periods = [Tp/2./1.1,Tp/1.1, Tmax]
 *         self.TS= []
 */
  __pyx_t_2 = PyList_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2856, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_short);
  __Pyx_GIVEREF(__pyx_n_s_short);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_short);
  __Pyx_INCREF(__pyx_n_s_linear);
  __Pyx_GIVEREF(__pyx_n_s_linear);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_linear);
  __Pyx_INCREF(__pyx_n_s_long);
  __Pyx_GIVEREF(__pyx_n_s_long);
  PyList_SET_ITEM(__pyx_t_2, 2, __pyx_n_s_long);
  __pyx_v_modes = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "WaveTools.py":2857
 *         Tmax =  NLongW*Tp/1.1
 *         modes = ["short","linear","long"]
 *         periods = [Tp/2./1.1,Tp/1.1, Tmax]             # <<<<<<<<<<<<<<
 *         self.TS= []
 *         ii = -1
 */
  __pyx_t_2 = __Pyx_PyFloat_DivideObjC(__pyx_v_Tp, __pyx_float_2_, 2., 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2857, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyFloat_DivideObjC(__pyx_t_2, __pyx_float_1_1, 1.1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2857, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyFloat_DivideObjC(__pyx_v_Tp, __pyx_float_1_1, 1.1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2857, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyList_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2857, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __Pyx_INCREF(__pyx_v_Tmax);
  __Pyx_GIVEREF(__pyx_v_Tmax);
  PyList_SET_ITEM(__pyx_t_3, 2, __pyx_v_Tmax);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_v_periods = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "WaveTools.py":2858
 *         modes = ["short","linear","long"]
 *         periods = [Tp/2./1.1,Tp/1.1, Tmax]
 *         self.TS= []             # <<<<<<<<<<<<<<
 *         ii = -1
 *         for mode in modes:
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2858, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_TS, __pyx_t_3) < 0) __PYX_ERR(0, 2858, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "WaveTools.py":2859
 *         periods = [Tp/2./1.1,Tp/1.1, Tmax]
 *         self.TS= []
 *         ii = -1             # <<<<<<<<<<<<<<
 *         for mode in modes:
 *             logEvent("INFO: Calculating nonlinear corrections for "+mode+" waves. This may take a while")
 */
  __Pyx_INCREF(__pyx_int_neg_1);
  __pyx_v_ii = __pyx_int_neg_1;

  /* "WaveTools.py":2860
 *         self.TS= []
 *         ii = -1
 *         for mode in modes:             # <<<<<<<<<<<<<<
 *             logEvent("INFO: Calculating nonlinear corrections for "+mode+" waves. This may take a while")
 *             ii+=1
 */
  __pyx_t_3 = __pyx_v_modes; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
  for (;;) {
    if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 2860, __pyx_L1_error)
    #else
    __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2860, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_mode, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "WaveTools.py":2861
 *         ii = -1
 *         for mode in modes:
 *             logEvent("INFO: Calculating nonlinear corrections for "+mode+" waves. This may take a while")             # <<<<<<<<<<<<<<
 *             ii+=1
 *             fname = "randomNLWaves_"+mode+".csv"
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_logEvent); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2861, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = PyNumber_Add(__pyx_kp_s_INFO_Calculating_nonlinear_corre, __pyx_v_mode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2861, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyNumber_Add(__pyx_t_5, __pyx_kp_s_waves_This_may_take_a_while); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2861, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2861, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_6};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2861, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_6};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2861, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2861, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2861, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "WaveTools.py":2862
 *         for mode in modes:
 *             logEvent("INFO: Calculating nonlinear corrections for "+mode+" waves. This may take a while")
 *             ii+=1             # <<<<<<<<<<<<<<
 *             fname = "randomNLWaves_"+mode+".csv"
 *             dt = periods[ii]/50.
 */
    __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_v_ii, __pyx_int_1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2862, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_ii, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "WaveTools.py":2863
 *             logEvent("INFO: Calculating nonlinear corrections for "+mode+" waves. This may take a while")
 *             ii+=1
 *             fname = "randomNLWaves_"+mode+".csv"             # <<<<<<<<<<<<<<
 *             dt = periods[ii]/50.
 *             series = aRN.writeEtaSeries(Tstart,Tend,dt,x0,fname,mode,False,Lgen)
 */
    __pyx_t_2 = PyNumber_Add(__pyx_n_s_randomNLWaves, __pyx_v_mode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2863, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_kp_s_csv); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2863, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF_SET(__pyx_v_fname, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "WaveTools.py":2864
 *             ii+=1
 *             fname = "randomNLWaves_"+mode+".csv"
 *             dt = periods[ii]/50.             # <<<<<<<<<<<<<<
 *             series = aRN.writeEtaSeries(Tstart,Tend,dt,x0,fname,mode,False,Lgen)
 *             Tstart_temp = series[0,0]
 */
    __pyx_t_1 = PyObject_GetItem(__pyx_v_periods, __pyx_v_ii); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2864, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyFloat_DivideObjC(__pyx_t_1, __pyx_float_50_, 50., 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2864, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_dt, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "WaveTools.py":2865
 *             fname = "randomNLWaves_"+mode+".csv"
 *             dt = periods[ii]/50.
 *             series = aRN.writeEtaSeries(Tstart,Tend,dt,x0,fname,mode,False,Lgen)             # <<<<<<<<<<<<<<
 *             Tstart_temp = series[0,0]
 *             cutoff = 0.2*periods[ii]/(Tend-Tstart_temp)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_aRN), __pyx_n_s_writeEtaSeries); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2865, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_8 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[9] = {__pyx_t_7, __pyx_v_Tstart, __pyx_v_Tend, __pyx_v_dt, __pyx_v_x0, __pyx_v_fname, __pyx_v_mode, Py_False, __pyx_v_Lgen};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_8, 8+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2865, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[9] = {__pyx_t_7, __pyx_v_Tstart, __pyx_v_Tend, __pyx_v_dt, __pyx_v_x0, __pyx_v_fname, __pyx_v_mode, Py_False, __pyx_v_Lgen};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_8, 8+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2865, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(8+__pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2865, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      if (__pyx_t_7) {
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7); __pyx_t_7 = NULL;
      }
      __Pyx_INCREF(__pyx_v_Tstart);
      __Pyx_GIVEREF(__pyx_v_Tstart);
      PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_8, __pyx_v_Tstart);
      __Pyx_INCREF(__pyx_v_Tend);
      __Pyx_GIVEREF(__pyx_v_Tend);
      PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_8, __pyx_v_Tend);
      __Pyx_INCREF(__pyx_v_dt);
      __Pyx_GIVEREF(__pyx_v_dt);
      PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_8, __pyx_v_dt);
      __Pyx_INCREF(__pyx_v_x0);
      __Pyx_GIVEREF(__pyx_v_x0);
      PyTuple_SET_ITEM(__pyx_t_6, 3+__pyx_t_8, __pyx_v_x0);
      __Pyx_INCREF(__pyx_v_fname);
      __Pyx_GIVEREF(__pyx_v_fname);
      PyTuple_SET_ITEM(__pyx_t_6, 4+__pyx_t_8, __pyx_v_fname);
      __Pyx_INCREF(__pyx_v_mode);
      __Pyx_GIVEREF(__pyx_v_mode);
      PyTuple_SET_ITEM(__pyx_t_6, 5+__pyx_t_8, __pyx_v_mode);
      __Pyx_INCREF(Py_False);
      __Pyx_GIVEREF(Py_False);
      PyTuple_SET_ITEM(__pyx_t_6, 6+__pyx_t_8, Py_False);
      __Pyx_INCREF(__pyx_v_Lgen);
      __Pyx_GIVEREF(__pyx_v_Lgen);
      PyTuple_SET_ITEM(__pyx_t_6, 7+__pyx_t_8, __pyx_v_Lgen);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2865, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_series, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "WaveTools.py":2866
 *             dt = periods[ii]/50.
 *             series = aRN.writeEtaSeries(Tstart,Tend,dt,x0,fname,mode,False,Lgen)
 *             Tstart_temp = series[0,0]             # <<<<<<<<<<<<<<
 *             cutoff = 0.2*periods[ii]/(Tend-Tstart_temp)
 * 
 */
    __pyx_t_2 = PyObject_GetItem(__pyx_v_series, __pyx_tuple__208); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2866, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_Tstart_temp, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "WaveTools.py":2867
 *             series = aRN.writeEtaSeries(Tstart,Tend,dt,x0,fname,mode,False,Lgen)
 *             Tstart_temp = series[0,0]
 *             cutoff = 0.2*periods[ii]/(Tend-Tstart_temp)             # <<<<<<<<<<<<<<
 * 
 *             #Checking if there are enough windows
 */
    __pyx_t_2 = PyObject_GetItem(__pyx_v_periods, __pyx_v_ii); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2867, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyNumber_Multiply(__pyx_float_0_2, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2867, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Subtract(__pyx_v_Tend, __pyx_v_Tstart_temp); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2867, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2867, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF_SET(__pyx_v_cutoff, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "WaveTools.py":2870
 * 
 *             #Checking if there are enough windows
 *             Nwaves_tot = int((Tend-Tstart_temp)/periods[ii])             # <<<<<<<<<<<<<<
 *             Nwaves = min(Nwaves,Nwaves_tot)
 *             Nwind = int(Nwaves_tot/Nwaves)
 */
    __pyx_t_6 = PyNumber_Subtract(__pyx_v_Tend, __pyx_v_Tstart_temp); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2870, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = PyObject_GetItem(__pyx_v_periods, __pyx_v_ii); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2870, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_t_6, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2870, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyNumber_Int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2870, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_Nwaves_tot, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "WaveTools.py":2871
 *             #Checking if there are enough windows
 *             Nwaves_tot = int((Tend-Tstart_temp)/periods[ii])
 *             Nwaves = min(Nwaves,Nwaves_tot)             # <<<<<<<<<<<<<<
 *             Nwind = int(Nwaves_tot/Nwaves)
 *             if Nwind < 3:
 */
    __Pyx_INCREF(__pyx_v_Nwaves_tot);
    __pyx_t_2 = __pyx_v_Nwaves_tot;
    __Pyx_INCREF(__pyx_v_Nwaves);
    __pyx_t_1 = __pyx_v_Nwaves;
    __pyx_t_7 = PyObject_RichCompare(__pyx_t_2, __pyx_t_1, Py_LT); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2871, __pyx_L1_error)
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 2871, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (__pyx_t_9) {
      __Pyx_INCREF(__pyx_t_2);
      __pyx_t_6 = __pyx_t_2;
    } else {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_6 = __pyx_t_1;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __pyx_t_6;
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF_SET(__pyx_v_Nwaves, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "WaveTools.py":2872
 *             Nwaves_tot = int((Tend-Tstart_temp)/periods[ii])
 *             Nwaves = min(Nwaves,Nwaves_tot)
 *             Nwind = int(Nwaves_tot/Nwaves)             # <<<<<<<<<<<<<<
 *             if Nwind < 3:
 *                 rec_d = True
 */
    __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_v_Nwaves_tot, __pyx_v_Nwaves); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2872, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __Pyx_PyNumber_Int(__pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2872, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF_SET(__pyx_v_Nwind, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "WaveTools.py":2873
 *             Nwaves = min(Nwaves,Nwaves_tot)
 *             Nwind = int(Nwaves_tot/Nwaves)
 *             if Nwind < 3:             # <<<<<<<<<<<<<<
 *                 rec_d = True
 *             else:
 */
    __pyx_t_6 = PyObject_RichCompare(__pyx_v_Nwind, __pyx_int_3, Py_LT); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2873, __pyx_L1_error)
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 2873, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (__pyx_t_9) {

      /* "WaveTools.py":2874
 *             Nwind = int(Nwaves_tot/Nwaves)
 *             if Nwind < 3:
 *                 rec_d = True             # <<<<<<<<<<<<<<
 *             else:
 *                 rec_d = False
 */
      __pyx_v_rec_d = 1;

      /* "WaveTools.py":2873
 *             Nwaves = min(Nwaves,Nwaves_tot)
 *             Nwind = int(Nwaves_tot/Nwaves)
 *             if Nwind < 3:             # <<<<<<<<<<<<<<
 *                 rec_d = True
 *             else:
 */
      goto __pyx_L5;
    }

    /* "WaveTools.py":2876
 *                 rec_d = True
 *             else:
 *                 rec_d = False             # <<<<<<<<<<<<<<
 * 
 * 
 */
    /*else*/ {
      __pyx_v_rec_d = 0;
    }
    __pyx_L5:;

    /* "WaveTools.py":2879
 * 
 * 
 *             self.TS.append(TimeSeries(             # <<<<<<<<<<<<<<
 *                     fname,
 *                     0,
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_TS); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2879, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);

    /* "WaveTools.py":2887
 *                     mwl,
 *                     waveDir,
 *                     g,             # <<<<<<<<<<<<<<
 *                     cutoffTotal = cutoff,
 *                     rec_direct = rec_d,
 */
    __pyx_t_2 = PyTuple_New(8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2879, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_fname);
    __Pyx_GIVEREF(__pyx_v_fname);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_fname);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_0);
    __Pyx_INCREF(__pyx_v_x0);
    __Pyx_GIVEREF(__pyx_v_x0);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_x0);
    __Pyx_INCREF(__pyx_v_depth);
    __Pyx_GIVEREF(__pyx_v_depth);
    PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_v_depth);
    __Pyx_INCREF(__pyx_v_Nfreq);
    __Pyx_GIVEREF(__pyx_v_Nfreq);
    PyTuple_SET_ITEM(__pyx_t_2, 4, __pyx_v_Nfreq);
    __Pyx_INCREF(__pyx_v_mwl);
    __Pyx_GIVEREF(__pyx_v_mwl);
    PyTuple_SET_ITEM(__pyx_t_2, 5, __pyx_v_mwl);
    __Pyx_INCREF(__pyx_v_waveDir);
    __Pyx_GIVEREF(__pyx_v_waveDir);
    PyTuple_SET_ITEM(__pyx_t_2, 6, __pyx_v_waveDir);
    __Pyx_INCREF(__pyx_v_g);
    __Pyx_GIVEREF(__pyx_v_g);
    PyTuple_SET_ITEM(__pyx_t_2, 7, __pyx_v_g);

    /* "WaveTools.py":2888
 *                     waveDir,
 *                     g,
 *                     cutoffTotal = cutoff,             # <<<<<<<<<<<<<<
 *                     rec_direct = rec_d,
 *                     window_params = {"Nwaves":Nwaves ,"Tm":periods[ii],"Window":"costap","Overlap":0.7,"Cutoff":0.1},
 */
    __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2888, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_cutoffTotal, __pyx_v_cutoff) < 0) __PYX_ERR(0, 2888, __pyx_L1_error)

    /* "WaveTools.py":2889
 *                     g,
 *                     cutoffTotal = cutoff,
 *                     rec_direct = rec_d,             # <<<<<<<<<<<<<<
 *                     window_params = {"Nwaves":Nwaves ,"Tm":periods[ii],"Window":"costap","Overlap":0.7,"Cutoff":0.1},
 *                     arrayData = True,
 */
    __pyx_t_7 = __Pyx_PyBool_FromLong(__pyx_v_rec_d); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2889, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_rec_direct, __pyx_t_7) < 0) __PYX_ERR(0, 2888, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "WaveTools.py":2890
 *                     cutoffTotal = cutoff,
 *                     rec_direct = rec_d,
 *                     window_params = {"Nwaves":Nwaves ,"Tm":periods[ii],"Window":"costap","Overlap":0.7,"Cutoff":0.1},             # <<<<<<<<<<<<<<
 *                     arrayData = True,
 *                     seriesArray = series,
 */
    __pyx_t_7 = PyDict_New(); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2890, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_Nwaves, __pyx_v_Nwaves) < 0) __PYX_ERR(0, 2890, __pyx_L1_error)
    __pyx_t_5 = PyObject_GetItem(__pyx_v_periods, __pyx_v_ii); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2890, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_Tm, __pyx_t_5) < 0) __PYX_ERR(0, 2890, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_Window, __pyx_n_s_costap) < 0) __PYX_ERR(0, 2890, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_Overlap, __pyx_float_0_7) < 0) __PYX_ERR(0, 2890, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_Cutoff, __pyx_float_0_1) < 0) __PYX_ERR(0, 2890, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_window_params, __pyx_t_7) < 0) __PYX_ERR(0, 2888, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "WaveTools.py":2891
 *                     rec_direct = rec_d,
 *                     window_params = {"Nwaves":Nwaves ,"Tm":periods[ii],"Window":"costap","Overlap":0.7,"Cutoff":0.1},
 *                     arrayData = True,             # <<<<<<<<<<<<<<
 *                     seriesArray = series,
 *                 fast = self.fast)
 */
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_arrayData, Py_True) < 0) __PYX_ERR(0, 2888, __pyx_L1_error)

    /* "WaveTools.py":2892
 *                     window_params = {"Nwaves":Nwaves ,"Tm":periods[ii],"Window":"costap","Overlap":0.7,"Cutoff":0.1},
 *                     arrayData = True,
 *                     seriesArray = series,             # <<<<<<<<<<<<<<
 *                 fast = self.fast)
 *                            )
 */
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_seriesArray, __pyx_v_series) < 0) __PYX_ERR(0, 2888, __pyx_L1_error)

    /* "WaveTools.py":2893
 *                     arrayData = True,
 *                     seriesArray = series,
 *                 fast = self.fast)             # <<<<<<<<<<<<<<
 *                            )
 * 
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_fast); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2893, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_fast, __pyx_t_7) < 0) __PYX_ERR(0, 2888, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "WaveTools.py":2879
 * 
 * 
 *             self.TS.append(TimeSeries(             # <<<<<<<<<<<<<<
 *                     fname,
 *                     0,
 */
    __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9WaveTools_TimeSeries), __pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2879, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_10 = __Pyx_PyObject_Append(__pyx_t_6, __pyx_t_7); if (unlikely(__pyx_t_10 == -1)) __PYX_ERR(0, 2879, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "WaveTools.py":2860
 *         self.TS= []
 *         ii = -1
 *         for mode in modes:             # <<<<<<<<<<<<<<
 *             logEvent("INFO: Calculating nonlinear corrections for "+mode+" waves. This may take a while")
 *             ii+=1
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "WaveTools.py":2828
 *              Switch for enabling optimised functions
 *     """
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *                  Tstart,
 *                  Tend,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("WaveTools.RandomNLWavesFast.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_aR);
  __Pyx_XDECREF((PyObject *)__pyx_v_aRN);
  __Pyx_XDECREF(__pyx_v_Tmax);
  __Pyx_XDECREF(__pyx_v_modes);
  __Pyx_XDECREF(__pyx_v_periods);
  __Pyx_XDECREF(__pyx_v_ii);
  __Pyx_XDECREF(__pyx_v_mode);
  __Pyx_XDECREF(__pyx_v_fname);
  __Pyx_XDECREF(__pyx_v_dt);
  __Pyx_XDECREF(__pyx_v_series);
  __Pyx_XDECREF(__pyx_v_Tstart_temp);
  __Pyx_XDECREF(__pyx_v_cutoff);
  __Pyx_XDECREF(__pyx_v_Nwaves_tot);
  __Pyx_XDECREF(__pyx_v_Nwind);
  __Pyx_XDECREF(__pyx_v_Nwaves);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":2897
 * 
 * 
 *     def eta(self,x,t):             # <<<<<<<<<<<<<<
 *         """Calculates free surface elevation (RandomNLWavesFast class)
 *         Parameters
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_17RandomNLWavesFast_3eta(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9WaveTools_17RandomNLWavesFast_2eta[] = "Calculates free surface elevation (RandomNLWavesFast class)\n        Parameters\n        ----------\n        x : numpy.ndarray\n            Position vector\n        t : float\n            Time variable\n\n        Returns\n        --------\n        float\n            Free-surface elevation as a float\n\n        ";
static PyMethodDef __pyx_mdef_9WaveTools_17RandomNLWavesFast_3eta = {"eta", (PyCFunction)__pyx_pw_9WaveTools_17RandomNLWavesFast_3eta, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_17RandomNLWavesFast_2eta};
static PyObject *__pyx_pw_9WaveTools_17RandomNLWavesFast_3eta(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_t = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("eta (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_x,&__pyx_n_s_t,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("eta", 1, 3, 3, 1); __PYX_ERR(0, 2897, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("eta", 1, 3, 3, 2); __PYX_ERR(0, 2897, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "eta") < 0)) __PYX_ERR(0, 2897, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_self = values[0];
    __pyx_v_x = values[1];
    __pyx_v_t = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("eta", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2897, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("WaveTools.RandomNLWavesFast.eta", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9WaveTools_17RandomNLWavesFast_2eta(__pyx_self, __pyx_v_self, __pyx_v_x, __pyx_v_t);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_17RandomNLWavesFast_2eta(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_t) {
  PyObject *__pyx_v_etaR = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("eta", 0);

  /* "WaveTools.py":2912
 * 
 *         """
 *         etaR = self.TS[0].eta(x,t)+ self.TS[1].eta(x,t)+self.TS[2].eta(x,t)             # <<<<<<<<<<<<<<
 *         return etaR
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_TS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2912, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2912, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_eta); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2912, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_x, __pyx_v_t};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2912, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_x, __pyx_v_t};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2912, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2912, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_x);
    __Pyx_GIVEREF(__pyx_v_x);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_x);
    __Pyx_INCREF(__pyx_v_t);
    __Pyx_GIVEREF(__pyx_v_t);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_t);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2912, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_TS); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2912, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_5, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2912, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_eta); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2912, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_x, __pyx_v_t};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2912, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_x, __pyx_v_t};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2912, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2912, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_x);
    __Pyx_GIVEREF(__pyx_v_x);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_4, __pyx_v_x);
    __Pyx_INCREF(__pyx_v_t);
    __Pyx_GIVEREF(__pyx_v_t);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_4, __pyx_v_t);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2912, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2912, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_TS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2912, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_1, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2912, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_eta); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2912, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_v_x, __pyx_v_t};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2912, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_v_x, __pyx_v_t};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2912, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2912, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_INCREF(__pyx_v_x);
    __Pyx_GIVEREF(__pyx_v_x);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_4, __pyx_v_x);
    __Pyx_INCREF(__pyx_v_t);
    __Pyx_GIVEREF(__pyx_v_t);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_4, __pyx_v_t);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2912, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_t_5, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2912, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_etaR = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "WaveTools.py":2913
 *         """
 *         etaR = self.TS[0].eta(x,t)+ self.TS[1].eta(x,t)+self.TS[2].eta(x,t)
 *         return etaR             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_etaR);
  __pyx_r = __pyx_v_etaR;
  goto __pyx_L0;

  /* "WaveTools.py":2897
 * 
 * 
 *     def eta(self,x,t):             # <<<<<<<<<<<<<<
 *         """Calculates free surface elevation (RandomNLWavesFast class)
 *         Parameters
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("WaveTools.RandomNLWavesFast.eta", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_etaR);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "WaveTools.py":2916
 * 
 * 
 *     def u(self,x,t):             # <<<<<<<<<<<<<<
 *         """Calculates wave velocity vector (RandomNLWavesFast class)
 *         Parameters
 */

/* Python wrapper */
static PyObject *__pyx_pw_9WaveTools_17RandomNLWavesFast_5u(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9WaveTools_17RandomNLWavesFast_4u[] = "Calculates wave velocity vector (RandomNLWavesFast class)\n        Parameters\n        ----------\n        x : numpy.ndarray\n            Position vector\n        t : float\n            Time variable\n\n        Returns\n        --------\n        numpy.ndarray\n            Velocity vector as 1D array\n\n        ";
static PyMethodDef __pyx_mdef_9WaveTools_17RandomNLWavesFast_5u = {"u", (PyCFunction)__pyx_pw_9WaveTools_17RandomNLWavesFast_5u, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_17RandomNLWavesFast_4u};
static PyObject *__pyx_pw_9WaveTools_17RandomNLWavesFast_5u(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_t = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("u (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_x,&__pyx_n_s_t,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("u", 1, 3, 3, 1); __PYX_ERR(0, 2916, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("u", 1, 3, 3, 2); __PYX_ERR(0, 2916, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "u") < 0)) __PYX_ERR(0, 2916, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_self = values[0];
    __pyx_v_x = values[1];
    __pyx_v_t = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("u", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2916, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("WaveTools.RandomNLWavesFast.u", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9WaveTools_17RandomNLWavesFast_4u(__pyx_self, __pyx_v_self, __pyx_v_x, __pyx_v_t);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9WaveTools_17RandomNLWavesFast_4u(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_t) {
  PyObject *__pyx_v_uR = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("u", 0);

  /* "WaveTools.py":2931
 * 
 *         """
 *         uR = self.TS[0].u(x,t)+ self.TS[1].u(x,t)+self.TS[2].u(x,t)             # <<<<<<<<<<<<<<
 *         return uR
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_TS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2931, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2931, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_u); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2931, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_x, __pyx_v_t};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2931, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_x, __pyx_v_t};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2931, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2931, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_x);
    __Pyx_GIVEREF(__pyx_v_x);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_x);
    __Pyx_INCREF(__pyx_v_t);
    __Pyx_GIVEREF(__pyx_v_t);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_t);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2931, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_TS); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2931, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_5, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2931, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_u); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2931, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_x, __pyx_v_t};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2931, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_x, __pyx_v_t};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2931, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2931, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_x);
    __Pyx_GIVEREF(__pyx_v_x);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_4, __pyx_v_x);
    __Pyx_INCREF(__pyx_v_t);
    __Pyx_GIVEREF(__pyx_v_t);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_4, __pyx_v_t);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2931, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2931, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_TS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2931, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_1, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2931, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_u); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2931, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_v_x, __pyx_v_t};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2931, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_v_x, __pyx_v_t};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2931, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2931, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_INCREF(__pyx_v_x);
    __Pyx_GIVEREF(__pyx_v_x);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_4, __pyx_v_x);
    __Pyx_INCREF(__pyx_v_t);
    __Pyx_GIVEREF(__pyx_v_t);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_4, __pyx_v_t);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2931, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_t_5, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2931, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_uR = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "WaveTools.py":2932
 *         """
 *         uR = self.TS[0].u(x,t)+ self.TS[1].u(x,t)+self.TS[2].u(x,t)
 *         return uR             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_uR);
  __pyx_r = __pyx_v_uR;
  goto __pyx_L0;

  /* "WaveTools.py":2916
 * 
 * 
 *     def u(self,x,t):             # <<<<<<<<<<<<<<
 *         """Calculates wave velocity vector (RandomNLWavesFast class)
 *         Parameters
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("WaveTools.RandomNLWavesFast.u", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_uR);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":197
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5numpy_7ndarray___getbuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_copy_shape;
  int __pyx_v_i;
  int __pyx_v_ndim;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  int __pyx_v_t;
  char *__pyx_v_f;
  PyArray_Descr *__pyx_v_descr = 0;
  int __pyx_v_offset;
  int __pyx_v_hasfields;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  char *__pyx_t_7;
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  if (__pyx_v_info != NULL) {
    __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(__pyx_v_info->obj);
  }

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":203
 *             # of flags
 * 
 *             if info == NULL: return             # <<<<<<<<<<<<<<
 * 
 *             cdef int copy_shape, i, ndim
 */
  __pyx_t_1 = ((__pyx_v_info == NULL) != 0);
  if (__pyx_t_1) {
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":206
 * 
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 */
  __pyx_v_endian_detector = 1;

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":207
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 * 
 *             ndim = PyArray_NDIM(self)
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":209
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 *             ndim = PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_v_ndim = PyArray_NDIM(__pyx_v_self);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":211
 *             ndim = PyArray_NDIM(self)
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 copy_shape = 1
 *             else:
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":212
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 copy_shape = 1             # <<<<<<<<<<<<<<
 *             else:
 *                 copy_shape = 0
 */
    __pyx_v_copy_shape = 1;

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":211
 *             ndim = PyArray_NDIM(self)
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 copy_shape = 1
 *             else:
 */
    goto __pyx_L4;
  }

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":214
 *                 copy_shape = 1
 *             else:
 *                 copy_shape = 0             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 */
  /*else*/ {
    __pyx_v_copy_shape = 0;
  }
  __pyx_L4:;

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":216
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_C_CONTIGUOUS) == PyBUF_C_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L6_bool_binop_done;
  }

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":217
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_C_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L6_bool_binop_done:;

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":216
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  if (__pyx_t_1) {

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":218
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__209, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 218, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 218, __pyx_L1_error)

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":216
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  }

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":220
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_F_CONTIGUOUS) == PyBUF_F_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L9_bool_binop_done;
  }

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":221
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_F_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L9_bool_binop_done:;

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":220
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  if (__pyx_t_1) {

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":222
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__210, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 222, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 222, __pyx_L1_error)

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":220
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  }

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":224
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 *             info.buf = PyArray_DATA(self)             # <<<<<<<<<<<<<<
 *             info.ndim = ndim
 *             if copy_shape:
 */
  __pyx_v_info->buf = PyArray_DATA(__pyx_v_self);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":225
 * 
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim             # <<<<<<<<<<<<<<
 *             if copy_shape:
 *                 # Allocate new buffer for strides and shape info.
 */
  __pyx_v_info->ndim = __pyx_v_ndim;

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":226
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if copy_shape:             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
  __pyx_t_1 = (__pyx_v_copy_shape != 0);
  if (__pyx_t_1) {

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":229
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)             # <<<<<<<<<<<<<<
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 */
    __pyx_v_info->strides = ((Py_ssize_t *)malloc((((sizeof(Py_ssize_t)) * ((size_t)__pyx_v_ndim)) * 2)));

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":230
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim             # <<<<<<<<<<<<<<
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 */
    __pyx_v_info->shape = (__pyx_v_info->strides + __pyx_v_ndim);

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":231
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):             # <<<<<<<<<<<<<<
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 */
    __pyx_t_4 = __pyx_v_ndim;
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":232
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]             # <<<<<<<<<<<<<<
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 */
      (__pyx_v_info->strides[__pyx_v_i]) = (PyArray_STRIDES(__pyx_v_self)[__pyx_v_i]);

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":233
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]             # <<<<<<<<<<<<<<
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 */
      (__pyx_v_info->shape[__pyx_v_i]) = (PyArray_DIMS(__pyx_v_self)[__pyx_v_i]);
    }

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":226
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if copy_shape:             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
    goto __pyx_L11;
  }

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":235
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 */
  /*else*/ {
    __pyx_v_info->strides = ((Py_ssize_t *)PyArray_STRIDES(__pyx_v_self));

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":236
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 */
    __pyx_v_info->shape = ((Py_ssize_t *)PyArray_DIMS(__pyx_v_self));
  }
  __pyx_L11:;

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":237
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 */
  __pyx_v_info->suboffsets = NULL;

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":238
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)             # <<<<<<<<<<<<<<
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 * 
 */
  __pyx_v_info->itemsize = PyArray_ITEMSIZE(__pyx_v_self);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":239
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)             # <<<<<<<<<<<<<<
 * 
 *             cdef int t
 */
  __pyx_v_info->readonly = (!(PyArray_ISWRITEABLE(__pyx_v_self) != 0));

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":242
 * 
 *             cdef int t
 *             cdef char* f = NULL             # <<<<<<<<<<<<<<
 *             cdef dtype descr = self.descr
 *             cdef int offset
 */
  __pyx_v_f = NULL;

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":243
 *             cdef int t
 *             cdef char* f = NULL
 *             cdef dtype descr = self.descr             # <<<<<<<<<<<<<<
 *             cdef int offset
 * 
 */
  __pyx_t_3 = ((PyObject *)__pyx_v_self->descr);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_v_descr = ((PyArray_Descr *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":246
 *             cdef int offset
 * 
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields and not copy_shape:
 */
  __pyx_v_hasfields = PyDataType_HASFIELDS(__pyx_v_descr);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":248
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
 * 
 *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
 *                 # do not call releasebuffer
 *                 info.obj = None
 */
  __pyx_t_2 = ((!(__pyx_v_hasfields != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L15_bool_binop_done;
  }
  __pyx_t_2 = ((!(__pyx_v_copy_shape != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L15_bool_binop_done:;
  if (__pyx_t_1) {

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":250
 *             if not hasfields and not copy_shape:
 *                 # do not call releasebuffer
 *                 info.obj = None             # <<<<<<<<<<<<<<
 *             else:
 *                 # need to call releasebuffer
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = Py_None;

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":248
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
 * 
 *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
 *                 # do not call releasebuffer
 *                 info.obj = None
 */
    goto __pyx_L14;
  }

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":253
 *             else:
 *                 # need to call releasebuffer
 *                 info.obj = self             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields:
 */
  /*else*/ {
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = ((PyObject *)__pyx_v_self);
  }
  __pyx_L14:;

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":255
 *                 info.obj = self
 * 
 *             if not hasfields:             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  __pyx_t_1 = ((!(__pyx_v_hasfields != 0)) != 0);
  if (__pyx_t_1) {

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":256
 * 
 *             if not hasfields:
 *                 t = descr.type_num             # <<<<<<<<<<<<<<
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 */
    __pyx_t_4 = __pyx_v_descr->type_num;
    __pyx_v_t = __pyx_t_4;

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":257
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '>') != 0);
    if (!__pyx_t_2) {
      goto __pyx_L20_next_or;
    } else {
    }
    __pyx_t_2 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L19_bool_binop_done;
    }
    __pyx_L20_next_or:;

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":258
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '<') != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L19_bool_binop_done;
    }
    __pyx_t_2 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L19_bool_binop_done:;

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":257
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    if (__pyx_t_1) {

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":259
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__211, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 259, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(2, 259, __pyx_L1_error)

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":257
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    }

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":260
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 */
    switch (__pyx_v_t) {
      case NPY_BYTE:
      __pyx_v_f = ((char *)"b");
      break;

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":261
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 */
      case NPY_UBYTE:
      __pyx_v_f = ((char *)"B");
      break;

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":262
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 */
      case NPY_SHORT:
      __pyx_v_f = ((char *)"h");
      break;

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":263
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 */
      case NPY_USHORT:
      __pyx_v_f = ((char *)"H");
      break;

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":264
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 */
      case NPY_INT:
      __pyx_v_f = ((char *)"i");
      break;

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":265
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 */
      case NPY_UINT:
      __pyx_v_f = ((char *)"I");
      break;

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":266
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 */
      case NPY_LONG:
      __pyx_v_f = ((char *)"l");
      break;

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":267
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 */
      case NPY_ULONG:
      __pyx_v_f = ((char *)"L");
      break;

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":268
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 */
      case NPY_LONGLONG:
      __pyx_v_f = ((char *)"q");
      break;

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":269
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 */
      case NPY_ULONGLONG:
      __pyx_v_f = ((char *)"Q");
      break;

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":270
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 */
      case NPY_FLOAT:
      __pyx_v_f = ((char *)"f");
      break;

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":271
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 */
      case NPY_DOUBLE:
      __pyx_v_f = ((char *)"d");
      break;

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":272
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 */
      case NPY_LONGDOUBLE:
      __pyx_v_f = ((char *)"g");
      break;

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":273
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 */
      case NPY_CFLOAT:
      __pyx_v_f = ((char *)"Zf");
      break;

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":274
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"
 */
      case NPY_CDOUBLE:
      __pyx_v_f = ((char *)"Zd");
      break;

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":275
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 */
      case NPY_CLONGDOUBLE:
      __pyx_v_f = ((char *)"Zg");
      break;

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":276
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      case NPY_OBJECT:
      __pyx_v_f = ((char *)"O");
      break;
      default:

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":278
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *                 info.format = f
 *                 return
 */
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __PYX_ERR(2, 278, __pyx_L1_error)
      break;
    }

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":279
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f             # <<<<<<<<<<<<<<
 *                 return
 *             else:
 */
    __pyx_v_info->format = __pyx_v_f;

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":280
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f
 *                 return             # <<<<<<<<<<<<<<
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":255
 *                 info.obj = self
 * 
 *             if not hasfields:             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  }

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":282
 *                 return
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)             # <<<<<<<<<<<<<<
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 */
  /*else*/ {
    __pyx_v_info->format = ((char *)malloc(0xFF));

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":283
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment             # <<<<<<<<<<<<<<
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,
 */
    (__pyx_v_info->format[0]) = '^';

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":284
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0             # <<<<<<<<<<<<<<
 *                 f = _util_dtypestring(descr, info.format + 1,
 *                                       info.format + _buffer_format_string_len,
 */
    __pyx_v_offset = 0;

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":285
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,             # <<<<<<<<<<<<<<
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 */
    __pyx_t_7 = __pyx_f_5numpy__util_dtypestring(__pyx_v_descr, (__pyx_v_info->format + 1), (__pyx_v_info->format + 0xFF), (&__pyx_v_offset)); if (unlikely(__pyx_t_7 == NULL)) __PYX_ERR(2, 285, __pyx_L1_error)
    __pyx_v_f = __pyx_t_7;

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":288
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 *                 f[0] = c'\0' # Terminate format string             # <<<<<<<<<<<<<<
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 */
    (__pyx_v_f[0]) = '\x00';
  }

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":197
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("numpy.ndarray.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info != NULL && __pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = NULL;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info != NULL && __pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(Py_None);
    __Pyx_DECREF(Py_None); __pyx_v_info->obj = NULL;
  }
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_descr);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":290
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 */

/* Python wrapper */
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info); /*proto*/
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__releasebuffer__ (wrapper)", 0);
  __pyx_pf_5numpy_7ndarray_2__releasebuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__releasebuffer__", 0);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":291
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_t_1 = (PyArray_HASFIELDS(__pyx_v_self) != 0);
  if (__pyx_t_1) {

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":292
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)
 */
    free(__pyx_v_info->format);

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":291
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  }

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":293
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":294
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)             # <<<<<<<<<<<<<<
 *                 # info.shape was stored after info.strides in the same block
 * 
 */
    free(__pyx_v_info->strides);

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":293
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  }

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":290
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":770
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":771
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 771, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":770
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":773
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":774
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 774, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":773
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":776
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":777
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 777, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":776
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":779
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":780
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 780, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":779
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":782
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":783
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 783, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":782
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":785
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *__pyx_v_descr, char *__pyx_v_f, char *__pyx_v_end, int *__pyx_v_offset) {
  PyArray_Descr *__pyx_v_child = 0;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_childname = NULL;
  PyObject *__pyx_v_new_offset = NULL;
  PyObject *__pyx_v_t = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  long __pyx_t_8;
  char *__pyx_t_9;
  __Pyx_RefNannySetupContext("_util_dtypestring", 0);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":790
 * 
 *     cdef dtype child
 *     cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 *     cdef tuple fields
 */
  __pyx_v_endian_detector = 1;

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":791
 *     cdef dtype child
 *     cdef int endian_detector = 1
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 *     cdef tuple fields
 * 
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":794
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  if (unlikely(__pyx_v_descr->names == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(2, 794, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_descr->names; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(2, 794, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 794, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_childname, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":795
 * 
 *     for childname in descr.names:
 *         fields = descr.fields[childname]             # <<<<<<<<<<<<<<
 *         child, new_offset = fields
 * 
 */
    if (unlikely(__pyx_v_descr->fields == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(2, 795, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_descr->fields, __pyx_v_childname); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 795, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(2, 795, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_fields, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":796
 *     for childname in descr.names:
 *         fields = descr.fields[childname]
 *         child, new_offset = fields             # <<<<<<<<<<<<<<
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 */
    if (likely(__pyx_v_fields != Py_None)) {
      PyObject* sequence = __pyx_v_fields;
      #if !CYTHON_COMPILING_IN_PYPY
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(2, 796, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 796, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 796, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
    } else {
      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(2, 796, __pyx_L1_error)
    }
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_dtype))))) __PYX_ERR(2, 796, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_child, ((PyArray_Descr *)__pyx_t_3));
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_new_offset, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":798
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 798, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyNumber_Subtract(__pyx_v_new_offset, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 798, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 798, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = ((((__pyx_v_end - __pyx_v_f) - ((int)__pyx_t_5)) < 15) != 0);
    if (__pyx_t_6) {

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":799
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__212, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 799, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(2, 799, __pyx_L1_error)

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":798
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    }

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":801
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '>') != 0);
    if (!__pyx_t_7) {
      goto __pyx_L8_next_or;
    } else {
    }
    __pyx_t_7 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_L8_next_or:;

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":802
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *             raise ValueError(u"Non-native byte order not supported")
 *             # One could encode it in the format string and have Cython
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '<') != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_7 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L7_bool_binop_done:;

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":801
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    if (__pyx_t_6) {

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":803
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__213, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 803, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(2, 803, __pyx_L1_error)

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":801
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    }

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":813
 * 
 *         # Output padding bytes
 *         while offset[0] < new_offset:             # <<<<<<<<<<<<<<
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 */
    while (1) {
      __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 813, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_new_offset, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 813, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 813, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (!__pyx_t_6) break;

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":814
 *         # Output padding bytes
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte             # <<<<<<<<<<<<<<
 *             f += 1
 *             offset[0] += 1
 */
      (__pyx_v_f[0]) = 0x78;

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":815
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte
 *             f += 1             # <<<<<<<<<<<<<<
 *             offset[0] += 1
 * 
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":816
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 *             offset[0] += 1             # <<<<<<<<<<<<<<
 * 
 *         offset[0] += child.itemsize
 */
      __pyx_t_8 = 0;
      (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + 1);
    }

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":818
 *             offset[0] += 1
 * 
 *         offset[0] += child.itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not PyDataType_HASFIELDS(child):
 */
    __pyx_t_8 = 0;
    (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + __pyx_v_child->elsize);

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":820
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
    __pyx_t_6 = ((!(PyDataType_HASFIELDS(__pyx_v_child) != 0)) != 0);
    if (__pyx_t_6) {

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":821
 * 
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num             # <<<<<<<<<<<<<<
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")
 */
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_child->type_num); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 821, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":822
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      __pyx_t_6 = (((__pyx_v_end - __pyx_v_f) < 5) != 0);
      if (__pyx_t_6) {

        /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":823
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__214, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 823, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(2, 823, __pyx_L1_error)

        /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":822
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      }

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":826
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_BYTE); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 826, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 826, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 826, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 98;
        goto __pyx_L15;
      }

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":827
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"             # <<<<<<<<<<<<<<
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UBYTE); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 827, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 827, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 827, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 66;
        goto __pyx_L15;
      }

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":828
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"             # <<<<<<<<<<<<<<
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_SHORT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 828, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 828, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 828, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x68;
        goto __pyx_L15;
      }

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":829
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"             # <<<<<<<<<<<<<<
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_USHORT); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 829, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 829, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 829, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 72;
        goto __pyx_L15;
      }

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":830
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_INT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 830, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 830, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 830, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x69;
        goto __pyx_L15;
      }

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":831
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UINT); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 831, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 831, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 831, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 73;
        goto __pyx_L15;
      }

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":832
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 832, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 832, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 832, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x6C;
        goto __pyx_L15;
      }

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":833
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 833, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 833, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 833, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 76;
        goto __pyx_L15;
      }

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":834
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGLONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 834, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 834, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 834, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x71;
        goto __pyx_L15;
      }

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":835
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONGLONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 835, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 835, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 835, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 81;
        goto __pyx_L15;
      }

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":836
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"             # <<<<<<<<<<<<<<
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_FLOAT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 836, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 836, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 836, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x66;
        goto __pyx_L15;
      }

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":837
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_DOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 837, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 837, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 837, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x64;
        goto __pyx_L15;
      }

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":838
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"             # <<<<<<<<<<<<<<
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 838, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 838, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 838, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x67;
        goto __pyx_L15;
      }

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":839
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf             # <<<<<<<<<<<<<<
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CFLOAT); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 839, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 839, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 839, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x66;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":840
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd             # <<<<<<<<<<<<<<
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 840, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 840, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 840, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x64;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":841
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg             # <<<<<<<<<<<<<<
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CLONGDOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 841, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 841, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 841, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x67;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":842
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_OBJECT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 842, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 842, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 842, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 79;
        goto __pyx_L15;
      }

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":844
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *             f += 1
 *         else:
 */
      /*else*/ {
        __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 844, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 844, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 844, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __PYX_ERR(2, 844, __pyx_L1_error)
      }
      __pyx_L15:;

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":845
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *             f += 1             # <<<<<<<<<<<<<<
 *         else:
 *             # Cython ignores struct boundary information ("T{...}"),
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":820
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
      goto __pyx_L13;
    }

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":849
 *             # Cython ignores struct boundary information ("T{...}"),
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)             # <<<<<<<<<<<<<<
 *     return f
 * 
 */
    /*else*/ {
      __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_9 == NULL)) __PYX_ERR(2, 849, __pyx_L1_error)
      __pyx_v_f = __pyx_t_9;
    }
    __pyx_L13:;

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":794
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":850
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)
 *     return f             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_f;
  goto __pyx_L0;

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":785
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("numpy._util_dtypestring", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_child);
  __Pyx_XDECREF(__pyx_v_fields);
  __Pyx_XDECREF(__pyx_v_childname);
  __Pyx_XDECREF(__pyx_v_new_offset);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":966
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  PyObject *__pyx_v_baseptr;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":968
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */
  __pyx_t_1 = (__pyx_v_base == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":969
 *      cdef PyObject* baseptr
 *      if base is None:
 *          baseptr = NULL             # <<<<<<<<<<<<<<
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 */
    __pyx_v_baseptr = NULL;

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":968
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */
    goto __pyx_L3;
  }

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":971
 *          baseptr = NULL
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!             # <<<<<<<<<<<<<<
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 */
  /*else*/ {
    Py_INCREF(__pyx_v_base);

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":972
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base             # <<<<<<<<<<<<<<
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr
 */
    __pyx_v_baseptr = ((PyObject *)__pyx_v_base);
  }
  __pyx_L3:;

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":973
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)             # <<<<<<<<<<<<<<
 *      arr.base = baseptr
 * 
 */
  Py_XDECREF(__pyx_v_arr->base);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":974
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  __pyx_v_arr->base = __pyx_v_baseptr;

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":966
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":976
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":977
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_arr->base == NULL) != 0);
  if (__pyx_t_1) {

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":978
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     else:
 *         return <object>arr.base
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":977
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */
  }

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":980
 *         return None
 *     else:
 *         return <object>arr.base             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_arr->base));
    __pyx_r = ((PyObject *)__pyx_v_arr->base);
    goto __pyx_L0;
  }

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":976
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":985
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_array()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_array", 0);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":986
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":987
 * cdef inline int import_array() except -1:
 *     try:
 *         _import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")
 */
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(2, 987, __pyx_L3_error)

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":986
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L10_try_end;
    __pyx_L3_error:;
    __Pyx_PyThreadState_assign

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":988
 *     try:
 *         _import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 988, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":989
 *         _import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__215, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 989, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 989, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":986
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L10_try_end:;
  }

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":985
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_array()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":991
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_umath", 0);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":992
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":993
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(2, 993, __pyx_L3_error)

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":992
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L10_try_end;
    __pyx_L3_error:;
    __Pyx_PyThreadState_assign

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":994
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 994, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":995
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__216, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 995, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 995, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":992
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L10_try_end:;
  }

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":991
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":997
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_ufunc", 0);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":998
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":999
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(2, 999, __pyx_L3_error)

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":998
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L10_try_end;
    __pyx_L3_error:;
    __Pyx_PyThreadState_assign

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1000
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 1000, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1001
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__217, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1001, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 1001, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":998
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L10_try_end:;
  }

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":997
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "carray.to_py":112
 * 
 * @cname("__Pyx_carray_to_py_double")
 * cdef inline list __Pyx_carray_to_py_double(double *v, Py_ssize_t length):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     cdef object value
 */

static CYTHON_INLINE PyObject *__Pyx_carray_to_py_double(double *__pyx_v_v, Py_ssize_t __pyx_v_length) {
  size_t __pyx_v_i;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_v_l = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  __Pyx_RefNannySetupContext("__Pyx_carray_to_py_double", 0);

  /* "carray.to_py":115
 *     cdef size_t i
 *     cdef object value
 *     l = PyList_New(length)             # <<<<<<<<<<<<<<
 *     for i in range(<size_t>length):
 *         value = v[i]
 */
  __pyx_t_1 = PyList_New(__pyx_v_length); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_l = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "carray.to_py":116
 *     cdef object value
 *     l = PyList_New(length)
 *     for i in range(<size_t>length):             # <<<<<<<<<<<<<<
 *         value = v[i]
 *         Py_INCREF(value)
 */
  __pyx_t_2 = ((size_t)__pyx_v_length);
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "carray.to_py":117
 *     l = PyList_New(length)
 *     for i in range(<size_t>length):
 *         value = v[i]             # <<<<<<<<<<<<<<
 *         Py_INCREF(value)
 *         PyList_SET_ITEM(l, i, value)
 */
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 117, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "carray.to_py":118
 *     for i in range(<size_t>length):
 *         value = v[i]
 *         Py_INCREF(value)             # <<<<<<<<<<<<<<
 *         PyList_SET_ITEM(l, i, value)
 *     return l
 */
    Py_INCREF(__pyx_v_value);

    /* "carray.to_py":119
 *         value = v[i]
 *         Py_INCREF(value)
 *         PyList_SET_ITEM(l, i, value)             # <<<<<<<<<<<<<<
 *     return l
 * 
 */
    PyList_SET_ITEM(__pyx_v_l, __pyx_v_i, __pyx_v_value);
  }

  /* "carray.to_py":120
 *         Py_INCREF(value)
 *         PyList_SET_ITEM(l, i, value)
 *     return l             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_l);
  __pyx_r = __pyx_v_l;
  goto __pyx_L0;

  /* "carray.to_py":112
 * 
 * @cname("__Pyx_carray_to_py_double")
 * cdef inline list __Pyx_carray_to_py_double(double *v, Py_ssize_t length):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     cdef object value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("carray.to_py.__Pyx_carray_to_py_double", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XDECREF(__pyx_v_l);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "carray.to_py":124
 * 
 * @cname("__Pyx_carray_to_tuple_double")
 * cdef inline tuple __Pyx_carray_to_tuple_double(double *v, Py_ssize_t length):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     cdef object value
 */

static CYTHON_INLINE PyObject *__Pyx_carray_to_tuple_double(double *__pyx_v_v, Py_ssize_t __pyx_v_length) {
  size_t __pyx_v_i;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  __Pyx_RefNannySetupContext("__Pyx_carray_to_tuple_double", 0);

  /* "carray.to_py":127
 *     cdef size_t i
 *     cdef object value
 *     t = PyTuple_New(length)             # <<<<<<<<<<<<<<
 *     for i in range(<size_t>length):
 *         value = v[i]
 */
  __pyx_t_1 = PyTuple_New(__pyx_v_length); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_t = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "carray.to_py":128
 *     cdef object value
 *     t = PyTuple_New(length)
 *     for i in range(<size_t>length):             # <<<<<<<<<<<<<<
 *         value = v[i]
 *         Py_INCREF(value)
 */
  __pyx_t_2 = ((size_t)__pyx_v_length);
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "carray.to_py":129
 *     t = PyTuple_New(length)
 *     for i in range(<size_t>length):
 *         value = v[i]             # <<<<<<<<<<<<<<
 *         Py_INCREF(value)
 *         PyTuple_SET_ITEM(t, i, value)
 */
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 129, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "carray.to_py":130
 *     for i in range(<size_t>length):
 *         value = v[i]
 *         Py_INCREF(value)             # <<<<<<<<<<<<<<
 *         PyTuple_SET_ITEM(t, i, value)
 *     return t
 */
    Py_INCREF(__pyx_v_value);

    /* "carray.to_py":131
 *         value = v[i]
 *         Py_INCREF(value)
 *         PyTuple_SET_ITEM(t, i, value)             # <<<<<<<<<<<<<<
 *     return t
 */
    PyTuple_SET_ITEM(__pyx_v_t, __pyx_v_i, __pyx_v_value);
  }

  /* "carray.to_py":132
 *         Py_INCREF(value)
 *         PyTuple_SET_ITEM(t, i, value)
 *     return t             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_t);
  __pyx_r = __pyx_v_t;
  goto __pyx_L0;

  /* "carray.to_py":124
 * 
 * @cname("__Pyx_carray_to_tuple_double")
 * cdef inline tuple __Pyx_carray_to_tuple_double(double *v, Py_ssize_t length):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     cdef object value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("carray.to_py.__Pyx_carray_to_tuple_double", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_9WaveTools_SolitaryWave(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_9WaveTools_SolitaryWave *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9WaveTools_SolitaryWave *)o);
  p->g = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->waveDir = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->vDir = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->trans = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_9WaveTools_SolitaryWave(PyObject *o) {
  struct __pyx_obj_9WaveTools_SolitaryWave *p = (struct __pyx_obj_9WaveTools_SolitaryWave *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->g);
  Py_CLEAR(p->waveDir);
  Py_CLEAR(p->vDir);
  Py_CLEAR(p->trans);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_9WaveTools_SolitaryWave(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9WaveTools_SolitaryWave *p = (struct __pyx_obj_9WaveTools_SolitaryWave *)o;
  if (p->g) {
    e = (*v)(((PyObject*)p->g), a); if (e) return e;
  }
  if (p->waveDir) {
    e = (*v)(((PyObject*)p->waveDir), a); if (e) return e;
  }
  if (p->vDir) {
    e = (*v)(((PyObject*)p->vDir), a); if (e) return e;
  }
  if (p->trans) {
    e = (*v)(((PyObject*)p->trans), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9WaveTools_SolitaryWave(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9WaveTools_SolitaryWave *p = (struct __pyx_obj_9WaveTools_SolitaryWave *)o;
  tmp = ((PyObject*)p->g);
  p->g = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->waveDir);
  p->waveDir = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->vDir);
  p->vDir = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->trans);
  p->trans = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9WaveTools_SolitaryWave[] = {
  {"eta", (PyCFunction)__pyx_pw_9WaveTools_12SolitaryWave_3eta, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_12SolitaryWave_2eta},
  {"u", (PyCFunction)__pyx_pw_9WaveTools_12SolitaryWave_5u, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_12SolitaryWave_4u},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9WaveTools_SolitaryWave = {
  PyVarObject_HEAD_INIT(0, 0)
  "WaveTools.SolitaryWave", /*tp_name*/
  sizeof(struct __pyx_obj_9WaveTools_SolitaryWave), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9WaveTools_SolitaryWave, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n    This class is used for generating 1st order solitary wave\n\n    Parameters\n    ----------\n    waveHeight: float\n            Regular wave height\n    mwl : float\n            Still water level\n    depth : float\n            Water depth\n    g : numpy.ndarray\n             Gravitational acceleration vector\n    waveDir : numpy.ndarray\n             Wave direction in vector form\n    trans : numpy.ndarray\n             Position vector of the peak              \n    fast : bool\n            Switch for optimised functions\n\n            ", /*tp_doc*/
  __pyx_tp_traverse_9WaveTools_SolitaryWave, /*tp_traverse*/
  __pyx_tp_clear_9WaveTools_SolitaryWave, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9WaveTools_SolitaryWave, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_9WaveTools_12SolitaryWave_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9WaveTools_SolitaryWave, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_9WaveTools_MonochromaticWaves __pyx_vtable_9WaveTools_MonochromaticWaves;

static PyObject *__pyx_tp_new_9WaveTools_MonochromaticWaves(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_9WaveTools_MonochromaticWaves *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9WaveTools_MonochromaticWaves *)o);
  p->__pyx_vtab = __pyx_vtabptr_9WaveTools_MonochromaticWaves;
  p->g = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->waveDir = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->vDir = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->Ycoeff = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->Bcoeff = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->kDir = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->tanhF = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->mV = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->waveType = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_9WaveTools_MonochromaticWaves(PyObject *o) {
  struct __pyx_obj_9WaveTools_MonochromaticWaves *p = (struct __pyx_obj_9WaveTools_MonochromaticWaves *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->g);
  Py_CLEAR(p->waveDir);
  Py_CLEAR(p->vDir);
  Py_CLEAR(p->Ycoeff);
  Py_CLEAR(p->Bcoeff);
  Py_CLEAR(p->kDir);
  Py_CLEAR(p->tanhF);
  Py_CLEAR(p->mV);
  Py_CLEAR(p->waveType);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_9WaveTools_MonochromaticWaves(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9WaveTools_MonochromaticWaves *p = (struct __pyx_obj_9WaveTools_MonochromaticWaves *)o;
  if (p->g) {
    e = (*v)(((PyObject*)p->g), a); if (e) return e;
  }
  if (p->waveDir) {
    e = (*v)(((PyObject*)p->waveDir), a); if (e) return e;
  }
  if (p->vDir) {
    e = (*v)(((PyObject*)p->vDir), a); if (e) return e;
  }
  if (p->Ycoeff) {
    e = (*v)(((PyObject*)p->Ycoeff), a); if (e) return e;
  }
  if (p->Bcoeff) {
    e = (*v)(((PyObject*)p->Bcoeff), a); if (e) return e;
  }
  if (p->kDir) {
    e = (*v)(((PyObject*)p->kDir), a); if (e) return e;
  }
  if (p->tanhF) {
    e = (*v)(((PyObject*)p->tanhF), a); if (e) return e;
  }
  if (p->mV) {
    e = (*v)(((PyObject*)p->mV), a); if (e) return e;
  }
  if (p->waveType) {
    e = (*v)(p->waveType, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9WaveTools_MonochromaticWaves(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9WaveTools_MonochromaticWaves *p = (struct __pyx_obj_9WaveTools_MonochromaticWaves *)o;
  tmp = ((PyObject*)p->g);
  p->g = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->waveDir);
  p->waveDir = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->vDir);
  p->vDir = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->Ycoeff);
  p->Ycoeff = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->Bcoeff);
  p->Bcoeff = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->kDir);
  p->kDir = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->tanhF);
  p->tanhF = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->mV);
  p->mV = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->waveType);
  p->waveType = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_9WaveTools_18MonochromaticWaves_wavelength(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9WaveTools_18MonochromaticWaves_10wavelength_1__get__(o);
}

static int __pyx_setprop_9WaveTools_18MonochromaticWaves_wavelength(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9WaveTools_18MonochromaticWaves_10wavelength_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_9WaveTools_18MonochromaticWaves_mwl(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9WaveTools_18MonochromaticWaves_3mwl_1__get__(o);
}

static int __pyx_setprop_9WaveTools_18MonochromaticWaves_mwl(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9WaveTools_18MonochromaticWaves_3mwl_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_9WaveTools_MonochromaticWaves[] = {
  {"eta", (PyCFunction)__pyx_pw_9WaveTools_18MonochromaticWaves_3eta, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_18MonochromaticWaves_2eta},
  {"u", (PyCFunction)__pyx_pw_9WaveTools_18MonochromaticWaves_5u, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_18MonochromaticWaves_4u},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_9WaveTools_MonochromaticWaves[] = {
  {(char *)"wavelength", __pyx_getprop_9WaveTools_18MonochromaticWaves_wavelength, __pyx_setprop_9WaveTools_18MonochromaticWaves_wavelength, (char *)0, 0},
  {(char *)"mwl", __pyx_getprop_9WaveTools_18MonochromaticWaves_mwl, __pyx_setprop_9WaveTools_18MonochromaticWaves_mwl, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9WaveTools_MonochromaticWaves = {
  PyVarObject_HEAD_INIT(0, 0)
  "WaveTools.MonochromaticWaves", /*tp_name*/
  sizeof(struct __pyx_obj_9WaveTools_MonochromaticWaves), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9WaveTools_MonochromaticWaves, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n    This class is used for generating regular waves in both linear and nonlinear regimes. See Dean and Dalrymple 1994 for equations.\n\n    Parameters\n    ----------\n    period : float\n             Regular wave period\n    waveHeight: float\n            Regular wave height\n    mwl : float\n            Still water level\n    depth : float\n            Water depth\n    g : numpy.ndarray\n             Gravitational acceleration vector\n    waveDir : numpy.ndarray\n             Wave direction in vector form\n    wavelength : float\n             Regular wave lenght, calculated from linear dispersion if set to None\n    waveType : string\n             Defines regular wave theory (\"Linear\" or \"Fenton\")\n    Ycoeff : numpy.ndarray\n             Fenton Fourier coefficients for free-surface elevation             \n    Bcoeff : numpy.ndarray\n             Fenton Fourier coefficients for velocity (set to None for linear wave theory)  \n    Nf : integer\n             Fenton Fourier components for reconstruction (set to 1000, needs to be equal to the size of Bcoeff and Ycoeff)  \n    meanVelocity : numpy.ndarray\n             Mean velocity for Fenton Fourier approximation            \n    phi0 : float\n            Regular wave phase (0 by default)            \n    fast : bool\n            Switch for optimised functions\n\n            ", /*tp_doc*/
  __pyx_tp_traverse_9WaveTools_MonochromaticWaves, /*tp_traverse*/
  __pyx_tp_clear_9WaveTools_MonochromaticWaves, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9WaveTools_MonochromaticWaves, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_9WaveTools_MonochromaticWaves, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_9WaveTools_18MonochromaticWaves_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9WaveTools_MonochromaticWaves, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_9WaveTools_RandomWaves __pyx_vtable_9WaveTools_RandomWaves;

static PyObject *__pyx_tp_new_9WaveTools_RandomWaves(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9WaveTools_RandomWaves *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9WaveTools_RandomWaves *)o);
  p->__pyx_vtab = __pyx_vtabptr_9WaveTools_RandomWaves;
  p->fi = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->fim = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->Si_Jm = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->ki = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->omega = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->tanhF = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->g = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->waveDir = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->vDir = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->kDir = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->ai = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->phi = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_9WaveTools_11RandomWaves_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_9WaveTools_RandomWaves(PyObject *o) {
  struct __pyx_obj_9WaveTools_RandomWaves *p = (struct __pyx_obj_9WaveTools_RandomWaves *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->fi);
  Py_CLEAR(p->fim);
  Py_CLEAR(p->Si_Jm);
  Py_CLEAR(p->ki);
  Py_CLEAR(p->omega);
  Py_CLEAR(p->tanhF);
  Py_CLEAR(p->g);
  Py_CLEAR(p->waveDir);
  Py_CLEAR(p->vDir);
  Py_CLEAR(p->kDir);
  Py_CLEAR(p->ai);
  Py_CLEAR(p->phi);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_9WaveTools_RandomWaves(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9WaveTools_RandomWaves *p = (struct __pyx_obj_9WaveTools_RandomWaves *)o;
  if (p->fi) {
    e = (*v)(((PyObject*)p->fi), a); if (e) return e;
  }
  if (p->fim) {
    e = (*v)(((PyObject*)p->fim), a); if (e) return e;
  }
  if (p->Si_Jm) {
    e = (*v)(((PyObject*)p->Si_Jm), a); if (e) return e;
  }
  if (p->ki) {
    e = (*v)(((PyObject*)p->ki), a); if (e) return e;
  }
  if (p->omega) {
    e = (*v)(((PyObject*)p->omega), a); if (e) return e;
  }
  if (p->tanhF) {
    e = (*v)(((PyObject*)p->tanhF), a); if (e) return e;
  }
  if (p->g) {
    e = (*v)(((PyObject*)p->g), a); if (e) return e;
  }
  if (p->waveDir) {
    e = (*v)(((PyObject*)p->waveDir), a); if (e) return e;
  }
  if (p->vDir) {
    e = (*v)(((PyObject*)p->vDir), a); if (e) return e;
  }
  if (p->kDir) {
    e = (*v)(((PyObject*)p->kDir), a); if (e) return e;
  }
  if (p->ai) {
    e = (*v)(((PyObject*)p->ai), a); if (e) return e;
  }
  if (p->phi) {
    e = (*v)(p->phi, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9WaveTools_RandomWaves(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9WaveTools_RandomWaves *p = (struct __pyx_obj_9WaveTools_RandomWaves *)o;
  tmp = ((PyObject*)p->fi);
  p->fi = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->fim);
  p->fim = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->Si_Jm);
  p->Si_Jm = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->ki);
  p->ki = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->omega);
  p->omega = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->tanhF);
  p->tanhF = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->g);
  p->g = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->waveDir);
  p->waveDir = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->vDir);
  p->vDir = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->kDir);
  p->kDir = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->ai);
  p->ai = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->phi);
  p->phi = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_9WaveTools_11RandomWaves_mwl(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9WaveTools_11RandomWaves_3mwl_1__get__(o);
}

static int __pyx_setprop_9WaveTools_11RandomWaves_mwl(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9WaveTools_11RandomWaves_3mwl_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_9WaveTools_11RandomWaves_depth(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9WaveTools_11RandomWaves_5depth_1__get__(o);
}

static int __pyx_setprop_9WaveTools_11RandomWaves_depth(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9WaveTools_11RandomWaves_5depth_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_9WaveTools_11RandomWaves_gAbs(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9WaveTools_11RandomWaves_4gAbs_1__get__(o);
}

static int __pyx_setprop_9WaveTools_11RandomWaves_gAbs(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9WaveTools_11RandomWaves_4gAbs_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_9WaveTools_11RandomWaves_Tlag(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9WaveTools_11RandomWaves_4Tlag_1__get__(o);
}

static int __pyx_setprop_9WaveTools_11RandomWaves_Tlag(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9WaveTools_11RandomWaves_4Tlag_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_9WaveTools_11RandomWaves_Hs(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9WaveTools_11RandomWaves_2Hs_1__get__(o);
}

static int __pyx_setprop_9WaveTools_11RandomWaves_Hs(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9WaveTools_11RandomWaves_2Hs_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_9WaveTools_11RandomWaves_Tp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9WaveTools_11RandomWaves_2Tp_1__get__(o);
}

static int __pyx_setprop_9WaveTools_11RandomWaves_Tp(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9WaveTools_11RandomWaves_2Tp_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_9WaveTools_11RandomWaves_fp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9WaveTools_11RandomWaves_2fp_1__get__(o);
}

static int __pyx_setprop_9WaveTools_11RandomWaves_fp(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9WaveTools_11RandomWaves_2fp_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_9WaveTools_11RandomWaves_bandFactor(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9WaveTools_11RandomWaves_10bandFactor_1__get__(o);
}

static int __pyx_setprop_9WaveTools_11RandomWaves_bandFactor(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9WaveTools_11RandomWaves_10bandFactor_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_9WaveTools_11RandomWaves_df(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9WaveTools_11RandomWaves_2df_1__get__(o);
}

static int __pyx_setprop_9WaveTools_11RandomWaves_df(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9WaveTools_11RandomWaves_2df_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_9WaveTools_11RandomWaves_N(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9WaveTools_11RandomWaves_1N_1__get__(o);
}

static int __pyx_setprop_9WaveTools_11RandomWaves_N(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9WaveTools_11RandomWaves_1N_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_9WaveTools_11RandomWaves_fi(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9WaveTools_11RandomWaves_2fi_1__get__(o);
}

static int __pyx_setprop_9WaveTools_11RandomWaves_fi(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9WaveTools_11RandomWaves_2fi_3__set__(o, v);
  }
  else {
    return __pyx_pw_9WaveTools_11RandomWaves_2fi_5__del__(o);
  }
}

static PyObject *__pyx_getprop_9WaveTools_11RandomWaves_fim(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9WaveTools_11RandomWaves_3fim_1__get__(o);
}

static int __pyx_setprop_9WaveTools_11RandomWaves_fim(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9WaveTools_11RandomWaves_3fim_3__set__(o, v);
  }
  else {
    return __pyx_pw_9WaveTools_11RandomWaves_3fim_5__del__(o);
  }
}

static PyObject *__pyx_getprop_9WaveTools_11RandomWaves_Si_Jm(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9WaveTools_11RandomWaves_5Si_Jm_1__get__(o);
}

static int __pyx_setprop_9WaveTools_11RandomWaves_Si_Jm(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9WaveTools_11RandomWaves_5Si_Jm_3__set__(o, v);
  }
  else {
    return __pyx_pw_9WaveTools_11RandomWaves_5Si_Jm_5__del__(o);
  }
}

static PyObject *__pyx_getprop_9WaveTools_11RandomWaves_ki(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9WaveTools_11RandomWaves_2ki_1__get__(o);
}

static int __pyx_setprop_9WaveTools_11RandomWaves_ki(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9WaveTools_11RandomWaves_2ki_3__set__(o, v);
  }
  else {
    return __pyx_pw_9WaveTools_11RandomWaves_2ki_5__del__(o);
  }
}

static PyObject *__pyx_getprop_9WaveTools_11RandomWaves_omega(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9WaveTools_11RandomWaves_5omega_1__get__(o);
}

static int __pyx_setprop_9WaveTools_11RandomWaves_omega(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9WaveTools_11RandomWaves_5omega_3__set__(o, v);
  }
  else {
    return __pyx_pw_9WaveTools_11RandomWaves_5omega_5__del__(o);
  }
}

static PyObject *__pyx_getprop_9WaveTools_11RandomWaves_tanhF(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9WaveTools_11RandomWaves_5tanhF_1__get__(o);
}

static int __pyx_setprop_9WaveTools_11RandomWaves_tanhF(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9WaveTools_11RandomWaves_5tanhF_3__set__(o, v);
  }
  else {
    return __pyx_pw_9WaveTools_11RandomWaves_5tanhF_5__del__(o);
  }
}

static PyObject *__pyx_getprop_9WaveTools_11RandomWaves_g(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9WaveTools_11RandomWaves_1g_1__get__(o);
}

static int __pyx_setprop_9WaveTools_11RandomWaves_g(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9WaveTools_11RandomWaves_1g_3__set__(o, v);
  }
  else {
    return __pyx_pw_9WaveTools_11RandomWaves_1g_5__del__(o);
  }
}

static PyObject *__pyx_getprop_9WaveTools_11RandomWaves_waveDir(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9WaveTools_11RandomWaves_7waveDir_1__get__(o);
}

static int __pyx_setprop_9WaveTools_11RandomWaves_waveDir(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9WaveTools_11RandomWaves_7waveDir_3__set__(o, v);
  }
  else {
    return __pyx_pw_9WaveTools_11RandomWaves_7waveDir_5__del__(o);
  }
}

static PyObject *__pyx_getprop_9WaveTools_11RandomWaves_vDir(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9WaveTools_11RandomWaves_4vDir_1__get__(o);
}

static int __pyx_setprop_9WaveTools_11RandomWaves_vDir(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9WaveTools_11RandomWaves_4vDir_3__set__(o, v);
  }
  else {
    return __pyx_pw_9WaveTools_11RandomWaves_4vDir_5__del__(o);
  }
}

static PyObject *__pyx_getprop_9WaveTools_11RandomWaves_kDir(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9WaveTools_11RandomWaves_4kDir_1__get__(o);
}

static int __pyx_setprop_9WaveTools_11RandomWaves_kDir(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9WaveTools_11RandomWaves_4kDir_3__set__(o, v);
  }
  else {
    return __pyx_pw_9WaveTools_11RandomWaves_4kDir_5__del__(o);
  }
}

static PyObject *__pyx_getprop_9WaveTools_11RandomWaves_ai(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9WaveTools_11RandomWaves_2ai_1__get__(o);
}

static int __pyx_setprop_9WaveTools_11RandomWaves_ai(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9WaveTools_11RandomWaves_2ai_3__set__(o, v);
  }
  else {
    return __pyx_pw_9WaveTools_11RandomWaves_2ai_5__del__(o);
  }
}

static PyObject *__pyx_getprop_9WaveTools_11RandomWaves_phi(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9WaveTools_11RandomWaves_3phi_1__get__(o);
}

static int __pyx_setprop_9WaveTools_11RandomWaves_phi(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9WaveTools_11RandomWaves_3phi_3__set__(o, v);
  }
  else {
    return __pyx_pw_9WaveTools_11RandomWaves_3phi_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_9WaveTools_RandomWaves[] = {
  {"eta", (PyCFunction)__pyx_pw_9WaveTools_11RandomWaves_3eta, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_11RandomWaves_2eta},
  {"u", (PyCFunction)__pyx_pw_9WaveTools_11RandomWaves_5u, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_11RandomWaves_4u},
  {"writeEtaSeries", (PyCFunction)__pyx_pw_9WaveTools_11RandomWaves_7writeEtaSeries, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_11RandomWaves_6writeEtaSeries},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_9WaveTools_RandomWaves[] = {
  {(char *)"mwl", __pyx_getprop_9WaveTools_11RandomWaves_mwl, __pyx_setprop_9WaveTools_11RandomWaves_mwl, (char *)0, 0},
  {(char *)"depth", __pyx_getprop_9WaveTools_11RandomWaves_depth, __pyx_setprop_9WaveTools_11RandomWaves_depth, (char *)0, 0},
  {(char *)"gAbs", __pyx_getprop_9WaveTools_11RandomWaves_gAbs, __pyx_setprop_9WaveTools_11RandomWaves_gAbs, (char *)0, 0},
  {(char *)"Tlag", __pyx_getprop_9WaveTools_11RandomWaves_Tlag, __pyx_setprop_9WaveTools_11RandomWaves_Tlag, (char *)0, 0},
  {(char *)"Hs", __pyx_getprop_9WaveTools_11RandomWaves_Hs, __pyx_setprop_9WaveTools_11RandomWaves_Hs, (char *)0, 0},
  {(char *)"Tp", __pyx_getprop_9WaveTools_11RandomWaves_Tp, __pyx_setprop_9WaveTools_11RandomWaves_Tp, (char *)0, 0},
  {(char *)"fp", __pyx_getprop_9WaveTools_11RandomWaves_fp, __pyx_setprop_9WaveTools_11RandomWaves_fp, (char *)0, 0},
  {(char *)"bandFactor", __pyx_getprop_9WaveTools_11RandomWaves_bandFactor, __pyx_setprop_9WaveTools_11RandomWaves_bandFactor, (char *)0, 0},
  {(char *)"df", __pyx_getprop_9WaveTools_11RandomWaves_df, __pyx_setprop_9WaveTools_11RandomWaves_df, (char *)0, 0},
  {(char *)"N", __pyx_getprop_9WaveTools_11RandomWaves_N, __pyx_setprop_9WaveTools_11RandomWaves_N, (char *)0, 0},
  {(char *)"fi", __pyx_getprop_9WaveTools_11RandomWaves_fi, __pyx_setprop_9WaveTools_11RandomWaves_fi, (char *)0, 0},
  {(char *)"fim", __pyx_getprop_9WaveTools_11RandomWaves_fim, __pyx_setprop_9WaveTools_11RandomWaves_fim, (char *)0, 0},
  {(char *)"Si_Jm", __pyx_getprop_9WaveTools_11RandomWaves_Si_Jm, __pyx_setprop_9WaveTools_11RandomWaves_Si_Jm, (char *)0, 0},
  {(char *)"ki", __pyx_getprop_9WaveTools_11RandomWaves_ki, __pyx_setprop_9WaveTools_11RandomWaves_ki, (char *)0, 0},
  {(char *)"omega", __pyx_getprop_9WaveTools_11RandomWaves_omega, __pyx_setprop_9WaveTools_11RandomWaves_omega, (char *)0, 0},
  {(char *)"tanhF", __pyx_getprop_9WaveTools_11RandomWaves_tanhF, __pyx_setprop_9WaveTools_11RandomWaves_tanhF, (char *)0, 0},
  {(char *)"g", __pyx_getprop_9WaveTools_11RandomWaves_g, __pyx_setprop_9WaveTools_11RandomWaves_g, (char *)0, 0},
  {(char *)"waveDir", __pyx_getprop_9WaveTools_11RandomWaves_waveDir, __pyx_setprop_9WaveTools_11RandomWaves_waveDir, (char *)0, 0},
  {(char *)"vDir", __pyx_getprop_9WaveTools_11RandomWaves_vDir, __pyx_setprop_9WaveTools_11RandomWaves_vDir, (char *)0, 0},
  {(char *)"kDir", __pyx_getprop_9WaveTools_11RandomWaves_kDir, __pyx_setprop_9WaveTools_11RandomWaves_kDir, (char *)0, 0},
  {(char *)"ai", __pyx_getprop_9WaveTools_11RandomWaves_ai, __pyx_setprop_9WaveTools_11RandomWaves_ai, (char *)0, 0},
  {(char *)"phi", __pyx_getprop_9WaveTools_11RandomWaves_phi, __pyx_setprop_9WaveTools_11RandomWaves_phi, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9WaveTools_RandomWaves = {
  PyVarObject_HEAD_INIT(0, 0)
  "WaveTools.RandomWaves", /*tp_name*/
  sizeof(struct __pyx_obj_9WaveTools_RandomWaves), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9WaveTools_RandomWaves, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n    This class is used for generating plane random waves using linear reconstruction of components from a\n    wave spectrum\n\n    Parameters\n    ----------\n    Tp : float\n            Peak wave period            \n    Hs : float\n             Significant wave height            \n    mwl : float\n             Still water level            \n    depth : float\n             Water depth            \n    waveDir : numpy.ndarray\n             Wave direction vector            \n    g : Numpy array\n             Gravitational acceleration vector            \n    N : int\n             Number of frequency components\n    bandFactor : float\n             Spectral band factor. fmax = bandFactor/Tp, fmin = 1/(bandFactor*Tp)           \n    spectName : string\n             Name of spectral distribution\n    spectral_params : dict\n             Dictionary of arguments specific to the spectral distribution\n            Example for JONSWAP = {\"gamma\": 3.3, \"TMA\":True,\"depth\": depth}\n            TMA=True activates the TMA modification, which in turn needs the depth as a parameter            \n    phi : numpy.ndarray\n             Component phases (if set to None, phases are picked at random)            \n    fast : bool\n             Switch for optimised functions            \n    ", /*tp_doc*/
  __pyx_tp_traverse_9WaveTools_RandomWaves, /*tp_traverse*/
  __pyx_tp_clear_9WaveTools_RandomWaves, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9WaveTools_RandomWaves, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_9WaveTools_RandomWaves, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9WaveTools_RandomWaves, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_9WaveTools_MultiSpectraRandomWaves __pyx_vtable_9WaveTools_MultiSpectraRandomWaves;

static PyObject *__pyx_tp_new_9WaveTools_MultiSpectraRandomWaves(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9WaveTools_MultiSpectraRandomWaves *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9WaveTools_MultiSpectraRandomWaves *)o);
  p->__pyx_vtab = __pyx_vtabptr_9WaveTools_MultiSpectraRandomWaves;
  p->g = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->vDir = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->waveDir = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->omegaM = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->phiM = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->kiM = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->kDirM = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->tanhFM = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->aiM = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_9WaveTools_23MultiSpectraRandomWaves_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_9WaveTools_MultiSpectraRandomWaves(PyObject *o) {
  struct __pyx_obj_9WaveTools_MultiSpectraRandomWaves *p = (struct __pyx_obj_9WaveTools_MultiSpectraRandomWaves *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->g);
  Py_CLEAR(p->vDir);
  Py_CLEAR(p->waveDir);
  Py_CLEAR(p->omegaM);
  Py_CLEAR(p->phiM);
  Py_CLEAR(p->kiM);
  Py_CLEAR(p->kDirM);
  Py_CLEAR(p->tanhFM);
  Py_CLEAR(p->aiM);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_9WaveTools_MultiSpectraRandomWaves(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9WaveTools_MultiSpectraRandomWaves *p = (struct __pyx_obj_9WaveTools_MultiSpectraRandomWaves *)o;
  if (p->g) {
    e = (*v)(((PyObject*)p->g), a); if (e) return e;
  }
  if (p->vDir) {
    e = (*v)(((PyObject*)p->vDir), a); if (e) return e;
  }
  if (p->waveDir) {
    e = (*v)(((PyObject*)p->waveDir), a); if (e) return e;
  }
  if (p->omegaM) {
    e = (*v)(((PyObject*)p->omegaM), a); if (e) return e;
  }
  if (p->phiM) {
    e = (*v)(((PyObject*)p->phiM), a); if (e) return e;
  }
  if (p->kiM) {
    e = (*v)(((PyObject*)p->kiM), a); if (e) return e;
  }
  if (p->kDirM) {
    e = (*v)(((PyObject*)p->kDirM), a); if (e) return e;
  }
  if (p->tanhFM) {
    e = (*v)(((PyObject*)p->tanhFM), a); if (e) return e;
  }
  if (p->aiM) {
    e = (*v)(((PyObject*)p->aiM), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9WaveTools_MultiSpectraRandomWaves(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9WaveTools_MultiSpectraRandomWaves *p = (struct __pyx_obj_9WaveTools_MultiSpectraRandomWaves *)o;
  tmp = ((PyObject*)p->g);
  p->g = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->vDir);
  p->vDir = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->waveDir);
  p->waveDir = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->omegaM);
  p->omegaM = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->phiM);
  p->phiM = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->kiM);
  p->kiM = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->kDirM);
  p->kDirM = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->tanhFM);
  p->tanhFM = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->aiM);
  p->aiM = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_9WaveTools_23MultiSpectraRandomWaves_mwl(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9WaveTools_23MultiSpectraRandomWaves_3mwl_1__get__(o);
}

static int __pyx_setprop_9WaveTools_23MultiSpectraRandomWaves_mwl(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9WaveTools_23MultiSpectraRandomWaves_3mwl_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_9WaveTools_23MultiSpectraRandomWaves_depth(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9WaveTools_23MultiSpectraRandomWaves_5depth_1__get__(o);
}

static int __pyx_setprop_9WaveTools_23MultiSpectraRandomWaves_depth(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9WaveTools_23MultiSpectraRandomWaves_5depth_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_9WaveTools_MultiSpectraRandomWaves[] = {
  {"eta", (PyCFunction)__pyx_pw_9WaveTools_23MultiSpectraRandomWaves_3eta, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_23MultiSpectraRandomWaves_2eta},
  {"u", (PyCFunction)__pyx_pw_9WaveTools_23MultiSpectraRandomWaves_5u, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_23MultiSpectraRandomWaves_4u},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_9WaveTools_MultiSpectraRandomWaves[] = {
  {(char *)"mwl", __pyx_getprop_9WaveTools_23MultiSpectraRandomWaves_mwl, __pyx_setprop_9WaveTools_23MultiSpectraRandomWaves_mwl, (char *)0, 0},
  {(char *)"depth", __pyx_getprop_9WaveTools_23MultiSpectraRandomWaves_depth, __pyx_setprop_9WaveTools_23MultiSpectraRandomWaves_depth, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9WaveTools_MultiSpectraRandomWaves = {
  PyVarObject_HEAD_INIT(0, 0)
  "WaveTools.MultiSpectraRandomWaves", /*tp_name*/
  sizeof(struct __pyx_obj_9WaveTools_MultiSpectraRandomWaves), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9WaveTools_MultiSpectraRandomWaves, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "This class is used for generating random waves by combining\n    multiple spectra with different distributions and directions\n\n    Parameters\n    ----------\n\n        Nspectra : int\n                 Total number of spectra\n        Tp : list\n                 List of peak wave periods\n        Hs : list\n                 List of significant wave heights\n        mwl : float\n                 Still water level\n                \n        depth : float\n                 Water depth\n                \n        waveDir : list\n                 List of wave direction vector\n                \n        g : Numpy array\n                 Gravitational acceleration vector\n        N : list\n                 List of numbers of frequency components\n        bandFactor : list\n                 List of spectral band factors\n        spectName : list\n                 List of names of spectral distribution\n        spectral_params : list\n                 List of names of spectral distribution (see RandomWaves class)\n        phi : list\n                 List of component phases\n        fast : bool\n                 Switch for optimised functions              \n    ", /*tp_doc*/
  __pyx_tp_traverse_9WaveTools_MultiSpectraRandomWaves, /*tp_traverse*/
  __pyx_tp_clear_9WaveTools_MultiSpectraRandomWaves, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9WaveTools_MultiSpectraRandomWaves, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_9WaveTools_MultiSpectraRandomWaves, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9WaveTools_MultiSpectraRandomWaves, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_9WaveTools_DirectionalWaves __pyx_vtable_9WaveTools_DirectionalWaves;

static PyObject *__pyx_tp_new_9WaveTools_DirectionalWaves(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9WaveTools_DirectionalWaves *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9WaveTools_DirectionalWaves *)o);
  p->__pyx_vtab = __pyx_vtabptr_9WaveTools_DirectionalWaves;
  p->vDir = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->omega = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->tanh = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->waveDir0 = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->waveDirs = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->phiDirs = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->aiDirs = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->ki = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->kDirs = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->tanhF = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_9WaveTools_16DirectionalWaves_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_9WaveTools_DirectionalWaves(PyObject *o) {
  struct __pyx_obj_9WaveTools_DirectionalWaves *p = (struct __pyx_obj_9WaveTools_DirectionalWaves *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->vDir);
  Py_CLEAR(p->omega);
  Py_CLEAR(p->tanh);
  Py_CLEAR(p->waveDir0);
  Py_CLEAR(p->waveDirs);
  Py_CLEAR(p->phiDirs);
  Py_CLEAR(p->aiDirs);
  Py_CLEAR(p->ki);
  Py_CLEAR(p->kDirs);
  Py_CLEAR(p->tanhF);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_9WaveTools_DirectionalWaves(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9WaveTools_DirectionalWaves *p = (struct __pyx_obj_9WaveTools_DirectionalWaves *)o;
  if (p->vDir) {
    e = (*v)(((PyObject*)p->vDir), a); if (e) return e;
  }
  if (p->omega) {
    e = (*v)(((PyObject*)p->omega), a); if (e) return e;
  }
  if (p->tanh) {
    e = (*v)(((PyObject*)p->tanh), a); if (e) return e;
  }
  if (p->waveDir0) {
    e = (*v)(((PyObject*)p->waveDir0), a); if (e) return e;
  }
  if (p->waveDirs) {
    e = (*v)(((PyObject*)p->waveDirs), a); if (e) return e;
  }
  if (p->phiDirs) {
    e = (*v)(((PyObject*)p->phiDirs), a); if (e) return e;
  }
  if (p->aiDirs) {
    e = (*v)(((PyObject*)p->aiDirs), a); if (e) return e;
  }
  if (p->ki) {
    e = (*v)(((PyObject*)p->ki), a); if (e) return e;
  }
  if (p->kDirs) {
    e = (*v)(((PyObject*)p->kDirs), a); if (e) return e;
  }
  if (p->tanhF) {
    e = (*v)(((PyObject*)p->tanhF), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9WaveTools_DirectionalWaves(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9WaveTools_DirectionalWaves *p = (struct __pyx_obj_9WaveTools_DirectionalWaves *)o;
  tmp = ((PyObject*)p->vDir);
  p->vDir = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->omega);
  p->omega = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->tanh);
  p->tanh = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->waveDir0);
  p->waveDir0 = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->waveDirs);
  p->waveDirs = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->phiDirs);
  p->phiDirs = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->aiDirs);
  p->aiDirs = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->ki);
  p->ki = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->kDirs);
  p->kDirs = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->tanhF);
  p->tanhF = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_9WaveTools_16DirectionalWaves_mwl(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9WaveTools_16DirectionalWaves_3mwl_1__get__(o);
}

static int __pyx_setprop_9WaveTools_16DirectionalWaves_mwl(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9WaveTools_16DirectionalWaves_3mwl_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_9WaveTools_16DirectionalWaves_depth(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9WaveTools_16DirectionalWaves_5depth_1__get__(o);
}

static int __pyx_setprop_9WaveTools_16DirectionalWaves_depth(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9WaveTools_16DirectionalWaves_5depth_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_9WaveTools_DirectionalWaves[] = {
  {"eta", (PyCFunction)__pyx_pw_9WaveTools_16DirectionalWaves_3eta, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_16DirectionalWaves_2eta},
  {"u", (PyCFunction)__pyx_pw_9WaveTools_16DirectionalWaves_5u, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_16DirectionalWaves_4u},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_9WaveTools_DirectionalWaves[] = {
  {(char *)"mwl", __pyx_getprop_9WaveTools_16DirectionalWaves_mwl, __pyx_setprop_9WaveTools_16DirectionalWaves_mwl, (char *)0, 0},
  {(char *)"depth", __pyx_getprop_9WaveTools_16DirectionalWaves_depth, __pyx_setprop_9WaveTools_16DirectionalWaves_depth, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9WaveTools_DirectionalWaves = {
  PyVarObject_HEAD_INIT(0, 0)
  "WaveTools.DirectionalWaves", /*tp_name*/
  sizeof(struct __pyx_obj_9WaveTools_DirectionalWaves), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9WaveTools_DirectionalWaves, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n    This class is used for generating directional random waves using linear reconstruction of components from a\n    wave spectrum\n\n    Parameters\n    ----------\n    M : int\n             Number of directional components\n    Tp : float\n             Peak wave period\n    Hs : float\n             Significant wave height\n    mwl : float\n             Still water level\n    depth : float\n             Water depth\n    waveDir0 : numpy.ndarray\n             Leading wave direction vector\n    g : Numpy array\n             Gravitational acceleration vector\n    N : int\n             Number of frequency components\n    bandFactor : float\n             Spectral band factor. fmax = bandFactor/Tp, fmin = 1/(bandFactor*Tp)           \n    spectName : string\n             Name of spectral distribution\n    spreadName : string\n             Name of spreading distribution\n    spectral_params : dict\n             Dictionary of arguments specific to the spectral distribution (see RandomWaves class)            \n    spread_params : dict\n             Dictionary of arguments specific to the spreading distribution\n            Example for Cos-2s = {\"s\": 10}\n            Example for Mitsuyashu-type = {\"fp\": 1/Tp, \"smax\":10}\n            \n    phi : numpy.ndarray\n             Component phases (if set to None, phases are picked at random)\n            \n    phiSymm : bool\n             Switch for enabling a symmetric phase allocation across directional components\n    fast : bool\n             Switch for enabling optimised functions \n\n    ", /*tp_doc*/
  __pyx_tp_traverse_9WaveTools_DirectionalWaves, /*tp_traverse*/
  __pyx_tp_clear_9WaveTools_DirectionalWaves, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9WaveTools_DirectionalWaves, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_9WaveTools_DirectionalWaves, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9WaveTools_DirectionalWaves, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_9WaveTools_TimeSeries __pyx_vtable_9WaveTools_TimeSeries;

static PyObject *__pyx_tp_new_9WaveTools_TimeSeries(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_9WaveTools_TimeSeries *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9WaveTools_TimeSeries *)o);
  p->__pyx_vtab = __pyx_vtabptr_9WaveTools_TimeSeries;
  p->g = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->waveDir = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->vDir = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->x0 = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->kDir = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->tanhF = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->time = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->etaS = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->ai = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->omega = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->phi = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->ki = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->windows_handover = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->windows_rec = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->decompose_window = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->eta = Py_None; Py_INCREF(Py_None);
  p->u = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_9WaveTools_TimeSeries(PyObject *o) {
  struct __pyx_obj_9WaveTools_TimeSeries *p = (struct __pyx_obj_9WaveTools_TimeSeries *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->g);
  Py_CLEAR(p->waveDir);
  Py_CLEAR(p->vDir);
  Py_CLEAR(p->x0);
  Py_CLEAR(p->kDir);
  Py_CLEAR(p->tanhF);
  Py_CLEAR(p->time);
  Py_CLEAR(p->etaS);
  Py_CLEAR(p->ai);
  Py_CLEAR(p->omega);
  Py_CLEAR(p->phi);
  Py_CLEAR(p->ki);
  Py_CLEAR(p->windows_handover);
  Py_CLEAR(p->windows_rec);
  Py_CLEAR(p->decompose_window);
  Py_CLEAR(p->eta);
  Py_CLEAR(p->u);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_9WaveTools_TimeSeries(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9WaveTools_TimeSeries *p = (struct __pyx_obj_9WaveTools_TimeSeries *)o;
  if (p->g) {
    e = (*v)(((PyObject*)p->g), a); if (e) return e;
  }
  if (p->waveDir) {
    e = (*v)(((PyObject*)p->waveDir), a); if (e) return e;
  }
  if (p->vDir) {
    e = (*v)(((PyObject*)p->vDir), a); if (e) return e;
  }
  if (p->x0) {
    e = (*v)(((PyObject*)p->x0), a); if (e) return e;
  }
  if (p->kDir) {
    e = (*v)(((PyObject*)p->kDir), a); if (e) return e;
  }
  if (p->tanhF) {
    e = (*v)(((PyObject*)p->tanhF), a); if (e) return e;
  }
  if (p->time) {
    e = (*v)(((PyObject*)p->time), a); if (e) return e;
  }
  if (p->etaS) {
    e = (*v)(((PyObject*)p->etaS), a); if (e) return e;
  }
  if (p->ai) {
    e = (*v)(((PyObject*)p->ai), a); if (e) return e;
  }
  if (p->omega) {
    e = (*v)(((PyObject*)p->omega), a); if (e) return e;
  }
  if (p->phi) {
    e = (*v)(((PyObject*)p->phi), a); if (e) return e;
  }
  if (p->ki) {
    e = (*v)(((PyObject*)p->ki), a); if (e) return e;
  }
  if (p->windows_handover) {
    e = (*v)(p->windows_handover, a); if (e) return e;
  }
  if (p->windows_rec) {
    e = (*v)(p->windows_rec, a); if (e) return e;
  }
  if (p->decompose_window) {
    e = (*v)(p->decompose_window, a); if (e) return e;
  }
  if (p->eta) {
    e = (*v)(p->eta, a); if (e) return e;
  }
  if (p->u) {
    e = (*v)(p->u, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9WaveTools_TimeSeries(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9WaveTools_TimeSeries *p = (struct __pyx_obj_9WaveTools_TimeSeries *)o;
  tmp = ((PyObject*)p->g);
  p->g = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->waveDir);
  p->waveDir = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->vDir);
  p->vDir = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->x0);
  p->x0 = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->kDir);
  p->kDir = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->tanhF);
  p->tanhF = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->time);
  p->time = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->etaS);
  p->etaS = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->ai);
  p->ai = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->omega);
  p->omega = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->phi);
  p->phi = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->ki);
  p->ki = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->windows_handover);
  p->windows_handover = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->windows_rec);
  p->windows_rec = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->decompose_window);
  p->decompose_window = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->eta);
  p->eta = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->u);
  p->u = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_9WaveTools_10TimeSeries_wavelength(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9WaveTools_10TimeSeries_10wavelength_1__get__(o);
}

static int __pyx_setprop_9WaveTools_10TimeSeries_wavelength(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9WaveTools_10TimeSeries_10wavelength_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_9WaveTools_10TimeSeries_mwl(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9WaveTools_10TimeSeries_3mwl_1__get__(o);
}

static int __pyx_setprop_9WaveTools_10TimeSeries_mwl(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9WaveTools_10TimeSeries_3mwl_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_9WaveTools_10TimeSeries_eta(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9WaveTools_10TimeSeries_3eta_1__get__(o);
}

static int __pyx_setprop_9WaveTools_10TimeSeries_eta(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9WaveTools_10TimeSeries_3eta_3__set__(o, v);
  }
  else {
    return __pyx_pw_9WaveTools_10TimeSeries_3eta_5__del__(o);
  }
}

static PyObject *__pyx_getprop_9WaveTools_10TimeSeries_u(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9WaveTools_10TimeSeries_1u_1__get__(o);
}

static int __pyx_setprop_9WaveTools_10TimeSeries_u(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9WaveTools_10TimeSeries_1u_3__set__(o, v);
  }
  else {
    return __pyx_pw_9WaveTools_10TimeSeries_1u_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_9WaveTools_TimeSeries[] = {
  {"windOut", (PyCFunction)__pyx_pw_9WaveTools_10TimeSeries_3windOut, METH_NOARGS, 0},
  {"etaDirect", (PyCFunction)__pyx_pw_9WaveTools_10TimeSeries_5etaDirect, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_10TimeSeries_4etaDirect},
  {"uDirect", (PyCFunction)__pyx_pw_9WaveTools_10TimeSeries_7uDirect, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_10TimeSeries_6uDirect},
  {"findWindow", (PyCFunction)__pyx_pw_9WaveTools_10TimeSeries_9findWindow, METH_O, __pyx_doc_9WaveTools_10TimeSeries_8findWindow},
  {"etaWindow", (PyCFunction)__pyx_pw_9WaveTools_10TimeSeries_11etaWindow, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_10TimeSeries_10etaWindow},
  {"uWindow", (PyCFunction)__pyx_pw_9WaveTools_10TimeSeries_13uWindow, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_10TimeSeries_12uWindow},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_9WaveTools_TimeSeries[] = {
  {(char *)"wavelength", __pyx_getprop_9WaveTools_10TimeSeries_wavelength, __pyx_setprop_9WaveTools_10TimeSeries_wavelength, (char *)0, 0},
  {(char *)"mwl", __pyx_getprop_9WaveTools_10TimeSeries_mwl, __pyx_setprop_9WaveTools_10TimeSeries_mwl, (char *)0, 0},
  {(char *)"eta", __pyx_getprop_9WaveTools_10TimeSeries_eta, __pyx_setprop_9WaveTools_10TimeSeries_eta, (char *)0, 0},
  {(char *)"u", __pyx_getprop_9WaveTools_10TimeSeries_u, __pyx_setprop_9WaveTools_10TimeSeries_u, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9WaveTools_TimeSeries = {
  PyVarObject_HEAD_INIT(0, 0)
  "WaveTools.TimeSeries", /*tp_name*/
  sizeof(struct __pyx_obj_9WaveTools_TimeSeries), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9WaveTools_TimeSeries, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "This class is used for generating waves from an arbirtrary free-surface elevation time series\n\n    Parameters\n    ----------\n    timeSeriesFile : string\n             Time series file name (csv or txt)\n    skiprows : int\n             Number of header rows in time series file            \n    timeSeriesPosition : numpy.ndarrat\n             Coordinates of the gauge / signal location            \n    depth : float\n             Water depth            \n    N : int\n             Number of frequency components\n    mwl : float\n             Still water level            \n    waveDir : numpy.ndarray\n             Leading wave direction vector            \n    g : Numpy array\n             Gravitational acceleration vector            \n    cutoffTotal : float\n             Cut off fraction, applied both at the leading and tailing parts of the series \n    rec_direct : bool\n             Switch for activating direct decomposition\n    window_params : dict\n             Dictionary of parameters for window method\n            e.g.  window_params = {\"Nwaves\":15, \"Tm\": Tp/1.1, \"Window\":\"costap\"} (minimum parameters required)\n            e.g.  window_params = {\"Nwaves\":15, \"Tm\": Tp/1.1, \"Window\":\"costap\", \"Overlap\":0.5, \"Cutoff\":0.2} (full range of parameters)\n            \n    arrayData : bool\n             Switch for passing the time series as an array (False by default)\n    seriesArray : numpy.ndarray\n             Free surface elevation time series given in an array format (None by default) \n    fast : bool\n             Switch for enabling optimised functions \n\n    ", /*tp_doc*/
  __pyx_tp_traverse_9WaveTools_TimeSeries, /*tp_traverse*/
  __pyx_tp_clear_9WaveTools_TimeSeries, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9WaveTools_TimeSeries, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_9WaveTools_TimeSeries, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_9WaveTools_10TimeSeries_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9WaveTools_TimeSeries, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_9WaveTools_RandomNLWaves __pyx_vtable_9WaveTools_RandomNLWaves;

static PyObject *__pyx_tp_new_9WaveTools_RandomNLWaves(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_9WaveTools_RandomNLWaves *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9WaveTools_RandomNLWaves *)o);
  p->__pyx_vtab = __pyx_vtabptr_9WaveTools_RandomNLWaves;
  p->omega = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->ki = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->kDir = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->phi = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->tanhKd = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->sinhKd = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->waveDir = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->ai = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->eta = Py_None; Py_INCREF(Py_None);
  p->u = Py_None; Py_INCREF(Py_None);
  p->eta_linear = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_9WaveTools_RandomNLWaves(PyObject *o) {
  struct __pyx_obj_9WaveTools_RandomNLWaves *p = (struct __pyx_obj_9WaveTools_RandomNLWaves *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->omega);
  Py_CLEAR(p->ki);
  Py_CLEAR(p->kDir);
  Py_CLEAR(p->phi);
  Py_CLEAR(p->tanhKd);
  Py_CLEAR(p->sinhKd);
  Py_CLEAR(p->waveDir);
  Py_CLEAR(p->ai);
  Py_CLEAR(p->eta);
  Py_CLEAR(p->u);
  Py_CLEAR(p->eta_linear);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_9WaveTools_RandomNLWaves(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9WaveTools_RandomNLWaves *p = (struct __pyx_obj_9WaveTools_RandomNLWaves *)o;
  if (p->omega) {
    e = (*v)(((PyObject*)p->omega), a); if (e) return e;
  }
  if (p->ki) {
    e = (*v)(((PyObject*)p->ki), a); if (e) return e;
  }
  if (p->kDir) {
    e = (*v)(((PyObject*)p->kDir), a); if (e) return e;
  }
  if (p->phi) {
    e = (*v)(((PyObject*)p->phi), a); if (e) return e;
  }
  if (p->tanhKd) {
    e = (*v)(((PyObject*)p->tanhKd), a); if (e) return e;
  }
  if (p->sinhKd) {
    e = (*v)(((PyObject*)p->sinhKd), a); if (e) return e;
  }
  if (p->waveDir) {
    e = (*v)(((PyObject*)p->waveDir), a); if (e) return e;
  }
  if (p->ai) {
    e = (*v)(((PyObject*)p->ai), a); if (e) return e;
  }
  if (p->eta) {
    e = (*v)(p->eta, a); if (e) return e;
  }
  if (p->u) {
    e = (*v)(p->u, a); if (e) return e;
  }
  if (p->eta_linear) {
    e = (*v)(p->eta_linear, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9WaveTools_RandomNLWaves(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9WaveTools_RandomNLWaves *p = (struct __pyx_obj_9WaveTools_RandomNLWaves *)o;
  tmp = ((PyObject*)p->omega);
  p->omega = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->ki);
  p->ki = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->kDir);
  p->kDir = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->phi);
  p->phi = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->tanhKd);
  p->tanhKd = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->sinhKd);
  p->sinhKd = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->waveDir);
  p->waveDir = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->ai);
  p->ai = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->eta);
  p->eta = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->u);
  p->u = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->eta_linear);
  p->eta_linear = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_9WaveTools_13RandomNLWaves_eta(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9WaveTools_13RandomNLWaves_3eta_1__get__(o);
}

static int __pyx_setprop_9WaveTools_13RandomNLWaves_eta(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9WaveTools_13RandomNLWaves_3eta_3__set__(o, v);
  }
  else {
    return __pyx_pw_9WaveTools_13RandomNLWaves_3eta_5__del__(o);
  }
}

static PyObject *__pyx_getprop_9WaveTools_13RandomNLWaves_u(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9WaveTools_13RandomNLWaves_1u_1__get__(o);
}

static int __pyx_setprop_9WaveTools_13RandomNLWaves_u(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9WaveTools_13RandomNLWaves_1u_3__set__(o, v);
  }
  else {
    return __pyx_pw_9WaveTools_13RandomNLWaves_1u_5__del__(o);
  }
}

static PyObject *__pyx_getprop_9WaveTools_13RandomNLWaves_eta_linear(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9WaveTools_13RandomNLWaves_10eta_linear_1__get__(o);
}

static int __pyx_setprop_9WaveTools_13RandomNLWaves_eta_linear(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9WaveTools_13RandomNLWaves_10eta_linear_3__set__(o, v);
  }
  else {
    return __pyx_pw_9WaveTools_13RandomNLWaves_10eta_linear_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_9WaveTools_RandomNLWaves[] = {
  {"eta_2ndOrder", (PyCFunction)__pyx_pw_9WaveTools_13RandomNLWaves_3eta_2ndOrder, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_13RandomNLWaves_2eta_2ndOrder},
  {"eta_short", (PyCFunction)__pyx_pw_9WaveTools_13RandomNLWaves_5eta_short, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_13RandomNLWaves_4eta_short},
  {"eta_long", (PyCFunction)__pyx_pw_9WaveTools_13RandomNLWaves_7eta_long, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_13RandomNLWaves_6eta_long},
  {"eta_setUp", (PyCFunction)__pyx_pw_9WaveTools_13RandomNLWaves_9eta_setUp, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_13RandomNLWaves_8eta_setUp},
  {"eta_overall", (PyCFunction)__pyx_pw_9WaveTools_13RandomNLWaves_11eta_overall, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_13RandomNLWaves_10eta_overall},
  {"writeEtaSeries", (PyCFunction)__pyx_pw_9WaveTools_13RandomNLWaves_13writeEtaSeries, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_13RandomNLWaves_12writeEtaSeries},
  {"wtError", (PyCFunction)__pyx_pw_9WaveTools_13RandomNLWaves_15wtError, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9WaveTools_13RandomNLWaves_14wtError},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_9WaveTools_RandomNLWaves[] = {
  {(char *)"eta", __pyx_getprop_9WaveTools_13RandomNLWaves_eta, __pyx_setprop_9WaveTools_13RandomNLWaves_eta, (char *)0, 0},
  {(char *)"u", __pyx_getprop_9WaveTools_13RandomNLWaves_u, __pyx_setprop_9WaveTools_13RandomNLWaves_u, (char *)0, 0},
  {(char *)"eta_linear", __pyx_getprop_9WaveTools_13RandomNLWaves_eta_linear, __pyx_setprop_9WaveTools_13RandomNLWaves_eta_linear, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9WaveTools_RandomNLWaves = {
  PyVarObject_HEAD_INIT(0, 0)
  "WaveTools.RandomNLWaves", /*tp_name*/
  sizeof(struct __pyx_obj_9WaveTools_RandomNLWaves), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9WaveTools_RandomNLWaves, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n    This class is contains functions for calculating random waves with 2nd order corrections\n\n    Parameters\n    ----------\n    Tstart : float\n             Start time\n    Tend : float\n             End time\n    Tp : float\n             Peak wave period\n    Hs : float\n             Significant wave height\n    mwl : float\n             Still water level\n    depth : float\n             Water depth\n    waveDir : numpy.ndarray\n             Wave direction vector\n    g : Numpy array\n             Gravitational acceleration vector\n    N : int\n             Number of frequency components\n    bandFactor : float\n             Spectral band factor. fmax = bandFactor/Tp, fmin = 1/(bandFactor*Tp)\n    spectName : string\n             Name of spectral distribution\n    spectral_params : dict\n             Dictionary of arguments specific to the spectral distribution\n            Example for JONSWAP = {\"gamma\": 3.3, \"TMA\":True,\"depth\": depth}\n            TMA=True activates the TMA modification, which in turn needs the depth as a parameter            \n    phi : numpy.ndarray\n             Component phases (if set to None, phases are picked at random)            \n    fast : bool\n           Switch for enabling optimised functions             \n    ", /*tp_doc*/
  __pyx_tp_traverse_9WaveTools_RandomNLWaves, /*tp_traverse*/
  __pyx_tp_clear_9WaveTools_RandomNLWaves, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9WaveTools_RandomNLWaves, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_9WaveTools_RandomNLWaves, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_9WaveTools_13RandomNLWaves_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9WaveTools_RandomNLWaves, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "WaveTools",
    __pyx_k_Tools_for_working_with_water_wav, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_Bcoeff, __pyx_k_Bcoeff, sizeof(__pyx_k_Bcoeff), 0, 0, 1, 1},
  {&__pyx_n_s_Cutoff, __pyx_k_Cutoff, sizeof(__pyx_k_Cutoff), 0, 0, 1, 1},
  {&__pyx_kp_s_Cutoff_2, __pyx_k_Cutoff_2, sizeof(__pyx_k_Cutoff_2), 0, 0, 1, 0},
  {&__pyx_kp_s_Direct_reconstruction, __pyx_k_Direct_reconstruction, sizeof(__pyx_k_Direct_reconstruction), 0, 0, 1, 0},
  {&__pyx_n_s_DirectionalWaves, __pyx_k_DirectionalWaves, sizeof(__pyx_k_DirectionalWaves), 0, 0, 1, 1},
  {&__pyx_n_s_DirectionalWaves_eta, __pyx_k_DirectionalWaves_eta, sizeof(__pyx_k_DirectionalWaves_eta), 0, 0, 1, 1},
  {&__pyx_n_s_DirectionalWaves_u, __pyx_k_DirectionalWaves_u, sizeof(__pyx_k_DirectionalWaves_u), 0, 0, 1, 1},
  {&__pyx_kp_s_ERROR_WaveTools_py_Dictionary_ke, __pyx_k_ERROR_WaveTools_py_Dictionary_ke, sizeof(__pyx_k_ERROR_WaveTools_py_Dictionary_ke), 0, 0, 1, 0},
  {&__pyx_kp_s_ERROR_WaveTools_py_Dictionary_ke_2, __pyx_k_ERROR_WaveTools_py_Dictionary_ke_2, sizeof(__pyx_k_ERROR_WaveTools_py_Dictionary_ke_2), 0, 0, 1, 0},
  {&__pyx_kp_s_ERROR_WaveTools_py_Dictionary_ke_3, __pyx_k_ERROR_WaveTools_py_Dictionary_ke_3, sizeof(__pyx_k_ERROR_WaveTools_py_Dictionary_ke_3), 0, 0, 1, 0},
  {&__pyx_kp_s_ERROR_WaveTools_py_Found_large_e, __pyx_k_ERROR_WaveTools_py_Found_large_e, sizeof(__pyx_k_ERROR_WaveTools_py_Found_large_e), 0, 0, 1, 0},
  {&__pyx_kp_s_ERROR_WaveTools_py_Found_not_con, __pyx_k_ERROR_WaveTools_py_Found_not_con, sizeof(__pyx_k_ERROR_WaveTools_py_Found_not_con), 0, 0, 1, 0},
  {&__pyx_kp_s_ERROR_WaveTools_py_Found_too_few, __pyx_k_ERROR_WaveTools_py_Found_too_few, sizeof(__pyx_k_ERROR_WaveTools_py_Found_too_few), 0, 0, 1, 0},
  {&__pyx_kp_s_ERROR_WaveTools_py_Reconstructio, __pyx_k_ERROR_WaveTools_py_Reconstructio, sizeof(__pyx_k_ERROR_WaveTools_py_Reconstructio), 0, 0, 1, 0},
  {&__pyx_kp_s_ERROR_WaveTools_py_Relaxation_zo, __pyx_k_ERROR_WaveTools_py_Relaxation_zo, sizeof(__pyx_k_ERROR_WaveTools_py_Relaxation_zo), 0, 0, 1, 0},
  {&__pyx_kp_s_ERROR_WaveTools_py_Set_parameter, __pyx_k_ERROR_WaveTools_py_Set_parameter, sizeof(__pyx_k_ERROR_WaveTools_py_Set_parameter), 0, 0, 1, 0},
  {&__pyx_kp_s_ERROR_Wavetools_py_Additional_sp, __pyx_k_ERROR_Wavetools_py_Additional_sp, sizeof(__pyx_k_ERROR_Wavetools_py_Additional_sp), 0, 0, 1, 0},
  {&__pyx_kp_s_ERROR_Wavetools_py_Additional_sp_2, __pyx_k_ERROR_Wavetools_py_Additional_sp_2, sizeof(__pyx_k_ERROR_Wavetools_py_Additional_sp_2), 0, 0, 1, 0},
  {&__pyx_kp_s_ERROR_Wavetools_py_File_s_must_b, __pyx_k_ERROR_Wavetools_py_File_s_must_b, sizeof(__pyx_k_ERROR_Wavetools_py_File_s_must_b), 0, 0, 1, 0},
  {&__pyx_kp_s_ERROR_Wavetools_py_Location_vect, __pyx_k_ERROR_Wavetools_py_Location_vect, sizeof(__pyx_k_ERROR_Wavetools_py_Location_vect), 0, 0, 1, 0},
  {&__pyx_kp_s_ERROR_Wavetools_py_Location_vect_2, __pyx_k_ERROR_Wavetools_py_Location_vect_2, sizeof(__pyx_k_ERROR_Wavetools_py_Location_vect_2), 0, 0, 1, 0},
  {&__pyx_kp_s_ERROR_Wavetools_py_Maximum_numbe, __pyx_k_ERROR_Wavetools_py_Maximum_numbe, sizeof(__pyx_k_ERROR_Wavetools_py_Maximum_numbe), 0, 0, 1, 0},
  {&__pyx_kp_s_ERROR_Wavetools_py_Maximum_numbe_2, __pyx_k_ERROR_Wavetools_py_Maximum_numbe_2, sizeof(__pyx_k_ERROR_Wavetools_py_Maximum_numbe_2), 0, 0, 1, 0},
  {&__pyx_kp_s_ERROR_Wavetools_py_Maximum_numbe_3, __pyx_k_ERROR_Wavetools_py_Maximum_numbe_3, sizeof(__pyx_k_ERROR_Wavetools_py_Maximum_numbe_3), 0, 0, 1, 0},
  {&__pyx_kp_s_ERROR_Wavetools_py_Parameters_pa, __pyx_k_ERROR_Wavetools_py_Parameters_pa, sizeof(__pyx_k_ERROR_Wavetools_py_Parameters_pa), 0, 0, 1, 0},
  {&__pyx_kp_s_ERROR_Wavetools_py_Phase_array_m, __pyx_k_ERROR_Wavetools_py_Phase_array_m, sizeof(__pyx_k_ERROR_Wavetools_py_Phase_array_m), 0, 0, 1, 0},
  {&__pyx_kp_s_ERROR_Wavetools_py_Timeseries_fi, __pyx_k_ERROR_Wavetools_py_Timeseries_fi, sizeof(__pyx_k_ERROR_Wavetools_py_Timeseries_fi), 0, 0, 1, 0},
  {&__pyx_kp_s_ERROR_Wavetools_py_Wavelenght_is, __pyx_k_ERROR_Wavetools_py_Wavelenght_is, sizeof(__pyx_k_ERROR_Wavetools_py_Wavelenght_is), 0, 0, 1, 0},
  {&__pyx_kp_s_ERROR_Wavetools_py_Window_handov, __pyx_k_ERROR_Wavetools_py_Window_handov, sizeof(__pyx_k_ERROR_Wavetools_py_Window_handov), 0, 0, 1, 0},
  {&__pyx_kp_s_ERROR_Wavetools_py_Wrong_functio, __pyx_k_ERROR_Wavetools_py_Wrong_functio, sizeof(__pyx_k_ERROR_Wavetools_py_Wrong_functio), 0, 0, 1, 0},
  {&__pyx_kp_s_ERROR_Wavetools_py_Ycoeff_and_Bc, __pyx_k_ERROR_Wavetools_py_Ycoeff_and_Bc, sizeof(__pyx_k_ERROR_Wavetools_py_Ycoeff_and_Bc), 0, 0, 1, 0},
  {&__pyx_kp_s_ERROR_Wavetools_py_You_are_not_r, __pyx_k_ERROR_Wavetools_py_You_are_not_r, sizeof(__pyx_k_ERROR_Wavetools_py_You_are_not_r), 0, 0, 1, 0},
  {&__pyx_kp_s_ERROR_Wavetools_py_eta_and_u_fun, __pyx_k_ERROR_Wavetools_py_eta_and_u_fun, sizeof(__pyx_k_ERROR_Wavetools_py_eta_and_u_fun), 0, 0, 1, 0},
  {&__pyx_kp_s_ERROR_Wavetools_py_meanVelocity, __pyx_k_ERROR_Wavetools_py_meanVelocity, sizeof(__pyx_k_ERROR_Wavetools_py_meanVelocity), 0, 0, 1, 0},
  {&__pyx_kp_s_ERROR_Wavetools_py_phi_argument, __pyx_k_ERROR_Wavetools_py_phi_argument, sizeof(__pyx_k_ERROR_Wavetools_py_phi_argument), 0, 0, 1, 0},
  {&__pyx_kp_s_ERROR_Wavetools_py_phi_in_Direct, __pyx_k_ERROR_Wavetools_py_phi_in_Direct, sizeof(__pyx_k_ERROR_Wavetools_py_phi_in_Direct), 0, 0, 1, 0},
  {&__pyx_kp_s_ERROR_Wavetools_pyx_Argument_mod, __pyx_k_ERROR_Wavetools_pyx_Argument_mod, sizeof(__pyx_k_ERROR_Wavetools_pyx_Argument_mod), 0, 0, 1, 0},
  {&__pyx_kp_s_End_time, __pyx_k_End_time, sizeof(__pyx_k_End_time), 0, 0, 1, 0},
  {&__pyx_kp_s_Er1, __pyx_k_Er1, sizeof(__pyx_k_Er1), 0, 0, 1, 0},
  {&__pyx_n_s_Etaoverall, __pyx_k_Etaoverall, sizeof(__pyx_k_Etaoverall), 0, 0, 1, 1},
  {&__pyx_n_s_EtasetUp, __pyx_k_EtasetUp, sizeof(__pyx_k_EtasetUp), 0, 0, 1, 1},
  {&__pyx_n_s_Fenton, __pyx_k_Fenton, sizeof(__pyx_k_Fenton), 0, 0, 1, 1},
  {&__pyx_kp_u_Format_string_allocated_too_shor, __pyx_k_Format_string_allocated_too_shor, sizeof(__pyx_k_Format_string_allocated_too_shor), 0, 1, 0, 0},
  {&__pyx_kp_u_Format_string_allocated_too_shor_2, __pyx_k_Format_string_allocated_too_shor_2, sizeof(__pyx_k_Format_string_allocated_too_shor_2), 0, 1, 0, 0},
  {&__pyx_n_s_G0, __pyx_k_G0, sizeof(__pyx_k_G0), 0, 0, 1, 1},
  {&__pyx_n_s_Hs, __pyx_k_Hs, sizeof(__pyx_k_Hs), 0, 0, 1, 1},
  {&__pyx_n_s_Hs_2, __pyx_k_Hs_2, sizeof(__pyx_k_Hs_2), 0, 0, 1, 1},
  {&__pyx_kp_s_INFO_Calculating_nonlinear_corre, __pyx_k_INFO_Calculating_nonlinear_corre, sizeof(__pyx_k_INFO_Calculating_nonlinear_corre), 0, 0, 1, 0},
  {&__pyx_kp_s_INFO_WaveTools_py_Cutoff_entry_i, __pyx_k_INFO_WaveTools_py_Cutoff_entry_i, sizeof(__pyx_k_INFO_WaveTools_py_Cutoff_entry_i), 0, 0, 1, 0},
  {&__pyx_kp_s_INFO_WaveTools_py_Not_constant_s, __pyx_k_INFO_WaveTools_py_Not_constant_s, sizeof(__pyx_k_INFO_WaveTools_py_Not_constant_s), 0, 0, 1, 0},
  {&__pyx_kp_s_INFO_WaveTools_py_Overlap_entry, __pyx_k_INFO_WaveTools_py_Overlap_entry, sizeof(__pyx_k_INFO_WaveTools_py_Overlap_entry), 0, 0, 1, 0},
  {&__pyx_kp_s_INFO_WaveTools_py_performing_a_d, __pyx_k_INFO_WaveTools_py_performing_a_d, sizeof(__pyx_k_INFO_WaveTools_py_performing_a_d), 0, 0, 1, 0},
  {&__pyx_kp_s_INFO_WaveTools_py_performing_ser, __pyx_k_INFO_WaveTools_py_performing_ser, sizeof(__pyx_k_INFO_WaveTools_py_performing_ser), 0, 0, 1, 0},
  {&__pyx_kp_s_INFO_Wavetools_py_Checking_durat, __pyx_k_INFO_Wavetools_py_Checking_durat, sizeof(__pyx_k_INFO_Wavetools_py_Checking_durat), 0, 0, 1, 0},
  {&__pyx_kp_s_INFO_Wavetools_py_Correcting_win, __pyx_k_INFO_Wavetools_py_Correcting_win, sizeof(__pyx_k_INFO_Wavetools_py_Correcting_win), 0, 0, 1, 0},
  {&__pyx_kp_s_INFO_Wavetools_py_No_phase_array, __pyx_k_INFO_Wavetools_py_No_phase_array, sizeof(__pyx_k_INFO_Wavetools_py_No_phase_array), 0, 0, 1, 0},
  {&__pyx_kp_s_INFO_Wavetools_py_Reading_spectr, __pyx_k_INFO_Wavetools_py_Reading_spectr, sizeof(__pyx_k_INFO_Wavetools_py_Reading_spectr), 0, 0, 1, 0},
  {&__pyx_kp_s_INFO_Wavetools_py_Using_s_window, __pyx_k_INFO_Wavetools_py_Using_s_window, sizeof(__pyx_k_INFO_Wavetools_py_Using_s_window), 0, 0, 1, 0},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_n_s_JONSWAP, __pyx_k_JONSWAP, sizeof(__pyx_k_JONSWAP), 0, 0, 1, 1},
  {&__pyx_n_s_K, __pyx_k_K, sizeof(__pyx_k_K), 0, 0, 1, 1},
  {&__pyx_n_s_Lgen, __pyx_k_Lgen, sizeof(__pyx_k_Lgen), 0, 0, 1, 1},
  {&__pyx_n_s_Linear, __pyx_k_Linear, sizeof(__pyx_k_Linear), 0, 0, 1, 1},
  {&__pyx_n_s_M, __pyx_k_M, sizeof(__pyx_k_M), 0, 0, 1, 1},
  {&__pyx_n_s_MonochromaticWaves, __pyx_k_MonochromaticWaves, sizeof(__pyx_k_MonochromaticWaves), 0, 0, 1, 1},
  {&__pyx_n_s_MonochromaticWaves_eta, __pyx_k_MonochromaticWaves_eta, sizeof(__pyx_k_MonochromaticWaves_eta), 0, 0, 1, 1},
  {&__pyx_n_s_MonochromaticWaves_u, __pyx_k_MonochromaticWaves_u, sizeof(__pyx_k_MonochromaticWaves_u), 0, 0, 1, 1},
  {&__pyx_n_s_MultiSpectraRandomWaves, __pyx_k_MultiSpectraRandomWaves, sizeof(__pyx_k_MultiSpectraRandomWaves), 0, 0, 1, 1},
  {&__pyx_n_s_MultiSpectraRandomWaves_eta, __pyx_k_MultiSpectraRandomWaves_eta, sizeof(__pyx_k_MultiSpectraRandomWaves_eta), 0, 0, 1, 1},
  {&__pyx_n_s_MultiSpectraRandomWaves_u, __pyx_k_MultiSpectraRandomWaves_u, sizeof(__pyx_k_MultiSpectraRandomWaves_u), 0, 0, 1, 1},
  {&__pyx_n_s_N, __pyx_k_N, sizeof(__pyx_k_N), 0, 0, 1, 1},
  {&__pyx_n_s_NLongW, __pyx_k_NLongW, sizeof(__pyx_k_NLongW), 0, 0, 1, 1},
  {&__pyx_n_s_Nf, __pyx_k_Nf, sizeof(__pyx_k_Nf), 0, 0, 1, 1},
  {&__pyx_n_s_Nfreq, __pyx_k_Nfreq, sizeof(__pyx_k_Nfreq), 0, 0, 1, 1},
  {&__pyx_kp_u_Non_native_byte_order_not_suppor, __pyx_k_Non_native_byte_order_not_suppor, sizeof(__pyx_k_Non_native_byte_order_not_suppor), 0, 1, 0, 0},
  {&__pyx_n_s_Np, __pyx_k_Np, sizeof(__pyx_k_Np), 0, 0, 1, 1},
  {&__pyx_n_s_Nseries, __pyx_k_Nseries, sizeof(__pyx_k_Nseries), 0, 0, 1, 1},
  {&__pyx_n_s_Nspectra, __pyx_k_Nspectra, sizeof(__pyx_k_Nspectra), 0, 0, 1, 1},
  {&__pyx_kp_s_Number_of_windows, __pyx_k_Number_of_windows, sizeof(__pyx_k_Number_of_windows), 0, 0, 1, 0},
  {&__pyx_n_s_Nwaves, __pyx_k_Nwaves, sizeof(__pyx_k_Nwaves), 0, 0, 1, 1},
  {&__pyx_n_s_Nwaves_tot, __pyx_k_Nwaves_tot, sizeof(__pyx_k_Nwaves_tot), 0, 0, 1, 1},
  {&__pyx_n_s_Nwind, __pyx_k_Nwind, sizeof(__pyx_k_Nwind), 0, 0, 1, 1},
  {&__pyx_n_s_Overlap, __pyx_k_Overlap, sizeof(__pyx_k_Overlap), 0, 0, 1, 1},
  {&__pyx_n_s_PM_mod, __pyx_k_PM_mod, sizeof(__pyx_k_PM_mod), 0, 0, 1, 1},
  {&__pyx_n_s_Profiling, __pyx_k_Profiling, sizeof(__pyx_k_Profiling), 0, 0, 1, 1},
  {&__pyx_n_s_RW, __pyx_k_RW, sizeof(__pyx_k_RW), 0, 0, 1, 1},
  {&__pyx_n_s_RandomNLWaves, __pyx_k_RandomNLWaves, sizeof(__pyx_k_RandomNLWaves), 0, 0, 1, 1},
  {&__pyx_n_s_RandomNLWavesFast, __pyx_k_RandomNLWavesFast, sizeof(__pyx_k_RandomNLWavesFast), 0, 0, 1, 1},
  {&__pyx_n_s_RandomNLWavesFast___init, __pyx_k_RandomNLWavesFast___init, sizeof(__pyx_k_RandomNLWavesFast___init), 0, 0, 1, 1},
  {&__pyx_n_s_RandomNLWavesFast_eta, __pyx_k_RandomNLWavesFast_eta, sizeof(__pyx_k_RandomNLWavesFast_eta), 0, 0, 1, 1},
  {&__pyx_n_s_RandomNLWavesFast_u, __pyx_k_RandomNLWavesFast_u, sizeof(__pyx_k_RandomNLWavesFast_u), 0, 0, 1, 1},
  {&__pyx_n_s_RandomNLWaves_eta_2ndOrder, __pyx_k_RandomNLWaves_eta_2ndOrder, sizeof(__pyx_k_RandomNLWaves_eta_2ndOrder), 0, 0, 1, 1},
  {&__pyx_n_s_RandomNLWaves_eta_long, __pyx_k_RandomNLWaves_eta_long, sizeof(__pyx_k_RandomNLWaves_eta_long), 0, 0, 1, 1},
  {&__pyx_n_s_RandomNLWaves_eta_overall, __pyx_k_RandomNLWaves_eta_overall, sizeof(__pyx_k_RandomNLWaves_eta_overall), 0, 0, 1, 1},
  {&__pyx_n_s_RandomNLWaves_eta_setUp, __pyx_k_RandomNLWaves_eta_setUp, sizeof(__pyx_k_RandomNLWaves_eta_setUp), 0, 0, 1, 1},
  {&__pyx_n_s_RandomNLWaves_eta_short, __pyx_k_RandomNLWaves_eta_short, sizeof(__pyx_k_RandomNLWaves_eta_short), 0, 0, 1, 1},
  {&__pyx_n_s_RandomNLWaves_writeEtaSeries, __pyx_k_RandomNLWaves_writeEtaSeries, sizeof(__pyx_k_RandomNLWaves_writeEtaSeries), 0, 0, 1, 1},
  {&__pyx_n_s_RandomNLWaves_wtError, __pyx_k_RandomNLWaves_wtError, sizeof(__pyx_k_RandomNLWaves_wtError), 0, 0, 1, 1},
  {&__pyx_n_s_RandomSeries, __pyx_k_RandomSeries, sizeof(__pyx_k_RandomSeries), 0, 0, 1, 1},
  {&__pyx_n_s_RandomWaves, __pyx_k_RandomWaves, sizeof(__pyx_k_RandomWaves), 0, 0, 1, 1},
  {&__pyx_n_s_RandomWavesFast, __pyx_k_RandomWavesFast, sizeof(__pyx_k_RandomWavesFast), 0, 0, 1, 1},
  {&__pyx_n_s_RandomWavesFast___init, __pyx_k_RandomWavesFast___init, sizeof(__pyx_k_RandomWavesFast___init), 0, 0, 1, 1},
  {&__pyx_n_s_RandomWavesFast_printOut, __pyx_k_RandomWavesFast_printOut, sizeof(__pyx_k_RandomWavesFast_printOut), 0, 0, 1, 1},
  {&__pyx_n_s_RandomWaves_eta, __pyx_k_RandomWaves_eta, sizeof(__pyx_k_RandomWaves_eta), 0, 0, 1, 1},
  {&__pyx_n_s_RandomWaves_u, __pyx_k_RandomWaves_u, sizeof(__pyx_k_RandomWaves_u), 0, 0, 1, 1},
  {&__pyx_n_s_RandomWaves_writeEtaSeries, __pyx_k_RandomWaves_writeEtaSeries, sizeof(__pyx_k_RandomWaves_writeEtaSeries), 0, 0, 1, 1},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s_SolitaryWave, __pyx_k_SolitaryWave, sizeof(__pyx_k_SolitaryWave), 0, 0, 1, 1},
  {&__pyx_n_s_SolitaryWave_eta, __pyx_k_SolitaryWave_eta, sizeof(__pyx_k_SolitaryWave_eta), 0, 0, 1, 1},
  {&__pyx_n_s_SolitaryWave_u, __pyx_k_SolitaryWave_u, sizeof(__pyx_k_SolitaryWave_u), 0, 0, 1, 1},
  {&__pyx_n_s_SpatialTools, __pyx_k_SpatialTools, sizeof(__pyx_k_SpatialTools), 0, 0, 1, 1},
  {&__pyx_kp_s_Start_Time, __pyx_k_Start_Time, sizeof(__pyx_k_Start_Time), 0, 0, 1, 0},
  {&__pyx_n_s_SteadyCurrent, __pyx_k_SteadyCurrent, sizeof(__pyx_k_SteadyCurrent), 0, 0, 1, 1},
  {&__pyx_n_s_SteadyCurrent___init, __pyx_k_SteadyCurrent___init, sizeof(__pyx_k_SteadyCurrent___init), 0, 0, 1, 1},
  {&__pyx_n_s_SteadyCurrent_eta, __pyx_k_SteadyCurrent_eta, sizeof(__pyx_k_SteadyCurrent_eta), 0, 0, 1, 1},
  {&__pyx_n_s_SteadyCurrent_u, __pyx_k_SteadyCurrent_u, sizeof(__pyx_k_SteadyCurrent_u), 0, 0, 1, 1},
  {&__pyx_n_s_TMA, __pyx_k_TMA, sizeof(__pyx_k_TMA), 0, 0, 1, 1},
  {&__pyx_n_s_TOverlap, __pyx_k_TOverlap, sizeof(__pyx_k_TOverlap), 0, 0, 1, 1},
  {&__pyx_n_s_TS, __pyx_k_TS, sizeof(__pyx_k_TS), 0, 0, 1, 1},
  {&__pyx_n_s_TWindow, __pyx_k_TWindow, sizeof(__pyx_k_TWindow), 0, 0, 1, 1},
  {&__pyx_n_s_Tend, __pyx_k_Tend, sizeof(__pyx_k_Tend), 0, 0, 1, 1},
  {&__pyx_kp_s_This_class_is_used_for_generati, __pyx_k_This_class_is_used_for_generati, sizeof(__pyx_k_This_class_is_used_for_generati), 0, 0, 1, 0},
  {&__pyx_kp_s_This_class_is_used_for_generati_2, __pyx_k_This_class_is_used_for_generati_2, sizeof(__pyx_k_This_class_is_used_for_generati_2), 0, 0, 1, 0},
  {&__pyx_kp_s_This_class_is_used_for_generati_3, __pyx_k_This_class_is_used_for_generati_3, sizeof(__pyx_k_This_class_is_used_for_generati_3), 0, 0, 1, 0},
  {&__pyx_n_s_TimeSeries, __pyx_k_TimeSeries, sizeof(__pyx_k_TimeSeries), 0, 0, 1, 1},
  {&__pyx_n_s_TimeSeries_etaDirect, __pyx_k_TimeSeries_etaDirect, sizeof(__pyx_k_TimeSeries_etaDirect), 0, 0, 1, 1},
  {&__pyx_n_s_TimeSeries_etaWindow, __pyx_k_TimeSeries_etaWindow, sizeof(__pyx_k_TimeSeries_etaWindow), 0, 0, 1, 1},
  {&__pyx_n_s_TimeSeries_findWindow, __pyx_k_TimeSeries_findWindow, sizeof(__pyx_k_TimeSeries_findWindow), 0, 0, 1, 1},
  {&__pyx_n_s_TimeSeries_uDirect, __pyx_k_TimeSeries_uDirect, sizeof(__pyx_k_TimeSeries_uDirect), 0, 0, 1, 1},
  {&__pyx_n_s_TimeSeries_uWindow, __pyx_k_TimeSeries_uWindow, sizeof(__pyx_k_TimeSeries_uWindow), 0, 0, 1, 1},
  {&__pyx_n_s_TimeSeries_windOut, __pyx_k_TimeSeries_windOut, sizeof(__pyx_k_TimeSeries_windOut), 0, 0, 1, 1},
  {&__pyx_n_s_Tlag, __pyx_k_Tlag, sizeof(__pyx_k_Tlag), 0, 0, 1, 1},
  {&__pyx_n_s_Tm, __pyx_k_Tm, sizeof(__pyx_k_Tm), 0, 0, 1, 1},
  {&__pyx_n_s_Tmax, __pyx_k_Tmax, sizeof(__pyx_k_Tmax), 0, 0, 1, 1},
  {&__pyx_n_s_Tp, __pyx_k_Tp, sizeof(__pyx_k_Tp), 0, 0, 1, 1},
  {&__pyx_n_s_Tp_2, __pyx_k_Tp_2, sizeof(__pyx_k_Tp_2), 0, 0, 1, 1},
  {&__pyx_n_s_Tstart, __pyx_k_Tstart, sizeof(__pyx_k_Tstart), 0, 0, 1, 1},
  {&__pyx_n_s_Tstart_temp, __pyx_k_Tstart_temp, sizeof(__pyx_k_Tstart_temp), 0, 0, 1, 1},
  {&__pyx_n_s_U, __pyx_k_U, sizeof(__pyx_k_U), 0, 0, 1, 1},
  {&__pyx_n_s_UH, __pyx_k_UH, sizeof(__pyx_k_UH), 0, 0, 1, 1},
  {&__pyx_n_s_UV, __pyx_k_UV, sizeof(__pyx_k_UV), 0, 0, 1, 1},
  {&__pyx_n_s_Udrift, __pyx_k_Udrift, sizeof(__pyx_k_Udrift), 0, 0, 1, 1},
  {&__pyx_n_s_Uhorz, __pyx_k_Uhorz, sizeof(__pyx_k_Uhorz), 0, 0, 1, 1},
  {&__pyx_kp_s_Users_tim_Programming_proteus_p, __pyx_k_Users_tim_Programming_proteus_p, sizeof(__pyx_k_Users_tim_Programming_proteus_p), 0, 0, 1, 0},
  {&__pyx_n_s_Uvert, __pyx_k_Uvert, sizeof(__pyx_k_Uvert), 0, 0, 1, 1},
  {&__pyx_n_s_V, __pyx_k_V, sizeof(__pyx_k_V), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_WaveTools, __pyx_k_WaveTools, sizeof(__pyx_k_WaveTools), 0, 0, 1, 1},
  {&__pyx_kp_s_Wave_direction_is_not_perpendicu, __pyx_k_Wave_direction_is_not_perpendicu, sizeof(__pyx_k_Wave_direction_is_not_perpendicu), 0, 0, 1, 0},
  {&__pyx_kp_s_Wavetools_py_Provide_valid_depth, __pyx_k_Wavetools_py_Provide_valid_depth, sizeof(__pyx_k_Wavetools_py_Provide_valid_depth), 0, 0, 1, 0},
  {&__pyx_kp_s_Wavetools_py_Stopping_simulation, __pyx_k_Wavetools_py_Stopping_simulation, sizeof(__pyx_k_Wavetools_py_Stopping_simulation), 0, 0, 1, 0},
  {&__pyx_n_s_Window, __pyx_k_Window, sizeof(__pyx_k_Window), 0, 0, 1, 1},
  {&__pyx_kp_s_Wrong_wavetype_given_Valid_wavet, __pyx_k_Wrong_wavetype_given_Valid_wavet, sizeof(__pyx_k_Wrong_wavetype_given_Valid_wavet), 0, 0, 1, 0},
  {&__pyx_n_s_Ycoeff, __pyx_k_Ycoeff, sizeof(__pyx_k_Ycoeff), 0, 0, 1, 1},
  {&__pyx_n_s_Z, __pyx_k_Z, sizeof(__pyx_k_Z), 0, 0, 1, 1},
  {&__pyx_kp_s__123, __pyx_k__123, sizeof(__pyx_k__123), 0, 0, 1, 0},
  {&__pyx_kp_s__204, __pyx_k__204, sizeof(__pyx_k__204), 0, 0, 1, 0},
  {&__pyx_n_s_a, __pyx_k_a, sizeof(__pyx_k_a), 0, 0, 1, 1},
  {&__pyx_n_s_a1, __pyx_k_a1, sizeof(__pyx_k_a1), 0, 0, 1, 1},
  {&__pyx_n_s_a2, __pyx_k_a2, sizeof(__pyx_k_a2), 0, 0, 1, 1},
  {&__pyx_n_s_aR, __pyx_k_aR, sizeof(__pyx_k_aR), 0, 0, 1, 1},
  {&__pyx_n_s_aRN, __pyx_k_aRN, sizeof(__pyx_k_aRN), 0, 0, 1, 1},
  {&__pyx_n_s_aa, __pyx_k_aa, sizeof(__pyx_k_aa), 0, 0, 1, 1},
  {&__pyx_n_s_ai, __pyx_k_ai, sizeof(__pyx_k_ai), 0, 0, 1, 1},
  {&__pyx_n_s_all, __pyx_k_all, sizeof(__pyx_k_all), 0, 0, 1, 1},
  {&__pyx_n_s_all_2, __pyx_k_all_2, sizeof(__pyx_k_all_2), 0, 0, 1, 1},
  {&__pyx_n_s_amp, __pyx_k_amp, sizeof(__pyx_k_amp), 0, 0, 1, 1},
  {&__pyx_n_s_amplitude, __pyx_k_amplitude, sizeof(__pyx_k_amplitude), 0, 0, 1, 1},
  {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {&__pyx_n_s_array, __pyx_k_array, sizeof(__pyx_k_array), 0, 0, 1, 1},
  {&__pyx_n_s_arrayData, __pyx_k_arrayData, sizeof(__pyx_k_arrayData), 0, 0, 1, 1},
  {&__pyx_n_s_bandFactor, __pyx_k_bandFactor, sizeof(__pyx_k_bandFactor), 0, 0, 1, 1},
  {&__pyx_n_s_bj, __pyx_k_bj, sizeof(__pyx_k_bj), 0, 0, 1, 1},
  {&__pyx_n_s_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 0, 1, 1},
  {&__pyx_n_s_checkAcc, __pyx_k_checkAcc, sizeof(__pyx_k_checkAcc), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_cmat, __pyx_k_cmat, sizeof(__pyx_k_cmat), 0, 0, 1, 1},
  {&__pyx_n_s_cmath, __pyx_k_cmath, sizeof(__pyx_k_cmath), 0, 0, 1, 1},
  {&__pyx_n_s_cos, __pyx_k_cos, sizeof(__pyx_k_cos), 0, 0, 1, 1},
  {&__pyx_n_s_cos2s, __pyx_k_cos2s, sizeof(__pyx_k_cos2s), 0, 0, 1, 1},
  {&__pyx_n_s_coshkzd_test, __pyx_k_coshkzd_test, sizeof(__pyx_k_coshkzd_test), 0, 0, 1, 1},
  {&__pyx_n_s_costap, __pyx_k_costap, sizeof(__pyx_k_costap), 0, 0, 1, 1},
  {&__pyx_n_s_cppU, __pyx_k_cppU, sizeof(__pyx_k_cppU), 0, 0, 1, 1},
  {&__pyx_kp_s_csv, __pyx_k_csv, sizeof(__pyx_k_csv), 0, 0, 1, 0},
  {&__pyx_n_s_cut, __pyx_k_cut, sizeof(__pyx_k_cut), 0, 0, 1, 1},
  {&__pyx_n_s_cutoff, __pyx_k_cutoff, sizeof(__pyx_k_cutoff), 0, 0, 1, 1},
  {&__pyx_n_s_cutoffTotal, __pyx_k_cutoffTotal, sizeof(__pyx_k_cutoffTotal), 0, 0, 1, 1},
  {&__pyx_n_s_cutoff_win, __pyx_k_cutoff_win, sizeof(__pyx_k_cutoff_win), 0, 0, 1, 1},
  {&__pyx_n_s_d, __pyx_k_d, sizeof(__pyx_k_d), 0, 0, 1, 1},
  {&__pyx_n_s_decompose_tseries, __pyx_k_decompose_tseries, sizeof(__pyx_k_decompose_tseries), 0, 0, 1, 1},
  {&__pyx_n_s_delimiter, __pyx_k_delimiter, sizeof(__pyx_k_delimiter), 0, 0, 1, 1},
  {&__pyx_n_s_depth, __pyx_k_depth, sizeof(__pyx_k_depth), 0, 0, 1, 1},
  {&__pyx_n_s_depth_2, __pyx_k_depth_2, sizeof(__pyx_k_depth_2), 0, 0, 1, 1},
  {&__pyx_n_s_df, __pyx_k_df, sizeof(__pyx_k_df), 0, 0, 1, 1},
  {&__pyx_n_s_dirCheck, __pyx_k_dirCheck, sizeof(__pyx_k_dirCheck), 0, 0, 1, 1},
  {&__pyx_n_s_dircheck, __pyx_k_dircheck, sizeof(__pyx_k_dircheck), 0, 0, 1, 1},
  {&__pyx_n_s_dispersion, __pyx_k_dispersion, sizeof(__pyx_k_dispersion), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_dom, __pyx_k_dom, sizeof(__pyx_k_dom), 0, 0, 1, 1},
  {&__pyx_n_s_dt, __pyx_k_dt, sizeof(__pyx_k_dt), 0, 0, 1, 1},
  {&__pyx_n_s_duration, __pyx_k_duration, sizeof(__pyx_k_duration), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_er1, __pyx_k_er1, sizeof(__pyx_k_er1), 0, 0, 1, 1},
  {&__pyx_n_s_errors, __pyx_k_errors, sizeof(__pyx_k_errors), 0, 0, 1, 1},
  {&__pyx_n_s_eta, __pyx_k_eta, sizeof(__pyx_k_eta), 0, 0, 1, 1},
  {&__pyx_n_s_etaDirect, __pyx_k_etaDirect, sizeof(__pyx_k_etaDirect), 0, 0, 1, 1},
  {&__pyx_n_s_etaR, __pyx_k_etaR, sizeof(__pyx_k_etaR), 0, 0, 1, 1},
  {&__pyx_n_s_etaWindow, __pyx_k_etaWindow, sizeof(__pyx_k_etaWindow), 0, 0, 1, 1},
  {&__pyx_n_s_eta_2ndOrder, __pyx_k_eta_2ndOrder, sizeof(__pyx_k_eta_2ndOrder), 0, 0, 1, 1},
  {&__pyx_n_s_eta_long, __pyx_k_eta_long, sizeof(__pyx_k_eta_long), 0, 0, 1, 1},
  {&__pyx_n_s_eta_mode, __pyx_k_eta_mode, sizeof(__pyx_k_eta_mode), 0, 0, 1, 1},
  {&__pyx_n_s_eta_overall, __pyx_k_eta_overall, sizeof(__pyx_k_eta_overall), 0, 0, 1, 1},
  {&__pyx_n_s_eta_setUp, __pyx_k_eta_setUp, sizeof(__pyx_k_eta_setUp), 0, 0, 1, 1},
  {&__pyx_n_s_eta_short, __pyx_k_eta_short, sizeof(__pyx_k_eta_short), 0, 0, 1, 1},
  {&__pyx_n_s_exit, __pyx_k_exit, sizeof(__pyx_k_exit), 0, 0, 1, 1},
  {&__pyx_n_s_exp, __pyx_k_exp, sizeof(__pyx_k_exp), 0, 0, 1, 1},
  {&__pyx_n_s_f, __pyx_k_f, sizeof(__pyx_k_f), 0, 0, 1, 1},
  {&__pyx_n_s_f0, __pyx_k_f0, sizeof(__pyx_k_f0), 0, 0, 1, 1},
  {&__pyx_n_s_fast, __pyx_k_fast, sizeof(__pyx_k_fast), 0, 0, 1, 1},
  {&__pyx_n_s_fastcos_test, __pyx_k_fastcos_test, sizeof(__pyx_k_fastcos_test), 0, 0, 1, 1},
  {&__pyx_n_s_fastcosh_test, __pyx_k_fastcosh_test, sizeof(__pyx_k_fastcosh_test), 0, 0, 1, 1},
  {&__pyx_n_s_fastsinh_test, __pyx_k_fastsinh_test, sizeof(__pyx_k_fastsinh_test), 0, 0, 1, 1},
  {&__pyx_n_s_fft, __pyx_k_fft, sizeof(__pyx_k_fft), 0, 0, 1, 1},
  {&__pyx_n_s_fft_x, __pyx_k_fft_x, sizeof(__pyx_k_fft_x), 0, 0, 1, 1},
  {&__pyx_n_s_fftfreq, __pyx_k_fftfreq, sizeof(__pyx_k_fftfreq), 0, 0, 1, 1},
  {&__pyx_n_s_fi, __pyx_k_fi, sizeof(__pyx_k_fi), 0, 0, 1, 1},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_n_s_fim_tmp, __pyx_k_fim_tmp, sizeof(__pyx_k_fim_tmp), 0, 0, 1, 1},
  {&__pyx_n_s_findWindow, __pyx_k_findWindow, sizeof(__pyx_k_findWindow), 0, 0, 1, 1},
  {&__pyx_n_s_fname, __pyx_k_fname, sizeof(__pyx_k_fname), 0, 0, 1, 1},
  {&__pyx_n_s_freq, __pyx_k_freq, sizeof(__pyx_k_freq), 0, 0, 1, 1},
  {&__pyx_n_s_fun, __pyx_k_fun, sizeof(__pyx_k_fun), 0, 0, 1, 1},
  {&__pyx_n_s_func, __pyx_k_func, sizeof(__pyx_k_func), 0, 0, 1, 1},
  {&__pyx_n_s_funcName, __pyx_k_funcName, sizeof(__pyx_k_funcName), 0, 0, 1, 1},
  {&__pyx_n_s_funcNames, __pyx_k_funcNames, sizeof(__pyx_k_funcNames), 0, 0, 1, 1},
  {&__pyx_n_s_func_ret, __pyx_k_func_ret, sizeof(__pyx_k_func_ret), 0, 0, 1, 1},
  {&__pyx_n_s_g, __pyx_k_g, sizeof(__pyx_k_g), 0, 0, 1, 1},
  {&__pyx_n_s_gAbs, __pyx_k_gAbs, sizeof(__pyx_k_gAbs), 0, 0, 1, 1},
  {&__pyx_n_s_gamma, __pyx_k_gamma, sizeof(__pyx_k_gamma), 0, 0, 1, 1},
  {&__pyx_n_s_ho, __pyx_k_ho, sizeof(__pyx_k_ho), 0, 0, 1, 1},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_i1, __pyx_k_i1, sizeof(__pyx_k_i1), 0, 0, 1, 1},
  {&__pyx_n_s_i2, __pyx_k_i2, sizeof(__pyx_k_i2), 0, 0, 1, 1},
  {&__pyx_n_s_iend, __pyx_k_iend, sizeof(__pyx_k_iend), 0, 0, 1, 1},
  {&__pyx_n_s_ii, __pyx_k_ii, sizeof(__pyx_k_ii), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_n_s_interp, __pyx_k_interp, sizeof(__pyx_k_interp), 0, 0, 1, 1},
  {&__pyx_n_s_j, __pyx_k_j, sizeof(__pyx_k_j), 0, 0, 1, 1},
  {&__pyx_n_s_jj, __pyx_k_jj, sizeof(__pyx_k_jj), 0, 0, 1, 1},
  {&__pyx_n_s_k, __pyx_k_k, sizeof(__pyx_k_k), 0, 0, 1, 1},
  {&__pyx_n_s_kAbs, __pyx_k_kAbs, sizeof(__pyx_k_kAbs), 0, 0, 1, 1},
  {&__pyx_n_s_kDir, __pyx_k_kDir, sizeof(__pyx_k_kDir), 0, 0, 1, 1},
  {&__pyx_n_s_l, __pyx_k_l, sizeof(__pyx_k_l), 0, 0, 1, 1},
  {&__pyx_n_s_level, __pyx_k_level, sizeof(__pyx_k_level), 0, 0, 1, 1},
  {&__pyx_n_s_linear, __pyx_k_linear, sizeof(__pyx_k_linear), 0, 0, 1, 1},
  {&__pyx_n_s_linspace, __pyx_k_linspace, sizeof(__pyx_k_linspace), 0, 0, 1, 1},
  {&__pyx_n_s_loadExistingFunction, __pyx_k_loadExistingFunction, sizeof(__pyx_k_loadExistingFunction), 0, 0, 1, 1},
  {&__pyx_n_s_loadtxt, __pyx_k_loadtxt, sizeof(__pyx_k_loadtxt), 0, 0, 1, 1},
  {&__pyx_n_s_logEvent, __pyx_k_logEvent, sizeof(__pyx_k_logEvent), 0, 0, 1, 1},
  {&__pyx_n_s_long, __pyx_k_long, sizeof(__pyx_k_long), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_max, __pyx_k_max, sizeof(__pyx_k_max), 0, 0, 1, 1},
  {&__pyx_n_s_mean, __pyx_k_mean, sizeof(__pyx_k_mean), 0, 0, 1, 1},
  {&__pyx_n_s_meanVelocity, __pyx_k_meanVelocity, sizeof(__pyx_k_meanVelocity), 0, 0, 1, 1},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_s_mitsuyasu, __pyx_k_mitsuyasu, sizeof(__pyx_k_mitsuyasu), 0, 0, 1, 1},
  {&__pyx_n_s_mode, __pyx_k_mode, sizeof(__pyx_k_mode), 0, 0, 1, 1},
  {&__pyx_n_s_modes, __pyx_k_modes, sizeof(__pyx_k_modes), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_mwl, __pyx_k_mwl, sizeof(__pyx_k_mwl), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_kp_u_ndarray_is_not_C_contiguous, __pyx_k_ndarray_is_not_C_contiguous, sizeof(__pyx_k_ndarray_is_not_C_contiguous), 0, 1, 0, 0},
  {&__pyx_kp_u_ndarray_is_not_Fortran_contiguou, __pyx_k_ndarray_is_not_Fortran_contiguou, sizeof(__pyx_k_ndarray_is_not_Fortran_contiguou), 0, 1, 0, 0},
  {&__pyx_n_s_nfft, __pyx_k_nfft, sizeof(__pyx_k_nfft), 0, 0, 1, 1},
  {&__pyx_n_s_niter, __pyx_k_niter, sizeof(__pyx_k_niter), 0, 0, 1, 1},
  {&__pyx_n_s_normIntegral, __pyx_k_normIntegral, sizeof(__pyx_k_normIntegral), 0, 0, 1, 1},
  {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {&__pyx_n_s_npoints, __pyx_k_npoints, sizeof(__pyx_k_npoints), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_kp_s_numpy_core_multiarray_failed_to, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 0, 1, 0},
  {&__pyx_kp_s_numpy_core_umath_failed_to_impor, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 0, 1, 0},
  {&__pyx_n_s_omega, __pyx_k_omega, sizeof(__pyx_k_omega), 0, 0, 1, 1},
  {&__pyx_n_s_omega0, __pyx_k_omega0, sizeof(__pyx_k_omega0), 0, 0, 1, 1},
  {&__pyx_n_s_ones, __pyx_k_ones, sizeof(__pyx_k_ones), 0, 0, 1, 1},
  {&__pyx_n_s_open, __pyx_k_open, sizeof(__pyx_k_open), 0, 0, 1, 1},
  {&__pyx_n_s_overl, __pyx_k_overl, sizeof(__pyx_k_overl), 0, 0, 1, 1},
  {&__pyx_n_s_period, __pyx_k_period, sizeof(__pyx_k_period), 0, 0, 1, 1},
  {&__pyx_n_s_periods, __pyx_k_periods, sizeof(__pyx_k_periods), 0, 0, 1, 1},
  {&__pyx_n_s_phase, __pyx_k_phase, sizeof(__pyx_k_phase), 0, 0, 1, 1},
  {&__pyx_n_s_phi, __pyx_k_phi, sizeof(__pyx_k_phi), 0, 0, 1, 1},
  {&__pyx_n_s_phi0, __pyx_k_phi0, sizeof(__pyx_k_phi0), 0, 0, 1, 1},
  {&__pyx_n_s_phiSymm, __pyx_k_phiSymm, sizeof(__pyx_k_phiSymm), 0, 0, 1, 1},
  {&__pyx_n_s_pi, __pyx_k_pi, sizeof(__pyx_k_pi), 0, 0, 1, 1},
  {&__pyx_n_s_pp, __pyx_k_pp, sizeof(__pyx_k_pp), 0, 0, 1, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_printOut, __pyx_k_printOut, sizeof(__pyx_k_printOut), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_r, __pyx_k_r, sizeof(__pyx_k_r), 0, 0, 1, 1},
  {&__pyx_n_s_ramp, __pyx_k_ramp, sizeof(__pyx_k_ramp), 0, 0, 1, 1},
  {&__pyx_n_s_rampTime, __pyx_k_rampTime, sizeof(__pyx_k_rampTime), 0, 0, 1, 1},
  {&__pyx_n_s_rand, __pyx_k_rand, sizeof(__pyx_k_rand), 0, 0, 1, 1},
  {&__pyx_n_s_random, __pyx_k_random, sizeof(__pyx_k_random), 0, 0, 1, 1},
  {&__pyx_n_s_randomNLWaves, __pyx_k_randomNLWaves, sizeof(__pyx_k_randomNLWaves), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_real, __pyx_k_real, sizeof(__pyx_k_real), 0, 0, 1, 1},
  {&__pyx_n_s_rec_d, __pyx_k_rec_d, sizeof(__pyx_k_rec_d), 0, 0, 1, 1},
  {&__pyx_n_s_rec_direct, __pyx_k_rec_direct, sizeof(__pyx_k_rec_direct), 0, 0, 1, 1},
  {&__pyx_n_s_reduceToIntervals, __pyx_k_reduceToIntervals, sizeof(__pyx_k_reduceToIntervals), 0, 0, 1, 1},
  {&__pyx_n_s_results, __pyx_k_results, sizeof(__pyx_k_results), 0, 0, 1, 1},
  {&__pyx_n_s_returnRectangles, __pyx_k_returnRectangles, sizeof(__pyx_k_returnRectangles), 0, 0, 1, 1},
  {&__pyx_n_s_returnRectangles3D, __pyx_k_returnRectangles3D, sizeof(__pyx_k_returnRectangles3D), 0, 0, 1, 1},
  {&__pyx_n_s_rotation3D, __pyx_k_rotation3D, sizeof(__pyx_k_rotation3D), 0, 0, 1, 1},
  {&__pyx_n_s_round, __pyx_k_round, sizeof(__pyx_k_round), 0, 0, 1, 1},
  {&__pyx_n_s_s, __pyx_k_s, sizeof(__pyx_k_s), 0, 0, 1, 1},
  {&__pyx_n_s_savetxt, __pyx_k_savetxt, sizeof(__pyx_k_savetxt), 0, 0, 1, 1},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_n_s_series, __pyx_k_series, sizeof(__pyx_k_series), 0, 0, 1, 1},
  {&__pyx_n_s_seriesArray, __pyx_k_seriesArray, sizeof(__pyx_k_seriesArray), 0, 0, 1, 1},
  {&__pyx_n_s_setDirVector, __pyx_k_setDirVector, sizeof(__pyx_k_setDirVector), 0, 0, 1, 1},
  {&__pyx_n_s_setUp, __pyx_k_setUp, sizeof(__pyx_k_setUp), 0, 0, 1, 1},
  {&__pyx_n_s_setVertDir, __pyx_k_setVertDir, sizeof(__pyx_k_setVertDir), 0, 0, 1, 1},
  {&__pyx_n_s_setup, __pyx_k_setup, sizeof(__pyx_k_setup), 0, 0, 1, 1},
  {&__pyx_n_s_shape, __pyx_k_shape, sizeof(__pyx_k_shape), 0, 0, 1, 1},
  {&__pyx_n_s_short, __pyx_k_short, sizeof(__pyx_k_short), 0, 0, 1, 1},
  {&__pyx_n_s_sigma, __pyx_k_sigma, sizeof(__pyx_k_sigma), 0, 0, 1, 1},
  {&__pyx_n_s_sigmaReturn, __pyx_k_sigmaReturn, sizeof(__pyx_k_sigmaReturn), 0, 0, 1, 1},
  {&__pyx_n_s_sinh, __pyx_k_sinh, sizeof(__pyx_k_sinh), 0, 0, 1, 1},
  {&__pyx_n_s_sinhkzd_test, __pyx_k_sinhkzd_test, sizeof(__pyx_k_sinhkzd_test), 0, 0, 1, 1},
  {&__pyx_n_s_sinus, __pyx_k_sinus, sizeof(__pyx_k_sinus), 0, 0, 1, 1},
  {&__pyx_n_s_skiprows, __pyx_k_skiprows, sizeof(__pyx_k_skiprows), 0, 0, 1, 1},
  {&__pyx_n_s_smax, __pyx_k_smax, sizeof(__pyx_k_smax), 0, 0, 1, 1},
  {&__pyx_n_s_spectName, __pyx_k_spectName, sizeof(__pyx_k_spectName), 0, 0, 1, 1},
  {&__pyx_n_s_spectral_params, __pyx_k_spectral_params, sizeof(__pyx_k_spectral_params), 0, 0, 1, 1},
  {&__pyx_n_s_spreadName, __pyx_k_spreadName, sizeof(__pyx_k_spreadName), 0, 0, 1, 1},
  {&__pyx_n_s_spread_params, __pyx_k_spread_params, sizeof(__pyx_k_spread_params), 0, 0, 1, 1},
  {&__pyx_n_s_sqrt, __pyx_k_sqrt, sizeof(__pyx_k_sqrt), 0, 0, 1, 1},
  {&__pyx_n_s_sum, __pyx_k_sum, sizeof(__pyx_k_sum), 0, 0, 1, 1},
  {&__pyx_n_s_sys, __pyx_k_sys, sizeof(__pyx_k_sys), 0, 0, 1, 1},
  {&__pyx_n_s_t, __pyx_k_t, sizeof(__pyx_k_t), 0, 0, 1, 1},
  {&__pyx_n_s_tanh, __pyx_k_tanh, sizeof(__pyx_k_tanh), 0, 0, 1, 1},
  {&__pyx_n_s_te, __pyx_k_te, sizeof(__pyx_k_te), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_theta, __pyx_k_theta, sizeof(__pyx_k_theta), 0, 0, 1, 1},
  {&__pyx_n_s_time, __pyx_k_time, sizeof(__pyx_k_time), 0, 0, 1, 1},
  {&__pyx_n_s_timeSeriesFile, __pyx_k_timeSeriesFile, sizeof(__pyx_k_timeSeriesFile), 0, 0, 1, 1},
  {&__pyx_n_s_timeSeriesPosition, __pyx_k_timeSeriesPosition, sizeof(__pyx_k_timeSeriesPosition), 0, 0, 1, 1},
  {&__pyx_n_s_timelst, __pyx_k_timelst, sizeof(__pyx_k_timelst), 0, 0, 1, 1},
  {&__pyx_n_s_tma, __pyx_k_tma, sizeof(__pyx_k_tma), 0, 0, 1, 1},
  {&__pyx_n_s_tolist, __pyx_k_tolist, sizeof(__pyx_k_tolist), 0, 0, 1, 1},
  {&__pyx_n_s_tophat, __pyx_k_tophat, sizeof(__pyx_k_tophat), 0, 0, 1, 1},
  {&__pyx_n_s_trans, __pyx_k_trans, sizeof(__pyx_k_trans), 0, 0, 1, 1},
  {&__pyx_n_s_ts, __pyx_k_ts, sizeof(__pyx_k_ts), 0, 0, 1, 1},
  {&__pyx_n_s_tt, __pyx_k_tt, sizeof(__pyx_k_tt), 0, 0, 1, 1},
  {&__pyx_kp_s_txt, __pyx_k_txt, sizeof(__pyx_k_txt), 0, 0, 1, 0},
  {&__pyx_n_s_u, __pyx_k_u, sizeof(__pyx_k_u), 0, 0, 1, 1},
  {&__pyx_n_s_uDirect, __pyx_k_uDirect, sizeof(__pyx_k_uDirect), 0, 0, 1, 1},
  {&__pyx_n_s_uR, __pyx_k_uR, sizeof(__pyx_k_uR), 0, 0, 1, 1},
  {&__pyx_n_s_uWindow, __pyx_k_uWindow, sizeof(__pyx_k_uWindow), 0, 0, 1, 1},
  {&__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_k_unknown_dtype_code_in_numpy_pxd, sizeof(__pyx_k_unknown_dtype_code_in_numpy_pxd), 0, 1, 0, 0},
  {&__pyx_n_s_v1, __pyx_k_v1, sizeof(__pyx_k_v1), 0, 0, 1, 1},
  {&__pyx_n_s_v2, __pyx_k_v2, sizeof(__pyx_k_v2), 0, 0, 1, 1},
  {&__pyx_n_s_vDir, __pyx_k_vDir, sizeof(__pyx_k_vDir), 0, 0, 1, 1},
  {&__pyx_n_s_validFunctions, __pyx_k_validFunctions, sizeof(__pyx_k_validFunctions), 0, 0, 1, 1},
  {&__pyx_n_s_vector, __pyx_k_vector, sizeof(__pyx_k_vector), 0, 0, 1, 1},
  {&__pyx_n_s_vel_mode, __pyx_k_vel_mode, sizeof(__pyx_k_vel_mode), 0, 0, 1, 1},
  {&__pyx_n_s_w, __pyx_k_w, sizeof(__pyx_k_w), 0, 0, 1, 1},
  {&__pyx_n_s_w_aux, __pyx_k_w_aux, sizeof(__pyx_k_w_aux), 0, 0, 1, 1},
  {&__pyx_n_s_waveDir, __pyx_k_waveDir, sizeof(__pyx_k_waveDir), 0, 0, 1, 1},
  {&__pyx_n_s_waveDir0, __pyx_k_waveDir0, sizeof(__pyx_k_waveDir0), 0, 0, 1, 1},
  {&__pyx_n_s_waveHeight, __pyx_k_waveHeight, sizeof(__pyx_k_waveHeight), 0, 0, 1, 1},
  {&__pyx_n_s_waveType, __pyx_k_waveType, sizeof(__pyx_k_waveType), 0, 0, 1, 1},
  {&__pyx_n_s_wavelength, __pyx_k_wavelength, sizeof(__pyx_k_wavelength), 0, 0, 1, 1},
  {&__pyx_kp_s_waves_This_may_take_a_while, __pyx_k_waves_This_may_take_a_while, sizeof(__pyx_k_waves_This_may_take_a_while), 0, 0, 1, 0},
  {&__pyx_n_s_where, __pyx_k_where, sizeof(__pyx_k_where), 0, 0, 1, 1},
  {&__pyx_n_s_wind, __pyx_k_wind, sizeof(__pyx_k_wind), 0, 0, 1, 1},
  {&__pyx_n_s_windOut, __pyx_k_windOut, sizeof(__pyx_k_windOut), 0, 0, 1, 1},
  {&__pyx_n_s_window_params, __pyx_k_window_params, sizeof(__pyx_k_window_params), 0, 0, 1, 1},
  {&__pyx_n_s_windows, __pyx_k_windows, sizeof(__pyx_k_windows), 0, 0, 1, 1},
  {&__pyx_n_s_writeEtaSeries, __pyx_k_writeEtaSeries, sizeof(__pyx_k_writeEtaSeries), 0, 0, 1, 1},
  {&__pyx_n_s_wtError, __pyx_k_wtError, sizeof(__pyx_k_wtError), 0, 0, 1, 1},
  {&__pyx_n_s_ww, __pyx_k_ww, sizeof(__pyx_k_ww), 0, 0, 1, 1},
  {&__pyx_n_s_wwi_setUp, __pyx_k_wwi_setUp, sizeof(__pyx_k_wwi_setUp), 0, 0, 1, 1},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_n_s_x0, __pyx_k_x0, sizeof(__pyx_k_x0), 0, 0, 1, 1},
  {&__pyx_n_s_xx, __pyx_k_xx, sizeof(__pyx_k_xx), 0, 0, 1, 1},
  {&__pyx_n_s_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 0, 1, 1},
  {&__pyx_n_s_zeros, __pyx_k_zeros, sizeof(__pyx_k_zeros), 0, 0, 1, 1},
  {&__pyx_n_s_zip, __pyx_k_zip, sizeof(__pyx_k_zip), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 310, __pyx_L1_error)
  __pyx_builtin_sum = __Pyx_GetBuiltinName(__pyx_n_s_sum); if (!__pyx_builtin_sum) __PYX_ERR(0, 333, __pyx_L1_error)
  __pyx_builtin_max = __Pyx_GetBuiltinName(__pyx_n_s_max); if (!__pyx_builtin_max) __PYX_ERR(0, 1298, __pyx_L1_error)
  __pyx_builtin_zip = __Pyx_GetBuiltinName(__pyx_n_s_zip); if (!__pyx_builtin_zip) __PYX_ERR(0, 1305, __pyx_L1_error)
  __pyx_builtin_open = __Pyx_GetBuiltinName(__pyx_n_s_open); if (!__pyx_builtin_open) __PYX_ERR(0, 1842, __pyx_L1_error)
  __pyx_builtin_round = __Pyx_GetBuiltinName(__pyx_n_s_round); if (!__pyx_builtin_round) __PYX_ERR(0, 2350, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(2, 218, __pyx_L1_error)
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(2, 799, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(2, 989, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "WaveTools.py":182
 *     if funcName not in funcNames:
 *         logEvent("ERROR! Wavetools.py: Wrong function type (%s) given: Valid wavetypes are %s" %(funcName,funcNames), level=0)
 *         sys.exit(1)             # <<<<<<<<<<<<<<
 *     return func_ret
 * 
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "WaveTools.py":243
 *         #print self.dircheck
 *     if dircheck > 1e-10:
 *         logEvent("Wave direction is not perpendicular to gravity vector. Check input",level=0)             # <<<<<<<<<<<<<<
 *         return sys.exit(1)
 *     else:
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_Wave_direction_is_not_perpendicu); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 243, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "WaveTools.py":244
 *     if dircheck > 1e-10:
 *         logEvent("Wave direction is not perpendicular to gravity vector. Check input",level=0)
 *         return sys.exit(1)             # <<<<<<<<<<<<<<
 *     else:
 *         return None
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 244, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "WaveTools.py":266
 * 
 *     """
 *     fim_tmp = (0.5*(fi[1:]+fi[:-1])).tolist()             # <<<<<<<<<<<<<<
 *     return np.array([fim_tmp[0]-0.5*df]+fim_tmp+[fim_tmp[-1]+0.5*df])
 * def returnRectangles(a,x):
 */
  __pyx_slice__4 = PySlice_New(__pyx_int_1, Py_None, Py_None); if (unlikely(!__pyx_slice__4)) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__4);
  __Pyx_GIVEREF(__pyx_slice__4);
  __pyx_slice__5 = PySlice_New(Py_None, __pyx_int_neg_1, Py_None); if (unlikely(!__pyx_slice__5)) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__5);
  __Pyx_GIVEREF(__pyx_slice__5);

  /* "WaveTools.py":287
 * 
 *     """
 *     return 0.5*(a[1:]+a[:-1])*(x[1:]-x[:-1])             # <<<<<<<<<<<<<<
 * def returnRectangles3D(a,x,y):
 *     """ Returns 3D discrete integrals using the rectangle method
 */
  __pyx_slice__6 = PySlice_New(__pyx_int_1, Py_None, Py_None); if (unlikely(!__pyx_slice__6)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__6);
  __Pyx_GIVEREF(__pyx_slice__6);
  __pyx_slice__7 = PySlice_New(Py_None, __pyx_int_neg_1, Py_None); if (unlikely(!__pyx_slice__7)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__7);
  __Pyx_GIVEREF(__pyx_slice__7);
  __pyx_slice__8 = PySlice_New(__pyx_int_1, Py_None, Py_None); if (unlikely(!__pyx_slice__8)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__8);
  __Pyx_GIVEREF(__pyx_slice__8);
  __pyx_slice__9 = PySlice_New(Py_None, __pyx_int_neg_1, Py_None); if (unlikely(!__pyx_slice__9)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__9);
  __Pyx_GIVEREF(__pyx_slice__9);

  /* "WaveTools.py":308
 *     numpy.ndarray
 *     """
 *     ai = 0.5*(a[1:,:]+a[:-1,:])             # <<<<<<<<<<<<<<
 *     ai = 0.5*(ai[:,1:]+ai[:,:-1])
 *     for ii in range(len(x)-1):
 */
  __pyx_slice__10 = PySlice_New(__pyx_int_1, Py_None, Py_None); if (unlikely(!__pyx_slice__10)) __PYX_ERR(0, 308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__10);
  __Pyx_GIVEREF(__pyx_slice__10);
  __pyx_slice__11 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__11)) __PYX_ERR(0, 308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__11);
  __Pyx_GIVEREF(__pyx_slice__11);
  __pyx_tuple__12 = PyTuple_Pack(2, __pyx_slice__10, __pyx_slice__11); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(0, 308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);
  __pyx_slice__13 = PySlice_New(Py_None, __pyx_int_neg_1, Py_None); if (unlikely(!__pyx_slice__13)) __PYX_ERR(0, 308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__13);
  __Pyx_GIVEREF(__pyx_slice__13);
  __pyx_slice__14 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__14)) __PYX_ERR(0, 308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__14);
  __Pyx_GIVEREF(__pyx_slice__14);
  __pyx_tuple__15 = PyTuple_Pack(2, __pyx_slice__13, __pyx_slice__14); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "WaveTools.py":309
 *     """
 *     ai = 0.5*(a[1:,:]+a[:-1,:])
 *     ai = 0.5*(ai[:,1:]+ai[:,:-1])             # <<<<<<<<<<<<<<
 *     for ii in range(len(x)-1):
 *         ai[ii,:] *= (y[1:]-y[:-1])
 */
  __pyx_slice__16 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__16)) __PYX_ERR(0, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__16);
  __Pyx_GIVEREF(__pyx_slice__16);
  __pyx_slice__17 = PySlice_New(__pyx_int_1, Py_None, Py_None); if (unlikely(!__pyx_slice__17)) __PYX_ERR(0, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__17);
  __Pyx_GIVEREF(__pyx_slice__17);
  __pyx_tuple__18 = PyTuple_Pack(2, __pyx_slice__16, __pyx_slice__17); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);
  __pyx_slice__19 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__19)) __PYX_ERR(0, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__19);
  __Pyx_GIVEREF(__pyx_slice__19);
  __pyx_slice__20 = PySlice_New(Py_None, __pyx_int_neg_1, Py_None); if (unlikely(!__pyx_slice__20)) __PYX_ERR(0, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__20);
  __Pyx_GIVEREF(__pyx_slice__20);
  __pyx_tuple__21 = PyTuple_Pack(2, __pyx_slice__19, __pyx_slice__20); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(0, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "WaveTools.py":311
 *     ai = 0.5*(ai[:,1:]+ai[:,:-1])
 *     for ii in range(len(x)-1):
 *         ai[ii,:] *= (y[1:]-y[:-1])             # <<<<<<<<<<<<<<
 *     for jj in range(len(y) - 1):
 *         ai[:,jj] *= (x[1:]-x[:-1])
 */
  __pyx_slice__22 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__22)) __PYX_ERR(0, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__22);
  __Pyx_GIVEREF(__pyx_slice__22);
  __pyx_slice__23 = PySlice_New(__pyx_int_1, Py_None, Py_None); if (unlikely(!__pyx_slice__23)) __PYX_ERR(0, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__23);
  __Pyx_GIVEREF(__pyx_slice__23);
  __pyx_slice__24 = PySlice_New(Py_None, __pyx_int_neg_1, Py_None); if (unlikely(!__pyx_slice__24)) __PYX_ERR(0, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__24);
  __Pyx_GIVEREF(__pyx_slice__24);

  /* "WaveTools.py":313
 *         ai[ii,:] *= (y[1:]-y[:-1])
 *     for jj in range(len(y) - 1):
 *         ai[:,jj] *= (x[1:]-x[:-1])             # <<<<<<<<<<<<<<
 *     return ai
 * def normIntegral(f,dom):
 */
  __pyx_slice__25 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__25)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__25);
  __Pyx_GIVEREF(__pyx_slice__25);
  __pyx_slice__26 = PySlice_New(__pyx_int_1, Py_None, Py_None); if (unlikely(!__pyx_slice__26)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__26);
  __Pyx_GIVEREF(__pyx_slice__26);
  __pyx_slice__27 = PySlice_New(Py_None, __pyx_int_neg_1, Py_None); if (unlikely(!__pyx_slice__27)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__27);
  __Pyx_GIVEREF(__pyx_slice__27);

  /* "WaveTools.py":488
 *     if TMA:
 *         if (depth is None):
 *             logEvent("Wavetools:py. Provide valid depth definition definition for TMA spectrum")             # <<<<<<<<<<<<<<
 *             logEvent("Wavetools:py. Stopping simulation")
 *             sys.exit(1)
 */
  __pyx_tuple__28 = PyTuple_Pack(1, __pyx_kp_s_Wavetools_py_Provide_valid_depth); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(0, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);

  /* "WaveTools.py":489
 *         if (depth is None):
 *             logEvent("Wavetools:py. Provide valid depth definition definition for TMA spectrum")
 *             logEvent("Wavetools:py. Stopping simulation")             # <<<<<<<<<<<<<<
 *             sys.exit(1)
 *         k = dispersion(2*M_PI*f,depth)
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_kp_s_Wavetools_py_Stopping_simulation); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(0, 489, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "WaveTools.py":490
 *             logEvent("Wavetools:py. Provide valid depth definition definition for TMA spectrum")
 *             logEvent("Wavetools:py. Stopping simulation")
 *             sys.exit(1)             # <<<<<<<<<<<<<<
 *         k = dispersion(2*M_PI*f,depth)
 *         tma = np.tanh(k*depth)*np.tanh(k*depth)/(1.+ 2.*k*depth/np.sinh(2.*k*depth))
 */
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(0, 490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);

  /* "WaveTools.py":539
 *     """
 *     fun = np.zeros((len(theta),len(f)),)
 *     for ii in range(len(fun[0,:])):             # <<<<<<<<<<<<<<
 *         fun[:,ii] = np.cos(theta/2)**(2*s)
 *     return fun
 */
  __pyx_slice__31 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__31)) __PYX_ERR(0, 539, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__31);
  __Pyx_GIVEREF(__pyx_slice__31);
  __pyx_tuple__32 = PyTuple_Pack(2, __pyx_int_0, __pyx_slice__31); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(0, 539, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);

  /* "WaveTools.py":540
 *     fun = np.zeros((len(theta),len(f)),)
 *     for ii in range(len(fun[0,:])):
 *         fun[:,ii] = np.cos(theta/2)**(2*s)             # <<<<<<<<<<<<<<
 *     return fun
 * def mitsuyasu(theta,fi,f0,smax=10):
 */
  __pyx_slice__33 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__33)) __PYX_ERR(0, 540, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__33);
  __Pyx_GIVEREF(__pyx_slice__33);

  /* "WaveTools.py":568
 *     s[ii:] = smax * (fi[ii:]/f0)**(-2.5)
 *     fun = np.zeros((len(theta),len(fi)),)
 *     for ii in range(len(fun[0,:])):             # <<<<<<<<<<<<<<
 *         fun[:,ii] = np.cos(theta/2)**(2.*s[ii])
 *     return fun
 */
  __pyx_slice__34 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__34)) __PYX_ERR(0, 568, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__34);
  __Pyx_GIVEREF(__pyx_slice__34);
  __pyx_tuple__35 = PyTuple_Pack(2, __pyx_int_0, __pyx_slice__34); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(0, 568, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);

  /* "WaveTools.py":569
 *     fun = np.zeros((len(theta),len(fi)),)
 *     for ii in range(len(fun[0,:])):
 *         fun[:,ii] = np.cos(theta/2)**(2.*s[ii])             # <<<<<<<<<<<<<<
 *     return fun
 * 
 */
  __pyx_slice__36 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__36)) __PYX_ERR(0, 569, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__36);
  __Pyx_GIVEREF(__pyx_slice__36);

  /* "WaveTools.py":816
 * 
 *         """
 *         phase = sum( (x[:]-self.trans[:])*self.waveDir[:])  - self.c * t             # <<<<<<<<<<<<<<
 *         a1 = self.K*phase
 *         return  self.H*1.0/ cosh(a1)**2
 */
  __pyx_slice__38 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__38)) __PYX_ERR(0, 816, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__38);
  __Pyx_GIVEREF(__pyx_slice__38);
  __pyx_slice__39 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__39)) __PYX_ERR(0, 816, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__39);
  __Pyx_GIVEREF(__pyx_slice__39);
  __pyx_slice__40 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__40)) __PYX_ERR(0, 816, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__40);
  __Pyx_GIVEREF(__pyx_slice__40);

  /* "WaveTools.py":836
 * 
 * 
 *         phase = sum( (x[:]-self.trans[:])*self.waveDir[:])  - self.c * t             # <<<<<<<<<<<<<<
 *         a1 =  cosh(self.K*phase*2.)
 *         a2 =  cosh(self.K*phase)
 */
  __pyx_slice__41 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__41)) __PYX_ERR(0, 836, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__41);
  __Pyx_GIVEREF(__pyx_slice__41);
  __pyx_slice__42 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__42)) __PYX_ERR(0, 836, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__42);
  __Pyx_GIVEREF(__pyx_slice__42);
  __pyx_slice__43 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__43)) __PYX_ERR(0, 836, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__43);
  __Pyx_GIVEREF(__pyx_slice__43);

  /* "WaveTools.py":846
 *             (2.0 * self.d3 - self.d2 * self.H - 6.0 * self.depth * self.H * Z - 3.0 * self.H * Z**2 ) * a1)/(a2)**4
 * 
 *         Uvert =   1.0 / ( 4.0 * np.sqrt(self.gAbs* self.depth) ) * np.sqrt(3.0) * self.gAbs * (self.H / self.depth**3.0)** 1.5  * (self.depth + Z)*(             # <<<<<<<<<<<<<<
 *                 2.0 * self.depth**3 - 7.0 * self.depth**2.0 * self.H + 10.0 * self.depth * self.H * Z + 5.0 * self.H * Z**2.0 +
 *                 (2.0 * self.depth**3.0 + self.depth**2.0 * self.H - 2.0 * self.depth * self.H * Z - self.H * Z**2.0)*
 */
  __pyx_tuple__44 = PyTuple_Pack(1, __pyx_float_3_0); if (unlikely(!__pyx_tuple__44)) __PYX_ERR(0, 846, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);

  /* "WaveTools.py":914
 *         if waveType not in knownWaveTypes:
 *             logEvent("Wrong wavetype given: Valid wavetypes are %s" %(knownWaveTypes), level=0)
 *             sys.exit(1)             # <<<<<<<<<<<<<<
 *         self.g = np.array(g)
 *         self.waveDir =  setDirVector(np.array(waveDir))
 */
  __pyx_tuple__48 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__48)) __PYX_ERR(0, 914, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);

  /* "WaveTools.py":940
 *                 self.wavelength=wavelength
 *             except:
 *                 logEvent("ERROR! Wavetools.py: Wavelenght is not defined for nonlinear waves. Enter wavelength in class arguments",level=0)             # <<<<<<<<<<<<<<
 *                 sys.exit(1)
 *             if ( (len(self.Ycoeff)!=self.Nf) or (len(self.Bcoeff)!=self.Nf) or (Ycoeff[0]==0.) or (Bcoeff[0]==0.) ):
 */
  __pyx_tuple__49 = PyTuple_Pack(1, __pyx_kp_s_ERROR_Wavetools_py_Wavelenght_is); if (unlikely(!__pyx_tuple__49)) __PYX_ERR(0, 940, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__49);
  __Pyx_GIVEREF(__pyx_tuple__49);

  /* "WaveTools.py":941
 *             except:
 *                 logEvent("ERROR! Wavetools.py: Wavelenght is not defined for nonlinear waves. Enter wavelength in class arguments",level=0)
 *                 sys.exit(1)             # <<<<<<<<<<<<<<
 *             if ( (len(self.Ycoeff)!=self.Nf) or (len(self.Bcoeff)!=self.Nf) or (Ycoeff[0]==0.) or (Bcoeff[0]==0.) ):
 *                 logEvent("ERROR! Wavetools.py: Ycoeff and Bcoeff must have the same length and equal to Nf and the 1st order harmonic must not be zero",level=0)
 */
  __pyx_tuple__50 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__50)) __PYX_ERR(0, 941, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__50);
  __Pyx_GIVEREF(__pyx_tuple__50);

  /* "WaveTools.py":943
 *                 sys.exit(1)
 *             if ( (len(self.Ycoeff)!=self.Nf) or (len(self.Bcoeff)!=self.Nf) or (Ycoeff[0]==0.) or (Bcoeff[0]==0.) ):
 *                 logEvent("ERROR! Wavetools.py: Ycoeff and Bcoeff must have the same length and equal to Nf and the 1st order harmonic must not be zero",level=0)             # <<<<<<<<<<<<<<
 *                 sys.exit(1)
 *             else:
 */
  __pyx_tuple__51 = PyTuple_Pack(1, __pyx_kp_s_ERROR_Wavetools_py_Ycoeff_and_Bc); if (unlikely(!__pyx_tuple__51)) __PYX_ERR(0, 943, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);

  /* "WaveTools.py":944
 *             if ( (len(self.Ycoeff)!=self.Nf) or (len(self.Bcoeff)!=self.Nf) or (Ycoeff[0]==0.) or (Bcoeff[0]==0.) ):
 *                 logEvent("ERROR! Wavetools.py: Ycoeff and Bcoeff must have the same length and equal to Nf and the 1st order harmonic must not be zero",level=0)
 *                 sys.exit(1)             # <<<<<<<<<<<<<<
 *             else:
 *                 for ii in range(len(self.tanhF)):
 */
  __pyx_tuple__52 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__52)) __PYX_ERR(0, 944, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__52);
  __Pyx_GIVEREF(__pyx_tuple__52);

  /* "WaveTools.py":957
 * 
 *         if(len(meanVelocity) != 3):
 *             logEvent("ERROR! Wavetools.py: meanVelocity should be a vector with 3 components. ",level=0)             # <<<<<<<<<<<<<<
 *             sys.exit(1)
 *         if(self.Nf > 1000):
 */
  __pyx_tuple__53 = PyTuple_Pack(1, __pyx_kp_s_ERROR_Wavetools_py_meanVelocity); if (unlikely(!__pyx_tuple__53)) __PYX_ERR(0, 957, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);

  /* "WaveTools.py":958
 *         if(len(meanVelocity) != 3):
 *             logEvent("ERROR! Wavetools.py: meanVelocity should be a vector with 3 components. ",level=0)
 *             sys.exit(1)             # <<<<<<<<<<<<<<
 *         if(self.Nf > 1000):
 *             logEvent("ERROR! Wavetools.py: You are not really using more than 1000 Fourier modes for a regular wave, right? ",level=0)
 */
  __pyx_tuple__54 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__54)) __PYX_ERR(0, 958, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__54);
  __Pyx_GIVEREF(__pyx_tuple__54);

  /* "WaveTools.py":960
 *             sys.exit(1)
 *         if(self.Nf > 1000):
 *             logEvent("ERROR! Wavetools.py: You are not really using more than 1000 Fourier modes for a regular wave, right? ",level=0)             # <<<<<<<<<<<<<<
 *             sys.exit(1)
 * 
 */
  __pyx_tuple__55 = PyTuple_Pack(1, __pyx_kp_s_ERROR_Wavetools_py_You_are_not_r); if (unlikely(!__pyx_tuple__55)) __PYX_ERR(0, 960, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__55);
  __Pyx_GIVEREF(__pyx_tuple__55);

  /* "WaveTools.py":961
 *         if(self.Nf > 1000):
 *             logEvent("ERROR! Wavetools.py: You are not really using more than 1000 Fourier modes for a regular wave, right? ",level=0)
 *             sys.exit(1)             # <<<<<<<<<<<<<<
 * 
 * # C++ declarations
 */
  __pyx_tuple__56 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__56)) __PYX_ERR(0, 961, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__56);
  __Pyx_GIVEREF(__pyx_tuple__56);

  /* "WaveTools.py":966
 * 
 *         self.tanhL =float(np.tanh(self.k*self.depth))
 *         for ij in range(3):             # <<<<<<<<<<<<<<
 *             self.kDir_c[ij] = self.kDir[ij]
 *             self.waveDir_c[ij] = self.waveDir[ij]
 */
  __pyx_tuple__57 = PyTuple_Pack(1, __pyx_int_3); if (unlikely(!__pyx_tuple__57)) __PYX_ERR(0, 966, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);

  /* "WaveTools.py":1063
 * 
 * 
 *         U = np.zeros(3,)             # <<<<<<<<<<<<<<
 *         if self.waveType =="Linear":
 *             self.uLinear(cppU,xx,t)
 */
  __pyx_tuple__58 = PyTuple_Pack(1, __pyx_int_3); if (unlikely(!__pyx_tuple__58)) __PYX_ERR(0, 1063, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__58);
  __Pyx_GIVEREF(__pyx_tuple__58);

  /* "WaveTools.py":1149
 *         if phi is None:
 *             self.phi = 2.0*M_PI*np.random.random(self.fi.shape[0])
 *             logEvent('INFO Wavetools.py: No phase array is given. Assigning random phases. Outputing the phasing of the random waves')             # <<<<<<<<<<<<<<
 *         else:
 *             try:
 */
  __pyx_tuple__59 = PyTuple_Pack(1, __pyx_kp_s_INFO_Wavetools_py_No_phase_array); if (unlikely(!__pyx_tuple__59)) __PYX_ERR(0, 1149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__59);
  __Pyx_GIVEREF(__pyx_tuple__59);

  /* "WaveTools.py":1154
 *                 self.phi = np.array(phi)
 *                 if self.phi.shape[0] != self.fi.shape[0]:
 *                     logEvent('ERROR! Wavetools.py: Phase array must have N elements')             # <<<<<<<<<<<<<<
 *                     sys.exit(1)
 * 
 */
  __pyx_tuple__60 = PyTuple_Pack(1, __pyx_kp_s_ERROR_Wavetools_py_Phase_array_m); if (unlikely(!__pyx_tuple__60)) __PYX_ERR(0, 1154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__60);
  __Pyx_GIVEREF(__pyx_tuple__60);

  /* "WaveTools.py":1155
 *                 if self.phi.shape[0] != self.fi.shape[0]:
 *                     logEvent('ERROR! Wavetools.py: Phase array must have N elements')
 *                     sys.exit(1)             # <<<<<<<<<<<<<<
 * 
 *             except:
 */
  __pyx_tuple__61 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__61)) __PYX_ERR(0, 1155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__61);
  __Pyx_GIVEREF(__pyx_tuple__61);

  /* "WaveTools.py":1158
 * 
 *             except:
 *                 logEvent('ERROR! Wavetools.py: phi argument must be an array with N elements')             # <<<<<<<<<<<<<<
 *                 sys.exit(1)
 * 
 */
  __pyx_tuple__62 = PyTuple_Pack(1, __pyx_kp_s_ERROR_Wavetools_py_phi_argument); if (unlikely(!__pyx_tuple__62)) __PYX_ERR(0, 1158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__62);
  __Pyx_GIVEREF(__pyx_tuple__62);

  /* "WaveTools.py":1159
 *             except:
 *                 logEvent('ERROR! Wavetools.py: phi argument must be an array with N elements')
 *                 sys.exit(1)             # <<<<<<<<<<<<<<
 * 
 *         #ai = np.sqrt((Si_J[1:]+Si_J[:-1])*(fi[1:]-fi[:-1]))
 */
  __pyx_tuple__63 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__63)) __PYX_ERR(0, 1159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__63);
  __Pyx_GIVEREF(__pyx_tuple__63);

  /* "WaveTools.py":1171
 *             except:
 *                 logEvent('ERROR! Wavetools.py: Additional spectral parameters are not valid for the %s spectrum' %spectName)
 *                 sys.exit(1)             # <<<<<<<<<<<<<<
 * 
 *         self.tanhF = np.zeros(N,"d")
 */
  __pyx_tuple__64 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__64)) __PYX_ERR(0, 1171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__64);
  __Pyx_GIVEREF(__pyx_tuple__64);

  /* "WaveTools.py":1181
 *         self.kDir = np.zeros((len(self.ki),3),)
 *         for ii in range(3):
 *              self.kDir[:,ii] = self.ki[:] * self.waveDir[ii]             # <<<<<<<<<<<<<<
 *         if(self.N > 10000):
 *             logEvent("ERROR! Wavetools.py: Maximum number of frequencies for Random Waves is 10000 ",level=0)
 */
  __pyx_slice__65 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__65)) __PYX_ERR(0, 1181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__65);
  __Pyx_GIVEREF(__pyx_slice__65);
  __pyx_slice__66 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__66)) __PYX_ERR(0, 1181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__66);
  __Pyx_GIVEREF(__pyx_slice__66);

  /* "WaveTools.py":1183
 *              self.kDir[:,ii] = self.ki[:] * self.waveDir[ii]
 *         if(self.N > 10000):
 *             logEvent("ERROR! Wavetools.py: Maximum number of frequencies for Random Waves is 10000 ",level=0)             # <<<<<<<<<<<<<<
 * 
 *     #C++ declarations
 */
  __pyx_tuple__67 = PyTuple_Pack(1, __pyx_kp_s_ERROR_Wavetools_py_Maximum_numbe); if (unlikely(!__pyx_tuple__67)) __PYX_ERR(0, 1183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__67);
  __Pyx_GIVEREF(__pyx_tuple__67);

  /* "WaveTools.py":1186
 * 
 *     #C++ declarations
 *         for ij in range(3):             # <<<<<<<<<<<<<<
 *             self.waveDir_c[ij] = self.waveDir[ij]
 *             self.vDir_c[ij] = self.vDir[ij]
 */
  __pyx_tuple__68 = PyTuple_Pack(1, __pyx_int_3); if (unlikely(!__pyx_tuple__68)) __PYX_ERR(0, 1186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__68);
  __Pyx_GIVEREF(__pyx_tuple__68);

  /* "WaveTools.py":1194
 * 
 *         for ij in range(self.N):
 *             for kk in range(3):             # <<<<<<<<<<<<<<
 *                 self.kDir_c[3*ij+kk] = self.kDir[ij,kk]
 *             self.omega_c[ij] = self.omega[ij]
 */
  __pyx_tuple__69 = PyTuple_Pack(1, __pyx_int_3); if (unlikely(!__pyx_tuple__69)) __PYX_ERR(0, 1194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__69);
  __Pyx_GIVEREF(__pyx_tuple__69);

  /* "WaveTools.py":1258
 *             xx[ii] = x[ii]
 *             cppU[ii] = 0.
 *         U = np.zeros(3,)             # <<<<<<<<<<<<<<
 *         self._cpp_u(cppU,xx,t)
 *         U[0] = cppU[0]
 */
  __pyx_tuple__70 = PyTuple_Pack(1, __pyx_int_3); if (unlikely(!__pyx_tuple__70)) __PYX_ERR(0, 1258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__70);
  __Pyx_GIVEREF(__pyx_tuple__70);

  /* "WaveTools.py":1291
 *             2D numpy array Nx2 containing free-surface elevation in time.
 *         """
 *         if sum(Lgen[:]*self.waveDir[:])< 0 :             # <<<<<<<<<<<<<<
 *                 logEvent('ERROR! Wavetools.py: Location vector of generation zone should not be opposite to the wave direction')
 *                 sys.exit(1)
 */
  __pyx_slice__72 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__72)) __PYX_ERR(0, 1291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__72);
  __Pyx_GIVEREF(__pyx_slice__72);
  __pyx_slice__73 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__73)) __PYX_ERR(0, 1291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__73);
  __Pyx_GIVEREF(__pyx_slice__73);

  /* "WaveTools.py":1292
 *         """
 *         if sum(Lgen[:]*self.waveDir[:])< 0 :
 *                 logEvent('ERROR! Wavetools.py: Location vector of generation zone should not be opposite to the wave direction')             # <<<<<<<<<<<<<<
 *                 sys.exit(1)
 *         dt = self.Tp/50.
 */
  __pyx_tuple__74 = PyTuple_Pack(1, __pyx_kp_s_ERROR_Wavetools_py_Location_vect); if (unlikely(!__pyx_tuple__74)) __PYX_ERR(0, 1292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__74);
  __Pyx_GIVEREF(__pyx_tuple__74);

  /* "WaveTools.py":1293
 *         if sum(Lgen[:]*self.waveDir[:])< 0 :
 *                 logEvent('ERROR! Wavetools.py: Location vector of generation zone should not be opposite to the wave direction')
 *                 sys.exit(1)             # <<<<<<<<<<<<<<
 *         dt = self.Tp/50.
 *         Tlag = np.zeros(len(self.omega),)
 */
  __pyx_tuple__75 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__75)) __PYX_ERR(0, 1293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__75);
  __Pyx_GIVEREF(__pyx_tuple__75);

  /* "WaveTools.py":1297
 *         Tlag = np.zeros(len(self.omega),)
 *         for j in range(len(self.omega)):
 *             Tlag[j] = sum(self.kDir[j,:]*Lgen[:])/self.omega[j]             # <<<<<<<<<<<<<<
 *         Tlag = max(Tlag)
 *         Tstart = Tstart - Tlag
 */
  __pyx_slice__76 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__76)) __PYX_ERR(0, 1297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__76);
  __Pyx_GIVEREF(__pyx_slice__76);
  __pyx_slice__77 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__77)) __PYX_ERR(0, 1297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__77);
  __Pyx_GIVEREF(__pyx_slice__77);

  /* "WaveTools.py":1307
 *         np.savetxt(fname,zip(time,etaR))
 *         series = np.zeros((len(time),2),)
 *         series[:,0] = time             # <<<<<<<<<<<<<<
 *         series[:,1] = etaR
 * 
 */
  __pyx_slice__78 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__78)) __PYX_ERR(0, 1307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__78);
  __Pyx_GIVEREF(__pyx_slice__78);
  __pyx_tuple__79 = PyTuple_Pack(2, __pyx_slice__78, __pyx_int_0); if (unlikely(!__pyx_tuple__79)) __PYX_ERR(0, 1307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__79);
  __Pyx_GIVEREF(__pyx_tuple__79);

  /* "WaveTools.py":1308
 *         series = np.zeros((len(time),2),)
 *         series[:,0] = time
 *         series[:,1] = etaR             # <<<<<<<<<<<<<<
 * 
 *         return series
 */
  __pyx_slice__80 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__80)) __PYX_ERR(0, 1308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__80);
  __Pyx_GIVEREF(__pyx_slice__80);
  __pyx_tuple__81 = PyTuple_Pack(2, __pyx_slice__80, __pyx_int_1); if (unlikely(!__pyx_tuple__81)) __PYX_ERR(0, 1308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__81);
  __Pyx_GIVEREF(__pyx_tuple__81);

  /* "WaveTools.py":1373
 *                (len(spectName) != Nspectra) or (len(spectral_params) != Nspectra) or(len(phi) != Nspectra):
 * 
 *                 logEvent('ERROR! Wavetools.py: Parameters passed in MultiSpectraRandomWaves must be in array or list form with length Nspectra  ')             # <<<<<<<<<<<<<<
 *                 sys.exit(1)
 * 
 */
  __pyx_tuple__82 = PyTuple_Pack(1, __pyx_kp_s_ERROR_Wavetools_py_Parameters_pa); if (unlikely(!__pyx_tuple__82)) __PYX_ERR(0, 1373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__82);
  __Pyx_GIVEREF(__pyx_tuple__82);

  /* "WaveTools.py":1374
 * 
 *                 logEvent('ERROR! Wavetools.py: Parameters passed in MultiSpectraRandomWaves must be in array or list form with length Nspectra  ')
 *                 sys.exit(1)             # <<<<<<<<<<<<<<
 * 
 *         except:
 */
  __pyx_tuple__83 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__83)) __PYX_ERR(0, 1374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__83);
  __Pyx_GIVEREF(__pyx_tuple__83);

  /* "WaveTools.py":1377
 * 
 *         except:
 *             logEvent('ERROR! Wavetools.py: Parameters passed in MultiSpectraRandomWaves must be in array or list form with length Nspectra  ')             # <<<<<<<<<<<<<<
 *             sys.exit(1)
 *         # Initialize numpy arrays for complete reconstruction
 */
  __pyx_tuple__84 = PyTuple_Pack(1, __pyx_kp_s_ERROR_Wavetools_py_Parameters_pa); if (unlikely(!__pyx_tuple__84)) __PYX_ERR(0, 1377, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__84);
  __Pyx_GIVEREF(__pyx_tuple__84);

  /* "WaveTools.py":1378
 *         except:
 *             logEvent('ERROR! Wavetools.py: Parameters passed in MultiSpectraRandomWaves must be in array or list form with length Nspectra  ')
 *             sys.exit(1)             # <<<<<<<<<<<<<<
 *         # Initialize numpy arrays for complete reconstruction
 *         self.Nall = 0
 */
  __pyx_tuple__85 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__85)) __PYX_ERR(0, 1378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__85);
  __Pyx_GIVEREF(__pyx_tuple__85);

  /* "WaveTools.py":1390
 *             self.Nall+=nn
 *         if(self.Nall > 10000):
 *             logEvent("ERROR! Wavetools.py: Maximum (number of frequencies) x (No of spectra) for MultispectraRandomWaves is 10000 ",level=0)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__86 = PyTuple_Pack(1, __pyx_kp_s_ERROR_Wavetools_py_Maximum_numbe_2); if (unlikely(!__pyx_tuple__86)) __PYX_ERR(0, 1390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__86);
  __Pyx_GIVEREF(__pyx_tuple__86);

  /* "WaveTools.py":1425
 *             self.kiM[NN1:NN] = RW.ki
 *             self.aiM[NN1:NN] = RW.ai
 *             self.kDirM[NN1:NN,:] =RW.kDir[:,:]             # <<<<<<<<<<<<<<
 *             self.phiM[NN1:NN] = RW.phi
 *         for ij in range(3):
 */
  __pyx_slice__87 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__87)) __PYX_ERR(0, 1425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__87);
  __Pyx_GIVEREF(__pyx_slice__87);
  __pyx_slice__88 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__88)) __PYX_ERR(0, 1425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__88);
  __Pyx_GIVEREF(__pyx_slice__88);
  __pyx_tuple__89 = PyTuple_Pack(2, __pyx_slice__87, __pyx_slice__88); if (unlikely(!__pyx_tuple__89)) __PYX_ERR(0, 1425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__89);
  __Pyx_GIVEREF(__pyx_tuple__89);
  __pyx_slice__90 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__90)) __PYX_ERR(0, 1425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__90);
  __Pyx_GIVEREF(__pyx_slice__90);

  /* "WaveTools.py":1427
 *             self.kDirM[NN1:NN,:] =RW.kDir[:,:]
 *             self.phiM[NN1:NN] = RW.phi
 *         for ij in range(3):             # <<<<<<<<<<<<<<
 *             self.vDir_c[ij] = self.vDir[ij]
 *         self.vDir_ =  self.vDir_c
 */
  __pyx_tuple__91 = PyTuple_Pack(1, __pyx_int_3); if (unlikely(!__pyx_tuple__91)) __PYX_ERR(0, 1427, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__91);
  __Pyx_GIVEREF(__pyx_tuple__91);

  /* "WaveTools.py":1433
 * 
 *         for ij in range(self.Nall):
 *             for kk in range(3):             # <<<<<<<<<<<<<<
 *                 self.kDir_cM[3*ij+kk] = self.kDirM[ij,kk]
 *                 self.waveDir_cM[3*ij+kk] = self.kDirM[ij,kk] / self.kiM[ij]
 */
  __pyx_tuple__92 = PyTuple_Pack(1, __pyx_int_3); if (unlikely(!__pyx_tuple__92)) __PYX_ERR(0, 1433, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__92);
  __Pyx_GIVEREF(__pyx_tuple__92);

  /* "WaveTools.py":1501
 *             xx[ii] = x[ii]
 *             cppU[ii] = 0.
 *         U = np.zeros(3,)             # <<<<<<<<<<<<<<
 *         self._cpp_u(cppU,xx,t)
 *         U[0] = cppU[0]
 */
  __pyx_tuple__93 = PyTuple_Pack(1, __pyx_int_3); if (unlikely(!__pyx_tuple__93)) __PYX_ERR(0, 1501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__93);
  __Pyx_GIVEREF(__pyx_tuple__93);

  /* "WaveTools.py":1580
 *         self.vDir = setVertDir(g)
 *         if(self.Nall > 100000):
 *             logEvent("ERROR! Wavetools.py: Maximum (number of frequencies) x (No of spectra) for DirectionalWaves is 100000 ",level=0)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__94 = PyTuple_Pack(1, __pyx_kp_s_ERROR_Wavetools_py_Maximum_numbe_3); if (unlikely(!__pyx_tuple__94)) __PYX_ERR(0, 1580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__94);
  __Pyx_GIVEREF(__pyx_tuple__94);

  /* "WaveTools.py":1610
 *         self.gAbs = sqrt(g[0]*g[0]+g[1]*g[1]+g[2]*g[2])
 * 
 *         temp_array = np.zeros((1,3),)             # <<<<<<<<<<<<<<
 *         temp_array[0,:] = waveDir0
 *         directions = range(0,self.Mtot)
 */
  __pyx_tuple__95 = PyTuple_Pack(2, __pyx_int_1, __pyx_int_3); if (unlikely(!__pyx_tuple__95)) __PYX_ERR(0, 1610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__95);
  __Pyx_GIVEREF(__pyx_tuple__95);
  __pyx_tuple__96 = PyTuple_Pack(1, __pyx_tuple__95); if (unlikely(!__pyx_tuple__96)) __PYX_ERR(0, 1610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__96);
  __Pyx_GIVEREF(__pyx_tuple__96);

  /* "WaveTools.py":1611
 * 
 *         temp_array = np.zeros((1,3),)
 *         temp_array[0,:] = waveDir0             # <<<<<<<<<<<<<<
 *         directions = range(0,self.Mtot)
 * 
 */
  __pyx_slice__97 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__97)) __PYX_ERR(0, 1611, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__97);
  __Pyx_GIVEREF(__pyx_slice__97);
  __pyx_tuple__98 = PyTuple_Pack(2, __pyx_int_0, __pyx_slice__97); if (unlikely(!__pyx_tuple__98)) __PYX_ERR(0, 1611, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__98);
  __Pyx_GIVEREF(__pyx_tuple__98);

  /* "WaveTools.py":1617
 *         for rr in directions:
 *             theta = thetas[rr]
 *             self.waveDirs[rr,:] = rotation3D(temp_array,theta,self.vDir)[0,:]             # <<<<<<<<<<<<<<
 *             self.waveDirs[rr,:]=setDirVector( self.waveDirs[rr,:])
 * 
 */
  __pyx_slice__99 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__99)) __PYX_ERR(0, 1617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__99);
  __Pyx_GIVEREF(__pyx_slice__99);
  __pyx_tuple__100 = PyTuple_Pack(2, __pyx_int_0, __pyx_slice__99); if (unlikely(!__pyx_tuple__100)) __PYX_ERR(0, 1617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__100);
  __Pyx_GIVEREF(__pyx_tuple__100);
  __pyx_slice__101 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__101)) __PYX_ERR(0, 1617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__101);
  __Pyx_GIVEREF(__pyx_slice__101);

  /* "WaveTools.py":1618
 *             theta = thetas[rr]
 *             self.waveDirs[rr,:] = rotation3D(temp_array,theta,self.vDir)[0,:]
 *             self.waveDirs[rr,:]=setDirVector( self.waveDirs[rr,:])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_slice__102 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__102)) __PYX_ERR(0, 1618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__102);
  __Pyx_GIVEREF(__pyx_slice__102);
  __pyx_slice__103 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__103)) __PYX_ERR(0, 1618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__103);
  __Pyx_GIVEREF(__pyx_slice__103);

  /* "WaveTools.py":1627
 *             self.phiDirs = phi
 *         else:
 *             logEvent("ERROR! Wavetools.py: phi in DirectionalWaves class must be given either as None or as a list with 2*M + 1 numpy arrays with length N")             # <<<<<<<<<<<<<<
 *             sys.exit(1)
 * 
 */
  __pyx_tuple__104 = PyTuple_Pack(1, __pyx_kp_s_ERROR_Wavetools_py_phi_in_Direct); if (unlikely(!__pyx_tuple__104)) __PYX_ERR(0, 1627, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__104);
  __Pyx_GIVEREF(__pyx_tuple__104);

  /* "WaveTools.py":1628
 *         else:
 *             logEvent("ERROR! Wavetools.py: phi in DirectionalWaves class must be given either as None or as a list with 2*M + 1 numpy arrays with length N")
 *             sys.exit(1)             # <<<<<<<<<<<<<<
 * 
 *         if (phiSymm):
 */
  __pyx_tuple__105 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__105)) __PYX_ERR(0, 1628, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__105);
  __Pyx_GIVEREF(__pyx_tuple__105);

  /* "WaveTools.py":1632
 *         if (phiSymm):
 *             for i in range(0,M):
 *                 self.phiDirs[M+1+i,:] = self.phiDirs[self.M - 1 - i,:]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_slice__106 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__106)) __PYX_ERR(0, 1632, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__106);
  __Pyx_GIVEREF(__pyx_slice__106);
  __pyx_slice__107 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__107)) __PYX_ERR(0, 1632, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__107);
  __Pyx_GIVEREF(__pyx_slice__107);

  /* "WaveTools.py":1645
 *             except:
 *                 logEvent('ERROR! Wavetools.py: Additional spread parameters are not valid for the %s spectrum' %spectName)
 *                 sys.exit(1)             # <<<<<<<<<<<<<<
 * 
 *         # Setting amplitudes
 */
  __pyx_tuple__108 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__108)) __PYX_ERR(0, 1645, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__108);
  __Pyx_GIVEREF(__pyx_tuple__108);

  /* "WaveTools.py":1652
 *     # Normalising integral over all frequencies
 *         for ii in freq:
 *             Si_Sp[:,ii] = normIntegral(Si_Sp[:,ii],theta_m)             # <<<<<<<<<<<<<<
 *             Si_Sp[:,ii]*= RW.Si_Jm[ii]
 *     # Creating amplitudes spectrum
 */
  __pyx_slice__109 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__109)) __PYX_ERR(0, 1652, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__109);
  __Pyx_GIVEREF(__pyx_slice__109);
  __pyx_slice__110 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__110)) __PYX_ERR(0, 1652, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__110);
  __Pyx_GIVEREF(__pyx_slice__110);

  /* "WaveTools.py":1653
 *         for ii in freq:
 *             Si_Sp[:,ii] = normIntegral(Si_Sp[:,ii],theta_m)
 *             Si_Sp[:,ii]*= RW.Si_Jm[ii]             # <<<<<<<<<<<<<<
 *     # Creating amplitudes spectrum
 *         self.aiDirs[:] = np.sqrt(2.*returnRectangles3D(Si_Sp,theta_m,RW.fim))
 */
  __pyx_slice__111 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__111)) __PYX_ERR(0, 1653, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__111);
  __Pyx_GIVEREF(__pyx_slice__111);

  /* "WaveTools.py":1655
 *             Si_Sp[:,ii]*= RW.Si_Jm[ii]
 *     # Creating amplitudes spectrum
 *         self.aiDirs[:] = np.sqrt(2.*returnRectangles3D(Si_Sp,theta_m,RW.fim))             # <<<<<<<<<<<<<<
 *         self.mwl = mwl
 *         self.depth = depth
 */
  __pyx_slice__112 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__112)) __PYX_ERR(0, 1655, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__112);
  __Pyx_GIVEREF(__pyx_slice__112);

  /* "WaveTools.py":1661
 *         for nn in range(self.N):
 *             for mm in range(self.Mtot):
 *                 self.kDirs[nn,mm,:] = RW.ki[nn]*self.waveDirs[mm,:]             # <<<<<<<<<<<<<<
 * 
 *         for ij in range(3):
 */
  __pyx_slice__113 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__113)) __PYX_ERR(0, 1661, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__113);
  __Pyx_GIVEREF(__pyx_slice__113);
  __pyx_slice__114 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__114)) __PYX_ERR(0, 1661, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__114);
  __Pyx_GIVEREF(__pyx_slice__114);

  /* "WaveTools.py":1663
 *                 self.kDirs[nn,mm,:] = RW.ki[nn]*self.waveDirs[mm,:]
 * 
 *         for ij in range(3):             # <<<<<<<<<<<<<<
 *             self.vDir_c[ij] = self.vDir[ij]
 *         self.vDir_ =  self.vDir_c
 */
  __pyx_tuple__115 = PyTuple_Pack(1, __pyx_int_3); if (unlikely(!__pyx_tuple__115)) __PYX_ERR(0, 1663, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__115);
  __Pyx_GIVEREF(__pyx_tuple__115);

  /* "WaveTools.py":1676
 *                 self.ki_c[ij]  =RW.ki[nn]
 *                 self.tanh_c[ij] = RW.tanhF[nn]
 *                 for kk in range(3):             # <<<<<<<<<<<<<<
 *                     self.kDir_c[3*ij+kk] = self.kDirs[nn,mm,kk]
 *                     self.waveDir_c[3*ij+kk] = self.waveDirs[mm,kk]
 */
  __pyx_tuple__116 = PyTuple_Pack(1, __pyx_int_3); if (unlikely(!__pyx_tuple__116)) __PYX_ERR(0, 1676, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__116);
  __Pyx_GIVEREF(__pyx_tuple__116);

  /* "WaveTools.py":1738
 *             xx[ii] = x[ii]
 *             cppU[ii] = 0.
 *         U = np.zeros(3,)             # <<<<<<<<<<<<<<
 *         self._cpp_u(cppU,xx,t)
 *         U[0] = cppU[0]
 */
  __pyx_tuple__117 = PyTuple_Pack(1, __pyx_int_3); if (unlikely(!__pyx_tuple__117)) __PYX_ERR(0, 1738, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__117);
  __Pyx_GIVEREF(__pyx_tuple__117);

  /* "WaveTools.py":1819
 *             self.x0 = timeSeriesPosition
 *         else:
 *             logEvent("ERROR! Wavetools.py: Location vector for timeSeries must have three-components",level=0)             # <<<<<<<<<<<<<<
 *             sys.exit(1)
 * 
 */
  __pyx_tuple__119 = PyTuple_Pack(1, __pyx_kp_s_ERROR_Wavetools_py_Location_vect_2); if (unlikely(!__pyx_tuple__119)) __PYX_ERR(0, 1819, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__119);
  __Pyx_GIVEREF(__pyx_tuple__119);

  /* "WaveTools.py":1820
 *         else:
 *             logEvent("ERROR! Wavetools.py: Location vector for timeSeries must have three-components",level=0)
 *             sys.exit(1)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__120 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__120)) __PYX_ERR(0, 1820, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__120);
  __Pyx_GIVEREF(__pyx_tuple__120);

  /* "WaveTools.py":1841
 *             tdata = seriesArray
 *         else:
 *             filetype = timeSeriesFile[-4:]             # <<<<<<<<<<<<<<
 *             fid = open(timeSeriesFile,"r")
 *             if (filetype !=".txt") and (filetype != ".csv"):
 */
  __pyx_slice__121 = PySlice_New(__pyx_int_neg_4, Py_None, Py_None); if (unlikely(!__pyx_slice__121)) __PYX_ERR(0, 1841, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__121);
  __Pyx_GIVEREF(__pyx_slice__121);

  /* "WaveTools.py":1845
 *             if (filetype !=".txt") and (filetype != ".csv"):
 *                 logEvent("ERROR! Wavetools.py: File %s must be given in .txt or .csv format" % (timeSeriesFile),level=0)
 *                 sys.exit(1)             # <<<<<<<<<<<<<<
 *             elif (filetype == ".csv"):
 *                 tdata = np.loadtxt(fid,skiprows=skiprows,delimiter=",")
 */
  __pyx_tuple__122 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__122)) __PYX_ERR(0, 1845, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__122);
  __Pyx_GIVEREF(__pyx_tuple__122);

  /* "WaveTools.py":1853
 *         #Checks for tseries file
 *         # Only 2 columns: time & eta
 *         ncols = len(tdata[0,:])             # <<<<<<<<<<<<<<
 *         if ncols != 2:
 *             logEvent("ERROR! Wavetools.py: Timeseries file (%s) must have only two columns [time, eta]" % (timeSeriesFile),level=0)
 */
  __pyx_slice__124 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__124)) __PYX_ERR(0, 1853, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__124);
  __Pyx_GIVEREF(__pyx_slice__124);
  __pyx_tuple__125 = PyTuple_Pack(2, __pyx_int_0, __pyx_slice__124); if (unlikely(!__pyx_tuple__125)) __PYX_ERR(0, 1853, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__125);
  __Pyx_GIVEREF(__pyx_tuple__125);

  /* "WaveTools.py":1856
 *         if ncols != 2:
 *             logEvent("ERROR! Wavetools.py: Timeseries file (%s) must have only two columns [time, eta]" % (timeSeriesFile),level=0)
 *             sys.exit(1)             # <<<<<<<<<<<<<<
 *         time_temp = tdata[:,0]
 *         self.dt = (time_temp[-1]-time_temp[0])/(len(time_temp)-1)
 */
  __pyx_tuple__126 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__126)) __PYX_ERR(0, 1856, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__126);
  __Pyx_GIVEREF(__pyx_tuple__126);

  /* "WaveTools.py":1857
 *             logEvent("ERROR! Wavetools.py: Timeseries file (%s) must have only two columns [time, eta]" % (timeSeriesFile),level=0)
 *             sys.exit(1)
 *         time_temp = tdata[:,0]             # <<<<<<<<<<<<<<
 *         self.dt = (time_temp[-1]-time_temp[0])/(len(time_temp)-1)
 * 
 */
  __pyx_slice__127 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__127)) __PYX_ERR(0, 1857, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__127);
  __Pyx_GIVEREF(__pyx_slice__127);
  __pyx_tuple__128 = PyTuple_Pack(2, __pyx_slice__127, __pyx_int_0); if (unlikely(!__pyx_tuple__128)) __PYX_ERR(0, 1857, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__128);
  __Pyx_GIVEREF(__pyx_tuple__128);

  /* "WaveTools.py":1869
 *             if time_temp[i]<=time_temp[i-1]:
 *                 logEvent("ERROR! WaveTools.py:  Found not consistent time entry between %s and %s row in %s file. Time variable must be always at the first column of the file and increasing monotonically" %(i-1,i,timeSeriesFile) )
 *                 sys.exit(1)             # <<<<<<<<<<<<<<
 *         #check if sampling rate is constant
 *             if dt_temp!=self.dt:
 */
  __pyx_tuple__129 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__129)) __PYX_ERR(0, 1869, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__129);
  __Pyx_GIVEREF(__pyx_tuple__129);

  /* "WaveTools.py":1874
 *                 doInterp = True
 *         if(doInterp):
 *             logEvent("INFO WaveTools.py: Not constant sampling rate found, proceeding to signal interpolation to a constant sampling rate",level=0)             # <<<<<<<<<<<<<<
 *             self.time = np.linspace(time_temp[0],time_temp[-1],len(time_temp))
 *             self.etaS = np.interp(self.time,time_temp,tdata[:,1])
 */
  __pyx_tuple__130 = PyTuple_Pack(1, __pyx_kp_s_INFO_WaveTools_py_Not_constant_s); if (unlikely(!__pyx_tuple__130)) __PYX_ERR(0, 1874, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__130);
  __Pyx_GIVEREF(__pyx_tuple__130);

  /* "WaveTools.py":1876
 *             logEvent("INFO WaveTools.py: Not constant sampling rate found, proceeding to signal interpolation to a constant sampling rate",level=0)
 *             self.time = np.linspace(time_temp[0],time_temp[-1],len(time_temp))
 *             self.etaS = np.interp(self.time,time_temp,tdata[:,1])             # <<<<<<<<<<<<<<
 *         else:
 *             self.time = time_temp
 */
  __pyx_slice__131 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__131)) __PYX_ERR(0, 1876, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__131);
  __Pyx_GIVEREF(__pyx_slice__131);
  __pyx_tuple__132 = PyTuple_Pack(2, __pyx_slice__131, __pyx_int_1); if (unlikely(!__pyx_tuple__132)) __PYX_ERR(0, 1876, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__132);
  __Pyx_GIVEREF(__pyx_tuple__132);

  /* "WaveTools.py":1879
 *         else:
 *             self.time = time_temp
 *             self.etaS = tdata[:,1]             # <<<<<<<<<<<<<<
 * 
 *         self.t0  = self.time[0]
 */
  __pyx_slice__133 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__133)) __PYX_ERR(0, 1879, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__133);
  __Pyx_GIVEREF(__pyx_slice__133);
  __pyx_tuple__134 = PyTuple_Pack(2, __pyx_slice__133, __pyx_int_1); if (unlikely(!__pyx_tuple__134)) __PYX_ERR(0, 1879, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__134);
  __Pyx_GIVEREF(__pyx_tuple__134);

  /* "WaveTools.py":1900
 *             Nf = self.N
 *             nfft=len(self.time)
 *             logEvent("INFO: WaveTools.py: performing a direct series decomposition")             # <<<<<<<<<<<<<<
 *             decomp = decompose_tseries(self.time,self.etaS,self.dt)
 *             self.ai = decomp[1]
 */
  __pyx_tuple__135 = PyTuple_Pack(1, __pyx_kp_s_INFO_WaveTools_py_performing_a_d); if (unlikely(!__pyx_tuple__135)) __PYX_ERR(0, 1900, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__135);
  __Pyx_GIVEREF(__pyx_tuple__135);

  /* "WaveTools.py":1914
 *             self.kDir = np.zeros((len(self.ki),3),"d")
 *             for ii in range(len(self.ki)):
 *                 self.kDir[ii,:] = self.ki[ii]*self.waveDir[:]             # <<<<<<<<<<<<<<
 * 
 *             for ij in range(self.Nf):
 */
  __pyx_slice__136 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__136)) __PYX_ERR(0, 1914, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__136);
  __Pyx_GIVEREF(__pyx_slice__136);
  __pyx_slice__137 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__137)) __PYX_ERR(0, 1914, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__137);
  __Pyx_GIVEREF(__pyx_slice__137);

  /* "WaveTools.py":1922
 *                 self.ai_c[ij] = self.ai[ij]
 *                 self.phi_c[ij] = self.phi[ij]
 *                 for kk in range(3):             # <<<<<<<<<<<<<<
 *                     self.kDir_c[3*ij+kk] = self.kDir[ij,kk]
 *             self.kDir_ = self.kDir_c
 */
  __pyx_tuple__138 = PyTuple_Pack(1, __pyx_int_3); if (unlikely(!__pyx_tuple__138)) __PYX_ERR(0, 1922, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__138);
  __Pyx_GIVEREF(__pyx_tuple__138);

  /* "WaveTools.py":1938
 *         else:
 *             if (window_params is None):
 *                 logEvent("ERROR! WaveTools.py: Set parameters for spectral windowing. Argument window_params must be a dictionary")             # <<<<<<<<<<<<<<
 *                 sys.exit(1)
 *             try:
 */
  __pyx_tuple__139 = PyTuple_Pack(1, __pyx_kp_s_ERROR_WaveTools_py_Set_parameter); if (unlikely(!__pyx_tuple__139)) __PYX_ERR(0, 1938, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__139);
  __Pyx_GIVEREF(__pyx_tuple__139);

  /* "WaveTools.py":1939
 *             if (window_params is None):
 *                 logEvent("ERROR! WaveTools.py: Set parameters for spectral windowing. Argument window_params must be a dictionary")
 *                 sys.exit(1)             # <<<<<<<<<<<<<<
 *             try:
 *                 self.Nwaves = window_params["Nwaves"]
 */
  __pyx_tuple__140 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__140)) __PYX_ERR(0, 1939, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__140);
  __Pyx_GIVEREF(__pyx_tuple__140);

  /* "WaveTools.py":1943
 *                 self.Nwaves = window_params["Nwaves"]
 *             except:
 *                 logEvent("ERROR! WaveTools.py: Dictionary key 'Nwaves' (waves per window) not found in window_params dictionary")             # <<<<<<<<<<<<<<
 *                 sys.exit(1)
 * 
 */
  __pyx_tuple__141 = PyTuple_Pack(1, __pyx_kp_s_ERROR_WaveTools_py_Dictionary_ke); if (unlikely(!__pyx_tuple__141)) __PYX_ERR(0, 1943, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__141);
  __Pyx_GIVEREF(__pyx_tuple__141);

  /* "WaveTools.py":1944
 *             except:
 *                 logEvent("ERROR! WaveTools.py: Dictionary key 'Nwaves' (waves per window) not found in window_params dictionary")
 *                 sys.exit(1)             # <<<<<<<<<<<<<<
 * 
 *             try:
 */
  __pyx_tuple__142 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__142)) __PYX_ERR(0, 1944, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__142);
  __Pyx_GIVEREF(__pyx_tuple__142);

  /* "WaveTools.py":1949
 *                 self.Tm = window_params["Tm"]
 *             except:
 *                 logEvent("ERROR! WaveTools.py: Dictionary key 'Tm' (mean or characteristic wave period) not found in window_params dictionary")             # <<<<<<<<<<<<<<
 *                 sys.exit(1)
 * 
 */
  __pyx_tuple__143 = PyTuple_Pack(1, __pyx_kp_s_ERROR_WaveTools_py_Dictionary_ke_2); if (unlikely(!__pyx_tuple__143)) __PYX_ERR(0, 1949, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__143);
  __Pyx_GIVEREF(__pyx_tuple__143);

  /* "WaveTools.py":1950
 *             except:
 *                 logEvent("ERROR! WaveTools.py: Dictionary key 'Tm' (mean or characteristic wave period) not found in window_params dictionary")
 *                 sys.exit(1)             # <<<<<<<<<<<<<<
 * 
 *             try:
 */
  __pyx_tuple__144 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__144)) __PYX_ERR(0, 1950, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__144);
  __Pyx_GIVEREF(__pyx_tuple__144);

  /* "WaveTools.py":1955
 *                 windowName = window_params["Window"]
 *             except:
 *                 logEvent("ERROR! WaveTools.py: Dictionary key 'Window' (window function type) not found in window_params dictionary")             # <<<<<<<<<<<<<<
 *                 sys.exit(1)
 * 
 */
  __pyx_tuple__145 = PyTuple_Pack(1, __pyx_kp_s_ERROR_WaveTools_py_Dictionary_ke_3); if (unlikely(!__pyx_tuple__145)) __PYX_ERR(0, 1955, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__145);
  __Pyx_GIVEREF(__pyx_tuple__145);

  /* "WaveTools.py":1956
 *             except:
 *                 logEvent("ERROR! WaveTools.py: Dictionary key 'Window' (window function type) not found in window_params dictionary")
 *                 sys.exit(1)             # <<<<<<<<<<<<<<
 * 
 *             if(self.Nwaves > 0.5*self.tlength / self.Tm):
 */
  __pyx_tuple__146 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__146)) __PYX_ERR(0, 1956, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__146);
  __Pyx_GIVEREF(__pyx_tuple__146);

  /* "WaveTools.py":1959
 * 
 *             if(self.Nwaves > 0.5*self.tlength / self.Tm):
 *                 logEvent("ERROR! WaveTools.py: Reconstruction is expected to have two windows or more. Plese reduce the number of waves per window or switch to direct decomposition )")             # <<<<<<<<<<<<<<
 *                 sys.exit(1)
 * 
 */
  __pyx_tuple__147 = PyTuple_Pack(1, __pyx_kp_s_ERROR_WaveTools_py_Reconstructio); if (unlikely(!__pyx_tuple__147)) __PYX_ERR(0, 1959, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__147);
  __Pyx_GIVEREF(__pyx_tuple__147);

  /* "WaveTools.py":1960
 *             if(self.Nwaves > 0.5*self.tlength / self.Tm):
 *                 logEvent("ERROR! WaveTools.py: Reconstruction is expected to have two windows or more. Plese reduce the number of waves per window or switch to direct decomposition )")
 *                 sys.exit(1)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__148 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__148)) __PYX_ERR(0, 1960, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__148);
  __Pyx_GIVEREF(__pyx_tuple__148);

  /* "WaveTools.py":1966
 *             validWindows = [costap, tophat]
 *             wind_filt =  loadExistingFunction(windowName, validWindows)
 *             logEvent("INFO WaveTools.py: performing series decomposition with spectral windows")             # <<<<<<<<<<<<<<
 *             # Portion of overlap, compared to window time
 *             try:
 */
  __pyx_tuple__149 = PyTuple_Pack(1, __pyx_kp_s_INFO_WaveTools_py_performing_ser); if (unlikely(!__pyx_tuple__149)) __PYX_ERR(0, 1966, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__149);
  __Pyx_GIVEREF(__pyx_tuple__149);

  /* "WaveTools.py":1972
 *             except:
 *                 self.overlap = 0.7
 *                 logEvent("INFO WaveTools.py: Overlap entry in window_params dictionary not found. Setting default value of 0.7 (70% of the window length)")             # <<<<<<<<<<<<<<
 * 
 *             try:
 */
  __pyx_tuple__150 = PyTuple_Pack(1, __pyx_kp_s_INFO_WaveTools_py_Overlap_entry); if (unlikely(!__pyx_tuple__150)) __PYX_ERR(0, 1972, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__150);
  __Pyx_GIVEREF(__pyx_tuple__150);

  /* "WaveTools.py":1978
 *             except:
 *                 self.cutoff= 0.1
 *                 logEvent("INFO WaveTools.py: Cutoff entry in window_params dictionary not found. Setting default value of 0.1 (1/10 of the window length)")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__151 = PyTuple_Pack(1, __pyx_kp_s_INFO_WaveTools_py_Cutoff_entry_i); if (unlikely(!__pyx_tuple__151)) __PYX_ERR(0, 1978, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__151);
  __Pyx_GIVEREF(__pyx_tuple__151);

  /* "WaveTools.py":1986
 *             self.handover = max(1.1 *self.cutoff,  self.overlap / 2.)
 *             if (self.handover > 0.9 * self.overlap):
 *                 logEvent("ERROR! Wavetools.py: Window handover is not optimal as the cutoff is too close to the overlap. Decrease cutoff or increase overlap")             # <<<<<<<<<<<<<<
 *                 sys.exit(1)
 *             self.Twindow =  self.Tm * self.Nwaves            # setting the window duration (approx.). Twindow = Tmean * Nwaves
 */
  __pyx_tuple__152 = PyTuple_Pack(1, __pyx_kp_s_ERROR_Wavetools_py_Window_handov); if (unlikely(!__pyx_tuple__152)) __PYX_ERR(0, 1986, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__152);
  __Pyx_GIVEREF(__pyx_tuple__152);

  /* "WaveTools.py":1987
 *             if (self.handover > 0.9 * self.overlap):
 *                 logEvent("ERROR! Wavetools.py: Window handover is not optimal as the cutoff is too close to the overlap. Decrease cutoff or increase overlap")
 *                 sys.exit(1)             # <<<<<<<<<<<<<<
 *             self.Twindow =  self.Tm * self.Nwaves            # setting the window duration (approx.). Twindow = Tmean * Nwaves
 *             self.Toverlap = self.overlap * self.Twindow
 */
  __pyx_tuple__153 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__153)) __PYX_ERR(0, 1987, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__153);
  __Pyx_GIVEREF(__pyx_tuple__153);

  /* "WaveTools.py":1999
 * # Setting where each window starts and ends
 *             for jj in range(self.Nwindows):
 *                 span = np.zeros(2,"d")             # <<<<<<<<<<<<<<
 *                 tfirst = self.time[0] + self.Twindow
 *                 tlast = self.time[-1] - self.Twindow
 */
  __pyx_tuple__154 = PyTuple_Pack(2, __pyx_int_2, __pyx_n_s_d); if (unlikely(!__pyx_tuple__154)) __PYX_ERR(0, 1999, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__154);
  __Pyx_GIVEREF(__pyx_tuple__154);

  /* "WaveTools.py":2023
 * 
 *             for wind in self.windows_rec:
 *                 nfft=len(wind[:,0])             # <<<<<<<<<<<<<<
 *                 wind[:,1] *=wind_filt(nfft,cutoff = self.cutoff)
 *                 decomp = decompose_tseries(wind[:,0],wind[:,1],self.dt)
 */
  __pyx_slice__155 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__155)) __PYX_ERR(0, 2023, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__155);
  __Pyx_GIVEREF(__pyx_slice__155);
  __pyx_tuple__156 = PyTuple_Pack(2, __pyx_slice__155, __pyx_int_0); if (unlikely(!__pyx_tuple__156)) __PYX_ERR(0, 2023, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__156);
  __Pyx_GIVEREF(__pyx_tuple__156);

  /* "WaveTools.py":2024
 *             for wind in self.windows_rec:
 *                 nfft=len(wind[:,0])
 *                 wind[:,1] *=wind_filt(nfft,cutoff = self.cutoff)             # <<<<<<<<<<<<<<
 *                 decomp = decompose_tseries(wind[:,0],wind[:,1],self.dt)
 *                 self.N = min(self.N, len(decomp[0]))
 */
  __pyx_slice__157 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__157)) __PYX_ERR(0, 2024, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__157);
  __Pyx_GIVEREF(__pyx_slice__157);
  __pyx_tuple__158 = PyTuple_Pack(2, __pyx_slice__157, __pyx_int_1); if (unlikely(!__pyx_tuple__158)) __PYX_ERR(0, 2024, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__158);
  __Pyx_GIVEREF(__pyx_tuple__158);

  /* "WaveTools.py":2025
 *                 nfft=len(wind[:,0])
 *                 wind[:,1] *=wind_filt(nfft,cutoff = self.cutoff)
 *                 decomp = decompose_tseries(wind[:,0],wind[:,1],self.dt)             # <<<<<<<<<<<<<<
 *                 self.N = min(self.N, len(decomp[0]))
 *                 Nftemp = self.N
 */
  __pyx_slice__159 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__159)) __PYX_ERR(0, 2025, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__159);
  __Pyx_GIVEREF(__pyx_slice__159);
  __pyx_tuple__160 = PyTuple_Pack(2, __pyx_slice__159, __pyx_int_0); if (unlikely(!__pyx_tuple__160)) __PYX_ERR(0, 2025, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__160);
  __Pyx_GIVEREF(__pyx_tuple__160);
  __pyx_slice__161 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__161)) __PYX_ERR(0, 2025, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__161);
  __Pyx_GIVEREF(__pyx_slice__161);
  __pyx_tuple__162 = PyTuple_Pack(2, __pyx_slice__161, __pyx_int_1); if (unlikely(!__pyx_tuple__162)) __PYX_ERR(0, 2025, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__162);
  __Pyx_GIVEREF(__pyx_tuple__162);

  /* "WaveTools.py":2046
 *                 Tlag = np.zeros(ki.shape,)
 *                 for ii in range(len(ki)):
 *                     kDir[ii,:] = ki[ii]*self.waveDir[:]             # <<<<<<<<<<<<<<
 *                     Tlag[ii] = sum(Lgen[:]*kDir[ii,:])/decomp[0][ii]
 *                 self.Tlag = max(Tlag)
 */
  __pyx_slice__163 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__163)) __PYX_ERR(0, 2046, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__163);
  __Pyx_GIVEREF(__pyx_slice__163);
  __pyx_slice__164 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__164)) __PYX_ERR(0, 2046, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__164);
  __Pyx_GIVEREF(__pyx_slice__164);

  /* "WaveTools.py":2047
 *                 for ii in range(len(ki)):
 *                     kDir[ii,:] = ki[ii]*self.waveDir[:]
 *                     Tlag[ii] = sum(Lgen[:]*kDir[ii,:])/decomp[0][ii]             # <<<<<<<<<<<<<<
 *                 self.Tlag = max(Tlag)
 *                 if self.Tlag > (self.Toverlap/2. - self.cutoff*self.Twindow):
 */
  __pyx_slice__165 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__165)) __PYX_ERR(0, 2047, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__165);
  __Pyx_GIVEREF(__pyx_slice__165);
  __pyx_slice__166 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__166)) __PYX_ERR(0, 2047, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__166);
  __Pyx_GIVEREF(__pyx_slice__166);

  /* "WaveTools.py":2050
 *                 self.Tlag = max(Tlag)
 *                 if self.Tlag > (self.Toverlap/2. - self.cutoff*self.Twindow):
 *                     logEvent("ERROR!: WaveTools.py: Relaxation zone lenght does not allow for spatial coherency in the windows method.Please a) increase number of waves per window or b) increase overlap or c) decrease lenght of the relaxation zone")             # <<<<<<<<<<<<<<
 *                     sys.exit(1)
 *                 decomp.append(kDir)
 */
  __pyx_tuple__167 = PyTuple_Pack(1, __pyx_kp_s_ERROR_WaveTools_py_Relaxation_zo); if (unlikely(!__pyx_tuple__167)) __PYX_ERR(0, 2050, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__167);
  __Pyx_GIVEREF(__pyx_tuple__167);

  /* "WaveTools.py":2051
 *                 if self.Tlag > (self.Toverlap/2. - self.cutoff*self.Twindow):
 *                     logEvent("ERROR!: WaveTools.py: Relaxation zone lenght does not allow for spatial coherency in the windows method.Please a) increase number of waves per window or b) increase overlap or c) decrease lenght of the relaxation zone")
 *                     sys.exit(1)             # <<<<<<<<<<<<<<
 *                 decomp.append(kDir)
 *                 decomp.append(ki)
 */
  __pyx_tuple__168 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__168)) __PYX_ERR(0, 2051, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__168);
  __Pyx_GIVEREF(__pyx_tuple__168);

  /* "WaveTools.py":2062
 *             for ii in range(len(self.windows_handover)):
 *                 self.whand_c[ii] = self.windows_handover[ii]
 *                 self.T0[ii] = self.windows_rec[ii][0,0]             # <<<<<<<<<<<<<<
 *             self.whand_ = self.whand_c
 *             self.T0_ = self.T0
 */
  __pyx_tuple__169 = PyTuple_Pack(2, __pyx_int_0, __pyx_int_0); if (unlikely(!__pyx_tuple__169)) __PYX_ERR(0, 2062, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__169);
  __Pyx_GIVEREF(__pyx_tuple__169);

  /* "WaveTools.py":2074
 *                         self.ai_c[ij] = self.decompose_window[ii][1][jj]
 *                         self.phi_c[ij] =self.decompose_window[ii][2][jj]
 *                         for kk in range(3):             # <<<<<<<<<<<<<<
 *                             self.kDir_c[3*ij+kk] = self.decompose_window[ii][4][jj,kk]
 *                     else:
 */
  __pyx_tuple__170 = PyTuple_Pack(1, __pyx_int_3); if (unlikely(!__pyx_tuple__170)) __PYX_ERR(0, 2074, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__170);
  __Pyx_GIVEREF(__pyx_tuple__170);

  /* "WaveTools.py":2082
 *                         self.ai_c[ij] = 0.
 *                         self.phi_c[ij] =0.
 *                         for kk in range(3):             # <<<<<<<<<<<<<<
 *                             self.kDir_c[3*ij+kk] = 1.
 * 
 */
  __pyx_tuple__171 = PyTuple_Pack(1, __pyx_int_3); if (unlikely(!__pyx_tuple__171)) __PYX_ERR(0, 2082, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__171);
  __Pyx_GIVEREF(__pyx_tuple__171);

  /* "WaveTools.py":2097
 * 
 * 
 *         for ii in range(3):             # <<<<<<<<<<<<<<
 *             self.x0_c[ii] = self.x0[ii]
 *             self.waveDir_c[ii] = self.waveDir[ii]
 */
  __pyx_tuple__172 = PyTuple_Pack(1, __pyx_int_3); if (unlikely(!__pyx_tuple__172)) __PYX_ERR(0, 2097, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__172);
  __Pyx_GIVEREF(__pyx_tuple__172);

  /* "WaveTools.py":2167
 *             xx[ii] = x[ii]
 *             cppU[ii] = 0.
 *         U = np.zeros(3,)             # <<<<<<<<<<<<<<
 *         self._cpp_uDirect(cppU,xx,t)
 *         U[0] = cppU[0]
 */
  __pyx_tuple__173 = PyTuple_Pack(1, __pyx_int_3); if (unlikely(!__pyx_tuple__173)) __PYX_ERR(0, 2167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__173);
  __Pyx_GIVEREF(__pyx_tuple__173);

  /* "WaveTools.py":2242
 *             xx[ii] = x[ii]
 *             cppU[ii] = 0.
 *         U = np.zeros(3,)             # <<<<<<<<<<<<<<
 *         self._cpp_uWindow(cppU,xx,t)
 *         U[0] = cppU[0]
 */
  __pyx_tuple__174 = PyTuple_Pack(1, __pyx_int_3); if (unlikely(!__pyx_tuple__174)) __PYX_ERR(0, 2242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__174);
  __Pyx_GIVEREF(__pyx_tuple__174);

  /* "WaveTools.py":2345
 *         self.series = RW.writeEtaSeries(Tstart,Tend,x0,fname,4.*Lgen)
 *         self.cutoff = max(0.2*self.Tp , cutoff_win*Nwaves*Tp)
 *         duration = (self.series[-1,0]-self.series[0,0])             # <<<<<<<<<<<<<<
 *         self.cutoff  = self.cutoff / duration
 *         Tm = self.Tp/1.1
 */
  __pyx_tuple__175 = PyTuple_Pack(2, __pyx_int_neg_1, __pyx_int_0); if (unlikely(!__pyx_tuple__175)) __PYX_ERR(0, 2345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__175);
  __Pyx_GIVEREF(__pyx_tuple__175);
  __pyx_tuple__176 = PyTuple_Pack(2, __pyx_int_0, __pyx_int_0); if (unlikely(!__pyx_tuple__176)) __PYX_ERR(0, 2345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__176);
  __Pyx_GIVEREF(__pyx_tuple__176);

  /* "WaveTools.py":2350
 * 
 *             #Checking if there are enough windows
 *         Nwaves_tot = round((self.series[-1,0]-self.series[0,0])/Tm)             # <<<<<<<<<<<<<<
 *         Nwaves = min(Nwaves,Nwaves_tot)
 *         self.Nwind = int(Nwaves_tot/Nwaves)
 */
  __pyx_tuple__177 = PyTuple_Pack(2, __pyx_int_neg_1, __pyx_int_0); if (unlikely(!__pyx_tuple__177)) __PYX_ERR(0, 2350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__177);
  __Pyx_GIVEREF(__pyx_tuple__177);
  __pyx_tuple__178 = PyTuple_Pack(2, __pyx_int_0, __pyx_int_0); if (unlikely(!__pyx_tuple__178)) __PYX_ERR(0, 2350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__178);
  __Pyx_GIVEREF(__pyx_tuple__178);

  /* "WaveTools.py":2355
 *         self.rec_d = False
 *         if self.Nwind < 3:
 *             logEvent("ERROR!: WaveTools.py: Found too few windows in RandomWavesFast. Consider increasing Tend (this is independent from the duration of the simulation)")             # <<<<<<<<<<<<<<
 *             sys.exit(1)
 * 
 */
  __pyx_tuple__179 = PyTuple_Pack(1, __pyx_kp_s_ERROR_WaveTools_py_Found_too_few); if (unlikely(!__pyx_tuple__179)) __PYX_ERR(0, 2355, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__179);
  __Pyx_GIVEREF(__pyx_tuple__179);

  /* "WaveTools.py":2356
 *         if self.Nwind < 3:
 *             logEvent("ERROR!: WaveTools.py: Found too few windows in RandomWavesFast. Consider increasing Tend (this is independent from the duration of the simulation)")
 *             sys.exit(1)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__180 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__180)) __PYX_ERR(0, 2356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__180);
  __Pyx_GIVEREF(__pyx_tuple__180);

  /* "WaveTools.py":2385
 *         #Checking accuracy of the approximation
 *         cut = 2.* self.cutoff * duration
 *         ts = self.series[0,0]+cut             # <<<<<<<<<<<<<<
 *         te = self.series[-1,0]-cut
 *         i1 = np.where(self.series[:,0]>ts)[0][0]
 */
  __pyx_tuple__181 = PyTuple_Pack(2, __pyx_int_0, __pyx_int_0); if (unlikely(!__pyx_tuple__181)) __PYX_ERR(0, 2385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__181);
  __Pyx_GIVEREF(__pyx_tuple__181);

  /* "WaveTools.py":2386
 *         cut = 2.* self.cutoff * duration
 *         ts = self.series[0,0]+cut
 *         te = self.series[-1,0]-cut             # <<<<<<<<<<<<<<
 *         i1 = np.where(self.series[:,0]>ts)[0][0]
 *         i2 = np.where(self.series[:,0]<te)[0][-1]
 */
  __pyx_tuple__182 = PyTuple_Pack(2, __pyx_int_neg_1, __pyx_int_0); if (unlikely(!__pyx_tuple__182)) __PYX_ERR(0, 2386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__182);
  __Pyx_GIVEREF(__pyx_tuple__182);

  /* "WaveTools.py":2387
 *         ts = self.series[0,0]+cut
 *         te = self.series[-1,0]-cut
 *         i1 = np.where(self.series[:,0]>ts)[0][0]             # <<<<<<<<<<<<<<
 *         i2 = np.where(self.series[:,0]<te)[0][-1]
 *         errors = np.zeros(len(self.series),)
 */
  __pyx_slice__183 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__183)) __PYX_ERR(0, 2387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__183);
  __Pyx_GIVEREF(__pyx_slice__183);
  __pyx_tuple__184 = PyTuple_Pack(2, __pyx_slice__183, __pyx_int_0); if (unlikely(!__pyx_tuple__184)) __PYX_ERR(0, 2387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__184);
  __Pyx_GIVEREF(__pyx_tuple__184);

  /* "WaveTools.py":2388
 *         te = self.series[-1,0]-cut
 *         i1 = np.where(self.series[:,0]>ts)[0][0]
 *         i2 = np.where(self.series[:,0]<te)[0][-1]             # <<<<<<<<<<<<<<
 *         errors = np.zeros(len(self.series),)
 *         for ii in range(i1,i2):
 */
  __pyx_slice__185 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__185)) __PYX_ERR(0, 2388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__185);
  __Pyx_GIVEREF(__pyx_slice__185);
  __pyx_tuple__186 = PyTuple_Pack(2, __pyx_slice__185, __pyx_int_0); if (unlikely(!__pyx_tuple__186)) __PYX_ERR(0, 2388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__186);
  __Pyx_GIVEREF(__pyx_tuple__186);

  /* "WaveTools.py":2392
 *         for ii in range(i1,i2):
 *             errors[ii] = abs(self.series[ii,1]-TS.eta(x0,self.series[ii,0]) )
 *         self.er1 = max(errors[:])/self.Hs             # <<<<<<<<<<<<<<
 *         if self.er1 > 0.01 and checkAcc:
 *                 logEvent("ERROR!: WaveTools.py: Found large errors (>1%) during window reconstruction at RandomWavesFast. Please a) Increase Nfreq, b) Decrease waves per window. You can set checkAcc = False if you want to proceed with these errors")
 */
  __pyx_slice__187 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__187)) __PYX_ERR(0, 2392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__187);
  __Pyx_GIVEREF(__pyx_slice__187);

  /* "WaveTools.py":2394
 *         self.er1 = max(errors[:])/self.Hs
 *         if self.er1 > 0.01 and checkAcc:
 *                 logEvent("ERROR!: WaveTools.py: Found large errors (>1%) during window reconstruction at RandomWavesFast. Please a) Increase Nfreq, b) Decrease waves per window. You can set checkAcc = False if you want to proceed with these errors")             # <<<<<<<<<<<<<<
 *                 sys.exit(1)
 * 
 */
  __pyx_tuple__188 = PyTuple_Pack(1, __pyx_kp_s_ERROR_WaveTools_py_Found_large_e); if (unlikely(!__pyx_tuple__188)) __PYX_ERR(0, 2394, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__188);
  __Pyx_GIVEREF(__pyx_tuple__188);

  /* "WaveTools.py":2395
 *         if self.er1 > 0.01 and checkAcc:
 *                 logEvent("ERROR!: WaveTools.py: Found large errors (>1%) during window reconstruction at RandomWavesFast. Please a) Increase Nfreq, b) Decrease waves per window. You can set checkAcc = False if you want to proceed with these errors")
 *                 sys.exit(1)             # <<<<<<<<<<<<<<
 * 
 *         self.eta = TS.eta
 */
  __pyx_tuple__189 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__189)) __PYX_ERR(0, 2395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__189);
  __Pyx_GIVEREF(__pyx_tuple__189);

  /* "WaveTools.py":2408
 *         print "Number of windows=",self.Nwind
 *         print "Direct reconstruction? ",self.rec_d
 *         print "Start Time =", self.series[0,0]             # <<<<<<<<<<<<<<
 *         print "End time= ",self.series[-1,0]
 *         print "Cutoff=", self.cutoff
 */
  __pyx_tuple__190 = PyTuple_Pack(2, __pyx_int_0, __pyx_int_0); if (unlikely(!__pyx_tuple__190)) __PYX_ERR(0, 2408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__190);
  __Pyx_GIVEREF(__pyx_tuple__190);

  /* "WaveTools.py":2409
 *         print "Direct reconstruction? ",self.rec_d
 *         print "Start Time =", self.series[0,0]
 *         print "End time= ",self.series[-1,0]             # <<<<<<<<<<<<<<
 *         print "Cutoff=", self.cutoff
 *         print "Er1 =", self.er1
 */
  __pyx_tuple__191 = PyTuple_Pack(2, __pyx_int_neg_1, __pyx_int_0); if (unlikely(!__pyx_tuple__191)) __PYX_ERR(0, 2409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__191);
  __Pyx_GIVEREF(__pyx_tuple__191);

  /* "WaveTools.py":2489
 * 
 *         for ij in range(self.N):
 *             for kk in range(3):             # <<<<<<<<<<<<<<
 *                 self.kDir_c[3*ij+kk] = self.kDir[ij,kk]
 *             self.omega_c[ij] = self.omega[ij]
 */
  __pyx_tuple__192 = PyTuple_Pack(1, __pyx_int_3); if (unlikely(!__pyx_tuple__192)) __PYX_ERR(0, 2489, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__192);
  __Pyx_GIVEREF(__pyx_tuple__192);

  /* "WaveTools.py":2717
 *             2D numpy array Nx2 containing free-surface elevation in time.
 *         """
 *         if sum(Lgen[:]*self.waveDir[:])< 0 :             # <<<<<<<<<<<<<<
 *             logEvent('ERROR! Wavetools.py: Location vector of generation zone should not be opposite to the wave direction')
 *             sys.exit(1)
 */
  __pyx_slice__194 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__194)) __PYX_ERR(0, 2717, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__194);
  __Pyx_GIVEREF(__pyx_slice__194);
  __pyx_slice__195 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__195)) __PYX_ERR(0, 2717, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__195);
  __Pyx_GIVEREF(__pyx_slice__195);

  /* "WaveTools.py":2718
 *         """
 *         if sum(Lgen[:]*self.waveDir[:])< 0 :
 *             logEvent('ERROR! Wavetools.py: Location vector of generation zone should not be opposite to the wave direction')             # <<<<<<<<<<<<<<
 *             sys.exit(1)
 * 
 */
  __pyx_tuple__196 = PyTuple_Pack(1, __pyx_kp_s_ERROR_Wavetools_py_Location_vect); if (unlikely(!__pyx_tuple__196)) __PYX_ERR(0, 2718, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__196);
  __Pyx_GIVEREF(__pyx_tuple__196);

  /* "WaveTools.py":2719
 *         if sum(Lgen[:]*self.waveDir[:])< 0 :
 *             logEvent('ERROR! Wavetools.py: Location vector of generation zone should not be opposite to the wave direction')
 *             sys.exit(1)             # <<<<<<<<<<<<<<
 * 
 *         Tlag = np.zeros(len(self.omega),)
 */
  __pyx_tuple__197 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__197)) __PYX_ERR(0, 2719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__197);
  __Pyx_GIVEREF(__pyx_tuple__197);

  /* "WaveTools.py":2723
 *         Tlag = np.zeros(len(self.omega),)
 *         for j in range(len(self.omega)):
 *             Tlag[j] = sum(self.kDir[j,:]*Lgen[:])/self.omega[j]             # <<<<<<<<<<<<<<
 *         Tlag = max(Tlag)
 *         Tstart = Tstart - Tlag
 */
  __pyx_slice__198 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__198)) __PYX_ERR(0, 2723, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__198);
  __Pyx_GIVEREF(__pyx_slice__198);
  __pyx_slice__199 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__199)) __PYX_ERR(0, 2723, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__199);
  __Pyx_GIVEREF(__pyx_slice__199);

  /* "WaveTools.py":2730
 *         timelst=np.linspace(Tstart, Tend, Nseries)
 *         series = np.zeros((Nseries,2),)
 *         series[:,0] = timelst             # <<<<<<<<<<<<<<
 *         for i in range(len(timelst)):
 *             time = series[i,0]
 */
  __pyx_slice__200 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__200)) __PYX_ERR(0, 2730, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__200);
  __Pyx_GIVEREF(__pyx_slice__200);
  __pyx_tuple__201 = PyTuple_Pack(2, __pyx_slice__200, __pyx_int_0); if (unlikely(!__pyx_tuple__201)) __PYX_ERR(0, 2730, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__201);
  __Pyx_GIVEREF(__pyx_tuple__201);

  /* "WaveTools.py":2744
 *                 series[i,1] = self.eta_linear(x0,time)
 *             else:
 *                 logEvent('ERROR! Wavetools.pyx: Argument mode in RandomNLWaves.writeEtaSeries should be "all", "setup", "short", "long" or "linear"')             # <<<<<<<<<<<<<<
 *                 sys.exit(1)
 *         delimiter =" "
 */
  __pyx_tuple__202 = PyTuple_Pack(1, __pyx_kp_s_ERROR_Wavetools_pyx_Argument_mod); if (unlikely(!__pyx_tuple__202)) __PYX_ERR(0, 2744, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__202);
  __Pyx_GIVEREF(__pyx_tuple__202);

  /* "WaveTools.py":2745
 *             else:
 *                 logEvent('ERROR! Wavetools.pyx: Argument mode in RandomNLWaves.writeEtaSeries should be "all", "setup", "short", "long" or "linear"')
 *                 sys.exit(1)             # <<<<<<<<<<<<<<
 *         delimiter =" "
 *         if fname[-4:]==".csv":
 */
  __pyx_tuple__203 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__203)) __PYX_ERR(0, 2745, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__203);
  __Pyx_GIVEREF(__pyx_tuple__203);

  /* "WaveTools.py":2747
 *                 sys.exit(1)
 *         delimiter =" "
 *         if fname[-4:]==".csv":             # <<<<<<<<<<<<<<
 *             delimiter = ","
 *         np.savetxt(fname,series,delimiter=delimiter)
 */
  __pyx_slice__205 = PySlice_New(__pyx_int_neg_4, Py_None, Py_None); if (unlikely(!__pyx_slice__205)) __PYX_ERR(0, 2747, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__205);
  __Pyx_GIVEREF(__pyx_slice__205);

  /* "WaveTools.py":2773
 *         """
 * 
 *         logEvent("ERROR! Wavetools.py: eta and u functions not available for this class. Please use RandomNLWavesFast for generating random waves with nonlinear correction",0)             # <<<<<<<<<<<<<<
 *         sys.exit(1)
 * 
 */
  __pyx_tuple__206 = PyTuple_Pack(2, __pyx_kp_s_ERROR_Wavetools_py_eta_and_u_fun, __pyx_int_0); if (unlikely(!__pyx_tuple__206)) __PYX_ERR(0, 2773, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__206);
  __Pyx_GIVEREF(__pyx_tuple__206);

  /* "WaveTools.py":2774
 * 
 *         logEvent("ERROR! Wavetools.py: eta and u functions not available for this class. Please use RandomNLWavesFast for generating random waves with nonlinear correction",0)
 *         sys.exit(1)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__207 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__207)) __PYX_ERR(0, 2774, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__207);
  __Pyx_GIVEREF(__pyx_tuple__207);

  /* "WaveTools.py":2866
 *             dt = periods[ii]/50.
 *             series = aRN.writeEtaSeries(Tstart,Tend,dt,x0,fname,mode,False,Lgen)
 *             Tstart_temp = series[0,0]             # <<<<<<<<<<<<<<
 *             cutoff = 0.2*periods[ii]/(Tend-Tstart_temp)
 * 
 */
  __pyx_tuple__208 = PyTuple_Pack(2, __pyx_int_0, __pyx_int_0); if (unlikely(!__pyx_tuple__208)) __PYX_ERR(0, 2866, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__208);
  __Pyx_GIVEREF(__pyx_tuple__208);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":218
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
  __pyx_tuple__209 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_C_contiguous); if (unlikely(!__pyx_tuple__209)) __PYX_ERR(2, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__209);
  __Pyx_GIVEREF(__pyx_tuple__209);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":222
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
  __pyx_tuple__210 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_Fortran_contiguou); if (unlikely(!__pyx_tuple__210)) __PYX_ERR(2, 222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__210);
  __Pyx_GIVEREF(__pyx_tuple__210);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":259
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
  __pyx_tuple__211 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__211)) __PYX_ERR(2, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__211);
  __Pyx_GIVEREF(__pyx_tuple__211);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":799
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
  __pyx_tuple__212 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor); if (unlikely(!__pyx_tuple__212)) __PYX_ERR(2, 799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__212);
  __Pyx_GIVEREF(__pyx_tuple__212);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":803
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
  __pyx_tuple__213 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__213)) __PYX_ERR(2, 803, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__213);
  __Pyx_GIVEREF(__pyx_tuple__213);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":823
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
  __pyx_tuple__214 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor_2); if (unlikely(!__pyx_tuple__214)) __PYX_ERR(2, 823, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__214);
  __Pyx_GIVEREF(__pyx_tuple__214);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":989
 *         _import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
  __pyx_tuple__215 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple__215)) __PYX_ERR(2, 989, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__215);
  __Pyx_GIVEREF(__pyx_tuple__215);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":995
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
  __pyx_tuple__216 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__216)) __PYX_ERR(2, 995, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__216);
  __Pyx_GIVEREF(__pyx_tuple__216);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1001
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__217 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__217)) __PYX_ERR(2, 1001, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__217);
  __Pyx_GIVEREF(__pyx_tuple__217);

  /* "WaveTools.py":56
 * 
 * 
 * def fastcos_test(phase,sinus=False):             # <<<<<<<<<<<<<<
 *     """Fast cosine function with Taylor approximation - TO BE USED FOR TESTING"
 *     Parameters
 */
  __pyx_tuple__218 = PyTuple_Pack(2, __pyx_n_s_phase, __pyx_n_s_sinus); if (unlikely(!__pyx_tuple__218)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__218);
  __Pyx_GIVEREF(__pyx_tuple__218);
  __pyx_codeobj__219 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__218, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_tim_Programming_proteus_p, __pyx_n_s_fastcos_test, 56, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__219)) __PYX_ERR(0, 56, __pyx_L1_error)
  __pyx_tuple__220 = PyTuple_Pack(1, ((PyObject *)Py_False)); if (unlikely(!__pyx_tuple__220)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__220);
  __Pyx_GIVEREF(__pyx_tuple__220);

  /* "WaveTools.py":73
 *         phase = np.pi/2. - phase
 *     return fastcos(phase,True)
 * def fastcosh_test(k,Z,fast=True):             # <<<<<<<<<<<<<<
 *     """Fast hyperbolic cosine function with Taylor approximation - TO BE USED FOR TESTING"
 *     Parameters
 */
  __pyx_tuple__221 = PyTuple_Pack(4, __pyx_n_s_k, __pyx_n_s_Z, __pyx_n_s_fast, __pyx_n_s_xx); if (unlikely(!__pyx_tuple__221)) __PYX_ERR(0, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__221);
  __Pyx_GIVEREF(__pyx_tuple__221);
  __pyx_codeobj__222 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__221, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_tim_Programming_proteus_p, __pyx_n_s_fastcosh_test, 73, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__222)) __PYX_ERR(0, 73, __pyx_L1_error)
  __pyx_tuple__223 = PyTuple_Pack(1, ((PyObject *)Py_True)); if (unlikely(!__pyx_tuple__223)) __PYX_ERR(0, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__223);
  __Pyx_GIVEREF(__pyx_tuple__223);

  /* "WaveTools.py":89
 *     fastcosh(xx,k,Z,fast)
 *     return xx[0]
 * def fastsinh_test(k,Z,fast=True):             # <<<<<<<<<<<<<<
 *     """Fast hyperbolic sine function with Taylor approximation - TO BE USED FOR TESTING"
 *     Parameters
 */
  __pyx_tuple__224 = PyTuple_Pack(4, __pyx_n_s_k, __pyx_n_s_Z, __pyx_n_s_fast, __pyx_n_s_xx); if (unlikely(!__pyx_tuple__224)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__224);
  __Pyx_GIVEREF(__pyx_tuple__224);
  __pyx_codeobj__225 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__224, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_tim_Programming_proteus_p, __pyx_n_s_fastsinh_test, 89, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__225)) __PYX_ERR(0, 89, __pyx_L1_error)
  __pyx_tuple__226 = PyTuple_Pack(1, ((PyObject *)Py_True)); if (unlikely(!__pyx_tuple__226)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__226);
  __Pyx_GIVEREF(__pyx_tuple__226);

  /* "WaveTools.py":107
 * 
 * 
 * def coshkzd_test(k,Z,d, fast=True):             # <<<<<<<<<<<<<<
 *     """Calculation of u horizontal profile cosh(k(d+Z))/sinh(kd) using fast appoximaitons
 *     and hyp trig relation cosh(a+b) = cosha*coshb+sinha*sinhb
 */
  __pyx_tuple__227 = PyTuple_Pack(4, __pyx_n_s_k, __pyx_n_s_Z, __pyx_n_s_d, __pyx_n_s_fast); if (unlikely(!__pyx_tuple__227)) __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__227);
  __Pyx_GIVEREF(__pyx_tuple__227);
  __pyx_codeobj__228 = (PyObject*)__Pyx_PyCode_New(4, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__227, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_tim_Programming_proteus_p, __pyx_n_s_coshkzd_test, 107, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__228)) __PYX_ERR(0, 107, __pyx_L1_error)
  __pyx_tuple__229 = PyTuple_Pack(1, ((PyObject *)Py_True)); if (unlikely(!__pyx_tuple__229)) __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__229);
  __Pyx_GIVEREF(__pyx_tuple__229);

  /* "WaveTools.py":129
 *         return 0.
 * 
 * def sinhkzd_test(k,Z,d,fast=True):             # <<<<<<<<<<<<<<
 *     """Calculation of v vertical profile cosh(k(d+Z))/sinh(kd) using fast appoximaitons
 *     and hyp trig relation sinh(a+b) = sinha*coshb+cosha*sinhb
 */
  __pyx_tuple__230 = PyTuple_Pack(4, __pyx_n_s_k, __pyx_n_s_Z, __pyx_n_s_d, __pyx_n_s_fast); if (unlikely(!__pyx_tuple__230)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__230);
  __Pyx_GIVEREF(__pyx_tuple__230);
  __pyx_codeobj__231 = (PyObject*)__Pyx_PyCode_New(4, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__230, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_tim_Programming_proteus_p, __pyx_n_s_sinhkzd_test, 129, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__231)) __PYX_ERR(0, 129, __pyx_L1_error)
  __pyx_tuple__232 = PyTuple_Pack(1, ((PyObject *)Py_True)); if (unlikely(!__pyx_tuple__232)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__232);
  __Pyx_GIVEREF(__pyx_tuple__232);

  /* "WaveTools.py":152
 *         return 0.
 * 
 * def loadExistingFunction(funcName, validFunctions):             # <<<<<<<<<<<<<<
 *     """Checks if a function name is known function and returns it
 * 
 */
  __pyx_tuple__233 = PyTuple_Pack(5, __pyx_n_s_funcName, __pyx_n_s_validFunctions, __pyx_n_s_funcNames, __pyx_n_s_func, __pyx_n_s_func_ret); if (unlikely(!__pyx_tuple__233)) __PYX_ERR(0, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__233);
  __Pyx_GIVEREF(__pyx_tuple__233);
  __pyx_codeobj__234 = (PyObject*)__Pyx_PyCode_New(2, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__233, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_tim_Programming_proteus_p, __pyx_n_s_loadExistingFunction, 152, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__234)) __PYX_ERR(0, 152, __pyx_L1_error)

  /* "WaveTools.py":187
 * 
 * 
 * def setVertDir(g):             # <<<<<<<<<<<<<<
 *     """ Returns the unit vector for the vertical direction
 * 
 */
  __pyx_tuple__235 = PyTuple_Pack(1, __pyx_n_s_g); if (unlikely(!__pyx_tuple__235)) __PYX_ERR(0, 187, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__235);
  __Pyx_GIVEREF(__pyx_tuple__235);
  __pyx_codeobj__236 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__235, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_tim_Programming_proteus_p, __pyx_n_s_setVertDir, 187, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__236)) __PYX_ERR(0, 187, __pyx_L1_error)

  /* "WaveTools.py":205
 * 
 * 
 * def setDirVector(vector):             # <<<<<<<<<<<<<<
 *     """ Returns the direction of a vector in the form of a unit vector
 * 
 */
  __pyx_tuple__237 = PyTuple_Pack(1, __pyx_n_s_vector); if (unlikely(!__pyx_tuple__237)) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__237);
  __Pyx_GIVEREF(__pyx_tuple__237);
  __pyx_codeobj__238 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__237, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_tim_Programming_proteus_p, __pyx_n_s_setDirVector, 205, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__238)) __PYX_ERR(0, 205, __pyx_L1_error)

  /* "WaveTools.py":220
 *     return vector/(sqrt(vector[0]**2 + vector[1]**2 + vector[2]**2))
 * 
 * def dirCheck(v1, v2):             # <<<<<<<<<<<<<<
 *     """ Checks if two vectors are vertical raises SystemError if True
 * 
 */
  __pyx_tuple__239 = PyTuple_Pack(3, __pyx_n_s_v1, __pyx_n_s_v2, __pyx_n_s_dircheck); if (unlikely(!__pyx_tuple__239)) __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__239);
  __Pyx_GIVEREF(__pyx_tuple__239);
  __pyx_codeobj__240 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__239, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_tim_Programming_proteus_p, __pyx_n_s_dirCheck, 220, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__240)) __PYX_ERR(0, 220, __pyx_L1_error)

  /* "WaveTools.py":247
 *     else:
 *         return None
 * def reduceToIntervals(fi,df):             # <<<<<<<<<<<<<<
 *     """ Prepares the x-axis array with N elements for numerical integration
 * 
 */
  __pyx_tuple__241 = PyTuple_Pack(3, __pyx_n_s_fi, __pyx_n_s_df, __pyx_n_s_fim_tmp); if (unlikely(!__pyx_tuple__241)) __PYX_ERR(0, 247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__241);
  __Pyx_GIVEREF(__pyx_tuple__241);
  __pyx_codeobj__242 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__241, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_tim_Programming_proteus_p, __pyx_n_s_reduceToIntervals, 247, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__242)) __PYX_ERR(0, 247, __pyx_L1_error)

  /* "WaveTools.py":268
 *     fim_tmp = (0.5*(fi[1:]+fi[:-1])).tolist()
 *     return np.array([fim_tmp[0]-0.5*df]+fim_tmp+[fim_tmp[-1]+0.5*df])
 * def returnRectangles(a,x):             # <<<<<<<<<<<<<<
 *     """ Returns 2D discrete integral array using the rectangle method
 * 
 */
  __pyx_tuple__243 = PyTuple_Pack(2, __pyx_n_s_a, __pyx_n_s_x); if (unlikely(!__pyx_tuple__243)) __PYX_ERR(0, 268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__243);
  __Pyx_GIVEREF(__pyx_tuple__243);
  __pyx_codeobj__244 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__243, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_tim_Programming_proteus_p, __pyx_n_s_returnRectangles, 268, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__244)) __PYX_ERR(0, 268, __pyx_L1_error)

  /* "WaveTools.py":288
 *     """
 *     return 0.5*(a[1:]+a[:-1])*(x[1:]-x[:-1])
 * def returnRectangles3D(a,x,y):             # <<<<<<<<<<<<<<
 *     """ Returns 3D discrete integrals using the rectangle method
 * 
 */
  __pyx_tuple__245 = PyTuple_Pack(6, __pyx_n_s_a, __pyx_n_s_x, __pyx_n_s_y, __pyx_n_s_ai, __pyx_n_s_ii, __pyx_n_s_jj); if (unlikely(!__pyx_tuple__245)) __PYX_ERR(0, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__245);
  __Pyx_GIVEREF(__pyx_tuple__245);
  __pyx_codeobj__246 = (PyObject*)__Pyx_PyCode_New(3, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__245, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_tim_Programming_proteus_p, __pyx_n_s_returnRectangles3D, 288, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__246)) __PYX_ERR(0, 288, __pyx_L1_error)

  /* "WaveTools.py":315
 *         ai[:,jj] *= (x[1:]-x[:-1])
 *     return ai
 * def normIntegral(f,dom):             # <<<<<<<<<<<<<<
 *     """Returns a normalised 2D function
 * 
 */
  __pyx_tuple__247 = PyTuple_Pack(3, __pyx_n_s_f, __pyx_n_s_dom, __pyx_n_s_G0); if (unlikely(!__pyx_tuple__247)) __PYX_ERR(0, 315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__247);
  __Pyx_GIVEREF(__pyx_tuple__247);
  __pyx_codeobj__248 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__247, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_tim_Programming_proteus_p, __pyx_n_s_normIntegral, 315, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__248)) __PYX_ERR(0, 315, __pyx_L1_error)

  /* "WaveTools.py":338
 * 
 * 
 * def eta_mode(x, t, kDir, omega, phi, amplitude):             # <<<<<<<<<<<<<<
 *     """Calculates the free surface elevation for a single frequency mode
 * 
 */
  __pyx_tuple__249 = PyTuple_Pack(7, __pyx_n_s_x, __pyx_n_s_t, __pyx_n_s_kDir, __pyx_n_s_omega, __pyx_n_s_phi, __pyx_n_s_amplitude, __pyx_n_s_phase); if (unlikely(!__pyx_tuple__249)) __PYX_ERR(0, 338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__249);
  __Pyx_GIVEREF(__pyx_tuple__249);
  __pyx_codeobj__250 = (PyObject*)__Pyx_PyCode_New(6, 0, 7, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__249, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_tim_Programming_proteus_p, __pyx_n_s_eta_mode, 338, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__250)) __PYX_ERR(0, 338, __pyx_L1_error)

  /* "WaveTools.py":364
 *     phase = x[0]*kDir[0]+x[1]*kDir[1]+x[2]*kDir[2] - omega*t  + phi
 *     return amplitude*cos(phase)
 * def Udrift(amp,gAbs,c,d):             # <<<<<<<<<<<<<<
 *     """Calculates the 2nd order Stokes drift for a linear mode
 * 
 */
  __pyx_tuple__251 = PyTuple_Pack(4, __pyx_n_s_amp, __pyx_n_s_gAbs, __pyx_n_s_c, __pyx_n_s_d); if (unlikely(!__pyx_tuple__251)) __PYX_ERR(0, 364, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__251);
  __Pyx_GIVEREF(__pyx_tuple__251);
  __pyx_codeobj__252 = (PyObject*)__Pyx_PyCode_New(4, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__251, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_tim_Programming_proteus_p, __pyx_n_s_Udrift, 364, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__252)) __PYX_ERR(0, 364, __pyx_L1_error)

  /* "WaveTools.py":386
 *     return 0.5*gAbs*amp*amp/c/d
 * 
 * def  vel_mode(x,  t, kDir, kAbs,  omega,  phi,  amplitude,  mwl, depth, vDir, gAbs):             # <<<<<<<<<<<<<<
 *     """Calculates the wave velocity components for a single frequency mode
 * 
 */
  __pyx_tuple__253 = PyTuple_Pack(18, __pyx_n_s_x, __pyx_n_s_t, __pyx_n_s_kDir, __pyx_n_s_kAbs, __pyx_n_s_omega, __pyx_n_s_phi, __pyx_n_s_amplitude, __pyx_n_s_mwl, __pyx_n_s_depth, __pyx_n_s_vDir, __pyx_n_s_gAbs, __pyx_n_s_phase, __pyx_n_s_Z, __pyx_n_s_UH, __pyx_n_s_UV, __pyx_n_s_ii, __pyx_n_s_waveDir, __pyx_n_s_V); if (unlikely(!__pyx_tuple__253)) __PYX_ERR(0, 386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__253);
  __Pyx_GIVEREF(__pyx_tuple__253);
  __pyx_codeobj__254 = (PyObject*)__Pyx_PyCode_New(11, 0, 18, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__253, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_tim_Programming_proteus_p, __pyx_n_s_vel_mode, 386, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__254)) __PYX_ERR(0, 386, __pyx_L1_error)

  /* "WaveTools.py":436
 * 
 * 
 * def sigma(omega,omega0):             # <<<<<<<<<<<<<<
 *     """Calculates sigma function for JONSWAP spectrum
 * 
 */
  __pyx_tuple__255 = PyTuple_Pack(3, __pyx_n_s_omega, __pyx_n_s_omega0, __pyx_n_s_sigmaReturn); if (unlikely(!__pyx_tuple__255)) __PYX_ERR(0, 436, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__255);
  __Pyx_GIVEREF(__pyx_tuple__255);
  __pyx_codeobj__256 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__255, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_tim_Programming_proteus_p, __pyx_n_s_sigma, 436, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__256)) __PYX_ERR(0, 436, __pyx_L1_error)

  /* "WaveTools.py":456
 * 
 * 
 * def JONSWAP(f,f0,Hs,gamma=3.3,TMA=False, depth = None):             # <<<<<<<<<<<<<<
 *     """Calculates the JONSWAP frequency spectrum (Goda 2009)
 * 
 */
  __pyx_tuple__257 = PyTuple_Pack(11, __pyx_n_s_f, __pyx_n_s_f0, __pyx_n_s_Hs, __pyx_n_s_gamma, __pyx_n_s_TMA, __pyx_n_s_depth, __pyx_n_s_Tp, __pyx_n_s_bj, __pyx_n_s_r, __pyx_n_s_tma, __pyx_n_s_k); if (unlikely(!__pyx_tuple__257)) __PYX_ERR(0, 456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__257);
  __Pyx_GIVEREF(__pyx_tuple__257);
  __pyx_codeobj__258 = (PyObject*)__Pyx_PyCode_New(6, 0, 11, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__257, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_tim_Programming_proteus_p, __pyx_n_s_JONSWAP, 456, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__258)) __PYX_ERR(0, 456, __pyx_L1_error)
  __pyx_tuple__259 = PyTuple_Pack(3, ((PyObject*)__pyx_float_3_3), ((PyObject *)Py_False), ((PyObject *)Py_None)); if (unlikely(!__pyx_tuple__259)) __PYX_ERR(0, 456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__259);
  __Pyx_GIVEREF(__pyx_tuple__259);

  /* "WaveTools.py":496
 *     return tma * bj*(Hs**2)*(1./((Tp**4) *(f**5)))*np.exp(-1.25*(1./(Tp*f)**(4.)))*(gamma**r)
 * 
 * def PM_mod(f,f0,Hs):             # <<<<<<<<<<<<<<
 *     """Calculates the Pierson-Moskovitz spectrum (or Bretschneider or ISSC)
 * 
 */
  __pyx_tuple__260 = PyTuple_Pack(3, __pyx_n_s_f, __pyx_n_s_f0, __pyx_n_s_Hs); if (unlikely(!__pyx_tuple__260)) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__260);
  __Pyx_GIVEREF(__pyx_tuple__260);
  __pyx_codeobj__261 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__260, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_tim_Programming_proteus_p, __pyx_n_s_PM_mod, 496, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__261)) __PYX_ERR(0, 496, __pyx_L1_error)

  /* "WaveTools.py":520
 *     return (5.0/16.0)*Hs**2*(f0**4/f**5)*np.exp((-5.0/4.0)*(f0/f)**4)
 * 
 * def cos2s(theta,f,s=10):             # <<<<<<<<<<<<<<
 *     """Calculates the cos-2s directional spreading function
 *     see USACE - CETN-I-28 http://chl.erdc.usace.army.mil/library/publications/chetn/pdf/cetn-i-28.pdf
 */
  __pyx_tuple__262 = PyTuple_Pack(5, __pyx_n_s_theta, __pyx_n_s_f, __pyx_n_s_s, __pyx_n_s_fun, __pyx_n_s_ii); if (unlikely(!__pyx_tuple__262)) __PYX_ERR(0, 520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__262);
  __Pyx_GIVEREF(__pyx_tuple__262);
  __pyx_codeobj__263 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__262, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_tim_Programming_proteus_p, __pyx_n_s_cos2s, 520, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__263)) __PYX_ERR(0, 520, __pyx_L1_error)
  __pyx_tuple__264 = PyTuple_Pack(1, ((PyObject *)__pyx_int_10)); if (unlikely(!__pyx_tuple__264)) __PYX_ERR(0, 520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__264);
  __Pyx_GIVEREF(__pyx_tuple__264);

  /* "WaveTools.py":542
 *         fun[:,ii] = np.cos(theta/2)**(2*s)
 *     return fun
 * def mitsuyasu(theta,fi,f0,smax=10):             # <<<<<<<<<<<<<<
 *     """The cos2s wave directional spread with wave frequency dependency
 * 
 */
  __pyx_tuple__265 = PyTuple_Pack(7, __pyx_n_s_theta, __pyx_n_s_fi, __pyx_n_s_f0, __pyx_n_s_smax, __pyx_n_s_s, __pyx_n_s_ii, __pyx_n_s_fun); if (unlikely(!__pyx_tuple__265)) __PYX_ERR(0, 542, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__265);
  __Pyx_GIVEREF(__pyx_tuple__265);
  __pyx_codeobj__266 = (PyObject*)__Pyx_PyCode_New(4, 0, 7, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__265, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_tim_Programming_proteus_p, __pyx_n_s_mitsuyasu, 542, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__266)) __PYX_ERR(0, 542, __pyx_L1_error)
  __pyx_tuple__267 = PyTuple_Pack(1, ((PyObject *)__pyx_int_10)); if (unlikely(!__pyx_tuple__267)) __PYX_ERR(0, 542, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__267);
  __Pyx_GIVEREF(__pyx_tuple__267);

  /* "WaveTools.py":576
 * 
 * 
 * def dispersion(w,d, g = 9.81,niter = 1000):             # <<<<<<<<<<<<<<
 *     """Calculates the wave number for single or multiple frequencies using linear dispersion relation.
 * 
 */
  __pyx_tuple__268 = PyTuple_Pack(7, __pyx_n_s_w, __pyx_n_s_d, __pyx_n_s_g, __pyx_n_s_niter, __pyx_n_s_w_aux, __pyx_n_s_K, __pyx_n_s_jj); if (unlikely(!__pyx_tuple__268)) __PYX_ERR(0, 576, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__268);
  __Pyx_GIVEREF(__pyx_tuple__268);
  __pyx_codeobj__269 = (PyObject*)__Pyx_PyCode_New(4, 0, 7, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__268, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_tim_Programming_proteus_p, __pyx_n_s_dispersion, 576, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__269)) __PYX_ERR(0, 576, __pyx_L1_error)
  __pyx_tuple__270 = PyTuple_Pack(2, ((PyObject*)__pyx_float_9_81), ((PyObject *)__pyx_int_1000)); if (unlikely(!__pyx_tuple__270)) __PYX_ERR(0, 576, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__270);
  __Pyx_GIVEREF(__pyx_tuple__270);

  /* "WaveTools.py":605
 * 
 * 
 * def tophat(l,cutoff):             # <<<<<<<<<<<<<<
 *     """ Calculates and returns a top hat filter array
 * 
 */
  __pyx_tuple__271 = PyTuple_Pack(4, __pyx_n_s_l, __pyx_n_s_cutoff, __pyx_n_s_a, __pyx_n_s_cut); if (unlikely(!__pyx_tuple__271)) __PYX_ERR(0, 605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__271);
  __Pyx_GIVEREF(__pyx_tuple__271);
  __pyx_codeobj__272 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__271, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_tim_Programming_proteus_p, __pyx_n_s_tophat, 605, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__272)) __PYX_ERR(0, 605, __pyx_L1_error)

  /* "WaveTools.py":625
 *     return a
 * 
 * def costap(l,cutoff=0.1):             # <<<<<<<<<<<<<<
 *     """ Calculates and returns a top hat filter array
 * 
 */
  __pyx_tuple__273 = PyTuple_Pack(5, __pyx_n_s_l, __pyx_n_s_cutoff, __pyx_n_s_npoints, __pyx_n_s_wind, __pyx_n_s_k); if (unlikely(!__pyx_tuple__273)) __PYX_ERR(0, 625, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__273);
  __Pyx_GIVEREF(__pyx_tuple__273);
  __pyx_codeobj__274 = (PyObject*)__Pyx_PyCode_New(2, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__273, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_tim_Programming_proteus_p, __pyx_n_s_costap, 625, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__274)) __PYX_ERR(0, 625, __pyx_L1_error)
  __pyx_tuple__275 = PyTuple_Pack(1, ((PyObject*)__pyx_float_0_1)); if (unlikely(!__pyx_tuple__275)) __PYX_ERR(0, 625, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__275);
  __Pyx_GIVEREF(__pyx_tuple__275);

  /* "WaveTools.py":648
 *     return wind
 * 
 * def decompose_tseries(time,eta,dt):             # <<<<<<<<<<<<<<
 *     """ Performs spectral analysis and calculates angular frequency components, amplitude, phase and mean level power
 *     of a time series with constant sampling.
 */
  __pyx_tuple__276 = PyTuple_Pack(13, __pyx_n_s_time, __pyx_n_s_eta, __pyx_n_s_dt, __pyx_n_s_nfft, __pyx_n_s_results, __pyx_n_s_fft_x, __pyx_n_s_freq, __pyx_n_s_iend, __pyx_n_s_setup, __pyx_n_s_aa, __pyx_n_s_ww, __pyx_n_s_pp, __pyx_n_s_k); if (unlikely(!__pyx_tuple__276)) __PYX_ERR(0, 648, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__276);
  __Pyx_GIVEREF(__pyx_tuple__276);
  __pyx_codeobj__277 = (PyObject*)__Pyx_PyCode_New(3, 0, 13, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__276, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_tim_Programming_proteus_p, __pyx_n_s_decompose_tseries, 648, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__277)) __PYX_ERR(0, 648, __pyx_L1_error)

  /* "WaveTools.py":708
 * 
 *             """
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *                  U,
 *                  mwl,
 */
  __pyx_tuple__278 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_U, __pyx_n_s_mwl, __pyx_n_s_rampTime); if (unlikely(!__pyx_tuple__278)) __PYX_ERR(0, 708, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__278);
  __Pyx_GIVEREF(__pyx_tuple__278);
  __pyx_codeobj__279 = (PyObject*)__Pyx_PyCode_New(4, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__278, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_tim_Programming_proteus_p, __pyx_n_s_init, 708, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__279)) __PYX_ERR(0, 708, __pyx_L1_error)
  __pyx_tuple__280 = PyTuple_Pack(1, ((PyObject*)__pyx_float_0_)); if (unlikely(!__pyx_tuple__280)) __PYX_ERR(0, 708, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__280);
  __Pyx_GIVEREF(__pyx_tuple__280);

  /* "WaveTools.py":715
 *         self.U = U
 *         self.ramp = rampTime
 *     def eta(self,x,t):             # <<<<<<<<<<<<<<
 *         """Calculates free surface elevation (SolitaryWave class)
 *         Parameters
 */
  __pyx_tuple__281 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_x, __pyx_n_s_t); if (unlikely(!__pyx_tuple__281)) __PYX_ERR(0, 715, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__281);
  __Pyx_GIVEREF(__pyx_tuple__281);
  __pyx_codeobj__282 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__281, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_tim_Programming_proteus_p, __pyx_n_s_eta, 715, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__282)) __PYX_ERR(0, 715, __pyx_L1_error)

  /* "WaveTools.py":731
 *         """
 *         return  self.mwl
 *     def u(self,x,t):             # <<<<<<<<<<<<<<
 *         """Calculates wave velocity vector (SolitaryWave class).
 *         Parameters
 */
  __pyx_tuple__283 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_x, __pyx_n_s_t); if (unlikely(!__pyx_tuple__283)) __PYX_ERR(0, 731, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__283);
  __Pyx_GIVEREF(__pyx_tuple__283);
  __pyx_codeobj__284 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__283, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_tim_Programming_proteus_p, __pyx_n_s_u, 731, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__284)) __PYX_ERR(0, 731, __pyx_L1_error)

  /* "WaveTools.py":782
 *                  g,
 *                  waveDir,
 *                  trans = np.zeros(3,"d"),             # <<<<<<<<<<<<<<
 *                  fast = True):
 * 
 */
  __pyx_tuple__285 = PyTuple_Pack(2, __pyx_int_3, __pyx_n_s_d); if (unlikely(!__pyx_tuple__285)) __PYX_ERR(0, 782, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__285);
  __Pyx_GIVEREF(__pyx_tuple__285);

  /* "WaveTools.py":801
 *         dirCheck(self.waveDir,self.vDir)
 * 
 *     def eta(self,x,t):             # <<<<<<<<<<<<<<
 *         """Calculates free surface elevation (SolitaryWave class)
 *         Parameters
 */
  __pyx_tuple__286 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_x, __pyx_n_s_t, __pyx_n_s_phase, __pyx_n_s_a1); if (unlikely(!__pyx_tuple__286)) __PYX_ERR(0, 801, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__286);
  __Pyx_GIVEREF(__pyx_tuple__286);
  __pyx_codeobj__287 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__286, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_tim_Programming_proteus_p, __pyx_n_s_eta, 801, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__287)) __PYX_ERR(0, 801, __pyx_L1_error)

  /* "WaveTools.py":819
 *         a1 = self.K*phase
 *         return  self.H*1.0/ cosh(a1)**2
 *     def u(self,x,t):             # <<<<<<<<<<<<<<
 *         """Calculates wave velocity vector (SolitaryWave class).
 *         Parameters
 */
  __pyx_tuple__288 = PyTuple_Pack(9, __pyx_n_s_self, __pyx_n_s_x, __pyx_n_s_t, __pyx_n_s_phase, __pyx_n_s_a1, __pyx_n_s_a2, __pyx_n_s_Z, __pyx_n_s_Uhorz, __pyx_n_s_Uvert); if (unlikely(!__pyx_tuple__288)) __PYX_ERR(0, 819, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__288);
  __Pyx_GIVEREF(__pyx_tuple__288);
  __pyx_codeobj__289 = (PyObject*)__Pyx_PyCode_New(3, 0, 9, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__288, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_tim_Programming_proteus_p, __pyx_n_s_u, 819, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__289)) __PYX_ERR(0, 819, __pyx_L1_error)

  /* "WaveTools.py":902
 *                  wavelength=None,
 *                  waveType="Linear",
 *                  Ycoeff = np.zeros(1000,),             # <<<<<<<<<<<<<<
 *                  Bcoeff =np.zeros(1000,),
 *                  Nf = 1000,
 */
  __pyx_tuple__290 = PyTuple_Pack(1, __pyx_int_1000); if (unlikely(!__pyx_tuple__290)) __PYX_ERR(0, 902, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__290);
  __Pyx_GIVEREF(__pyx_tuple__290);

  /* "WaveTools.py":903
 *                  waveType="Linear",
 *                  Ycoeff = np.zeros(1000,),
 *                  Bcoeff =np.zeros(1000,),             # <<<<<<<<<<<<<<
 *                  Nf = 1000,
 *                  meanVelocity = np.array([0.,0,0.]),
 */
  __pyx_tuple__291 = PyTuple_Pack(1, __pyx_int_1000); if (unlikely(!__pyx_tuple__291)) __PYX_ERR(0, 903, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__291);
  __Pyx_GIVEREF(__pyx_tuple__291);

  /* "WaveTools.py":1017
 *         __cpp_uFenton(U,x, t, self.kDir_,self.k,self.omega,self.phi0,self.amplitude,self.mwl, self.depth, self.gAbs,self.Nf, self.Bcoeff_, self.mV_,self.waveDir_,self.vDir_, self.tanhF_, self.fast)
 * 
 *     def eta(self,x,t):             # <<<<<<<<<<<<<<
 *         """Calculates free surface elevation (MonochromaticWaves class)
 *         Parameters
 */
  __pyx_tuple__292 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_x, __pyx_n_s_t, __pyx_n_s_xx); if (unlikely(!__pyx_tuple__292)) __PYX_ERR(0, 1017, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__292);
  __Pyx_GIVEREF(__pyx_tuple__292);
  __pyx_codeobj__293 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__292, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_tim_Programming_proteus_p, __pyx_n_s_eta, 1017, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__293)) __PYX_ERR(0, 1017, __pyx_L1_error)

  /* "WaveTools.py":1041
 *             return self.etaFenton(xx,t)
 * 
 *     def u(self,x,t):             # <<<<<<<<<<<<<<
 *         """Calculates wave velocity vector (MonochromaticWaves class).
 *         Parameters
 */
  __pyx_tuple__294 = PyTuple_Pack(7, __pyx_n_s_self, __pyx_n_s_x, __pyx_n_s_t, __pyx_n_s_xx, __pyx_n_s_cppU, __pyx_n_s_ii, __pyx_n_s_U); if (unlikely(!__pyx_tuple__294)) __PYX_ERR(0, 1041, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__294);
  __Pyx_GIVEREF(__pyx_tuple__294);
  __pyx_codeobj__295 = (PyObject*)__Pyx_PyCode_New(3, 0, 7, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__294, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_tim_Programming_proteus_p, __pyx_n_s_u, 1041, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__295)) __PYX_ERR(0, 1041, __pyx_L1_error)

  /* "WaveTools.py":1213
 *         return __cpp_etaRandom(x,t,self.kDir_, self.omega_,self.phi_,self.ai_, self.N, self.fast)
 * 
 *     def eta(self, x, t):             # <<<<<<<<<<<<<<
 *         """Calculates free surface elevation (RandomWaves class)
 *         Parameters
 */
  __pyx_tuple__296 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_x, __pyx_n_s_t, __pyx_n_s_xx); if (unlikely(!__pyx_tuple__296)) __PYX_ERR(0, 1213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__296);
  __Pyx_GIVEREF(__pyx_tuple__296);
  __pyx_codeobj__297 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__296, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_tim_Programming_proteus_p, __pyx_n_s_eta, 1213, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__297)) __PYX_ERR(0, 1213, __pyx_L1_error)

  /* "WaveTools.py":1237
 *         __cpp_uRandom(U, x,t,self.kDir_, self.ki_, self.omega_,self.phi_,self.ai_,self.mwl,self.depth, self.N, self.waveDir_, self.vDir_, self.tanh_, self.gAbs, self.fast)
 * 
 *     def u(self, x, t):             # <<<<<<<<<<<<<<
 *         """Calculates wave velocity vector (RandomWaves class)
 *         Parameters
 */
  __pyx_tuple__298 = PyTuple_Pack(7, __pyx_n_s_self, __pyx_n_s_x, __pyx_n_s_t, __pyx_n_s_xx, __pyx_n_s_cppU, __pyx_n_s_ii, __pyx_n_s_U); if (unlikely(!__pyx_tuple__298)) __PYX_ERR(0, 1237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__298);
  __Pyx_GIVEREF(__pyx_tuple__298);
  __pyx_codeobj__299 = (PyObject*)__Pyx_PyCode_New(3, 0, 7, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__298, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_tim_Programming_proteus_p, __pyx_n_s_u, 1237, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__299)) __PYX_ERR(0, 1237, __pyx_L1_error)

  /* "WaveTools.py":1265
 * 
 *         return U
 *     def writeEtaSeries(self,Tstart,Tend,x0,fname,Lgen= np.array([0.,0,0])):             # <<<<<<<<<<<<<<
 *         """Writes a timeseries of the free-surface elevation
 * 
 */
  __pyx_tuple__300 = PyTuple_Pack(14, __pyx_n_s_self, __pyx_n_s_Tstart, __pyx_n_s_Tend, __pyx_n_s_x0, __pyx_n_s_fname, __pyx_n_s_Lgen, __pyx_n_s_dt, __pyx_n_s_Tlag, __pyx_n_s_j, __pyx_n_s_Np, __pyx_n_s_time, __pyx_n_s_etaR, __pyx_n_s_jj, __pyx_n_s_series); if (unlikely(!__pyx_tuple__300)) __PYX_ERR(0, 1265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__300);
  __Pyx_GIVEREF(__pyx_tuple__300);
  __pyx_codeobj__301 = (PyObject*)__Pyx_PyCode_New(6, 0, 14, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__300, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_tim_Programming_proteus_p, __pyx_n_s_writeEtaSeries, 1265, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__301)) __PYX_ERR(0, 1265, __pyx_L1_error)

  /* "WaveTools.py":1455
 *         return __cpp_etaRandom(x,t,self.kDirM_, self.omegaM_,self.phiM_,self.aiM_, self.Nall,self.fast)
 * 
 *     def eta(self, x, t):             # <<<<<<<<<<<<<<
 *         """Calculates free surface elevation (RandomWaves class)
 *         Parameters
 */
  __pyx_tuple__302 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_x, __pyx_n_s_t, __pyx_n_s_xx); if (unlikely(!__pyx_tuple__302)) __PYX_ERR(0, 1455, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__302);
  __Pyx_GIVEREF(__pyx_tuple__302);
  __pyx_codeobj__303 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__302, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_tim_Programming_proteus_p, __pyx_n_s_eta, 1455, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__303)) __PYX_ERR(0, 1455, __pyx_L1_error)

  /* "WaveTools.py":1480
 *         __cpp_uDir(U, x,t,self.kDirM_, self.kiM_, self.omegaM_,self.phiM_,self.aiM_,self.mwl,self.depth, self.Nall, self.waveDirM_, self.vDir_, self.tanhM_, self.gAbs, self.fast)
 * 
 *     def u(self, x, t):             # <<<<<<<<<<<<<<
 *         """Calculates wave velocity vector (RandomWaves class)
 *         Parameters
 */
  __pyx_tuple__304 = PyTuple_Pack(7, __pyx_n_s_self, __pyx_n_s_x, __pyx_n_s_t, __pyx_n_s_xx, __pyx_n_s_cppU, __pyx_n_s_ii, __pyx_n_s_U); if (unlikely(!__pyx_tuple__304)) __PYX_ERR(0, 1480, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__304);
  __Pyx_GIVEREF(__pyx_tuple__304);
  __pyx_codeobj__305 = (PyObject*)__Pyx_PyCode_New(3, 0, 7, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__304, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_tim_Programming_proteus_p, __pyx_n_s_u, 1480, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__305)) __PYX_ERR(0, 1480, __pyx_L1_error)

  /* "WaveTools.py":1692
 *         return __cpp_etaRandom(x,t,self.kDir_, self.omega_,self.phi_,self.ai_, self.Nall, self.fast)
 * 
 *     def eta(self, x, t):             # <<<<<<<<<<<<<<
 *         """Calculates free surface elevation (RandomWaves class)
 *         Parameters
 */
  __pyx_tuple__306 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_x, __pyx_n_s_t, __pyx_n_s_xx); if (unlikely(!__pyx_tuple__306)) __PYX_ERR(0, 1692, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__306);
  __Pyx_GIVEREF(__pyx_tuple__306);
  __pyx_codeobj__307 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__306, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_tim_Programming_proteus_p, __pyx_n_s_eta, 1692, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__307)) __PYX_ERR(0, 1692, __pyx_L1_error)

  /* "WaveTools.py":1717
 *         __cpp_uDir(U, x,t,self.kDir_, self.ki_, self.omega_,self.phi_,self.ai_,self.mwl,self.depth, self.Nall, self.waveDir_, self.vDir_, self.tanh_, self.gAbs, self.fast)
 * 
 *     def u(self, x, t):             # <<<<<<<<<<<<<<
 *         """Calculates wave velocity vector (RandomWaves class)
 *         Parameters
 */
  __pyx_tuple__308 = PyTuple_Pack(7, __pyx_n_s_self, __pyx_n_s_x, __pyx_n_s_t, __pyx_n_s_xx, __pyx_n_s_cppU, __pyx_n_s_ii, __pyx_n_s_U); if (unlikely(!__pyx_tuple__308)) __PYX_ERR(0, 1717, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__308);
  __Pyx_GIVEREF(__pyx_tuple__308);
  __pyx_codeobj__309 = (PyObject*)__Pyx_PyCode_New(3, 0, 7, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__308, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_tim_Programming_proteus_p, __pyx_n_s_u, 1717, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__309)) __PYX_ERR(0, 1717, __pyx_L1_error)

  /* "WaveTools.py":2115
 *             self._cpp_u = self._cpp_uWindow
 * 
 *     def windOut(self):             # <<<<<<<<<<<<<<
 *         return {"TWindow":self.Twindow,"TOverlap":self.Toverlap,"Tlag":self.Tlag, "rec_direct":self.rec_direct}
 * 
 */
  __pyx_tuple__310 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__310)) __PYX_ERR(0, 2115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__310);
  __Pyx_GIVEREF(__pyx_tuple__310);
  __pyx_codeobj__311 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__310, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_tim_Programming_proteus_p, __pyx_n_s_windOut, 2115, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__311)) __PYX_ERR(0, 2115, __pyx_L1_error)

  /* "WaveTools.py":2124
 *         __cpp_uDirect(U,x,self.x0_,t,self.kDir_,self.ki_,self.omega_,self.phi_,self.ai_,self.mwl,self.depth,self.Nf,self.waveDir_, self.vDir_, self.tanh_, self.gAbs, self.fast)
 * 
 *     def etaDirect(self, x, t):             # <<<<<<<<<<<<<<
 * 
 *         """Calculates free surface elevation(Timeseries class-direct method
 */
  __pyx_tuple__312 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_x, __pyx_n_s_t, __pyx_n_s_xx); if (unlikely(!__pyx_tuple__312)) __PYX_ERR(0, 2124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__312);
  __Pyx_GIVEREF(__pyx_tuple__312);
  __pyx_codeobj__313 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__312, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_tim_Programming_proteus_p, __pyx_n_s_etaDirect, 2124, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__313)) __PYX_ERR(0, 2124, __pyx_L1_error)

  /* "WaveTools.py":2146
 *         return self._cpp_etaDirect(xx,t)
 * 
 *     def uDirect(self, x, t):             # <<<<<<<<<<<<<<
 *         """Calculates wave velocity vector (Timeseries class-direct method)
 *         Parameters
 */
  __pyx_tuple__314 = PyTuple_Pack(7, __pyx_n_s_self, __pyx_n_s_x, __pyx_n_s_t, __pyx_n_s_xx, __pyx_n_s_cppU, __pyx_n_s_ii, __pyx_n_s_U); if (unlikely(!__pyx_tuple__314)) __PYX_ERR(0, 2146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__314);
  __Pyx_GIVEREF(__pyx_tuple__314);
  __pyx_codeobj__315 = (PyObject*)__Pyx_PyCode_New(3, 0, 7, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__314, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_tim_Programming_proteus_p, __pyx_n_s_uDirect, 2146, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__315)) __PYX_ERR(0, 2146, __pyx_L1_error)

  /* "WaveTools.py":2175
 *         return U
 * 
 *     def findWindow(self,t):             # <<<<<<<<<<<<<<
 *         """Returns the current spectral window in TimeSeries class."
 * 
 */
  __pyx_tuple__316 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_t); if (unlikely(!__pyx_tuple__316)) __PYX_ERR(0, 2175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__316);
  __Pyx_GIVEREF(__pyx_tuple__316);
  __pyx_codeobj__317 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__316, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_tim_Programming_proteus_p, __pyx_n_s_findWindow, 2175, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__317)) __PYX_ERR(0, 2175, __pyx_L1_error)

  /* "WaveTools.py":2200
 *         __cpp_uWindow(U,x,self.x0_,t,self.T0_,self.kDir_,self.ki_,self.omega_,self.phi_,self.ai_,self.mwl,self.depth,self.Nf,Nw,self.waveDir_, self.vDir_, self.tanh_, self.gAbs, self.fast)
 * 
 *     def etaWindow(self, x, t):             # <<<<<<<<<<<<<<
 *         """Calculates free surface elevation(Timeseries class-window method
 *         Parameters
 */
  __pyx_tuple__318 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_x, __pyx_n_s_t, __pyx_n_s_xx); if (unlikely(!__pyx_tuple__318)) __PYX_ERR(0, 2200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__318);
  __Pyx_GIVEREF(__pyx_tuple__318);
  __pyx_codeobj__319 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__318, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_tim_Programming_proteus_p, __pyx_n_s_etaWindow, 2200, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__319)) __PYX_ERR(0, 2200, __pyx_L1_error)

  /* "WaveTools.py":2222
 * 
 * 
 *     def uWindow(self, x, t):             # <<<<<<<<<<<<<<
 *         """Calculates wave velocity vector (Timeseries class-window method)
 *         Parameters
 */
  __pyx_tuple__320 = PyTuple_Pack(7, __pyx_n_s_self, __pyx_n_s_x, __pyx_n_s_t, __pyx_n_s_xx, __pyx_n_s_cppU, __pyx_n_s_ii, __pyx_n_s_U); if (unlikely(!__pyx_tuple__320)) __PYX_ERR(0, 2222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__320);
  __Pyx_GIVEREF(__pyx_tuple__320);
  __pyx_codeobj__321 = (PyObject*)__Pyx_PyCode_New(3, 0, 7, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__320, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_tim_Programming_proteus_p, __pyx_n_s_uWindow, 2222, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__321)) __PYX_ERR(0, 2222, __pyx_L1_error)

  /* "WaveTools.py":2303
 *     """
 * 
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *                  Tstart,
 *                  Tend,
 */
  __pyx_tuple__322 = PyTuple_Pack(35, __pyx_n_s_self, __pyx_n_s_Tstart, __pyx_n_s_Tend, __pyx_n_s_x0, __pyx_n_s_Tp, __pyx_n_s_Hs, __pyx_n_s_mwl, __pyx_n_s_depth, __pyx_n_s_waveDir, __pyx_n_s_g, __pyx_n_s_N, __pyx_n_s_bandFactor, __pyx_n_s_spectName, __pyx_n_s_spectral_params, __pyx_n_s_phi, __pyx_n_s_Lgen, __pyx_n_s_Nwaves, __pyx_n_s_Nfreq, __pyx_n_s_checkAcc, __pyx_n_s_fast, __pyx_n_s_RW, __pyx_n_s_cutoff_win, __pyx_n_s_overl, __pyx_n_s_fname, __pyx_n_s_duration, __pyx_n_s_Tm, __pyx_n_s_Nwaves_tot, __pyx_n_s_TS, __pyx_n_s_cut, __pyx_n_s_ts, __pyx_n_s_te, __pyx_n_s_i1, __pyx_n_s_i2, __pyx_n_s_errors, __pyx_n_s_ii); if (unlikely(!__pyx_tuple__322)) __PYX_ERR(0, 2303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__322);
  __Pyx_GIVEREF(__pyx_tuple__322);
  __pyx_codeobj__323 = (PyObject*)__Pyx_PyCode_New(20, 0, 35, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__322, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_tim_Programming_proteus_p, __pyx_n_s_init, 2303, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__323)) __PYX_ERR(0, 2303, __pyx_L1_error)

  /* "WaveTools.py":2401
 *         self.windOut = TS.windOut
 * 
 *     def printOut(self):             # <<<<<<<<<<<<<<
 *         """Prints some properties of the time series - ONLY FOR TESTING
 * 
 */
  __pyx_tuple__324 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__324)) __PYX_ERR(0, 2401, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__324);
  __Pyx_GIVEREF(__pyx_tuple__324);
  __pyx_codeobj__325 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__324, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_tim_Programming_proteus_p, __pyx_n_s_printOut, 2401, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__325)) __PYX_ERR(0, 2401, __pyx_L1_error)

  /* "WaveTools.py":2510
 *     def _cpp_eta_2ndOrder(self,x,t):
 *         return __cpp_eta2nd(x,t,self.kDir_,self.ki_,self.omega_,self.phi_,self.ai_,self.N,self.sinhKd_,self.tanhKd_, self.fast)
 *     def eta_2ndOrder(self,x,t):             # <<<<<<<<<<<<<<
 *         """Calculates the free surface elevation for 2nd-order terms
 * 
 */
  __pyx_tuple__326 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_x, __pyx_n_s_t, __pyx_n_s_xx); if (unlikely(!__pyx_tuple__326)) __PYX_ERR(0, 2510, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__326);
  __Pyx_GIVEREF(__pyx_tuple__326);
  __pyx_codeobj__327 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__326, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_tim_Programming_proteus_p, __pyx_n_s_eta_2ndOrder, 2510, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__327)) __PYX_ERR(0, 2510, __pyx_L1_error)

  /* "WaveTools.py":2548
 * 
 *     #higher harmonics
 *     def eta_short(self,x,t):             # <<<<<<<<<<<<<<
 *         """Calculates the free surface elevation for higher-order terms
 * 
 */
  __pyx_tuple__328 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_x, __pyx_n_s_t, __pyx_n_s_xx); if (unlikely(!__pyx_tuple__328)) __PYX_ERR(0, 2548, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__328);
  __Pyx_GIVEREF(__pyx_tuple__328);
  __pyx_codeobj__329 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__328, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_tim_Programming_proteus_p, __pyx_n_s_eta_short, 2548, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__329)) __PYX_ERR(0, 2548, __pyx_L1_error)

  /* "WaveTools.py":2589
 * 
 *     #lower harmonics
 *     def eta_long(self,x,t):             # <<<<<<<<<<<<<<
 *         """Calculates the free surface elevation for lower-order terms
 * 
 */
  __pyx_tuple__330 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_x, __pyx_n_s_t, __pyx_n_s_xx); if (unlikely(!__pyx_tuple__330)) __PYX_ERR(0, 2589, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__330);
  __Pyx_GIVEREF(__pyx_tuple__330);
  __pyx_codeobj__331 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__330, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_tim_Programming_proteus_p, __pyx_n_s_eta_long, 2589, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__331)) __PYX_ERR(0, 2589, __pyx_L1_error)

  /* "WaveTools.py":2627
 * 
 *     #set-up calculation
 *     def eta_setUp(self,x,t):             # <<<<<<<<<<<<<<
 *         """Calculates the free surface elevation set up
 * 
 */
  __pyx_tuple__332 = PyTuple_Pack(6, __pyx_n_s_self, __pyx_n_s_x, __pyx_n_s_t, __pyx_n_s_EtasetUp, __pyx_n_s_i, __pyx_n_s_wwi_setUp); if (unlikely(!__pyx_tuple__332)) __PYX_ERR(0, 2627, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__332);
  __Pyx_GIVEREF(__pyx_tuple__332);
  __pyx_codeobj__333 = (PyObject*)__Pyx_PyCode_New(3, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__332, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_tim_Programming_proteus_p, __pyx_n_s_eta_setUp, 2627, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__333)) __PYX_ERR(0, 2627, __pyx_L1_error)

  /* "WaveTools.py":2656
 * 
 *     #overall free surface elevation
 *     def eta_overall(self,x,t,setUp=False):             # <<<<<<<<<<<<<<
 *         """Calculates the free surface elevation with 2nd order corrections
 * 
 */
  __pyx_tuple__334 = PyTuple_Pack(6, __pyx_n_s_self, __pyx_n_s_x, __pyx_n_s_t, __pyx_n_s_setUp, __pyx_n_s_xx, __pyx_n_s_Etaoverall); if (unlikely(!__pyx_tuple__334)) __PYX_ERR(0, 2656, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__334);
  __Pyx_GIVEREF(__pyx_tuple__334);
  __pyx_codeobj__335 = (PyObject*)__Pyx_PyCode_New(4, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__334, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_tim_Programming_proteus_p, __pyx_n_s_eta_overall, 2656, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__335)) __PYX_ERR(0, 2656, __pyx_L1_error)

  /* "WaveTools.py":2685
 * 
 * 
 *     def writeEtaSeries(self,Tstart,Tend,dt,x0,fname, mode="all",setUp=False,Lgen=np.array([0.,0.,0.])):             # <<<<<<<<<<<<<<
 *         """Writes a timeseries of the free-surface elevation
 * 
 */
  __pyx_tuple__336 = PyTuple_Pack(17, __pyx_n_s_self, __pyx_n_s_Tstart, __pyx_n_s_Tend, __pyx_n_s_dt, __pyx_n_s_x0, __pyx_n_s_fname, __pyx_n_s_mode, __pyx_n_s_setUp, __pyx_n_s_Lgen, __pyx_n_s_Tlag, __pyx_n_s_j, __pyx_n_s_Nseries, __pyx_n_s_timelst, __pyx_n_s_series, __pyx_n_s_i, __pyx_n_s_time, __pyx_n_s_delimiter); if (unlikely(!__pyx_tuple__336)) __PYX_ERR(0, 2685, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__336);
  __Pyx_GIVEREF(__pyx_tuple__336);
  __pyx_codeobj__337 = (PyObject*)__Pyx_PyCode_New(9, 0, 17, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__336, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_tim_Programming_proteus_p, __pyx_n_s_writeEtaSeries, 2685, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__337)) __PYX_ERR(0, 2685, __pyx_L1_error)

  /* "WaveTools.py":2752
 *         return series
 * 
 *     def wtError(self,x,t):             # <<<<<<<<<<<<<<
 *         """Raises error for using RandomNLWavesFast class instead
 * 
 */
  __pyx_tuple__338 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_x, __pyx_n_s_t); if (unlikely(!__pyx_tuple__338)) __PYX_ERR(0, 2752, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__338);
  __Pyx_GIVEREF(__pyx_tuple__338);
  __pyx_codeobj__339 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__338, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_tim_Programming_proteus_p, __pyx_n_s_wtError, 2752, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__339)) __PYX_ERR(0, 2752, __pyx_L1_error)

  /* "WaveTools.py":2828
 *              Switch for enabling optimised functions
 *     """
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *                  Tstart,
 *                  Tend,
 */
  __pyx_tuple__340 = PyTuple_Pack(35, __pyx_n_s_self, __pyx_n_s_Tstart, __pyx_n_s_Tend, __pyx_n_s_x0, __pyx_n_s_Tp, __pyx_n_s_Hs, __pyx_n_s_mwl, __pyx_n_s_depth, __pyx_n_s_waveDir, __pyx_n_s_g, __pyx_n_s_N, __pyx_n_s_bandFactor, __pyx_n_s_spectName, __pyx_n_s_spectral_params, __pyx_n_s_phi, __pyx_n_s_Lgen, __pyx_n_s_Nwaves, __pyx_n_s_Nfreq, __pyx_n_s_NLongW, __pyx_n_s_fast, __pyx_n_s_aR, __pyx_n_s_aRN, __pyx_n_s_Tmax, __pyx_n_s_modes, __pyx_n_s_periods, __pyx_n_s_ii, __pyx_n_s_mode, __pyx_n_s_fname, __pyx_n_s_dt, __pyx_n_s_series, __pyx_n_s_Tstart_temp, __pyx_n_s_cutoff, __pyx_n_s_Nwaves_tot, __pyx_n_s_Nwind, __pyx_n_s_rec_d); if (unlikely(!__pyx_tuple__340)) __PYX_ERR(0, 2828, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__340);
  __Pyx_GIVEREF(__pyx_tuple__340);
  __pyx_codeobj__341 = (PyObject*)__Pyx_PyCode_New(20, 0, 35, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__340, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_tim_Programming_proteus_p, __pyx_n_s_init, 2828, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__341)) __PYX_ERR(0, 2828, __pyx_L1_error)

  /* "WaveTools.py":2897
 * 
 * 
 *     def eta(self,x,t):             # <<<<<<<<<<<<<<
 *         """Calculates free surface elevation (RandomNLWavesFast class)
 *         Parameters
 */
  __pyx_tuple__342 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_x, __pyx_n_s_t, __pyx_n_s_etaR); if (unlikely(!__pyx_tuple__342)) __PYX_ERR(0, 2897, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__342);
  __Pyx_GIVEREF(__pyx_tuple__342);
  __pyx_codeobj__343 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__342, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_tim_Programming_proteus_p, __pyx_n_s_eta, 2897, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__343)) __PYX_ERR(0, 2897, __pyx_L1_error)

  /* "WaveTools.py":2916
 * 
 * 
 *     def u(self,x,t):             # <<<<<<<<<<<<<<
 *         """Calculates wave velocity vector (RandomNLWavesFast class)
 *         Parameters
 */
  __pyx_tuple__344 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_x, __pyx_n_s_t, __pyx_n_s_uR); if (unlikely(!__pyx_tuple__344)) __PYX_ERR(0, 2916, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__344);
  __Pyx_GIVEREF(__pyx_tuple__344);
  __pyx_codeobj__345 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__344, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_tim_Programming_proteus_p, __pyx_n_s_u, 2916, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__345)) __PYX_ERR(0, 2916, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 2, __pyx_L1_error);
  __pyx_float_0_ = PyFloat_FromDouble(0.); if (unlikely(!__pyx_float_0_)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_float_1_ = PyFloat_FromDouble(1.); if (unlikely(!__pyx_float_1_)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_float_2_ = PyFloat_FromDouble(2.); if (unlikely(!__pyx_float_2_)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_float_4_ = PyFloat_FromDouble(4.); if (unlikely(!__pyx_float_4_)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_float_0_1 = PyFloat_FromDouble(0.1); if (unlikely(!__pyx_float_0_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_float_0_2 = PyFloat_FromDouble(0.2); if (unlikely(!__pyx_float_0_2)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_float_0_5 = PyFloat_FromDouble(0.5); if (unlikely(!__pyx_float_0_5)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_float_0_7 = PyFloat_FromDouble(0.7); if (unlikely(!__pyx_float_0_7)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_float_1_0 = PyFloat_FromDouble(1.0); if (unlikely(!__pyx_float_1_0)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_float_1_1 = PyFloat_FromDouble(1.1); if (unlikely(!__pyx_float_1_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_float_1_9 = PyFloat_FromDouble(1.9); if (unlikely(!__pyx_float_1_9)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_float_10_ = PyFloat_FromDouble(10.); if (unlikely(!__pyx_float_10_)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_float_2_0 = PyFloat_FromDouble(2.0); if (unlikely(!__pyx_float_2_0)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_float_3_0 = PyFloat_FromDouble(3.0); if (unlikely(!__pyx_float_3_0)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_float_3_3 = PyFloat_FromDouble(3.3); if (unlikely(!__pyx_float_3_3)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_float_4_0 = PyFloat_FromDouble(4.0); if (unlikely(!__pyx_float_4_0)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_float_50_ = PyFloat_FromDouble(50.); if (unlikely(!__pyx_float_50_)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_float_0_01 = PyFloat_FromDouble(0.01); if (unlikely(!__pyx_float_0_01)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_float_0_07 = PyFloat_FromDouble(0.07); if (unlikely(!__pyx_float_0_07)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_float_0_09 = PyFloat_FromDouble(0.09); if (unlikely(!__pyx_float_0_09)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_float_0_23 = PyFloat_FromDouble(0.23); if (unlikely(!__pyx_float_0_23)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_float_9_81 = PyFloat_FromDouble(9.81); if (unlikely(!__pyx_float_9_81)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_float_0_185 = PyFloat_FromDouble(0.185); if (unlikely(!__pyx_float_0_185)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_float_1eneg_10 = PyFloat_FromDouble(1e-10); if (unlikely(!__pyx_float_1eneg_10)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_float_0_0336 = PyFloat_FromDouble(0.0336); if (unlikely(!__pyx_float_0_0336)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_float_neg_2_5 = PyFloat_FromDouble(-2.5); if (unlikely(!__pyx_float_neg_2_5)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_float_neg_1_25 = PyFloat_FromDouble(-1.25); if (unlikely(!__pyx_float_neg_1_25)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_int_5 = PyInt_FromLong(5); if (unlikely(!__pyx_int_5)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_int_10 = PyInt_FromLong(10); if (unlikely(!__pyx_int_10)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_int_15 = PyInt_FromLong(15); if (unlikely(!__pyx_int_15)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_int_32 = PyInt_FromLong(32); if (unlikely(!__pyx_int_32)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_int_1000 = PyInt_FromLong(1000); if (unlikely(!__pyx_int_1000)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_int_neg_4 = PyInt_FromLong(-4); if (unlikely(!__pyx_int_neg_4)) __PYX_ERR(0, 2, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initWaveTools(void); /*proto*/
PyMODINIT_FUNC initWaveTools(void)
#else
PyMODINIT_FUNC PyInit_WaveTools(void); /*proto*/
PyMODINIT_FUNC PyInit_WaveTools(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_WaveTools(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 2, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("WaveTools", __pyx_methods, __pyx_k_Tools_for_working_with_water_wav, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 2, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 2, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 2, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_WaveTools) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 2, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "WaveTools")) {
      if (unlikely(PyDict_SetItemString(modules, "WaveTools", __pyx_m) < 0)) __PYX_ERR(0, 2, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_9WaveTools_SolitaryWave) < 0) __PYX_ERR(0, 754, __pyx_L1_error)
  __pyx_type_9WaveTools_SolitaryWave.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "SolitaryWave", (PyObject *)&__pyx_type_9WaveTools_SolitaryWave) < 0) __PYX_ERR(0, 754, __pyx_L1_error)
  __pyx_ptype_9WaveTools_SolitaryWave = &__pyx_type_9WaveTools_SolitaryWave;
  __pyx_vtabptr_9WaveTools_MonochromaticWaves = &__pyx_vtable_9WaveTools_MonochromaticWaves;
  __pyx_vtable_9WaveTools_MonochromaticWaves.etaLinear = (double (*)(struct __pyx_obj_9WaveTools_MonochromaticWaves *, double *, double))__pyx_f_9WaveTools_18MonochromaticWaves_etaLinear;
  __pyx_vtable_9WaveTools_MonochromaticWaves.etaFenton = (double (*)(struct __pyx_obj_9WaveTools_MonochromaticWaves *, double *, double))__pyx_f_9WaveTools_18MonochromaticWaves_etaFenton;
  __pyx_vtable_9WaveTools_MonochromaticWaves.uLinear = (void (*)(struct __pyx_obj_9WaveTools_MonochromaticWaves *, double *, double *, double))__pyx_f_9WaveTools_18MonochromaticWaves_uLinear;
  __pyx_vtable_9WaveTools_MonochromaticWaves.uFenton = (void (*)(struct __pyx_obj_9WaveTools_MonochromaticWaves *, double *, double *, double))__pyx_f_9WaveTools_18MonochromaticWaves_uFenton;
  if (PyType_Ready(&__pyx_type_9WaveTools_MonochromaticWaves) < 0) __PYX_ERR(0, 857, __pyx_L1_error)
  __pyx_type_9WaveTools_MonochromaticWaves.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_9WaveTools_MonochromaticWaves.tp_dict, __pyx_vtabptr_9WaveTools_MonochromaticWaves) < 0) __PYX_ERR(0, 857, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "MonochromaticWaves", (PyObject *)&__pyx_type_9WaveTools_MonochromaticWaves) < 0) __PYX_ERR(0, 857, __pyx_L1_error)
  __pyx_ptype_9WaveTools_MonochromaticWaves = &__pyx_type_9WaveTools_MonochromaticWaves;
  __pyx_vtabptr_9WaveTools_RandomWaves = &__pyx_vtable_9WaveTools_RandomWaves;
  __pyx_vtable_9WaveTools_RandomWaves._cpp_eta = (double (*)(struct __pyx_obj_9WaveTools_RandomWaves *, double *, double))__pyx_f_9WaveTools_11RandomWaves__cpp_eta;
  __pyx_vtable_9WaveTools_RandomWaves._cpp_u = (void (*)(struct __pyx_obj_9WaveTools_RandomWaves *, double *, double *, double))__pyx_f_9WaveTools_11RandomWaves__cpp_u;
  if (PyType_Ready(&__pyx_type_9WaveTools_RandomWaves) < 0) __PYX_ERR(0, 1077, __pyx_L1_error)
  __pyx_type_9WaveTools_RandomWaves.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_9WaveTools_RandomWaves.tp_dict, __pyx_vtabptr_9WaveTools_RandomWaves) < 0) __PYX_ERR(0, 1077, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "RandomWaves", (PyObject *)&__pyx_type_9WaveTools_RandomWaves) < 0) __PYX_ERR(0, 1077, __pyx_L1_error)
  __pyx_ptype_9WaveTools_RandomWaves = &__pyx_type_9WaveTools_RandomWaves;
  __pyx_vtabptr_9WaveTools_MultiSpectraRandomWaves = &__pyx_vtable_9WaveTools_MultiSpectraRandomWaves;
  __pyx_vtable_9WaveTools_MultiSpectraRandomWaves._cpp_eta = (double (*)(struct __pyx_obj_9WaveTools_MultiSpectraRandomWaves *, double *, double))__pyx_f_9WaveTools_23MultiSpectraRandomWaves__cpp_eta;
  __pyx_vtable_9WaveTools_MultiSpectraRandomWaves._cpp_u = (void (*)(struct __pyx_obj_9WaveTools_MultiSpectraRandomWaves *, double *, double *, double))__pyx_f_9WaveTools_23MultiSpectraRandomWaves__cpp_u;
  if (PyType_Ready(&__pyx_type_9WaveTools_MultiSpectraRandomWaves) < 0) __PYX_ERR(0, 1314, __pyx_L1_error)
  __pyx_type_9WaveTools_MultiSpectraRandomWaves.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_9WaveTools_MultiSpectraRandomWaves.tp_dict, __pyx_vtabptr_9WaveTools_MultiSpectraRandomWaves) < 0) __PYX_ERR(0, 1314, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "MultiSpectraRandomWaves", (PyObject *)&__pyx_type_9WaveTools_MultiSpectraRandomWaves) < 0) __PYX_ERR(0, 1314, __pyx_L1_error)
  __pyx_ptype_9WaveTools_MultiSpectraRandomWaves = &__pyx_type_9WaveTools_MultiSpectraRandomWaves;
  __pyx_vtabptr_9WaveTools_DirectionalWaves = &__pyx_vtable_9WaveTools_DirectionalWaves;
  __pyx_vtable_9WaveTools_DirectionalWaves._cpp_eta = (double (*)(struct __pyx_obj_9WaveTools_DirectionalWaves *, double *, double))__pyx_f_9WaveTools_16DirectionalWaves__cpp_eta;
  __pyx_vtable_9WaveTools_DirectionalWaves._cpp_u = (void (*)(struct __pyx_obj_9WaveTools_DirectionalWaves *, double *, double *, double))__pyx_f_9WaveTools_16DirectionalWaves__cpp_u;
  if (PyType_Ready(&__pyx_type_9WaveTools_DirectionalWaves) < 0) __PYX_ERR(0, 1509, __pyx_L1_error)
  __pyx_type_9WaveTools_DirectionalWaves.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_9WaveTools_DirectionalWaves.tp_dict, __pyx_vtabptr_9WaveTools_DirectionalWaves) < 0) __PYX_ERR(0, 1509, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "DirectionalWaves", (PyObject *)&__pyx_type_9WaveTools_DirectionalWaves) < 0) __PYX_ERR(0, 1509, __pyx_L1_error)
  __pyx_ptype_9WaveTools_DirectionalWaves = &__pyx_type_9WaveTools_DirectionalWaves;
  __pyx_vtabptr_9WaveTools_TimeSeries = &__pyx_vtable_9WaveTools_TimeSeries;
  __pyx_vtable_9WaveTools_TimeSeries._cpp_etaDirect = (double (*)(struct __pyx_obj_9WaveTools_TimeSeries *, double *, double))__pyx_f_9WaveTools_10TimeSeries__cpp_etaDirect;
  __pyx_vtable_9WaveTools_TimeSeries._cpp_etaWindow = (double (*)(struct __pyx_obj_9WaveTools_TimeSeries *, double *, double))__pyx_f_9WaveTools_10TimeSeries__cpp_etaWindow;
  __pyx_vtable_9WaveTools_TimeSeries._cpp_uDirect = (void (*)(struct __pyx_obj_9WaveTools_TimeSeries *, double *, double *, double))__pyx_f_9WaveTools_10TimeSeries__cpp_uDirect;
  __pyx_vtable_9WaveTools_TimeSeries._cpp_uWindow = (void (*)(struct __pyx_obj_9WaveTools_TimeSeries *, double *, double *, double))__pyx_f_9WaveTools_10TimeSeries__cpp_uWindow;
  if (PyType_Ready(&__pyx_type_9WaveTools_TimeSeries) < 0) __PYX_ERR(0, 1752, __pyx_L1_error)
  __pyx_type_9WaveTools_TimeSeries.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_9WaveTools_TimeSeries.tp_dict, __pyx_vtabptr_9WaveTools_TimeSeries) < 0) __PYX_ERR(0, 1752, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "TimeSeries", (PyObject *)&__pyx_type_9WaveTools_TimeSeries) < 0) __PYX_ERR(0, 1752, __pyx_L1_error)
  __pyx_ptype_9WaveTools_TimeSeries = &__pyx_type_9WaveTools_TimeSeries;
  __pyx_vtabptr_9WaveTools_RandomNLWaves = &__pyx_vtable_9WaveTools_RandomNLWaves;
  __pyx_vtable_9WaveTools_RandomNLWaves._cpp_eta_2ndOrder = (double (*)(struct __pyx_obj_9WaveTools_RandomNLWaves *, double *, double))__pyx_f_9WaveTools_13RandomNLWaves__cpp_eta_2ndOrder;
  __pyx_vtable_9WaveTools_RandomNLWaves._cpp_eta_short = (double (*)(struct __pyx_obj_9WaveTools_RandomNLWaves *, double *, double))__pyx_f_9WaveTools_13RandomNLWaves__cpp_eta_short;
  __pyx_vtable_9WaveTools_RandomNLWaves._cpp_eta_long = (double (*)(struct __pyx_obj_9WaveTools_RandomNLWaves *, double *, double))__pyx_f_9WaveTools_13RandomNLWaves__cpp_eta_long;
  if (PyType_Ready(&__pyx_type_9WaveTools_RandomNLWaves) < 0) __PYX_ERR(0, 2415, __pyx_L1_error)
  __pyx_type_9WaveTools_RandomNLWaves.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_9WaveTools_RandomNLWaves.tp_dict, __pyx_vtabptr_9WaveTools_RandomNLWaves) < 0) __PYX_ERR(0, 2415, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "RandomNLWaves", (PyObject *)&__pyx_type_9WaveTools_RandomNLWaves) < 0) __PYX_ERR(0, 2415, __pyx_L1_error)
  __pyx_ptype_9WaveTools_RandomNLWaves = &__pyx_type_9WaveTools_RandomNLWaves;
  /*--- Type import code ---*/
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
  #if CYTHON_COMPILING_IN_PYPY
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) __PYX_ERR(4, 9, __pyx_L1_error)
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType("numpy", "dtype", sizeof(PyArray_Descr), 0); if (unlikely(!__pyx_ptype_5numpy_dtype)) __PYX_ERR(2, 155, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType("numpy", "flatiter", sizeof(PyArrayIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_flatiter)) __PYX_ERR(2, 168, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType("numpy", "broadcast", sizeof(PyArrayMultiIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_broadcast)) __PYX_ERR(2, 172, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType("numpy", "ndarray", sizeof(PyArrayObject), 0); if (unlikely(!__pyx_ptype_5numpy_ndarray)) __PYX_ERR(2, 181, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType("numpy", "ufunc", sizeof(PyUFuncObject), 0); if (unlikely(!__pyx_ptype_5numpy_ufunc)) __PYX_ERR(2, 861, __pyx_L1_error)
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif

  /* "WaveTools.py":11
 * 
 * import cython
 * import numpy as np             # <<<<<<<<<<<<<<
 * import cmath as cmat
 * from Profiling import logEvent
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_1) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "WaveTools.py":12
 * import cython
 * import numpy as np
 * import cmath as cmat             # <<<<<<<<<<<<<<
 * from Profiling import logEvent
 * import time as tt
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_cmath, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_cmat, __pyx_t_1) < 0) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "WaveTools.py":13
 * import numpy as np
 * import cmath as cmat
 * from Profiling import logEvent             # <<<<<<<<<<<<<<
 * import time as tt
 * import sys as sys
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_logEvent);
  __Pyx_GIVEREF(__pyx_n_s_logEvent);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_logEvent);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_Profiling, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_logEvent); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_logEvent, __pyx_t_1) < 0) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "WaveTools.py":14
 * import cmath as cmat
 * from Profiling import logEvent
 * import time as tt             # <<<<<<<<<<<<<<
 * import sys as sys
 * 
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_time, 0, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_tt, __pyx_t_2) < 0) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "WaveTools.py":15
 * from Profiling import logEvent
 * import time as tt
 * import sys as sys             # <<<<<<<<<<<<<<
 * 
 * __all__ = ['SteadyCurrent',
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_sys, 0, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sys, __pyx_t_2) < 0) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "WaveTools.py":17
 * import sys as sys
 * 
 * __all__ = ['SteadyCurrent',             # <<<<<<<<<<<<<<
 *            'SolitaryWave',
 * 	   'MonochromaticWaves',
 */
  __pyx_t_2 = PyList_New(37); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_SteadyCurrent);
  __Pyx_GIVEREF(__pyx_n_s_SteadyCurrent);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_SteadyCurrent);
  __Pyx_INCREF(__pyx_n_s_SolitaryWave);
  __Pyx_GIVEREF(__pyx_n_s_SolitaryWave);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_SolitaryWave);
  __Pyx_INCREF(__pyx_n_s_MonochromaticWaves);
  __Pyx_GIVEREF(__pyx_n_s_MonochromaticWaves);
  PyList_SET_ITEM(__pyx_t_2, 2, __pyx_n_s_MonochromaticWaves);
  __Pyx_INCREF(__pyx_n_s_RandomWaves);
  __Pyx_GIVEREF(__pyx_n_s_RandomWaves);
  PyList_SET_ITEM(__pyx_t_2, 3, __pyx_n_s_RandomWaves);
  __Pyx_INCREF(__pyx_n_s_MultiSpectraRandomWaves);
  __Pyx_GIVEREF(__pyx_n_s_MultiSpectraRandomWaves);
  PyList_SET_ITEM(__pyx_t_2, 4, __pyx_n_s_MultiSpectraRandomWaves);
  __Pyx_INCREF(__pyx_n_s_DirectionalWaves);
  __Pyx_GIVEREF(__pyx_n_s_DirectionalWaves);
  PyList_SET_ITEM(__pyx_t_2, 5, __pyx_n_s_DirectionalWaves);
  __Pyx_INCREF(__pyx_n_s_TimeSeries);
  __Pyx_GIVEREF(__pyx_n_s_TimeSeries);
  PyList_SET_ITEM(__pyx_t_2, 6, __pyx_n_s_TimeSeries);
  __Pyx_INCREF(__pyx_n_s_RandomWavesFast);
  __Pyx_GIVEREF(__pyx_n_s_RandomWavesFast);
  PyList_SET_ITEM(__pyx_t_2, 7, __pyx_n_s_RandomWavesFast);
  __Pyx_INCREF(__pyx_n_s_RandomNLWaves);
  __Pyx_GIVEREF(__pyx_n_s_RandomNLWaves);
  PyList_SET_ITEM(__pyx_t_2, 8, __pyx_n_s_RandomNLWaves);
  __Pyx_INCREF(__pyx_n_s_RandomNLWavesFast);
  __Pyx_GIVEREF(__pyx_n_s_RandomNLWavesFast);
  PyList_SET_ITEM(__pyx_t_2, 9, __pyx_n_s_RandomNLWavesFast);
  __Pyx_INCREF(__pyx_n_s_fastcos_test);
  __Pyx_GIVEREF(__pyx_n_s_fastcos_test);
  PyList_SET_ITEM(__pyx_t_2, 10, __pyx_n_s_fastcos_test);
  __Pyx_INCREF(__pyx_n_s_fastcosh_test);
  __Pyx_GIVEREF(__pyx_n_s_fastcosh_test);
  PyList_SET_ITEM(__pyx_t_2, 11, __pyx_n_s_fastcosh_test);
  __Pyx_INCREF(__pyx_n_s_fastsinh_test);
  __Pyx_GIVEREF(__pyx_n_s_fastsinh_test);
  PyList_SET_ITEM(__pyx_t_2, 12, __pyx_n_s_fastsinh_test);
  __Pyx_INCREF(__pyx_n_s_coshkzd_test);
  __Pyx_GIVEREF(__pyx_n_s_coshkzd_test);
  PyList_SET_ITEM(__pyx_t_2, 13, __pyx_n_s_coshkzd_test);
  __Pyx_INCREF(__pyx_n_s_sinhkzd_test);
  __Pyx_GIVEREF(__pyx_n_s_sinhkzd_test);
  PyList_SET_ITEM(__pyx_t_2, 14, __pyx_n_s_sinhkzd_test);
  __Pyx_INCREF(__pyx_n_s_loadExistingFunction);
  __Pyx_GIVEREF(__pyx_n_s_loadExistingFunction);
  PyList_SET_ITEM(__pyx_t_2, 15, __pyx_n_s_loadExistingFunction);
  __Pyx_INCREF(__pyx_n_s_setVertDir);
  __Pyx_GIVEREF(__pyx_n_s_setVertDir);
  PyList_SET_ITEM(__pyx_t_2, 16, __pyx_n_s_setVertDir);
  __Pyx_INCREF(__pyx_n_s_loadExistingFunction);
  __Pyx_GIVEREF(__pyx_n_s_loadExistingFunction);
  PyList_SET_ITEM(__pyx_t_2, 17, __pyx_n_s_loadExistingFunction);
  __Pyx_INCREF(__pyx_n_s_setVertDir);
  __Pyx_GIVEREF(__pyx_n_s_setVertDir);
  PyList_SET_ITEM(__pyx_t_2, 18, __pyx_n_s_setVertDir);
  __Pyx_INCREF(__pyx_n_s_setDirVector);
  __Pyx_GIVEREF(__pyx_n_s_setDirVector);
  PyList_SET_ITEM(__pyx_t_2, 19, __pyx_n_s_setDirVector);
  __Pyx_INCREF(__pyx_n_s_dirCheck);
  __Pyx_GIVEREF(__pyx_n_s_dirCheck);
  PyList_SET_ITEM(__pyx_t_2, 20, __pyx_n_s_dirCheck);
  __Pyx_INCREF(__pyx_n_s_reduceToIntervals);
  __Pyx_GIVEREF(__pyx_n_s_reduceToIntervals);
  PyList_SET_ITEM(__pyx_t_2, 21, __pyx_n_s_reduceToIntervals);
  __Pyx_INCREF(__pyx_n_s_returnRectangles);
  __Pyx_GIVEREF(__pyx_n_s_returnRectangles);
  PyList_SET_ITEM(__pyx_t_2, 22, __pyx_n_s_returnRectangles);
  __Pyx_INCREF(__pyx_n_s_returnRectangles3D);
  __Pyx_GIVEREF(__pyx_n_s_returnRectangles3D);
  PyList_SET_ITEM(__pyx_t_2, 23, __pyx_n_s_returnRectangles3D);
  __Pyx_INCREF(__pyx_n_s_normIntegral);
  __Pyx_GIVEREF(__pyx_n_s_normIntegral);
  PyList_SET_ITEM(__pyx_t_2, 24, __pyx_n_s_normIntegral);
  __Pyx_INCREF(__pyx_n_s_eta_mode);
  __Pyx_GIVEREF(__pyx_n_s_eta_mode);
  PyList_SET_ITEM(__pyx_t_2, 25, __pyx_n_s_eta_mode);
  __Pyx_INCREF(__pyx_n_s_Udrift);
  __Pyx_GIVEREF(__pyx_n_s_Udrift);
  PyList_SET_ITEM(__pyx_t_2, 26, __pyx_n_s_Udrift);
  __Pyx_INCREF(__pyx_n_s_vel_mode);
  __Pyx_GIVEREF(__pyx_n_s_vel_mode);
  PyList_SET_ITEM(__pyx_t_2, 27, __pyx_n_s_vel_mode);
  __Pyx_INCREF(__pyx_n_s_sigma);
  __Pyx_GIVEREF(__pyx_n_s_sigma);
  PyList_SET_ITEM(__pyx_t_2, 28, __pyx_n_s_sigma);
  __Pyx_INCREF(__pyx_n_s_JONSWAP);
  __Pyx_GIVEREF(__pyx_n_s_JONSWAP);
  PyList_SET_ITEM(__pyx_t_2, 29, __pyx_n_s_JONSWAP);
  __Pyx_INCREF(__pyx_n_s_PM_mod);
  __Pyx_GIVEREF(__pyx_n_s_PM_mod);
  PyList_SET_ITEM(__pyx_t_2, 30, __pyx_n_s_PM_mod);
  __Pyx_INCREF(__pyx_n_s_cos2s);
  __Pyx_GIVEREF(__pyx_n_s_cos2s);
  PyList_SET_ITEM(__pyx_t_2, 31, __pyx_n_s_cos2s);
  __Pyx_INCREF(__pyx_n_s_mitsuyasu);
  __Pyx_GIVEREF(__pyx_n_s_mitsuyasu);
  PyList_SET_ITEM(__pyx_t_2, 32, __pyx_n_s_mitsuyasu);
  __Pyx_INCREF(__pyx_n_s_dispersion);
  __Pyx_GIVEREF(__pyx_n_s_dispersion);
  PyList_SET_ITEM(__pyx_t_2, 33, __pyx_n_s_dispersion);
  __Pyx_INCREF(__pyx_n_s_tophat);
  __Pyx_GIVEREF(__pyx_n_s_tophat);
  PyList_SET_ITEM(__pyx_t_2, 34, __pyx_n_s_tophat);
  __Pyx_INCREF(__pyx_n_s_costap);
  __Pyx_GIVEREF(__pyx_n_s_costap);
  PyList_SET_ITEM(__pyx_t_2, 35, __pyx_n_s_costap);
  __Pyx_INCREF(__pyx_n_s_decompose_tseries);
  __Pyx_GIVEREF(__pyx_n_s_decompose_tseries);
  PyList_SET_ITEM(__pyx_t_2, 36, __pyx_n_s_decompose_tseries);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_all_2, __pyx_t_2) < 0) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "WaveTools.py":56
 * 
 * 
 * def fastcos_test(phase,sinus=False):             # <<<<<<<<<<<<<<
 *     """Fast cosine function with Taylor approximation - TO BE USED FOR TESTING"
 *     Parameters
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_9WaveTools_1fastcos_test, 0, __pyx_n_s_fastcos_test, NULL, __pyx_n_s_WaveTools, __pyx_d, ((PyObject *)__pyx_codeobj__219)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__220);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_fastcos_test, __pyx_t_2) < 0) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "WaveTools.py":73
 *         phase = np.pi/2. - phase
 *     return fastcos(phase,True)
 * def fastcosh_test(k,Z,fast=True):             # <<<<<<<<<<<<<<
 *     """Fast hyperbolic cosine function with Taylor approximation - TO BE USED FOR TESTING"
 *     Parameters
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_9WaveTools_3fastcosh_test, 0, __pyx_n_s_fastcosh_test, NULL, __pyx_n_s_WaveTools, __pyx_d, ((PyObject *)__pyx_codeobj__222)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__223);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_fastcosh_test, __pyx_t_2) < 0) __PYX_ERR(0, 73, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "WaveTools.py":89
 *     fastcosh(xx,k,Z,fast)
 *     return xx[0]
 * def fastsinh_test(k,Z,fast=True):             # <<<<<<<<<<<<<<
 *     """Fast hyperbolic sine function with Taylor approximation - TO BE USED FOR TESTING"
 *     Parameters
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_9WaveTools_5fastsinh_test, 0, __pyx_n_s_fastsinh_test, NULL, __pyx_n_s_WaveTools, __pyx_d, ((PyObject *)__pyx_codeobj__225)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__226);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_fastsinh_test, __pyx_t_2) < 0) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "WaveTools.py":107
 * 
 * 
 * def coshkzd_test(k,Z,d, fast=True):             # <<<<<<<<<<<<<<
 *     """Calculation of u horizontal profile cosh(k(d+Z))/sinh(kd) using fast appoximaitons
 *     and hyp trig relation cosh(a+b) = cosha*coshb+sinha*sinhb
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_9WaveTools_7coshkzd_test, 0, __pyx_n_s_coshkzd_test, NULL, __pyx_n_s_WaveTools, __pyx_d, ((PyObject *)__pyx_codeobj__228)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__229);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_coshkzd_test, __pyx_t_2) < 0) __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "WaveTools.py":129
 *         return 0.
 * 
 * def sinhkzd_test(k,Z,d,fast=True):             # <<<<<<<<<<<<<<
 *     """Calculation of v vertical profile cosh(k(d+Z))/sinh(kd) using fast appoximaitons
 *     and hyp trig relation sinh(a+b) = sinha*coshb+cosha*sinhb
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_9WaveTools_9sinhkzd_test, 0, __pyx_n_s_sinhkzd_test, NULL, __pyx_n_s_WaveTools, __pyx_d, ((PyObject *)__pyx_codeobj__231)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__232);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sinhkzd_test, __pyx_t_2) < 0) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "WaveTools.py":152
 *         return 0.
 * 
 * def loadExistingFunction(funcName, validFunctions):             # <<<<<<<<<<<<<<
 *     """Checks if a function name is known function and returns it
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_9WaveTools_11loadExistingFunction, 0, __pyx_n_s_loadExistingFunction, NULL, __pyx_n_s_WaveTools, __pyx_d, ((PyObject *)__pyx_codeobj__234)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_loadExistingFunction, __pyx_t_2) < 0) __PYX_ERR(0, 152, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "WaveTools.py":187
 * 
 * 
 * def setVertDir(g):             # <<<<<<<<<<<<<<
 *     """ Returns the unit vector for the vertical direction
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_9WaveTools_13setVertDir, 0, __pyx_n_s_setVertDir, NULL, __pyx_n_s_WaveTools, __pyx_d, ((PyObject *)__pyx_codeobj__236)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 187, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setVertDir, __pyx_t_2) < 0) __PYX_ERR(0, 187, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "WaveTools.py":205
 * 
 * 
 * def setDirVector(vector):             # <<<<<<<<<<<<<<
 *     """ Returns the direction of a vector in the form of a unit vector
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_9WaveTools_15setDirVector, 0, __pyx_n_s_setDirVector, NULL, __pyx_n_s_WaveTools, __pyx_d, ((PyObject *)__pyx_codeobj__238)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setDirVector, __pyx_t_2) < 0) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "WaveTools.py":220
 *     return vector/(sqrt(vector[0]**2 + vector[1]**2 + vector[2]**2))
 * 
 * def dirCheck(v1, v2):             # <<<<<<<<<<<<<<
 *     """ Checks if two vectors are vertical raises SystemError if True
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_9WaveTools_17dirCheck, 0, __pyx_n_s_dirCheck, NULL, __pyx_n_s_WaveTools, __pyx_d, ((PyObject *)__pyx_codeobj__240)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_dirCheck, __pyx_t_2) < 0) __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "WaveTools.py":247
 *     else:
 *         return None
 * def reduceToIntervals(fi,df):             # <<<<<<<<<<<<<<
 *     """ Prepares the x-axis array with N elements for numerical integration
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_9WaveTools_19reduceToIntervals, 0, __pyx_n_s_reduceToIntervals, NULL, __pyx_n_s_WaveTools, __pyx_d, ((PyObject *)__pyx_codeobj__242)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduceToIntervals, __pyx_t_2) < 0) __PYX_ERR(0, 247, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "WaveTools.py":268
 *     fim_tmp = (0.5*(fi[1:]+fi[:-1])).tolist()
 *     return np.array([fim_tmp[0]-0.5*df]+fim_tmp+[fim_tmp[-1]+0.5*df])
 * def returnRectangles(a,x):             # <<<<<<<<<<<<<<
 *     """ Returns 2D discrete integral array using the rectangle method
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_9WaveTools_21returnRectangles, 0, __pyx_n_s_returnRectangles, NULL, __pyx_n_s_WaveTools, __pyx_d, ((PyObject *)__pyx_codeobj__244)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_returnRectangles, __pyx_t_2) < 0) __PYX_ERR(0, 268, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "WaveTools.py":288
 *     """
 *     return 0.5*(a[1:]+a[:-1])*(x[1:]-x[:-1])
 * def returnRectangles3D(a,x,y):             # <<<<<<<<<<<<<<
 *     """ Returns 3D discrete integrals using the rectangle method
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_9WaveTools_23returnRectangles3D, 0, __pyx_n_s_returnRectangles3D, NULL, __pyx_n_s_WaveTools, __pyx_d, ((PyObject *)__pyx_codeobj__246)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_returnRectangles3D, __pyx_t_2) < 0) __PYX_ERR(0, 288, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "WaveTools.py":315
 *         ai[:,jj] *= (x[1:]-x[:-1])
 *     return ai
 * def normIntegral(f,dom):             # <<<<<<<<<<<<<<
 *     """Returns a normalised 2D function
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_9WaveTools_25normIntegral, 0, __pyx_n_s_normIntegral, NULL, __pyx_n_s_WaveTools, __pyx_d, ((PyObject *)__pyx_codeobj__248)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_normIntegral, __pyx_t_2) < 0) __PYX_ERR(0, 315, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "WaveTools.py":338
 * 
 * 
 * def eta_mode(x, t, kDir, omega, phi, amplitude):             # <<<<<<<<<<<<<<
 *     """Calculates the free surface elevation for a single frequency mode
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_9WaveTools_27eta_mode, 0, __pyx_n_s_eta_mode, NULL, __pyx_n_s_WaveTools, __pyx_d, ((PyObject *)__pyx_codeobj__250)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_eta_mode, __pyx_t_2) < 0) __PYX_ERR(0, 338, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "WaveTools.py":364
 *     phase = x[0]*kDir[0]+x[1]*kDir[1]+x[2]*kDir[2] - omega*t  + phi
 *     return amplitude*cos(phase)
 * def Udrift(amp,gAbs,c,d):             # <<<<<<<<<<<<<<
 *     """Calculates the 2nd order Stokes drift for a linear mode
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_9WaveTools_29Udrift, 0, __pyx_n_s_Udrift, NULL, __pyx_n_s_WaveTools, __pyx_d, ((PyObject *)__pyx_codeobj__252)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 364, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Udrift, __pyx_t_2) < 0) __PYX_ERR(0, 364, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "WaveTools.py":386
 *     return 0.5*gAbs*amp*amp/c/d
 * 
 * def  vel_mode(x,  t, kDir, kAbs,  omega,  phi,  amplitude,  mwl, depth, vDir, gAbs):             # <<<<<<<<<<<<<<
 *     """Calculates the wave velocity components for a single frequency mode
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_9WaveTools_31vel_mode, 0, __pyx_n_s_vel_mode, NULL, __pyx_n_s_WaveTools, __pyx_d, ((PyObject *)__pyx_codeobj__254)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_vel_mode, __pyx_t_2) < 0) __PYX_ERR(0, 386, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "WaveTools.py":436
 * 
 * 
 * def sigma(omega,omega0):             # <<<<<<<<<<<<<<
 *     """Calculates sigma function for JONSWAP spectrum
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_9WaveTools_33sigma, 0, __pyx_n_s_sigma, NULL, __pyx_n_s_WaveTools, __pyx_d, ((PyObject *)__pyx_codeobj__256)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 436, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sigma, __pyx_t_2) < 0) __PYX_ERR(0, 436, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "WaveTools.py":456
 * 
 * 
 * def JONSWAP(f,f0,Hs,gamma=3.3,TMA=False, depth = None):             # <<<<<<<<<<<<<<
 *     """Calculates the JONSWAP frequency spectrum (Goda 2009)
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_9WaveTools_35JONSWAP, 0, __pyx_n_s_JONSWAP, NULL, __pyx_n_s_WaveTools, __pyx_d, ((PyObject *)__pyx_codeobj__258)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__259);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_JONSWAP, __pyx_t_2) < 0) __PYX_ERR(0, 456, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "WaveTools.py":496
 *     return tma * bj*(Hs**2)*(1./((Tp**4) *(f**5)))*np.exp(-1.25*(1./(Tp*f)**(4.)))*(gamma**r)
 * 
 * def PM_mod(f,f0,Hs):             # <<<<<<<<<<<<<<
 *     """Calculates the Pierson-Moskovitz spectrum (or Bretschneider or ISSC)
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_9WaveTools_37PM_mod, 0, __pyx_n_s_PM_mod, NULL, __pyx_n_s_WaveTools, __pyx_d, ((PyObject *)__pyx_codeobj__261)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PM_mod, __pyx_t_2) < 0) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "WaveTools.py":520
 *     return (5.0/16.0)*Hs**2*(f0**4/f**5)*np.exp((-5.0/4.0)*(f0/f)**4)
 * 
 * def cos2s(theta,f,s=10):             # <<<<<<<<<<<<<<
 *     """Calculates the cos-2s directional spreading function
 *     see USACE - CETN-I-28 http://chl.erdc.usace.army.mil/library/publications/chetn/pdf/cetn-i-28.pdf
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_9WaveTools_39cos2s, 0, __pyx_n_s_cos2s, NULL, __pyx_n_s_WaveTools, __pyx_d, ((PyObject *)__pyx_codeobj__263)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__264);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_cos2s, __pyx_t_2) < 0) __PYX_ERR(0, 520, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "WaveTools.py":542
 *         fun[:,ii] = np.cos(theta/2)**(2*s)
 *     return fun
 * def mitsuyasu(theta,fi,f0,smax=10):             # <<<<<<<<<<<<<<
 *     """The cos2s wave directional spread with wave frequency dependency
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_9WaveTools_41mitsuyasu, 0, __pyx_n_s_mitsuyasu, NULL, __pyx_n_s_WaveTools, __pyx_d, ((PyObject *)__pyx_codeobj__266)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 542, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__267);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_mitsuyasu, __pyx_t_2) < 0) __PYX_ERR(0, 542, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "WaveTools.py":576
 * 
 * 
 * def dispersion(w,d, g = 9.81,niter = 1000):             # <<<<<<<<<<<<<<
 *     """Calculates the wave number for single or multiple frequencies using linear dispersion relation.
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_9WaveTools_43dispersion, 0, __pyx_n_s_dispersion, NULL, __pyx_n_s_WaveTools, __pyx_d, ((PyObject *)__pyx_codeobj__269)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 576, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__270);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_dispersion, __pyx_t_2) < 0) __PYX_ERR(0, 576, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "WaveTools.py":605
 * 
 * 
 * def tophat(l,cutoff):             # <<<<<<<<<<<<<<
 *     """ Calculates and returns a top hat filter array
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_9WaveTools_45tophat, 0, __pyx_n_s_tophat, NULL, __pyx_n_s_WaveTools, __pyx_d, ((PyObject *)__pyx_codeobj__272)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_tophat, __pyx_t_2) < 0) __PYX_ERR(0, 605, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "WaveTools.py":625
 *     return a
 * 
 * def costap(l,cutoff=0.1):             # <<<<<<<<<<<<<<
 *     """ Calculates and returns a top hat filter array
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_9WaveTools_47costap, 0, __pyx_n_s_costap, NULL, __pyx_n_s_WaveTools, __pyx_d, ((PyObject *)__pyx_codeobj__274)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 625, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__275);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_costap, __pyx_t_2) < 0) __PYX_ERR(0, 625, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "WaveTools.py":648
 *     return wind
 * 
 * def decompose_tseries(time,eta,dt):             # <<<<<<<<<<<<<<
 *     """ Performs spectral analysis and calculates angular frequency components, amplitude, phase and mean level power
 *     of a time series with constant sampling.
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_9WaveTools_49decompose_tseries, 0, __pyx_n_s_decompose_tseries, NULL, __pyx_n_s_WaveTools, __pyx_d, ((PyObject *)__pyx_codeobj__277)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 648, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_decompose_tseries, __pyx_t_2) < 0) __PYX_ERR(0, 648, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "WaveTools.py":694
 *     return results
 * 
 * class  SteadyCurrent:             # <<<<<<<<<<<<<<
 *     """
 *     This class is used for generating a steady current
 */
  __pyx_t_2 = __Pyx_Py3MetaclassPrepare((PyObject *) NULL, __pyx_empty_tuple, __pyx_n_s_SteadyCurrent, __pyx_n_s_SteadyCurrent, (PyObject *) NULL, __pyx_n_s_WaveTools, __pyx_kp_s_This_class_is_used_for_generati); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 694, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "WaveTools.py":708
 * 
 *             """
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *                  U,
 *                  mwl,
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_9WaveTools_13SteadyCurrent_1__init__, 0, __pyx_n_s_SteadyCurrent___init, NULL, __pyx_n_s_WaveTools, __pyx_d, ((PyObject *)__pyx_codeobj__279)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 708, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_1, __pyx_tuple__280);
  if (PyObject_SetItem(__pyx_t_2, __pyx_n_s_init, __pyx_t_1) < 0) __PYX_ERR(0, 708, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "WaveTools.py":715
 *         self.U = U
 *         self.ramp = rampTime
 *     def eta(self,x,t):             # <<<<<<<<<<<<<<
 *         """Calculates free surface elevation (SolitaryWave class)
 *         Parameters
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_9WaveTools_13SteadyCurrent_3eta, 0, __pyx_n_s_SteadyCurrent_eta, NULL, __pyx_n_s_WaveTools, __pyx_d, ((PyObject *)__pyx_codeobj__282)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 715, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetItem(__pyx_t_2, __pyx_n_s_eta, __pyx_t_1) < 0) __PYX_ERR(0, 715, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "WaveTools.py":731
 *         """
 *         return  self.mwl
 *     def u(self,x,t):             # <<<<<<<<<<<<<<
 *         """Calculates wave velocity vector (SolitaryWave class).
 *         Parameters
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_9WaveTools_13SteadyCurrent_5u, 0, __pyx_n_s_SteadyCurrent_u, NULL, __pyx_n_s_WaveTools, __pyx_d, ((PyObject *)__pyx_codeobj__284)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 731, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetItem(__pyx_t_2, __pyx_n_s_u, __pyx_t_1) < 0) __PYX_ERR(0, 731, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "WaveTools.py":694
 *     return results
 * 
 * class  SteadyCurrent:             # <<<<<<<<<<<<<<
 *     """
 *     This class is used for generating a steady current
 */
  __pyx_t_1 = __Pyx_Py3ClassCreate(((PyObject*)&__Pyx_DefaultClassType), __pyx_n_s_SteadyCurrent, __pyx_empty_tuple, __pyx_t_2, NULL, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 694, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SteadyCurrent, __pyx_t_1) < 0) __PYX_ERR(0, 694, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "WaveTools.py":782
 *                  g,
 *                  waveDir,
 *                  trans = np.zeros(3,"d"),             # <<<<<<<<<<<<<<
 *                  fast = True):
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 782, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 782, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__285, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 782, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_k__37 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "WaveTools.py":801
 *         dirCheck(self.waveDir,self.vDir)
 * 
 *     def eta(self,x,t):             # <<<<<<<<<<<<<<
 *         """Calculates free surface elevation (SolitaryWave class)
 *         Parameters
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_9WaveTools_12SolitaryWave_3eta, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_SolitaryWave_eta, NULL, __pyx_n_s_WaveTools, __pyx_d, ((PyObject *)__pyx_codeobj__287)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 801, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9WaveTools_SolitaryWave->tp_dict, __pyx_n_s_eta, __pyx_t_2) < 0) __PYX_ERR(0, 801, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9WaveTools_SolitaryWave);

  /* "WaveTools.py":819
 *         a1 = self.K*phase
 *         return  self.H*1.0/ cosh(a1)**2
 *     def u(self,x,t):             # <<<<<<<<<<<<<<
 *         """Calculates wave velocity vector (SolitaryWave class).
 *         Parameters
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_9WaveTools_12SolitaryWave_5u, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_SolitaryWave_u, NULL, __pyx_n_s_WaveTools, __pyx_d, ((PyObject *)__pyx_codeobj__289)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 819, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9WaveTools_SolitaryWave->tp_dict, __pyx_n_s_u, __pyx_t_2) < 0) __PYX_ERR(0, 819, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9WaveTools_SolitaryWave);

  /* "WaveTools.py":902
 *                  wavelength=None,
 *                  waveType="Linear",
 *                  Ycoeff = np.zeros(1000,),             # <<<<<<<<<<<<<<
 *                  Bcoeff =np.zeros(1000,),
 *                  Nf = 1000,
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 902, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 902, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__290, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 902, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_k__45 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "WaveTools.py":903
 *                  waveType="Linear",
 *                  Ycoeff = np.zeros(1000,),
 *                  Bcoeff =np.zeros(1000,),             # <<<<<<<<<<<<<<
 *                  Nf = 1000,
 *                  meanVelocity = np.array([0.,0,0.]),
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 903, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 903, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__291, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 903, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_k__46 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "WaveTools.py":905
 *                  Bcoeff =np.zeros(1000,),
 *                  Nf = 1000,
 *                  meanVelocity = np.array([0.,0,0.]),             # <<<<<<<<<<<<<<
 *                  phi0 = 0.,
 *                  fast = True):
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 905, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 905, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyList_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 905, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_float_0_);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_int_0);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_float_0_);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 905, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_1};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 905, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_1};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 905, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 905, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 905, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_k__47 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "WaveTools.py":1017
 *         __cpp_uFenton(U,x, t, self.kDir_,self.k,self.omega,self.phi0,self.amplitude,self.mwl, self.depth, self.gAbs,self.Nf, self.Bcoeff_, self.mV_,self.waveDir_,self.vDir_, self.tanhF_, self.fast)
 * 
 *     def eta(self,x,t):             # <<<<<<<<<<<<<<
 *         """Calculates free surface elevation (MonochromaticWaves class)
 *         Parameters
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_9WaveTools_18MonochromaticWaves_3eta, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_MonochromaticWaves_eta, NULL, __pyx_n_s_WaveTools, __pyx_d, ((PyObject *)__pyx_codeobj__293)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1017, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9WaveTools_MonochromaticWaves->tp_dict, __pyx_n_s_eta, __pyx_t_2) < 0) __PYX_ERR(0, 1017, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9WaveTools_MonochromaticWaves);

  /* "WaveTools.py":1041
 *             return self.etaFenton(xx,t)
 * 
 *     def u(self,x,t):             # <<<<<<<<<<<<<<
 *         """Calculates wave velocity vector (MonochromaticWaves class).
 *         Parameters
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_9WaveTools_18MonochromaticWaves_5u, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_MonochromaticWaves_u, NULL, __pyx_n_s_WaveTools, __pyx_d, ((PyObject *)__pyx_codeobj__295)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1041, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9WaveTools_MonochromaticWaves->tp_dict, __pyx_n_s_u, __pyx_t_2) < 0) __PYX_ERR(0, 1041, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9WaveTools_MonochromaticWaves);

  /* "WaveTools.py":1213
 *         return __cpp_etaRandom(x,t,self.kDir_, self.omega_,self.phi_,self.ai_, self.N, self.fast)
 * 
 *     def eta(self, x, t):             # <<<<<<<<<<<<<<
 *         """Calculates free surface elevation (RandomWaves class)
 *         Parameters
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_9WaveTools_11RandomWaves_3eta, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_RandomWaves_eta, NULL, __pyx_n_s_WaveTools, __pyx_d, ((PyObject *)__pyx_codeobj__297)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9WaveTools_RandomWaves->tp_dict, __pyx_n_s_eta, __pyx_t_2) < 0) __PYX_ERR(0, 1213, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9WaveTools_RandomWaves);

  /* "WaveTools.py":1237
 *         __cpp_uRandom(U, x,t,self.kDir_, self.ki_, self.omega_,self.phi_,self.ai_,self.mwl,self.depth, self.N, self.waveDir_, self.vDir_, self.tanh_, self.gAbs, self.fast)
 * 
 *     def u(self, x, t):             # <<<<<<<<<<<<<<
 *         """Calculates wave velocity vector (RandomWaves class)
 *         Parameters
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_9WaveTools_11RandomWaves_5u, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_RandomWaves_u, NULL, __pyx_n_s_WaveTools, __pyx_d, ((PyObject *)__pyx_codeobj__299)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9WaveTools_RandomWaves->tp_dict, __pyx_n_s_u, __pyx_t_2) < 0) __PYX_ERR(0, 1237, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9WaveTools_RandomWaves);

  /* "WaveTools.py":1265
 * 
 *         return U
 *     def writeEtaSeries(self,Tstart,Tend,x0,fname,Lgen= np.array([0.,0,0])):             # <<<<<<<<<<<<<<
 *         """Writes a timeseries of the free-surface elevation
 * 
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_array); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyList_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_float_0_);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_3, 1, __pyx_int_0);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_3, 2, __pyx_int_0);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (!__pyx_t_1) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1265, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_3};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1265, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_3};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1265, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1265, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1); __pyx_t_1 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1265, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_k__71 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_9WaveTools_11RandomWaves_7writeEtaSeries, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_RandomWaves_writeEtaSeries, NULL, __pyx_n_s_WaveTools, __pyx_d, ((PyObject *)__pyx_codeobj__301)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9WaveTools_RandomWaves->tp_dict, __pyx_n_s_writeEtaSeries, __pyx_t_2) < 0) __PYX_ERR(0, 1265, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9WaveTools_RandomWaves);

  /* "WaveTools.py":1455
 *         return __cpp_etaRandom(x,t,self.kDirM_, self.omegaM_,self.phiM_,self.aiM_, self.Nall,self.fast)
 * 
 *     def eta(self, x, t):             # <<<<<<<<<<<<<<
 *         """Calculates free surface elevation (RandomWaves class)
 *         Parameters
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_9WaveTools_23MultiSpectraRandomWaves_3eta, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_MultiSpectraRandomWaves_eta, NULL, __pyx_n_s_WaveTools, __pyx_d, ((PyObject *)__pyx_codeobj__303)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1455, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9WaveTools_MultiSpectraRandomWaves->tp_dict, __pyx_n_s_eta, __pyx_t_2) < 0) __PYX_ERR(0, 1455, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9WaveTools_MultiSpectraRandomWaves);

  /* "WaveTools.py":1480
 *         __cpp_uDir(U, x,t,self.kDirM_, self.kiM_, self.omegaM_,self.phiM_,self.aiM_,self.mwl,self.depth, self.Nall, self.waveDirM_, self.vDir_, self.tanhM_, self.gAbs, self.fast)
 * 
 *     def u(self, x, t):             # <<<<<<<<<<<<<<
 *         """Calculates wave velocity vector (RandomWaves class)
 *         Parameters
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_9WaveTools_23MultiSpectraRandomWaves_5u, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_MultiSpectraRandomWaves_u, NULL, __pyx_n_s_WaveTools, __pyx_d, ((PyObject *)__pyx_codeobj__305)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1480, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9WaveTools_MultiSpectraRandomWaves->tp_dict, __pyx_n_s_u, __pyx_t_2) < 0) __PYX_ERR(0, 1480, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9WaveTools_MultiSpectraRandomWaves);

  /* "WaveTools.py":1692
 *         return __cpp_etaRandom(x,t,self.kDir_, self.omega_,self.phi_,self.ai_, self.Nall, self.fast)
 * 
 *     def eta(self, x, t):             # <<<<<<<<<<<<<<
 *         """Calculates free surface elevation (RandomWaves class)
 *         Parameters
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_9WaveTools_16DirectionalWaves_3eta, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_DirectionalWaves_eta, NULL, __pyx_n_s_WaveTools, __pyx_d, ((PyObject *)__pyx_codeobj__307)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1692, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9WaveTools_DirectionalWaves->tp_dict, __pyx_n_s_eta, __pyx_t_2) < 0) __PYX_ERR(0, 1692, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9WaveTools_DirectionalWaves);

  /* "WaveTools.py":1717
 *         __cpp_uDir(U, x,t,self.kDir_, self.ki_, self.omega_,self.phi_,self.ai_,self.mwl,self.depth, self.Nall, self.waveDir_, self.vDir_, self.tanh_, self.gAbs, self.fast)
 * 
 *     def u(self, x, t):             # <<<<<<<<<<<<<<
 *         """Calculates wave velocity vector (RandomWaves class)
 *         Parameters
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_9WaveTools_16DirectionalWaves_5u, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_DirectionalWaves_u, NULL, __pyx_n_s_WaveTools, __pyx_d, ((PyObject *)__pyx_codeobj__309)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1717, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9WaveTools_DirectionalWaves->tp_dict, __pyx_n_s_u, __pyx_t_2) < 0) __PYX_ERR(0, 1717, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9WaveTools_DirectionalWaves);

  /* "WaveTools.py":1804
 *                  arrayData = False,
 *                  seriesArray = None,
 *                  Lgen = np.array([0.,0.,0]),             # <<<<<<<<<<<<<<
 *                  fast = True
 *                  ):
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1804, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_array); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1804, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyList_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1804, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  PyList_SET_ITEM(__pyx_t_5, 0, __pyx_float_0_);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  PyList_SET_ITEM(__pyx_t_5, 1, __pyx_float_0_);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_5, 2, __pyx_int_0);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1804, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_5};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1804, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_5};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1804, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_1 = PyTuple_New(1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1804, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_1, 0+1, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1804, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_k__118 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "WaveTools.py":2115
 *             self._cpp_u = self._cpp_uWindow
 * 
 *     def windOut(self):             # <<<<<<<<<<<<<<
 *         return {"TWindow":self.Twindow,"TOverlap":self.Toverlap,"Tlag":self.Tlag, "rec_direct":self.rec_direct}
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_9WaveTools_10TimeSeries_3windOut, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_TimeSeries_windOut, NULL, __pyx_n_s_WaveTools, __pyx_d, ((PyObject *)__pyx_codeobj__311)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9WaveTools_TimeSeries->tp_dict, __pyx_n_s_windOut, __pyx_t_2) < 0) __PYX_ERR(0, 2115, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9WaveTools_TimeSeries);

  /* "WaveTools.py":2124
 *         __cpp_uDirect(U,x,self.x0_,t,self.kDir_,self.ki_,self.omega_,self.phi_,self.ai_,self.mwl,self.depth,self.Nf,self.waveDir_, self.vDir_, self.tanh_, self.gAbs, self.fast)
 * 
 *     def etaDirect(self, x, t):             # <<<<<<<<<<<<<<
 * 
 *         """Calculates free surface elevation(Timeseries class-direct method
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_9WaveTools_10TimeSeries_5etaDirect, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_TimeSeries_etaDirect, NULL, __pyx_n_s_WaveTools, __pyx_d, ((PyObject *)__pyx_codeobj__313)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9WaveTools_TimeSeries->tp_dict, __pyx_n_s_etaDirect, __pyx_t_2) < 0) __PYX_ERR(0, 2124, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9WaveTools_TimeSeries);

  /* "WaveTools.py":2146
 *         return self._cpp_etaDirect(xx,t)
 * 
 *     def uDirect(self, x, t):             # <<<<<<<<<<<<<<
 *         """Calculates wave velocity vector (Timeseries class-direct method)
 *         Parameters
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_9WaveTools_10TimeSeries_7uDirect, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_TimeSeries_uDirect, NULL, __pyx_n_s_WaveTools, __pyx_d, ((PyObject *)__pyx_codeobj__315)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9WaveTools_TimeSeries->tp_dict, __pyx_n_s_uDirect, __pyx_t_2) < 0) __PYX_ERR(0, 2146, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9WaveTools_TimeSeries);

  /* "WaveTools.py":2175
 *         return U
 * 
 *     def findWindow(self,t):             # <<<<<<<<<<<<<<
 *         """Returns the current spectral window in TimeSeries class."
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_9WaveTools_10TimeSeries_9findWindow, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_TimeSeries_findWindow, NULL, __pyx_n_s_WaveTools, __pyx_d, ((PyObject *)__pyx_codeobj__317)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9WaveTools_TimeSeries->tp_dict, __pyx_n_s_findWindow, __pyx_t_2) < 0) __PYX_ERR(0, 2175, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9WaveTools_TimeSeries);

  /* "WaveTools.py":2200
 *         __cpp_uWindow(U,x,self.x0_,t,self.T0_,self.kDir_,self.ki_,self.omega_,self.phi_,self.ai_,self.mwl,self.depth,self.Nf,Nw,self.waveDir_, self.vDir_, self.tanh_, self.gAbs, self.fast)
 * 
 *     def etaWindow(self, x, t):             # <<<<<<<<<<<<<<
 *         """Calculates free surface elevation(Timeseries class-window method
 *         Parameters
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_9WaveTools_10TimeSeries_11etaWindow, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_TimeSeries_etaWindow, NULL, __pyx_n_s_WaveTools, __pyx_d, ((PyObject *)__pyx_codeobj__319)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9WaveTools_TimeSeries->tp_dict, __pyx_n_s_etaWindow, __pyx_t_2) < 0) __PYX_ERR(0, 2200, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9WaveTools_TimeSeries);

  /* "WaveTools.py":2222
 * 
 * 
 *     def uWindow(self, x, t):             # <<<<<<<<<<<<<<
 *         """Calculates wave velocity vector (Timeseries class-window method)
 *         Parameters
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_9WaveTools_10TimeSeries_13uWindow, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_TimeSeries_uWindow, NULL, __pyx_n_s_WaveTools, __pyx_d, ((PyObject *)__pyx_codeobj__321)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9WaveTools_TimeSeries->tp_dict, __pyx_n_s_uWindow, __pyx_t_2) < 0) __PYX_ERR(0, 2222, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9WaveTools_TimeSeries);

  /* "WaveTools.py":2252
 * 
 * 
 * class RandomWavesFast:             # <<<<<<<<<<<<<<
 *     """
 *     This class is used for generating plane random waves in an optimised manner
 */
  __pyx_t_2 = __Pyx_Py3MetaclassPrepare((PyObject *) NULL, __pyx_empty_tuple, __pyx_n_s_RandomWavesFast, __pyx_n_s_RandomWavesFast, (PyObject *) NULL, __pyx_n_s_WaveTools, __pyx_kp_s_This_class_is_used_for_generati_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "WaveTools.py":2303
 *     """
 * 
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *                  Tstart,
 *                  Tend,
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_9WaveTools_15RandomWavesFast_1__init__, 0, __pyx_n_s_RandomWavesFast___init, NULL, __pyx_n_s_WaveTools, __pyx_d, ((PyObject *)__pyx_codeobj__323)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (!__Pyx_CyFunction_InitDefaults(__pyx_t_4, sizeof(__pyx_defaults), 1)) __PYX_ERR(0, 2303, __pyx_L1_error)

  /* "WaveTools.py":2318
 *                  spectral_params =  None, #JONPARAMS = {"gamma": 3.3, "TMA":True,"depth": depth}
 *                  phi=None,
 *                  Lgen = np.array([0., 0. ,0. ]),             # <<<<<<<<<<<<<<
 *                  Nwaves = 15,
 *                  Nfreq = 32,
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyList_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  PyList_SET_ITEM(__pyx_t_5, 0, __pyx_float_0_);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  PyList_SET_ITEM(__pyx_t_5, 1, __pyx_float_0_);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  PyList_SET_ITEM(__pyx_t_5, 2, __pyx_float_0_);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2318, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_5};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2318, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_5};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2318, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2318, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2318, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_CyFunction_Defaults(__pyx_defaults, __pyx_t_4)->__pyx_arg_Lgen = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __Pyx_CyFunction_SetDefaultsGetter(__pyx_t_4, __pyx_pf_9WaveTools_50__defaults__);
  if (PyObject_SetItem(__pyx_t_2, __pyx_n_s_init, __pyx_t_4) < 0) __PYX_ERR(0, 2303, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "WaveTools.py":2401
 *         self.windOut = TS.windOut
 * 
 *     def printOut(self):             # <<<<<<<<<<<<<<
 *         """Prints some properties of the time series - ONLY FOR TESTING
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_9WaveTools_15RandomWavesFast_3printOut, 0, __pyx_n_s_RandomWavesFast_printOut, NULL, __pyx_n_s_WaveTools, __pyx_d, ((PyObject *)__pyx_codeobj__325)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2401, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_2, __pyx_n_s_printOut, __pyx_t_4) < 0) __PYX_ERR(0, 2401, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "WaveTools.py":2252
 * 
 * 
 * class RandomWavesFast:             # <<<<<<<<<<<<<<
 *     """
 *     This class is used for generating plane random waves in an optimised manner
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(((PyObject*)&__Pyx_DefaultClassType), __pyx_n_s_RandomWavesFast, __pyx_empty_tuple, __pyx_t_2, NULL, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_RandomWavesFast, __pyx_t_4) < 0) __PYX_ERR(0, 2252, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "WaveTools.py":2510
 *     def _cpp_eta_2ndOrder(self,x,t):
 *         return __cpp_eta2nd(x,t,self.kDir_,self.ki_,self.omega_,self.phi_,self.ai_,self.N,self.sinhKd_,self.tanhKd_, self.fast)
 *     def eta_2ndOrder(self,x,t):             # <<<<<<<<<<<<<<
 *         """Calculates the free surface elevation for 2nd-order terms
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_9WaveTools_13RandomNLWaves_3eta_2ndOrder, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_RandomNLWaves_eta_2ndOrder, NULL, __pyx_n_s_WaveTools, __pyx_d, ((PyObject *)__pyx_codeobj__327)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2510, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9WaveTools_RandomNLWaves->tp_dict, __pyx_n_s_eta_2ndOrder, __pyx_t_2) < 0) __PYX_ERR(0, 2510, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9WaveTools_RandomNLWaves);

  /* "WaveTools.py":2548
 * 
 *     #higher harmonics
 *     def eta_short(self,x,t):             # <<<<<<<<<<<<<<
 *         """Calculates the free surface elevation for higher-order terms
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_9WaveTools_13RandomNLWaves_5eta_short, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_RandomNLWaves_eta_short, NULL, __pyx_n_s_WaveTools, __pyx_d, ((PyObject *)__pyx_codeobj__329)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2548, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9WaveTools_RandomNLWaves->tp_dict, __pyx_n_s_eta_short, __pyx_t_2) < 0) __PYX_ERR(0, 2548, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9WaveTools_RandomNLWaves);

  /* "WaveTools.py":2589
 * 
 *     #lower harmonics
 *     def eta_long(self,x,t):             # <<<<<<<<<<<<<<
 *         """Calculates the free surface elevation for lower-order terms
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_9WaveTools_13RandomNLWaves_7eta_long, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_RandomNLWaves_eta_long, NULL, __pyx_n_s_WaveTools, __pyx_d, ((PyObject *)__pyx_codeobj__331)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2589, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9WaveTools_RandomNLWaves->tp_dict, __pyx_n_s_eta_long, __pyx_t_2) < 0) __PYX_ERR(0, 2589, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9WaveTools_RandomNLWaves);

  /* "WaveTools.py":2627
 * 
 *     #set-up calculation
 *     def eta_setUp(self,x,t):             # <<<<<<<<<<<<<<
 *         """Calculates the free surface elevation set up
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_9WaveTools_13RandomNLWaves_9eta_setUp, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_RandomNLWaves_eta_setUp, NULL, __pyx_n_s_WaveTools, __pyx_d, ((PyObject *)__pyx_codeobj__333)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2627, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9WaveTools_RandomNLWaves->tp_dict, __pyx_n_s_eta_setUp, __pyx_t_2) < 0) __PYX_ERR(0, 2627, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9WaveTools_RandomNLWaves);

  /* "WaveTools.py":2656
 * 
 *     #overall free surface elevation
 *     def eta_overall(self,x,t,setUp=False):             # <<<<<<<<<<<<<<
 *         """Calculates the free surface elevation with 2nd order corrections
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_9WaveTools_13RandomNLWaves_11eta_overall, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_RandomNLWaves_eta_overall, NULL, __pyx_n_s_WaveTools, __pyx_d, ((PyObject *)__pyx_codeobj__335)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2656, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9WaveTools_RandomNLWaves->tp_dict, __pyx_n_s_eta_overall, __pyx_t_2) < 0) __PYX_ERR(0, 2656, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9WaveTools_RandomNLWaves);

  /* "WaveTools.py":2685
 * 
 * 
 *     def writeEtaSeries(self,Tstart,Tend,dt,x0,fname, mode="all",setUp=False,Lgen=np.array([0.,0.,0.])):             # <<<<<<<<<<<<<<
 *         """Writes a timeseries of the free-surface elevation
 * 
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2685, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_array); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2685, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyList_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2685, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  PyList_SET_ITEM(__pyx_t_4, 0, __pyx_float_0_);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  PyList_SET_ITEM(__pyx_t_4, 1, __pyx_float_0_);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  PyList_SET_ITEM(__pyx_t_4, 2, __pyx_float_0_);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2685, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_4};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2685, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_4};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2685, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2685, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2685, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_k__193 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_9WaveTools_13RandomNLWaves_13writeEtaSeries, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_RandomNLWaves_writeEtaSeries, NULL, __pyx_n_s_WaveTools, __pyx_d, ((PyObject *)__pyx_codeobj__337)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2685, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9WaveTools_RandomNLWaves->tp_dict, __pyx_n_s_writeEtaSeries, __pyx_t_2) < 0) __PYX_ERR(0, 2685, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9WaveTools_RandomNLWaves);

  /* "WaveTools.py":2752
 *         return series
 * 
 *     def wtError(self,x,t):             # <<<<<<<<<<<<<<
 *         """Raises error for using RandomNLWavesFast class instead
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_9WaveTools_13RandomNLWaves_15wtError, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_RandomNLWaves_wtError, NULL, __pyx_n_s_WaveTools, __pyx_d, ((PyObject *)__pyx_codeobj__339)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2752, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9WaveTools_RandomNLWaves->tp_dict, __pyx_n_s_wtError, __pyx_t_2) < 0) __PYX_ERR(0, 2752, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9WaveTools_RandomNLWaves);

  /* "WaveTools.py":2778
 * 
 * 
 * class RandomNLWavesFast:             # <<<<<<<<<<<<<<
 *     """
 *     This class is used for generating plane random waves with 2ns order correction in an optimised manner
 */
  __pyx_t_2 = __Pyx_Py3MetaclassPrepare((PyObject *) NULL, __pyx_empty_tuple, __pyx_n_s_RandomNLWavesFast, __pyx_n_s_RandomNLWavesFast, (PyObject *) NULL, __pyx_n_s_WaveTools, __pyx_kp_s_This_class_is_used_for_generati_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2778, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "WaveTools.py":2828
 *              Switch for enabling optimised functions
 *     """
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *                  Tstart,
 *                  Tend,
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_9WaveTools_17RandomNLWavesFast_1__init__, 0, __pyx_n_s_RandomNLWavesFast___init, NULL, __pyx_n_s_WaveTools, __pyx_d, ((PyObject *)__pyx_codeobj__341)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2828, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!__Pyx_CyFunction_InitDefaults(__pyx_t_1, sizeof(__pyx_defaults1), 1)) __PYX_ERR(0, 2828, __pyx_L1_error)

  /* "WaveTools.py":2843
 *                  spectral_params=None,    #JONPARAMS = {"gamma": 3.3, "TMA":True,"depth": depth}
 *                  phi=None,
 *                  Lgen = np.array([0.,0.,0.]),    #array of component phases             # <<<<<<<<<<<<<<
 *                  Nwaves = 15,
 *                  Nfreq = 32,
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2843, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2843, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyList_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2843, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  PyList_SET_ITEM(__pyx_t_4, 0, __pyx_float_0_);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  PyList_SET_ITEM(__pyx_t_4, 1, __pyx_float_0_);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  PyList_SET_ITEM(__pyx_t_4, 2, __pyx_float_0_);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2843, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_7);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
      __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2843, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
      __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2843, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2843, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2843, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_CyFunction_Defaults(__pyx_defaults1, __pyx_t_1)->__pyx_arg_Lgen = __pyx_t_7;
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_t_7 = 0;
  __Pyx_CyFunction_SetDefaultsGetter(__pyx_t_1, __pyx_pf_9WaveTools_52__defaults__);
  if (PyObject_SetItem(__pyx_t_2, __pyx_n_s_init, __pyx_t_1) < 0) __PYX_ERR(0, 2828, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "WaveTools.py":2897
 * 
 * 
 *     def eta(self,x,t):             # <<<<<<<<<<<<<<
 *         """Calculates free surface elevation (RandomNLWavesFast class)
 *         Parameters
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_9WaveTools_17RandomNLWavesFast_3eta, 0, __pyx_n_s_RandomNLWavesFast_eta, NULL, __pyx_n_s_WaveTools, __pyx_d, ((PyObject *)__pyx_codeobj__343)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2897, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetItem(__pyx_t_2, __pyx_n_s_eta, __pyx_t_1) < 0) __PYX_ERR(0, 2897, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "WaveTools.py":2916
 * 
 * 
 *     def u(self,x,t):             # <<<<<<<<<<<<<<
 *         """Calculates wave velocity vector (RandomNLWavesFast class)
 *         Parameters
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_9WaveTools_17RandomNLWavesFast_5u, 0, __pyx_n_s_RandomNLWavesFast_u, NULL, __pyx_n_s_WaveTools, __pyx_d, ((PyObject *)__pyx_codeobj__345)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2916, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetItem(__pyx_t_2, __pyx_n_s_u, __pyx_t_1) < 0) __PYX_ERR(0, 2916, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "WaveTools.py":2778
 * 
 * 
 * class RandomNLWavesFast:             # <<<<<<<<<<<<<<
 *     """
 *     This class is used for generating plane random waves with 2ns order correction in an optimised manner
 */
  __pyx_t_1 = __Pyx_Py3ClassCreate(((PyObject*)&__Pyx_DefaultClassType), __pyx_n_s_RandomNLWavesFast, __pyx_empty_tuple, __pyx_t_2, NULL, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2778, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_RandomNLWavesFast, __pyx_t_1) < 0) __PYX_ERR(0, 2778, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "WaveTools.py":2
 * 
 * """Tools for working with water waves.             # <<<<<<<<<<<<<<
 * 
 * The primary objective of this module is to provide solutions (exact and
 */
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "carray.to_py":124
 * 
 * @cname("__Pyx_carray_to_tuple_double")
 * cdef inline tuple __Pyx_carray_to_tuple_double(double *v, Py_ssize_t length):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     cdef object value
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init WaveTools", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init WaveTools");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* PyFloatBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_DivideObjC(PyObject *op1, PyObject *op2, double floatval, CYTHON_UNUSED int inplace) {
    const double b = floatval;
    double a, result;
    if (likely(PyFloat_CheckExact(op1))) {
        a = PyFloat_AS_DOUBLE(op1);
    } else
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        a = (double) PyInt_AS_LONG(op1);
    } else
    #endif
    if (likely(PyLong_CheckExact(op1))) {
        #if CYTHON_USE_PYLONG_INTERNALS
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        switch (size) {
            case  0: a = 0.0; break;
            case -1: a = -(double) digits[0]; break;
            case  1: a = (double) digits[0]; break;
            case -2:
            case 2:
                if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (1 * PyLong_SHIFT < 53))) {
                    a = (double) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53) || (a < (double) (1L<<53))) {
                        if (size == -2)
                            a = -a;
                        break;
                    }
                }
            case -3:
            case 3:
                if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53))) {
                    a = (double) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53) || (a < (double) (1L<<53))) {
                        if (size == -3)
                            a = -a;
                        break;
                    }
                }
            case -4:
            case 4:
                if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53))) {
                    a = (double) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (4 * PyLong_SHIFT < 53) || (a < (double) (1L<<53))) {
                        if (size == -4)
                            a = -a;
                        break;
                    }
                }
            default:
        #else
        {
        #endif
            a = PyLong_AsDouble(op1);
            if (unlikely(a == -1.0 && PyErr_Occurred())) return NULL;
        }
    } else {
        return (inplace ? __Pyx_PyNumber_InPlaceDivide(op1, op2) : __Pyx_PyNumber_Divide(op1, op2));
    }
        PyFPE_START_PROTECT("divide", return NULL)
        result = a / b;
        PyFPE_END_PROTECT(result)
        return PyFloat_FromDouble(result);
}
#endif

/* GetModuleGlobalName */
  static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

/* PyFunctionFastCall */
    #if CYTHON_FAST_PYCALL
#include "frameobject.h"
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = PyThreadState_GET();
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = f->f_localsplus;
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif  // CPython < 3.6
#endif  // CYTHON_FAST_PYCALL

/* PyCFunctionFastCall */
    #if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    return (*((__Pyx_PyCFunctionFast)meth)) (self, args, nargs, NULL);
}
#endif  // CYTHON_FAST_PYCCALL

/* PyObjectCall */
    #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
    #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
    #if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* None */
      static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* GetItemInt */
      static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (wraparound & unlikely(i < 0)) i += PyList_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (wraparound & unlikely(i < 0)) i += PyTuple_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* SliceObject */
      static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(PyObject* obj,
        Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, CYTHON_UNUSED int wraparound) {
#if CYTHON_USE_TYPE_SLOTS
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                    goto bad;
                PyErr_Clear();
            }
        }
        return ms->sq_slice(obj, cstart, cstop);
    }
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_subscript))
#endif
    {
        PyObject* result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_USE_TYPE_SLOTS
        result = mp->mp_subscript(obj, py_slice);
#else
        result = PyObject_GetItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    PyErr_Format(PyExc_TypeError,
        "'%.200s' object is unsliceable", Py_TYPE(obj)->tp_name);
bad:
    return NULL;
}

/* PyObjectCallNoArg */
      #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyFloatBinop */
        #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_DivideCObj(PyObject *op1, PyObject *op2, double floatval, CYTHON_UNUSED int inplace) {
    const double a = floatval;
    double b, result;
    if (likely(PyFloat_CheckExact(op2))) {
        b = PyFloat_AS_DOUBLE(op2);
    } else
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op2))) {
        b = (double) PyInt_AS_LONG(op2);
    } else
    #endif
    if (likely(PyLong_CheckExact(op2))) {
        #if CYTHON_USE_PYLONG_INTERNALS
        const digit* digits = ((PyLongObject*)op2)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op2);
        switch (size) {
            case  0: b = 0.0; break;
            case -1: b = -(double) digits[0]; break;
            case  1: b = (double) digits[0]; break;
            case -2:
            case 2:
                if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (1 * PyLong_SHIFT < 53))) {
                    b = (double) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53) || (b < (double) (1L<<53))) {
                        if (size == -2)
                            b = -b;
                        break;
                    }
                }
            case -3:
            case 3:
                if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53))) {
                    b = (double) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53) || (b < (double) (1L<<53))) {
                        if (size == -3)
                            b = -b;
                        break;
                    }
                }
            case -4:
            case 4:
                if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53))) {
                    b = (double) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (4 * PyLong_SHIFT < 53) || (b < (double) (1L<<53))) {
                        if (size == -4)
                            b = -b;
                        break;
                    }
                }
            default:
        #else
        {
        #endif
            b = PyLong_AsDouble(op2);
            if (unlikely(b == -1.0 && PyErr_Occurred())) return NULL;
        }
    } else {
        return (inplace ? __Pyx_PyNumber_InPlaceDivide(op1, op2) : __Pyx_PyNumber_Divide(op1, op2));
    }
        PyFPE_START_PROTECT("divide", return NULL)
        result = a / b;
        PyFPE_END_PROTECT(result)
        return PyFloat_FromDouble(result);
}
#endif

/* PyFloatBinop */
          #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_AddCObj(PyObject *op1, PyObject *op2, double floatval, CYTHON_UNUSED int inplace) {
    const double a = floatval;
    double b, result;
    if (likely(PyFloat_CheckExact(op2))) {
        b = PyFloat_AS_DOUBLE(op2);
    } else
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op2))) {
        b = (double) PyInt_AS_LONG(op2);
    } else
    #endif
    if (likely(PyLong_CheckExact(op2))) {
        #if CYTHON_USE_PYLONG_INTERNALS
        const digit* digits = ((PyLongObject*)op2)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op2);
        switch (size) {
            case  0: b = 0.0; break;
            case -1: b = -(double) digits[0]; break;
            case  1: b = (double) digits[0]; break;
            case -2:
            case 2:
                if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (1 * PyLong_SHIFT < 53))) {
                    b = (double) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53) || (b < (double) (1L<<53))) {
                        if (size == -2)
                            b = -b;
                        break;
                    }
                }
            case -3:
            case 3:
                if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53))) {
                    b = (double) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53) || (b < (double) (1L<<53))) {
                        if (size == -3)
                            b = -b;
                        break;
                    }
                }
            case -4:
            case 4:
                if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53))) {
                    b = (double) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (4 * PyLong_SHIFT < 53) || (b < (double) (1L<<53))) {
                        if (size == -4)
                            b = -b;
                        break;
                    }
                }
            default:
        #else
        {
        #endif
            b = PyLong_AsDouble(op2);
            if (unlikely(b == -1.0 && PyErr_Occurred())) return NULL;
        }
    } else {
        return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
    }
        PyFPE_START_PROTECT("add", return NULL)
        result = a + b;
        PyFPE_END_PROTECT(result)
        return PyFloat_FromDouble(result);
}
#endif

/* PyFloatBinop */
            #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_SubtractObjC(PyObject *op1, PyObject *op2, double floatval, CYTHON_UNUSED int inplace) {
    const double b = floatval;
    double a, result;
    if (likely(PyFloat_CheckExact(op1))) {
        a = PyFloat_AS_DOUBLE(op1);
    } else
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        a = (double) PyInt_AS_LONG(op1);
    } else
    #endif
    if (likely(PyLong_CheckExact(op1))) {
        #if CYTHON_USE_PYLONG_INTERNALS
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        switch (size) {
            case  0: a = 0.0; break;
            case -1: a = -(double) digits[0]; break;
            case  1: a = (double) digits[0]; break;
            case -2:
            case 2:
                if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (1 * PyLong_SHIFT < 53))) {
                    a = (double) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53) || (a < (double) (1L<<53))) {
                        if (size == -2)
                            a = -a;
                        break;
                    }
                }
            case -3:
            case 3:
                if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53))) {
                    a = (double) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53) || (a < (double) (1L<<53))) {
                        if (size == -3)
                            a = -a;
                        break;
                    }
                }
            case -4:
            case 4:
                if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53))) {
                    a = (double) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (4 * PyLong_SHIFT < 53) || (a < (double) (1L<<53))) {
                        if (size == -4)
                            a = -a;
                        break;
                    }
                }
            default:
        #else
        {
        #endif
            a = PyLong_AsDouble(op1);
            if (unlikely(a == -1.0 && PyErr_Occurred())) return NULL;
        }
    } else {
        return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
    }
        PyFPE_START_PROTECT("subtract", return NULL)
        result = a - b;
        PyFPE_END_PROTECT(result)
        return PyFloat_FromDouble(result);
}
#endif

/* SliceObject */
              static CYTHON_INLINE int __Pyx_PyObject_SetSlice(PyObject* obj, PyObject* value,
        Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, CYTHON_UNUSED int wraparound) {
#if CYTHON_USE_TYPE_SLOTS
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_ass_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                    goto bad;
                PyErr_Clear();
            }
        }
        return ms->sq_ass_slice(obj, cstart, cstop, value);
    }
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_ass_subscript))
#endif
    {
        int result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_USE_TYPE_SLOTS
        result = mp->mp_ass_subscript(obj, py_slice, value);
#else
        result = value ? PyObject_SetItem(obj, py_slice, value) : PyObject_DelItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    PyErr_Format(PyExc_TypeError,
        "'%.200s' object does not support slice %.10s",
        Py_TYPE(obj)->tp_name, value ? "assignment" : "deletion");
bad:
    return -1;
}

/* pyobject_as_double */
              static double __Pyx__PyObject_AsDouble(PyObject* obj) {
    PyObject* float_value;
#if !CYTHON_USE_TYPE_SLOTS
    float_value = PyNumber_Float(obj);  if (0) goto bad;
#else
    PyNumberMethods *nb = Py_TYPE(obj)->tp_as_number;
    if (likely(nb) && likely(nb->nb_float)) {
        float_value = nb->nb_float(obj);
        if (likely(float_value) && unlikely(!PyFloat_Check(float_value))) {
            PyErr_Format(PyExc_TypeError,
                "__float__ returned non-float (type %.200s)",
                Py_TYPE(float_value)->tp_name);
            Py_DECREF(float_value);
            goto bad;
        }
    } else if (PyUnicode_CheckExact(obj) || PyBytes_CheckExact(obj)) {
#if PY_MAJOR_VERSION >= 3
        float_value = PyFloat_FromString(obj);
#else
        float_value = PyFloat_FromString(obj, 0);
#endif
    } else {
        PyObject* args = PyTuple_New(1);
        if (unlikely(!args)) goto bad;
        PyTuple_SET_ITEM(args, 0, obj);
        float_value = PyObject_Call((PyObject*)&PyFloat_Type, args, 0);
        PyTuple_SET_ITEM(args, 0, 0);
        Py_DECREF(args);
    }
#endif
    if (likely(float_value)) {
        double value = PyFloat_AS_DOUBLE(float_value);
        Py_DECREF(float_value);
        return value;
    }
bad:
    return (double)-1;
}

/* PyIntBinop */
              #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a - b);
            if (likely((x^a) >= 0 || (x^~b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                default: return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
            }
        }
                x = a - b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla - llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("subtract", return NULL)
            result = ((double)a) - (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
}
#endif

/* SetItemInt */
              static CYTHON_INLINE int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (!j) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v, int is_list,
                                               CYTHON_NCP_UNUSED int wraparound, CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely((n >= 0) & (n < PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return -1;
                    PyErr_Clear();
                }
            }
            return m->sq_ass_item(o, i, v);
        }
    }
#else
#if CYTHON_COMPILING_IN_PYPY
    if (is_list || (PySequence_Check(o) && !PyDict_Check(o))) {
#else
    if (is_list || PySequence_Check(o)) {
#endif
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

/* ExtTypeTest */
                static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* BytesEquals */
                static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
                static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* SaveResetException */
                #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* GetException */
                #if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
#endif
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* PyFloatBinop */
                  #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_EqObjC(PyObject *op1, PyObject *op2, double floatval, CYTHON_UNUSED int inplace) {
    const double b = floatval;
    double a;
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    if (likely(PyFloat_CheckExact(op1))) {
        a = PyFloat_AS_DOUBLE(op1);
    } else
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        a = (double) PyInt_AS_LONG(op1);
    } else
    #endif
    if (likely(PyLong_CheckExact(op1))) {
        #if CYTHON_USE_PYLONG_INTERNALS
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        switch (size) {
            case  0: a = 0.0; break;
            case -1: a = -(double) digits[0]; break;
            case  1: a = (double) digits[0]; break;
            case -2:
            case 2:
                if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (1 * PyLong_SHIFT < 53))) {
                    a = (double) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53) || (a < (double) (1L<<53))) {
                        if (size == -2)
                            a = -a;
                        break;
                    }
                }
            case -3:
            case 3:
                if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53))) {
                    a = (double) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53) || (a < (double) (1L<<53))) {
                        if (size == -3)
                            a = -a;
                        break;
                    }
                }
            case -4:
            case 4:
                if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53))) {
                    a = (double) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (4 * PyLong_SHIFT < 53) || (a < (double) (1L<<53))) {
                        if (size == -4)
                            a = -a;
                        break;
                    }
                }
            default:
        #else
        {
        #endif
            return PyFloat_Type.tp_richcompare(op2, op1, Py_EQ);
        }
    } else {
        return PyObject_RichCompare(op1, op2, Py_EQ);
    }
        if (a == b) {
            Py_RETURN_TRUE;
        } else {
            Py_RETURN_FALSE;
        }
}
#endif

/* PyIntBinop */
                    #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* Import */
                    static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
                    static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* PyIntFromDouble */
                    #if PY_MAJOR_VERSION < 3
static CYTHON_INLINE PyObject* __Pyx_PyInt_FromDouble(double value) {
    if (value >= (double)LONG_MIN && value <= (double)LONG_MAX) {
        return PyInt_FromLong((long)value);
    }
    return PyLong_FromDouble(value);
}
#endif

/* PyIntBinop */
                    #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) {
            Py_RETURN_TRUE;
        } else {
            Py_RETURN_FALSE;
        }
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a;
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                #if PyLong_SHIFT < 30 && PyLong_SHIFT != 15
                default: return PyLong_Type.tp_richcompare(op1, op2, Py_EQ);
                #else
                default: Py_RETURN_FALSE;
                #endif
            }
        }
            if (a == b) {
                Py_RETURN_TRUE;
            } else {
                Py_RETURN_FALSE;
            }
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            if ((double)a == (double)b) {
                Py_RETURN_TRUE;
            } else {
                Py_RETURN_FALSE;
            }
    }
    return PyObject_RichCompare(op1, op2, Py_EQ);
}
#endif

/* PyObjectCallMethod1 */
                    static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method, *result = NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto done;
#if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *args;
            PyObject *function = PyMethod_GET_FUNCTION(method);
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(function)) {
                PyObject *args[2] = {self, arg};
                result = __Pyx_PyFunction_FastCall(function, args, 2);
                goto done;
            }
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(function)) {
                PyObject *args[2] = {self, arg};
                result = __Pyx_PyCFunction_FastCall(function, args, 2);
                goto done;
            }
            #endif
            args = PyTuple_New(2);
            if (unlikely(!args)) goto done;
            Py_INCREF(self);
            PyTuple_SET_ITEM(args, 0, self);
            Py_INCREF(arg);
            PyTuple_SET_ITEM(args, 1, arg);
            Py_INCREF(function);
            Py_DECREF(method); method = NULL;
            result = __Pyx_PyObject_Call(function, args, NULL);
            Py_DECREF(args);
            Py_DECREF(function);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallOneArg(method, arg);
done:
    Py_XDECREF(method);
    return result;
}

/* append */
                    static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (unlikely(__Pyx_PyList_Append(L, x) < 0)) return -1;
    } else {
        PyObject* retval = __Pyx_PyObject_CallMethod1(L, __pyx_n_s_append, x);
        if (unlikely(!retval))
            return -1;
        Py_DECREF(retval);
    }
    return 0;
}

/* PyErrFetchRestore */
                    #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
                    #if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* RaiseTooManyValuesToUnpack */
                      static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
                      static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* RaiseNoneIterError */
                      static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* PyErrExceptionMatches */
                      #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    return PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* SetVTable */
                      static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* FetchCommonType */
                      static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunction */
                      static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(__pyx_CyFunctionObject, func.m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_New(PyTypeObject *type, PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    __pyx_CyFunctionObject *op = PyObject_GC_New(__pyx_CyFunctionObject, type);
    if (op == NULL)
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    PyObject_GC_Track(op);
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0 = PySequence_ITEM(arg, 0);
                if (unlikely(!arg0)) return NULL;
                result = (*meth)(self, arg0);
                Py_DECREF(arg0);
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (__pyx_CyFunctionType == NULL) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (!m->defaults)
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CalculateMetaclass */
                          static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

/* Py3ClassCreate */
                          static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

/* CodeObjectCache */
                          static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
                          #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntToPy */
                          static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPyVerify */
                          #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
                          static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
                          static CYTHON_INLINE PyObject* __Pyx_PyInt_From_Py_intptr_t(Py_intptr_t value) {
    const Py_intptr_t neg_one = (Py_intptr_t) -1, const_zero = (Py_intptr_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(Py_intptr_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(Py_intptr_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(Py_intptr_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(Py_intptr_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(Py_intptr_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(Py_intptr_t),
                                     little, !is_unsigned);
    }
}

/* Print */
                          #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}
static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    int i;
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        PyObject* v;
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                goto error;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            goto error;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0) {
                switch (s[len-1]) {
                    case ' ': break;
                    case '\f': case '\r': case '\n': case '\t': case '\v':
                        PyFile_SoftSpace(f, 0);
                        break;
                    default:  break;
                }
            }
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            goto error;
        PyFile_SoftSpace(f, 0);
    }
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
}
#else
static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = PyObject_GetAttr(__pyx_b, __pyx_n_s_print);
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItem(kwargs, __pyx_n_s_file, stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItem(kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItem(__pyx_print_kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}
#endif

/* Declarations */
                          #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
                          #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = 1.0 / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = 1.0 / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0, -1);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
                          #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
                          #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = 1.0 / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = 1.0 / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0, -1);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* CIntToPy */
                          static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value) {
    const enum NPY_TYPES neg_one = (enum NPY_TYPES) -1, const_zero = (enum NPY_TYPES) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum NPY_TYPES) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum NPY_TYPES) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NPY_TYPES) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum NPY_TYPES),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
                          static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
                          static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
                          static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CheckBinaryVersion */
                          static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* ModuleImport */
                          #ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

/* TypeImport */
                          #ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

/* InitStrings */
                          static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
  #else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
  #endif
#else
  res = PyNumber_Int(x);
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
