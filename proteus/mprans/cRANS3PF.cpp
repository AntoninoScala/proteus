/* Generated by Cython 0.25.2 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_25_2"
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x03030000 || (PY_MAJOR_VERSION == 2 && PY_VERSION_HEX >= 0x02070000)
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_FASTCALL
  #define METH_FASTCALL 0x80
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject **args,
                                              Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__mprans__cRANS3PF
#define __PYX_HAVE_API__mprans__cRANS3PF
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include "numpy/arrayobject.h"
#include "numpy/ufuncobject.h"
#include "mprans/RANS3PF.h"
#include "mprans/RANS3PF2D.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER) && defined (_M_X64)
    #define __Pyx_sst_abs(value) _abs64(value)
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "proteus/mprans/cRANS3PF.pyx",
  "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd",
  "darwin/lib/python2.7/site-packages/Cython/Includes/cpython/type.pxd",
};

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":725
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":726
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":727
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":728
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":732
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":733
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":734
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":735
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":739
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":740
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":749
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":750
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":751
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":753
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":754
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":755
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":757
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":758
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":760
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":761
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":762
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);


/*--- Type declarations ---*/
struct __pyx_obj_6mprans_8cRANS3PF_RANS3PF;
struct __pyx_obj_6mprans_8cRANS3PF_RANS3PF2D;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":764
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":765
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":766
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":768
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;

/* "mprans/cRANS3PF.pyx":893
 * 
 * 
 * cdef class RANS3PF:             # <<<<<<<<<<<<<<
 *     cdef cppRANS3PF_base * thisptr
 * 
 */
struct __pyx_obj_6mprans_8cRANS3PF_RANS3PF {
  PyObject_HEAD
  proteus::cppRANS3PF_base *thisptr;
};


/* "mprans/cRANS3PF.pyx":3434
 *                                      double angFriction)
 * 
 * cdef class RANS3PF2D:             # <<<<<<<<<<<<<<
 *     cdef cppRANS3PF2D_base * thisptr
 * 
 */
struct __pyx_obj_6mprans_8cRANS3PF_RANS3PF2D {
  PyObject_HEAD
  proteus::cppRANS3PF2D_base *thisptr;
};


/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* ArgTypeTest.proto */
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact);

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = PyThreadState_GET();
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            PyObject* args = PyTuple_Pack(1, key);
            if (likely(args))
                PyErr_SetObject(PyExc_KeyError, args);
            Py_XDECREF(args);
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#else
    #define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#endif

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* PyIdentifierFromString.proto */
#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

/* ModuleImport.proto */
static PyObject *__Pyx_ImportModule(const char *name);

/* TypeImport.proto */
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;
static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *, char *, char *, int *); /*proto*/

/* Module declarations from 'mprans.cRANS3PF' */
static PyTypeObject *__pyx_ptype_6mprans_8cRANS3PF_RANS3PF = 0;
static PyTypeObject *__pyx_ptype_6mprans_8cRANS3PF_RANS3PF2D = 0;
#define __Pyx_MODULE_NAME "mprans.cRANS3PF"
int __pyx_module_is_main_mprans__cRANS3PF = 0;

/* Implementation of 'mprans.cRANS3PF' */
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_ImportError;
static const char __pyx_k_g[] = "g";
static const char __pyx_k_Cx[] = "Cx";
static const char __pyx_k_Cy[] = "Cy";
static const char __pyx_k_Cz[] = "Cz";
static const char __pyx_k_ML[] = "ML";
static const char __pyx_k_cE[] = "cE";
static const char __pyx_k_dt[] = "dt";
static const char __pyx_k_eR[] = "eR";
static const char __pyx_k_vf[] = "vf";
static const char __pyx_k_C3e[] = "C3e";
static const char __pyx_k_C4e[] = "C4e";
static const char __pyx_k_C_b[] = "C_b";
static const char __pyx_k_phi[] = "phi";
static const char __pyx_k_q_p[] = "q_p";
static const char __pyx_k_q_x[] = "q_x";
static const char __pyx_k_C_dc[] = "C_dc";
static const char __pyx_k_C_dg[] = "C_dg";
static const char __pyx_k_cMax[] = "cMax";
static const char __pyx_k_flux[] = "flux";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_nu_0[] = "nu_0";
static const char __pyx_k_nu_1[] = "nu_1";
static const char __pyx_k_q_dV[] = "q_dV";
static const char __pyx_k_q_nu[] = "q_nu";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_PSTAB[] = "PSTAB";
static const char __pyx_k_grain[] = "grain";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_p_dof[] = "p_dof";
static const char __pyx_k_p_l2g[] = "p_l2g";
static const char __pyx_k_q_cfl[] = "q_cfl";
static const char __pyx_k_q_rho[] = "q_rho";
static const char __pyx_k_q_vos[] = "q_vos";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_rho_0[] = "rho_0";
static const char __pyx_k_rho_1[] = "rho_1";
static const char __pyx_k_sigma[] = "sigma";
static const char __pyx_k_u_dof[] = "u_dof";
static const char __pyx_k_useVF[] = "useVF";
static const char __pyx_k_v_dof[] = "v_dof";
static const char __pyx_k_w_dof[] = "w_dof";
static const char __pyx_k_Cd_sge[] = "Cd_sge";
static const char __pyx_k_Ct_sge[] = "Ct_sge";
static const char __pyx_k_aDarcy[] = "aDarcy";
static const char __pyx_k_dS_ref[] = "dS_ref";
static const char __pyx_k_dV_ref[] = "dV_ref";
static const char __pyx_k_ebqe_p[] = "ebqe_p";
static const char __pyx_k_forcex[] = "forcex";
static const char __pyx_k_forcey[] = "forcey";
static const char __pyx_k_forcez[] = "forcez";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_q_divU[] = "q_divU";
static const char __pyx_k_sigmaC[] = "sigmaC";
static const char __pyx_k_ebqe_nu[] = "ebqe_nu";
static const char __pyx_k_hFactor[] = "hFactor";
static const char __pyx_k_vel_l2g[] = "vel_l2g";
static const char __pyx_k_vos_dof[] = "vos_dof";
static const char __pyx_k_alphaBDF[] = "alphaBDF";
static const char __pyx_k_ebqe_rho[] = "ebqe_rho";
static const char __pyx_k_fContact[] = "fContact";
static const char __pyx_k_mContact[] = "mContact";
static const char __pyx_k_mesh_dof[] = "mesh_dof";
static const char __pyx_k_mesh_l2g[] = "mesh_l2g";
static const char __pyx_k_muAtCell[] = "muAtCell";
static const char __pyx_k_nContact[] = "nContact";
static const char __pyx_k_nSpaceIn[] = "nSpaceIn";
static const char __pyx_k_offset_p[] = "offset_p";
static const char __pyx_k_offset_u[] = "offset_u";
static const char __pyx_k_offset_v[] = "offset_v";
static const char __pyx_k_offset_w[] = "offset_w";
static const char __pyx_k_q_grad_p[] = "q_grad_p";
static const char __pyx_k_q_grad_u[] = "q_grad_u";
static const char __pyx_k_q_grad_v[] = "q_grad_v";
static const char __pyx_k_q_grad_w[] = "q_grad_w";
static const char __pyx_k_stride_p[] = "stride_p";
static const char __pyx_k_stride_u[] = "stride_u";
static const char __pyx_k_stride_v[] = "stride_v";
static const char __pyx_k_stride_w[] = "stride_w";
static const char __pyx_k_useRBLES[] = "useRBLES";
static const char __pyx_k_betaForch[] = "betaForch";
static const char __pyx_k_eps_solid[] = "eps_solid";
static const char __pyx_k_kappa_phi[] = "kappa_phi";
static const char __pyx_k_phi_solid[] = "phi_solid";
static const char __pyx_k_q_dV_last[] = "q_dV_last";
static const char __pyx_k_q_dvos_dt[] = "q_dvos_dt";
static const char __pyx_k_quantDOFs[] = "quantDOFs";
static const char __pyx_k_rhoAtCell[] = "rhoAtCell";
static const char __pyx_k_u_dof_old[] = "u_dof_old";
static const char __pyx_k_v_dof_old[] = "v_dof_old";
static const char __pyx_k_w_dof_old[] = "w_dof_old";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_epsFact_mu[] = "epsFact_mu";
static const char __pyx_k_frFraction[] = "frFraction";
static const char __pyx_k_nParticles[] = "nParticles";
static const char __pyx_k_netMoments[] = "netMoments";
static const char __pyx_k_normal_phi[] = "normal_phi";
static const char __pyx_k_normal_ref[] = "normal_ref";
static const char __pyx_k_p_test_ref[] = "p_test_ref";
static const char __pyx_k_packMargin[] = "packMargin";
static const char __pyx_k_q_dragBeta[] = "q_dragBeta";
static const char __pyx_k_q_mass_adv[] = "q_mass_adv";
static const char __pyx_k_q_velocity[] = "q_velocity";
static const char __pyx_k_useMetrics[] = "useMetrics";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_angFriction[] = "angFriction";
static const char __pyx_k_barycenters[] = "barycenters";
static const char __pyx_k_ebqe_grad_p[] = "ebqe_grad_p";
static const char __pyx_k_ebqe_grad_u[] = "ebqe_grad_u";
static const char __pyx_k_ebqe_grad_v[] = "ebqe_grad_v";
static const char __pyx_k_ebqe_grad_w[] = "ebqe_grad_w";
static const char __pyx_k_ebqe_vf_ext[] = "ebqe_vf_ext";
static const char __pyx_k_epsFact_rho[] = "epsFact_rho";
static const char __pyx_k_maxFraction[] = "maxFraction";
static const char __pyx_k_netForces_p[] = "netForces_p";
static const char __pyx_k_netForces_v[] = "netForces_v";
static const char __pyx_k_p_trial_ref[] = "p_trial_ref";
static const char __pyx_k_q_dragAlpha[] = "q_dragAlpha";
static const char __pyx_k_q_mom_u_acc[] = "q_mom_u_acc";
static const char __pyx_k_q_mom_v_acc[] = "q_mom_v_acc";
static const char __pyx_k_q_mom_w_acc[] = "q_mom_w_acc";
static const char __pyx_k_q_numDiff_u[] = "q_numDiff_u";
static const char __pyx_k_q_numDiff_v[] = "q_numDiff_v";
static const char __pyx_k_q_numDiff_w[] = "q_numDiff_w";
static const char __pyx_k_wettedAreas[] = "wettedAreas";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_ebqe_phi_ext[] = "ebqe_phi_ext";
static const char __pyx_k_ebqe_vos_ext[] = "ebqe_vos_ext";
static const char __pyx_k_elementFlags[] = "elementFlags";
static const char __pyx_k_packFraction[] = "packFraction";
static const char __pyx_k_q_turb_var_0[] = "q_turb_var_0";
static const char __pyx_k_q_turb_var_1[] = "q_turb_var_1";
static const char __pyx_k_vel_test_ref[] = "vel_test_ref";
static const char __pyx_k_MOVING_DOMAIN[] = "MOVING_DOMAIN";
static const char __pyx_k_boundaryFlags[] = "boundaryFlags";
static const char __pyx_k_ebqe_bc_p_ext[] = "ebqe_bc_p_ext";
static const char __pyx_k_ebqe_bc_u_ext[] = "ebqe_bc_u_ext";
static const char __pyx_k_ebqe_bc_v_ext[] = "ebqe_bc_v_ext";
static const char __pyx_k_ebqe_bc_w_ext[] = "ebqe_bc_w_ext";
static const char __pyx_k_ebqe_velocity[] = "ebqe_velocity";
static const char __pyx_k_numDOFsPerEqn[] = "numDOFsPerEqn";
static const char __pyx_k_particle_beta[] = "particle_beta";
static const char __pyx_k_q_mass_source[] = "q_mass_source";
static const char __pyx_k_u_dof_old_old[] = "u_dof_old_old";
static const char __pyx_k_v_dof_old_old[] = "v_dof_old_old";
static const char __pyx_k_vel_trial_ref[] = "vel_trial_ref";
static const char __pyx_k_w_dof_old_old[] = "w_dof_old_old";
static const char __pyx_k_CompKernelFlag[] = "CompKernelFlag";
static const char __pyx_k_areaRefElement[] = "areaRefElement";
static const char __pyx_k_bc_ebqe_vf_ext[] = "bc_ebqe_vf_ext";
static const char __pyx_k_globalJacobian[] = "globalJacobian";
static const char __pyx_k_globalResidual[] = "globalResidual";
static const char __pyx_k_mesh_trial_ref[] = "mesh_trial_ref";
static const char __pyx_k_particle_alpha[] = "particle_alpha";
static const char __pyx_k_q_velocity_sge[] = "q_velocity_sge";
static const char __pyx_k_bc_ebqe_phi_ext[] = "bc_ebqe_phi_ext";
static const char __pyx_k_boundaryJac_ref[] = "boundaryJac_ref";
static const char __pyx_k_ebqe_turb_var_0[] = "ebqe_turb_var_0";
static const char __pyx_k_ebqe_turb_var_1[] = "ebqe_turb_var_1";
static const char __pyx_k_elementDiameter[] = "elementDiameter";
static const char __pyx_k_isDOFBoundary_p[] = "isDOFBoundary_p";
static const char __pyx_k_isDOFBoundary_u[] = "isDOFBoundary_u";
static const char __pyx_k_isDOFBoundary_v[] = "isDOFBoundary_v";
static const char __pyx_k_isDOFBoundary_w[] = "isDOFBoundary_w";
static const char __pyx_k_maxSpeed2AtCell[] = "maxSpeed2AtCell";
static const char __pyx_k_nElements_owned[] = "nElements_owned";
static const char __pyx_k_p_grad_test_ref[] = "p_grad_test_ref";
static const char __pyx_k_velocityAverage[] = "velocityAverage";
static const char __pyx_k_eb_adjoint_sigma[] = "eb_adjoint_sigma";
static const char __pyx_k_ebqe_penalty_ext[] = "ebqe_penalty_ext";
static const char __pyx_k_maxSpeed2AtOmega[] = "maxSpeed2AtOmega";
static const char __pyx_k_nElements_global[] = "nElements_global";
static const char __pyx_k_order_polynomial[] = "order_polynomial";
static const char __pyx_k_p_grad_trial_ref[] = "p_grad_trial_ref";
static const char __pyx_k_p_test_trace_ref[] = "p_test_trace_ref";
static const char __pyx_k_particle_epsFact[] = "particle_epsFact";
static const char __pyx_k_particle_nitsche[] = "particle_nitsche";
static const char __pyx_k_q_eddy_viscosity[] = "q_eddy_viscosity";
static const char __pyx_k_q_numDiff_u_last[] = "q_numDiff_u_last";
static const char __pyx_k_q_numDiff_v_last[] = "q_numDiff_v_last";
static const char __pyx_k_q_numDiff_w_last[] = "q_numDiff_w_last";
static const char __pyx_k_q_velocity_solid[] = "q_velocity_solid";
static const char __pyx_k_csrRowIndeces_p_p[] = "csrRowIndeces_p_p";
static const char __pyx_k_csrRowIndeces_p_u[] = "csrRowIndeces_p_u";
static const char __pyx_k_csrRowIndeces_p_v[] = "csrRowIndeces_p_v";
static const char __pyx_k_csrRowIndeces_p_w[] = "csrRowIndeces_p_w";
static const char __pyx_k_csrRowIndeces_u_p[] = "csrRowIndeces_u_p";
static const char __pyx_k_csrRowIndeces_u_u[] = "csrRowIndeces_u_u";
static const char __pyx_k_csrRowIndeces_u_v[] = "csrRowIndeces_u_v";
static const char __pyx_k_csrRowIndeces_u_w[] = "csrRowIndeces_u_w";
static const char __pyx_k_csrRowIndeces_v_p[] = "csrRowIndeces_v_p";
static const char __pyx_k_csrRowIndeces_v_u[] = "csrRowIndeces_v_u";
static const char __pyx_k_csrRowIndeces_v_v[] = "csrRowIndeces_v_v";
static const char __pyx_k_csrRowIndeces_v_w[] = "csrRowIndeces_v_w";
static const char __pyx_k_csrRowIndeces_w_p[] = "csrRowIndeces_w_p";
static const char __pyx_k_csrRowIndeces_w_u[] = "csrRowIndeces_w_u";
static const char __pyx_k_csrRowIndeces_w_v[] = "csrRowIndeces_w_v";
static const char __pyx_k_csrRowIndeces_w_w[] = "csrRowIndeces_w_w";
static const char __pyx_k_elementResidual_p[] = "elementResidual_p";
static const char __pyx_k_mesh_velocity_dof[] = "mesh_velocity_dof";
static const char __pyx_k_p_trial_trace_ref[] = "p_trial_trace_ref";
static const char __pyx_k_q_turb_var_grad_0[] = "q_turb_var_grad_0";
static const char __pyx_k_sdInfo_u_u_colind[] = "sdInfo_u_u_colind";
static const char __pyx_k_sdInfo_u_u_rowptr[] = "sdInfo_u_u_rowptr";
static const char __pyx_k_sdInfo_u_v_colind[] = "sdInfo_u_v_colind";
static const char __pyx_k_sdInfo_u_v_rowptr[] = "sdInfo_u_v_rowptr";
static const char __pyx_k_sdInfo_u_w_colind[] = "sdInfo_u_w_colind";
static const char __pyx_k_sdInfo_u_w_rowptr[] = "sdInfo_u_w_rowptr";
static const char __pyx_k_sdInfo_v_u_colind[] = "sdInfo_v_u_colind";
static const char __pyx_k_sdInfo_v_u_rowptr[] = "sdInfo_v_u_rowptr";
static const char __pyx_k_sdInfo_v_v_colind[] = "sdInfo_v_v_colind";
static const char __pyx_k_sdInfo_v_v_rowptr[] = "sdInfo_v_v_rowptr";
static const char __pyx_k_sdInfo_v_w_colind[] = "sdInfo_v_w_colind";
static const char __pyx_k_sdInfo_v_w_rowptr[] = "sdInfo_v_w_rowptr";
static const char __pyx_k_sdInfo_w_u_colind[] = "sdInfo_w_u_colind";
static const char __pyx_k_sdInfo_w_u_rowptr[] = "sdInfo_w_u_rowptr";
static const char __pyx_k_sdInfo_w_v_colind[] = "sdInfo_w_v_colind";
static const char __pyx_k_sdInfo_w_v_rowptr[] = "sdInfo_w_v_rowptr";
static const char __pyx_k_sdInfo_w_w_colind[] = "sdInfo_w_w_colind";
static const char __pyx_k_sdInfo_w_w_rowptr[] = "sdInfo_w_w_rowptr";
static const char __pyx_k_vel_grad_test_ref[] = "vel_grad_test_ref";
static const char __pyx_k_KILL_PRESSURE_TERM[] = "KILL_PRESSURE_TERM";
static const char __pyx_k_STABILIZATION_TYPE[] = "STABILIZATION_TYPE";
static const char __pyx_k_ebqe_kappa_phi_ext[] = "ebqe_kappa_phi_ext";
static const char __pyx_k_ebqe_velocity_star[] = "ebqe_velocity_star";
static const char __pyx_k_nodeDiametersArray[] = "nodeDiametersArray";
static const char __pyx_k_particle_centroids[] = "particle_centroids";
static const char __pyx_k_particle_netForces[] = "particle_netForces";
static const char __pyx_k_vel_grad_trial_ref[] = "vel_grad_trial_ref";
static const char __pyx_k_vel_hess_trial_ref[] = "vel_hess_trial_ref";
static const char __pyx_k_vel_test_trace_ref[] = "vel_test_trace_ref";
static const char __pyx_k_density_as_function[] = "density_as_function";
static const char __pyx_k_ebqe_normal_phi_ext[] = "ebqe_normal_phi_ext";
static const char __pyx_k_mesh_grad_trial_ref[] = "mesh_grad_trial_ref";
static const char __pyx_k_nDOF_test_elementIn[] = "nDOF_test_elementIn";
static const char __pyx_k_particle_netMoments[] = "particle_netMoments";
static const char __pyx_k_particle_velocities[] = "particle_velocities";
static const char __pyx_k_smagorinskyConstant[] = "smagorinskyConstant";
static const char __pyx_k_vel_trial_trace_ref[] = "vel_trial_trace_ref";
static const char __pyx_k_csrColumnOffsets_p_p[] = "csrColumnOffsets_p_p";
static const char __pyx_k_csrColumnOffsets_p_u[] = "csrColumnOffsets_p_u";
static const char __pyx_k_csrColumnOffsets_p_v[] = "csrColumnOffsets_p_v";
static const char __pyx_k_csrColumnOffsets_p_w[] = "csrColumnOffsets_p_w";
static const char __pyx_k_csrColumnOffsets_u_p[] = "csrColumnOffsets_u_p";
static const char __pyx_k_csrColumnOffsets_u_u[] = "csrColumnOffsets_u_u";
static const char __pyx_k_csrColumnOffsets_u_v[] = "csrColumnOffsets_u_v";
static const char __pyx_k_csrColumnOffsets_u_w[] = "csrColumnOffsets_u_w";
static const char __pyx_k_csrColumnOffsets_v_p[] = "csrColumnOffsets_v_p";
static const char __pyx_k_csrColumnOffsets_v_u[] = "csrColumnOffsets_v_u";
static const char __pyx_k_csrColumnOffsets_v_v[] = "csrColumnOffsets_v_v";
static const char __pyx_k_csrColumnOffsets_v_w[] = "csrColumnOffsets_v_w";
static const char __pyx_k_csrColumnOffsets_w_p[] = "csrColumnOffsets_w_p";
static const char __pyx_k_csrColumnOffsets_w_u[] = "csrColumnOffsets_w_u";
static const char __pyx_k_csrColumnOffsets_w_v[] = "csrColumnOffsets_w_v";
static const char __pyx_k_csrColumnOffsets_w_w[] = "csrColumnOffsets_w_w";
static const char __pyx_k_getCSRrepresentation[] = "getCSRrepresentation";
static const char __pyx_k_mesh_trial_trace_ref[] = "mesh_trial_trace_ref";
static const char __pyx_k_nDOF_trial_elementIn[] = "nDOF_trial_elementIn";
static const char __pyx_k_particle_surfaceArea[] = "particle_surfaceArea";
static const char __pyx_k_q_mom_u_acc_beta_bdf[] = "q_mom_u_acc_beta_bdf";
static const char __pyx_k_q_mom_v_acc_beta_bdf[] = "q_mom_v_acc_beta_bdf";
static const char __pyx_k_q_mom_w_acc_beta_bdf[] = "q_mom_w_acc_beta_bdf";
static const char __pyx_k_ebqe_bc_flux_mass_ext[] = "ebqe_bc_flux_mass_ext";
static const char __pyx_k_entropyResidualAtCell[] = "entropyResidualAtCell";
static const char __pyx_k_p_grad_test_trace_ref[] = "p_grad_test_trace_ref";
static const char __pyx_k_csrRowIndeces_DofLoops[] = "csrRowIndeces_DofLoops";
static const char __pyx_k_p_grad_trial_trace_ref[] = "p_grad_trial_trace_ref";
static const char __pyx_k_turbulenceClosureModel[] = "turbulenceClosureModel";
static const char __pyx_k_csrColumnOffsets_eb_p_p[] = "csrColumnOffsets_eb_p_p";
static const char __pyx_k_csrColumnOffsets_eb_p_u[] = "csrColumnOffsets_eb_p_u";
static const char __pyx_k_csrColumnOffsets_eb_p_v[] = "csrColumnOffsets_eb_p_v";
static const char __pyx_k_csrColumnOffsets_eb_p_w[] = "csrColumnOffsets_eb_p_w";
static const char __pyx_k_csrColumnOffsets_eb_u_p[] = "csrColumnOffsets_eb_u_p";
static const char __pyx_k_csrColumnOffsets_eb_u_u[] = "csrColumnOffsets_eb_u_u";
static const char __pyx_k_csrColumnOffsets_eb_u_v[] = "csrColumnOffsets_eb_u_v";
static const char __pyx_k_csrColumnOffsets_eb_u_w[] = "csrColumnOffsets_eb_u_w";
static const char __pyx_k_csrColumnOffsets_eb_v_p[] = "csrColumnOffsets_eb_v_p";
static const char __pyx_k_csrColumnOffsets_eb_v_u[] = "csrColumnOffsets_eb_v_u";
static const char __pyx_k_csrColumnOffsets_eb_v_v[] = "csrColumnOffsets_eb_v_v";
static const char __pyx_k_csrColumnOffsets_eb_v_w[] = "csrColumnOffsets_eb_v_w";
static const char __pyx_k_csrColumnOffsets_eb_w_p[] = "csrColumnOffsets_eb_w_p";
static const char __pyx_k_csrColumnOffsets_eb_w_u[] = "csrColumnOffsets_eb_w_u";
static const char __pyx_k_csrColumnOffsets_eb_w_v[] = "csrColumnOffsets_eb_w_v";
static const char __pyx_k_csrColumnOffsets_eb_w_w[] = "csrColumnOffsets_eb_w_w";
static const char __pyx_k_ebqe_bc_flux_u_diff_ext[] = "ebqe_bc_flux_u_diff_ext";
static const char __pyx_k_ebqe_bc_flux_v_diff_ext[] = "ebqe_bc_flux_v_diff_ext";
static const char __pyx_k_ebqe_bc_flux_w_diff_ext[] = "ebqe_bc_flux_w_diff_ext";
static const char __pyx_k_vel_grad_test_trace_ref[] = "vel_grad_test_trace_ref";
static const char __pyx_k_ebqe_density_as_function[] = "ebqe_density_as_function";
static const char __pyx_k_nElementBoundaries_owned[] = "nElementBoundaries_owned";
static const char __pyx_k_vel_grad_trial_trace_ref[] = "vel_grad_trial_trace_ref";
static const char __pyx_k_csrColumnOffsets_DofLoops[] = "csrColumnOffsets_DofLoops";
static const char __pyx_k_isAdvectiveFluxBoundary_p[] = "isAdvectiveFluxBoundary_p";
static const char __pyx_k_isAdvectiveFluxBoundary_u[] = "isAdvectiveFluxBoundary_u";
static const char __pyx_k_isAdvectiveFluxBoundary_v[] = "isAdvectiveFluxBoundary_v";
static const char __pyx_k_isAdvectiveFluxBoundary_w[] = "isAdvectiveFluxBoundary_w";
static const char __pyx_k_isDiffusiveFluxBoundary_u[] = "isDiffusiveFluxBoundary_u";
static const char __pyx_k_isDiffusiveFluxBoundary_v[] = "isDiffusiveFluxBoundary_v";
static const char __pyx_k_isDiffusiveFluxBoundary_w[] = "isDiffusiveFluxBoundary_w";
static const char __pyx_k_mesh_grad_trial_trace_ref[] = "mesh_grad_trial_trace_ref";
static const char __pyx_k_nDOF_mesh_trial_elementIn[] = "nDOF_mesh_trial_elementIn";
static const char __pyx_k_particle_penalty_constant[] = "particle_penalty_constant";
static const char __pyx_k_particle_signed_distances[] = "particle_signed_distances";
static const char __pyx_k_ebqe_bc_flux_mom_u_adv_ext[] = "ebqe_bc_flux_mom_u_adv_ext";
static const char __pyx_k_ebqe_bc_flux_mom_v_adv_ext[] = "ebqe_bc_flux_mom_v_adv_ext";
static const char __pyx_k_ebqe_bc_flux_mom_w_adv_ext[] = "ebqe_bc_flux_mom_w_adv_ext";
static const char __pyx_k_nQuadraturePoints_elementIn[] = "nQuadraturePoints_elementIn";
static const char __pyx_k_ndarray_is_not_C_contiguous[] = "ndarray is not C contiguous";
static const char __pyx_k_elementBoundaryElementsArray[] = "elementBoundaryElementsArray";
static const char __pyx_k_dynamic_viscosity_as_function[] = "dynamic_viscosity_as_function";
static const char __pyx_k_exteriorElementBoundariesArray[] = "exteriorElementBoundariesArray";
static const char __pyx_k_interiorElementBoundariesArray[] = "interiorElementBoundariesArray";
static const char __pyx_k_MATERIAL_PARAMETERS_AS_FUNCTION[] = "MATERIAL_PARAMETERS_AS_FUNCTION";
static const char __pyx_k_numpy_core_multiarray_failed_to[] = "numpy.core.multiarray failed to import";
static const char __pyx_k_unknown_dtype_code_in_numpy_pxd[] = "unknown dtype code in numpy.pxd (%d)";
static const char __pyx_k_Format_string_allocated_too_shor[] = "Format string allocated too short, see comment in numpy.pxd";
static const char __pyx_k_Non_native_byte_order_not_suppor[] = "Non-native byte order not supported";
static const char __pyx_k_ebqe_dynamic_viscosity_as_functi[] = "ebqe_dynamic_viscosity_as_function";
static const char __pyx_k_elementBoundaryLocalElementBound[] = "elementBoundaryLocalElementBoundariesArray";
static const char __pyx_k_nExteriorElementBoundaries_globa[] = "nExteriorElementBoundaries_global";
static const char __pyx_k_nInteriorElementBoundaries_globa[] = "nInteriorElementBoundaries_global";
static const char __pyx_k_nQuadraturePoints_elementBoundar[] = "nQuadraturePoints_elementBoundaryIn";
static const char __pyx_k_ndarray_is_not_Fortran_contiguou[] = "ndarray is not Fortran contiguous";
static const char __pyx_k_numpy_core_umath_failed_to_impor[] = "numpy.core.umath failed to import";
static const char __pyx_k_particle_signed_distance_normals[] = "particle_signed_distance_normals";
static const char __pyx_k_Format_string_allocated_too_shor_2[] = "Format string allocated too short.";
static PyObject *__pyx_n_s_C3e;
static PyObject *__pyx_n_s_C4e;
static PyObject *__pyx_n_s_C_b;
static PyObject *__pyx_n_s_C_dc;
static PyObject *__pyx_n_s_C_dg;
static PyObject *__pyx_n_s_Cd_sge;
static PyObject *__pyx_n_s_CompKernelFlag;
static PyObject *__pyx_n_s_Ct_sge;
static PyObject *__pyx_n_s_Cx;
static PyObject *__pyx_n_s_Cy;
static PyObject *__pyx_n_s_Cz;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor_2;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_n_s_KILL_PRESSURE_TERM;
static PyObject *__pyx_n_s_MATERIAL_PARAMETERS_AS_FUNCTION;
static PyObject *__pyx_n_s_ML;
static PyObject *__pyx_n_s_MOVING_DOMAIN;
static PyObject *__pyx_kp_u_Non_native_byte_order_not_suppor;
static PyObject *__pyx_n_s_PSTAB;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_n_s_STABILIZATION_TYPE;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_aDarcy;
static PyObject *__pyx_n_s_alphaBDF;
static PyObject *__pyx_n_s_angFriction;
static PyObject *__pyx_n_s_areaRefElement;
static PyObject *__pyx_n_s_barycenters;
static PyObject *__pyx_n_s_bc_ebqe_phi_ext;
static PyObject *__pyx_n_s_bc_ebqe_vf_ext;
static PyObject *__pyx_n_s_betaForch;
static PyObject *__pyx_n_s_boundaryFlags;
static PyObject *__pyx_n_s_boundaryJac_ref;
static PyObject *__pyx_n_s_cE;
static PyObject *__pyx_n_s_cMax;
static PyObject *__pyx_n_s_csrColumnOffsets_DofLoops;
static PyObject *__pyx_n_s_csrColumnOffsets_eb_p_p;
static PyObject *__pyx_n_s_csrColumnOffsets_eb_p_u;
static PyObject *__pyx_n_s_csrColumnOffsets_eb_p_v;
static PyObject *__pyx_n_s_csrColumnOffsets_eb_p_w;
static PyObject *__pyx_n_s_csrColumnOffsets_eb_u_p;
static PyObject *__pyx_n_s_csrColumnOffsets_eb_u_u;
static PyObject *__pyx_n_s_csrColumnOffsets_eb_u_v;
static PyObject *__pyx_n_s_csrColumnOffsets_eb_u_w;
static PyObject *__pyx_n_s_csrColumnOffsets_eb_v_p;
static PyObject *__pyx_n_s_csrColumnOffsets_eb_v_u;
static PyObject *__pyx_n_s_csrColumnOffsets_eb_v_v;
static PyObject *__pyx_n_s_csrColumnOffsets_eb_v_w;
static PyObject *__pyx_n_s_csrColumnOffsets_eb_w_p;
static PyObject *__pyx_n_s_csrColumnOffsets_eb_w_u;
static PyObject *__pyx_n_s_csrColumnOffsets_eb_w_v;
static PyObject *__pyx_n_s_csrColumnOffsets_eb_w_w;
static PyObject *__pyx_n_s_csrColumnOffsets_p_p;
static PyObject *__pyx_n_s_csrColumnOffsets_p_u;
static PyObject *__pyx_n_s_csrColumnOffsets_p_v;
static PyObject *__pyx_n_s_csrColumnOffsets_p_w;
static PyObject *__pyx_n_s_csrColumnOffsets_u_p;
static PyObject *__pyx_n_s_csrColumnOffsets_u_u;
static PyObject *__pyx_n_s_csrColumnOffsets_u_v;
static PyObject *__pyx_n_s_csrColumnOffsets_u_w;
static PyObject *__pyx_n_s_csrColumnOffsets_v_p;
static PyObject *__pyx_n_s_csrColumnOffsets_v_u;
static PyObject *__pyx_n_s_csrColumnOffsets_v_v;
static PyObject *__pyx_n_s_csrColumnOffsets_v_w;
static PyObject *__pyx_n_s_csrColumnOffsets_w_p;
static PyObject *__pyx_n_s_csrColumnOffsets_w_u;
static PyObject *__pyx_n_s_csrColumnOffsets_w_v;
static PyObject *__pyx_n_s_csrColumnOffsets_w_w;
static PyObject *__pyx_n_s_csrRowIndeces_DofLoops;
static PyObject *__pyx_n_s_csrRowIndeces_p_p;
static PyObject *__pyx_n_s_csrRowIndeces_p_u;
static PyObject *__pyx_n_s_csrRowIndeces_p_v;
static PyObject *__pyx_n_s_csrRowIndeces_p_w;
static PyObject *__pyx_n_s_csrRowIndeces_u_p;
static PyObject *__pyx_n_s_csrRowIndeces_u_u;
static PyObject *__pyx_n_s_csrRowIndeces_u_v;
static PyObject *__pyx_n_s_csrRowIndeces_u_w;
static PyObject *__pyx_n_s_csrRowIndeces_v_p;
static PyObject *__pyx_n_s_csrRowIndeces_v_u;
static PyObject *__pyx_n_s_csrRowIndeces_v_v;
static PyObject *__pyx_n_s_csrRowIndeces_v_w;
static PyObject *__pyx_n_s_csrRowIndeces_w_p;
static PyObject *__pyx_n_s_csrRowIndeces_w_u;
static PyObject *__pyx_n_s_csrRowIndeces_w_v;
static PyObject *__pyx_n_s_csrRowIndeces_w_w;
static PyObject *__pyx_n_s_dS_ref;
static PyObject *__pyx_n_s_dV_ref;
static PyObject *__pyx_n_s_density_as_function;
static PyObject *__pyx_n_s_dt;
static PyObject *__pyx_n_s_dynamic_viscosity_as_function;
static PyObject *__pyx_n_s_eR;
static PyObject *__pyx_n_s_eb_adjoint_sigma;
static PyObject *__pyx_n_s_ebqe_bc_flux_mass_ext;
static PyObject *__pyx_n_s_ebqe_bc_flux_mom_u_adv_ext;
static PyObject *__pyx_n_s_ebqe_bc_flux_mom_v_adv_ext;
static PyObject *__pyx_n_s_ebqe_bc_flux_mom_w_adv_ext;
static PyObject *__pyx_n_s_ebqe_bc_flux_u_diff_ext;
static PyObject *__pyx_n_s_ebqe_bc_flux_v_diff_ext;
static PyObject *__pyx_n_s_ebqe_bc_flux_w_diff_ext;
static PyObject *__pyx_n_s_ebqe_bc_p_ext;
static PyObject *__pyx_n_s_ebqe_bc_u_ext;
static PyObject *__pyx_n_s_ebqe_bc_v_ext;
static PyObject *__pyx_n_s_ebqe_bc_w_ext;
static PyObject *__pyx_n_s_ebqe_density_as_function;
static PyObject *__pyx_n_s_ebqe_dynamic_viscosity_as_functi;
static PyObject *__pyx_n_s_ebqe_grad_p;
static PyObject *__pyx_n_s_ebqe_grad_u;
static PyObject *__pyx_n_s_ebqe_grad_v;
static PyObject *__pyx_n_s_ebqe_grad_w;
static PyObject *__pyx_n_s_ebqe_kappa_phi_ext;
static PyObject *__pyx_n_s_ebqe_normal_phi_ext;
static PyObject *__pyx_n_s_ebqe_nu;
static PyObject *__pyx_n_s_ebqe_p;
static PyObject *__pyx_n_s_ebqe_penalty_ext;
static PyObject *__pyx_n_s_ebqe_phi_ext;
static PyObject *__pyx_n_s_ebqe_rho;
static PyObject *__pyx_n_s_ebqe_turb_var_0;
static PyObject *__pyx_n_s_ebqe_turb_var_1;
static PyObject *__pyx_n_s_ebqe_velocity;
static PyObject *__pyx_n_s_ebqe_velocity_star;
static PyObject *__pyx_n_s_ebqe_vf_ext;
static PyObject *__pyx_n_s_ebqe_vos_ext;
static PyObject *__pyx_n_s_elementBoundaryElementsArray;
static PyObject *__pyx_n_s_elementBoundaryLocalElementBound;
static PyObject *__pyx_n_s_elementDiameter;
static PyObject *__pyx_n_s_elementFlags;
static PyObject *__pyx_n_s_elementResidual_p;
static PyObject *__pyx_n_s_entropyResidualAtCell;
static PyObject *__pyx_n_s_epsFact_mu;
static PyObject *__pyx_n_s_epsFact_rho;
static PyObject *__pyx_n_s_eps_solid;
static PyObject *__pyx_n_s_exteriorElementBoundariesArray;
static PyObject *__pyx_n_s_fContact;
static PyObject *__pyx_n_s_flux;
static PyObject *__pyx_n_s_forcex;
static PyObject *__pyx_n_s_forcey;
static PyObject *__pyx_n_s_forcez;
static PyObject *__pyx_n_s_frFraction;
static PyObject *__pyx_n_s_g;
static PyObject *__pyx_n_s_getCSRrepresentation;
static PyObject *__pyx_n_s_globalJacobian;
static PyObject *__pyx_n_s_globalResidual;
static PyObject *__pyx_n_s_grain;
static PyObject *__pyx_n_s_hFactor;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_interiorElementBoundariesArray;
static PyObject *__pyx_n_s_isAdvectiveFluxBoundary_p;
static PyObject *__pyx_n_s_isAdvectiveFluxBoundary_u;
static PyObject *__pyx_n_s_isAdvectiveFluxBoundary_v;
static PyObject *__pyx_n_s_isAdvectiveFluxBoundary_w;
static PyObject *__pyx_n_s_isDOFBoundary_p;
static PyObject *__pyx_n_s_isDOFBoundary_u;
static PyObject *__pyx_n_s_isDOFBoundary_v;
static PyObject *__pyx_n_s_isDOFBoundary_w;
static PyObject *__pyx_n_s_isDiffusiveFluxBoundary_u;
static PyObject *__pyx_n_s_isDiffusiveFluxBoundary_v;
static PyObject *__pyx_n_s_isDiffusiveFluxBoundary_w;
static PyObject *__pyx_n_s_kappa_phi;
static PyObject *__pyx_n_s_mContact;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_maxFraction;
static PyObject *__pyx_n_s_maxSpeed2AtCell;
static PyObject *__pyx_n_s_maxSpeed2AtOmega;
static PyObject *__pyx_n_s_mesh_dof;
static PyObject *__pyx_n_s_mesh_grad_trial_ref;
static PyObject *__pyx_n_s_mesh_grad_trial_trace_ref;
static PyObject *__pyx_n_s_mesh_l2g;
static PyObject *__pyx_n_s_mesh_trial_ref;
static PyObject *__pyx_n_s_mesh_trial_trace_ref;
static PyObject *__pyx_n_s_mesh_velocity_dof;
static PyObject *__pyx_n_s_muAtCell;
static PyObject *__pyx_n_s_nContact;
static PyObject *__pyx_n_s_nDOF_mesh_trial_elementIn;
static PyObject *__pyx_n_s_nDOF_test_elementIn;
static PyObject *__pyx_n_s_nDOF_trial_elementIn;
static PyObject *__pyx_n_s_nElementBoundaries_owned;
static PyObject *__pyx_n_s_nElements_global;
static PyObject *__pyx_n_s_nElements_owned;
static PyObject *__pyx_n_s_nExteriorElementBoundaries_globa;
static PyObject *__pyx_n_s_nInteriorElementBoundaries_globa;
static PyObject *__pyx_n_s_nParticles;
static PyObject *__pyx_n_s_nQuadraturePoints_elementBoundar;
static PyObject *__pyx_n_s_nQuadraturePoints_elementIn;
static PyObject *__pyx_n_s_nSpaceIn;
static PyObject *__pyx_kp_u_ndarray_is_not_C_contiguous;
static PyObject *__pyx_kp_u_ndarray_is_not_Fortran_contiguou;
static PyObject *__pyx_n_s_netForces_p;
static PyObject *__pyx_n_s_netForces_v;
static PyObject *__pyx_n_s_netMoments;
static PyObject *__pyx_n_s_nodeDiametersArray;
static PyObject *__pyx_n_s_normal_phi;
static PyObject *__pyx_n_s_normal_ref;
static PyObject *__pyx_n_s_nu_0;
static PyObject *__pyx_n_s_nu_1;
static PyObject *__pyx_n_s_numDOFsPerEqn;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_kp_s_numpy_core_multiarray_failed_to;
static PyObject *__pyx_kp_s_numpy_core_umath_failed_to_impor;
static PyObject *__pyx_n_s_offset_p;
static PyObject *__pyx_n_s_offset_u;
static PyObject *__pyx_n_s_offset_v;
static PyObject *__pyx_n_s_offset_w;
static PyObject *__pyx_n_s_order_polynomial;
static PyObject *__pyx_n_s_p_dof;
static PyObject *__pyx_n_s_p_grad_test_ref;
static PyObject *__pyx_n_s_p_grad_test_trace_ref;
static PyObject *__pyx_n_s_p_grad_trial_ref;
static PyObject *__pyx_n_s_p_grad_trial_trace_ref;
static PyObject *__pyx_n_s_p_l2g;
static PyObject *__pyx_n_s_p_test_ref;
static PyObject *__pyx_n_s_p_test_trace_ref;
static PyObject *__pyx_n_s_p_trial_ref;
static PyObject *__pyx_n_s_p_trial_trace_ref;
static PyObject *__pyx_n_s_packFraction;
static PyObject *__pyx_n_s_packMargin;
static PyObject *__pyx_n_s_particle_alpha;
static PyObject *__pyx_n_s_particle_beta;
static PyObject *__pyx_n_s_particle_centroids;
static PyObject *__pyx_n_s_particle_epsFact;
static PyObject *__pyx_n_s_particle_netForces;
static PyObject *__pyx_n_s_particle_netMoments;
static PyObject *__pyx_n_s_particle_nitsche;
static PyObject *__pyx_n_s_particle_penalty_constant;
static PyObject *__pyx_n_s_particle_signed_distance_normals;
static PyObject *__pyx_n_s_particle_signed_distances;
static PyObject *__pyx_n_s_particle_surfaceArea;
static PyObject *__pyx_n_s_particle_velocities;
static PyObject *__pyx_n_s_phi;
static PyObject *__pyx_n_s_phi_solid;
static PyObject *__pyx_n_s_q_cfl;
static PyObject *__pyx_n_s_q_dV;
static PyObject *__pyx_n_s_q_dV_last;
static PyObject *__pyx_n_s_q_divU;
static PyObject *__pyx_n_s_q_dragAlpha;
static PyObject *__pyx_n_s_q_dragBeta;
static PyObject *__pyx_n_s_q_dvos_dt;
static PyObject *__pyx_n_s_q_eddy_viscosity;
static PyObject *__pyx_n_s_q_grad_p;
static PyObject *__pyx_n_s_q_grad_u;
static PyObject *__pyx_n_s_q_grad_v;
static PyObject *__pyx_n_s_q_grad_w;
static PyObject *__pyx_n_s_q_mass_adv;
static PyObject *__pyx_n_s_q_mass_source;
static PyObject *__pyx_n_s_q_mom_u_acc;
static PyObject *__pyx_n_s_q_mom_u_acc_beta_bdf;
static PyObject *__pyx_n_s_q_mom_v_acc;
static PyObject *__pyx_n_s_q_mom_v_acc_beta_bdf;
static PyObject *__pyx_n_s_q_mom_w_acc;
static PyObject *__pyx_n_s_q_mom_w_acc_beta_bdf;
static PyObject *__pyx_n_s_q_nu;
static PyObject *__pyx_n_s_q_numDiff_u;
static PyObject *__pyx_n_s_q_numDiff_u_last;
static PyObject *__pyx_n_s_q_numDiff_v;
static PyObject *__pyx_n_s_q_numDiff_v_last;
static PyObject *__pyx_n_s_q_numDiff_w;
static PyObject *__pyx_n_s_q_numDiff_w_last;
static PyObject *__pyx_n_s_q_p;
static PyObject *__pyx_n_s_q_rho;
static PyObject *__pyx_n_s_q_turb_var_0;
static PyObject *__pyx_n_s_q_turb_var_1;
static PyObject *__pyx_n_s_q_turb_var_grad_0;
static PyObject *__pyx_n_s_q_velocity;
static PyObject *__pyx_n_s_q_velocity_sge;
static PyObject *__pyx_n_s_q_velocity_solid;
static PyObject *__pyx_n_s_q_vos;
static PyObject *__pyx_n_s_q_x;
static PyObject *__pyx_n_s_quantDOFs;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_rhoAtCell;
static PyObject *__pyx_n_s_rho_0;
static PyObject *__pyx_n_s_rho_1;
static PyObject *__pyx_n_s_sdInfo_u_u_colind;
static PyObject *__pyx_n_s_sdInfo_u_u_rowptr;
static PyObject *__pyx_n_s_sdInfo_u_v_colind;
static PyObject *__pyx_n_s_sdInfo_u_v_rowptr;
static PyObject *__pyx_n_s_sdInfo_u_w_colind;
static PyObject *__pyx_n_s_sdInfo_u_w_rowptr;
static PyObject *__pyx_n_s_sdInfo_v_u_colind;
static PyObject *__pyx_n_s_sdInfo_v_u_rowptr;
static PyObject *__pyx_n_s_sdInfo_v_v_colind;
static PyObject *__pyx_n_s_sdInfo_v_v_rowptr;
static PyObject *__pyx_n_s_sdInfo_v_w_colind;
static PyObject *__pyx_n_s_sdInfo_v_w_rowptr;
static PyObject *__pyx_n_s_sdInfo_w_u_colind;
static PyObject *__pyx_n_s_sdInfo_w_u_rowptr;
static PyObject *__pyx_n_s_sdInfo_w_v_colind;
static PyObject *__pyx_n_s_sdInfo_w_v_rowptr;
static PyObject *__pyx_n_s_sdInfo_w_w_colind;
static PyObject *__pyx_n_s_sdInfo_w_w_rowptr;
static PyObject *__pyx_n_s_sigma;
static PyObject *__pyx_n_s_sigmaC;
static PyObject *__pyx_n_s_smagorinskyConstant;
static PyObject *__pyx_n_s_stride_p;
static PyObject *__pyx_n_s_stride_u;
static PyObject *__pyx_n_s_stride_v;
static PyObject *__pyx_n_s_stride_w;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_turbulenceClosureModel;
static PyObject *__pyx_n_s_u_dof;
static PyObject *__pyx_n_s_u_dof_old;
static PyObject *__pyx_n_s_u_dof_old_old;
static PyObject *__pyx_kp_u_unknown_dtype_code_in_numpy_pxd;
static PyObject *__pyx_n_s_useMetrics;
static PyObject *__pyx_n_s_useRBLES;
static PyObject *__pyx_n_s_useVF;
static PyObject *__pyx_n_s_v_dof;
static PyObject *__pyx_n_s_v_dof_old;
static PyObject *__pyx_n_s_v_dof_old_old;
static PyObject *__pyx_n_s_vel_grad_test_ref;
static PyObject *__pyx_n_s_vel_grad_test_trace_ref;
static PyObject *__pyx_n_s_vel_grad_trial_ref;
static PyObject *__pyx_n_s_vel_grad_trial_trace_ref;
static PyObject *__pyx_n_s_vel_hess_trial_ref;
static PyObject *__pyx_n_s_vel_l2g;
static PyObject *__pyx_n_s_vel_test_ref;
static PyObject *__pyx_n_s_vel_test_trace_ref;
static PyObject *__pyx_n_s_vel_trial_ref;
static PyObject *__pyx_n_s_vel_trial_trace_ref;
static PyObject *__pyx_n_s_velocityAverage;
static PyObject *__pyx_n_s_vf;
static PyObject *__pyx_n_s_vos_dof;
static PyObject *__pyx_n_s_w_dof;
static PyObject *__pyx_n_s_w_dof_old;
static PyObject *__pyx_n_s_w_dof_old_old;
static PyObject *__pyx_n_s_wettedAreas;
static int __pyx_pf_6mprans_8cRANS3PF_7RANS3PF___cinit__(struct __pyx_obj_6mprans_8cRANS3PF_RANS3PF *__pyx_v_self, int __pyx_v_nSpaceIn, int __pyx_v_nQuadraturePoints_elementIn, int __pyx_v_nDOF_mesh_trial_elementIn, int __pyx_v_nDOF_trial_elementIn, int __pyx_v_nDOF_test_elementIn, int __pyx_v_nQuadraturePoints_elementBoundaryIn, int __pyx_v_CompKernelFlag, double __pyx_v_aDarcy, double __pyx_v_betaForch, double __pyx_v_grain, double __pyx_v_packFraction, double __pyx_v_packMargin, double __pyx_v_maxFraction, double __pyx_v_frFraction, double __pyx_v_sigmaC, double __pyx_v_C3e, double __pyx_v_C4e, double __pyx_v_eR, double __pyx_v_fContact, double __pyx_v_mContact, double __pyx_v_nContact, double __pyx_v_angFriction); /* proto */
static void __pyx_pf_6mprans_8cRANS3PF_7RANS3PF_2__dealloc__(struct __pyx_obj_6mprans_8cRANS3PF_RANS3PF *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6mprans_8cRANS3PF_7RANS3PF_4calculateResidual(struct __pyx_obj_6mprans_8cRANS3PF_RANS3PF *__pyx_v_self, PyArrayObject *__pyx_v_mesh_trial_ref, PyArrayObject *__pyx_v_mesh_grad_trial_ref, PyArrayObject *__pyx_v_mesh_dof, PyArrayObject *__pyx_v_mesh_velocity_dof, double __pyx_v_MOVING_DOMAIN, double __pyx_v_PSTAB, PyArrayObject *__pyx_v_mesh_l2g, PyArrayObject *__pyx_v_dV_ref, PyArrayObject *__pyx_v_p_trial_ref, PyArrayObject *__pyx_v_p_grad_trial_ref, PyArrayObject *__pyx_v_p_test_ref, PyArrayObject *__pyx_v_p_grad_test_ref, PyArrayObject *__pyx_v_q_p, PyArrayObject *__pyx_v_q_grad_p, PyArrayObject *__pyx_v_ebqe_p, PyArrayObject *__pyx_v_ebqe_grad_p, PyArrayObject *__pyx_v_vel_trial_ref, PyArrayObject *__pyx_v_vel_grad_trial_ref, PyArrayObject *__pyx_v_vel_hess_trial_ref, PyArrayObject *__pyx_v_vel_test_ref, PyArrayObject *__pyx_v_vel_grad_test_ref, PyArrayObject *__pyx_v_mesh_trial_trace_ref, PyArrayObject *__pyx_v_mesh_grad_trial_trace_ref, PyArrayObject *__pyx_v_dS_ref, PyArrayObject *__pyx_v_p_trial_trace_ref, PyArrayObject *__pyx_v_p_grad_trial_trace_ref, PyArrayObject *__pyx_v_p_test_trace_ref, PyArrayObject *__pyx_v_p_grad_test_trace_ref, PyArrayObject *__pyx_v_vel_trial_trace_ref, PyArrayObject *__pyx_v_vel_grad_trial_trace_ref, PyArrayObject *__pyx_v_vel_test_trace_ref, PyArrayObject *__pyx_v_vel_grad_test_trace_ref, PyArrayObject *__pyx_v_normal_ref, PyArrayObject *__pyx_v_boundaryJac_ref, double __pyx_v_eb_adjoint_sigma, PyArrayObject *__pyx_v_elementDiameter, PyArrayObject *__pyx_v_nodeDiametersArray, double __pyx_v_hFactor, int __pyx_v_nElements_global, int __pyx_v_nElements_owned, int __pyx_v_nElementBoundaries_owned, double __pyx_v_useRBLES, double __pyx_v_useMetrics, double __pyx_v_alphaBDF, double __pyx_v_epsFact_rho, double __pyx_v_epsFact_mu, double __pyx_v_sigma, double __pyx_v_rho_0, double __pyx_v_nu_0, double __pyx_v_rho_1, double __pyx_v_nu_1, double __pyx_v_smagorinskyConstant, int __pyx_v_turbulenceClosureModel, double __pyx_v_Ct_sge, double __pyx_v_Cd_sge, double __pyx_v_C_dc, double __pyx_v_C_b, PyArrayObject *__pyx_v_eps_solid, PyArrayObject *__pyx_v_phi_solid, PyArrayObject *__pyx_v_q_velocity_solid, PyArrayObject *__pyx_v_q_vos, PyArrayObject *__pyx_v_q_dvos_dt, PyArrayObject *__pyx_v_q_dragAlpha, PyArrayObject *__pyx_v_q_dragBeta, PyArrayObject *__pyx_v_q_mass_source, PyArrayObject *__pyx_v_q_turb_var_0, PyArrayObject *__pyx_v_q_turb_var_1, PyArrayObject *__pyx_v_q_turb_var_grad_0, PyArrayObject *__pyx_v_q_eddy_viscosity, PyArrayObject *__pyx_v_p_l2g, PyArrayObject *__pyx_v_vel_l2g, PyArrayObject *__pyx_v_p_dof, PyArrayObject *__pyx_v_u_dof, PyArrayObject *__pyx_v_v_dof, PyArrayObject *__pyx_v_w_dof, PyArrayObject *__pyx_v_u_dof_old, PyArrayObject *__pyx_v_v_dof_old, PyArrayObject *__pyx_v_w_dof_old, PyArrayObject *__pyx_v_u_dof_old_old, PyArrayObject *__pyx_v_v_dof_old_old, PyArrayObject *__pyx_v_w_dof_old_old, PyArrayObject *__pyx_v_g, double __pyx_v_useVF, PyArrayObject *__pyx_v_vf, PyArrayObject *__pyx_v_phi, PyArrayObject *__pyx_v_normal_phi, PyArrayObject *__pyx_v_kappa_phi, PyArrayObject *__pyx_v_q_mom_u_acc, PyArrayObject *__pyx_v_q_mom_v_acc, PyArrayObject *__pyx_v_q_mom_w_acc, PyArrayObject *__pyx_v_q_mass_adv, PyArrayObject *__pyx_v_q_mom_u_acc_beta_bdf, PyArrayObject *__pyx_v_q_mom_v_acc_beta_bdf, PyArrayObject *__pyx_v_q_mom_w_acc_beta_bdf, PyArrayObject *__pyx_v_q_dV, PyArrayObject *__pyx_v_q_dV_last, PyArrayObject *__pyx_v_q_velocity_sge, PyArrayObject *__pyx_v_ebqe_velocity_star, PyArrayObject *__pyx_v_q_cfl, PyArrayObject *__pyx_v_q_numDiff_u, PyArrayObject *__pyx_v_q_numDiff_v, PyArrayObject *__pyx_v_q_numDiff_w, PyArrayObject *__pyx_v_q_numDiff_u_last, PyArrayObject *__pyx_v_q_numDiff_v_last, PyArrayObject *__pyx_v_q_numDiff_w_last, PyArrayObject *__pyx_v_sdInfo_u_u_rowptr, PyArrayObject *__pyx_v_sdInfo_u_u_colind, PyArrayObject *__pyx_v_sdInfo_u_v_rowptr, PyArrayObject *__pyx_v_sdInfo_u_v_colind, PyArrayObject *__pyx_v_sdInfo_u_w_rowptr, PyArrayObject *__pyx_v_sdInfo_u_w_colind, PyArrayObject *__pyx_v_sdInfo_v_v_rowptr, PyArrayObject *__pyx_v_sdInfo_v_v_colind, PyArrayObject *__pyx_v_sdInfo_v_u_rowptr, PyArrayObject *__pyx_v_sdInfo_v_u_colind, PyArrayObject *__pyx_v_sdInfo_v_w_rowptr, PyArrayObject *__pyx_v_sdInfo_v_w_colind, PyArrayObject *__pyx_v_sdInfo_w_w_rowptr, PyArrayObject *__pyx_v_sdInfo_w_w_colind, PyArrayObject *__pyx_v_sdInfo_w_u_rowptr, PyArrayObject *__pyx_v_sdInfo_w_u_colind, PyArrayObject *__pyx_v_sdInfo_w_v_rowptr, PyArrayObject *__pyx_v_sdInfo_w_v_colind, int __pyx_v_offset_p, int __pyx_v_offset_u, int __pyx_v_offset_v, int __pyx_v_offset_w, int __pyx_v_stride_p, int __pyx_v_stride_u, int __pyx_v_stride_v, int __pyx_v_stride_w, PyArrayObject *__pyx_v_globalResidual, int __pyx_v_nExteriorElementBoundaries_global, PyArrayObject *__pyx_v_exteriorElementBoundariesArray, PyArrayObject *__pyx_v_elementBoundaryElementsArray, PyArrayObject *__pyx_v_elementBoundaryLocalElementBoundariesArray, PyArrayObject *__pyx_v_ebqe_vf_ext, PyArrayObject *__pyx_v_bc_ebqe_vf_ext, PyArrayObject *__pyx_v_ebqe_phi_ext, PyArrayObject *__pyx_v_bc_ebqe_phi_ext, PyArrayObject *__pyx_v_ebqe_normal_phi_ext, PyArrayObject *__pyx_v_ebqe_kappa_phi_ext, PyArrayObject *__pyx_v_ebqe_vos_ext, PyArrayObject *__pyx_v_ebqe_turb_var_0, PyArrayObject *__pyx_v_ebqe_turb_var_1, PyArrayObject *__pyx_v_isDOFBoundary_p, PyArrayObject *__pyx_v_isDOFBoundary_u, PyArrayObject *__pyx_v_isDOFBoundary_v, PyArrayObject *__pyx_v_isDOFBoundary_w, PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_p, PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_u, PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_v, PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_w, PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_u, PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_v, PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_w, PyArrayObject *__pyx_v_ebqe_bc_p_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_mass_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_mom_u_adv_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_mom_v_adv_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_mom_w_adv_ext, PyArrayObject *__pyx_v_ebqe_bc_u_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_u_diff_ext, PyArrayObject *__pyx_v_ebqe_penalty_ext, PyArrayObject *__pyx_v_ebqe_bc_v_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_v_diff_ext, PyArrayObject *__pyx_v_ebqe_bc_w_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_w_diff_ext, PyArrayObject *__pyx_v_q_x, PyArrayObject *__pyx_v_q_velocity, PyArrayObject *__pyx_v_ebqe_velocity, PyArrayObject *__pyx_v_q_grad_u, PyArrayObject *__pyx_v_q_grad_v, PyArrayObject *__pyx_v_q_grad_w, PyArrayObject *__pyx_v_q_divU, PyArrayObject *__pyx_v_ebqe_grad_u, PyArrayObject *__pyx_v_ebqe_grad_v, PyArrayObject *__pyx_v_ebqe_grad_w, PyArrayObject *__pyx_v_flux, PyArrayObject *__pyx_v_elementResidual_p, PyArrayObject *__pyx_v_elementFlags, PyArrayObject *__pyx_v_boundaryFlags, PyArrayObject *__pyx_v_barycenters, PyArrayObject *__pyx_v_wettedAreas, PyArrayObject *__pyx_v_netForces_p, PyArrayObject *__pyx_v_netForces_v, PyArrayObject *__pyx_v_netMoments, PyArrayObject *__pyx_v_q_rho, PyArrayObject *__pyx_v_ebqe_rho, PyArrayObject *__pyx_v_q_nu, PyArrayObject *__pyx_v_ebqe_nu, int __pyx_v_nParticles, double __pyx_v_particle_epsFact, double __pyx_v_particle_alpha, double __pyx_v_particle_beta, double __pyx_v_particle_penalty_constant, PyArrayObject *__pyx_v_particle_signed_distances, PyArrayObject *__pyx_v_particle_signed_distance_normals, PyArrayObject *__pyx_v_particle_velocities, PyArrayObject *__pyx_v_particle_centroids, PyArrayObject *__pyx_v_particle_netForces, PyArrayObject *__pyx_v_particle_netMoments, PyArrayObject *__pyx_v_particle_surfaceArea, double __pyx_v_particle_nitsche, int __pyx_v_STABILIZATION_TYPE, double __pyx_v_areaRefElement, double __pyx_v_cMax, double __pyx_v_cE, PyArrayObject *__pyx_v_forcex, PyArrayObject *__pyx_v_forcey, PyArrayObject *__pyx_v_forcez, int __pyx_v_KILL_PRESSURE_TERM, double __pyx_v_dt, PyArrayObject *__pyx_v_entropyResidualAtCell, PyArrayObject *__pyx_v_maxSpeed2AtCell, double __pyx_v_maxSpeed2AtOmega, PyArrayObject *__pyx_v_rhoAtCell, PyArrayObject *__pyx_v_muAtCell, PyArrayObject *__pyx_v_quantDOFs, int __pyx_v_numDOFsPerEqn, PyArrayObject *__pyx_v_csrRowIndeces_DofLoops, PyArrayObject *__pyx_v_csrColumnOffsets_DofLoops, PyArrayObject *__pyx_v_ML, PyArrayObject *__pyx_v_Cx, PyArrayObject *__pyx_v_Cy, PyArrayObject *__pyx_v_Cz, int __pyx_v_MATERIAL_PARAMETERS_AS_FUNCTION, PyArrayObject *__pyx_v_density_as_function, PyArrayObject *__pyx_v_dynamic_viscosity_as_function, PyArrayObject *__pyx_v_ebqe_density_as_function, PyArrayObject *__pyx_v_ebqe_dynamic_viscosity_as_function, double __pyx_v_order_polynomial); /* proto */
static PyObject *__pyx_pf_6mprans_8cRANS3PF_7RANS3PF_6calculateJacobian(struct __pyx_obj_6mprans_8cRANS3PF_RANS3PF *__pyx_v_self, PyArrayObject *__pyx_v_mesh_trial_ref, PyArrayObject *__pyx_v_mesh_grad_trial_ref, PyArrayObject *__pyx_v_mesh_dof, PyArrayObject *__pyx_v_mesh_velocity_dof, double __pyx_v_MOVING_DOMAIN, double __pyx_v_PSTAB, PyArrayObject *__pyx_v_mesh_l2g, PyArrayObject *__pyx_v_dV_ref, PyArrayObject *__pyx_v_p_trial_ref, PyArrayObject *__pyx_v_p_grad_trial_ref, PyArrayObject *__pyx_v_p_test_ref, PyArrayObject *__pyx_v_p_grad_test_ref, PyArrayObject *__pyx_v_q_p, PyArrayObject *__pyx_v_q_grad_p, PyArrayObject *__pyx_v_ebqe_p, PyArrayObject *__pyx_v_ebqe_grad_p, PyArrayObject *__pyx_v_vel_trial_ref, PyArrayObject *__pyx_v_vel_grad_trial_ref, PyArrayObject *__pyx_v_vel_hess_trial_ref, PyArrayObject *__pyx_v_vel_test_ref, PyArrayObject *__pyx_v_vel_grad_test_ref, PyArrayObject *__pyx_v_mesh_trial_trace_ref, PyArrayObject *__pyx_v_mesh_grad_trial_trace_ref, PyArrayObject *__pyx_v_dS_ref, PyArrayObject *__pyx_v_p_trial_trace_ref, PyArrayObject *__pyx_v_p_grad_trial_trace_ref, PyArrayObject *__pyx_v_p_test_trace_ref, PyArrayObject *__pyx_v_p_grad_test_trace_ref, PyArrayObject *__pyx_v_vel_trial_trace_ref, PyArrayObject *__pyx_v_vel_grad_trial_trace_ref, PyArrayObject *__pyx_v_vel_test_trace_ref, PyArrayObject *__pyx_v_vel_grad_test_trace_ref, PyArrayObject *__pyx_v_normal_ref, PyArrayObject *__pyx_v_boundaryJac_ref, double __pyx_v_eb_adjoint_sigma, PyArrayObject *__pyx_v_elementDiameter, PyArrayObject *__pyx_v_nodeDiametersArray, double __pyx_v_hFactor, int __pyx_v_nElements_global, int __pyx_v_nElements_owned, double __pyx_v_useRBLES, double __pyx_v_useMetrics, double __pyx_v_alphaBDF, double __pyx_v_epsFact_rho, double __pyx_v_epsFact_mu, double __pyx_v_sigma, double __pyx_v_rho_0, double __pyx_v_nu_0, double __pyx_v_rho_1, double __pyx_v_nu_1, double __pyx_v_smagorinskyConstant, int __pyx_v_turbulenceClosureModel, double __pyx_v_Ct_sge, double __pyx_v_Cd_sge, double __pyx_v_C_dg, double __pyx_v_C_b, PyArrayObject *__pyx_v_eps_solid, PyArrayObject *__pyx_v_phi_solid, PyArrayObject *__pyx_v_q_velocity_solid, PyArrayObject *__pyx_v_q_vos, PyArrayObject *__pyx_v_q_dvos_dt, PyArrayObject *__pyx_v_q_dragAlpha, PyArrayObject *__pyx_v_q_dragBeta, PyArrayObject *__pyx_v_q_mass_source, PyArrayObject *__pyx_v_q_turb_var_0, PyArrayObject *__pyx_v_q_turb_var_1, PyArrayObject *__pyx_v_q_turb_var_grad_0, PyArrayObject *__pyx_v_p_l2g, PyArrayObject *__pyx_v_vel_l2g, PyArrayObject *__pyx_v_p_dof, PyArrayObject *__pyx_v_u_dof, PyArrayObject *__pyx_v_v_dof, PyArrayObject *__pyx_v_w_dof, PyArrayObject *__pyx_v_g, double __pyx_v_useVF, PyArrayObject *__pyx_v_vf, PyArrayObject *__pyx_v_phi, PyArrayObject *__pyx_v_normal_phi, PyArrayObject *__pyx_v_kappa_phi, PyArrayObject *__pyx_v_q_mom_u_acc_beta_bdf, PyArrayObject *__pyx_v_q_mom_v_acc_beta_bdf, PyArrayObject *__pyx_v_q_mom_w_acc_beta_bdf, PyArrayObject *__pyx_v_q_dV, PyArrayObject *__pyx_v_q_dV_last, PyArrayObject *__pyx_v_q_velocity_sge, PyArrayObject *__pyx_v_ebqe_velocity_star, PyArrayObject *__pyx_v_q_cfl, PyArrayObject *__pyx_v_q_numDiff_u_last, PyArrayObject *__pyx_v_q_numDiff_v_last, PyArrayObject *__pyx_v_q_numDiff_w_last, PyArrayObject *__pyx_v_sdInfo_u_u_rowptr, PyArrayObject *__pyx_v_sdInfo_u_u_colind, PyArrayObject *__pyx_v_sdInfo_u_v_rowptr, PyArrayObject *__pyx_v_sdInfo_u_v_colind, PyArrayObject *__pyx_v_sdInfo_u_w_rowptr, PyArrayObject *__pyx_v_sdInfo_u_w_colind, PyArrayObject *__pyx_v_sdInfo_v_v_rowptr, PyArrayObject *__pyx_v_sdInfo_v_v_colind, PyArrayObject *__pyx_v_sdInfo_v_u_rowptr, PyArrayObject *__pyx_v_sdInfo_v_u_colind, PyArrayObject *__pyx_v_sdInfo_v_w_rowptr, PyArrayObject *__pyx_v_sdInfo_v_w_colind, PyArrayObject *__pyx_v_sdInfo_w_w_rowptr, PyArrayObject *__pyx_v_sdInfo_w_w_colind, PyArrayObject *__pyx_v_sdInfo_w_u_rowptr, PyArrayObject *__pyx_v_sdInfo_w_u_colind, PyArrayObject *__pyx_v_sdInfo_w_v_rowptr, PyArrayObject *__pyx_v_sdInfo_w_v_colind, PyArrayObject *__pyx_v_csrRowIndeces_p_p, PyArrayObject *__pyx_v_csrColumnOffsets_p_p, PyArrayObject *__pyx_v_csrRowIndeces_p_u, PyArrayObject *__pyx_v_csrColumnOffsets_p_u, PyArrayObject *__pyx_v_csrRowIndeces_p_v, PyArrayObject *__pyx_v_csrColumnOffsets_p_v, PyArrayObject *__pyx_v_csrRowIndeces_p_w, PyArrayObject *__pyx_v_csrColumnOffsets_p_w, PyArrayObject *__pyx_v_csrRowIndeces_u_p, PyArrayObject *__pyx_v_csrColumnOffsets_u_p, PyArrayObject *__pyx_v_csrRowIndeces_u_u, PyArrayObject *__pyx_v_csrColumnOffsets_u_u, PyArrayObject *__pyx_v_csrRowIndeces_u_v, PyArrayObject *__pyx_v_csrColumnOffsets_u_v, PyArrayObject *__pyx_v_csrRowIndeces_u_w, PyArrayObject *__pyx_v_csrColumnOffsets_u_w, PyArrayObject *__pyx_v_csrRowIndeces_v_p, PyArrayObject *__pyx_v_csrColumnOffsets_v_p, PyArrayObject *__pyx_v_csrRowIndeces_v_u, PyArrayObject *__pyx_v_csrColumnOffsets_v_u, PyArrayObject *__pyx_v_csrRowIndeces_v_v, PyArrayObject *__pyx_v_csrColumnOffsets_v_v, PyArrayObject *__pyx_v_csrRowIndeces_v_w, PyArrayObject *__pyx_v_csrColumnOffsets_v_w, PyArrayObject *__pyx_v_csrRowIndeces_w_p, PyArrayObject *__pyx_v_csrColumnOffsets_w_p, PyArrayObject *__pyx_v_csrRowIndeces_w_u, PyArrayObject *__pyx_v_csrColumnOffsets_w_u, PyArrayObject *__pyx_v_csrRowIndeces_w_v, PyArrayObject *__pyx_v_csrColumnOffsets_w_v, PyArrayObject *__pyx_v_csrRowIndeces_w_w, PyArrayObject *__pyx_v_csrColumnOffsets_w_w, PyObject *__pyx_v_globalJacobian, int __pyx_v_nExteriorElementBoundaries_global, PyArrayObject *__pyx_v_exteriorElementBoundariesArray, PyArrayObject *__pyx_v_elementBoundaryElementsArray, PyArrayObject *__pyx_v_elementBoundaryLocalElementBoundariesArray, PyArrayObject *__pyx_v_ebqe_vf_ext, PyArrayObject *__pyx_v_bc_ebqe_vf_ext, PyArrayObject *__pyx_v_ebqe_phi_ext, PyArrayObject *__pyx_v_bc_ebqe_phi_ext, PyArrayObject *__pyx_v_ebqe_normal_phi_ext, PyArrayObject *__pyx_v_ebqe_kappa_phi_ext, PyArrayObject *__pyx_v_ebqe_vos_ext, PyArrayObject *__pyx_v_ebqe_turb_var_0, PyArrayObject *__pyx_v_ebqe_turb_var_1, PyArrayObject *__pyx_v_isDOFBoundary_p, PyArrayObject *__pyx_v_isDOFBoundary_u, PyArrayObject *__pyx_v_isDOFBoundary_v, PyArrayObject *__pyx_v_isDOFBoundary_w, PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_p, PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_u, PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_v, PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_w, PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_u, PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_v, PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_w, PyArrayObject *__pyx_v_ebqe_bc_p_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_mass_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_mom_u_adv_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_mom_v_adv_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_mom_w_adv_ext, PyArrayObject *__pyx_v_ebqe_bc_u_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_u_diff_ext, PyArrayObject *__pyx_v_ebqe_penalty_ext, PyArrayObject *__pyx_v_ebqe_bc_v_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_v_diff_ext, PyArrayObject *__pyx_v_ebqe_bc_w_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_w_diff_ext, PyArrayObject *__pyx_v_csrColumnOffsets_eb_p_p, PyArrayObject *__pyx_v_csrColumnOffsets_eb_p_u, PyArrayObject *__pyx_v_csrColumnOffsets_eb_p_v, PyArrayObject *__pyx_v_csrColumnOffsets_eb_p_w, PyArrayObject *__pyx_v_csrColumnOffsets_eb_u_p, PyArrayObject *__pyx_v_csrColumnOffsets_eb_u_u, PyArrayObject *__pyx_v_csrColumnOffsets_eb_u_v, PyArrayObject *__pyx_v_csrColumnOffsets_eb_u_w, PyArrayObject *__pyx_v_csrColumnOffsets_eb_v_p, PyArrayObject *__pyx_v_csrColumnOffsets_eb_v_u, PyArrayObject *__pyx_v_csrColumnOffsets_eb_v_v, PyArrayObject *__pyx_v_csrColumnOffsets_eb_v_w, PyArrayObject *__pyx_v_csrColumnOffsets_eb_w_p, PyArrayObject *__pyx_v_csrColumnOffsets_eb_w_u, PyArrayObject *__pyx_v_csrColumnOffsets_eb_w_v, PyArrayObject *__pyx_v_csrColumnOffsets_eb_w_w, PyArrayObject *__pyx_v_elementFlags, int __pyx_v_nParticles, double __pyx_v_particle_epsFact, double __pyx_v_particle_alpha, double __pyx_v_particle_beta, double __pyx_v_particle_penalty_constant, PyArrayObject *__pyx_v_particle_signed_distances, PyArrayObject *__pyx_v_particle_signed_distance_normals, PyArrayObject *__pyx_v_particle_velocities, PyArrayObject *__pyx_v_particle_centroids, double __pyx_v_particle_nitsche, int __pyx_v_KILL_PRESSURE_TERM, int __pyx_v_MATERIAL_PARAMETERS_AS_FUNCTION, PyArrayObject *__pyx_v_density_as_function, PyArrayObject *__pyx_v_dynamic_viscosity_as_function, PyArrayObject *__pyx_v_ebqe_density_as_function, PyArrayObject *__pyx_v_ebqe_dynamic_viscosity_as_function); /* proto */
static PyObject *__pyx_pf_6mprans_8cRANS3PF_7RANS3PF_8calculateResidual_entropy_viscosity(struct __pyx_obj_6mprans_8cRANS3PF_RANS3PF *__pyx_v_self, PyArrayObject *__pyx_v_mesh_trial_ref, PyArrayObject *__pyx_v_mesh_grad_trial_ref, PyArrayObject *__pyx_v_mesh_dof, PyArrayObject *__pyx_v_mesh_velocity_dof, double __pyx_v_MOVING_DOMAIN, double __pyx_v_PSTAB, PyArrayObject *__pyx_v_mesh_l2g, PyArrayObject *__pyx_v_dV_ref, PyArrayObject *__pyx_v_p_trial_ref, PyArrayObject *__pyx_v_p_grad_trial_ref, PyArrayObject *__pyx_v_p_test_ref, PyArrayObject *__pyx_v_p_grad_test_ref, PyArrayObject *__pyx_v_q_p, PyArrayObject *__pyx_v_q_grad_p, PyArrayObject *__pyx_v_ebqe_p, PyArrayObject *__pyx_v_ebqe_grad_p, PyArrayObject *__pyx_v_vel_trial_ref, PyArrayObject *__pyx_v_vel_grad_trial_ref, PyArrayObject *__pyx_v_vel_hess_trial_ref, PyArrayObject *__pyx_v_vel_test_ref, PyArrayObject *__pyx_v_vel_grad_test_ref, PyArrayObject *__pyx_v_mesh_trial_trace_ref, PyArrayObject *__pyx_v_mesh_grad_trial_trace_ref, PyArrayObject *__pyx_v_dS_ref, PyArrayObject *__pyx_v_p_trial_trace_ref, PyArrayObject *__pyx_v_p_grad_trial_trace_ref, PyArrayObject *__pyx_v_p_test_trace_ref, PyArrayObject *__pyx_v_p_grad_test_trace_ref, PyArrayObject *__pyx_v_vel_trial_trace_ref, PyArrayObject *__pyx_v_vel_grad_trial_trace_ref, PyArrayObject *__pyx_v_vel_test_trace_ref, PyArrayObject *__pyx_v_vel_grad_test_trace_ref, PyArrayObject *__pyx_v_normal_ref, PyArrayObject *__pyx_v_boundaryJac_ref, double __pyx_v_eb_adjoint_sigma, PyArrayObject *__pyx_v_elementDiameter, PyArrayObject *__pyx_v_nodeDiametersArray, double __pyx_v_hFactor, int __pyx_v_nElements_global, int __pyx_v_nElements_owned, int __pyx_v_nElementBoundaries_owned, double __pyx_v_useRBLES, double __pyx_v_useMetrics, double __pyx_v_alphaBDF, double __pyx_v_epsFact_rho, double __pyx_v_epsFact_mu, double __pyx_v_sigma, double __pyx_v_rho_0, double __pyx_v_nu_0, double __pyx_v_rho_1, double __pyx_v_nu_1, double __pyx_v_smagorinskyConstant, int __pyx_v_turbulenceClosureModel, double __pyx_v_Ct_sge, double __pyx_v_Cd_sge, double __pyx_v_C_dc, double __pyx_v_C_b, PyArrayObject *__pyx_v_eps_solid, PyArrayObject *__pyx_v_phi_solid, PyArrayObject *__pyx_v_q_velocity_solid, PyArrayObject *__pyx_v_q_vos, PyArrayObject *__pyx_v_q_dvos_dt, PyArrayObject *__pyx_v_q_dragAlpha, PyArrayObject *__pyx_v_q_dragBeta, PyArrayObject *__pyx_v_q_mass_source, PyArrayObject *__pyx_v_q_turb_var_0, PyArrayObject *__pyx_v_q_turb_var_1, PyArrayObject *__pyx_v_q_turb_var_grad_0, PyArrayObject *__pyx_v_q_eddy_viscosity, PyArrayObject *__pyx_v_p_l2g, PyArrayObject *__pyx_v_vel_l2g, PyArrayObject *__pyx_v_p_dof, PyArrayObject *__pyx_v_u_dof, PyArrayObject *__pyx_v_v_dof, PyArrayObject *__pyx_v_w_dof, PyArrayObject *__pyx_v_u_dof_old, PyArrayObject *__pyx_v_v_dof_old, PyArrayObject *__pyx_v_w_dof_old, PyArrayObject *__pyx_v_u_dof_old_old, PyArrayObject *__pyx_v_v_dof_old_old, PyArrayObject *__pyx_v_w_dof_old_old, PyArrayObject *__pyx_v_g, double __pyx_v_useVF, PyArrayObject *__pyx_v_vf, PyArrayObject *__pyx_v_phi, PyArrayObject *__pyx_v_normal_phi, PyArrayObject *__pyx_v_kappa_phi, PyArrayObject *__pyx_v_q_mom_u_acc, PyArrayObject *__pyx_v_q_mom_v_acc, PyArrayObject *__pyx_v_q_mom_w_acc, PyArrayObject *__pyx_v_q_mass_adv, PyArrayObject *__pyx_v_q_mom_u_acc_beta_bdf, PyArrayObject *__pyx_v_q_mom_v_acc_beta_bdf, PyArrayObject *__pyx_v_q_mom_w_acc_beta_bdf, PyArrayObject *__pyx_v_q_dV, PyArrayObject *__pyx_v_q_dV_last, PyArrayObject *__pyx_v_q_velocity_sge, PyArrayObject *__pyx_v_ebqe_velocity_star, PyArrayObject *__pyx_v_q_cfl, PyArrayObject *__pyx_v_q_numDiff_u, PyArrayObject *__pyx_v_q_numDiff_v, PyArrayObject *__pyx_v_q_numDiff_w, PyArrayObject *__pyx_v_q_numDiff_u_last, PyArrayObject *__pyx_v_q_numDiff_v_last, PyArrayObject *__pyx_v_q_numDiff_w_last, PyArrayObject *__pyx_v_sdInfo_u_u_rowptr, PyArrayObject *__pyx_v_sdInfo_u_u_colind, PyArrayObject *__pyx_v_sdInfo_u_v_rowptr, PyArrayObject *__pyx_v_sdInfo_u_v_colind, PyArrayObject *__pyx_v_sdInfo_u_w_rowptr, PyArrayObject *__pyx_v_sdInfo_u_w_colind, PyArrayObject *__pyx_v_sdInfo_v_v_rowptr, PyArrayObject *__pyx_v_sdInfo_v_v_colind, PyArrayObject *__pyx_v_sdInfo_v_u_rowptr, PyArrayObject *__pyx_v_sdInfo_v_u_colind, PyArrayObject *__pyx_v_sdInfo_v_w_rowptr, PyArrayObject *__pyx_v_sdInfo_v_w_colind, PyArrayObject *__pyx_v_sdInfo_w_w_rowptr, PyArrayObject *__pyx_v_sdInfo_w_w_colind, PyArrayObject *__pyx_v_sdInfo_w_u_rowptr, PyArrayObject *__pyx_v_sdInfo_w_u_colind, PyArrayObject *__pyx_v_sdInfo_w_v_rowptr, PyArrayObject *__pyx_v_sdInfo_w_v_colind, int __pyx_v_offset_p, int __pyx_v_offset_u, int __pyx_v_offset_v, int __pyx_v_offset_w, int __pyx_v_stride_p, int __pyx_v_stride_u, int __pyx_v_stride_v, int __pyx_v_stride_w, PyArrayObject *__pyx_v_globalResidual, int __pyx_v_nExteriorElementBoundaries_global, PyArrayObject *__pyx_v_exteriorElementBoundariesArray, PyArrayObject *__pyx_v_elementBoundaryElementsArray, PyArrayObject *__pyx_v_elementBoundaryLocalElementBoundariesArray, PyArrayObject *__pyx_v_ebqe_vf_ext, PyArrayObject *__pyx_v_bc_ebqe_vf_ext, PyArrayObject *__pyx_v_ebqe_phi_ext, PyArrayObject *__pyx_v_bc_ebqe_phi_ext, PyArrayObject *__pyx_v_ebqe_normal_phi_ext, PyArrayObject *__pyx_v_ebqe_kappa_phi_ext, PyArrayObject *__pyx_v_ebqe_vos_ext, PyArrayObject *__pyx_v_ebqe_turb_var_0, PyArrayObject *__pyx_v_ebqe_turb_var_1, PyArrayObject *__pyx_v_isDOFBoundary_p, PyArrayObject *__pyx_v_isDOFBoundary_u, PyArrayObject *__pyx_v_isDOFBoundary_v, PyArrayObject *__pyx_v_isDOFBoundary_w, PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_p, PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_u, PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_v, PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_w, PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_u, PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_v, PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_w, PyArrayObject *__pyx_v_ebqe_bc_p_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_mass_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_mom_u_adv_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_mom_v_adv_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_mom_w_adv_ext, PyArrayObject *__pyx_v_ebqe_bc_u_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_u_diff_ext, PyArrayObject *__pyx_v_ebqe_penalty_ext, PyArrayObject *__pyx_v_ebqe_bc_v_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_v_diff_ext, PyArrayObject *__pyx_v_ebqe_bc_w_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_w_diff_ext, PyArrayObject *__pyx_v_q_x, PyArrayObject *__pyx_v_q_velocity, PyArrayObject *__pyx_v_ebqe_velocity, PyArrayObject *__pyx_v_q_grad_u, PyArrayObject *__pyx_v_q_grad_v, PyArrayObject *__pyx_v_q_grad_w, PyArrayObject *__pyx_v_q_divU, PyArrayObject *__pyx_v_ebqe_grad_u, PyArrayObject *__pyx_v_ebqe_grad_v, PyArrayObject *__pyx_v_ebqe_grad_w, PyArrayObject *__pyx_v_flux, PyArrayObject *__pyx_v_elementResidual_p, PyArrayObject *__pyx_v_elementFlags, PyArrayObject *__pyx_v_boundaryFlags, PyArrayObject *__pyx_v_barycenters, PyArrayObject *__pyx_v_wettedAreas, PyArrayObject *__pyx_v_netForces_p, PyArrayObject *__pyx_v_netForces_v, PyArrayObject *__pyx_v_netMoments, PyArrayObject *__pyx_v_q_rho, PyArrayObject *__pyx_v_ebqe_rho, PyArrayObject *__pyx_v_q_nu, PyArrayObject *__pyx_v_ebqe_nu, int __pyx_v_nParticles, double __pyx_v_particle_epsFact, double __pyx_v_particle_alpha, double __pyx_v_particle_beta, double __pyx_v_particle_penalty_constant, PyArrayObject *__pyx_v_particle_signed_distances, PyArrayObject *__pyx_v_particle_signed_distance_normals, PyArrayObject *__pyx_v_particle_velocities, PyArrayObject *__pyx_v_particle_centroids, PyArrayObject *__pyx_v_particle_netForces, PyArrayObject *__pyx_v_particle_netMoments, PyArrayObject *__pyx_v_particle_surfaceArea, double __pyx_v_particle_nitsche, int __pyx_v_STABILIZATION_TYPE, double __pyx_v_areaRefElement, double __pyx_v_cMax, double __pyx_v_cE, PyArrayObject *__pyx_v_forcex, PyArrayObject *__pyx_v_forcey, PyArrayObject *__pyx_v_forcez, int __pyx_v_KILL_PRESSURE_TERM, double __pyx_v_dt, PyArrayObject *__pyx_v_entropyResidualAtCell, PyArrayObject *__pyx_v_maxSpeed2AtCell, double __pyx_v_maxSpeed2AtOmega, PyArrayObject *__pyx_v_rhoAtCell, PyArrayObject *__pyx_v_muAtCell, PyArrayObject *__pyx_v_quantDOFs, int __pyx_v_numDOFsPerEqn, PyArrayObject *__pyx_v_csrRowIndeces_DofLoops, PyArrayObject *__pyx_v_csrColumnOffsets_DofLoops, PyArrayObject *__pyx_v_ML, PyArrayObject *__pyx_v_Cx, PyArrayObject *__pyx_v_Cy, PyArrayObject *__pyx_v_Cz, int __pyx_v_MATERIAL_PARAMETERS_AS_FUNCTION, PyArrayObject *__pyx_v_density_as_function, PyArrayObject *__pyx_v_dynamic_viscosity_as_function, PyArrayObject *__pyx_v_ebqe_density_as_function, PyArrayObject *__pyx_v_ebqe_dynamic_viscosity_as_function, double __pyx_v_order_polynomial); /* proto */
static PyObject *__pyx_pf_6mprans_8cRANS3PF_7RANS3PF_10calculateJacobian_entropy_viscosity(struct __pyx_obj_6mprans_8cRANS3PF_RANS3PF *__pyx_v_self, PyArrayObject *__pyx_v_mesh_trial_ref, PyArrayObject *__pyx_v_mesh_grad_trial_ref, PyArrayObject *__pyx_v_mesh_dof, PyArrayObject *__pyx_v_mesh_velocity_dof, double __pyx_v_MOVING_DOMAIN, double __pyx_v_PSTAB, PyArrayObject *__pyx_v_mesh_l2g, PyArrayObject *__pyx_v_dV_ref, PyArrayObject *__pyx_v_p_trial_ref, PyArrayObject *__pyx_v_p_grad_trial_ref, PyArrayObject *__pyx_v_p_test_ref, PyArrayObject *__pyx_v_p_grad_test_ref, PyArrayObject *__pyx_v_q_p, PyArrayObject *__pyx_v_q_grad_p, PyArrayObject *__pyx_v_ebqe_p, PyArrayObject *__pyx_v_ebqe_grad_p, PyArrayObject *__pyx_v_vel_trial_ref, PyArrayObject *__pyx_v_vel_grad_trial_ref, PyArrayObject *__pyx_v_vel_hess_trial_ref, PyArrayObject *__pyx_v_vel_test_ref, PyArrayObject *__pyx_v_vel_grad_test_ref, PyArrayObject *__pyx_v_mesh_trial_trace_ref, PyArrayObject *__pyx_v_mesh_grad_trial_trace_ref, PyArrayObject *__pyx_v_dS_ref, PyArrayObject *__pyx_v_p_trial_trace_ref, PyArrayObject *__pyx_v_p_grad_trial_trace_ref, PyArrayObject *__pyx_v_p_test_trace_ref, PyArrayObject *__pyx_v_p_grad_test_trace_ref, PyArrayObject *__pyx_v_vel_trial_trace_ref, PyArrayObject *__pyx_v_vel_grad_trial_trace_ref, PyArrayObject *__pyx_v_vel_test_trace_ref, PyArrayObject *__pyx_v_vel_grad_test_trace_ref, PyArrayObject *__pyx_v_normal_ref, PyArrayObject *__pyx_v_boundaryJac_ref, double __pyx_v_eb_adjoint_sigma, PyArrayObject *__pyx_v_elementDiameter, PyArrayObject *__pyx_v_nodeDiametersArray, double __pyx_v_hFactor, int __pyx_v_nElements_global, int __pyx_v_nElements_owned, double __pyx_v_useRBLES, double __pyx_v_useMetrics, double __pyx_v_alphaBDF, double __pyx_v_epsFact_rho, double __pyx_v_epsFact_mu, double __pyx_v_sigma, double __pyx_v_rho_0, double __pyx_v_nu_0, double __pyx_v_rho_1, double __pyx_v_nu_1, double __pyx_v_smagorinskyConstant, int __pyx_v_turbulenceClosureModel, double __pyx_v_Ct_sge, double __pyx_v_Cd_sge, double __pyx_v_C_dg, double __pyx_v_C_b, PyArrayObject *__pyx_v_eps_solid, PyArrayObject *__pyx_v_phi_solid, PyArrayObject *__pyx_v_q_velocity_solid, PyArrayObject *__pyx_v_q_vos, PyArrayObject *__pyx_v_q_dvos_dt, PyArrayObject *__pyx_v_q_dragAlpha, PyArrayObject *__pyx_v_q_dragBeta, PyArrayObject *__pyx_v_q_mass_source, PyArrayObject *__pyx_v_q_turb_var_0, PyArrayObject *__pyx_v_q_turb_var_1, PyArrayObject *__pyx_v_q_turb_var_grad_0, PyArrayObject *__pyx_v_p_l2g, PyArrayObject *__pyx_v_vel_l2g, PyArrayObject *__pyx_v_p_dof, PyArrayObject *__pyx_v_u_dof, PyArrayObject *__pyx_v_v_dof, PyArrayObject *__pyx_v_w_dof, PyArrayObject *__pyx_v_g, double __pyx_v_useVF, PyArrayObject *__pyx_v_vf, PyArrayObject *__pyx_v_phi, PyArrayObject *__pyx_v_normal_phi, PyArrayObject *__pyx_v_kappa_phi, PyArrayObject *__pyx_v_q_mom_u_acc_beta_bdf, PyArrayObject *__pyx_v_q_mom_v_acc_beta_bdf, PyArrayObject *__pyx_v_q_mom_w_acc_beta_bdf, PyArrayObject *__pyx_v_q_dV, PyArrayObject *__pyx_v_q_dV_last, PyArrayObject *__pyx_v_q_velocity_sge, PyArrayObject *__pyx_v_ebqe_velocity_star, PyArrayObject *__pyx_v_q_cfl, PyArrayObject *__pyx_v_q_numDiff_u_last, PyArrayObject *__pyx_v_q_numDiff_v_last, PyArrayObject *__pyx_v_q_numDiff_w_last, PyArrayObject *__pyx_v_sdInfo_u_u_rowptr, PyArrayObject *__pyx_v_sdInfo_u_u_colind, PyArrayObject *__pyx_v_sdInfo_u_v_rowptr, PyArrayObject *__pyx_v_sdInfo_u_v_colind, PyArrayObject *__pyx_v_sdInfo_u_w_rowptr, PyArrayObject *__pyx_v_sdInfo_u_w_colind, PyArrayObject *__pyx_v_sdInfo_v_v_rowptr, PyArrayObject *__pyx_v_sdInfo_v_v_colind, PyArrayObject *__pyx_v_sdInfo_v_u_rowptr, PyArrayObject *__pyx_v_sdInfo_v_u_colind, PyArrayObject *__pyx_v_sdInfo_v_w_rowptr, PyArrayObject *__pyx_v_sdInfo_v_w_colind, PyArrayObject *__pyx_v_sdInfo_w_w_rowptr, PyArrayObject *__pyx_v_sdInfo_w_w_colind, PyArrayObject *__pyx_v_sdInfo_w_u_rowptr, PyArrayObject *__pyx_v_sdInfo_w_u_colind, PyArrayObject *__pyx_v_sdInfo_w_v_rowptr, PyArrayObject *__pyx_v_sdInfo_w_v_colind, PyArrayObject *__pyx_v_csrRowIndeces_p_p, PyArrayObject *__pyx_v_csrColumnOffsets_p_p, PyArrayObject *__pyx_v_csrRowIndeces_p_u, PyArrayObject *__pyx_v_csrColumnOffsets_p_u, PyArrayObject *__pyx_v_csrRowIndeces_p_v, PyArrayObject *__pyx_v_csrColumnOffsets_p_v, PyArrayObject *__pyx_v_csrRowIndeces_p_w, PyArrayObject *__pyx_v_csrColumnOffsets_p_w, PyArrayObject *__pyx_v_csrRowIndeces_u_p, PyArrayObject *__pyx_v_csrColumnOffsets_u_p, PyArrayObject *__pyx_v_csrRowIndeces_u_u, PyArrayObject *__pyx_v_csrColumnOffsets_u_u, PyArrayObject *__pyx_v_csrRowIndeces_u_v, PyArrayObject *__pyx_v_csrColumnOffsets_u_v, PyArrayObject *__pyx_v_csrRowIndeces_u_w, PyArrayObject *__pyx_v_csrColumnOffsets_u_w, PyArrayObject *__pyx_v_csrRowIndeces_v_p, PyArrayObject *__pyx_v_csrColumnOffsets_v_p, PyArrayObject *__pyx_v_csrRowIndeces_v_u, PyArrayObject *__pyx_v_csrColumnOffsets_v_u, PyArrayObject *__pyx_v_csrRowIndeces_v_v, PyArrayObject *__pyx_v_csrColumnOffsets_v_v, PyArrayObject *__pyx_v_csrRowIndeces_v_w, PyArrayObject *__pyx_v_csrColumnOffsets_v_w, PyArrayObject *__pyx_v_csrRowIndeces_w_p, PyArrayObject *__pyx_v_csrColumnOffsets_w_p, PyArrayObject *__pyx_v_csrRowIndeces_w_u, PyArrayObject *__pyx_v_csrColumnOffsets_w_u, PyArrayObject *__pyx_v_csrRowIndeces_w_v, PyArrayObject *__pyx_v_csrColumnOffsets_w_v, PyArrayObject *__pyx_v_csrRowIndeces_w_w, PyArrayObject *__pyx_v_csrColumnOffsets_w_w, PyObject *__pyx_v_globalJacobian, int __pyx_v_nExteriorElementBoundaries_global, PyArrayObject *__pyx_v_exteriorElementBoundariesArray, PyArrayObject *__pyx_v_elementBoundaryElementsArray, PyArrayObject *__pyx_v_elementBoundaryLocalElementBoundariesArray, PyArrayObject *__pyx_v_ebqe_vf_ext, PyArrayObject *__pyx_v_bc_ebqe_vf_ext, PyArrayObject *__pyx_v_ebqe_phi_ext, PyArrayObject *__pyx_v_bc_ebqe_phi_ext, PyArrayObject *__pyx_v_ebqe_normal_phi_ext, PyArrayObject *__pyx_v_ebqe_kappa_phi_ext, PyArrayObject *__pyx_v_ebqe_vos_ext, PyArrayObject *__pyx_v_ebqe_turb_var_0, PyArrayObject *__pyx_v_ebqe_turb_var_1, PyArrayObject *__pyx_v_isDOFBoundary_p, PyArrayObject *__pyx_v_isDOFBoundary_u, PyArrayObject *__pyx_v_isDOFBoundary_v, PyArrayObject *__pyx_v_isDOFBoundary_w, PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_p, PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_u, PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_v, PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_w, PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_u, PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_v, PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_w, PyArrayObject *__pyx_v_ebqe_bc_p_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_mass_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_mom_u_adv_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_mom_v_adv_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_mom_w_adv_ext, PyArrayObject *__pyx_v_ebqe_bc_u_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_u_diff_ext, PyArrayObject *__pyx_v_ebqe_penalty_ext, PyArrayObject *__pyx_v_ebqe_bc_v_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_v_diff_ext, PyArrayObject *__pyx_v_ebqe_bc_w_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_w_diff_ext, PyArrayObject *__pyx_v_csrColumnOffsets_eb_p_p, PyArrayObject *__pyx_v_csrColumnOffsets_eb_p_u, PyArrayObject *__pyx_v_csrColumnOffsets_eb_p_v, PyArrayObject *__pyx_v_csrColumnOffsets_eb_p_w, PyArrayObject *__pyx_v_csrColumnOffsets_eb_u_p, PyArrayObject *__pyx_v_csrColumnOffsets_eb_u_u, PyArrayObject *__pyx_v_csrColumnOffsets_eb_u_v, PyArrayObject *__pyx_v_csrColumnOffsets_eb_u_w, PyArrayObject *__pyx_v_csrColumnOffsets_eb_v_p, PyArrayObject *__pyx_v_csrColumnOffsets_eb_v_u, PyArrayObject *__pyx_v_csrColumnOffsets_eb_v_v, PyArrayObject *__pyx_v_csrColumnOffsets_eb_v_w, PyArrayObject *__pyx_v_csrColumnOffsets_eb_w_p, PyArrayObject *__pyx_v_csrColumnOffsets_eb_w_u, PyArrayObject *__pyx_v_csrColumnOffsets_eb_w_v, PyArrayObject *__pyx_v_csrColumnOffsets_eb_w_w, PyArrayObject *__pyx_v_elementFlags, int __pyx_v_nParticles, double __pyx_v_particle_epsFact, double __pyx_v_particle_alpha, double __pyx_v_particle_beta, double __pyx_v_particle_penalty_constant, PyArrayObject *__pyx_v_particle_signed_distances, PyArrayObject *__pyx_v_particle_signed_distance_normals, PyArrayObject *__pyx_v_particle_velocities, PyArrayObject *__pyx_v_particle_centroids, double __pyx_v_particle_nitsche, int __pyx_v_KILL_PRESSURE_TERM, int __pyx_v_MATERIAL_PARAMETERS_AS_FUNCTION, PyArrayObject *__pyx_v_density_as_function, PyArrayObject *__pyx_v_dynamic_viscosity_as_function, PyArrayObject *__pyx_v_ebqe_density_as_function, PyArrayObject *__pyx_v_ebqe_dynamic_viscosity_as_function); /* proto */
static PyObject *__pyx_pf_6mprans_8cRANS3PF_7RANS3PF_12calculateVelocityAverage(struct __pyx_obj_6mprans_8cRANS3PF_RANS3PF *__pyx_v_self, int __pyx_v_nExteriorElementBoundaries_global, PyArrayObject *__pyx_v_exteriorElementBoundariesArray, int __pyx_v_nInteriorElementBoundaries_global, PyArrayObject *__pyx_v_interiorElementBoundariesArray, PyArrayObject *__pyx_v_elementBoundaryElementsArray, PyArrayObject *__pyx_v_elementBoundaryLocalElementBoundariesArray, PyArrayObject *__pyx_v_mesh_dof, PyArrayObject *__pyx_v_mesh_velocity_dof, double __pyx_v_MOVING_DOMAIN, PyArrayObject *__pyx_v_mesh_l2g, PyArrayObject *__pyx_v_mesh_trial_trace_ref, PyArrayObject *__pyx_v_mesh_grad_trial_trace_ref, PyArrayObject *__pyx_v_normal_ref, PyArrayObject *__pyx_v_boundaryJac_ref, PyArrayObject *__pyx_v_vel_l2g, PyArrayObject *__pyx_v_u_dof, PyArrayObject *__pyx_v_v_dof, PyArrayObject *__pyx_v_w_dof, PyArrayObject *__pyx_v_vos_dof, PyArrayObject *__pyx_v_vel_trial_trace_ref, PyArrayObject *__pyx_v_ebqe_velocity, PyArrayObject *__pyx_v_velocityAverage); /* proto */
static int __pyx_pf_6mprans_8cRANS3PF_9RANS3PF2D___cinit__(struct __pyx_obj_6mprans_8cRANS3PF_RANS3PF2D *__pyx_v_self, int __pyx_v_nSpaceIn, int __pyx_v_nQuadraturePoints_elementIn, int __pyx_v_nDOF_mesh_trial_elementIn, int __pyx_v_nDOF_trial_elementIn, int __pyx_v_nDOF_test_elementIn, int __pyx_v_nQuadraturePoints_elementBoundaryIn, int __pyx_v_CompKernelFlag, double __pyx_v_aDarcy, double __pyx_v_betaForch, double __pyx_v_grain, double __pyx_v_packFraction, double __pyx_v_packMargin, double __pyx_v_maxFraction, double __pyx_v_frFraction, double __pyx_v_sigmaC, double __pyx_v_C3e, double __pyx_v_C4e, double __pyx_v_eR, double __pyx_v_fContact, double __pyx_v_mContact, double __pyx_v_nContact, double __pyx_v_angFriction); /* proto */
static void __pyx_pf_6mprans_8cRANS3PF_9RANS3PF2D_2__dealloc__(struct __pyx_obj_6mprans_8cRANS3PF_RANS3PF2D *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6mprans_8cRANS3PF_9RANS3PF2D_4calculateResidual(struct __pyx_obj_6mprans_8cRANS3PF_RANS3PF2D *__pyx_v_self, PyArrayObject *__pyx_v_mesh_trial_ref, PyArrayObject *__pyx_v_mesh_grad_trial_ref, PyArrayObject *__pyx_v_mesh_dof, PyArrayObject *__pyx_v_mesh_velocity_dof, double __pyx_v_MOVING_DOMAIN, double __pyx_v_PSTAB, PyArrayObject *__pyx_v_mesh_l2g, PyArrayObject *__pyx_v_dV_ref, PyArrayObject *__pyx_v_p_trial_ref, PyArrayObject *__pyx_v_p_grad_trial_ref, PyArrayObject *__pyx_v_p_test_ref, PyArrayObject *__pyx_v_p_grad_test_ref, PyArrayObject *__pyx_v_q_p, PyArrayObject *__pyx_v_q_grad_p, PyArrayObject *__pyx_v_ebqe_p, PyArrayObject *__pyx_v_ebqe_grad_p, PyArrayObject *__pyx_v_vel_trial_ref, PyArrayObject *__pyx_v_vel_grad_trial_ref, PyArrayObject *__pyx_v_vel_hess_trial_ref, PyArrayObject *__pyx_v_vel_test_ref, PyArrayObject *__pyx_v_vel_grad_test_ref, PyArrayObject *__pyx_v_mesh_trial_trace_ref, PyArrayObject *__pyx_v_mesh_grad_trial_trace_ref, PyArrayObject *__pyx_v_dS_ref, PyArrayObject *__pyx_v_p_trial_trace_ref, PyArrayObject *__pyx_v_p_grad_trial_trace_ref, PyArrayObject *__pyx_v_p_test_trace_ref, PyArrayObject *__pyx_v_p_grad_test_trace_ref, PyArrayObject *__pyx_v_vel_trial_trace_ref, PyArrayObject *__pyx_v_vel_grad_trial_trace_ref, PyArrayObject *__pyx_v_vel_test_trace_ref, PyArrayObject *__pyx_v_vel_grad_test_trace_ref, PyArrayObject *__pyx_v_normal_ref, PyArrayObject *__pyx_v_boundaryJac_ref, double __pyx_v_eb_adjoint_sigma, PyArrayObject *__pyx_v_elementDiameter, PyArrayObject *__pyx_v_nodeDiametersArray, double __pyx_v_hFactor, int __pyx_v_nElements_global, int __pyx_v_nElements_owned, int __pyx_v_nElementBoundaries_owned, double __pyx_v_useRBLES, double __pyx_v_useMetrics, double __pyx_v_alphaBDF, double __pyx_v_epsFact_rho, double __pyx_v_epsFact_mu, double __pyx_v_sigma, double __pyx_v_rho_0, double __pyx_v_nu_0, double __pyx_v_rho_1, double __pyx_v_nu_1, double __pyx_v_smagorinskyConstant, int __pyx_v_turbulenceClosureModel, double __pyx_v_Ct_sge, double __pyx_v_Cd_sge, double __pyx_v_C_dc, double __pyx_v_C_b, PyArrayObject *__pyx_v_eps_solid, PyArrayObject *__pyx_v_phi_solid, PyArrayObject *__pyx_v_q_velocity_solid, PyArrayObject *__pyx_v_q_vos, PyArrayObject *__pyx_v_q_dvos_dt, PyArrayObject *__pyx_v_q_dragAlpha, PyArrayObject *__pyx_v_q_dragBeta, PyArrayObject *__pyx_v_q_mass_source, PyArrayObject *__pyx_v_q_turb_var_0, PyArrayObject *__pyx_v_q_turb_var_1, PyArrayObject *__pyx_v_q_turb_var_grad_0, PyArrayObject *__pyx_v_q_eddy_viscosity, PyArrayObject *__pyx_v_p_l2g, PyArrayObject *__pyx_v_vel_l2g, PyArrayObject *__pyx_v_p_dof, PyArrayObject *__pyx_v_u_dof, PyArrayObject *__pyx_v_v_dof, PyArrayObject *__pyx_v_w_dof, PyArrayObject *__pyx_v_u_dof_old, PyArrayObject *__pyx_v_v_dof_old, PyArrayObject *__pyx_v_w_dof_old, PyArrayObject *__pyx_v_u_dof_old_old, PyArrayObject *__pyx_v_v_dof_old_old, PyArrayObject *__pyx_v_w_dof_old_old, PyArrayObject *__pyx_v_g, double __pyx_v_useVF, PyArrayObject *__pyx_v_vf, PyArrayObject *__pyx_v_phi, PyArrayObject *__pyx_v_normal_phi, PyArrayObject *__pyx_v_kappa_phi, PyArrayObject *__pyx_v_q_mom_u_acc, PyArrayObject *__pyx_v_q_mom_v_acc, PyArrayObject *__pyx_v_q_mom_w_acc, PyArrayObject *__pyx_v_q_mass_adv, PyArrayObject *__pyx_v_q_mom_u_acc_beta_bdf, PyArrayObject *__pyx_v_q_mom_v_acc_beta_bdf, PyArrayObject *__pyx_v_q_mom_w_acc_beta_bdf, PyArrayObject *__pyx_v_q_dV, PyArrayObject *__pyx_v_q_dV_last, PyArrayObject *__pyx_v_q_velocity_sge, PyArrayObject *__pyx_v_ebqe_velocity_star, PyArrayObject *__pyx_v_q_cfl, PyArrayObject *__pyx_v_q_numDiff_u, PyArrayObject *__pyx_v_q_numDiff_v, PyArrayObject *__pyx_v_q_numDiff_w, PyArrayObject *__pyx_v_q_numDiff_u_last, PyArrayObject *__pyx_v_q_numDiff_v_last, PyArrayObject *__pyx_v_q_numDiff_w_last, PyArrayObject *__pyx_v_sdInfo_u_u_rowptr, PyArrayObject *__pyx_v_sdInfo_u_u_colind, PyArrayObject *__pyx_v_sdInfo_u_v_rowptr, PyArrayObject *__pyx_v_sdInfo_u_v_colind, PyArrayObject *__pyx_v_sdInfo_u_w_rowptr, PyArrayObject *__pyx_v_sdInfo_u_w_colind, PyArrayObject *__pyx_v_sdInfo_v_v_rowptr, PyArrayObject *__pyx_v_sdInfo_v_v_colind, PyArrayObject *__pyx_v_sdInfo_v_u_rowptr, PyArrayObject *__pyx_v_sdInfo_v_u_colind, PyArrayObject *__pyx_v_sdInfo_v_w_rowptr, PyArrayObject *__pyx_v_sdInfo_v_w_colind, PyArrayObject *__pyx_v_sdInfo_w_w_rowptr, PyArrayObject *__pyx_v_sdInfo_w_w_colind, PyArrayObject *__pyx_v_sdInfo_w_u_rowptr, PyArrayObject *__pyx_v_sdInfo_w_u_colind, PyArrayObject *__pyx_v_sdInfo_w_v_rowptr, PyArrayObject *__pyx_v_sdInfo_w_v_colind, int __pyx_v_offset_p, int __pyx_v_offset_u, int __pyx_v_offset_v, int __pyx_v_offset_w, int __pyx_v_stride_p, int __pyx_v_stride_u, int __pyx_v_stride_v, int __pyx_v_stride_w, PyArrayObject *__pyx_v_globalResidual, int __pyx_v_nExteriorElementBoundaries_global, PyArrayObject *__pyx_v_exteriorElementBoundariesArray, PyArrayObject *__pyx_v_elementBoundaryElementsArray, PyArrayObject *__pyx_v_elementBoundaryLocalElementBoundariesArray, PyArrayObject *__pyx_v_ebqe_vf_ext, PyArrayObject *__pyx_v_bc_ebqe_vf_ext, PyArrayObject *__pyx_v_ebqe_phi_ext, PyArrayObject *__pyx_v_bc_ebqe_phi_ext, PyArrayObject *__pyx_v_ebqe_normal_phi_ext, PyArrayObject *__pyx_v_ebqe_kappa_phi_ext, PyArrayObject *__pyx_v_ebqe_vos_ext, PyArrayObject *__pyx_v_ebqe_turb_var_0, PyArrayObject *__pyx_v_ebqe_turb_var_1, PyArrayObject *__pyx_v_isDOFBoundary_p, PyArrayObject *__pyx_v_isDOFBoundary_u, PyArrayObject *__pyx_v_isDOFBoundary_v, PyArrayObject *__pyx_v_isDOFBoundary_w, PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_p, PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_u, PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_v, PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_w, PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_u, PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_v, PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_w, PyArrayObject *__pyx_v_ebqe_bc_p_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_mass_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_mom_u_adv_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_mom_v_adv_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_mom_w_adv_ext, PyArrayObject *__pyx_v_ebqe_bc_u_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_u_diff_ext, PyArrayObject *__pyx_v_ebqe_penalty_ext, PyArrayObject *__pyx_v_ebqe_bc_v_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_v_diff_ext, PyArrayObject *__pyx_v_ebqe_bc_w_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_w_diff_ext, PyArrayObject *__pyx_v_q_x, PyArrayObject *__pyx_v_q_velocity, PyArrayObject *__pyx_v_ebqe_velocity, PyArrayObject *__pyx_v_q_grad_u, PyArrayObject *__pyx_v_q_grad_v, PyArrayObject *__pyx_v_q_grad_w, PyArrayObject *__pyx_v_q_divU, PyArrayObject *__pyx_v_ebqe_grad_u, PyArrayObject *__pyx_v_ebqe_grad_v, PyArrayObject *__pyx_v_ebqe_grad_w, PyArrayObject *__pyx_v_flux, PyArrayObject *__pyx_v_elementResidual_p, PyArrayObject *__pyx_v_elementFlags, PyArrayObject *__pyx_v_boundaryFlags, PyArrayObject *__pyx_v_barycenters, PyArrayObject *__pyx_v_wettedAreas, PyArrayObject *__pyx_v_netForces_p, PyArrayObject *__pyx_v_netForces_v, PyArrayObject *__pyx_v_netMoments, PyArrayObject *__pyx_v_q_rho, PyArrayObject *__pyx_v_ebqe_rho, PyArrayObject *__pyx_v_q_nu, PyArrayObject *__pyx_v_ebqe_nu, int __pyx_v_nParticles, double __pyx_v_particle_epsFact, double __pyx_v_particle_alpha, double __pyx_v_particle_beta, double __pyx_v_particle_penalty_constant, PyArrayObject *__pyx_v_particle_signed_distances, PyArrayObject *__pyx_v_particle_signed_distance_normals, PyArrayObject *__pyx_v_particle_velocities, PyArrayObject *__pyx_v_particle_centroids, PyArrayObject *__pyx_v_particle_netForces, PyArrayObject *__pyx_v_particle_netMoments, PyArrayObject *__pyx_v_particle_surfaceArea, double __pyx_v_particle_nitsche, int __pyx_v_STABILIZATION_TYPE, double __pyx_v_areaRefElement, double __pyx_v_cMax, double __pyx_v_cE, PyArrayObject *__pyx_v_forcex, PyArrayObject *__pyx_v_forcey, PyArrayObject *__pyx_v_forcez, int __pyx_v_KILL_PRESSURE_TERM, double __pyx_v_dt, PyArrayObject *__pyx_v_entropyResidualAtCell, PyArrayObject *__pyx_v_maxSpeed2AtCell, double __pyx_v_maxSpeed2AtOmega, PyArrayObject *__pyx_v_rhoAtCell, PyArrayObject *__pyx_v_muAtCell, PyArrayObject *__pyx_v_quantDOFs, int __pyx_v_numDOFsPerEqn, PyArrayObject *__pyx_v_csrRowIndeces_DofLoops, PyArrayObject *__pyx_v_csrColumnOffsets_DofLoops, PyArrayObject *__pyx_v_ML, PyArrayObject *__pyx_v_Cx, PyArrayObject *__pyx_v_Cy, PyArrayObject *__pyx_v_Cz, int __pyx_v_MATERIAL_PARAMETERS_AS_FUNCTION, PyArrayObject *__pyx_v_density_as_function, PyArrayObject *__pyx_v_dynamic_viscosity_as_function, PyArrayObject *__pyx_v_ebqe_density_as_function, PyArrayObject *__pyx_v_ebqe_dynamic_viscosity_as_function, double __pyx_v_order_polynomial); /* proto */
static PyObject *__pyx_pf_6mprans_8cRANS3PF_9RANS3PF2D_6calculateJacobian(struct __pyx_obj_6mprans_8cRANS3PF_RANS3PF2D *__pyx_v_self, PyArrayObject *__pyx_v_mesh_trial_ref, PyArrayObject *__pyx_v_mesh_grad_trial_ref, PyArrayObject *__pyx_v_mesh_dof, PyArrayObject *__pyx_v_mesh_velocity_dof, double __pyx_v_MOVING_DOMAIN, double __pyx_v_PSTAB, PyArrayObject *__pyx_v_mesh_l2g, PyArrayObject *__pyx_v_dV_ref, PyArrayObject *__pyx_v_p_trial_ref, PyArrayObject *__pyx_v_p_grad_trial_ref, PyArrayObject *__pyx_v_p_test_ref, PyArrayObject *__pyx_v_p_grad_test_ref, PyArrayObject *__pyx_v_q_p, PyArrayObject *__pyx_v_q_grad_p, PyArrayObject *__pyx_v_ebqe_p, PyArrayObject *__pyx_v_ebqe_grad_p, PyArrayObject *__pyx_v_vel_trial_ref, PyArrayObject *__pyx_v_vel_grad_trial_ref, PyArrayObject *__pyx_v_vel_hess_trial_ref, PyArrayObject *__pyx_v_vel_test_ref, PyArrayObject *__pyx_v_vel_grad_test_ref, PyArrayObject *__pyx_v_mesh_trial_trace_ref, PyArrayObject *__pyx_v_mesh_grad_trial_trace_ref, PyArrayObject *__pyx_v_dS_ref, PyArrayObject *__pyx_v_p_trial_trace_ref, PyArrayObject *__pyx_v_p_grad_trial_trace_ref, PyArrayObject *__pyx_v_p_test_trace_ref, PyArrayObject *__pyx_v_p_grad_test_trace_ref, PyArrayObject *__pyx_v_vel_trial_trace_ref, PyArrayObject *__pyx_v_vel_grad_trial_trace_ref, PyArrayObject *__pyx_v_vel_test_trace_ref, PyArrayObject *__pyx_v_vel_grad_test_trace_ref, PyArrayObject *__pyx_v_normal_ref, PyArrayObject *__pyx_v_boundaryJac_ref, double __pyx_v_eb_adjoint_sigma, PyArrayObject *__pyx_v_elementDiameter, PyArrayObject *__pyx_v_nodeDiametersArray, double __pyx_v_hFactor, int __pyx_v_nElements_global, int __pyx_v_nElements_owned, double __pyx_v_useRBLES, double __pyx_v_useMetrics, double __pyx_v_alphaBDF, double __pyx_v_epsFact_rho, double __pyx_v_epsFact_mu, double __pyx_v_sigma, double __pyx_v_rho_0, double __pyx_v_nu_0, double __pyx_v_rho_1, double __pyx_v_nu_1, double __pyx_v_smagorinskyConstant, int __pyx_v_turbulenceClosureModel, double __pyx_v_Ct_sge, double __pyx_v_Cd_sge, double __pyx_v_C_dg, double __pyx_v_C_b, PyArrayObject *__pyx_v_eps_solid, PyArrayObject *__pyx_v_phi_solid, PyArrayObject *__pyx_v_q_velocity_solid, PyArrayObject *__pyx_v_q_vos, PyArrayObject *__pyx_v_q_dvos_dt, PyArrayObject *__pyx_v_q_dragAlpha, PyArrayObject *__pyx_v_q_dragBeta, PyArrayObject *__pyx_v_q_mass_source, PyArrayObject *__pyx_v_q_turb_var_0, PyArrayObject *__pyx_v_q_turb_var_1, PyArrayObject *__pyx_v_q_turb_var_grad_0, PyArrayObject *__pyx_v_p_l2g, PyArrayObject *__pyx_v_vel_l2g, PyArrayObject *__pyx_v_p_dof, PyArrayObject *__pyx_v_u_dof, PyArrayObject *__pyx_v_v_dof, PyArrayObject *__pyx_v_w_dof, PyArrayObject *__pyx_v_g, double __pyx_v_useVF, PyArrayObject *__pyx_v_vf, PyArrayObject *__pyx_v_phi, PyArrayObject *__pyx_v_normal_phi, PyArrayObject *__pyx_v_kappa_phi, PyArrayObject *__pyx_v_q_mom_u_acc_beta_bdf, PyArrayObject *__pyx_v_q_mom_v_acc_beta_bdf, PyArrayObject *__pyx_v_q_mom_w_acc_beta_bdf, PyArrayObject *__pyx_v_q_dV, PyArrayObject *__pyx_v_q_dV_last, PyArrayObject *__pyx_v_q_velocity_sge, PyArrayObject *__pyx_v_ebqe_velocity_star, PyArrayObject *__pyx_v_q_cfl, PyArrayObject *__pyx_v_q_numDiff_u_last, PyArrayObject *__pyx_v_q_numDiff_v_last, PyArrayObject *__pyx_v_q_numDiff_w_last, PyArrayObject *__pyx_v_sdInfo_u_u_rowptr, PyArrayObject *__pyx_v_sdInfo_u_u_colind, PyArrayObject *__pyx_v_sdInfo_u_v_rowptr, PyArrayObject *__pyx_v_sdInfo_u_v_colind, PyArrayObject *__pyx_v_sdInfo_u_w_rowptr, PyArrayObject *__pyx_v_sdInfo_u_w_colind, PyArrayObject *__pyx_v_sdInfo_v_v_rowptr, PyArrayObject *__pyx_v_sdInfo_v_v_colind, PyArrayObject *__pyx_v_sdInfo_v_u_rowptr, PyArrayObject *__pyx_v_sdInfo_v_u_colind, PyArrayObject *__pyx_v_sdInfo_v_w_rowptr, PyArrayObject *__pyx_v_sdInfo_v_w_colind, PyArrayObject *__pyx_v_sdInfo_w_w_rowptr, PyArrayObject *__pyx_v_sdInfo_w_w_colind, PyArrayObject *__pyx_v_sdInfo_w_u_rowptr, PyArrayObject *__pyx_v_sdInfo_w_u_colind, PyArrayObject *__pyx_v_sdInfo_w_v_rowptr, PyArrayObject *__pyx_v_sdInfo_w_v_colind, PyArrayObject *__pyx_v_csrRowIndeces_p_p, PyArrayObject *__pyx_v_csrColumnOffsets_p_p, PyArrayObject *__pyx_v_csrRowIndeces_p_u, PyArrayObject *__pyx_v_csrColumnOffsets_p_u, PyArrayObject *__pyx_v_csrRowIndeces_p_v, PyArrayObject *__pyx_v_csrColumnOffsets_p_v, PyArrayObject *__pyx_v_csrRowIndeces_p_w, PyArrayObject *__pyx_v_csrColumnOffsets_p_w, PyArrayObject *__pyx_v_csrRowIndeces_u_p, PyArrayObject *__pyx_v_csrColumnOffsets_u_p, PyArrayObject *__pyx_v_csrRowIndeces_u_u, PyArrayObject *__pyx_v_csrColumnOffsets_u_u, PyArrayObject *__pyx_v_csrRowIndeces_u_v, PyArrayObject *__pyx_v_csrColumnOffsets_u_v, PyArrayObject *__pyx_v_csrRowIndeces_u_w, PyArrayObject *__pyx_v_csrColumnOffsets_u_w, PyArrayObject *__pyx_v_csrRowIndeces_v_p, PyArrayObject *__pyx_v_csrColumnOffsets_v_p, PyArrayObject *__pyx_v_csrRowIndeces_v_u, PyArrayObject *__pyx_v_csrColumnOffsets_v_u, PyArrayObject *__pyx_v_csrRowIndeces_v_v, PyArrayObject *__pyx_v_csrColumnOffsets_v_v, PyArrayObject *__pyx_v_csrRowIndeces_v_w, PyArrayObject *__pyx_v_csrColumnOffsets_v_w, PyArrayObject *__pyx_v_csrRowIndeces_w_p, PyArrayObject *__pyx_v_csrColumnOffsets_w_p, PyArrayObject *__pyx_v_csrRowIndeces_w_u, PyArrayObject *__pyx_v_csrColumnOffsets_w_u, PyArrayObject *__pyx_v_csrRowIndeces_w_v, PyArrayObject *__pyx_v_csrColumnOffsets_w_v, PyArrayObject *__pyx_v_csrRowIndeces_w_w, PyArrayObject *__pyx_v_csrColumnOffsets_w_w, PyObject *__pyx_v_globalJacobian, int __pyx_v_nExteriorElementBoundaries_global, PyArrayObject *__pyx_v_exteriorElementBoundariesArray, PyArrayObject *__pyx_v_elementBoundaryElementsArray, PyArrayObject *__pyx_v_elementBoundaryLocalElementBoundariesArray, PyArrayObject *__pyx_v_ebqe_vf_ext, PyArrayObject *__pyx_v_bc_ebqe_vf_ext, PyArrayObject *__pyx_v_ebqe_phi_ext, PyArrayObject *__pyx_v_bc_ebqe_phi_ext, PyArrayObject *__pyx_v_ebqe_normal_phi_ext, PyArrayObject *__pyx_v_ebqe_kappa_phi_ext, PyArrayObject *__pyx_v_ebqe_vos_ext, PyArrayObject *__pyx_v_ebqe_turb_var_0, PyArrayObject *__pyx_v_ebqe_turb_var_1, PyArrayObject *__pyx_v_isDOFBoundary_p, PyArrayObject *__pyx_v_isDOFBoundary_u, PyArrayObject *__pyx_v_isDOFBoundary_v, PyArrayObject *__pyx_v_isDOFBoundary_w, PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_p, PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_u, PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_v, PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_w, PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_u, PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_v, PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_w, PyArrayObject *__pyx_v_ebqe_bc_p_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_mass_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_mom_u_adv_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_mom_v_adv_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_mom_w_adv_ext, PyArrayObject *__pyx_v_ebqe_bc_u_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_u_diff_ext, PyArrayObject *__pyx_v_ebqe_penalty_ext, PyArrayObject *__pyx_v_ebqe_bc_v_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_v_diff_ext, PyArrayObject *__pyx_v_ebqe_bc_w_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_w_diff_ext, PyArrayObject *__pyx_v_csrColumnOffsets_eb_p_p, PyArrayObject *__pyx_v_csrColumnOffsets_eb_p_u, PyArrayObject *__pyx_v_csrColumnOffsets_eb_p_v, PyArrayObject *__pyx_v_csrColumnOffsets_eb_p_w, PyArrayObject *__pyx_v_csrColumnOffsets_eb_u_p, PyArrayObject *__pyx_v_csrColumnOffsets_eb_u_u, PyArrayObject *__pyx_v_csrColumnOffsets_eb_u_v, PyArrayObject *__pyx_v_csrColumnOffsets_eb_u_w, PyArrayObject *__pyx_v_csrColumnOffsets_eb_v_p, PyArrayObject *__pyx_v_csrColumnOffsets_eb_v_u, PyArrayObject *__pyx_v_csrColumnOffsets_eb_v_v, PyArrayObject *__pyx_v_csrColumnOffsets_eb_v_w, PyArrayObject *__pyx_v_csrColumnOffsets_eb_w_p, PyArrayObject *__pyx_v_csrColumnOffsets_eb_w_u, PyArrayObject *__pyx_v_csrColumnOffsets_eb_w_v, PyArrayObject *__pyx_v_csrColumnOffsets_eb_w_w, PyArrayObject *__pyx_v_elementFlags, int __pyx_v_nParticles, double __pyx_v_particle_epsFact, double __pyx_v_particle_alpha, double __pyx_v_particle_beta, double __pyx_v_particle_penalty_constant, PyArrayObject *__pyx_v_particle_signed_distances, PyArrayObject *__pyx_v_particle_signed_distance_normals, PyArrayObject *__pyx_v_particle_velocities, PyArrayObject *__pyx_v_particle_centroids, double __pyx_v_particle_nitsche, int __pyx_v_KILL_PRESSURE_TERM, int __pyx_v_MATERIAL_PARAMETERS_AS_FUNCTION, PyArrayObject *__pyx_v_density_as_function, PyArrayObject *__pyx_v_dynamic_viscosity_as_function, PyArrayObject *__pyx_v_ebqe_density_as_function, PyArrayObject *__pyx_v_ebqe_dynamic_viscosity_as_function); /* proto */
static PyObject *__pyx_pf_6mprans_8cRANS3PF_9RANS3PF2D_8calculateResidual_entropy_viscosity(struct __pyx_obj_6mprans_8cRANS3PF_RANS3PF2D *__pyx_v_self, PyArrayObject *__pyx_v_mesh_trial_ref, PyArrayObject *__pyx_v_mesh_grad_trial_ref, PyArrayObject *__pyx_v_mesh_dof, PyArrayObject *__pyx_v_mesh_velocity_dof, double __pyx_v_MOVING_DOMAIN, double __pyx_v_PSTAB, PyArrayObject *__pyx_v_mesh_l2g, PyArrayObject *__pyx_v_dV_ref, PyArrayObject *__pyx_v_p_trial_ref, PyArrayObject *__pyx_v_p_grad_trial_ref, PyArrayObject *__pyx_v_p_test_ref, PyArrayObject *__pyx_v_p_grad_test_ref, PyArrayObject *__pyx_v_q_p, PyArrayObject *__pyx_v_q_grad_p, PyArrayObject *__pyx_v_ebqe_p, PyArrayObject *__pyx_v_ebqe_grad_p, PyArrayObject *__pyx_v_vel_trial_ref, PyArrayObject *__pyx_v_vel_grad_trial_ref, PyArrayObject *__pyx_v_vel_hess_trial_ref, PyArrayObject *__pyx_v_vel_test_ref, PyArrayObject *__pyx_v_vel_grad_test_ref, PyArrayObject *__pyx_v_mesh_trial_trace_ref, PyArrayObject *__pyx_v_mesh_grad_trial_trace_ref, PyArrayObject *__pyx_v_dS_ref, PyArrayObject *__pyx_v_p_trial_trace_ref, PyArrayObject *__pyx_v_p_grad_trial_trace_ref, PyArrayObject *__pyx_v_p_test_trace_ref, PyArrayObject *__pyx_v_p_grad_test_trace_ref, PyArrayObject *__pyx_v_vel_trial_trace_ref, PyArrayObject *__pyx_v_vel_grad_trial_trace_ref, PyArrayObject *__pyx_v_vel_test_trace_ref, PyArrayObject *__pyx_v_vel_grad_test_trace_ref, PyArrayObject *__pyx_v_normal_ref, PyArrayObject *__pyx_v_boundaryJac_ref, double __pyx_v_eb_adjoint_sigma, PyArrayObject *__pyx_v_elementDiameter, PyArrayObject *__pyx_v_nodeDiametersArray, double __pyx_v_hFactor, int __pyx_v_nElements_global, int __pyx_v_nElements_owned, int __pyx_v_nElementBoundaries_owned, double __pyx_v_useRBLES, double __pyx_v_useMetrics, double __pyx_v_alphaBDF, double __pyx_v_epsFact_rho, double __pyx_v_epsFact_mu, double __pyx_v_sigma, double __pyx_v_rho_0, double __pyx_v_nu_0, double __pyx_v_rho_1, double __pyx_v_nu_1, double __pyx_v_smagorinskyConstant, int __pyx_v_turbulenceClosureModel, double __pyx_v_Ct_sge, double __pyx_v_Cd_sge, double __pyx_v_C_dc, double __pyx_v_C_b, PyArrayObject *__pyx_v_eps_solid, PyArrayObject *__pyx_v_phi_solid, PyArrayObject *__pyx_v_q_velocity_solid, PyArrayObject *__pyx_v_q_vos, PyArrayObject *__pyx_v_q_dvos_dt, PyArrayObject *__pyx_v_q_dragAlpha, PyArrayObject *__pyx_v_q_dragBeta, PyArrayObject *__pyx_v_q_mass_source, PyArrayObject *__pyx_v_q_turb_var_0, PyArrayObject *__pyx_v_q_turb_var_1, PyArrayObject *__pyx_v_q_turb_var_grad_0, PyArrayObject *__pyx_v_q_eddy_viscosity, PyArrayObject *__pyx_v_p_l2g, PyArrayObject *__pyx_v_vel_l2g, PyArrayObject *__pyx_v_p_dof, PyArrayObject *__pyx_v_u_dof, PyArrayObject *__pyx_v_v_dof, PyArrayObject *__pyx_v_w_dof, PyArrayObject *__pyx_v_u_dof_old, PyArrayObject *__pyx_v_v_dof_old, PyArrayObject *__pyx_v_w_dof_old, PyArrayObject *__pyx_v_u_dof_old_old, PyArrayObject *__pyx_v_v_dof_old_old, PyArrayObject *__pyx_v_w_dof_old_old, PyArrayObject *__pyx_v_g, double __pyx_v_useVF, PyArrayObject *__pyx_v_vf, PyArrayObject *__pyx_v_phi, PyArrayObject *__pyx_v_normal_phi, PyArrayObject *__pyx_v_kappa_phi, PyArrayObject *__pyx_v_q_mom_u_acc, PyArrayObject *__pyx_v_q_mom_v_acc, PyArrayObject *__pyx_v_q_mom_w_acc, PyArrayObject *__pyx_v_q_mass_adv, PyArrayObject *__pyx_v_q_mom_u_acc_beta_bdf, PyArrayObject *__pyx_v_q_mom_v_acc_beta_bdf, PyArrayObject *__pyx_v_q_mom_w_acc_beta_bdf, PyArrayObject *__pyx_v_q_dV, PyArrayObject *__pyx_v_q_dV_last, PyArrayObject *__pyx_v_q_velocity_sge, PyArrayObject *__pyx_v_ebqe_velocity_star, PyArrayObject *__pyx_v_q_cfl, PyArrayObject *__pyx_v_q_numDiff_u, PyArrayObject *__pyx_v_q_numDiff_v, PyArrayObject *__pyx_v_q_numDiff_w, PyArrayObject *__pyx_v_q_numDiff_u_last, PyArrayObject *__pyx_v_q_numDiff_v_last, PyArrayObject *__pyx_v_q_numDiff_w_last, PyArrayObject *__pyx_v_sdInfo_u_u_rowptr, PyArrayObject *__pyx_v_sdInfo_u_u_colind, PyArrayObject *__pyx_v_sdInfo_u_v_rowptr, PyArrayObject *__pyx_v_sdInfo_u_v_colind, PyArrayObject *__pyx_v_sdInfo_u_w_rowptr, PyArrayObject *__pyx_v_sdInfo_u_w_colind, PyArrayObject *__pyx_v_sdInfo_v_v_rowptr, PyArrayObject *__pyx_v_sdInfo_v_v_colind, PyArrayObject *__pyx_v_sdInfo_v_u_rowptr, PyArrayObject *__pyx_v_sdInfo_v_u_colind, PyArrayObject *__pyx_v_sdInfo_v_w_rowptr, PyArrayObject *__pyx_v_sdInfo_v_w_colind, PyArrayObject *__pyx_v_sdInfo_w_w_rowptr, PyArrayObject *__pyx_v_sdInfo_w_w_colind, PyArrayObject *__pyx_v_sdInfo_w_u_rowptr, PyArrayObject *__pyx_v_sdInfo_w_u_colind, PyArrayObject *__pyx_v_sdInfo_w_v_rowptr, PyArrayObject *__pyx_v_sdInfo_w_v_colind, int __pyx_v_offset_p, int __pyx_v_offset_u, int __pyx_v_offset_v, int __pyx_v_offset_w, int __pyx_v_stride_p, int __pyx_v_stride_u, int __pyx_v_stride_v, int __pyx_v_stride_w, PyArrayObject *__pyx_v_globalResidual, int __pyx_v_nExteriorElementBoundaries_global, PyArrayObject *__pyx_v_exteriorElementBoundariesArray, PyArrayObject *__pyx_v_elementBoundaryElementsArray, PyArrayObject *__pyx_v_elementBoundaryLocalElementBoundariesArray, PyArrayObject *__pyx_v_ebqe_vf_ext, PyArrayObject *__pyx_v_bc_ebqe_vf_ext, PyArrayObject *__pyx_v_ebqe_phi_ext, PyArrayObject *__pyx_v_bc_ebqe_phi_ext, PyArrayObject *__pyx_v_ebqe_normal_phi_ext, PyArrayObject *__pyx_v_ebqe_kappa_phi_ext, PyArrayObject *__pyx_v_ebqe_vos_ext, PyArrayObject *__pyx_v_ebqe_turb_var_0, PyArrayObject *__pyx_v_ebqe_turb_var_1, PyArrayObject *__pyx_v_isDOFBoundary_p, PyArrayObject *__pyx_v_isDOFBoundary_u, PyArrayObject *__pyx_v_isDOFBoundary_v, PyArrayObject *__pyx_v_isDOFBoundary_w, PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_p, PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_u, PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_v, PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_w, PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_u, PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_v, PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_w, PyArrayObject *__pyx_v_ebqe_bc_p_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_mass_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_mom_u_adv_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_mom_v_adv_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_mom_w_adv_ext, PyArrayObject *__pyx_v_ebqe_bc_u_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_u_diff_ext, PyArrayObject *__pyx_v_ebqe_penalty_ext, PyArrayObject *__pyx_v_ebqe_bc_v_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_v_diff_ext, PyArrayObject *__pyx_v_ebqe_bc_w_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_w_diff_ext, PyArrayObject *__pyx_v_q_x, PyArrayObject *__pyx_v_q_velocity, PyArrayObject *__pyx_v_ebqe_velocity, PyArrayObject *__pyx_v_q_grad_u, PyArrayObject *__pyx_v_q_grad_v, PyArrayObject *__pyx_v_q_grad_w, PyArrayObject *__pyx_v_q_divU, PyArrayObject *__pyx_v_ebqe_grad_u, PyArrayObject *__pyx_v_ebqe_grad_v, PyArrayObject *__pyx_v_ebqe_grad_w, PyArrayObject *__pyx_v_flux, PyArrayObject *__pyx_v_elementResidual_p, PyArrayObject *__pyx_v_elementFlags, PyArrayObject *__pyx_v_boundaryFlags, PyArrayObject *__pyx_v_barycenters, PyArrayObject *__pyx_v_wettedAreas, PyArrayObject *__pyx_v_netForces_p, PyArrayObject *__pyx_v_netForces_v, PyArrayObject *__pyx_v_netMoments, PyArrayObject *__pyx_v_q_rho, PyArrayObject *__pyx_v_ebqe_rho, PyArrayObject *__pyx_v_q_nu, PyArrayObject *__pyx_v_ebqe_nu, int __pyx_v_nParticles, double __pyx_v_particle_epsFact, double __pyx_v_particle_alpha, double __pyx_v_particle_beta, double __pyx_v_particle_penalty_constant, PyArrayObject *__pyx_v_particle_signed_distances, PyArrayObject *__pyx_v_particle_signed_distance_normals, PyArrayObject *__pyx_v_particle_velocities, PyArrayObject *__pyx_v_particle_centroids, PyArrayObject *__pyx_v_particle_netForces, PyArrayObject *__pyx_v_particle_netMoments, PyArrayObject *__pyx_v_particle_surfaceArea, double __pyx_v_particle_nitsche, int __pyx_v_STABILIZATION_TYPE, double __pyx_v_areaRefElement, double __pyx_v_cMax, double __pyx_v_cE, PyArrayObject *__pyx_v_forcex, PyArrayObject *__pyx_v_forcey, PyArrayObject *__pyx_v_forcez, int __pyx_v_KILL_PRESSURE_TERM, double __pyx_v_dt, PyArrayObject *__pyx_v_entropyResidualAtCell, PyArrayObject *__pyx_v_maxSpeed2AtCell, double __pyx_v_maxSpeed2AtOmega, PyArrayObject *__pyx_v_rhoAtCell, PyArrayObject *__pyx_v_muAtCell, PyArrayObject *__pyx_v_quantDOFs, int __pyx_v_numDOFsPerEqn, PyArrayObject *__pyx_v_csrRowIndeces_DofLoops, PyArrayObject *__pyx_v_csrColumnOffsets_DofLoops, PyArrayObject *__pyx_v_ML, PyArrayObject *__pyx_v_Cx, PyArrayObject *__pyx_v_Cy, PyArrayObject *__pyx_v_Cz, int __pyx_v_MATERIAL_PARAMETERS_AS_FUNCTION, PyArrayObject *__pyx_v_density_as_function, PyArrayObject *__pyx_v_dynamic_viscosity_as_function, PyArrayObject *__pyx_v_ebqe_density_as_function, PyArrayObject *__pyx_v_ebqe_dynamic_viscosity_as_function, double __pyx_v_order_polynomial); /* proto */
static PyObject *__pyx_pf_6mprans_8cRANS3PF_9RANS3PF2D_10calculateJacobian_entropy_viscosity(struct __pyx_obj_6mprans_8cRANS3PF_RANS3PF2D *__pyx_v_self, PyArrayObject *__pyx_v_mesh_trial_ref, PyArrayObject *__pyx_v_mesh_grad_trial_ref, PyArrayObject *__pyx_v_mesh_dof, PyArrayObject *__pyx_v_mesh_velocity_dof, double __pyx_v_MOVING_DOMAIN, double __pyx_v_PSTAB, PyArrayObject *__pyx_v_mesh_l2g, PyArrayObject *__pyx_v_dV_ref, PyArrayObject *__pyx_v_p_trial_ref, PyArrayObject *__pyx_v_p_grad_trial_ref, PyArrayObject *__pyx_v_p_test_ref, PyArrayObject *__pyx_v_p_grad_test_ref, PyArrayObject *__pyx_v_q_p, PyArrayObject *__pyx_v_q_grad_p, PyArrayObject *__pyx_v_ebqe_p, PyArrayObject *__pyx_v_ebqe_grad_p, PyArrayObject *__pyx_v_vel_trial_ref, PyArrayObject *__pyx_v_vel_grad_trial_ref, PyArrayObject *__pyx_v_vel_hess_trial_ref, PyArrayObject *__pyx_v_vel_test_ref, PyArrayObject *__pyx_v_vel_grad_test_ref, PyArrayObject *__pyx_v_mesh_trial_trace_ref, PyArrayObject *__pyx_v_mesh_grad_trial_trace_ref, PyArrayObject *__pyx_v_dS_ref, PyArrayObject *__pyx_v_p_trial_trace_ref, PyArrayObject *__pyx_v_p_grad_trial_trace_ref, PyArrayObject *__pyx_v_p_test_trace_ref, PyArrayObject *__pyx_v_p_grad_test_trace_ref, PyArrayObject *__pyx_v_vel_trial_trace_ref, PyArrayObject *__pyx_v_vel_grad_trial_trace_ref, PyArrayObject *__pyx_v_vel_test_trace_ref, PyArrayObject *__pyx_v_vel_grad_test_trace_ref, PyArrayObject *__pyx_v_normal_ref, PyArrayObject *__pyx_v_boundaryJac_ref, double __pyx_v_eb_adjoint_sigma, PyArrayObject *__pyx_v_elementDiameter, PyArrayObject *__pyx_v_nodeDiametersArray, double __pyx_v_hFactor, int __pyx_v_nElements_global, int __pyx_v_nElements_owned, double __pyx_v_useRBLES, double __pyx_v_useMetrics, double __pyx_v_alphaBDF, double __pyx_v_epsFact_rho, double __pyx_v_epsFact_mu, double __pyx_v_sigma, double __pyx_v_rho_0, double __pyx_v_nu_0, double __pyx_v_rho_1, double __pyx_v_nu_1, double __pyx_v_smagorinskyConstant, int __pyx_v_turbulenceClosureModel, double __pyx_v_Ct_sge, double __pyx_v_Cd_sge, double __pyx_v_C_dg, double __pyx_v_C_b, PyArrayObject *__pyx_v_eps_solid, PyArrayObject *__pyx_v_phi_solid, PyArrayObject *__pyx_v_q_velocity_solid, PyArrayObject *__pyx_v_q_vos, PyArrayObject *__pyx_v_q_dvos_dt, PyArrayObject *__pyx_v_q_dragAlpha, PyArrayObject *__pyx_v_q_dragBeta, PyArrayObject *__pyx_v_q_mass_source, PyArrayObject *__pyx_v_q_turb_var_0, PyArrayObject *__pyx_v_q_turb_var_1, PyArrayObject *__pyx_v_q_turb_var_grad_0, PyArrayObject *__pyx_v_p_l2g, PyArrayObject *__pyx_v_vel_l2g, PyArrayObject *__pyx_v_p_dof, PyArrayObject *__pyx_v_u_dof, PyArrayObject *__pyx_v_v_dof, PyArrayObject *__pyx_v_w_dof, PyArrayObject *__pyx_v_g, double __pyx_v_useVF, PyArrayObject *__pyx_v_vf, PyArrayObject *__pyx_v_phi, PyArrayObject *__pyx_v_normal_phi, PyArrayObject *__pyx_v_kappa_phi, PyArrayObject *__pyx_v_q_mom_u_acc_beta_bdf, PyArrayObject *__pyx_v_q_mom_v_acc_beta_bdf, PyArrayObject *__pyx_v_q_mom_w_acc_beta_bdf, PyArrayObject *__pyx_v_q_dV, PyArrayObject *__pyx_v_q_dV_last, PyArrayObject *__pyx_v_q_velocity_sge, PyArrayObject *__pyx_v_ebqe_velocity_star, PyArrayObject *__pyx_v_q_cfl, PyArrayObject *__pyx_v_q_numDiff_u_last, PyArrayObject *__pyx_v_q_numDiff_v_last, PyArrayObject *__pyx_v_q_numDiff_w_last, PyArrayObject *__pyx_v_sdInfo_u_u_rowptr, PyArrayObject *__pyx_v_sdInfo_u_u_colind, PyArrayObject *__pyx_v_sdInfo_u_v_rowptr, PyArrayObject *__pyx_v_sdInfo_u_v_colind, PyArrayObject *__pyx_v_sdInfo_u_w_rowptr, PyArrayObject *__pyx_v_sdInfo_u_w_colind, PyArrayObject *__pyx_v_sdInfo_v_v_rowptr, PyArrayObject *__pyx_v_sdInfo_v_v_colind, PyArrayObject *__pyx_v_sdInfo_v_u_rowptr, PyArrayObject *__pyx_v_sdInfo_v_u_colind, PyArrayObject *__pyx_v_sdInfo_v_w_rowptr, PyArrayObject *__pyx_v_sdInfo_v_w_colind, PyArrayObject *__pyx_v_sdInfo_w_w_rowptr, PyArrayObject *__pyx_v_sdInfo_w_w_colind, PyArrayObject *__pyx_v_sdInfo_w_u_rowptr, PyArrayObject *__pyx_v_sdInfo_w_u_colind, PyArrayObject *__pyx_v_sdInfo_w_v_rowptr, PyArrayObject *__pyx_v_sdInfo_w_v_colind, PyArrayObject *__pyx_v_csrRowIndeces_p_p, PyArrayObject *__pyx_v_csrColumnOffsets_p_p, PyArrayObject *__pyx_v_csrRowIndeces_p_u, PyArrayObject *__pyx_v_csrColumnOffsets_p_u, PyArrayObject *__pyx_v_csrRowIndeces_p_v, PyArrayObject *__pyx_v_csrColumnOffsets_p_v, PyArrayObject *__pyx_v_csrRowIndeces_p_w, PyArrayObject *__pyx_v_csrColumnOffsets_p_w, PyArrayObject *__pyx_v_csrRowIndeces_u_p, PyArrayObject *__pyx_v_csrColumnOffsets_u_p, PyArrayObject *__pyx_v_csrRowIndeces_u_u, PyArrayObject *__pyx_v_csrColumnOffsets_u_u, PyArrayObject *__pyx_v_csrRowIndeces_u_v, PyArrayObject *__pyx_v_csrColumnOffsets_u_v, PyArrayObject *__pyx_v_csrRowIndeces_u_w, PyArrayObject *__pyx_v_csrColumnOffsets_u_w, PyArrayObject *__pyx_v_csrRowIndeces_v_p, PyArrayObject *__pyx_v_csrColumnOffsets_v_p, PyArrayObject *__pyx_v_csrRowIndeces_v_u, PyArrayObject *__pyx_v_csrColumnOffsets_v_u, PyArrayObject *__pyx_v_csrRowIndeces_v_v, PyArrayObject *__pyx_v_csrColumnOffsets_v_v, PyArrayObject *__pyx_v_csrRowIndeces_v_w, PyArrayObject *__pyx_v_csrColumnOffsets_v_w, PyArrayObject *__pyx_v_csrRowIndeces_w_p, PyArrayObject *__pyx_v_csrColumnOffsets_w_p, PyArrayObject *__pyx_v_csrRowIndeces_w_u, PyArrayObject *__pyx_v_csrColumnOffsets_w_u, PyArrayObject *__pyx_v_csrRowIndeces_w_v, PyArrayObject *__pyx_v_csrColumnOffsets_w_v, PyArrayObject *__pyx_v_csrRowIndeces_w_w, PyArrayObject *__pyx_v_csrColumnOffsets_w_w, PyObject *__pyx_v_globalJacobian, int __pyx_v_nExteriorElementBoundaries_global, PyArrayObject *__pyx_v_exteriorElementBoundariesArray, PyArrayObject *__pyx_v_elementBoundaryElementsArray, PyArrayObject *__pyx_v_elementBoundaryLocalElementBoundariesArray, PyArrayObject *__pyx_v_ebqe_vf_ext, PyArrayObject *__pyx_v_bc_ebqe_vf_ext, PyArrayObject *__pyx_v_ebqe_phi_ext, PyArrayObject *__pyx_v_bc_ebqe_phi_ext, PyArrayObject *__pyx_v_ebqe_normal_phi_ext, PyArrayObject *__pyx_v_ebqe_kappa_phi_ext, PyArrayObject *__pyx_v_ebqe_vos_ext, PyArrayObject *__pyx_v_ebqe_turb_var_0, PyArrayObject *__pyx_v_ebqe_turb_var_1, PyArrayObject *__pyx_v_isDOFBoundary_p, PyArrayObject *__pyx_v_isDOFBoundary_u, PyArrayObject *__pyx_v_isDOFBoundary_v, PyArrayObject *__pyx_v_isDOFBoundary_w, PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_p, PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_u, PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_v, PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_w, PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_u, PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_v, PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_w, PyArrayObject *__pyx_v_ebqe_bc_p_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_mass_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_mom_u_adv_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_mom_v_adv_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_mom_w_adv_ext, PyArrayObject *__pyx_v_ebqe_bc_u_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_u_diff_ext, PyArrayObject *__pyx_v_ebqe_penalty_ext, PyArrayObject *__pyx_v_ebqe_bc_v_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_v_diff_ext, PyArrayObject *__pyx_v_ebqe_bc_w_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_w_diff_ext, PyArrayObject *__pyx_v_csrColumnOffsets_eb_p_p, PyArrayObject *__pyx_v_csrColumnOffsets_eb_p_u, PyArrayObject *__pyx_v_csrColumnOffsets_eb_p_v, PyArrayObject *__pyx_v_csrColumnOffsets_eb_p_w, PyArrayObject *__pyx_v_csrColumnOffsets_eb_u_p, PyArrayObject *__pyx_v_csrColumnOffsets_eb_u_u, PyArrayObject *__pyx_v_csrColumnOffsets_eb_u_v, PyArrayObject *__pyx_v_csrColumnOffsets_eb_u_w, PyArrayObject *__pyx_v_csrColumnOffsets_eb_v_p, PyArrayObject *__pyx_v_csrColumnOffsets_eb_v_u, PyArrayObject *__pyx_v_csrColumnOffsets_eb_v_v, PyArrayObject *__pyx_v_csrColumnOffsets_eb_v_w, PyArrayObject *__pyx_v_csrColumnOffsets_eb_w_p, PyArrayObject *__pyx_v_csrColumnOffsets_eb_w_u, PyArrayObject *__pyx_v_csrColumnOffsets_eb_w_v, PyArrayObject *__pyx_v_csrColumnOffsets_eb_w_w, PyArrayObject *__pyx_v_elementFlags, int __pyx_v_nParticles, double __pyx_v_particle_epsFact, double __pyx_v_particle_alpha, double __pyx_v_particle_beta, double __pyx_v_particle_penalty_constant, PyArrayObject *__pyx_v_particle_signed_distances, PyArrayObject *__pyx_v_particle_signed_distance_normals, PyArrayObject *__pyx_v_particle_velocities, PyArrayObject *__pyx_v_particle_centroids, double __pyx_v_particle_nitsche, int __pyx_v_KILL_PRESSURE_TERM, int __pyx_v_MATERIAL_PARAMETERS_AS_FUNCTION, PyArrayObject *__pyx_v_density_as_function, PyArrayObject *__pyx_v_dynamic_viscosity_as_function, PyArrayObject *__pyx_v_ebqe_density_as_function, PyArrayObject *__pyx_v_ebqe_dynamic_viscosity_as_function); /* proto */
static PyObject *__pyx_pf_6mprans_8cRANS3PF_9RANS3PF2D_12calculateVelocityAverage(struct __pyx_obj_6mprans_8cRANS3PF_RANS3PF2D *__pyx_v_self, int __pyx_v_nExteriorElementBoundaries_global, PyArrayObject *__pyx_v_exteriorElementBoundariesArray, int __pyx_v_nInteriorElementBoundaries_global, PyArrayObject *__pyx_v_interiorElementBoundariesArray, PyArrayObject *__pyx_v_elementBoundaryElementsArray, PyArrayObject *__pyx_v_elementBoundaryLocalElementBoundariesArray, PyArrayObject *__pyx_v_mesh_dof, PyArrayObject *__pyx_v_mesh_velocity_dof, double __pyx_v_MOVING_DOMAIN, PyArrayObject *__pyx_v_mesh_l2g, PyArrayObject *__pyx_v_mesh_trial_trace_ref, PyArrayObject *__pyx_v_mesh_grad_trial_trace_ref, PyArrayObject *__pyx_v_normal_ref, PyArrayObject *__pyx_v_boundaryJac_ref, PyArrayObject *__pyx_v_vel_l2g, PyArrayObject *__pyx_v_u_dof, PyArrayObject *__pyx_v_v_dof, PyArrayObject *__pyx_v_w_dof, PyArrayObject *__pyx_v_vos_dof, PyArrayObject *__pyx_v_vel_trial_trace_ref, PyArrayObject *__pyx_v_ebqe_velocity, PyArrayObject *__pyx_v_velocityAverage); /* proto */
static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info); /* proto */
static PyObject *__pyx_tp_new_6mprans_8cRANS3PF_RANS3PF(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6mprans_8cRANS3PF_RANS3PF2D(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;

/* "mprans/cRANS3PF.pyx":896
 *     cdef cppRANS3PF_base * thisptr
 * 
 *     def __cinit__(self,             # <<<<<<<<<<<<<<
 *                   int nSpaceIn,
 *                   int nQuadraturePoints_elementIn,
 */

/* Python wrapper */
static int __pyx_pw_6mprans_8cRANS3PF_7RANS3PF_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6mprans_8cRANS3PF_7RANS3PF_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_nSpaceIn;
  int __pyx_v_nQuadraturePoints_elementIn;
  int __pyx_v_nDOF_mesh_trial_elementIn;
  int __pyx_v_nDOF_trial_elementIn;
  int __pyx_v_nDOF_test_elementIn;
  int __pyx_v_nQuadraturePoints_elementBoundaryIn;
  int __pyx_v_CompKernelFlag;
  double __pyx_v_aDarcy;
  double __pyx_v_betaForch;
  double __pyx_v_grain;
  double __pyx_v_packFraction;
  double __pyx_v_packMargin;
  double __pyx_v_maxFraction;
  double __pyx_v_frFraction;
  double __pyx_v_sigmaC;
  double __pyx_v_C3e;
  double __pyx_v_C4e;
  double __pyx_v_eR;
  double __pyx_v_fContact;
  double __pyx_v_mContact;
  double __pyx_v_nContact;
  double __pyx_v_angFriction;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_nSpaceIn,&__pyx_n_s_nQuadraturePoints_elementIn,&__pyx_n_s_nDOF_mesh_trial_elementIn,&__pyx_n_s_nDOF_trial_elementIn,&__pyx_n_s_nDOF_test_elementIn,&__pyx_n_s_nQuadraturePoints_elementBoundar,&__pyx_n_s_CompKernelFlag,&__pyx_n_s_aDarcy,&__pyx_n_s_betaForch,&__pyx_n_s_grain,&__pyx_n_s_packFraction,&__pyx_n_s_packMargin,&__pyx_n_s_maxFraction,&__pyx_n_s_frFraction,&__pyx_n_s_sigmaC,&__pyx_n_s_C3e,&__pyx_n_s_C4e,&__pyx_n_s_eR,&__pyx_n_s_fContact,&__pyx_n_s_mContact,&__pyx_n_s_nContact,&__pyx_n_s_angFriction,0};
    PyObject* values[22] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 22: values[21] = PyTuple_GET_ITEM(__pyx_args, 21);
        case 21: values[20] = PyTuple_GET_ITEM(__pyx_args, 20);
        case 20: values[19] = PyTuple_GET_ITEM(__pyx_args, 19);
        case 19: values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
        case 18: values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
        case 17: values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nSpaceIn)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nQuadraturePoints_elementIn)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 22, 22, 1); __PYX_ERR(0, 896, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nDOF_mesh_trial_elementIn)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 22, 22, 2); __PYX_ERR(0, 896, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nDOF_trial_elementIn)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 22, 22, 3); __PYX_ERR(0, 896, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nDOF_test_elementIn)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 22, 22, 4); __PYX_ERR(0, 896, __pyx_L3_error)
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nQuadraturePoints_elementBoundar)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 22, 22, 5); __PYX_ERR(0, 896, __pyx_L3_error)
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_CompKernelFlag)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 22, 22, 6); __PYX_ERR(0, 896, __pyx_L3_error)
        }
        case  7:
        if (likely((values[7] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_aDarcy)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 22, 22, 7); __PYX_ERR(0, 896, __pyx_L3_error)
        }
        case  8:
        if (likely((values[8] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_betaForch)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 22, 22, 8); __PYX_ERR(0, 896, __pyx_L3_error)
        }
        case  9:
        if (likely((values[9] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_grain)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 22, 22, 9); __PYX_ERR(0, 896, __pyx_L3_error)
        }
        case 10:
        if (likely((values[10] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_packFraction)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 22, 22, 10); __PYX_ERR(0, 896, __pyx_L3_error)
        }
        case 11:
        if (likely((values[11] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_packMargin)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 22, 22, 11); __PYX_ERR(0, 896, __pyx_L3_error)
        }
        case 12:
        if (likely((values[12] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_maxFraction)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 22, 22, 12); __PYX_ERR(0, 896, __pyx_L3_error)
        }
        case 13:
        if (likely((values[13] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_frFraction)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 22, 22, 13); __PYX_ERR(0, 896, __pyx_L3_error)
        }
        case 14:
        if (likely((values[14] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sigmaC)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 22, 22, 14); __PYX_ERR(0, 896, __pyx_L3_error)
        }
        case 15:
        if (likely((values[15] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_C3e)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 22, 22, 15); __PYX_ERR(0, 896, __pyx_L3_error)
        }
        case 16:
        if (likely((values[16] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_C4e)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 22, 22, 16); __PYX_ERR(0, 896, __pyx_L3_error)
        }
        case 17:
        if (likely((values[17] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_eR)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 22, 22, 17); __PYX_ERR(0, 896, __pyx_L3_error)
        }
        case 18:
        if (likely((values[18] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fContact)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 22, 22, 18); __PYX_ERR(0, 896, __pyx_L3_error)
        }
        case 19:
        if (likely((values[19] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mContact)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 22, 22, 19); __PYX_ERR(0, 896, __pyx_L3_error)
        }
        case 20:
        if (likely((values[20] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nContact)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 22, 22, 20); __PYX_ERR(0, 896, __pyx_L3_error)
        }
        case 21:
        if (likely((values[21] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_angFriction)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 22, 22, 21); __PYX_ERR(0, 896, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 896, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 22) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
      values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
      values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
      values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
      values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
      values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
      values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
      values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
      values[19] = PyTuple_GET_ITEM(__pyx_args, 19);
      values[20] = PyTuple_GET_ITEM(__pyx_args, 20);
      values[21] = PyTuple_GET_ITEM(__pyx_args, 21);
    }
    __pyx_v_nSpaceIn = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_nSpaceIn == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 897, __pyx_L3_error)
    __pyx_v_nQuadraturePoints_elementIn = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_nQuadraturePoints_elementIn == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 898, __pyx_L3_error)
    __pyx_v_nDOF_mesh_trial_elementIn = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_nDOF_mesh_trial_elementIn == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 899, __pyx_L3_error)
    __pyx_v_nDOF_trial_elementIn = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_nDOF_trial_elementIn == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 900, __pyx_L3_error)
    __pyx_v_nDOF_test_elementIn = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_nDOF_test_elementIn == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 901, __pyx_L3_error)
    __pyx_v_nQuadraturePoints_elementBoundaryIn = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_nQuadraturePoints_elementBoundaryIn == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 902, __pyx_L3_error)
    __pyx_v_CompKernelFlag = __Pyx_PyInt_As_int(values[6]); if (unlikely((__pyx_v_CompKernelFlag == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 903, __pyx_L3_error)
    __pyx_v_aDarcy = __pyx_PyFloat_AsDouble(values[7]); if (unlikely((__pyx_v_aDarcy == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 904, __pyx_L3_error)
    __pyx_v_betaForch = __pyx_PyFloat_AsDouble(values[8]); if (unlikely((__pyx_v_betaForch == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 905, __pyx_L3_error)
    __pyx_v_grain = __pyx_PyFloat_AsDouble(values[9]); if (unlikely((__pyx_v_grain == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 906, __pyx_L3_error)
    __pyx_v_packFraction = __pyx_PyFloat_AsDouble(values[10]); if (unlikely((__pyx_v_packFraction == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 907, __pyx_L3_error)
    __pyx_v_packMargin = __pyx_PyFloat_AsDouble(values[11]); if (unlikely((__pyx_v_packMargin == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 908, __pyx_L3_error)
    __pyx_v_maxFraction = __pyx_PyFloat_AsDouble(values[12]); if (unlikely((__pyx_v_maxFraction == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 909, __pyx_L3_error)
    __pyx_v_frFraction = __pyx_PyFloat_AsDouble(values[13]); if (unlikely((__pyx_v_frFraction == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 910, __pyx_L3_error)
    __pyx_v_sigmaC = __pyx_PyFloat_AsDouble(values[14]); if (unlikely((__pyx_v_sigmaC == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 911, __pyx_L3_error)
    __pyx_v_C3e = __pyx_PyFloat_AsDouble(values[15]); if (unlikely((__pyx_v_C3e == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 912, __pyx_L3_error)
    __pyx_v_C4e = __pyx_PyFloat_AsDouble(values[16]); if (unlikely((__pyx_v_C4e == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 913, __pyx_L3_error)
    __pyx_v_eR = __pyx_PyFloat_AsDouble(values[17]); if (unlikely((__pyx_v_eR == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 914, __pyx_L3_error)
    __pyx_v_fContact = __pyx_PyFloat_AsDouble(values[18]); if (unlikely((__pyx_v_fContact == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 915, __pyx_L3_error)
    __pyx_v_mContact = __pyx_PyFloat_AsDouble(values[19]); if (unlikely((__pyx_v_mContact == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 916, __pyx_L3_error)
    __pyx_v_nContact = __pyx_PyFloat_AsDouble(values[20]); if (unlikely((__pyx_v_nContact == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 917, __pyx_L3_error)
    __pyx_v_angFriction = __pyx_PyFloat_AsDouble(values[21]); if (unlikely((__pyx_v_angFriction == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 918, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 22, 22, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 896, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mprans.cRANS3PF.RANS3PF.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6mprans_8cRANS3PF_7RANS3PF___cinit__(((struct __pyx_obj_6mprans_8cRANS3PF_RANS3PF *)__pyx_v_self), __pyx_v_nSpaceIn, __pyx_v_nQuadraturePoints_elementIn, __pyx_v_nDOF_mesh_trial_elementIn, __pyx_v_nDOF_trial_elementIn, __pyx_v_nDOF_test_elementIn, __pyx_v_nQuadraturePoints_elementBoundaryIn, __pyx_v_CompKernelFlag, __pyx_v_aDarcy, __pyx_v_betaForch, __pyx_v_grain, __pyx_v_packFraction, __pyx_v_packMargin, __pyx_v_maxFraction, __pyx_v_frFraction, __pyx_v_sigmaC, __pyx_v_C3e, __pyx_v_C4e, __pyx_v_eR, __pyx_v_fContact, __pyx_v_mContact, __pyx_v_nContact, __pyx_v_angFriction);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6mprans_8cRANS3PF_7RANS3PF___cinit__(struct __pyx_obj_6mprans_8cRANS3PF_RANS3PF *__pyx_v_self, int __pyx_v_nSpaceIn, int __pyx_v_nQuadraturePoints_elementIn, int __pyx_v_nDOF_mesh_trial_elementIn, int __pyx_v_nDOF_trial_elementIn, int __pyx_v_nDOF_test_elementIn, int __pyx_v_nQuadraturePoints_elementBoundaryIn, int __pyx_v_CompKernelFlag, double __pyx_v_aDarcy, double __pyx_v_betaForch, double __pyx_v_grain, double __pyx_v_packFraction, double __pyx_v_packMargin, double __pyx_v_maxFraction, double __pyx_v_frFraction, double __pyx_v_sigmaC, double __pyx_v_C3e, double __pyx_v_C4e, double __pyx_v_eR, double __pyx_v_fContact, double __pyx_v_mContact, double __pyx_v_nContact, double __pyx_v_angFriction) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "mprans/cRANS3PF.pyx":920
 *                   double angFriction):
 * 
 *         self.thisptr = newRANS3PF(nSpaceIn,             # <<<<<<<<<<<<<<
 *                                   nQuadraturePoints_elementIn,
 *                                   nDOF_mesh_trial_elementIn,
 */
  __pyx_v_self->thisptr = proteus::newRANS3PF(__pyx_v_nSpaceIn, __pyx_v_nQuadraturePoints_elementIn, __pyx_v_nDOF_mesh_trial_elementIn, __pyx_v_nDOF_trial_elementIn, __pyx_v_nDOF_test_elementIn, __pyx_v_nQuadraturePoints_elementBoundaryIn, __pyx_v_CompKernelFlag, __pyx_v_aDarcy, __pyx_v_betaForch, __pyx_v_grain, __pyx_v_packFraction, __pyx_v_packMargin, __pyx_v_maxFraction, __pyx_v_frFraction, __pyx_v_sigmaC, __pyx_v_C3e, __pyx_v_C4e, __pyx_v_eR, __pyx_v_fContact, __pyx_v_mContact, __pyx_v_nContact, __pyx_v_angFriction);

  /* "mprans/cRANS3PF.pyx":896
 *     cdef cppRANS3PF_base * thisptr
 * 
 *     def __cinit__(self,             # <<<<<<<<<<<<<<
 *                   int nSpaceIn,
 *                   int nQuadraturePoints_elementIn,
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mprans/cRANS3PF.pyx":943
 *                                   angFriction)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_6mprans_8cRANS3PF_7RANS3PF_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6mprans_8cRANS3PF_7RANS3PF_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6mprans_8cRANS3PF_7RANS3PF_2__dealloc__(((struct __pyx_obj_6mprans_8cRANS3PF_RANS3PF *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6mprans_8cRANS3PF_7RANS3PF_2__dealloc__(struct __pyx_obj_6mprans_8cRANS3PF_RANS3PF *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "mprans/cRANS3PF.pyx":944
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def calculateResidual(self,
 */
  delete __pyx_v_self->thisptr;

  /* "mprans/cRANS3PF.pyx":943
 *                                   angFriction)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "mprans/cRANS3PF.pyx":946
 *         del self.thisptr
 * 
 *     def calculateResidual(self,             # <<<<<<<<<<<<<<
 *                           numpy.ndarray mesh_trial_ref,
 *                           numpy.ndarray mesh_grad_trial_ref,
 */

/* Python wrapper */
static PyObject *__pyx_pw_6mprans_8cRANS3PF_7RANS3PF_5calculateResidual(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6mprans_8cRANS3PF_7RANS3PF_5calculateResidual(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_mesh_trial_ref = 0;
  PyArrayObject *__pyx_v_mesh_grad_trial_ref = 0;
  PyArrayObject *__pyx_v_mesh_dof = 0;
  PyArrayObject *__pyx_v_mesh_velocity_dof = 0;
  double __pyx_v_MOVING_DOMAIN;
  double __pyx_v_PSTAB;
  PyArrayObject *__pyx_v_mesh_l2g = 0;
  PyArrayObject *__pyx_v_dV_ref = 0;
  PyArrayObject *__pyx_v_p_trial_ref = 0;
  PyArrayObject *__pyx_v_p_grad_trial_ref = 0;
  PyArrayObject *__pyx_v_p_test_ref = 0;
  PyArrayObject *__pyx_v_p_grad_test_ref = 0;
  PyArrayObject *__pyx_v_q_p = 0;
  PyArrayObject *__pyx_v_q_grad_p = 0;
  PyArrayObject *__pyx_v_ebqe_p = 0;
  PyArrayObject *__pyx_v_ebqe_grad_p = 0;
  PyArrayObject *__pyx_v_vel_trial_ref = 0;
  PyArrayObject *__pyx_v_vel_grad_trial_ref = 0;
  PyArrayObject *__pyx_v_vel_hess_trial_ref = 0;
  PyArrayObject *__pyx_v_vel_test_ref = 0;
  PyArrayObject *__pyx_v_vel_grad_test_ref = 0;
  PyArrayObject *__pyx_v_mesh_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_mesh_grad_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_dS_ref = 0;
  PyArrayObject *__pyx_v_p_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_p_grad_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_p_test_trace_ref = 0;
  PyArrayObject *__pyx_v_p_grad_test_trace_ref = 0;
  PyArrayObject *__pyx_v_vel_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_vel_grad_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_vel_test_trace_ref = 0;
  PyArrayObject *__pyx_v_vel_grad_test_trace_ref = 0;
  PyArrayObject *__pyx_v_normal_ref = 0;
  PyArrayObject *__pyx_v_boundaryJac_ref = 0;
  double __pyx_v_eb_adjoint_sigma;
  PyArrayObject *__pyx_v_elementDiameter = 0;
  PyArrayObject *__pyx_v_nodeDiametersArray = 0;
  double __pyx_v_hFactor;
  int __pyx_v_nElements_global;
  int __pyx_v_nElements_owned;
  int __pyx_v_nElementBoundaries_owned;
  double __pyx_v_useRBLES;
  double __pyx_v_useMetrics;
  double __pyx_v_alphaBDF;
  double __pyx_v_epsFact_rho;
  double __pyx_v_epsFact_mu;
  double __pyx_v_sigma;
  double __pyx_v_rho_0;
  double __pyx_v_nu_0;
  double __pyx_v_rho_1;
  double __pyx_v_nu_1;
  double __pyx_v_smagorinskyConstant;
  int __pyx_v_turbulenceClosureModel;
  double __pyx_v_Ct_sge;
  double __pyx_v_Cd_sge;
  double __pyx_v_C_dc;
  double __pyx_v_C_b;
  PyArrayObject *__pyx_v_eps_solid = 0;
  PyArrayObject *__pyx_v_phi_solid = 0;
  PyArrayObject *__pyx_v_q_velocity_solid = 0;
  PyArrayObject *__pyx_v_q_vos = 0;
  PyArrayObject *__pyx_v_q_dvos_dt = 0;
  PyArrayObject *__pyx_v_q_dragAlpha = 0;
  PyArrayObject *__pyx_v_q_dragBeta = 0;
  PyArrayObject *__pyx_v_q_mass_source = 0;
  PyArrayObject *__pyx_v_q_turb_var_0 = 0;
  PyArrayObject *__pyx_v_q_turb_var_1 = 0;
  PyArrayObject *__pyx_v_q_turb_var_grad_0 = 0;
  PyArrayObject *__pyx_v_q_eddy_viscosity = 0;
  PyArrayObject *__pyx_v_p_l2g = 0;
  PyArrayObject *__pyx_v_vel_l2g = 0;
  PyArrayObject *__pyx_v_p_dof = 0;
  PyArrayObject *__pyx_v_u_dof = 0;
  PyArrayObject *__pyx_v_v_dof = 0;
  PyArrayObject *__pyx_v_w_dof = 0;
  PyArrayObject *__pyx_v_u_dof_old = 0;
  PyArrayObject *__pyx_v_v_dof_old = 0;
  PyArrayObject *__pyx_v_w_dof_old = 0;
  PyArrayObject *__pyx_v_u_dof_old_old = 0;
  PyArrayObject *__pyx_v_v_dof_old_old = 0;
  PyArrayObject *__pyx_v_w_dof_old_old = 0;
  PyArrayObject *__pyx_v_g = 0;
  double __pyx_v_useVF;
  PyArrayObject *__pyx_v_vf = 0;
  PyArrayObject *__pyx_v_phi = 0;
  PyArrayObject *__pyx_v_normal_phi = 0;
  PyArrayObject *__pyx_v_kappa_phi = 0;
  PyArrayObject *__pyx_v_q_mom_u_acc = 0;
  PyArrayObject *__pyx_v_q_mom_v_acc = 0;
  PyArrayObject *__pyx_v_q_mom_w_acc = 0;
  PyArrayObject *__pyx_v_q_mass_adv = 0;
  PyArrayObject *__pyx_v_q_mom_u_acc_beta_bdf = 0;
  PyArrayObject *__pyx_v_q_mom_v_acc_beta_bdf = 0;
  PyArrayObject *__pyx_v_q_mom_w_acc_beta_bdf = 0;
  PyArrayObject *__pyx_v_q_dV = 0;
  PyArrayObject *__pyx_v_q_dV_last = 0;
  PyArrayObject *__pyx_v_q_velocity_sge = 0;
  PyArrayObject *__pyx_v_ebqe_velocity_star = 0;
  PyArrayObject *__pyx_v_q_cfl = 0;
  PyArrayObject *__pyx_v_q_numDiff_u = 0;
  PyArrayObject *__pyx_v_q_numDiff_v = 0;
  PyArrayObject *__pyx_v_q_numDiff_w = 0;
  PyArrayObject *__pyx_v_q_numDiff_u_last = 0;
  PyArrayObject *__pyx_v_q_numDiff_v_last = 0;
  PyArrayObject *__pyx_v_q_numDiff_w_last = 0;
  PyArrayObject *__pyx_v_sdInfo_u_u_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_u_u_colind = 0;
  PyArrayObject *__pyx_v_sdInfo_u_v_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_u_v_colind = 0;
  PyArrayObject *__pyx_v_sdInfo_u_w_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_u_w_colind = 0;
  PyArrayObject *__pyx_v_sdInfo_v_v_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_v_v_colind = 0;
  PyArrayObject *__pyx_v_sdInfo_v_u_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_v_u_colind = 0;
  PyArrayObject *__pyx_v_sdInfo_v_w_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_v_w_colind = 0;
  PyArrayObject *__pyx_v_sdInfo_w_w_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_w_w_colind = 0;
  PyArrayObject *__pyx_v_sdInfo_w_u_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_w_u_colind = 0;
  PyArrayObject *__pyx_v_sdInfo_w_v_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_w_v_colind = 0;
  int __pyx_v_offset_p;
  int __pyx_v_offset_u;
  int __pyx_v_offset_v;
  int __pyx_v_offset_w;
  int __pyx_v_stride_p;
  int __pyx_v_stride_u;
  int __pyx_v_stride_v;
  int __pyx_v_stride_w;
  PyArrayObject *__pyx_v_globalResidual = 0;
  int __pyx_v_nExteriorElementBoundaries_global;
  PyArrayObject *__pyx_v_exteriorElementBoundariesArray = 0;
  PyArrayObject *__pyx_v_elementBoundaryElementsArray = 0;
  PyArrayObject *__pyx_v_elementBoundaryLocalElementBoundariesArray = 0;
  PyArrayObject *__pyx_v_ebqe_vf_ext = 0;
  PyArrayObject *__pyx_v_bc_ebqe_vf_ext = 0;
  PyArrayObject *__pyx_v_ebqe_phi_ext = 0;
  PyArrayObject *__pyx_v_bc_ebqe_phi_ext = 0;
  PyArrayObject *__pyx_v_ebqe_normal_phi_ext = 0;
  PyArrayObject *__pyx_v_ebqe_kappa_phi_ext = 0;
  PyArrayObject *__pyx_v_ebqe_vos_ext = 0;
  PyArrayObject *__pyx_v_ebqe_turb_var_0 = 0;
  PyArrayObject *__pyx_v_ebqe_turb_var_1 = 0;
  PyArrayObject *__pyx_v_isDOFBoundary_p = 0;
  PyArrayObject *__pyx_v_isDOFBoundary_u = 0;
  PyArrayObject *__pyx_v_isDOFBoundary_v = 0;
  PyArrayObject *__pyx_v_isDOFBoundary_w = 0;
  PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_p = 0;
  PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_u = 0;
  PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_v = 0;
  PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_w = 0;
  PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_u = 0;
  PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_v = 0;
  PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_w = 0;
  PyArrayObject *__pyx_v_ebqe_bc_p_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_flux_mass_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_flux_mom_u_adv_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_flux_mom_v_adv_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_flux_mom_w_adv_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_u_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_flux_u_diff_ext = 0;
  PyArrayObject *__pyx_v_ebqe_penalty_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_v_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_flux_v_diff_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_w_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_flux_w_diff_ext = 0;
  PyArrayObject *__pyx_v_q_x = 0;
  PyArrayObject *__pyx_v_q_velocity = 0;
  PyArrayObject *__pyx_v_ebqe_velocity = 0;
  PyArrayObject *__pyx_v_q_grad_u = 0;
  PyArrayObject *__pyx_v_q_grad_v = 0;
  PyArrayObject *__pyx_v_q_grad_w = 0;
  PyArrayObject *__pyx_v_q_divU = 0;
  PyArrayObject *__pyx_v_ebqe_grad_u = 0;
  PyArrayObject *__pyx_v_ebqe_grad_v = 0;
  PyArrayObject *__pyx_v_ebqe_grad_w = 0;
  PyArrayObject *__pyx_v_flux = 0;
  PyArrayObject *__pyx_v_elementResidual_p = 0;
  PyArrayObject *__pyx_v_elementFlags = 0;
  PyArrayObject *__pyx_v_boundaryFlags = 0;
  PyArrayObject *__pyx_v_barycenters = 0;
  PyArrayObject *__pyx_v_wettedAreas = 0;
  PyArrayObject *__pyx_v_netForces_p = 0;
  PyArrayObject *__pyx_v_netForces_v = 0;
  PyArrayObject *__pyx_v_netMoments = 0;
  PyArrayObject *__pyx_v_q_rho = 0;
  PyArrayObject *__pyx_v_ebqe_rho = 0;
  PyArrayObject *__pyx_v_q_nu = 0;
  PyArrayObject *__pyx_v_ebqe_nu = 0;
  int __pyx_v_nParticles;
  double __pyx_v_particle_epsFact;
  double __pyx_v_particle_alpha;
  double __pyx_v_particle_beta;
  double __pyx_v_particle_penalty_constant;
  PyArrayObject *__pyx_v_particle_signed_distances = 0;
  PyArrayObject *__pyx_v_particle_signed_distance_normals = 0;
  PyArrayObject *__pyx_v_particle_velocities = 0;
  PyArrayObject *__pyx_v_particle_centroids = 0;
  PyArrayObject *__pyx_v_particle_netForces = 0;
  PyArrayObject *__pyx_v_particle_netMoments = 0;
  PyArrayObject *__pyx_v_particle_surfaceArea = 0;
  double __pyx_v_particle_nitsche;
  int __pyx_v_STABILIZATION_TYPE;
  double __pyx_v_areaRefElement;
  double __pyx_v_cMax;
  double __pyx_v_cE;
  PyArrayObject *__pyx_v_forcex = 0;
  PyArrayObject *__pyx_v_forcey = 0;
  PyArrayObject *__pyx_v_forcez = 0;
  int __pyx_v_KILL_PRESSURE_TERM;
  double __pyx_v_dt;
  PyArrayObject *__pyx_v_entropyResidualAtCell = 0;
  PyArrayObject *__pyx_v_maxSpeed2AtCell = 0;
  double __pyx_v_maxSpeed2AtOmega;
  PyArrayObject *__pyx_v_rhoAtCell = 0;
  PyArrayObject *__pyx_v_muAtCell = 0;
  PyArrayObject *__pyx_v_quantDOFs = 0;
  int __pyx_v_numDOFsPerEqn;
  PyArrayObject *__pyx_v_csrRowIndeces_DofLoops = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_DofLoops = 0;
  PyArrayObject *__pyx_v_ML = 0;
  PyArrayObject *__pyx_v_Cx = 0;
  PyArrayObject *__pyx_v_Cy = 0;
  PyArrayObject *__pyx_v_Cz = 0;
  int __pyx_v_MATERIAL_PARAMETERS_AS_FUNCTION;
  PyArrayObject *__pyx_v_density_as_function = 0;
  PyArrayObject *__pyx_v_dynamic_viscosity_as_function = 0;
  PyArrayObject *__pyx_v_ebqe_density_as_function = 0;
  PyArrayObject *__pyx_v_ebqe_dynamic_viscosity_as_function = 0;
  double __pyx_v_order_polynomial;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calculateResidual (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_mesh_trial_ref,&__pyx_n_s_mesh_grad_trial_ref,&__pyx_n_s_mesh_dof,&__pyx_n_s_mesh_velocity_dof,&__pyx_n_s_MOVING_DOMAIN,&__pyx_n_s_PSTAB,&__pyx_n_s_mesh_l2g,&__pyx_n_s_dV_ref,&__pyx_n_s_p_trial_ref,&__pyx_n_s_p_grad_trial_ref,&__pyx_n_s_p_test_ref,&__pyx_n_s_p_grad_test_ref,&__pyx_n_s_q_p,&__pyx_n_s_q_grad_p,&__pyx_n_s_ebqe_p,&__pyx_n_s_ebqe_grad_p,&__pyx_n_s_vel_trial_ref,&__pyx_n_s_vel_grad_trial_ref,&__pyx_n_s_vel_hess_trial_ref,&__pyx_n_s_vel_test_ref,&__pyx_n_s_vel_grad_test_ref,&__pyx_n_s_mesh_trial_trace_ref,&__pyx_n_s_mesh_grad_trial_trace_ref,&__pyx_n_s_dS_ref,&__pyx_n_s_p_trial_trace_ref,&__pyx_n_s_p_grad_trial_trace_ref,&__pyx_n_s_p_test_trace_ref,&__pyx_n_s_p_grad_test_trace_ref,&__pyx_n_s_vel_trial_trace_ref,&__pyx_n_s_vel_grad_trial_trace_ref,&__pyx_n_s_vel_test_trace_ref,&__pyx_n_s_vel_grad_test_trace_ref,&__pyx_n_s_normal_ref,&__pyx_n_s_boundaryJac_ref,&__pyx_n_s_eb_adjoint_sigma,&__pyx_n_s_elementDiameter,&__pyx_n_s_nodeDiametersArray,&__pyx_n_s_hFactor,&__pyx_n_s_nElements_global,&__pyx_n_s_nElements_owned,&__pyx_n_s_nElementBoundaries_owned,&__pyx_n_s_useRBLES,&__pyx_n_s_useMetrics,&__pyx_n_s_alphaBDF,&__pyx_n_s_epsFact_rho,&__pyx_n_s_epsFact_mu,&__pyx_n_s_sigma,&__pyx_n_s_rho_0,&__pyx_n_s_nu_0,&__pyx_n_s_rho_1,&__pyx_n_s_nu_1,&__pyx_n_s_smagorinskyConstant,&__pyx_n_s_turbulenceClosureModel,&__pyx_n_s_Ct_sge,&__pyx_n_s_Cd_sge,&__pyx_n_s_C_dc,&__pyx_n_s_C_b,&__pyx_n_s_eps_solid,&__pyx_n_s_phi_solid,&__pyx_n_s_q_velocity_solid,&__pyx_n_s_q_vos,&__pyx_n_s_q_dvos_dt,&__pyx_n_s_q_dragAlpha,&__pyx_n_s_q_dragBeta,&__pyx_n_s_q_mass_source,&__pyx_n_s_q_turb_var_0,&__pyx_n_s_q_turb_var_1,&__pyx_n_s_q_turb_var_grad_0,&__pyx_n_s_q_eddy_viscosity,&__pyx_n_s_p_l2g,&__pyx_n_s_vel_l2g,&__pyx_n_s_p_dof,&__pyx_n_s_u_dof,&__pyx_n_s_v_dof,&__pyx_n_s_w_dof,&__pyx_n_s_u_dof_old,&__pyx_n_s_v_dof_old,&__pyx_n_s_w_dof_old,&__pyx_n_s_u_dof_old_old,&__pyx_n_s_v_dof_old_old,&__pyx_n_s_w_dof_old_old,&__pyx_n_s_g,&__pyx_n_s_useVF,&__pyx_n_s_vf,&__pyx_n_s_phi,&__pyx_n_s_normal_phi,&__pyx_n_s_kappa_phi,&__pyx_n_s_q_mom_u_acc,&__pyx_n_s_q_mom_v_acc,&__pyx_n_s_q_mom_w_acc,&__pyx_n_s_q_mass_adv,&__pyx_n_s_q_mom_u_acc_beta_bdf,&__pyx_n_s_q_mom_v_acc_beta_bdf,&__pyx_n_s_q_mom_w_acc_beta_bdf,&__pyx_n_s_q_dV,&__pyx_n_s_q_dV_last,&__pyx_n_s_q_velocity_sge,&__pyx_n_s_ebqe_velocity_star,&__pyx_n_s_q_cfl,&__pyx_n_s_q_numDiff_u,&__pyx_n_s_q_numDiff_v,&__pyx_n_s_q_numDiff_w,&__pyx_n_s_q_numDiff_u_last,&__pyx_n_s_q_numDiff_v_last,&__pyx_n_s_q_numDiff_w_last,&__pyx_n_s_sdInfo_u_u_rowptr,&__pyx_n_s_sdInfo_u_u_colind,&__pyx_n_s_sdInfo_u_v_rowptr,&__pyx_n_s_sdInfo_u_v_colind,&__pyx_n_s_sdInfo_u_w_rowptr,&__pyx_n_s_sdInfo_u_w_colind,&__pyx_n_s_sdInfo_v_v_rowptr,&__pyx_n_s_sdInfo_v_v_colind,&__pyx_n_s_sdInfo_v_u_rowptr,&__pyx_n_s_sdInfo_v_u_colind,&__pyx_n_s_sdInfo_v_w_rowptr,&__pyx_n_s_sdInfo_v_w_colind,&__pyx_n_s_sdInfo_w_w_rowptr,&__pyx_n_s_sdInfo_w_w_colind,&__pyx_n_s_sdInfo_w_u_rowptr,&__pyx_n_s_sdInfo_w_u_colind,&__pyx_n_s_sdInfo_w_v_rowptr,&__pyx_n_s_sdInfo_w_v_colind,&__pyx_n_s_offset_p,&__pyx_n_s_offset_u,&__pyx_n_s_offset_v,&__pyx_n_s_offset_w,&__pyx_n_s_stride_p,&__pyx_n_s_stride_u,&__pyx_n_s_stride_v,&__pyx_n_s_stride_w,&__pyx_n_s_globalResidual,&__pyx_n_s_nExteriorElementBoundaries_globa,&__pyx_n_s_exteriorElementBoundariesArray,&__pyx_n_s_elementBoundaryElementsArray,&__pyx_n_s_elementBoundaryLocalElementBound,&__pyx_n_s_ebqe_vf_ext,&__pyx_n_s_bc_ebqe_vf_ext,&__pyx_n_s_ebqe_phi_ext,&__pyx_n_s_bc_ebqe_phi_ext,&__pyx_n_s_ebqe_normal_phi_ext,&__pyx_n_s_ebqe_kappa_phi_ext,&__pyx_n_s_ebqe_vos_ext,&__pyx_n_s_ebqe_turb_var_0,&__pyx_n_s_ebqe_turb_var_1,&__pyx_n_s_isDOFBoundary_p,&__pyx_n_s_isDOFBoundary_u,&__pyx_n_s_isDOFBoundary_v,&__pyx_n_s_isDOFBoundary_w,&__pyx_n_s_isAdvectiveFluxBoundary_p,&__pyx_n_s_isAdvectiveFluxBoundary_u,&__pyx_n_s_isAdvectiveFluxBoundary_v,&__pyx_n_s_isAdvectiveFluxBoundary_w,&__pyx_n_s_isDiffusiveFluxBoundary_u,&__pyx_n_s_isDiffusiveFluxBoundary_v,&__pyx_n_s_isDiffusiveFluxBoundary_w,&__pyx_n_s_ebqe_bc_p_ext,&__pyx_n_s_ebqe_bc_flux_mass_ext,&__pyx_n_s_ebqe_bc_flux_mom_u_adv_ext,&__pyx_n_s_ebqe_bc_flux_mom_v_adv_ext,&__pyx_n_s_ebqe_bc_flux_mom_w_adv_ext,&__pyx_n_s_ebqe_bc_u_ext,&__pyx_n_s_ebqe_bc_flux_u_diff_ext,&__pyx_n_s_ebqe_penalty_ext,&__pyx_n_s_ebqe_bc_v_ext,&__pyx_n_s_ebqe_bc_flux_v_diff_ext,&__pyx_n_s_ebqe_bc_w_ext,&__pyx_n_s_ebqe_bc_flux_w_diff_ext,&__pyx_n_s_q_x,&__pyx_n_s_q_velocity,&__pyx_n_s_ebqe_velocity,&__pyx_n_s_q_grad_u,&__pyx_n_s_q_grad_v,&__pyx_n_s_q_grad_w,&__pyx_n_s_q_divU,&__pyx_n_s_ebqe_grad_u,&__pyx_n_s_ebqe_grad_v,&__pyx_n_s_ebqe_grad_w,&__pyx_n_s_flux,&__pyx_n_s_elementResidual_p,&__pyx_n_s_elementFlags,&__pyx_n_s_boundaryFlags,&__pyx_n_s_barycenters,&__pyx_n_s_wettedAreas,&__pyx_n_s_netForces_p,&__pyx_n_s_netForces_v,&__pyx_n_s_netMoments,&__pyx_n_s_q_rho,&__pyx_n_s_ebqe_rho,&__pyx_n_s_q_nu,&__pyx_n_s_ebqe_nu,&__pyx_n_s_nParticles,&__pyx_n_s_particle_epsFact,&__pyx_n_s_particle_alpha,&__pyx_n_s_particle_beta,&__pyx_n_s_particle_penalty_constant,&__pyx_n_s_particle_signed_distances,&__pyx_n_s_particle_signed_distance_normals,&__pyx_n_s_particle_velocities,&__pyx_n_s_particle_centroids,&__pyx_n_s_particle_netForces,&__pyx_n_s_particle_netMoments,&__pyx_n_s_particle_surfaceArea,&__pyx_n_s_particle_nitsche,&__pyx_n_s_STABILIZATION_TYPE,&__pyx_n_s_areaRefElement,&__pyx_n_s_cMax,&__pyx_n_s_cE,&__pyx_n_s_forcex,&__pyx_n_s_forcey,&__pyx_n_s_forcez,&__pyx_n_s_KILL_PRESSURE_TERM,&__pyx_n_s_dt,&__pyx_n_s_entropyResidualAtCell,&__pyx_n_s_maxSpeed2AtCell,&__pyx_n_s_maxSpeed2AtOmega,&__pyx_n_s_rhoAtCell,&__pyx_n_s_muAtCell,&__pyx_n_s_quantDOFs,&__pyx_n_s_numDOFsPerEqn,&__pyx_n_s_csrRowIndeces_DofLoops,&__pyx_n_s_csrColumnOffsets_DofLoops,&__pyx_n_s_ML,&__pyx_n_s_Cx,&__pyx_n_s_Cy,&__pyx_n_s_Cz,&__pyx_n_s_MATERIAL_PARAMETERS_AS_FUNCTION,&__pyx_n_s_density_as_function,&__pyx_n_s_dynamic_viscosity_as_function,&__pyx_n_s_ebqe_density_as_function,&__pyx_n_s_ebqe_dynamic_viscosity_as_functi,&__pyx_n_s_order_polynomial,0};
    PyObject* values[232] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 232: values[231] = PyTuple_GET_ITEM(__pyx_args, 231);
        case 231: values[230] = PyTuple_GET_ITEM(__pyx_args, 230);
        case 230: values[229] = PyTuple_GET_ITEM(__pyx_args, 229);
        case 229: values[228] = PyTuple_GET_ITEM(__pyx_args, 228);
        case 228: values[227] = PyTuple_GET_ITEM(__pyx_args, 227);
        case 227: values[226] = PyTuple_GET_ITEM(__pyx_args, 226);
        case 226: values[225] = PyTuple_GET_ITEM(__pyx_args, 225);
        case 225: values[224] = PyTuple_GET_ITEM(__pyx_args, 224);
        case 224: values[223] = PyTuple_GET_ITEM(__pyx_args, 223);
        case 223: values[222] = PyTuple_GET_ITEM(__pyx_args, 222);
        case 222: values[221] = PyTuple_GET_ITEM(__pyx_args, 221);
        case 221: values[220] = PyTuple_GET_ITEM(__pyx_args, 220);
        case 220: values[219] = PyTuple_GET_ITEM(__pyx_args, 219);
        case 219: values[218] = PyTuple_GET_ITEM(__pyx_args, 218);
        case 218: values[217] = PyTuple_GET_ITEM(__pyx_args, 217);
        case 217: values[216] = PyTuple_GET_ITEM(__pyx_args, 216);
        case 216: values[215] = PyTuple_GET_ITEM(__pyx_args, 215);
        case 215: values[214] = PyTuple_GET_ITEM(__pyx_args, 214);
        case 214: values[213] = PyTuple_GET_ITEM(__pyx_args, 213);
        case 213: values[212] = PyTuple_GET_ITEM(__pyx_args, 212);
        case 212: values[211] = PyTuple_GET_ITEM(__pyx_args, 211);
        case 211: values[210] = PyTuple_GET_ITEM(__pyx_args, 210);
        case 210: values[209] = PyTuple_GET_ITEM(__pyx_args, 209);
        case 209: values[208] = PyTuple_GET_ITEM(__pyx_args, 208);
        case 208: values[207] = PyTuple_GET_ITEM(__pyx_args, 207);
        case 207: values[206] = PyTuple_GET_ITEM(__pyx_args, 206);
        case 206: values[205] = PyTuple_GET_ITEM(__pyx_args, 205);
        case 205: values[204] = PyTuple_GET_ITEM(__pyx_args, 204);
        case 204: values[203] = PyTuple_GET_ITEM(__pyx_args, 203);
        case 203: values[202] = PyTuple_GET_ITEM(__pyx_args, 202);
        case 202: values[201] = PyTuple_GET_ITEM(__pyx_args, 201);
        case 201: values[200] = PyTuple_GET_ITEM(__pyx_args, 200);
        case 200: values[199] = PyTuple_GET_ITEM(__pyx_args, 199);
        case 199: values[198] = PyTuple_GET_ITEM(__pyx_args, 198);
        case 198: values[197] = PyTuple_GET_ITEM(__pyx_args, 197);
        case 197: values[196] = PyTuple_GET_ITEM(__pyx_args, 196);
        case 196: values[195] = PyTuple_GET_ITEM(__pyx_args, 195);
        case 195: values[194] = PyTuple_GET_ITEM(__pyx_args, 194);
        case 194: values[193] = PyTuple_GET_ITEM(__pyx_args, 193);
        case 193: values[192] = PyTuple_GET_ITEM(__pyx_args, 192);
        case 192: values[191] = PyTuple_GET_ITEM(__pyx_args, 191);
        case 191: values[190] = PyTuple_GET_ITEM(__pyx_args, 190);
        case 190: values[189] = PyTuple_GET_ITEM(__pyx_args, 189);
        case 189: values[188] = PyTuple_GET_ITEM(__pyx_args, 188);
        case 188: values[187] = PyTuple_GET_ITEM(__pyx_args, 187);
        case 187: values[186] = PyTuple_GET_ITEM(__pyx_args, 186);
        case 186: values[185] = PyTuple_GET_ITEM(__pyx_args, 185);
        case 185: values[184] = PyTuple_GET_ITEM(__pyx_args, 184);
        case 184: values[183] = PyTuple_GET_ITEM(__pyx_args, 183);
        case 183: values[182] = PyTuple_GET_ITEM(__pyx_args, 182);
        case 182: values[181] = PyTuple_GET_ITEM(__pyx_args, 181);
        case 181: values[180] = PyTuple_GET_ITEM(__pyx_args, 180);
        case 180: values[179] = PyTuple_GET_ITEM(__pyx_args, 179);
        case 179: values[178] = PyTuple_GET_ITEM(__pyx_args, 178);
        case 178: values[177] = PyTuple_GET_ITEM(__pyx_args, 177);
        case 177: values[176] = PyTuple_GET_ITEM(__pyx_args, 176);
        case 176: values[175] = PyTuple_GET_ITEM(__pyx_args, 175);
        case 175: values[174] = PyTuple_GET_ITEM(__pyx_args, 174);
        case 174: values[173] = PyTuple_GET_ITEM(__pyx_args, 173);
        case 173: values[172] = PyTuple_GET_ITEM(__pyx_args, 172);
        case 172: values[171] = PyTuple_GET_ITEM(__pyx_args, 171);
        case 171: values[170] = PyTuple_GET_ITEM(__pyx_args, 170);
        case 170: values[169] = PyTuple_GET_ITEM(__pyx_args, 169);
        case 169: values[168] = PyTuple_GET_ITEM(__pyx_args, 168);
        case 168: values[167] = PyTuple_GET_ITEM(__pyx_args, 167);
        case 167: values[166] = PyTuple_GET_ITEM(__pyx_args, 166);
        case 166: values[165] = PyTuple_GET_ITEM(__pyx_args, 165);
        case 165: values[164] = PyTuple_GET_ITEM(__pyx_args, 164);
        case 164: values[163] = PyTuple_GET_ITEM(__pyx_args, 163);
        case 163: values[162] = PyTuple_GET_ITEM(__pyx_args, 162);
        case 162: values[161] = PyTuple_GET_ITEM(__pyx_args, 161);
        case 161: values[160] = PyTuple_GET_ITEM(__pyx_args, 160);
        case 160: values[159] = PyTuple_GET_ITEM(__pyx_args, 159);
        case 159: values[158] = PyTuple_GET_ITEM(__pyx_args, 158);
        case 158: values[157] = PyTuple_GET_ITEM(__pyx_args, 157);
        case 157: values[156] = PyTuple_GET_ITEM(__pyx_args, 156);
        case 156: values[155] = PyTuple_GET_ITEM(__pyx_args, 155);
        case 155: values[154] = PyTuple_GET_ITEM(__pyx_args, 154);
        case 154: values[153] = PyTuple_GET_ITEM(__pyx_args, 153);
        case 153: values[152] = PyTuple_GET_ITEM(__pyx_args, 152);
        case 152: values[151] = PyTuple_GET_ITEM(__pyx_args, 151);
        case 151: values[150] = PyTuple_GET_ITEM(__pyx_args, 150);
        case 150: values[149] = PyTuple_GET_ITEM(__pyx_args, 149);
        case 149: values[148] = PyTuple_GET_ITEM(__pyx_args, 148);
        case 148: values[147] = PyTuple_GET_ITEM(__pyx_args, 147);
        case 147: values[146] = PyTuple_GET_ITEM(__pyx_args, 146);
        case 146: values[145] = PyTuple_GET_ITEM(__pyx_args, 145);
        case 145: values[144] = PyTuple_GET_ITEM(__pyx_args, 144);
        case 144: values[143] = PyTuple_GET_ITEM(__pyx_args, 143);
        case 143: values[142] = PyTuple_GET_ITEM(__pyx_args, 142);
        case 142: values[141] = PyTuple_GET_ITEM(__pyx_args, 141);
        case 141: values[140] = PyTuple_GET_ITEM(__pyx_args, 140);
        case 140: values[139] = PyTuple_GET_ITEM(__pyx_args, 139);
        case 139: values[138] = PyTuple_GET_ITEM(__pyx_args, 138);
        case 138: values[137] = PyTuple_GET_ITEM(__pyx_args, 137);
        case 137: values[136] = PyTuple_GET_ITEM(__pyx_args, 136);
        case 136: values[135] = PyTuple_GET_ITEM(__pyx_args, 135);
        case 135: values[134] = PyTuple_GET_ITEM(__pyx_args, 134);
        case 134: values[133] = PyTuple_GET_ITEM(__pyx_args, 133);
        case 133: values[132] = PyTuple_GET_ITEM(__pyx_args, 132);
        case 132: values[131] = PyTuple_GET_ITEM(__pyx_args, 131);
        case 131: values[130] = PyTuple_GET_ITEM(__pyx_args, 130);
        case 130: values[129] = PyTuple_GET_ITEM(__pyx_args, 129);
        case 129: values[128] = PyTuple_GET_ITEM(__pyx_args, 128);
        case 128: values[127] = PyTuple_GET_ITEM(__pyx_args, 127);
        case 127: values[126] = PyTuple_GET_ITEM(__pyx_args, 126);
        case 126: values[125] = PyTuple_GET_ITEM(__pyx_args, 125);
        case 125: values[124] = PyTuple_GET_ITEM(__pyx_args, 124);
        case 124: values[123] = PyTuple_GET_ITEM(__pyx_args, 123);
        case 123: values[122] = PyTuple_GET_ITEM(__pyx_args, 122);
        case 122: values[121] = PyTuple_GET_ITEM(__pyx_args, 121);
        case 121: values[120] = PyTuple_GET_ITEM(__pyx_args, 120);
        case 120: values[119] = PyTuple_GET_ITEM(__pyx_args, 119);
        case 119: values[118] = PyTuple_GET_ITEM(__pyx_args, 118);
        case 118: values[117] = PyTuple_GET_ITEM(__pyx_args, 117);
        case 117: values[116] = PyTuple_GET_ITEM(__pyx_args, 116);
        case 116: values[115] = PyTuple_GET_ITEM(__pyx_args, 115);
        case 115: values[114] = PyTuple_GET_ITEM(__pyx_args, 114);
        case 114: values[113] = PyTuple_GET_ITEM(__pyx_args, 113);
        case 113: values[112] = PyTuple_GET_ITEM(__pyx_args, 112);
        case 112: values[111] = PyTuple_GET_ITEM(__pyx_args, 111);
        case 111: values[110] = PyTuple_GET_ITEM(__pyx_args, 110);
        case 110: values[109] = PyTuple_GET_ITEM(__pyx_args, 109);
        case 109: values[108] = PyTuple_GET_ITEM(__pyx_args, 108);
        case 108: values[107] = PyTuple_GET_ITEM(__pyx_args, 107);
        case 107: values[106] = PyTuple_GET_ITEM(__pyx_args, 106);
        case 106: values[105] = PyTuple_GET_ITEM(__pyx_args, 105);
        case 105: values[104] = PyTuple_GET_ITEM(__pyx_args, 104);
        case 104: values[103] = PyTuple_GET_ITEM(__pyx_args, 103);
        case 103: values[102] = PyTuple_GET_ITEM(__pyx_args, 102);
        case 102: values[101] = PyTuple_GET_ITEM(__pyx_args, 101);
        case 101: values[100] = PyTuple_GET_ITEM(__pyx_args, 100);
        case 100: values[99] = PyTuple_GET_ITEM(__pyx_args, 99);
        case 99: values[98] = PyTuple_GET_ITEM(__pyx_args, 98);
        case 98: values[97] = PyTuple_GET_ITEM(__pyx_args, 97);
        case 97: values[96] = PyTuple_GET_ITEM(__pyx_args, 96);
        case 96: values[95] = PyTuple_GET_ITEM(__pyx_args, 95);
        case 95: values[94] = PyTuple_GET_ITEM(__pyx_args, 94);
        case 94: values[93] = PyTuple_GET_ITEM(__pyx_args, 93);
        case 93: values[92] = PyTuple_GET_ITEM(__pyx_args, 92);
        case 92: values[91] = PyTuple_GET_ITEM(__pyx_args, 91);
        case 91: values[90] = PyTuple_GET_ITEM(__pyx_args, 90);
        case 90: values[89] = PyTuple_GET_ITEM(__pyx_args, 89);
        case 89: values[88] = PyTuple_GET_ITEM(__pyx_args, 88);
        case 88: values[87] = PyTuple_GET_ITEM(__pyx_args, 87);
        case 87: values[86] = PyTuple_GET_ITEM(__pyx_args, 86);
        case 86: values[85] = PyTuple_GET_ITEM(__pyx_args, 85);
        case 85: values[84] = PyTuple_GET_ITEM(__pyx_args, 84);
        case 84: values[83] = PyTuple_GET_ITEM(__pyx_args, 83);
        case 83: values[82] = PyTuple_GET_ITEM(__pyx_args, 82);
        case 82: values[81] = PyTuple_GET_ITEM(__pyx_args, 81);
        case 81: values[80] = PyTuple_GET_ITEM(__pyx_args, 80);
        case 80: values[79] = PyTuple_GET_ITEM(__pyx_args, 79);
        case 79: values[78] = PyTuple_GET_ITEM(__pyx_args, 78);
        case 78: values[77] = PyTuple_GET_ITEM(__pyx_args, 77);
        case 77: values[76] = PyTuple_GET_ITEM(__pyx_args, 76);
        case 76: values[75] = PyTuple_GET_ITEM(__pyx_args, 75);
        case 75: values[74] = PyTuple_GET_ITEM(__pyx_args, 74);
        case 74: values[73] = PyTuple_GET_ITEM(__pyx_args, 73);
        case 73: values[72] = PyTuple_GET_ITEM(__pyx_args, 72);
        case 72: values[71] = PyTuple_GET_ITEM(__pyx_args, 71);
        case 71: values[70] = PyTuple_GET_ITEM(__pyx_args, 70);
        case 70: values[69] = PyTuple_GET_ITEM(__pyx_args, 69);
        case 69: values[68] = PyTuple_GET_ITEM(__pyx_args, 68);
        case 68: values[67] = PyTuple_GET_ITEM(__pyx_args, 67);
        case 67: values[66] = PyTuple_GET_ITEM(__pyx_args, 66);
        case 66: values[65] = PyTuple_GET_ITEM(__pyx_args, 65);
        case 65: values[64] = PyTuple_GET_ITEM(__pyx_args, 64);
        case 64: values[63] = PyTuple_GET_ITEM(__pyx_args, 63);
        case 63: values[62] = PyTuple_GET_ITEM(__pyx_args, 62);
        case 62: values[61] = PyTuple_GET_ITEM(__pyx_args, 61);
        case 61: values[60] = PyTuple_GET_ITEM(__pyx_args, 60);
        case 60: values[59] = PyTuple_GET_ITEM(__pyx_args, 59);
        case 59: values[58] = PyTuple_GET_ITEM(__pyx_args, 58);
        case 58: values[57] = PyTuple_GET_ITEM(__pyx_args, 57);
        case 57: values[56] = PyTuple_GET_ITEM(__pyx_args, 56);
        case 56: values[55] = PyTuple_GET_ITEM(__pyx_args, 55);
        case 55: values[54] = PyTuple_GET_ITEM(__pyx_args, 54);
        case 54: values[53] = PyTuple_GET_ITEM(__pyx_args, 53);
        case 53: values[52] = PyTuple_GET_ITEM(__pyx_args, 52);
        case 52: values[51] = PyTuple_GET_ITEM(__pyx_args, 51);
        case 51: values[50] = PyTuple_GET_ITEM(__pyx_args, 50);
        case 50: values[49] = PyTuple_GET_ITEM(__pyx_args, 49);
        case 49: values[48] = PyTuple_GET_ITEM(__pyx_args, 48);
        case 48: values[47] = PyTuple_GET_ITEM(__pyx_args, 47);
        case 47: values[46] = PyTuple_GET_ITEM(__pyx_args, 46);
        case 46: values[45] = PyTuple_GET_ITEM(__pyx_args, 45);
        case 45: values[44] = PyTuple_GET_ITEM(__pyx_args, 44);
        case 44: values[43] = PyTuple_GET_ITEM(__pyx_args, 43);
        case 43: values[42] = PyTuple_GET_ITEM(__pyx_args, 42);
        case 42: values[41] = PyTuple_GET_ITEM(__pyx_args, 41);
        case 41: values[40] = PyTuple_GET_ITEM(__pyx_args, 40);
        case 40: values[39] = PyTuple_GET_ITEM(__pyx_args, 39);
        case 39: values[38] = PyTuple_GET_ITEM(__pyx_args, 38);
        case 38: values[37] = PyTuple_GET_ITEM(__pyx_args, 37);
        case 37: values[36] = PyTuple_GET_ITEM(__pyx_args, 36);
        case 36: values[35] = PyTuple_GET_ITEM(__pyx_args, 35);
        case 35: values[34] = PyTuple_GET_ITEM(__pyx_args, 34);
        case 34: values[33] = PyTuple_GET_ITEM(__pyx_args, 33);
        case 33: values[32] = PyTuple_GET_ITEM(__pyx_args, 32);
        case 32: values[31] = PyTuple_GET_ITEM(__pyx_args, 31);
        case 31: values[30] = PyTuple_GET_ITEM(__pyx_args, 30);
        case 30: values[29] = PyTuple_GET_ITEM(__pyx_args, 29);
        case 29: values[28] = PyTuple_GET_ITEM(__pyx_args, 28);
        case 28: values[27] = PyTuple_GET_ITEM(__pyx_args, 27);
        case 27: values[26] = PyTuple_GET_ITEM(__pyx_args, 26);
        case 26: values[25] = PyTuple_GET_ITEM(__pyx_args, 25);
        case 25: values[24] = PyTuple_GET_ITEM(__pyx_args, 24);
        case 24: values[23] = PyTuple_GET_ITEM(__pyx_args, 23);
        case 23: values[22] = PyTuple_GET_ITEM(__pyx_args, 22);
        case 22: values[21] = PyTuple_GET_ITEM(__pyx_args, 21);
        case 21: values[20] = PyTuple_GET_ITEM(__pyx_args, 20);
        case 20: values[19] = PyTuple_GET_ITEM(__pyx_args, 19);
        case 19: values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
        case 18: values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
        case 17: values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_trial_ref)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_grad_trial_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 1); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 2); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_velocity_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 3); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_MOVING_DOMAIN)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 4); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_PSTAB)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 5); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_l2g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 6); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case  7:
        if (likely((values[7] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dV_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 7); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case  8:
        if (likely((values[8] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_trial_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 8); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case  9:
        if (likely((values[9] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_grad_trial_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 9); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 10:
        if (likely((values[10] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_test_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 10); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 11:
        if (likely((values[11] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_grad_test_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 11); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 12:
        if (likely((values[12] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 12); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 13:
        if (likely((values[13] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_grad_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 13); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 14:
        if (likely((values[14] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 14); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 15:
        if (likely((values[15] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_grad_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 15); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 16:
        if (likely((values[16] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_trial_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 16); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 17:
        if (likely((values[17] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_grad_trial_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 17); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 18:
        if (likely((values[18] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_hess_trial_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 18); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 19:
        if (likely((values[19] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_test_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 19); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 20:
        if (likely((values[20] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_grad_test_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 20); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 21:
        if (likely((values[21] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 21); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 22:
        if (likely((values[22] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_grad_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 22); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 23:
        if (likely((values[23] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dS_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 23); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 24:
        if (likely((values[24] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 24); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 25:
        if (likely((values[25] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_grad_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 25); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 26:
        if (likely((values[26] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_test_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 26); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 27:
        if (likely((values[27] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_grad_test_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 27); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 28:
        if (likely((values[28] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 28); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 29:
        if (likely((values[29] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_grad_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 29); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 30:
        if (likely((values[30] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_test_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 30); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 31:
        if (likely((values[31] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_grad_test_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 31); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 32:
        if (likely((values[32] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_normal_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 32); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 33:
        if (likely((values[33] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_boundaryJac_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 33); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 34:
        if (likely((values[34] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_eb_adjoint_sigma)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 34); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 35:
        if (likely((values[35] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_elementDiameter)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 35); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 36:
        if (likely((values[36] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nodeDiametersArray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 36); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 37:
        if (likely((values[37] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_hFactor)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 37); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 38:
        if (likely((values[38] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nElements_global)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 38); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 39:
        if (likely((values[39] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nElements_owned)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 39); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 40:
        if (likely((values[40] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nElementBoundaries_owned)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 40); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 41:
        if (likely((values[41] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_useRBLES)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 41); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 42:
        if (likely((values[42] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_useMetrics)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 42); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 43:
        if (likely((values[43] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_alphaBDF)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 43); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 44:
        if (likely((values[44] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_epsFact_rho)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 44); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 45:
        if (likely((values[45] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_epsFact_mu)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 45); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 46:
        if (likely((values[46] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sigma)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 46); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 47:
        if (likely((values[47] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rho_0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 47); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 48:
        if (likely((values[48] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nu_0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 48); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 49:
        if (likely((values[49] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rho_1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 49); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 50:
        if (likely((values[50] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nu_1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 50); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 51:
        if (likely((values[51] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_smagorinskyConstant)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 51); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 52:
        if (likely((values[52] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_turbulenceClosureModel)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 52); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 53:
        if (likely((values[53] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Ct_sge)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 53); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 54:
        if (likely((values[54] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Cd_sge)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 54); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 55:
        if (likely((values[55] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_C_dc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 55); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 56:
        if (likely((values[56] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_C_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 56); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 57:
        if (likely((values[57] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_eps_solid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 57); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 58:
        if (likely((values[58] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_phi_solid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 58); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 59:
        if (likely((values[59] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_velocity_solid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 59); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 60:
        if (likely((values[60] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_vos)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 60); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 61:
        if (likely((values[61] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_dvos_dt)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 61); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 62:
        if (likely((values[62] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_dragAlpha)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 62); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 63:
        if (likely((values[63] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_dragBeta)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 63); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 64:
        if (likely((values[64] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_mass_source)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 64); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 65:
        if (likely((values[65] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_turb_var_0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 65); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 66:
        if (likely((values[66] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_turb_var_1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 66); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 67:
        if (likely((values[67] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_turb_var_grad_0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 67); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 68:
        if (likely((values[68] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_eddy_viscosity)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 68); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 69:
        if (likely((values[69] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_l2g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 69); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 70:
        if (likely((values[70] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_l2g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 70); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 71:
        if (likely((values[71] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 71); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 72:
        if (likely((values[72] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_u_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 72); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 73:
        if (likely((values[73] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_v_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 73); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 74:
        if (likely((values[74] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_w_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 74); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 75:
        if (likely((values[75] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_u_dof_old)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 75); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 76:
        if (likely((values[76] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_v_dof_old)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 76); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 77:
        if (likely((values[77] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_w_dof_old)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 77); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 78:
        if (likely((values[78] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_u_dof_old_old)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 78); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 79:
        if (likely((values[79] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_v_dof_old_old)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 79); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 80:
        if (likely((values[80] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_w_dof_old_old)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 80); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 81:
        if (likely((values[81] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 81); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 82:
        if (likely((values[82] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_useVF)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 82); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 83:
        if (likely((values[83] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vf)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 83); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 84:
        if (likely((values[84] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_phi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 84); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 85:
        if (likely((values[85] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_normal_phi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 85); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 86:
        if (likely((values[86] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_kappa_phi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 86); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 87:
        if (likely((values[87] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_mom_u_acc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 87); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 88:
        if (likely((values[88] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_mom_v_acc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 88); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 89:
        if (likely((values[89] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_mom_w_acc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 89); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 90:
        if (likely((values[90] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_mass_adv)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 90); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 91:
        if (likely((values[91] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_mom_u_acc_beta_bdf)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 91); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 92:
        if (likely((values[92] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_mom_v_acc_beta_bdf)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 92); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 93:
        if (likely((values[93] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_mom_w_acc_beta_bdf)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 93); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 94:
        if (likely((values[94] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_dV)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 94); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 95:
        if (likely((values[95] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_dV_last)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 95); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 96:
        if (likely((values[96] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_velocity_sge)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 96); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 97:
        if (likely((values[97] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_velocity_star)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 97); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 98:
        if (likely((values[98] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_cfl)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 98); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 99:
        if (likely((values[99] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_numDiff_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 99); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 100:
        if (likely((values[100] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_numDiff_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 100); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 101:
        if (likely((values[101] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_numDiff_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 101); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 102:
        if (likely((values[102] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_numDiff_u_last)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 102); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 103:
        if (likely((values[103] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_numDiff_v_last)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 103); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 104:
        if (likely((values[104] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_numDiff_w_last)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 104); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 105:
        if (likely((values[105] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_u_u_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 105); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 106:
        if (likely((values[106] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_u_u_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 106); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 107:
        if (likely((values[107] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_u_v_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 107); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 108:
        if (likely((values[108] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_u_v_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 108); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 109:
        if (likely((values[109] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_u_w_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 109); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 110:
        if (likely((values[110] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_u_w_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 110); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 111:
        if (likely((values[111] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_v_v_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 111); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 112:
        if (likely((values[112] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_v_v_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 112); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 113:
        if (likely((values[113] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_v_u_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 113); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 114:
        if (likely((values[114] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_v_u_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 114); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 115:
        if (likely((values[115] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_v_w_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 115); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 116:
        if (likely((values[116] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_v_w_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 116); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 117:
        if (likely((values[117] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_w_w_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 117); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 118:
        if (likely((values[118] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_w_w_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 118); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 119:
        if (likely((values[119] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_w_u_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 119); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 120:
        if (likely((values[120] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_w_u_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 120); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 121:
        if (likely((values[121] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_w_v_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 121); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 122:
        if (likely((values[122] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_w_v_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 122); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 123:
        if (likely((values[123] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_offset_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 123); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 124:
        if (likely((values[124] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_offset_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 124); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 125:
        if (likely((values[125] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_offset_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 125); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 126:
        if (likely((values[126] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_offset_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 126); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 127:
        if (likely((values[127] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stride_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 127); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 128:
        if (likely((values[128] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stride_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 128); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 129:
        if (likely((values[129] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stride_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 129); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 130:
        if (likely((values[130] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stride_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 130); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 131:
        if (likely((values[131] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_globalResidual)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 131); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 132:
        if (likely((values[132] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nExteriorElementBoundaries_globa)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 132); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 133:
        if (likely((values[133] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_exteriorElementBoundariesArray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 133); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 134:
        if (likely((values[134] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_elementBoundaryElementsArray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 134); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 135:
        if (likely((values[135] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_elementBoundaryLocalElementBound)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 135); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 136:
        if (likely((values[136] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_vf_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 136); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 137:
        if (likely((values[137] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bc_ebqe_vf_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 137); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 138:
        if (likely((values[138] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_phi_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 138); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 139:
        if (likely((values[139] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bc_ebqe_phi_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 139); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 140:
        if (likely((values[140] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_normal_phi_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 140); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 141:
        if (likely((values[141] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_kappa_phi_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 141); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 142:
        if (likely((values[142] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_vos_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 142); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 143:
        if (likely((values[143] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_turb_var_0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 143); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 144:
        if (likely((values[144] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_turb_var_1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 144); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 145:
        if (likely((values[145] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isDOFBoundary_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 145); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 146:
        if (likely((values[146] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isDOFBoundary_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 146); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 147:
        if (likely((values[147] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isDOFBoundary_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 147); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 148:
        if (likely((values[148] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isDOFBoundary_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 148); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 149:
        if (likely((values[149] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isAdvectiveFluxBoundary_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 149); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 150:
        if (likely((values[150] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isAdvectiveFluxBoundary_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 150); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 151:
        if (likely((values[151] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isAdvectiveFluxBoundary_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 151); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 152:
        if (likely((values[152] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isAdvectiveFluxBoundary_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 152); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 153:
        if (likely((values[153] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isDiffusiveFluxBoundary_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 153); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 154:
        if (likely((values[154] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isDiffusiveFluxBoundary_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 154); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 155:
        if (likely((values[155] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isDiffusiveFluxBoundary_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 155); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 156:
        if (likely((values[156] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_p_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 156); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 157:
        if (likely((values[157] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_flux_mass_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 157); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 158:
        if (likely((values[158] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_flux_mom_u_adv_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 158); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 159:
        if (likely((values[159] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_flux_mom_v_adv_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 159); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 160:
        if (likely((values[160] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_flux_mom_w_adv_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 160); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 161:
        if (likely((values[161] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_u_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 161); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 162:
        if (likely((values[162] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_flux_u_diff_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 162); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 163:
        if (likely((values[163] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_penalty_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 163); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 164:
        if (likely((values[164] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_v_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 164); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 165:
        if (likely((values[165] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_flux_v_diff_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 165); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 166:
        if (likely((values[166] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_w_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 166); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 167:
        if (likely((values[167] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_flux_w_diff_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 167); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 168:
        if (likely((values[168] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 168); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 169:
        if (likely((values[169] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_velocity)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 169); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 170:
        if (likely((values[170] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_velocity)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 170); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 171:
        if (likely((values[171] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_grad_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 171); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 172:
        if (likely((values[172] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_grad_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 172); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 173:
        if (likely((values[173] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_grad_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 173); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 174:
        if (likely((values[174] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_divU)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 174); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 175:
        if (likely((values[175] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_grad_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 175); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 176:
        if (likely((values[176] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_grad_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 176); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 177:
        if (likely((values[177] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_grad_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 177); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 178:
        if (likely((values[178] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flux)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 178); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 179:
        if (likely((values[179] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_elementResidual_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 179); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 180:
        if (likely((values[180] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_elementFlags)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 180); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 181:
        if (likely((values[181] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_boundaryFlags)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 181); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 182:
        if (likely((values[182] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_barycenters)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 182); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 183:
        if (likely((values[183] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_wettedAreas)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 183); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 184:
        if (likely((values[184] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_netForces_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 184); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 185:
        if (likely((values[185] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_netForces_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 185); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 186:
        if (likely((values[186] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_netMoments)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 186); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 187:
        if (likely((values[187] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_rho)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 187); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 188:
        if (likely((values[188] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_rho)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 188); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 189:
        if (likely((values[189] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_nu)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 189); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 190:
        if (likely((values[190] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_nu)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 190); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 191:
        if (likely((values[191] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nParticles)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 191); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 192:
        if (likely((values[192] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_epsFact)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 192); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 193:
        if (likely((values[193] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_alpha)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 193); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 194:
        if (likely((values[194] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_beta)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 194); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 195:
        if (likely((values[195] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_penalty_constant)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 195); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 196:
        if (likely((values[196] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_signed_distances)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 196); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 197:
        if (likely((values[197] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_signed_distance_normals)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 197); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 198:
        if (likely((values[198] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_velocities)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 198); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 199:
        if (likely((values[199] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_centroids)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 199); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 200:
        if (likely((values[200] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_netForces)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 200); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 201:
        if (likely((values[201] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_netMoments)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 201); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 202:
        if (likely((values[202] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_surfaceArea)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 202); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 203:
        if (likely((values[203] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_nitsche)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 203); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 204:
        if (likely((values[204] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_STABILIZATION_TYPE)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 204); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 205:
        if (likely((values[205] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_areaRefElement)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 205); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 206:
        if (likely((values[206] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cMax)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 206); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 207:
        if (likely((values[207] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cE)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 207); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 208:
        if (likely((values[208] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_forcex)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 208); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 209:
        if (likely((values[209] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_forcey)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 209); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 210:
        if (likely((values[210] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_forcez)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 210); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 211:
        if (likely((values[211] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_KILL_PRESSURE_TERM)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 211); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 212:
        if (likely((values[212] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dt)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 212); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 213:
        if (likely((values[213] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_entropyResidualAtCell)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 213); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 214:
        if (likely((values[214] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_maxSpeed2AtCell)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 214); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 215:
        if (likely((values[215] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_maxSpeed2AtOmega)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 215); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 216:
        if (likely((values[216] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rhoAtCell)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 216); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 217:
        if (likely((values[217] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_muAtCell)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 217); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 218:
        if (likely((values[218] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_quantDOFs)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 218); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 219:
        if (likely((values[219] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_numDOFsPerEqn)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 219); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 220:
        if (likely((values[220] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_DofLoops)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 220); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 221:
        if (likely((values[221] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_DofLoops)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 221); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 222:
        if (likely((values[222] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ML)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 222); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 223:
        if (likely((values[223] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Cx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 223); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 224:
        if (likely((values[224] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Cy)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 224); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 225:
        if (likely((values[225] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Cz)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 225); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 226:
        if (likely((values[226] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_MATERIAL_PARAMETERS_AS_FUNCTION)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 226); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 227:
        if (likely((values[227] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_density_as_function)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 227); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 228:
        if (likely((values[228] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dynamic_viscosity_as_function)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 228); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 229:
        if (likely((values[229] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_density_as_function)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 229); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 230:
        if (likely((values[230] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_dynamic_viscosity_as_functi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 230); __PYX_ERR(0, 946, __pyx_L3_error)
        }
        case 231:
        if (likely((values[231] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_order_polynomial)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 231); __PYX_ERR(0, 946, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calculateResidual") < 0)) __PYX_ERR(0, 946, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 232) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
      values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
      values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
      values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
      values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
      values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
      values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
      values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
      values[19] = PyTuple_GET_ITEM(__pyx_args, 19);
      values[20] = PyTuple_GET_ITEM(__pyx_args, 20);
      values[21] = PyTuple_GET_ITEM(__pyx_args, 21);
      values[22] = PyTuple_GET_ITEM(__pyx_args, 22);
      values[23] = PyTuple_GET_ITEM(__pyx_args, 23);
      values[24] = PyTuple_GET_ITEM(__pyx_args, 24);
      values[25] = PyTuple_GET_ITEM(__pyx_args, 25);
      values[26] = PyTuple_GET_ITEM(__pyx_args, 26);
      values[27] = PyTuple_GET_ITEM(__pyx_args, 27);
      values[28] = PyTuple_GET_ITEM(__pyx_args, 28);
      values[29] = PyTuple_GET_ITEM(__pyx_args, 29);
      values[30] = PyTuple_GET_ITEM(__pyx_args, 30);
      values[31] = PyTuple_GET_ITEM(__pyx_args, 31);
      values[32] = PyTuple_GET_ITEM(__pyx_args, 32);
      values[33] = PyTuple_GET_ITEM(__pyx_args, 33);
      values[34] = PyTuple_GET_ITEM(__pyx_args, 34);
      values[35] = PyTuple_GET_ITEM(__pyx_args, 35);
      values[36] = PyTuple_GET_ITEM(__pyx_args, 36);
      values[37] = PyTuple_GET_ITEM(__pyx_args, 37);
      values[38] = PyTuple_GET_ITEM(__pyx_args, 38);
      values[39] = PyTuple_GET_ITEM(__pyx_args, 39);
      values[40] = PyTuple_GET_ITEM(__pyx_args, 40);
      values[41] = PyTuple_GET_ITEM(__pyx_args, 41);
      values[42] = PyTuple_GET_ITEM(__pyx_args, 42);
      values[43] = PyTuple_GET_ITEM(__pyx_args, 43);
      values[44] = PyTuple_GET_ITEM(__pyx_args, 44);
      values[45] = PyTuple_GET_ITEM(__pyx_args, 45);
      values[46] = PyTuple_GET_ITEM(__pyx_args, 46);
      values[47] = PyTuple_GET_ITEM(__pyx_args, 47);
      values[48] = PyTuple_GET_ITEM(__pyx_args, 48);
      values[49] = PyTuple_GET_ITEM(__pyx_args, 49);
      values[50] = PyTuple_GET_ITEM(__pyx_args, 50);
      values[51] = PyTuple_GET_ITEM(__pyx_args, 51);
      values[52] = PyTuple_GET_ITEM(__pyx_args, 52);
      values[53] = PyTuple_GET_ITEM(__pyx_args, 53);
      values[54] = PyTuple_GET_ITEM(__pyx_args, 54);
      values[55] = PyTuple_GET_ITEM(__pyx_args, 55);
      values[56] = PyTuple_GET_ITEM(__pyx_args, 56);
      values[57] = PyTuple_GET_ITEM(__pyx_args, 57);
      values[58] = PyTuple_GET_ITEM(__pyx_args, 58);
      values[59] = PyTuple_GET_ITEM(__pyx_args, 59);
      values[60] = PyTuple_GET_ITEM(__pyx_args, 60);
      values[61] = PyTuple_GET_ITEM(__pyx_args, 61);
      values[62] = PyTuple_GET_ITEM(__pyx_args, 62);
      values[63] = PyTuple_GET_ITEM(__pyx_args, 63);
      values[64] = PyTuple_GET_ITEM(__pyx_args, 64);
      values[65] = PyTuple_GET_ITEM(__pyx_args, 65);
      values[66] = PyTuple_GET_ITEM(__pyx_args, 66);
      values[67] = PyTuple_GET_ITEM(__pyx_args, 67);
      values[68] = PyTuple_GET_ITEM(__pyx_args, 68);
      values[69] = PyTuple_GET_ITEM(__pyx_args, 69);
      values[70] = PyTuple_GET_ITEM(__pyx_args, 70);
      values[71] = PyTuple_GET_ITEM(__pyx_args, 71);
      values[72] = PyTuple_GET_ITEM(__pyx_args, 72);
      values[73] = PyTuple_GET_ITEM(__pyx_args, 73);
      values[74] = PyTuple_GET_ITEM(__pyx_args, 74);
      values[75] = PyTuple_GET_ITEM(__pyx_args, 75);
      values[76] = PyTuple_GET_ITEM(__pyx_args, 76);
      values[77] = PyTuple_GET_ITEM(__pyx_args, 77);
      values[78] = PyTuple_GET_ITEM(__pyx_args, 78);
      values[79] = PyTuple_GET_ITEM(__pyx_args, 79);
      values[80] = PyTuple_GET_ITEM(__pyx_args, 80);
      values[81] = PyTuple_GET_ITEM(__pyx_args, 81);
      values[82] = PyTuple_GET_ITEM(__pyx_args, 82);
      values[83] = PyTuple_GET_ITEM(__pyx_args, 83);
      values[84] = PyTuple_GET_ITEM(__pyx_args, 84);
      values[85] = PyTuple_GET_ITEM(__pyx_args, 85);
      values[86] = PyTuple_GET_ITEM(__pyx_args, 86);
      values[87] = PyTuple_GET_ITEM(__pyx_args, 87);
      values[88] = PyTuple_GET_ITEM(__pyx_args, 88);
      values[89] = PyTuple_GET_ITEM(__pyx_args, 89);
      values[90] = PyTuple_GET_ITEM(__pyx_args, 90);
      values[91] = PyTuple_GET_ITEM(__pyx_args, 91);
      values[92] = PyTuple_GET_ITEM(__pyx_args, 92);
      values[93] = PyTuple_GET_ITEM(__pyx_args, 93);
      values[94] = PyTuple_GET_ITEM(__pyx_args, 94);
      values[95] = PyTuple_GET_ITEM(__pyx_args, 95);
      values[96] = PyTuple_GET_ITEM(__pyx_args, 96);
      values[97] = PyTuple_GET_ITEM(__pyx_args, 97);
      values[98] = PyTuple_GET_ITEM(__pyx_args, 98);
      values[99] = PyTuple_GET_ITEM(__pyx_args, 99);
      values[100] = PyTuple_GET_ITEM(__pyx_args, 100);
      values[101] = PyTuple_GET_ITEM(__pyx_args, 101);
      values[102] = PyTuple_GET_ITEM(__pyx_args, 102);
      values[103] = PyTuple_GET_ITEM(__pyx_args, 103);
      values[104] = PyTuple_GET_ITEM(__pyx_args, 104);
      values[105] = PyTuple_GET_ITEM(__pyx_args, 105);
      values[106] = PyTuple_GET_ITEM(__pyx_args, 106);
      values[107] = PyTuple_GET_ITEM(__pyx_args, 107);
      values[108] = PyTuple_GET_ITEM(__pyx_args, 108);
      values[109] = PyTuple_GET_ITEM(__pyx_args, 109);
      values[110] = PyTuple_GET_ITEM(__pyx_args, 110);
      values[111] = PyTuple_GET_ITEM(__pyx_args, 111);
      values[112] = PyTuple_GET_ITEM(__pyx_args, 112);
      values[113] = PyTuple_GET_ITEM(__pyx_args, 113);
      values[114] = PyTuple_GET_ITEM(__pyx_args, 114);
      values[115] = PyTuple_GET_ITEM(__pyx_args, 115);
      values[116] = PyTuple_GET_ITEM(__pyx_args, 116);
      values[117] = PyTuple_GET_ITEM(__pyx_args, 117);
      values[118] = PyTuple_GET_ITEM(__pyx_args, 118);
      values[119] = PyTuple_GET_ITEM(__pyx_args, 119);
      values[120] = PyTuple_GET_ITEM(__pyx_args, 120);
      values[121] = PyTuple_GET_ITEM(__pyx_args, 121);
      values[122] = PyTuple_GET_ITEM(__pyx_args, 122);
      values[123] = PyTuple_GET_ITEM(__pyx_args, 123);
      values[124] = PyTuple_GET_ITEM(__pyx_args, 124);
      values[125] = PyTuple_GET_ITEM(__pyx_args, 125);
      values[126] = PyTuple_GET_ITEM(__pyx_args, 126);
      values[127] = PyTuple_GET_ITEM(__pyx_args, 127);
      values[128] = PyTuple_GET_ITEM(__pyx_args, 128);
      values[129] = PyTuple_GET_ITEM(__pyx_args, 129);
      values[130] = PyTuple_GET_ITEM(__pyx_args, 130);
      values[131] = PyTuple_GET_ITEM(__pyx_args, 131);
      values[132] = PyTuple_GET_ITEM(__pyx_args, 132);
      values[133] = PyTuple_GET_ITEM(__pyx_args, 133);
      values[134] = PyTuple_GET_ITEM(__pyx_args, 134);
      values[135] = PyTuple_GET_ITEM(__pyx_args, 135);
      values[136] = PyTuple_GET_ITEM(__pyx_args, 136);
      values[137] = PyTuple_GET_ITEM(__pyx_args, 137);
      values[138] = PyTuple_GET_ITEM(__pyx_args, 138);
      values[139] = PyTuple_GET_ITEM(__pyx_args, 139);
      values[140] = PyTuple_GET_ITEM(__pyx_args, 140);
      values[141] = PyTuple_GET_ITEM(__pyx_args, 141);
      values[142] = PyTuple_GET_ITEM(__pyx_args, 142);
      values[143] = PyTuple_GET_ITEM(__pyx_args, 143);
      values[144] = PyTuple_GET_ITEM(__pyx_args, 144);
      values[145] = PyTuple_GET_ITEM(__pyx_args, 145);
      values[146] = PyTuple_GET_ITEM(__pyx_args, 146);
      values[147] = PyTuple_GET_ITEM(__pyx_args, 147);
      values[148] = PyTuple_GET_ITEM(__pyx_args, 148);
      values[149] = PyTuple_GET_ITEM(__pyx_args, 149);
      values[150] = PyTuple_GET_ITEM(__pyx_args, 150);
      values[151] = PyTuple_GET_ITEM(__pyx_args, 151);
      values[152] = PyTuple_GET_ITEM(__pyx_args, 152);
      values[153] = PyTuple_GET_ITEM(__pyx_args, 153);
      values[154] = PyTuple_GET_ITEM(__pyx_args, 154);
      values[155] = PyTuple_GET_ITEM(__pyx_args, 155);
      values[156] = PyTuple_GET_ITEM(__pyx_args, 156);
      values[157] = PyTuple_GET_ITEM(__pyx_args, 157);
      values[158] = PyTuple_GET_ITEM(__pyx_args, 158);
      values[159] = PyTuple_GET_ITEM(__pyx_args, 159);
      values[160] = PyTuple_GET_ITEM(__pyx_args, 160);
      values[161] = PyTuple_GET_ITEM(__pyx_args, 161);
      values[162] = PyTuple_GET_ITEM(__pyx_args, 162);
      values[163] = PyTuple_GET_ITEM(__pyx_args, 163);
      values[164] = PyTuple_GET_ITEM(__pyx_args, 164);
      values[165] = PyTuple_GET_ITEM(__pyx_args, 165);
      values[166] = PyTuple_GET_ITEM(__pyx_args, 166);
      values[167] = PyTuple_GET_ITEM(__pyx_args, 167);
      values[168] = PyTuple_GET_ITEM(__pyx_args, 168);
      values[169] = PyTuple_GET_ITEM(__pyx_args, 169);
      values[170] = PyTuple_GET_ITEM(__pyx_args, 170);
      values[171] = PyTuple_GET_ITEM(__pyx_args, 171);
      values[172] = PyTuple_GET_ITEM(__pyx_args, 172);
      values[173] = PyTuple_GET_ITEM(__pyx_args, 173);
      values[174] = PyTuple_GET_ITEM(__pyx_args, 174);
      values[175] = PyTuple_GET_ITEM(__pyx_args, 175);
      values[176] = PyTuple_GET_ITEM(__pyx_args, 176);
      values[177] = PyTuple_GET_ITEM(__pyx_args, 177);
      values[178] = PyTuple_GET_ITEM(__pyx_args, 178);
      values[179] = PyTuple_GET_ITEM(__pyx_args, 179);
      values[180] = PyTuple_GET_ITEM(__pyx_args, 180);
      values[181] = PyTuple_GET_ITEM(__pyx_args, 181);
      values[182] = PyTuple_GET_ITEM(__pyx_args, 182);
      values[183] = PyTuple_GET_ITEM(__pyx_args, 183);
      values[184] = PyTuple_GET_ITEM(__pyx_args, 184);
      values[185] = PyTuple_GET_ITEM(__pyx_args, 185);
      values[186] = PyTuple_GET_ITEM(__pyx_args, 186);
      values[187] = PyTuple_GET_ITEM(__pyx_args, 187);
      values[188] = PyTuple_GET_ITEM(__pyx_args, 188);
      values[189] = PyTuple_GET_ITEM(__pyx_args, 189);
      values[190] = PyTuple_GET_ITEM(__pyx_args, 190);
      values[191] = PyTuple_GET_ITEM(__pyx_args, 191);
      values[192] = PyTuple_GET_ITEM(__pyx_args, 192);
      values[193] = PyTuple_GET_ITEM(__pyx_args, 193);
      values[194] = PyTuple_GET_ITEM(__pyx_args, 194);
      values[195] = PyTuple_GET_ITEM(__pyx_args, 195);
      values[196] = PyTuple_GET_ITEM(__pyx_args, 196);
      values[197] = PyTuple_GET_ITEM(__pyx_args, 197);
      values[198] = PyTuple_GET_ITEM(__pyx_args, 198);
      values[199] = PyTuple_GET_ITEM(__pyx_args, 199);
      values[200] = PyTuple_GET_ITEM(__pyx_args, 200);
      values[201] = PyTuple_GET_ITEM(__pyx_args, 201);
      values[202] = PyTuple_GET_ITEM(__pyx_args, 202);
      values[203] = PyTuple_GET_ITEM(__pyx_args, 203);
      values[204] = PyTuple_GET_ITEM(__pyx_args, 204);
      values[205] = PyTuple_GET_ITEM(__pyx_args, 205);
      values[206] = PyTuple_GET_ITEM(__pyx_args, 206);
      values[207] = PyTuple_GET_ITEM(__pyx_args, 207);
      values[208] = PyTuple_GET_ITEM(__pyx_args, 208);
      values[209] = PyTuple_GET_ITEM(__pyx_args, 209);
      values[210] = PyTuple_GET_ITEM(__pyx_args, 210);
      values[211] = PyTuple_GET_ITEM(__pyx_args, 211);
      values[212] = PyTuple_GET_ITEM(__pyx_args, 212);
      values[213] = PyTuple_GET_ITEM(__pyx_args, 213);
      values[214] = PyTuple_GET_ITEM(__pyx_args, 214);
      values[215] = PyTuple_GET_ITEM(__pyx_args, 215);
      values[216] = PyTuple_GET_ITEM(__pyx_args, 216);
      values[217] = PyTuple_GET_ITEM(__pyx_args, 217);
      values[218] = PyTuple_GET_ITEM(__pyx_args, 218);
      values[219] = PyTuple_GET_ITEM(__pyx_args, 219);
      values[220] = PyTuple_GET_ITEM(__pyx_args, 220);
      values[221] = PyTuple_GET_ITEM(__pyx_args, 221);
      values[222] = PyTuple_GET_ITEM(__pyx_args, 222);
      values[223] = PyTuple_GET_ITEM(__pyx_args, 223);
      values[224] = PyTuple_GET_ITEM(__pyx_args, 224);
      values[225] = PyTuple_GET_ITEM(__pyx_args, 225);
      values[226] = PyTuple_GET_ITEM(__pyx_args, 226);
      values[227] = PyTuple_GET_ITEM(__pyx_args, 227);
      values[228] = PyTuple_GET_ITEM(__pyx_args, 228);
      values[229] = PyTuple_GET_ITEM(__pyx_args, 229);
      values[230] = PyTuple_GET_ITEM(__pyx_args, 230);
      values[231] = PyTuple_GET_ITEM(__pyx_args, 231);
    }
    __pyx_v_mesh_trial_ref = ((PyArrayObject *)values[0]);
    __pyx_v_mesh_grad_trial_ref = ((PyArrayObject *)values[1]);
    __pyx_v_mesh_dof = ((PyArrayObject *)values[2]);
    __pyx_v_mesh_velocity_dof = ((PyArrayObject *)values[3]);
    __pyx_v_MOVING_DOMAIN = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_MOVING_DOMAIN == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 951, __pyx_L3_error)
    __pyx_v_PSTAB = __pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_PSTAB == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 952, __pyx_L3_error)
    __pyx_v_mesh_l2g = ((PyArrayObject *)values[6]);
    __pyx_v_dV_ref = ((PyArrayObject *)values[7]);
    __pyx_v_p_trial_ref = ((PyArrayObject *)values[8]);
    __pyx_v_p_grad_trial_ref = ((PyArrayObject *)values[9]);
    __pyx_v_p_test_ref = ((PyArrayObject *)values[10]);
    __pyx_v_p_grad_test_ref = ((PyArrayObject *)values[11]);
    __pyx_v_q_p = ((PyArrayObject *)values[12]);
    __pyx_v_q_grad_p = ((PyArrayObject *)values[13]);
    __pyx_v_ebqe_p = ((PyArrayObject *)values[14]);
    __pyx_v_ebqe_grad_p = ((PyArrayObject *)values[15]);
    __pyx_v_vel_trial_ref = ((PyArrayObject *)values[16]);
    __pyx_v_vel_grad_trial_ref = ((PyArrayObject *)values[17]);
    __pyx_v_vel_hess_trial_ref = ((PyArrayObject *)values[18]);
    __pyx_v_vel_test_ref = ((PyArrayObject *)values[19]);
    __pyx_v_vel_grad_test_ref = ((PyArrayObject *)values[20]);
    __pyx_v_mesh_trial_trace_ref = ((PyArrayObject *)values[21]);
    __pyx_v_mesh_grad_trial_trace_ref = ((PyArrayObject *)values[22]);
    __pyx_v_dS_ref = ((PyArrayObject *)values[23]);
    __pyx_v_p_trial_trace_ref = ((PyArrayObject *)values[24]);
    __pyx_v_p_grad_trial_trace_ref = ((PyArrayObject *)values[25]);
    __pyx_v_p_test_trace_ref = ((PyArrayObject *)values[26]);
    __pyx_v_p_grad_test_trace_ref = ((PyArrayObject *)values[27]);
    __pyx_v_vel_trial_trace_ref = ((PyArrayObject *)values[28]);
    __pyx_v_vel_grad_trial_trace_ref = ((PyArrayObject *)values[29]);
    __pyx_v_vel_test_trace_ref = ((PyArrayObject *)values[30]);
    __pyx_v_vel_grad_test_trace_ref = ((PyArrayObject *)values[31]);
    __pyx_v_normal_ref = ((PyArrayObject *)values[32]);
    __pyx_v_boundaryJac_ref = ((PyArrayObject *)values[33]);
    __pyx_v_eb_adjoint_sigma = __pyx_PyFloat_AsDouble(values[34]); if (unlikely((__pyx_v_eb_adjoint_sigma == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 981, __pyx_L3_error)
    __pyx_v_elementDiameter = ((PyArrayObject *)values[35]);
    __pyx_v_nodeDiametersArray = ((PyArrayObject *)values[36]);
    __pyx_v_hFactor = __pyx_PyFloat_AsDouble(values[37]); if (unlikely((__pyx_v_hFactor == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 984, __pyx_L3_error)
    __pyx_v_nElements_global = __Pyx_PyInt_As_int(values[38]); if (unlikely((__pyx_v_nElements_global == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 985, __pyx_L3_error)
    __pyx_v_nElements_owned = __Pyx_PyInt_As_int(values[39]); if (unlikely((__pyx_v_nElements_owned == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 986, __pyx_L3_error)
    __pyx_v_nElementBoundaries_owned = __Pyx_PyInt_As_int(values[40]); if (unlikely((__pyx_v_nElementBoundaries_owned == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 987, __pyx_L3_error)
    __pyx_v_useRBLES = __pyx_PyFloat_AsDouble(values[41]); if (unlikely((__pyx_v_useRBLES == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 988, __pyx_L3_error)
    __pyx_v_useMetrics = __pyx_PyFloat_AsDouble(values[42]); if (unlikely((__pyx_v_useMetrics == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 989, __pyx_L3_error)
    __pyx_v_alphaBDF = __pyx_PyFloat_AsDouble(values[43]); if (unlikely((__pyx_v_alphaBDF == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 990, __pyx_L3_error)
    __pyx_v_epsFact_rho = __pyx_PyFloat_AsDouble(values[44]); if (unlikely((__pyx_v_epsFact_rho == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 991, __pyx_L3_error)
    __pyx_v_epsFact_mu = __pyx_PyFloat_AsDouble(values[45]); if (unlikely((__pyx_v_epsFact_mu == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 992, __pyx_L3_error)
    __pyx_v_sigma = __pyx_PyFloat_AsDouble(values[46]); if (unlikely((__pyx_v_sigma == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 993, __pyx_L3_error)
    __pyx_v_rho_0 = __pyx_PyFloat_AsDouble(values[47]); if (unlikely((__pyx_v_rho_0 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 994, __pyx_L3_error)
    __pyx_v_nu_0 = __pyx_PyFloat_AsDouble(values[48]); if (unlikely((__pyx_v_nu_0 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 995, __pyx_L3_error)
    __pyx_v_rho_1 = __pyx_PyFloat_AsDouble(values[49]); if (unlikely((__pyx_v_rho_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 996, __pyx_L3_error)
    __pyx_v_nu_1 = __pyx_PyFloat_AsDouble(values[50]); if (unlikely((__pyx_v_nu_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 997, __pyx_L3_error)
    __pyx_v_smagorinskyConstant = __pyx_PyFloat_AsDouble(values[51]); if (unlikely((__pyx_v_smagorinskyConstant == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 998, __pyx_L3_error)
    __pyx_v_turbulenceClosureModel = __Pyx_PyInt_As_int(values[52]); if (unlikely((__pyx_v_turbulenceClosureModel == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 999, __pyx_L3_error)
    __pyx_v_Ct_sge = __pyx_PyFloat_AsDouble(values[53]); if (unlikely((__pyx_v_Ct_sge == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1000, __pyx_L3_error)
    __pyx_v_Cd_sge = __pyx_PyFloat_AsDouble(values[54]); if (unlikely((__pyx_v_Cd_sge == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1001, __pyx_L3_error)
    __pyx_v_C_dc = __pyx_PyFloat_AsDouble(values[55]); if (unlikely((__pyx_v_C_dc == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1002, __pyx_L3_error)
    __pyx_v_C_b = __pyx_PyFloat_AsDouble(values[56]); if (unlikely((__pyx_v_C_b == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1003, __pyx_L3_error)
    __pyx_v_eps_solid = ((PyArrayObject *)values[57]);
    __pyx_v_phi_solid = ((PyArrayObject *)values[58]);
    __pyx_v_q_velocity_solid = ((PyArrayObject *)values[59]);
    __pyx_v_q_vos = ((PyArrayObject *)values[60]);
    __pyx_v_q_dvos_dt = ((PyArrayObject *)values[61]);
    __pyx_v_q_dragAlpha = ((PyArrayObject *)values[62]);
    __pyx_v_q_dragBeta = ((PyArrayObject *)values[63]);
    __pyx_v_q_mass_source = ((PyArrayObject *)values[64]);
    __pyx_v_q_turb_var_0 = ((PyArrayObject *)values[65]);
    __pyx_v_q_turb_var_1 = ((PyArrayObject *)values[66]);
    __pyx_v_q_turb_var_grad_0 = ((PyArrayObject *)values[67]);
    __pyx_v_q_eddy_viscosity = ((PyArrayObject *)values[68]);
    __pyx_v_p_l2g = ((PyArrayObject *)values[69]);
    __pyx_v_vel_l2g = ((PyArrayObject *)values[70]);
    __pyx_v_p_dof = ((PyArrayObject *)values[71]);
    __pyx_v_u_dof = ((PyArrayObject *)values[72]);
    __pyx_v_v_dof = ((PyArrayObject *)values[73]);
    __pyx_v_w_dof = ((PyArrayObject *)values[74]);
    __pyx_v_u_dof_old = ((PyArrayObject *)values[75]);
    __pyx_v_v_dof_old = ((PyArrayObject *)values[76]);
    __pyx_v_w_dof_old = ((PyArrayObject *)values[77]);
    __pyx_v_u_dof_old_old = ((PyArrayObject *)values[78]);
    __pyx_v_v_dof_old_old = ((PyArrayObject *)values[79]);
    __pyx_v_w_dof_old_old = ((PyArrayObject *)values[80]);
    __pyx_v_g = ((PyArrayObject *)values[81]);
    __pyx_v_useVF = __pyx_PyFloat_AsDouble(values[82]); if (unlikely((__pyx_v_useVF == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1031, __pyx_L3_error)
    __pyx_v_vf = ((PyArrayObject *)values[83]);
    __pyx_v_phi = ((PyArrayObject *)values[84]);
    __pyx_v_normal_phi = ((PyArrayObject *)values[85]);
    __pyx_v_kappa_phi = ((PyArrayObject *)values[86]);
    __pyx_v_q_mom_u_acc = ((PyArrayObject *)values[87]);
    __pyx_v_q_mom_v_acc = ((PyArrayObject *)values[88]);
    __pyx_v_q_mom_w_acc = ((PyArrayObject *)values[89]);
    __pyx_v_q_mass_adv = ((PyArrayObject *)values[90]);
    __pyx_v_q_mom_u_acc_beta_bdf = ((PyArrayObject *)values[91]);
    __pyx_v_q_mom_v_acc_beta_bdf = ((PyArrayObject *)values[92]);
    __pyx_v_q_mom_w_acc_beta_bdf = ((PyArrayObject *)values[93]);
    __pyx_v_q_dV = ((PyArrayObject *)values[94]);
    __pyx_v_q_dV_last = ((PyArrayObject *)values[95]);
    __pyx_v_q_velocity_sge = ((PyArrayObject *)values[96]);
    __pyx_v_ebqe_velocity_star = ((PyArrayObject *)values[97]);
    __pyx_v_q_cfl = ((PyArrayObject *)values[98]);
    __pyx_v_q_numDiff_u = ((PyArrayObject *)values[99]);
    __pyx_v_q_numDiff_v = ((PyArrayObject *)values[100]);
    __pyx_v_q_numDiff_w = ((PyArrayObject *)values[101]);
    __pyx_v_q_numDiff_u_last = ((PyArrayObject *)values[102]);
    __pyx_v_q_numDiff_v_last = ((PyArrayObject *)values[103]);
    __pyx_v_q_numDiff_w_last = ((PyArrayObject *)values[104]);
    __pyx_v_sdInfo_u_u_rowptr = ((PyArrayObject *)values[105]);
    __pyx_v_sdInfo_u_u_colind = ((PyArrayObject *)values[106]);
    __pyx_v_sdInfo_u_v_rowptr = ((PyArrayObject *)values[107]);
    __pyx_v_sdInfo_u_v_colind = ((PyArrayObject *)values[108]);
    __pyx_v_sdInfo_u_w_rowptr = ((PyArrayObject *)values[109]);
    __pyx_v_sdInfo_u_w_colind = ((PyArrayObject *)values[110]);
    __pyx_v_sdInfo_v_v_rowptr = ((PyArrayObject *)values[111]);
    __pyx_v_sdInfo_v_v_colind = ((PyArrayObject *)values[112]);
    __pyx_v_sdInfo_v_u_rowptr = ((PyArrayObject *)values[113]);
    __pyx_v_sdInfo_v_u_colind = ((PyArrayObject *)values[114]);
    __pyx_v_sdInfo_v_w_rowptr = ((PyArrayObject *)values[115]);
    __pyx_v_sdInfo_v_w_colind = ((PyArrayObject *)values[116]);
    __pyx_v_sdInfo_w_w_rowptr = ((PyArrayObject *)values[117]);
    __pyx_v_sdInfo_w_w_colind = ((PyArrayObject *)values[118]);
    __pyx_v_sdInfo_w_u_rowptr = ((PyArrayObject *)values[119]);
    __pyx_v_sdInfo_w_u_colind = ((PyArrayObject *)values[120]);
    __pyx_v_sdInfo_w_v_rowptr = ((PyArrayObject *)values[121]);
    __pyx_v_sdInfo_w_v_colind = ((PyArrayObject *)values[122]);
    __pyx_v_offset_p = __Pyx_PyInt_As_int(values[123]); if (unlikely((__pyx_v_offset_p == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1057, __pyx_L3_error)
    __pyx_v_offset_u = __Pyx_PyInt_As_int(values[124]); if (unlikely((__pyx_v_offset_u == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1057, __pyx_L3_error)
    __pyx_v_offset_v = __Pyx_PyInt_As_int(values[125]); if (unlikely((__pyx_v_offset_v == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1057, __pyx_L3_error)
    __pyx_v_offset_w = __Pyx_PyInt_As_int(values[126]); if (unlikely((__pyx_v_offset_w == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1057, __pyx_L3_error)
    __pyx_v_stride_p = __Pyx_PyInt_As_int(values[127]); if (unlikely((__pyx_v_stride_p == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1058, __pyx_L3_error)
    __pyx_v_stride_u = __Pyx_PyInt_As_int(values[128]); if (unlikely((__pyx_v_stride_u == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1058, __pyx_L3_error)
    __pyx_v_stride_v = __Pyx_PyInt_As_int(values[129]); if (unlikely((__pyx_v_stride_v == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1058, __pyx_L3_error)
    __pyx_v_stride_w = __Pyx_PyInt_As_int(values[130]); if (unlikely((__pyx_v_stride_w == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1058, __pyx_L3_error)
    __pyx_v_globalResidual = ((PyArrayObject *)values[131]);
    __pyx_v_nExteriorElementBoundaries_global = __Pyx_PyInt_As_int(values[132]); if (unlikely((__pyx_v_nExteriorElementBoundaries_global == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1060, __pyx_L3_error)
    __pyx_v_exteriorElementBoundariesArray = ((PyArrayObject *)values[133]);
    __pyx_v_elementBoundaryElementsArray = ((PyArrayObject *)values[134]);
    __pyx_v_elementBoundaryLocalElementBoundariesArray = ((PyArrayObject *)values[135]);
    __pyx_v_ebqe_vf_ext = ((PyArrayObject *)values[136]);
    __pyx_v_bc_ebqe_vf_ext = ((PyArrayObject *)values[137]);
    __pyx_v_ebqe_phi_ext = ((PyArrayObject *)values[138]);
    __pyx_v_bc_ebqe_phi_ext = ((PyArrayObject *)values[139]);
    __pyx_v_ebqe_normal_phi_ext = ((PyArrayObject *)values[140]);
    __pyx_v_ebqe_kappa_phi_ext = ((PyArrayObject *)values[141]);
    __pyx_v_ebqe_vos_ext = ((PyArrayObject *)values[142]);
    __pyx_v_ebqe_turb_var_0 = ((PyArrayObject *)values[143]);
    __pyx_v_ebqe_turb_var_1 = ((PyArrayObject *)values[144]);
    __pyx_v_isDOFBoundary_p = ((PyArrayObject *)values[145]);
    __pyx_v_isDOFBoundary_u = ((PyArrayObject *)values[146]);
    __pyx_v_isDOFBoundary_v = ((PyArrayObject *)values[147]);
    __pyx_v_isDOFBoundary_w = ((PyArrayObject *)values[148]);
    __pyx_v_isAdvectiveFluxBoundary_p = ((PyArrayObject *)values[149]);
    __pyx_v_isAdvectiveFluxBoundary_u = ((PyArrayObject *)values[150]);
    __pyx_v_isAdvectiveFluxBoundary_v = ((PyArrayObject *)values[151]);
    __pyx_v_isAdvectiveFluxBoundary_w = ((PyArrayObject *)values[152]);
    __pyx_v_isDiffusiveFluxBoundary_u = ((PyArrayObject *)values[153]);
    __pyx_v_isDiffusiveFluxBoundary_v = ((PyArrayObject *)values[154]);
    __pyx_v_isDiffusiveFluxBoundary_w = ((PyArrayObject *)values[155]);
    __pyx_v_ebqe_bc_p_ext = ((PyArrayObject *)values[156]);
    __pyx_v_ebqe_bc_flux_mass_ext = ((PyArrayObject *)values[157]);
    __pyx_v_ebqe_bc_flux_mom_u_adv_ext = ((PyArrayObject *)values[158]);
    __pyx_v_ebqe_bc_flux_mom_v_adv_ext = ((PyArrayObject *)values[159]);
    __pyx_v_ebqe_bc_flux_mom_w_adv_ext = ((PyArrayObject *)values[160]);
    __pyx_v_ebqe_bc_u_ext = ((PyArrayObject *)values[161]);
    __pyx_v_ebqe_bc_flux_u_diff_ext = ((PyArrayObject *)values[162]);
    __pyx_v_ebqe_penalty_ext = ((PyArrayObject *)values[163]);
    __pyx_v_ebqe_bc_v_ext = ((PyArrayObject *)values[164]);
    __pyx_v_ebqe_bc_flux_v_diff_ext = ((PyArrayObject *)values[165]);
    __pyx_v_ebqe_bc_w_ext = ((PyArrayObject *)values[166]);
    __pyx_v_ebqe_bc_flux_w_diff_ext = ((PyArrayObject *)values[167]);
    __pyx_v_q_x = ((PyArrayObject *)values[168]);
    __pyx_v_q_velocity = ((PyArrayObject *)values[169]);
    __pyx_v_ebqe_velocity = ((PyArrayObject *)values[170]);
    __pyx_v_q_grad_u = ((PyArrayObject *)values[171]);
    __pyx_v_q_grad_v = ((PyArrayObject *)values[172]);
    __pyx_v_q_grad_w = ((PyArrayObject *)values[173]);
    __pyx_v_q_divU = ((PyArrayObject *)values[174]);
    __pyx_v_ebqe_grad_u = ((PyArrayObject *)values[175]);
    __pyx_v_ebqe_grad_v = ((PyArrayObject *)values[176]);
    __pyx_v_ebqe_grad_w = ((PyArrayObject *)values[177]);
    __pyx_v_flux = ((PyArrayObject *)values[178]);
    __pyx_v_elementResidual_p = ((PyArrayObject *)values[179]);
    __pyx_v_elementFlags = ((PyArrayObject *)values[180]);
    __pyx_v_boundaryFlags = ((PyArrayObject *)values[181]);
    __pyx_v_barycenters = ((PyArrayObject *)values[182]);
    __pyx_v_wettedAreas = ((PyArrayObject *)values[183]);
    __pyx_v_netForces_p = ((PyArrayObject *)values[184]);
    __pyx_v_netForces_v = ((PyArrayObject *)values[185]);
    __pyx_v_netMoments = ((PyArrayObject *)values[186]);
    __pyx_v_q_rho = ((PyArrayObject *)values[187]);
    __pyx_v_ebqe_rho = ((PyArrayObject *)values[188]);
    __pyx_v_q_nu = ((PyArrayObject *)values[189]);
    __pyx_v_ebqe_nu = ((PyArrayObject *)values[190]);
    __pyx_v_nParticles = __Pyx_PyInt_As_int(values[191]); if (unlikely((__pyx_v_nParticles == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1121, __pyx_L3_error)
    __pyx_v_particle_epsFact = __pyx_PyFloat_AsDouble(values[192]); if (unlikely((__pyx_v_particle_epsFact == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1122, __pyx_L3_error)
    __pyx_v_particle_alpha = __pyx_PyFloat_AsDouble(values[193]); if (unlikely((__pyx_v_particle_alpha == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1123, __pyx_L3_error)
    __pyx_v_particle_beta = __pyx_PyFloat_AsDouble(values[194]); if (unlikely((__pyx_v_particle_beta == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1124, __pyx_L3_error)
    __pyx_v_particle_penalty_constant = __pyx_PyFloat_AsDouble(values[195]); if (unlikely((__pyx_v_particle_penalty_constant == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1125, __pyx_L3_error)
    __pyx_v_particle_signed_distances = ((PyArrayObject *)values[196]);
    __pyx_v_particle_signed_distance_normals = ((PyArrayObject *)values[197]);
    __pyx_v_particle_velocities = ((PyArrayObject *)values[198]);
    __pyx_v_particle_centroids = ((PyArrayObject *)values[199]);
    __pyx_v_particle_netForces = ((PyArrayObject *)values[200]);
    __pyx_v_particle_netMoments = ((PyArrayObject *)values[201]);
    __pyx_v_particle_surfaceArea = ((PyArrayObject *)values[202]);
    __pyx_v_particle_nitsche = __pyx_PyFloat_AsDouble(values[203]); if (unlikely((__pyx_v_particle_nitsche == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1133, __pyx_L3_error)
    __pyx_v_STABILIZATION_TYPE = __Pyx_PyInt_As_int(values[204]); if (unlikely((__pyx_v_STABILIZATION_TYPE == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1134, __pyx_L3_error)
    __pyx_v_areaRefElement = __pyx_PyFloat_AsDouble(values[205]); if (unlikely((__pyx_v_areaRefElement == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1135, __pyx_L3_error)
    __pyx_v_cMax = __pyx_PyFloat_AsDouble(values[206]); if (unlikely((__pyx_v_cMax == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1136, __pyx_L3_error)
    __pyx_v_cE = __pyx_PyFloat_AsDouble(values[207]); if (unlikely((__pyx_v_cE == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1137, __pyx_L3_error)
    __pyx_v_forcex = ((PyArrayObject *)values[208]);
    __pyx_v_forcey = ((PyArrayObject *)values[209]);
    __pyx_v_forcez = ((PyArrayObject *)values[210]);
    __pyx_v_KILL_PRESSURE_TERM = __Pyx_PyInt_As_int(values[211]); if (unlikely((__pyx_v_KILL_PRESSURE_TERM == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1141, __pyx_L3_error)
    __pyx_v_dt = __pyx_PyFloat_AsDouble(values[212]); if (unlikely((__pyx_v_dt == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1142, __pyx_L3_error)
    __pyx_v_entropyResidualAtCell = ((PyArrayObject *)values[213]);
    __pyx_v_maxSpeed2AtCell = ((PyArrayObject *)values[214]);
    __pyx_v_maxSpeed2AtOmega = __pyx_PyFloat_AsDouble(values[215]); if (unlikely((__pyx_v_maxSpeed2AtOmega == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1145, __pyx_L3_error)
    __pyx_v_rhoAtCell = ((PyArrayObject *)values[216]);
    __pyx_v_muAtCell = ((PyArrayObject *)values[217]);
    __pyx_v_quantDOFs = ((PyArrayObject *)values[218]);
    __pyx_v_numDOFsPerEqn = __Pyx_PyInt_As_int(values[219]); if (unlikely((__pyx_v_numDOFsPerEqn == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1149, __pyx_L3_error)
    __pyx_v_csrRowIndeces_DofLoops = ((PyArrayObject *)values[220]);
    __pyx_v_csrColumnOffsets_DofLoops = ((PyArrayObject *)values[221]);
    __pyx_v_ML = ((PyArrayObject *)values[222]);
    __pyx_v_Cx = ((PyArrayObject *)values[223]);
    __pyx_v_Cy = ((PyArrayObject *)values[224]);
    __pyx_v_Cz = ((PyArrayObject *)values[225]);
    __pyx_v_MATERIAL_PARAMETERS_AS_FUNCTION = __Pyx_PyInt_As_int(values[226]); if (unlikely((__pyx_v_MATERIAL_PARAMETERS_AS_FUNCTION == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1156, __pyx_L3_error)
    __pyx_v_density_as_function = ((PyArrayObject *)values[227]);
    __pyx_v_dynamic_viscosity_as_function = ((PyArrayObject *)values[228]);
    __pyx_v_ebqe_density_as_function = ((PyArrayObject *)values[229]);
    __pyx_v_ebqe_dynamic_viscosity_as_function = ((PyArrayObject *)values[230]);
    __pyx_v_order_polynomial = __pyx_PyFloat_AsDouble(values[231]); if (unlikely((__pyx_v_order_polynomial == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1161, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 946, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mprans.cRANS3PF.RANS3PF.calculateResidual", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "mesh_trial_ref", 0))) __PYX_ERR(0, 947, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_grad_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "mesh_grad_trial_ref", 0))) __PYX_ERR(0, 948, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_dof), __pyx_ptype_5numpy_ndarray, 1, "mesh_dof", 0))) __PYX_ERR(0, 949, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_velocity_dof), __pyx_ptype_5numpy_ndarray, 1, "mesh_velocity_dof", 0))) __PYX_ERR(0, 950, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_l2g), __pyx_ptype_5numpy_ndarray, 1, "mesh_l2g", 0))) __PYX_ERR(0, 953, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dV_ref), __pyx_ptype_5numpy_ndarray, 1, "dV_ref", 0))) __PYX_ERR(0, 954, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "p_trial_ref", 0))) __PYX_ERR(0, 955, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_grad_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "p_grad_trial_ref", 0))) __PYX_ERR(0, 956, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_test_ref), __pyx_ptype_5numpy_ndarray, 1, "p_test_ref", 0))) __PYX_ERR(0, 957, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_grad_test_ref), __pyx_ptype_5numpy_ndarray, 1, "p_grad_test_ref", 0))) __PYX_ERR(0, 958, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_p), __pyx_ptype_5numpy_ndarray, 1, "q_p", 0))) __PYX_ERR(0, 959, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_grad_p), __pyx_ptype_5numpy_ndarray, 1, "q_grad_p", 0))) __PYX_ERR(0, 960, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_p), __pyx_ptype_5numpy_ndarray, 1, "ebqe_p", 0))) __PYX_ERR(0, 961, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_grad_p), __pyx_ptype_5numpy_ndarray, 1, "ebqe_grad_p", 0))) __PYX_ERR(0, 962, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_trial_ref", 0))) __PYX_ERR(0, 963, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_grad_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_grad_trial_ref", 0))) __PYX_ERR(0, 964, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_hess_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_hess_trial_ref", 0))) __PYX_ERR(0, 965, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_test_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_test_ref", 0))) __PYX_ERR(0, 966, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_grad_test_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_grad_test_ref", 0))) __PYX_ERR(0, 967, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "mesh_trial_trace_ref", 0))) __PYX_ERR(0, 968, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_grad_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "mesh_grad_trial_trace_ref", 0))) __PYX_ERR(0, 969, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dS_ref), __pyx_ptype_5numpy_ndarray, 1, "dS_ref", 0))) __PYX_ERR(0, 970, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "p_trial_trace_ref", 0))) __PYX_ERR(0, 971, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_grad_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "p_grad_trial_trace_ref", 0))) __PYX_ERR(0, 972, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_test_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "p_test_trace_ref", 0))) __PYX_ERR(0, 973, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_grad_test_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "p_grad_test_trace_ref", 0))) __PYX_ERR(0, 974, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_trial_trace_ref", 0))) __PYX_ERR(0, 975, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_grad_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_grad_trial_trace_ref", 0))) __PYX_ERR(0, 976, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_test_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_test_trace_ref", 0))) __PYX_ERR(0, 977, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_grad_test_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_grad_test_trace_ref", 0))) __PYX_ERR(0, 978, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_normal_ref), __pyx_ptype_5numpy_ndarray, 1, "normal_ref", 0))) __PYX_ERR(0, 979, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_boundaryJac_ref), __pyx_ptype_5numpy_ndarray, 1, "boundaryJac_ref", 0))) __PYX_ERR(0, 980, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_elementDiameter), __pyx_ptype_5numpy_ndarray, 1, "elementDiameter", 0))) __PYX_ERR(0, 982, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_nodeDiametersArray), __pyx_ptype_5numpy_ndarray, 1, "nodeDiametersArray", 0))) __PYX_ERR(0, 983, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_eps_solid), __pyx_ptype_5numpy_ndarray, 1, "eps_solid", 0))) __PYX_ERR(0, 1005, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_phi_solid), __pyx_ptype_5numpy_ndarray, 1, "phi_solid", 0))) __PYX_ERR(0, 1006, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_velocity_solid), __pyx_ptype_5numpy_ndarray, 1, "q_velocity_solid", 0))) __PYX_ERR(0, 1007, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_vos), __pyx_ptype_5numpy_ndarray, 1, "q_vos", 0))) __PYX_ERR(0, 1008, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_dvos_dt), __pyx_ptype_5numpy_ndarray, 1, "q_dvos_dt", 0))) __PYX_ERR(0, 1009, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_dragAlpha), __pyx_ptype_5numpy_ndarray, 1, "q_dragAlpha", 0))) __PYX_ERR(0, 1010, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_dragBeta), __pyx_ptype_5numpy_ndarray, 1, "q_dragBeta", 0))) __PYX_ERR(0, 1011, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_mass_source), __pyx_ptype_5numpy_ndarray, 1, "q_mass_source", 0))) __PYX_ERR(0, 1012, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_turb_var_0), __pyx_ptype_5numpy_ndarray, 1, "q_turb_var_0", 0))) __PYX_ERR(0, 1013, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_turb_var_1), __pyx_ptype_5numpy_ndarray, 1, "q_turb_var_1", 0))) __PYX_ERR(0, 1014, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_turb_var_grad_0), __pyx_ptype_5numpy_ndarray, 1, "q_turb_var_grad_0", 0))) __PYX_ERR(0, 1015, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_eddy_viscosity), __pyx_ptype_5numpy_ndarray, 1, "q_eddy_viscosity", 0))) __PYX_ERR(0, 1016, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_l2g), __pyx_ptype_5numpy_ndarray, 1, "p_l2g", 0))) __PYX_ERR(0, 1018, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_l2g), __pyx_ptype_5numpy_ndarray, 1, "vel_l2g", 0))) __PYX_ERR(0, 1019, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_dof), __pyx_ptype_5numpy_ndarray, 1, "p_dof", 0))) __PYX_ERR(0, 1020, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_u_dof), __pyx_ptype_5numpy_ndarray, 1, "u_dof", 0))) __PYX_ERR(0, 1021, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_v_dof), __pyx_ptype_5numpy_ndarray, 1, "v_dof", 0))) __PYX_ERR(0, 1022, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_w_dof), __pyx_ptype_5numpy_ndarray, 1, "w_dof", 0))) __PYX_ERR(0, 1023, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_u_dof_old), __pyx_ptype_5numpy_ndarray, 1, "u_dof_old", 0))) __PYX_ERR(0, 1024, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_v_dof_old), __pyx_ptype_5numpy_ndarray, 1, "v_dof_old", 0))) __PYX_ERR(0, 1025, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_w_dof_old), __pyx_ptype_5numpy_ndarray, 1, "w_dof_old", 0))) __PYX_ERR(0, 1026, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_u_dof_old_old), __pyx_ptype_5numpy_ndarray, 1, "u_dof_old_old", 0))) __PYX_ERR(0, 1027, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_v_dof_old_old), __pyx_ptype_5numpy_ndarray, 1, "v_dof_old_old", 0))) __PYX_ERR(0, 1028, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_w_dof_old_old), __pyx_ptype_5numpy_ndarray, 1, "w_dof_old_old", 0))) __PYX_ERR(0, 1029, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_g), __pyx_ptype_5numpy_ndarray, 1, "g", 0))) __PYX_ERR(0, 1030, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vf), __pyx_ptype_5numpy_ndarray, 1, "vf", 0))) __PYX_ERR(0, 1032, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_phi), __pyx_ptype_5numpy_ndarray, 1, "phi", 0))) __PYX_ERR(0, 1033, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_normal_phi), __pyx_ptype_5numpy_ndarray, 1, "normal_phi", 0))) __PYX_ERR(0, 1034, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_kappa_phi), __pyx_ptype_5numpy_ndarray, 1, "kappa_phi", 0))) __PYX_ERR(0, 1035, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_mom_u_acc), __pyx_ptype_5numpy_ndarray, 1, "q_mom_u_acc", 0))) __PYX_ERR(0, 1036, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_mom_v_acc), __pyx_ptype_5numpy_ndarray, 1, "q_mom_v_acc", 0))) __PYX_ERR(0, 1037, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_mom_w_acc), __pyx_ptype_5numpy_ndarray, 1, "q_mom_w_acc", 0))) __PYX_ERR(0, 1038, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_mass_adv), __pyx_ptype_5numpy_ndarray, 1, "q_mass_adv", 0))) __PYX_ERR(0, 1039, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_mom_u_acc_beta_bdf), __pyx_ptype_5numpy_ndarray, 1, "q_mom_u_acc_beta_bdf", 0))) __PYX_ERR(0, 1040, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_mom_v_acc_beta_bdf), __pyx_ptype_5numpy_ndarray, 1, "q_mom_v_acc_beta_bdf", 0))) __PYX_ERR(0, 1040, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_mom_w_acc_beta_bdf), __pyx_ptype_5numpy_ndarray, 1, "q_mom_w_acc_beta_bdf", 0))) __PYX_ERR(0, 1040, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_dV), __pyx_ptype_5numpy_ndarray, 1, "q_dV", 0))) __PYX_ERR(0, 1041, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_dV_last), __pyx_ptype_5numpy_ndarray, 1, "q_dV_last", 0))) __PYX_ERR(0, 1042, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_velocity_sge), __pyx_ptype_5numpy_ndarray, 1, "q_velocity_sge", 0))) __PYX_ERR(0, 1043, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_velocity_star), __pyx_ptype_5numpy_ndarray, 1, "ebqe_velocity_star", 0))) __PYX_ERR(0, 1044, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_cfl), __pyx_ptype_5numpy_ndarray, 1, "q_cfl", 0))) __PYX_ERR(0, 1045, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_numDiff_u), __pyx_ptype_5numpy_ndarray, 1, "q_numDiff_u", 0))) __PYX_ERR(0, 1046, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_numDiff_v), __pyx_ptype_5numpy_ndarray, 1, "q_numDiff_v", 0))) __PYX_ERR(0, 1046, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_numDiff_w), __pyx_ptype_5numpy_ndarray, 1, "q_numDiff_w", 0))) __PYX_ERR(0, 1046, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_numDiff_u_last), __pyx_ptype_5numpy_ndarray, 1, "q_numDiff_u_last", 0))) __PYX_ERR(0, 1047, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_numDiff_v_last), __pyx_ptype_5numpy_ndarray, 1, "q_numDiff_v_last", 0))) __PYX_ERR(0, 1047, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_numDiff_w_last), __pyx_ptype_5numpy_ndarray, 1, "q_numDiff_w_last", 0))) __PYX_ERR(0, 1047, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_u_u_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_u_u_rowptr", 0))) __PYX_ERR(0, 1048, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_u_u_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_u_u_colind", 0))) __PYX_ERR(0, 1048, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_u_v_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_u_v_rowptr", 0))) __PYX_ERR(0, 1049, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_u_v_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_u_v_colind", 0))) __PYX_ERR(0, 1049, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_u_w_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_u_w_rowptr", 0))) __PYX_ERR(0, 1050, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_u_w_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_u_w_colind", 0))) __PYX_ERR(0, 1050, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_v_v_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_v_v_rowptr", 0))) __PYX_ERR(0, 1051, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_v_v_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_v_v_colind", 0))) __PYX_ERR(0, 1051, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_v_u_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_v_u_rowptr", 0))) __PYX_ERR(0, 1052, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_v_u_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_v_u_colind", 0))) __PYX_ERR(0, 1052, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_v_w_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_v_w_rowptr", 0))) __PYX_ERR(0, 1053, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_v_w_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_v_w_colind", 0))) __PYX_ERR(0, 1053, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_w_w_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_w_w_rowptr", 0))) __PYX_ERR(0, 1054, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_w_w_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_w_w_colind", 0))) __PYX_ERR(0, 1054, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_w_u_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_w_u_rowptr", 0))) __PYX_ERR(0, 1055, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_w_u_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_w_u_colind", 0))) __PYX_ERR(0, 1055, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_w_v_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_w_v_rowptr", 0))) __PYX_ERR(0, 1056, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_w_v_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_w_v_colind", 0))) __PYX_ERR(0, 1056, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_globalResidual), __pyx_ptype_5numpy_ndarray, 1, "globalResidual", 0))) __PYX_ERR(0, 1059, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_exteriorElementBoundariesArray), __pyx_ptype_5numpy_ndarray, 1, "exteriorElementBoundariesArray", 0))) __PYX_ERR(0, 1061, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_elementBoundaryElementsArray), __pyx_ptype_5numpy_ndarray, 1, "elementBoundaryElementsArray", 0))) __PYX_ERR(0, 1062, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_elementBoundaryLocalElementBoundariesArray), __pyx_ptype_5numpy_ndarray, 1, "elementBoundaryLocalElementBoundariesArray", 0))) __PYX_ERR(0, 1063, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_vf_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_vf_ext", 0))) __PYX_ERR(0, 1064, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_bc_ebqe_vf_ext), __pyx_ptype_5numpy_ndarray, 1, "bc_ebqe_vf_ext", 0))) __PYX_ERR(0, 1065, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_phi_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_phi_ext", 0))) __PYX_ERR(0, 1066, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_bc_ebqe_phi_ext), __pyx_ptype_5numpy_ndarray, 1, "bc_ebqe_phi_ext", 0))) __PYX_ERR(0, 1067, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_normal_phi_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_normal_phi_ext", 0))) __PYX_ERR(0, 1068, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_kappa_phi_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_kappa_phi_ext", 0))) __PYX_ERR(0, 1069, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_vos_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_vos_ext", 0))) __PYX_ERR(0, 1071, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_turb_var_0), __pyx_ptype_5numpy_ndarray, 1, "ebqe_turb_var_0", 0))) __PYX_ERR(0, 1072, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_turb_var_1), __pyx_ptype_5numpy_ndarray, 1, "ebqe_turb_var_1", 0))) __PYX_ERR(0, 1073, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isDOFBoundary_p), __pyx_ptype_5numpy_ndarray, 1, "isDOFBoundary_p", 0))) __PYX_ERR(0, 1075, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isDOFBoundary_u), __pyx_ptype_5numpy_ndarray, 1, "isDOFBoundary_u", 0))) __PYX_ERR(0, 1076, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isDOFBoundary_v), __pyx_ptype_5numpy_ndarray, 1, "isDOFBoundary_v", 0))) __PYX_ERR(0, 1077, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isDOFBoundary_w), __pyx_ptype_5numpy_ndarray, 1, "isDOFBoundary_w", 0))) __PYX_ERR(0, 1078, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isAdvectiveFluxBoundary_p), __pyx_ptype_5numpy_ndarray, 1, "isAdvectiveFluxBoundary_p", 0))) __PYX_ERR(0, 1079, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isAdvectiveFluxBoundary_u), __pyx_ptype_5numpy_ndarray, 1, "isAdvectiveFluxBoundary_u", 0))) __PYX_ERR(0, 1080, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isAdvectiveFluxBoundary_v), __pyx_ptype_5numpy_ndarray, 1, "isAdvectiveFluxBoundary_v", 0))) __PYX_ERR(0, 1081, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isAdvectiveFluxBoundary_w), __pyx_ptype_5numpy_ndarray, 1, "isAdvectiveFluxBoundary_w", 0))) __PYX_ERR(0, 1082, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isDiffusiveFluxBoundary_u), __pyx_ptype_5numpy_ndarray, 1, "isDiffusiveFluxBoundary_u", 0))) __PYX_ERR(0, 1083, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isDiffusiveFluxBoundary_v), __pyx_ptype_5numpy_ndarray, 1, "isDiffusiveFluxBoundary_v", 0))) __PYX_ERR(0, 1084, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isDiffusiveFluxBoundary_w), __pyx_ptype_5numpy_ndarray, 1, "isDiffusiveFluxBoundary_w", 0))) __PYX_ERR(0, 1085, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_p_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_p_ext", 0))) __PYX_ERR(0, 1086, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_flux_mass_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_flux_mass_ext", 0))) __PYX_ERR(0, 1087, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_flux_mom_u_adv_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_flux_mom_u_adv_ext", 0))) __PYX_ERR(0, 1088, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_flux_mom_v_adv_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_flux_mom_v_adv_ext", 0))) __PYX_ERR(0, 1089, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_flux_mom_w_adv_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_flux_mom_w_adv_ext", 0))) __PYX_ERR(0, 1090, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_u_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_u_ext", 0))) __PYX_ERR(0, 1091, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_flux_u_diff_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_flux_u_diff_ext", 0))) __PYX_ERR(0, 1092, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_penalty_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_penalty_ext", 0))) __PYX_ERR(0, 1093, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_v_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_v_ext", 0))) __PYX_ERR(0, 1094, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_flux_v_diff_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_flux_v_diff_ext", 0))) __PYX_ERR(0, 1095, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_w_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_w_ext", 0))) __PYX_ERR(0, 1096, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_flux_w_diff_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_flux_w_diff_ext", 0))) __PYX_ERR(0, 1097, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_x), __pyx_ptype_5numpy_ndarray, 1, "q_x", 0))) __PYX_ERR(0, 1098, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_velocity), __pyx_ptype_5numpy_ndarray, 1, "q_velocity", 0))) __PYX_ERR(0, 1099, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_velocity), __pyx_ptype_5numpy_ndarray, 1, "ebqe_velocity", 0))) __PYX_ERR(0, 1100, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_grad_u), __pyx_ptype_5numpy_ndarray, 1, "q_grad_u", 0))) __PYX_ERR(0, 1101, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_grad_v), __pyx_ptype_5numpy_ndarray, 1, "q_grad_v", 0))) __PYX_ERR(0, 1102, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_grad_w), __pyx_ptype_5numpy_ndarray, 1, "q_grad_w", 0))) __PYX_ERR(0, 1103, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_divU), __pyx_ptype_5numpy_ndarray, 1, "q_divU", 0))) __PYX_ERR(0, 1104, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_grad_u), __pyx_ptype_5numpy_ndarray, 1, "ebqe_grad_u", 0))) __PYX_ERR(0, 1105, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_grad_v), __pyx_ptype_5numpy_ndarray, 1, "ebqe_grad_v", 0))) __PYX_ERR(0, 1106, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_grad_w), __pyx_ptype_5numpy_ndarray, 1, "ebqe_grad_w", 0))) __PYX_ERR(0, 1107, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_flux), __pyx_ptype_5numpy_ndarray, 1, "flux", 0))) __PYX_ERR(0, 1108, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_elementResidual_p), __pyx_ptype_5numpy_ndarray, 1, "elementResidual_p", 0))) __PYX_ERR(0, 1109, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_elementFlags), __pyx_ptype_5numpy_ndarray, 1, "elementFlags", 0))) __PYX_ERR(0, 1110, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_boundaryFlags), __pyx_ptype_5numpy_ndarray, 1, "boundaryFlags", 0))) __PYX_ERR(0, 1111, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_barycenters), __pyx_ptype_5numpy_ndarray, 1, "barycenters", 0))) __PYX_ERR(0, 1112, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_wettedAreas), __pyx_ptype_5numpy_ndarray, 1, "wettedAreas", 0))) __PYX_ERR(0, 1113, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_netForces_p), __pyx_ptype_5numpy_ndarray, 1, "netForces_p", 0))) __PYX_ERR(0, 1114, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_netForces_v), __pyx_ptype_5numpy_ndarray, 1, "netForces_v", 0))) __PYX_ERR(0, 1115, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_netMoments), __pyx_ptype_5numpy_ndarray, 1, "netMoments", 0))) __PYX_ERR(0, 1116, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_rho), __pyx_ptype_5numpy_ndarray, 1, "q_rho", 0))) __PYX_ERR(0, 1117, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_rho), __pyx_ptype_5numpy_ndarray, 1, "ebqe_rho", 0))) __PYX_ERR(0, 1118, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_nu), __pyx_ptype_5numpy_ndarray, 1, "q_nu", 0))) __PYX_ERR(0, 1119, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_nu), __pyx_ptype_5numpy_ndarray, 1, "ebqe_nu", 0))) __PYX_ERR(0, 1120, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particle_signed_distances), __pyx_ptype_5numpy_ndarray, 1, "particle_signed_distances", 0))) __PYX_ERR(0, 1126, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particle_signed_distance_normals), __pyx_ptype_5numpy_ndarray, 1, "particle_signed_distance_normals", 0))) __PYX_ERR(0, 1127, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particle_velocities), __pyx_ptype_5numpy_ndarray, 1, "particle_velocities", 0))) __PYX_ERR(0, 1128, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particle_centroids), __pyx_ptype_5numpy_ndarray, 1, "particle_centroids", 0))) __PYX_ERR(0, 1129, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particle_netForces), __pyx_ptype_5numpy_ndarray, 1, "particle_netForces", 0))) __PYX_ERR(0, 1130, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particle_netMoments), __pyx_ptype_5numpy_ndarray, 1, "particle_netMoments", 0))) __PYX_ERR(0, 1131, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particle_surfaceArea), __pyx_ptype_5numpy_ndarray, 1, "particle_surfaceArea", 0))) __PYX_ERR(0, 1132, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_forcex), __pyx_ptype_5numpy_ndarray, 1, "forcex", 0))) __PYX_ERR(0, 1138, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_forcey), __pyx_ptype_5numpy_ndarray, 1, "forcey", 0))) __PYX_ERR(0, 1139, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_forcez), __pyx_ptype_5numpy_ndarray, 1, "forcez", 0))) __PYX_ERR(0, 1140, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_entropyResidualAtCell), __pyx_ptype_5numpy_ndarray, 1, "entropyResidualAtCell", 0))) __PYX_ERR(0, 1143, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_maxSpeed2AtCell), __pyx_ptype_5numpy_ndarray, 1, "maxSpeed2AtCell", 0))) __PYX_ERR(0, 1144, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rhoAtCell), __pyx_ptype_5numpy_ndarray, 1, "rhoAtCell", 0))) __PYX_ERR(0, 1146, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_muAtCell), __pyx_ptype_5numpy_ndarray, 1, "muAtCell", 0))) __PYX_ERR(0, 1147, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_quantDOFs), __pyx_ptype_5numpy_ndarray, 1, "quantDOFs", 0))) __PYX_ERR(0, 1148, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_DofLoops), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_DofLoops", 0))) __PYX_ERR(0, 1150, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_DofLoops), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_DofLoops", 0))) __PYX_ERR(0, 1151, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ML), __pyx_ptype_5numpy_ndarray, 1, "ML", 0))) __PYX_ERR(0, 1152, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_Cx), __pyx_ptype_5numpy_ndarray, 1, "Cx", 0))) __PYX_ERR(0, 1153, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_Cy), __pyx_ptype_5numpy_ndarray, 1, "Cy", 0))) __PYX_ERR(0, 1154, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_Cz), __pyx_ptype_5numpy_ndarray, 1, "Cz", 0))) __PYX_ERR(0, 1155, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_density_as_function), __pyx_ptype_5numpy_ndarray, 1, "density_as_function", 0))) __PYX_ERR(0, 1157, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dynamic_viscosity_as_function), __pyx_ptype_5numpy_ndarray, 1, "dynamic_viscosity_as_function", 0))) __PYX_ERR(0, 1158, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_density_as_function), __pyx_ptype_5numpy_ndarray, 1, "ebqe_density_as_function", 0))) __PYX_ERR(0, 1159, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_dynamic_viscosity_as_function), __pyx_ptype_5numpy_ndarray, 1, "ebqe_dynamic_viscosity_as_function", 0))) __PYX_ERR(0, 1160, __pyx_L1_error)
  __pyx_r = __pyx_pf_6mprans_8cRANS3PF_7RANS3PF_4calculateResidual(((struct __pyx_obj_6mprans_8cRANS3PF_RANS3PF *)__pyx_v_self), __pyx_v_mesh_trial_ref, __pyx_v_mesh_grad_trial_ref, __pyx_v_mesh_dof, __pyx_v_mesh_velocity_dof, __pyx_v_MOVING_DOMAIN, __pyx_v_PSTAB, __pyx_v_mesh_l2g, __pyx_v_dV_ref, __pyx_v_p_trial_ref, __pyx_v_p_grad_trial_ref, __pyx_v_p_test_ref, __pyx_v_p_grad_test_ref, __pyx_v_q_p, __pyx_v_q_grad_p, __pyx_v_ebqe_p, __pyx_v_ebqe_grad_p, __pyx_v_vel_trial_ref, __pyx_v_vel_grad_trial_ref, __pyx_v_vel_hess_trial_ref, __pyx_v_vel_test_ref, __pyx_v_vel_grad_test_ref, __pyx_v_mesh_trial_trace_ref, __pyx_v_mesh_grad_trial_trace_ref, __pyx_v_dS_ref, __pyx_v_p_trial_trace_ref, __pyx_v_p_grad_trial_trace_ref, __pyx_v_p_test_trace_ref, __pyx_v_p_grad_test_trace_ref, __pyx_v_vel_trial_trace_ref, __pyx_v_vel_grad_trial_trace_ref, __pyx_v_vel_test_trace_ref, __pyx_v_vel_grad_test_trace_ref, __pyx_v_normal_ref, __pyx_v_boundaryJac_ref, __pyx_v_eb_adjoint_sigma, __pyx_v_elementDiameter, __pyx_v_nodeDiametersArray, __pyx_v_hFactor, __pyx_v_nElements_global, __pyx_v_nElements_owned, __pyx_v_nElementBoundaries_owned, __pyx_v_useRBLES, __pyx_v_useMetrics, __pyx_v_alphaBDF, __pyx_v_epsFact_rho, __pyx_v_epsFact_mu, __pyx_v_sigma, __pyx_v_rho_0, __pyx_v_nu_0, __pyx_v_rho_1, __pyx_v_nu_1, __pyx_v_smagorinskyConstant, __pyx_v_turbulenceClosureModel, __pyx_v_Ct_sge, __pyx_v_Cd_sge, __pyx_v_C_dc, __pyx_v_C_b, __pyx_v_eps_solid, __pyx_v_phi_solid, __pyx_v_q_velocity_solid, __pyx_v_q_vos, __pyx_v_q_dvos_dt, __pyx_v_q_dragAlpha, __pyx_v_q_dragBeta, __pyx_v_q_mass_source, __pyx_v_q_turb_var_0, __pyx_v_q_turb_var_1, __pyx_v_q_turb_var_grad_0, __pyx_v_q_eddy_viscosity, __pyx_v_p_l2g, __pyx_v_vel_l2g, __pyx_v_p_dof, __pyx_v_u_dof, __pyx_v_v_dof, __pyx_v_w_dof, __pyx_v_u_dof_old, __pyx_v_v_dof_old, __pyx_v_w_dof_old, __pyx_v_u_dof_old_old, __pyx_v_v_dof_old_old, __pyx_v_w_dof_old_old, __pyx_v_g, __pyx_v_useVF, __pyx_v_vf, __pyx_v_phi, __pyx_v_normal_phi, __pyx_v_kappa_phi, __pyx_v_q_mom_u_acc, __pyx_v_q_mom_v_acc, __pyx_v_q_mom_w_acc, __pyx_v_q_mass_adv, __pyx_v_q_mom_u_acc_beta_bdf, __pyx_v_q_mom_v_acc_beta_bdf, __pyx_v_q_mom_w_acc_beta_bdf, __pyx_v_q_dV, __pyx_v_q_dV_last, __pyx_v_q_velocity_sge, __pyx_v_ebqe_velocity_star, __pyx_v_q_cfl, __pyx_v_q_numDiff_u, __pyx_v_q_numDiff_v, __pyx_v_q_numDiff_w, __pyx_v_q_numDiff_u_last, __pyx_v_q_numDiff_v_last, __pyx_v_q_numDiff_w_last, __pyx_v_sdInfo_u_u_rowptr, __pyx_v_sdInfo_u_u_colind, __pyx_v_sdInfo_u_v_rowptr, __pyx_v_sdInfo_u_v_colind, __pyx_v_sdInfo_u_w_rowptr, __pyx_v_sdInfo_u_w_colind, __pyx_v_sdInfo_v_v_rowptr, __pyx_v_sdInfo_v_v_colind, __pyx_v_sdInfo_v_u_rowptr, __pyx_v_sdInfo_v_u_colind, __pyx_v_sdInfo_v_w_rowptr, __pyx_v_sdInfo_v_w_colind, __pyx_v_sdInfo_w_w_rowptr, __pyx_v_sdInfo_w_w_colind, __pyx_v_sdInfo_w_u_rowptr, __pyx_v_sdInfo_w_u_colind, __pyx_v_sdInfo_w_v_rowptr, __pyx_v_sdInfo_w_v_colind, __pyx_v_offset_p, __pyx_v_offset_u, __pyx_v_offset_v, __pyx_v_offset_w, __pyx_v_stride_p, __pyx_v_stride_u, __pyx_v_stride_v, __pyx_v_stride_w, __pyx_v_globalResidual, __pyx_v_nExteriorElementBoundaries_global, __pyx_v_exteriorElementBoundariesArray, __pyx_v_elementBoundaryElementsArray, __pyx_v_elementBoundaryLocalElementBoundariesArray, __pyx_v_ebqe_vf_ext, __pyx_v_bc_ebqe_vf_ext, __pyx_v_ebqe_phi_ext, __pyx_v_bc_ebqe_phi_ext, __pyx_v_ebqe_normal_phi_ext, __pyx_v_ebqe_kappa_phi_ext, __pyx_v_ebqe_vos_ext, __pyx_v_ebqe_turb_var_0, __pyx_v_ebqe_turb_var_1, __pyx_v_isDOFBoundary_p, __pyx_v_isDOFBoundary_u, __pyx_v_isDOFBoundary_v, __pyx_v_isDOFBoundary_w, __pyx_v_isAdvectiveFluxBoundary_p, __pyx_v_isAdvectiveFluxBoundary_u, __pyx_v_isAdvectiveFluxBoundary_v, __pyx_v_isAdvectiveFluxBoundary_w, __pyx_v_isDiffusiveFluxBoundary_u, __pyx_v_isDiffusiveFluxBoundary_v, __pyx_v_isDiffusiveFluxBoundary_w, __pyx_v_ebqe_bc_p_ext, __pyx_v_ebqe_bc_flux_mass_ext, __pyx_v_ebqe_bc_flux_mom_u_adv_ext, __pyx_v_ebqe_bc_flux_mom_v_adv_ext, __pyx_v_ebqe_bc_flux_mom_w_adv_ext, __pyx_v_ebqe_bc_u_ext, __pyx_v_ebqe_bc_flux_u_diff_ext, __pyx_v_ebqe_penalty_ext, __pyx_v_ebqe_bc_v_ext, __pyx_v_ebqe_bc_flux_v_diff_ext, __pyx_v_ebqe_bc_w_ext, __pyx_v_ebqe_bc_flux_w_diff_ext, __pyx_v_q_x, __pyx_v_q_velocity, __pyx_v_ebqe_velocity, __pyx_v_q_grad_u, __pyx_v_q_grad_v, __pyx_v_q_grad_w, __pyx_v_q_divU, __pyx_v_ebqe_grad_u, __pyx_v_ebqe_grad_v, __pyx_v_ebqe_grad_w, __pyx_v_flux, __pyx_v_elementResidual_p, __pyx_v_elementFlags, __pyx_v_boundaryFlags, __pyx_v_barycenters, __pyx_v_wettedAreas, __pyx_v_netForces_p, __pyx_v_netForces_v, __pyx_v_netMoments, __pyx_v_q_rho, __pyx_v_ebqe_rho, __pyx_v_q_nu, __pyx_v_ebqe_nu, __pyx_v_nParticles, __pyx_v_particle_epsFact, __pyx_v_particle_alpha, __pyx_v_particle_beta, __pyx_v_particle_penalty_constant, __pyx_v_particle_signed_distances, __pyx_v_particle_signed_distance_normals, __pyx_v_particle_velocities, __pyx_v_particle_centroids, __pyx_v_particle_netForces, __pyx_v_particle_netMoments, __pyx_v_particle_surfaceArea, __pyx_v_particle_nitsche, __pyx_v_STABILIZATION_TYPE, __pyx_v_areaRefElement, __pyx_v_cMax, __pyx_v_cE, __pyx_v_forcex, __pyx_v_forcey, __pyx_v_forcez, __pyx_v_KILL_PRESSURE_TERM, __pyx_v_dt, __pyx_v_entropyResidualAtCell, __pyx_v_maxSpeed2AtCell, __pyx_v_maxSpeed2AtOmega, __pyx_v_rhoAtCell, __pyx_v_muAtCell, __pyx_v_quantDOFs, __pyx_v_numDOFsPerEqn, __pyx_v_csrRowIndeces_DofLoops, __pyx_v_csrColumnOffsets_DofLoops, __pyx_v_ML, __pyx_v_Cx, __pyx_v_Cy, __pyx_v_Cz, __pyx_v_MATERIAL_PARAMETERS_AS_FUNCTION, __pyx_v_density_as_function, __pyx_v_dynamic_viscosity_as_function, __pyx_v_ebqe_density_as_function, __pyx_v_ebqe_dynamic_viscosity_as_function, __pyx_v_order_polynomial);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6mprans_8cRANS3PF_7RANS3PF_4calculateResidual(struct __pyx_obj_6mprans_8cRANS3PF_RANS3PF *__pyx_v_self, PyArrayObject *__pyx_v_mesh_trial_ref, PyArrayObject *__pyx_v_mesh_grad_trial_ref, PyArrayObject *__pyx_v_mesh_dof, PyArrayObject *__pyx_v_mesh_velocity_dof, double __pyx_v_MOVING_DOMAIN, double __pyx_v_PSTAB, PyArrayObject *__pyx_v_mesh_l2g, PyArrayObject *__pyx_v_dV_ref, PyArrayObject *__pyx_v_p_trial_ref, PyArrayObject *__pyx_v_p_grad_trial_ref, PyArrayObject *__pyx_v_p_test_ref, PyArrayObject *__pyx_v_p_grad_test_ref, PyArrayObject *__pyx_v_q_p, PyArrayObject *__pyx_v_q_grad_p, PyArrayObject *__pyx_v_ebqe_p, PyArrayObject *__pyx_v_ebqe_grad_p, PyArrayObject *__pyx_v_vel_trial_ref, PyArrayObject *__pyx_v_vel_grad_trial_ref, PyArrayObject *__pyx_v_vel_hess_trial_ref, PyArrayObject *__pyx_v_vel_test_ref, PyArrayObject *__pyx_v_vel_grad_test_ref, PyArrayObject *__pyx_v_mesh_trial_trace_ref, PyArrayObject *__pyx_v_mesh_grad_trial_trace_ref, PyArrayObject *__pyx_v_dS_ref, PyArrayObject *__pyx_v_p_trial_trace_ref, PyArrayObject *__pyx_v_p_grad_trial_trace_ref, PyArrayObject *__pyx_v_p_test_trace_ref, PyArrayObject *__pyx_v_p_grad_test_trace_ref, PyArrayObject *__pyx_v_vel_trial_trace_ref, PyArrayObject *__pyx_v_vel_grad_trial_trace_ref, PyArrayObject *__pyx_v_vel_test_trace_ref, PyArrayObject *__pyx_v_vel_grad_test_trace_ref, PyArrayObject *__pyx_v_normal_ref, PyArrayObject *__pyx_v_boundaryJac_ref, double __pyx_v_eb_adjoint_sigma, PyArrayObject *__pyx_v_elementDiameter, PyArrayObject *__pyx_v_nodeDiametersArray, double __pyx_v_hFactor, int __pyx_v_nElements_global, int __pyx_v_nElements_owned, int __pyx_v_nElementBoundaries_owned, double __pyx_v_useRBLES, double __pyx_v_useMetrics, double __pyx_v_alphaBDF, double __pyx_v_epsFact_rho, double __pyx_v_epsFact_mu, double __pyx_v_sigma, double __pyx_v_rho_0, double __pyx_v_nu_0, double __pyx_v_rho_1, double __pyx_v_nu_1, double __pyx_v_smagorinskyConstant, int __pyx_v_turbulenceClosureModel, double __pyx_v_Ct_sge, double __pyx_v_Cd_sge, double __pyx_v_C_dc, double __pyx_v_C_b, PyArrayObject *__pyx_v_eps_solid, PyArrayObject *__pyx_v_phi_solid, PyArrayObject *__pyx_v_q_velocity_solid, PyArrayObject *__pyx_v_q_vos, PyArrayObject *__pyx_v_q_dvos_dt, PyArrayObject *__pyx_v_q_dragAlpha, PyArrayObject *__pyx_v_q_dragBeta, PyArrayObject *__pyx_v_q_mass_source, PyArrayObject *__pyx_v_q_turb_var_0, PyArrayObject *__pyx_v_q_turb_var_1, PyArrayObject *__pyx_v_q_turb_var_grad_0, PyArrayObject *__pyx_v_q_eddy_viscosity, PyArrayObject *__pyx_v_p_l2g, PyArrayObject *__pyx_v_vel_l2g, PyArrayObject *__pyx_v_p_dof, PyArrayObject *__pyx_v_u_dof, PyArrayObject *__pyx_v_v_dof, PyArrayObject *__pyx_v_w_dof, PyArrayObject *__pyx_v_u_dof_old, PyArrayObject *__pyx_v_v_dof_old, PyArrayObject *__pyx_v_w_dof_old, PyArrayObject *__pyx_v_u_dof_old_old, PyArrayObject *__pyx_v_v_dof_old_old, PyArrayObject *__pyx_v_w_dof_old_old, PyArrayObject *__pyx_v_g, double __pyx_v_useVF, PyArrayObject *__pyx_v_vf, PyArrayObject *__pyx_v_phi, PyArrayObject *__pyx_v_normal_phi, PyArrayObject *__pyx_v_kappa_phi, PyArrayObject *__pyx_v_q_mom_u_acc, PyArrayObject *__pyx_v_q_mom_v_acc, PyArrayObject *__pyx_v_q_mom_w_acc, PyArrayObject *__pyx_v_q_mass_adv, PyArrayObject *__pyx_v_q_mom_u_acc_beta_bdf, PyArrayObject *__pyx_v_q_mom_v_acc_beta_bdf, PyArrayObject *__pyx_v_q_mom_w_acc_beta_bdf, PyArrayObject *__pyx_v_q_dV, PyArrayObject *__pyx_v_q_dV_last, PyArrayObject *__pyx_v_q_velocity_sge, PyArrayObject *__pyx_v_ebqe_velocity_star, PyArrayObject *__pyx_v_q_cfl, PyArrayObject *__pyx_v_q_numDiff_u, PyArrayObject *__pyx_v_q_numDiff_v, PyArrayObject *__pyx_v_q_numDiff_w, PyArrayObject *__pyx_v_q_numDiff_u_last, PyArrayObject *__pyx_v_q_numDiff_v_last, PyArrayObject *__pyx_v_q_numDiff_w_last, PyArrayObject *__pyx_v_sdInfo_u_u_rowptr, PyArrayObject *__pyx_v_sdInfo_u_u_colind, PyArrayObject *__pyx_v_sdInfo_u_v_rowptr, PyArrayObject *__pyx_v_sdInfo_u_v_colind, PyArrayObject *__pyx_v_sdInfo_u_w_rowptr, PyArrayObject *__pyx_v_sdInfo_u_w_colind, PyArrayObject *__pyx_v_sdInfo_v_v_rowptr, PyArrayObject *__pyx_v_sdInfo_v_v_colind, PyArrayObject *__pyx_v_sdInfo_v_u_rowptr, PyArrayObject *__pyx_v_sdInfo_v_u_colind, PyArrayObject *__pyx_v_sdInfo_v_w_rowptr, PyArrayObject *__pyx_v_sdInfo_v_w_colind, PyArrayObject *__pyx_v_sdInfo_w_w_rowptr, PyArrayObject *__pyx_v_sdInfo_w_w_colind, PyArrayObject *__pyx_v_sdInfo_w_u_rowptr, PyArrayObject *__pyx_v_sdInfo_w_u_colind, PyArrayObject *__pyx_v_sdInfo_w_v_rowptr, PyArrayObject *__pyx_v_sdInfo_w_v_colind, int __pyx_v_offset_p, int __pyx_v_offset_u, int __pyx_v_offset_v, int __pyx_v_offset_w, int __pyx_v_stride_p, int __pyx_v_stride_u, int __pyx_v_stride_v, int __pyx_v_stride_w, PyArrayObject *__pyx_v_globalResidual, int __pyx_v_nExteriorElementBoundaries_global, PyArrayObject *__pyx_v_exteriorElementBoundariesArray, PyArrayObject *__pyx_v_elementBoundaryElementsArray, PyArrayObject *__pyx_v_elementBoundaryLocalElementBoundariesArray, PyArrayObject *__pyx_v_ebqe_vf_ext, PyArrayObject *__pyx_v_bc_ebqe_vf_ext, PyArrayObject *__pyx_v_ebqe_phi_ext, PyArrayObject *__pyx_v_bc_ebqe_phi_ext, PyArrayObject *__pyx_v_ebqe_normal_phi_ext, PyArrayObject *__pyx_v_ebqe_kappa_phi_ext, PyArrayObject *__pyx_v_ebqe_vos_ext, PyArrayObject *__pyx_v_ebqe_turb_var_0, PyArrayObject *__pyx_v_ebqe_turb_var_1, PyArrayObject *__pyx_v_isDOFBoundary_p, PyArrayObject *__pyx_v_isDOFBoundary_u, PyArrayObject *__pyx_v_isDOFBoundary_v, PyArrayObject *__pyx_v_isDOFBoundary_w, PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_p, PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_u, PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_v, PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_w, PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_u, PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_v, PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_w, PyArrayObject *__pyx_v_ebqe_bc_p_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_mass_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_mom_u_adv_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_mom_v_adv_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_mom_w_adv_ext, PyArrayObject *__pyx_v_ebqe_bc_u_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_u_diff_ext, PyArrayObject *__pyx_v_ebqe_penalty_ext, PyArrayObject *__pyx_v_ebqe_bc_v_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_v_diff_ext, PyArrayObject *__pyx_v_ebqe_bc_w_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_w_diff_ext, PyArrayObject *__pyx_v_q_x, PyArrayObject *__pyx_v_q_velocity, PyArrayObject *__pyx_v_ebqe_velocity, PyArrayObject *__pyx_v_q_grad_u, PyArrayObject *__pyx_v_q_grad_v, PyArrayObject *__pyx_v_q_grad_w, PyArrayObject *__pyx_v_q_divU, PyArrayObject *__pyx_v_ebqe_grad_u, PyArrayObject *__pyx_v_ebqe_grad_v, PyArrayObject *__pyx_v_ebqe_grad_w, PyArrayObject *__pyx_v_flux, PyArrayObject *__pyx_v_elementResidual_p, PyArrayObject *__pyx_v_elementFlags, PyArrayObject *__pyx_v_boundaryFlags, PyArrayObject *__pyx_v_barycenters, PyArrayObject *__pyx_v_wettedAreas, PyArrayObject *__pyx_v_netForces_p, PyArrayObject *__pyx_v_netForces_v, PyArrayObject *__pyx_v_netMoments, PyArrayObject *__pyx_v_q_rho, PyArrayObject *__pyx_v_ebqe_rho, PyArrayObject *__pyx_v_q_nu, PyArrayObject *__pyx_v_ebqe_nu, int __pyx_v_nParticles, double __pyx_v_particle_epsFact, double __pyx_v_particle_alpha, double __pyx_v_particle_beta, double __pyx_v_particle_penalty_constant, PyArrayObject *__pyx_v_particle_signed_distances, PyArrayObject *__pyx_v_particle_signed_distance_normals, PyArrayObject *__pyx_v_particle_velocities, PyArrayObject *__pyx_v_particle_centroids, PyArrayObject *__pyx_v_particle_netForces, PyArrayObject *__pyx_v_particle_netMoments, PyArrayObject *__pyx_v_particle_surfaceArea, double __pyx_v_particle_nitsche, int __pyx_v_STABILIZATION_TYPE, double __pyx_v_areaRefElement, double __pyx_v_cMax, double __pyx_v_cE, PyArrayObject *__pyx_v_forcex, PyArrayObject *__pyx_v_forcey, PyArrayObject *__pyx_v_forcez, int __pyx_v_KILL_PRESSURE_TERM, double __pyx_v_dt, PyArrayObject *__pyx_v_entropyResidualAtCell, PyArrayObject *__pyx_v_maxSpeed2AtCell, double __pyx_v_maxSpeed2AtOmega, PyArrayObject *__pyx_v_rhoAtCell, PyArrayObject *__pyx_v_muAtCell, PyArrayObject *__pyx_v_quantDOFs, int __pyx_v_numDOFsPerEqn, PyArrayObject *__pyx_v_csrRowIndeces_DofLoops, PyArrayObject *__pyx_v_csrColumnOffsets_DofLoops, PyArrayObject *__pyx_v_ML, PyArrayObject *__pyx_v_Cx, PyArrayObject *__pyx_v_Cy, PyArrayObject *__pyx_v_Cz, int __pyx_v_MATERIAL_PARAMETERS_AS_FUNCTION, PyArrayObject *__pyx_v_density_as_function, PyArrayObject *__pyx_v_dynamic_viscosity_as_function, PyArrayObject *__pyx_v_ebqe_density_as_function, PyArrayObject *__pyx_v_ebqe_dynamic_viscosity_as_function, double __pyx_v_order_polynomial) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calculateResidual", 0);

  /* "mprans/cRANS3PF.pyx":1162
 *                           numpy.ndarray ebqe_dynamic_viscosity_as_function,
 *                           double order_polynomial):
 *         self.thisptr.calculateResidual(< double *> mesh_trial_ref.data,             # <<<<<<<<<<<<<<
 *                                        < double * > mesh_grad_trial_ref.data,
 *                                        < double * > mesh_dof.data,
 */
  __pyx_v_self->thisptr->calculateResidual(((double *)__pyx_v_mesh_trial_ref->data), ((double *)__pyx_v_mesh_grad_trial_ref->data), ((double *)__pyx_v_mesh_dof->data), ((double *)__pyx_v_mesh_velocity_dof->data), __pyx_v_MOVING_DOMAIN, __pyx_v_PSTAB, ((int *)__pyx_v_mesh_l2g->data), ((double *)__pyx_v_dV_ref->data), ((double *)__pyx_v_p_trial_ref->data), ((double *)__pyx_v_p_grad_trial_ref->data), ((double *)__pyx_v_p_test_ref->data), ((double *)__pyx_v_p_grad_test_ref->data), ((double *)__pyx_v_q_p->data), ((double *)__pyx_v_q_grad_p->data), ((double *)__pyx_v_ebqe_p->data), ((double *)__pyx_v_ebqe_grad_p->data), ((double *)__pyx_v_vel_trial_ref->data), ((double *)__pyx_v_vel_grad_trial_ref->data), ((double *)__pyx_v_vel_hess_trial_ref->data), ((double *)__pyx_v_vel_test_ref->data), ((double *)__pyx_v_vel_grad_test_ref->data), ((double *)__pyx_v_mesh_trial_trace_ref->data), ((double *)__pyx_v_mesh_grad_trial_trace_ref->data), ((double *)__pyx_v_dS_ref->data), ((double *)__pyx_v_p_trial_trace_ref->data), ((double *)__pyx_v_p_grad_trial_trace_ref->data), ((double *)__pyx_v_p_test_trace_ref->data), ((double *)__pyx_v_p_grad_test_trace_ref->data), ((double *)__pyx_v_vel_trial_trace_ref->data), ((double *)__pyx_v_vel_grad_trial_trace_ref->data), ((double *)__pyx_v_vel_test_trace_ref->data), ((double *)__pyx_v_vel_grad_test_trace_ref->data), ((double *)__pyx_v_normal_ref->data), ((double *)__pyx_v_boundaryJac_ref->data), __pyx_v_eb_adjoint_sigma, ((double *)__pyx_v_elementDiameter->data), ((double *)__pyx_v_nodeDiametersArray->data), __pyx_v_hFactor, __pyx_v_nElements_global, __pyx_v_nElements_owned, __pyx_v_nElementBoundaries_owned, __pyx_v_useRBLES, __pyx_v_useMetrics, __pyx_v_alphaBDF, __pyx_v_epsFact_rho, __pyx_v_epsFact_mu, __pyx_v_sigma, __pyx_v_rho_0, __pyx_v_nu_0, __pyx_v_rho_1, __pyx_v_nu_1, __pyx_v_smagorinskyConstant, __pyx_v_turbulenceClosureModel, __pyx_v_Ct_sge, __pyx_v_Cd_sge, __pyx_v_C_dc, __pyx_v_C_b, ((double *)__pyx_v_eps_solid->data), ((double *)__pyx_v_phi_solid->data), ((double *)__pyx_v_q_velocity_solid->data), ((double *)__pyx_v_q_vos->data), ((double *)__pyx_v_q_dvos_dt->data), ((double *)__pyx_v_q_dragAlpha->data), ((double *)__pyx_v_q_dragBeta->data), ((double *)__pyx_v_q_mass_source->data), ((double *)__pyx_v_q_turb_var_0->data), ((double *)__pyx_v_q_turb_var_1->data), ((double *)__pyx_v_q_turb_var_grad_0->data), ((double *)__pyx_v_q_eddy_viscosity->data), ((int *)__pyx_v_p_l2g->data), ((int *)__pyx_v_vel_l2g->data), ((double *)__pyx_v_p_dof->data), ((double *)__pyx_v_u_dof->data), ((double *)__pyx_v_v_dof->data), ((double *)__pyx_v_w_dof->data), ((double *)__pyx_v_u_dof_old->data), ((double *)__pyx_v_v_dof_old->data), ((double *)__pyx_v_w_dof_old->data), ((double *)__pyx_v_u_dof_old_old->data), ((double *)__pyx_v_v_dof_old_old->data), ((double *)__pyx_v_w_dof_old_old->data), ((double *)__pyx_v_g->data), __pyx_v_useVF, ((double *)__pyx_v_vf->data), ((double *)__pyx_v_phi->data), ((double *)__pyx_v_normal_phi->data), ((double *)__pyx_v_kappa_phi->data), ((double *)__pyx_v_q_mom_u_acc->data), ((double *)__pyx_v_q_mom_v_acc->data), ((double *)__pyx_v_q_mom_w_acc->data), ((double *)__pyx_v_q_mass_adv->data), ((double *)__pyx_v_q_mom_u_acc_beta_bdf->data), ((double *)__pyx_v_q_mom_v_acc_beta_bdf->data), ((double *)__pyx_v_q_mom_w_acc_beta_bdf->data), ((double *)__pyx_v_q_dV->data), ((double *)__pyx_v_q_dV_last->data), ((double *)__pyx_v_q_velocity_sge->data), ((double *)__pyx_v_ebqe_velocity_star->data), ((double *)__pyx_v_q_cfl->data), ((double *)__pyx_v_q_numDiff_u->data), ((double *)__pyx_v_q_numDiff_v->data), ((double *)__pyx_v_q_numDiff_w->data), ((double *)__pyx_v_q_numDiff_u_last->data), ((double *)__pyx_v_q_numDiff_v_last->data), ((double *)__pyx_v_q_numDiff_w_last->data), ((int *)__pyx_v_sdInfo_u_u_rowptr->data), ((int *)__pyx_v_sdInfo_u_u_colind->data), ((int *)__pyx_v_sdInfo_u_v_rowptr->data), ((int *)__pyx_v_sdInfo_u_v_colind->data), ((int *)__pyx_v_sdInfo_u_w_rowptr->data), ((int *)__pyx_v_sdInfo_u_w_colind->data), ((int *)__pyx_v_sdInfo_v_v_rowptr->data), ((int *)__pyx_v_sdInfo_v_v_colind->data), ((int *)__pyx_v_sdInfo_v_u_rowptr->data), ((int *)__pyx_v_sdInfo_v_u_colind->data), ((int *)__pyx_v_sdInfo_v_w_rowptr->data), ((int *)__pyx_v_sdInfo_v_w_colind->data), ((int *)__pyx_v_sdInfo_w_w_rowptr->data), ((int *)__pyx_v_sdInfo_w_w_colind->data), ((int *)__pyx_v_sdInfo_w_u_rowptr->data), ((int *)__pyx_v_sdInfo_w_u_colind->data), ((int *)__pyx_v_sdInfo_w_v_rowptr->data), ((int *)__pyx_v_sdInfo_w_v_colind->data), __pyx_v_offset_p, __pyx_v_offset_u, __pyx_v_offset_v, __pyx_v_offset_w, __pyx_v_stride_p, __pyx_v_stride_u, __pyx_v_stride_v, __pyx_v_stride_w, ((double *)__pyx_v_globalResidual->data), __pyx_v_nExteriorElementBoundaries_global, ((int *)__pyx_v_exteriorElementBoundariesArray->data), ((int *)__pyx_v_elementBoundaryElementsArray->data), ((int *)__pyx_v_elementBoundaryLocalElementBoundariesArray->data), ((double *)__pyx_v_ebqe_vf_ext->data), ((double *)__pyx_v_bc_ebqe_vf_ext->data), ((double *)__pyx_v_ebqe_phi_ext->data), ((double *)__pyx_v_bc_ebqe_phi_ext->data), ((double *)__pyx_v_ebqe_normal_phi_ext->data), ((double *)__pyx_v_ebqe_kappa_phi_ext->data), ((double *)__pyx_v_ebqe_vos_ext->data), ((double *)__pyx_v_ebqe_turb_var_0->data), ((double *)__pyx_v_ebqe_turb_var_1->data), ((int *)__pyx_v_isDOFBoundary_p->data), ((int *)__pyx_v_isDOFBoundary_u->data), ((int *)__pyx_v_isDOFBoundary_v->data), ((int *)__pyx_v_isDOFBoundary_w->data), ((int *)__pyx_v_isAdvectiveFluxBoundary_p->data), ((int *)__pyx_v_isAdvectiveFluxBoundary_u->data), ((int *)__pyx_v_isAdvectiveFluxBoundary_v->data), ((int *)__pyx_v_isAdvectiveFluxBoundary_w->data), ((int *)__pyx_v_isDiffusiveFluxBoundary_u->data), ((int *)__pyx_v_isDiffusiveFluxBoundary_v->data), ((int *)__pyx_v_isDiffusiveFluxBoundary_w->data), ((double *)__pyx_v_ebqe_bc_p_ext->data), ((double *)__pyx_v_ebqe_bc_flux_mass_ext->data), ((double *)__pyx_v_ebqe_bc_flux_mom_u_adv_ext->data), ((double *)__pyx_v_ebqe_bc_flux_mom_v_adv_ext->data), ((double *)__pyx_v_ebqe_bc_flux_mom_w_adv_ext->data), ((double *)__pyx_v_ebqe_bc_u_ext->data), ((double *)__pyx_v_ebqe_bc_flux_u_diff_ext->data), ((double *)__pyx_v_ebqe_penalty_ext->data), ((double *)__pyx_v_ebqe_bc_v_ext->data), ((double *)__pyx_v_ebqe_bc_flux_v_diff_ext->data), ((double *)__pyx_v_ebqe_bc_w_ext->data), ((double *)__pyx_v_ebqe_bc_flux_w_diff_ext->data), ((double *)__pyx_v_q_x->data), ((double *)__pyx_v_q_velocity->data), ((double *)__pyx_v_ebqe_velocity->data), ((double *)__pyx_v_q_grad_u->data), ((double *)__pyx_v_q_grad_v->data), ((double *)__pyx_v_q_grad_w->data), ((double *)__pyx_v_q_divU->data), ((double *)__pyx_v_ebqe_grad_u->data), ((double *)__pyx_v_ebqe_grad_v->data), ((double *)__pyx_v_ebqe_grad_w->data), ((double *)__pyx_v_flux->data), ((double *)__pyx_v_elementResidual_p->data), ((int *)__pyx_v_elementFlags->data), ((int *)__pyx_v_boundaryFlags->data), ((double *)__pyx_v_barycenters->data), ((double *)__pyx_v_wettedAreas->data), ((double *)__pyx_v_netForces_p->data), ((double *)__pyx_v_netForces_v->data), ((double *)__pyx_v_netMoments->data), ((double *)__pyx_v_q_rho->data), ((double *)__pyx_v_ebqe_rho->data), ((double *)__pyx_v_q_nu->data), ((double *)__pyx_v_ebqe_nu->data), __pyx_v_nParticles, __pyx_v_particle_epsFact, __pyx_v_particle_alpha, __pyx_v_particle_beta, __pyx_v_particle_penalty_constant, ((double *)__pyx_v_particle_signed_distances->data), ((double *)__pyx_v_particle_signed_distance_normals->data), ((double *)__pyx_v_particle_velocities->data), ((double *)__pyx_v_particle_centroids->data), ((double *)__pyx_v_particle_netForces->data), ((double *)__pyx_v_particle_netMoments->data), ((double *)__pyx_v_particle_surfaceArea->data), __pyx_v_particle_nitsche, __pyx_v_STABILIZATION_TYPE, __pyx_v_areaRefElement, __pyx_v_cMax, __pyx_v_cE, ((double *)__pyx_v_forcex->data), ((double *)__pyx_v_forcey->data), ((double *)__pyx_v_forcez->data), __pyx_v_KILL_PRESSURE_TERM, __pyx_v_dt, ((double *)__pyx_v_entropyResidualAtCell->data), ((double *)__pyx_v_maxSpeed2AtCell->data), __pyx_v_maxSpeed2AtOmega, ((double *)__pyx_v_rhoAtCell->data), ((double *)__pyx_v_muAtCell->data), ((double *)__pyx_v_quantDOFs->data), __pyx_v_numDOFsPerEqn, ((int *)__pyx_v_csrRowIndeces_DofLoops->data), ((int *)__pyx_v_csrColumnOffsets_DofLoops->data), ((double *)__pyx_v_ML->data), ((double *)__pyx_v_Cx->data), ((double *)__pyx_v_Cy->data), ((double *)__pyx_v_Cz->data), __pyx_v_MATERIAL_PARAMETERS_AS_FUNCTION, ((double *)__pyx_v_density_as_function->data), ((double *)__pyx_v_dynamic_viscosity_as_function->data), ((double *)__pyx_v_ebqe_density_as_function->data), ((double *)__pyx_v_ebqe_dynamic_viscosity_as_function->data), __pyx_v_order_polynomial);

  /* "mprans/cRANS3PF.pyx":946
 *         del self.thisptr
 * 
 *     def calculateResidual(self,             # <<<<<<<<<<<<<<
 *                           numpy.ndarray mesh_trial_ref,
 *                           numpy.ndarray mesh_grad_trial_ref,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mprans/cRANS3PF.pyx":1377
 *                                         < double * > ebqe_dynamic_viscosity_as_function.data,
 *                                         order_polynomial)
 *     def calculateJacobian(self,             # <<<<<<<<<<<<<<
 *                           numpy.ndarray mesh_trial_ref,
 *                           numpy.ndarray mesh_grad_trial_ref,
 */

/* Python wrapper */
static PyObject *__pyx_pw_6mprans_8cRANS3PF_7RANS3PF_7calculateJacobian(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6mprans_8cRANS3PF_7RANS3PF_7calculateJacobian(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_mesh_trial_ref = 0;
  PyArrayObject *__pyx_v_mesh_grad_trial_ref = 0;
  PyArrayObject *__pyx_v_mesh_dof = 0;
  PyArrayObject *__pyx_v_mesh_velocity_dof = 0;
  double __pyx_v_MOVING_DOMAIN;
  double __pyx_v_PSTAB;
  PyArrayObject *__pyx_v_mesh_l2g = 0;
  PyArrayObject *__pyx_v_dV_ref = 0;
  PyArrayObject *__pyx_v_p_trial_ref = 0;
  PyArrayObject *__pyx_v_p_grad_trial_ref = 0;
  PyArrayObject *__pyx_v_p_test_ref = 0;
  PyArrayObject *__pyx_v_p_grad_test_ref = 0;
  PyArrayObject *__pyx_v_q_p = 0;
  PyArrayObject *__pyx_v_q_grad_p = 0;
  PyArrayObject *__pyx_v_ebqe_p = 0;
  PyArrayObject *__pyx_v_ebqe_grad_p = 0;
  PyArrayObject *__pyx_v_vel_trial_ref = 0;
  PyArrayObject *__pyx_v_vel_grad_trial_ref = 0;
  PyArrayObject *__pyx_v_vel_hess_trial_ref = 0;
  PyArrayObject *__pyx_v_vel_test_ref = 0;
  PyArrayObject *__pyx_v_vel_grad_test_ref = 0;
  PyArrayObject *__pyx_v_mesh_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_mesh_grad_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_dS_ref = 0;
  PyArrayObject *__pyx_v_p_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_p_grad_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_p_test_trace_ref = 0;
  PyArrayObject *__pyx_v_p_grad_test_trace_ref = 0;
  PyArrayObject *__pyx_v_vel_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_vel_grad_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_vel_test_trace_ref = 0;
  PyArrayObject *__pyx_v_vel_grad_test_trace_ref = 0;
  PyArrayObject *__pyx_v_normal_ref = 0;
  PyArrayObject *__pyx_v_boundaryJac_ref = 0;
  double __pyx_v_eb_adjoint_sigma;
  PyArrayObject *__pyx_v_elementDiameter = 0;
  PyArrayObject *__pyx_v_nodeDiametersArray = 0;
  double __pyx_v_hFactor;
  int __pyx_v_nElements_global;
  int __pyx_v_nElements_owned;
  double __pyx_v_useRBLES;
  double __pyx_v_useMetrics;
  double __pyx_v_alphaBDF;
  double __pyx_v_epsFact_rho;
  double __pyx_v_epsFact_mu;
  double __pyx_v_sigma;
  double __pyx_v_rho_0;
  double __pyx_v_nu_0;
  double __pyx_v_rho_1;
  double __pyx_v_nu_1;
  double __pyx_v_smagorinskyConstant;
  int __pyx_v_turbulenceClosureModel;
  double __pyx_v_Ct_sge;
  double __pyx_v_Cd_sge;
  double __pyx_v_C_dg;
  double __pyx_v_C_b;
  PyArrayObject *__pyx_v_eps_solid = 0;
  PyArrayObject *__pyx_v_phi_solid = 0;
  PyArrayObject *__pyx_v_q_velocity_solid = 0;
  PyArrayObject *__pyx_v_q_vos = 0;
  PyArrayObject *__pyx_v_q_dvos_dt = 0;
  PyArrayObject *__pyx_v_q_dragAlpha = 0;
  PyArrayObject *__pyx_v_q_dragBeta = 0;
  PyArrayObject *__pyx_v_q_mass_source = 0;
  PyArrayObject *__pyx_v_q_turb_var_0 = 0;
  PyArrayObject *__pyx_v_q_turb_var_1 = 0;
  PyArrayObject *__pyx_v_q_turb_var_grad_0 = 0;
  PyArrayObject *__pyx_v_p_l2g = 0;
  PyArrayObject *__pyx_v_vel_l2g = 0;
  PyArrayObject *__pyx_v_p_dof = 0;
  PyArrayObject *__pyx_v_u_dof = 0;
  PyArrayObject *__pyx_v_v_dof = 0;
  PyArrayObject *__pyx_v_w_dof = 0;
  PyArrayObject *__pyx_v_g = 0;
  double __pyx_v_useVF;
  PyArrayObject *__pyx_v_vf = 0;
  PyArrayObject *__pyx_v_phi = 0;
  PyArrayObject *__pyx_v_normal_phi = 0;
  PyArrayObject *__pyx_v_kappa_phi = 0;
  PyArrayObject *__pyx_v_q_mom_u_acc_beta_bdf = 0;
  PyArrayObject *__pyx_v_q_mom_v_acc_beta_bdf = 0;
  PyArrayObject *__pyx_v_q_mom_w_acc_beta_bdf = 0;
  PyArrayObject *__pyx_v_q_dV = 0;
  PyArrayObject *__pyx_v_q_dV_last = 0;
  PyArrayObject *__pyx_v_q_velocity_sge = 0;
  PyArrayObject *__pyx_v_ebqe_velocity_star = 0;
  PyArrayObject *__pyx_v_q_cfl = 0;
  PyArrayObject *__pyx_v_q_numDiff_u_last = 0;
  PyArrayObject *__pyx_v_q_numDiff_v_last = 0;
  PyArrayObject *__pyx_v_q_numDiff_w_last = 0;
  PyArrayObject *__pyx_v_sdInfo_u_u_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_u_u_colind = 0;
  PyArrayObject *__pyx_v_sdInfo_u_v_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_u_v_colind = 0;
  PyArrayObject *__pyx_v_sdInfo_u_w_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_u_w_colind = 0;
  PyArrayObject *__pyx_v_sdInfo_v_v_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_v_v_colind = 0;
  PyArrayObject *__pyx_v_sdInfo_v_u_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_v_u_colind = 0;
  PyArrayObject *__pyx_v_sdInfo_v_w_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_v_w_colind = 0;
  PyArrayObject *__pyx_v_sdInfo_w_w_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_w_w_colind = 0;
  PyArrayObject *__pyx_v_sdInfo_w_u_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_w_u_colind = 0;
  PyArrayObject *__pyx_v_sdInfo_w_v_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_w_v_colind = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_p_p = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_p_p = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_p_u = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_p_u = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_p_v = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_p_v = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_p_w = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_p_w = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_u_p = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_u_p = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_u_u = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_u_u = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_u_v = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_u_v = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_u_w = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_u_w = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_v_p = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_v_p = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_v_u = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_v_u = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_v_v = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_v_v = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_v_w = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_v_w = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_w_p = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_w_p = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_w_u = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_w_u = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_w_v = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_w_v = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_w_w = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_w_w = 0;
  PyObject *__pyx_v_globalJacobian = 0;
  int __pyx_v_nExteriorElementBoundaries_global;
  PyArrayObject *__pyx_v_exteriorElementBoundariesArray = 0;
  PyArrayObject *__pyx_v_elementBoundaryElementsArray = 0;
  PyArrayObject *__pyx_v_elementBoundaryLocalElementBoundariesArray = 0;
  PyArrayObject *__pyx_v_ebqe_vf_ext = 0;
  PyArrayObject *__pyx_v_bc_ebqe_vf_ext = 0;
  PyArrayObject *__pyx_v_ebqe_phi_ext = 0;
  PyArrayObject *__pyx_v_bc_ebqe_phi_ext = 0;
  PyArrayObject *__pyx_v_ebqe_normal_phi_ext = 0;
  PyArrayObject *__pyx_v_ebqe_kappa_phi_ext = 0;
  PyArrayObject *__pyx_v_ebqe_vos_ext = 0;
  PyArrayObject *__pyx_v_ebqe_turb_var_0 = 0;
  PyArrayObject *__pyx_v_ebqe_turb_var_1 = 0;
  PyArrayObject *__pyx_v_isDOFBoundary_p = 0;
  PyArrayObject *__pyx_v_isDOFBoundary_u = 0;
  PyArrayObject *__pyx_v_isDOFBoundary_v = 0;
  PyArrayObject *__pyx_v_isDOFBoundary_w = 0;
  PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_p = 0;
  PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_u = 0;
  PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_v = 0;
  PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_w = 0;
  PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_u = 0;
  PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_v = 0;
  PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_w = 0;
  PyArrayObject *__pyx_v_ebqe_bc_p_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_flux_mass_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_flux_mom_u_adv_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_flux_mom_v_adv_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_flux_mom_w_adv_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_u_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_flux_u_diff_ext = 0;
  PyArrayObject *__pyx_v_ebqe_penalty_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_v_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_flux_v_diff_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_w_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_flux_w_diff_ext = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_p_p = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_p_u = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_p_v = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_p_w = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_u_p = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_u_u = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_u_v = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_u_w = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_v_p = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_v_u = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_v_v = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_v_w = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_w_p = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_w_u = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_w_v = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_w_w = 0;
  PyArrayObject *__pyx_v_elementFlags = 0;
  int __pyx_v_nParticles;
  double __pyx_v_particle_epsFact;
  double __pyx_v_particle_alpha;
  double __pyx_v_particle_beta;
  double __pyx_v_particle_penalty_constant;
  PyArrayObject *__pyx_v_particle_signed_distances = 0;
  PyArrayObject *__pyx_v_particle_signed_distance_normals = 0;
  PyArrayObject *__pyx_v_particle_velocities = 0;
  PyArrayObject *__pyx_v_particle_centroids = 0;
  double __pyx_v_particle_nitsche;
  int __pyx_v_KILL_PRESSURE_TERM;
  int __pyx_v_MATERIAL_PARAMETERS_AS_FUNCTION;
  PyArrayObject *__pyx_v_density_as_function = 0;
  PyArrayObject *__pyx_v_dynamic_viscosity_as_function = 0;
  PyArrayObject *__pyx_v_ebqe_density_as_function = 0;
  PyArrayObject *__pyx_v_ebqe_dynamic_viscosity_as_function = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calculateJacobian (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_mesh_trial_ref,&__pyx_n_s_mesh_grad_trial_ref,&__pyx_n_s_mesh_dof,&__pyx_n_s_mesh_velocity_dof,&__pyx_n_s_MOVING_DOMAIN,&__pyx_n_s_PSTAB,&__pyx_n_s_mesh_l2g,&__pyx_n_s_dV_ref,&__pyx_n_s_p_trial_ref,&__pyx_n_s_p_grad_trial_ref,&__pyx_n_s_p_test_ref,&__pyx_n_s_p_grad_test_ref,&__pyx_n_s_q_p,&__pyx_n_s_q_grad_p,&__pyx_n_s_ebqe_p,&__pyx_n_s_ebqe_grad_p,&__pyx_n_s_vel_trial_ref,&__pyx_n_s_vel_grad_trial_ref,&__pyx_n_s_vel_hess_trial_ref,&__pyx_n_s_vel_test_ref,&__pyx_n_s_vel_grad_test_ref,&__pyx_n_s_mesh_trial_trace_ref,&__pyx_n_s_mesh_grad_trial_trace_ref,&__pyx_n_s_dS_ref,&__pyx_n_s_p_trial_trace_ref,&__pyx_n_s_p_grad_trial_trace_ref,&__pyx_n_s_p_test_trace_ref,&__pyx_n_s_p_grad_test_trace_ref,&__pyx_n_s_vel_trial_trace_ref,&__pyx_n_s_vel_grad_trial_trace_ref,&__pyx_n_s_vel_test_trace_ref,&__pyx_n_s_vel_grad_test_trace_ref,&__pyx_n_s_normal_ref,&__pyx_n_s_boundaryJac_ref,&__pyx_n_s_eb_adjoint_sigma,&__pyx_n_s_elementDiameter,&__pyx_n_s_nodeDiametersArray,&__pyx_n_s_hFactor,&__pyx_n_s_nElements_global,&__pyx_n_s_nElements_owned,&__pyx_n_s_useRBLES,&__pyx_n_s_useMetrics,&__pyx_n_s_alphaBDF,&__pyx_n_s_epsFact_rho,&__pyx_n_s_epsFact_mu,&__pyx_n_s_sigma,&__pyx_n_s_rho_0,&__pyx_n_s_nu_0,&__pyx_n_s_rho_1,&__pyx_n_s_nu_1,&__pyx_n_s_smagorinskyConstant,&__pyx_n_s_turbulenceClosureModel,&__pyx_n_s_Ct_sge,&__pyx_n_s_Cd_sge,&__pyx_n_s_C_dg,&__pyx_n_s_C_b,&__pyx_n_s_eps_solid,&__pyx_n_s_phi_solid,&__pyx_n_s_q_velocity_solid,&__pyx_n_s_q_vos,&__pyx_n_s_q_dvos_dt,&__pyx_n_s_q_dragAlpha,&__pyx_n_s_q_dragBeta,&__pyx_n_s_q_mass_source,&__pyx_n_s_q_turb_var_0,&__pyx_n_s_q_turb_var_1,&__pyx_n_s_q_turb_var_grad_0,&__pyx_n_s_p_l2g,&__pyx_n_s_vel_l2g,&__pyx_n_s_p_dof,&__pyx_n_s_u_dof,&__pyx_n_s_v_dof,&__pyx_n_s_w_dof,&__pyx_n_s_g,&__pyx_n_s_useVF,&__pyx_n_s_vf,&__pyx_n_s_phi,&__pyx_n_s_normal_phi,&__pyx_n_s_kappa_phi,&__pyx_n_s_q_mom_u_acc_beta_bdf,&__pyx_n_s_q_mom_v_acc_beta_bdf,&__pyx_n_s_q_mom_w_acc_beta_bdf,&__pyx_n_s_q_dV,&__pyx_n_s_q_dV_last,&__pyx_n_s_q_velocity_sge,&__pyx_n_s_ebqe_velocity_star,&__pyx_n_s_q_cfl,&__pyx_n_s_q_numDiff_u_last,&__pyx_n_s_q_numDiff_v_last,&__pyx_n_s_q_numDiff_w_last,&__pyx_n_s_sdInfo_u_u_rowptr,&__pyx_n_s_sdInfo_u_u_colind,&__pyx_n_s_sdInfo_u_v_rowptr,&__pyx_n_s_sdInfo_u_v_colind,&__pyx_n_s_sdInfo_u_w_rowptr,&__pyx_n_s_sdInfo_u_w_colind,&__pyx_n_s_sdInfo_v_v_rowptr,&__pyx_n_s_sdInfo_v_v_colind,&__pyx_n_s_sdInfo_v_u_rowptr,&__pyx_n_s_sdInfo_v_u_colind,&__pyx_n_s_sdInfo_v_w_rowptr,&__pyx_n_s_sdInfo_v_w_colind,&__pyx_n_s_sdInfo_w_w_rowptr,&__pyx_n_s_sdInfo_w_w_colind,&__pyx_n_s_sdInfo_w_u_rowptr,&__pyx_n_s_sdInfo_w_u_colind,&__pyx_n_s_sdInfo_w_v_rowptr,&__pyx_n_s_sdInfo_w_v_colind,&__pyx_n_s_csrRowIndeces_p_p,&__pyx_n_s_csrColumnOffsets_p_p,&__pyx_n_s_csrRowIndeces_p_u,&__pyx_n_s_csrColumnOffsets_p_u,&__pyx_n_s_csrRowIndeces_p_v,&__pyx_n_s_csrColumnOffsets_p_v,&__pyx_n_s_csrRowIndeces_p_w,&__pyx_n_s_csrColumnOffsets_p_w,&__pyx_n_s_csrRowIndeces_u_p,&__pyx_n_s_csrColumnOffsets_u_p,&__pyx_n_s_csrRowIndeces_u_u,&__pyx_n_s_csrColumnOffsets_u_u,&__pyx_n_s_csrRowIndeces_u_v,&__pyx_n_s_csrColumnOffsets_u_v,&__pyx_n_s_csrRowIndeces_u_w,&__pyx_n_s_csrColumnOffsets_u_w,&__pyx_n_s_csrRowIndeces_v_p,&__pyx_n_s_csrColumnOffsets_v_p,&__pyx_n_s_csrRowIndeces_v_u,&__pyx_n_s_csrColumnOffsets_v_u,&__pyx_n_s_csrRowIndeces_v_v,&__pyx_n_s_csrColumnOffsets_v_v,&__pyx_n_s_csrRowIndeces_v_w,&__pyx_n_s_csrColumnOffsets_v_w,&__pyx_n_s_csrRowIndeces_w_p,&__pyx_n_s_csrColumnOffsets_w_p,&__pyx_n_s_csrRowIndeces_w_u,&__pyx_n_s_csrColumnOffsets_w_u,&__pyx_n_s_csrRowIndeces_w_v,&__pyx_n_s_csrColumnOffsets_w_v,&__pyx_n_s_csrRowIndeces_w_w,&__pyx_n_s_csrColumnOffsets_w_w,&__pyx_n_s_globalJacobian,&__pyx_n_s_nExteriorElementBoundaries_globa,&__pyx_n_s_exteriorElementBoundariesArray,&__pyx_n_s_elementBoundaryElementsArray,&__pyx_n_s_elementBoundaryLocalElementBound,&__pyx_n_s_ebqe_vf_ext,&__pyx_n_s_bc_ebqe_vf_ext,&__pyx_n_s_ebqe_phi_ext,&__pyx_n_s_bc_ebqe_phi_ext,&__pyx_n_s_ebqe_normal_phi_ext,&__pyx_n_s_ebqe_kappa_phi_ext,&__pyx_n_s_ebqe_vos_ext,&__pyx_n_s_ebqe_turb_var_0,&__pyx_n_s_ebqe_turb_var_1,&__pyx_n_s_isDOFBoundary_p,&__pyx_n_s_isDOFBoundary_u,&__pyx_n_s_isDOFBoundary_v,&__pyx_n_s_isDOFBoundary_w,&__pyx_n_s_isAdvectiveFluxBoundary_p,&__pyx_n_s_isAdvectiveFluxBoundary_u,&__pyx_n_s_isAdvectiveFluxBoundary_v,&__pyx_n_s_isAdvectiveFluxBoundary_w,&__pyx_n_s_isDiffusiveFluxBoundary_u,&__pyx_n_s_isDiffusiveFluxBoundary_v,&__pyx_n_s_isDiffusiveFluxBoundary_w,&__pyx_n_s_ebqe_bc_p_ext,&__pyx_n_s_ebqe_bc_flux_mass_ext,&__pyx_n_s_ebqe_bc_flux_mom_u_adv_ext,&__pyx_n_s_ebqe_bc_flux_mom_v_adv_ext,&__pyx_n_s_ebqe_bc_flux_mom_w_adv_ext,&__pyx_n_s_ebqe_bc_u_ext,&__pyx_n_s_ebqe_bc_flux_u_diff_ext,&__pyx_n_s_ebqe_penalty_ext,&__pyx_n_s_ebqe_bc_v_ext,&__pyx_n_s_ebqe_bc_flux_v_diff_ext,&__pyx_n_s_ebqe_bc_w_ext,&__pyx_n_s_ebqe_bc_flux_w_diff_ext,&__pyx_n_s_csrColumnOffsets_eb_p_p,&__pyx_n_s_csrColumnOffsets_eb_p_u,&__pyx_n_s_csrColumnOffsets_eb_p_v,&__pyx_n_s_csrColumnOffsets_eb_p_w,&__pyx_n_s_csrColumnOffsets_eb_u_p,&__pyx_n_s_csrColumnOffsets_eb_u_u,&__pyx_n_s_csrColumnOffsets_eb_u_v,&__pyx_n_s_csrColumnOffsets_eb_u_w,&__pyx_n_s_csrColumnOffsets_eb_v_p,&__pyx_n_s_csrColumnOffsets_eb_v_u,&__pyx_n_s_csrColumnOffsets_eb_v_v,&__pyx_n_s_csrColumnOffsets_eb_v_w,&__pyx_n_s_csrColumnOffsets_eb_w_p,&__pyx_n_s_csrColumnOffsets_eb_w_u,&__pyx_n_s_csrColumnOffsets_eb_w_v,&__pyx_n_s_csrColumnOffsets_eb_w_w,&__pyx_n_s_elementFlags,&__pyx_n_s_nParticles,&__pyx_n_s_particle_epsFact,&__pyx_n_s_particle_alpha,&__pyx_n_s_particle_beta,&__pyx_n_s_particle_penalty_constant,&__pyx_n_s_particle_signed_distances,&__pyx_n_s_particle_signed_distance_normals,&__pyx_n_s_particle_velocities,&__pyx_n_s_particle_centroids,&__pyx_n_s_particle_nitsche,&__pyx_n_s_KILL_PRESSURE_TERM,&__pyx_n_s_MATERIAL_PARAMETERS_AS_FUNCTION,&__pyx_n_s_density_as_function,&__pyx_n_s_dynamic_viscosity_as_function,&__pyx_n_s_ebqe_density_as_function,&__pyx_n_s_ebqe_dynamic_viscosity_as_functi,0};
    PyObject* values[210] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 210: values[209] = PyTuple_GET_ITEM(__pyx_args, 209);
        case 209: values[208] = PyTuple_GET_ITEM(__pyx_args, 208);
        case 208: values[207] = PyTuple_GET_ITEM(__pyx_args, 207);
        case 207: values[206] = PyTuple_GET_ITEM(__pyx_args, 206);
        case 206: values[205] = PyTuple_GET_ITEM(__pyx_args, 205);
        case 205: values[204] = PyTuple_GET_ITEM(__pyx_args, 204);
        case 204: values[203] = PyTuple_GET_ITEM(__pyx_args, 203);
        case 203: values[202] = PyTuple_GET_ITEM(__pyx_args, 202);
        case 202: values[201] = PyTuple_GET_ITEM(__pyx_args, 201);
        case 201: values[200] = PyTuple_GET_ITEM(__pyx_args, 200);
        case 200: values[199] = PyTuple_GET_ITEM(__pyx_args, 199);
        case 199: values[198] = PyTuple_GET_ITEM(__pyx_args, 198);
        case 198: values[197] = PyTuple_GET_ITEM(__pyx_args, 197);
        case 197: values[196] = PyTuple_GET_ITEM(__pyx_args, 196);
        case 196: values[195] = PyTuple_GET_ITEM(__pyx_args, 195);
        case 195: values[194] = PyTuple_GET_ITEM(__pyx_args, 194);
        case 194: values[193] = PyTuple_GET_ITEM(__pyx_args, 193);
        case 193: values[192] = PyTuple_GET_ITEM(__pyx_args, 192);
        case 192: values[191] = PyTuple_GET_ITEM(__pyx_args, 191);
        case 191: values[190] = PyTuple_GET_ITEM(__pyx_args, 190);
        case 190: values[189] = PyTuple_GET_ITEM(__pyx_args, 189);
        case 189: values[188] = PyTuple_GET_ITEM(__pyx_args, 188);
        case 188: values[187] = PyTuple_GET_ITEM(__pyx_args, 187);
        case 187: values[186] = PyTuple_GET_ITEM(__pyx_args, 186);
        case 186: values[185] = PyTuple_GET_ITEM(__pyx_args, 185);
        case 185: values[184] = PyTuple_GET_ITEM(__pyx_args, 184);
        case 184: values[183] = PyTuple_GET_ITEM(__pyx_args, 183);
        case 183: values[182] = PyTuple_GET_ITEM(__pyx_args, 182);
        case 182: values[181] = PyTuple_GET_ITEM(__pyx_args, 181);
        case 181: values[180] = PyTuple_GET_ITEM(__pyx_args, 180);
        case 180: values[179] = PyTuple_GET_ITEM(__pyx_args, 179);
        case 179: values[178] = PyTuple_GET_ITEM(__pyx_args, 178);
        case 178: values[177] = PyTuple_GET_ITEM(__pyx_args, 177);
        case 177: values[176] = PyTuple_GET_ITEM(__pyx_args, 176);
        case 176: values[175] = PyTuple_GET_ITEM(__pyx_args, 175);
        case 175: values[174] = PyTuple_GET_ITEM(__pyx_args, 174);
        case 174: values[173] = PyTuple_GET_ITEM(__pyx_args, 173);
        case 173: values[172] = PyTuple_GET_ITEM(__pyx_args, 172);
        case 172: values[171] = PyTuple_GET_ITEM(__pyx_args, 171);
        case 171: values[170] = PyTuple_GET_ITEM(__pyx_args, 170);
        case 170: values[169] = PyTuple_GET_ITEM(__pyx_args, 169);
        case 169: values[168] = PyTuple_GET_ITEM(__pyx_args, 168);
        case 168: values[167] = PyTuple_GET_ITEM(__pyx_args, 167);
        case 167: values[166] = PyTuple_GET_ITEM(__pyx_args, 166);
        case 166: values[165] = PyTuple_GET_ITEM(__pyx_args, 165);
        case 165: values[164] = PyTuple_GET_ITEM(__pyx_args, 164);
        case 164: values[163] = PyTuple_GET_ITEM(__pyx_args, 163);
        case 163: values[162] = PyTuple_GET_ITEM(__pyx_args, 162);
        case 162: values[161] = PyTuple_GET_ITEM(__pyx_args, 161);
        case 161: values[160] = PyTuple_GET_ITEM(__pyx_args, 160);
        case 160: values[159] = PyTuple_GET_ITEM(__pyx_args, 159);
        case 159: values[158] = PyTuple_GET_ITEM(__pyx_args, 158);
        case 158: values[157] = PyTuple_GET_ITEM(__pyx_args, 157);
        case 157: values[156] = PyTuple_GET_ITEM(__pyx_args, 156);
        case 156: values[155] = PyTuple_GET_ITEM(__pyx_args, 155);
        case 155: values[154] = PyTuple_GET_ITEM(__pyx_args, 154);
        case 154: values[153] = PyTuple_GET_ITEM(__pyx_args, 153);
        case 153: values[152] = PyTuple_GET_ITEM(__pyx_args, 152);
        case 152: values[151] = PyTuple_GET_ITEM(__pyx_args, 151);
        case 151: values[150] = PyTuple_GET_ITEM(__pyx_args, 150);
        case 150: values[149] = PyTuple_GET_ITEM(__pyx_args, 149);
        case 149: values[148] = PyTuple_GET_ITEM(__pyx_args, 148);
        case 148: values[147] = PyTuple_GET_ITEM(__pyx_args, 147);
        case 147: values[146] = PyTuple_GET_ITEM(__pyx_args, 146);
        case 146: values[145] = PyTuple_GET_ITEM(__pyx_args, 145);
        case 145: values[144] = PyTuple_GET_ITEM(__pyx_args, 144);
        case 144: values[143] = PyTuple_GET_ITEM(__pyx_args, 143);
        case 143: values[142] = PyTuple_GET_ITEM(__pyx_args, 142);
        case 142: values[141] = PyTuple_GET_ITEM(__pyx_args, 141);
        case 141: values[140] = PyTuple_GET_ITEM(__pyx_args, 140);
        case 140: values[139] = PyTuple_GET_ITEM(__pyx_args, 139);
        case 139: values[138] = PyTuple_GET_ITEM(__pyx_args, 138);
        case 138: values[137] = PyTuple_GET_ITEM(__pyx_args, 137);
        case 137: values[136] = PyTuple_GET_ITEM(__pyx_args, 136);
        case 136: values[135] = PyTuple_GET_ITEM(__pyx_args, 135);
        case 135: values[134] = PyTuple_GET_ITEM(__pyx_args, 134);
        case 134: values[133] = PyTuple_GET_ITEM(__pyx_args, 133);
        case 133: values[132] = PyTuple_GET_ITEM(__pyx_args, 132);
        case 132: values[131] = PyTuple_GET_ITEM(__pyx_args, 131);
        case 131: values[130] = PyTuple_GET_ITEM(__pyx_args, 130);
        case 130: values[129] = PyTuple_GET_ITEM(__pyx_args, 129);
        case 129: values[128] = PyTuple_GET_ITEM(__pyx_args, 128);
        case 128: values[127] = PyTuple_GET_ITEM(__pyx_args, 127);
        case 127: values[126] = PyTuple_GET_ITEM(__pyx_args, 126);
        case 126: values[125] = PyTuple_GET_ITEM(__pyx_args, 125);
        case 125: values[124] = PyTuple_GET_ITEM(__pyx_args, 124);
        case 124: values[123] = PyTuple_GET_ITEM(__pyx_args, 123);
        case 123: values[122] = PyTuple_GET_ITEM(__pyx_args, 122);
        case 122: values[121] = PyTuple_GET_ITEM(__pyx_args, 121);
        case 121: values[120] = PyTuple_GET_ITEM(__pyx_args, 120);
        case 120: values[119] = PyTuple_GET_ITEM(__pyx_args, 119);
        case 119: values[118] = PyTuple_GET_ITEM(__pyx_args, 118);
        case 118: values[117] = PyTuple_GET_ITEM(__pyx_args, 117);
        case 117: values[116] = PyTuple_GET_ITEM(__pyx_args, 116);
        case 116: values[115] = PyTuple_GET_ITEM(__pyx_args, 115);
        case 115: values[114] = PyTuple_GET_ITEM(__pyx_args, 114);
        case 114: values[113] = PyTuple_GET_ITEM(__pyx_args, 113);
        case 113: values[112] = PyTuple_GET_ITEM(__pyx_args, 112);
        case 112: values[111] = PyTuple_GET_ITEM(__pyx_args, 111);
        case 111: values[110] = PyTuple_GET_ITEM(__pyx_args, 110);
        case 110: values[109] = PyTuple_GET_ITEM(__pyx_args, 109);
        case 109: values[108] = PyTuple_GET_ITEM(__pyx_args, 108);
        case 108: values[107] = PyTuple_GET_ITEM(__pyx_args, 107);
        case 107: values[106] = PyTuple_GET_ITEM(__pyx_args, 106);
        case 106: values[105] = PyTuple_GET_ITEM(__pyx_args, 105);
        case 105: values[104] = PyTuple_GET_ITEM(__pyx_args, 104);
        case 104: values[103] = PyTuple_GET_ITEM(__pyx_args, 103);
        case 103: values[102] = PyTuple_GET_ITEM(__pyx_args, 102);
        case 102: values[101] = PyTuple_GET_ITEM(__pyx_args, 101);
        case 101: values[100] = PyTuple_GET_ITEM(__pyx_args, 100);
        case 100: values[99] = PyTuple_GET_ITEM(__pyx_args, 99);
        case 99: values[98] = PyTuple_GET_ITEM(__pyx_args, 98);
        case 98: values[97] = PyTuple_GET_ITEM(__pyx_args, 97);
        case 97: values[96] = PyTuple_GET_ITEM(__pyx_args, 96);
        case 96: values[95] = PyTuple_GET_ITEM(__pyx_args, 95);
        case 95: values[94] = PyTuple_GET_ITEM(__pyx_args, 94);
        case 94: values[93] = PyTuple_GET_ITEM(__pyx_args, 93);
        case 93: values[92] = PyTuple_GET_ITEM(__pyx_args, 92);
        case 92: values[91] = PyTuple_GET_ITEM(__pyx_args, 91);
        case 91: values[90] = PyTuple_GET_ITEM(__pyx_args, 90);
        case 90: values[89] = PyTuple_GET_ITEM(__pyx_args, 89);
        case 89: values[88] = PyTuple_GET_ITEM(__pyx_args, 88);
        case 88: values[87] = PyTuple_GET_ITEM(__pyx_args, 87);
        case 87: values[86] = PyTuple_GET_ITEM(__pyx_args, 86);
        case 86: values[85] = PyTuple_GET_ITEM(__pyx_args, 85);
        case 85: values[84] = PyTuple_GET_ITEM(__pyx_args, 84);
        case 84: values[83] = PyTuple_GET_ITEM(__pyx_args, 83);
        case 83: values[82] = PyTuple_GET_ITEM(__pyx_args, 82);
        case 82: values[81] = PyTuple_GET_ITEM(__pyx_args, 81);
        case 81: values[80] = PyTuple_GET_ITEM(__pyx_args, 80);
        case 80: values[79] = PyTuple_GET_ITEM(__pyx_args, 79);
        case 79: values[78] = PyTuple_GET_ITEM(__pyx_args, 78);
        case 78: values[77] = PyTuple_GET_ITEM(__pyx_args, 77);
        case 77: values[76] = PyTuple_GET_ITEM(__pyx_args, 76);
        case 76: values[75] = PyTuple_GET_ITEM(__pyx_args, 75);
        case 75: values[74] = PyTuple_GET_ITEM(__pyx_args, 74);
        case 74: values[73] = PyTuple_GET_ITEM(__pyx_args, 73);
        case 73: values[72] = PyTuple_GET_ITEM(__pyx_args, 72);
        case 72: values[71] = PyTuple_GET_ITEM(__pyx_args, 71);
        case 71: values[70] = PyTuple_GET_ITEM(__pyx_args, 70);
        case 70: values[69] = PyTuple_GET_ITEM(__pyx_args, 69);
        case 69: values[68] = PyTuple_GET_ITEM(__pyx_args, 68);
        case 68: values[67] = PyTuple_GET_ITEM(__pyx_args, 67);
        case 67: values[66] = PyTuple_GET_ITEM(__pyx_args, 66);
        case 66: values[65] = PyTuple_GET_ITEM(__pyx_args, 65);
        case 65: values[64] = PyTuple_GET_ITEM(__pyx_args, 64);
        case 64: values[63] = PyTuple_GET_ITEM(__pyx_args, 63);
        case 63: values[62] = PyTuple_GET_ITEM(__pyx_args, 62);
        case 62: values[61] = PyTuple_GET_ITEM(__pyx_args, 61);
        case 61: values[60] = PyTuple_GET_ITEM(__pyx_args, 60);
        case 60: values[59] = PyTuple_GET_ITEM(__pyx_args, 59);
        case 59: values[58] = PyTuple_GET_ITEM(__pyx_args, 58);
        case 58: values[57] = PyTuple_GET_ITEM(__pyx_args, 57);
        case 57: values[56] = PyTuple_GET_ITEM(__pyx_args, 56);
        case 56: values[55] = PyTuple_GET_ITEM(__pyx_args, 55);
        case 55: values[54] = PyTuple_GET_ITEM(__pyx_args, 54);
        case 54: values[53] = PyTuple_GET_ITEM(__pyx_args, 53);
        case 53: values[52] = PyTuple_GET_ITEM(__pyx_args, 52);
        case 52: values[51] = PyTuple_GET_ITEM(__pyx_args, 51);
        case 51: values[50] = PyTuple_GET_ITEM(__pyx_args, 50);
        case 50: values[49] = PyTuple_GET_ITEM(__pyx_args, 49);
        case 49: values[48] = PyTuple_GET_ITEM(__pyx_args, 48);
        case 48: values[47] = PyTuple_GET_ITEM(__pyx_args, 47);
        case 47: values[46] = PyTuple_GET_ITEM(__pyx_args, 46);
        case 46: values[45] = PyTuple_GET_ITEM(__pyx_args, 45);
        case 45: values[44] = PyTuple_GET_ITEM(__pyx_args, 44);
        case 44: values[43] = PyTuple_GET_ITEM(__pyx_args, 43);
        case 43: values[42] = PyTuple_GET_ITEM(__pyx_args, 42);
        case 42: values[41] = PyTuple_GET_ITEM(__pyx_args, 41);
        case 41: values[40] = PyTuple_GET_ITEM(__pyx_args, 40);
        case 40: values[39] = PyTuple_GET_ITEM(__pyx_args, 39);
        case 39: values[38] = PyTuple_GET_ITEM(__pyx_args, 38);
        case 38: values[37] = PyTuple_GET_ITEM(__pyx_args, 37);
        case 37: values[36] = PyTuple_GET_ITEM(__pyx_args, 36);
        case 36: values[35] = PyTuple_GET_ITEM(__pyx_args, 35);
        case 35: values[34] = PyTuple_GET_ITEM(__pyx_args, 34);
        case 34: values[33] = PyTuple_GET_ITEM(__pyx_args, 33);
        case 33: values[32] = PyTuple_GET_ITEM(__pyx_args, 32);
        case 32: values[31] = PyTuple_GET_ITEM(__pyx_args, 31);
        case 31: values[30] = PyTuple_GET_ITEM(__pyx_args, 30);
        case 30: values[29] = PyTuple_GET_ITEM(__pyx_args, 29);
        case 29: values[28] = PyTuple_GET_ITEM(__pyx_args, 28);
        case 28: values[27] = PyTuple_GET_ITEM(__pyx_args, 27);
        case 27: values[26] = PyTuple_GET_ITEM(__pyx_args, 26);
        case 26: values[25] = PyTuple_GET_ITEM(__pyx_args, 25);
        case 25: values[24] = PyTuple_GET_ITEM(__pyx_args, 24);
        case 24: values[23] = PyTuple_GET_ITEM(__pyx_args, 23);
        case 23: values[22] = PyTuple_GET_ITEM(__pyx_args, 22);
        case 22: values[21] = PyTuple_GET_ITEM(__pyx_args, 21);
        case 21: values[20] = PyTuple_GET_ITEM(__pyx_args, 20);
        case 20: values[19] = PyTuple_GET_ITEM(__pyx_args, 19);
        case 19: values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
        case 18: values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
        case 17: values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_trial_ref)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_grad_trial_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 1); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 2); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_velocity_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 3); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_MOVING_DOMAIN)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 4); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_PSTAB)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 5); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_l2g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 6); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case  7:
        if (likely((values[7] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dV_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 7); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case  8:
        if (likely((values[8] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_trial_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 8); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case  9:
        if (likely((values[9] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_grad_trial_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 9); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 10:
        if (likely((values[10] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_test_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 10); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 11:
        if (likely((values[11] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_grad_test_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 11); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 12:
        if (likely((values[12] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 12); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 13:
        if (likely((values[13] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_grad_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 13); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 14:
        if (likely((values[14] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 14); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 15:
        if (likely((values[15] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_grad_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 15); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 16:
        if (likely((values[16] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_trial_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 16); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 17:
        if (likely((values[17] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_grad_trial_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 17); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 18:
        if (likely((values[18] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_hess_trial_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 18); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 19:
        if (likely((values[19] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_test_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 19); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 20:
        if (likely((values[20] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_grad_test_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 20); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 21:
        if (likely((values[21] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 21); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 22:
        if (likely((values[22] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_grad_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 22); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 23:
        if (likely((values[23] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dS_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 23); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 24:
        if (likely((values[24] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 24); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 25:
        if (likely((values[25] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_grad_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 25); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 26:
        if (likely((values[26] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_test_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 26); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 27:
        if (likely((values[27] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_grad_test_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 27); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 28:
        if (likely((values[28] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 28); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 29:
        if (likely((values[29] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_grad_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 29); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 30:
        if (likely((values[30] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_test_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 30); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 31:
        if (likely((values[31] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_grad_test_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 31); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 32:
        if (likely((values[32] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_normal_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 32); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 33:
        if (likely((values[33] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_boundaryJac_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 33); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 34:
        if (likely((values[34] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_eb_adjoint_sigma)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 34); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 35:
        if (likely((values[35] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_elementDiameter)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 35); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 36:
        if (likely((values[36] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nodeDiametersArray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 36); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 37:
        if (likely((values[37] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_hFactor)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 37); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 38:
        if (likely((values[38] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nElements_global)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 38); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 39:
        if (likely((values[39] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nElements_owned)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 39); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 40:
        if (likely((values[40] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_useRBLES)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 40); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 41:
        if (likely((values[41] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_useMetrics)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 41); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 42:
        if (likely((values[42] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_alphaBDF)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 42); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 43:
        if (likely((values[43] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_epsFact_rho)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 43); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 44:
        if (likely((values[44] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_epsFact_mu)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 44); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 45:
        if (likely((values[45] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sigma)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 45); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 46:
        if (likely((values[46] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rho_0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 46); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 47:
        if (likely((values[47] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nu_0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 47); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 48:
        if (likely((values[48] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rho_1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 48); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 49:
        if (likely((values[49] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nu_1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 49); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 50:
        if (likely((values[50] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_smagorinskyConstant)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 50); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 51:
        if (likely((values[51] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_turbulenceClosureModel)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 51); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 52:
        if (likely((values[52] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Ct_sge)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 52); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 53:
        if (likely((values[53] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Cd_sge)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 53); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 54:
        if (likely((values[54] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_C_dg)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 54); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 55:
        if (likely((values[55] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_C_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 55); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 56:
        if (likely((values[56] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_eps_solid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 56); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 57:
        if (likely((values[57] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_phi_solid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 57); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 58:
        if (likely((values[58] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_velocity_solid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 58); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 59:
        if (likely((values[59] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_vos)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 59); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 60:
        if (likely((values[60] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_dvos_dt)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 60); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 61:
        if (likely((values[61] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_dragAlpha)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 61); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 62:
        if (likely((values[62] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_dragBeta)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 62); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 63:
        if (likely((values[63] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_mass_source)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 63); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 64:
        if (likely((values[64] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_turb_var_0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 64); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 65:
        if (likely((values[65] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_turb_var_1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 65); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 66:
        if (likely((values[66] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_turb_var_grad_0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 66); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 67:
        if (likely((values[67] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_l2g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 67); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 68:
        if (likely((values[68] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_l2g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 68); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 69:
        if (likely((values[69] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 69); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 70:
        if (likely((values[70] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_u_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 70); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 71:
        if (likely((values[71] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_v_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 71); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 72:
        if (likely((values[72] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_w_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 72); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 73:
        if (likely((values[73] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 73); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 74:
        if (likely((values[74] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_useVF)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 74); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 75:
        if (likely((values[75] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vf)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 75); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 76:
        if (likely((values[76] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_phi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 76); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 77:
        if (likely((values[77] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_normal_phi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 77); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 78:
        if (likely((values[78] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_kappa_phi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 78); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 79:
        if (likely((values[79] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_mom_u_acc_beta_bdf)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 79); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 80:
        if (likely((values[80] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_mom_v_acc_beta_bdf)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 80); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 81:
        if (likely((values[81] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_mom_w_acc_beta_bdf)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 81); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 82:
        if (likely((values[82] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_dV)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 82); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 83:
        if (likely((values[83] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_dV_last)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 83); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 84:
        if (likely((values[84] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_velocity_sge)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 84); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 85:
        if (likely((values[85] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_velocity_star)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 85); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 86:
        if (likely((values[86] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_cfl)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 86); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 87:
        if (likely((values[87] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_numDiff_u_last)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 87); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 88:
        if (likely((values[88] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_numDiff_v_last)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 88); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 89:
        if (likely((values[89] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_numDiff_w_last)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 89); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 90:
        if (likely((values[90] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_u_u_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 90); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 91:
        if (likely((values[91] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_u_u_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 91); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 92:
        if (likely((values[92] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_u_v_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 92); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 93:
        if (likely((values[93] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_u_v_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 93); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 94:
        if (likely((values[94] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_u_w_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 94); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 95:
        if (likely((values[95] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_u_w_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 95); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 96:
        if (likely((values[96] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_v_v_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 96); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 97:
        if (likely((values[97] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_v_v_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 97); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 98:
        if (likely((values[98] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_v_u_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 98); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 99:
        if (likely((values[99] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_v_u_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 99); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 100:
        if (likely((values[100] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_v_w_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 100); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 101:
        if (likely((values[101] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_v_w_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 101); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 102:
        if (likely((values[102] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_w_w_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 102); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 103:
        if (likely((values[103] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_w_w_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 103); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 104:
        if (likely((values[104] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_w_u_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 104); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 105:
        if (likely((values[105] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_w_u_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 105); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 106:
        if (likely((values[106] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_w_v_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 106); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 107:
        if (likely((values[107] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_w_v_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 107); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 108:
        if (likely((values[108] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_p_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 108); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 109:
        if (likely((values[109] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_p_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 109); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 110:
        if (likely((values[110] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_p_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 110); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 111:
        if (likely((values[111] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_p_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 111); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 112:
        if (likely((values[112] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_p_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 112); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 113:
        if (likely((values[113] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_p_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 113); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 114:
        if (likely((values[114] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_p_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 114); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 115:
        if (likely((values[115] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_p_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 115); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 116:
        if (likely((values[116] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_u_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 116); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 117:
        if (likely((values[117] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_u_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 117); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 118:
        if (likely((values[118] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_u_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 118); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 119:
        if (likely((values[119] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_u_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 119); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 120:
        if (likely((values[120] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_u_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 120); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 121:
        if (likely((values[121] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_u_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 121); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 122:
        if (likely((values[122] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_u_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 122); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 123:
        if (likely((values[123] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_u_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 123); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 124:
        if (likely((values[124] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_v_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 124); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 125:
        if (likely((values[125] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_v_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 125); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 126:
        if (likely((values[126] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_v_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 126); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 127:
        if (likely((values[127] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_v_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 127); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 128:
        if (likely((values[128] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_v_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 128); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 129:
        if (likely((values[129] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_v_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 129); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 130:
        if (likely((values[130] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_v_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 130); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 131:
        if (likely((values[131] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_v_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 131); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 132:
        if (likely((values[132] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_w_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 132); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 133:
        if (likely((values[133] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_w_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 133); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 134:
        if (likely((values[134] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_w_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 134); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 135:
        if (likely((values[135] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_w_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 135); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 136:
        if (likely((values[136] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_w_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 136); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 137:
        if (likely((values[137] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_w_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 137); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 138:
        if (likely((values[138] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_w_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 138); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 139:
        if (likely((values[139] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_w_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 139); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 140:
        if (likely((values[140] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_globalJacobian)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 140); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 141:
        if (likely((values[141] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nExteriorElementBoundaries_globa)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 141); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 142:
        if (likely((values[142] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_exteriorElementBoundariesArray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 142); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 143:
        if (likely((values[143] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_elementBoundaryElementsArray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 143); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 144:
        if (likely((values[144] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_elementBoundaryLocalElementBound)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 144); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 145:
        if (likely((values[145] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_vf_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 145); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 146:
        if (likely((values[146] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bc_ebqe_vf_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 146); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 147:
        if (likely((values[147] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_phi_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 147); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 148:
        if (likely((values[148] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bc_ebqe_phi_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 148); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 149:
        if (likely((values[149] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_normal_phi_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 149); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 150:
        if (likely((values[150] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_kappa_phi_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 150); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 151:
        if (likely((values[151] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_vos_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 151); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 152:
        if (likely((values[152] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_turb_var_0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 152); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 153:
        if (likely((values[153] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_turb_var_1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 153); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 154:
        if (likely((values[154] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isDOFBoundary_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 154); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 155:
        if (likely((values[155] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isDOFBoundary_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 155); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 156:
        if (likely((values[156] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isDOFBoundary_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 156); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 157:
        if (likely((values[157] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isDOFBoundary_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 157); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 158:
        if (likely((values[158] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isAdvectiveFluxBoundary_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 158); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 159:
        if (likely((values[159] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isAdvectiveFluxBoundary_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 159); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 160:
        if (likely((values[160] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isAdvectiveFluxBoundary_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 160); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 161:
        if (likely((values[161] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isAdvectiveFluxBoundary_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 161); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 162:
        if (likely((values[162] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isDiffusiveFluxBoundary_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 162); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 163:
        if (likely((values[163] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isDiffusiveFluxBoundary_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 163); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 164:
        if (likely((values[164] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isDiffusiveFluxBoundary_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 164); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 165:
        if (likely((values[165] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_p_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 165); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 166:
        if (likely((values[166] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_flux_mass_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 166); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 167:
        if (likely((values[167] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_flux_mom_u_adv_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 167); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 168:
        if (likely((values[168] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_flux_mom_v_adv_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 168); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 169:
        if (likely((values[169] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_flux_mom_w_adv_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 169); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 170:
        if (likely((values[170] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_u_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 170); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 171:
        if (likely((values[171] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_flux_u_diff_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 171); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 172:
        if (likely((values[172] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_penalty_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 172); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 173:
        if (likely((values[173] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_v_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 173); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 174:
        if (likely((values[174] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_flux_v_diff_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 174); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 175:
        if (likely((values[175] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_w_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 175); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 176:
        if (likely((values[176] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_flux_w_diff_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 176); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 177:
        if (likely((values[177] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_p_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 177); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 178:
        if (likely((values[178] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_p_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 178); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 179:
        if (likely((values[179] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_p_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 179); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 180:
        if (likely((values[180] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_p_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 180); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 181:
        if (likely((values[181] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_u_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 181); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 182:
        if (likely((values[182] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_u_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 182); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 183:
        if (likely((values[183] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_u_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 183); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 184:
        if (likely((values[184] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_u_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 184); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 185:
        if (likely((values[185] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_v_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 185); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 186:
        if (likely((values[186] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_v_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 186); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 187:
        if (likely((values[187] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_v_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 187); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 188:
        if (likely((values[188] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_v_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 188); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 189:
        if (likely((values[189] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_w_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 189); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 190:
        if (likely((values[190] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_w_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 190); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 191:
        if (likely((values[191] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_w_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 191); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 192:
        if (likely((values[192] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_w_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 192); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 193:
        if (likely((values[193] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_elementFlags)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 193); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 194:
        if (likely((values[194] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nParticles)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 194); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 195:
        if (likely((values[195] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_epsFact)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 195); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 196:
        if (likely((values[196] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_alpha)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 196); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 197:
        if (likely((values[197] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_beta)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 197); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 198:
        if (likely((values[198] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_penalty_constant)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 198); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 199:
        if (likely((values[199] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_signed_distances)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 199); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 200:
        if (likely((values[200] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_signed_distance_normals)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 200); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 201:
        if (likely((values[201] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_velocities)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 201); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 202:
        if (likely((values[202] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_centroids)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 202); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 203:
        if (likely((values[203] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_nitsche)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 203); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 204:
        if (likely((values[204] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_KILL_PRESSURE_TERM)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 204); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 205:
        if (likely((values[205] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_MATERIAL_PARAMETERS_AS_FUNCTION)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 205); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 206:
        if (likely((values[206] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_density_as_function)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 206); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 207:
        if (likely((values[207] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dynamic_viscosity_as_function)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 207); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 208:
        if (likely((values[208] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_density_as_function)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 208); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
        case 209:
        if (likely((values[209] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_dynamic_viscosity_as_functi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 209); __PYX_ERR(0, 1377, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calculateJacobian") < 0)) __PYX_ERR(0, 1377, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 210) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
      values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
      values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
      values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
      values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
      values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
      values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
      values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
      values[19] = PyTuple_GET_ITEM(__pyx_args, 19);
      values[20] = PyTuple_GET_ITEM(__pyx_args, 20);
      values[21] = PyTuple_GET_ITEM(__pyx_args, 21);
      values[22] = PyTuple_GET_ITEM(__pyx_args, 22);
      values[23] = PyTuple_GET_ITEM(__pyx_args, 23);
      values[24] = PyTuple_GET_ITEM(__pyx_args, 24);
      values[25] = PyTuple_GET_ITEM(__pyx_args, 25);
      values[26] = PyTuple_GET_ITEM(__pyx_args, 26);
      values[27] = PyTuple_GET_ITEM(__pyx_args, 27);
      values[28] = PyTuple_GET_ITEM(__pyx_args, 28);
      values[29] = PyTuple_GET_ITEM(__pyx_args, 29);
      values[30] = PyTuple_GET_ITEM(__pyx_args, 30);
      values[31] = PyTuple_GET_ITEM(__pyx_args, 31);
      values[32] = PyTuple_GET_ITEM(__pyx_args, 32);
      values[33] = PyTuple_GET_ITEM(__pyx_args, 33);
      values[34] = PyTuple_GET_ITEM(__pyx_args, 34);
      values[35] = PyTuple_GET_ITEM(__pyx_args, 35);
      values[36] = PyTuple_GET_ITEM(__pyx_args, 36);
      values[37] = PyTuple_GET_ITEM(__pyx_args, 37);
      values[38] = PyTuple_GET_ITEM(__pyx_args, 38);
      values[39] = PyTuple_GET_ITEM(__pyx_args, 39);
      values[40] = PyTuple_GET_ITEM(__pyx_args, 40);
      values[41] = PyTuple_GET_ITEM(__pyx_args, 41);
      values[42] = PyTuple_GET_ITEM(__pyx_args, 42);
      values[43] = PyTuple_GET_ITEM(__pyx_args, 43);
      values[44] = PyTuple_GET_ITEM(__pyx_args, 44);
      values[45] = PyTuple_GET_ITEM(__pyx_args, 45);
      values[46] = PyTuple_GET_ITEM(__pyx_args, 46);
      values[47] = PyTuple_GET_ITEM(__pyx_args, 47);
      values[48] = PyTuple_GET_ITEM(__pyx_args, 48);
      values[49] = PyTuple_GET_ITEM(__pyx_args, 49);
      values[50] = PyTuple_GET_ITEM(__pyx_args, 50);
      values[51] = PyTuple_GET_ITEM(__pyx_args, 51);
      values[52] = PyTuple_GET_ITEM(__pyx_args, 52);
      values[53] = PyTuple_GET_ITEM(__pyx_args, 53);
      values[54] = PyTuple_GET_ITEM(__pyx_args, 54);
      values[55] = PyTuple_GET_ITEM(__pyx_args, 55);
      values[56] = PyTuple_GET_ITEM(__pyx_args, 56);
      values[57] = PyTuple_GET_ITEM(__pyx_args, 57);
      values[58] = PyTuple_GET_ITEM(__pyx_args, 58);
      values[59] = PyTuple_GET_ITEM(__pyx_args, 59);
      values[60] = PyTuple_GET_ITEM(__pyx_args, 60);
      values[61] = PyTuple_GET_ITEM(__pyx_args, 61);
      values[62] = PyTuple_GET_ITEM(__pyx_args, 62);
      values[63] = PyTuple_GET_ITEM(__pyx_args, 63);
      values[64] = PyTuple_GET_ITEM(__pyx_args, 64);
      values[65] = PyTuple_GET_ITEM(__pyx_args, 65);
      values[66] = PyTuple_GET_ITEM(__pyx_args, 66);
      values[67] = PyTuple_GET_ITEM(__pyx_args, 67);
      values[68] = PyTuple_GET_ITEM(__pyx_args, 68);
      values[69] = PyTuple_GET_ITEM(__pyx_args, 69);
      values[70] = PyTuple_GET_ITEM(__pyx_args, 70);
      values[71] = PyTuple_GET_ITEM(__pyx_args, 71);
      values[72] = PyTuple_GET_ITEM(__pyx_args, 72);
      values[73] = PyTuple_GET_ITEM(__pyx_args, 73);
      values[74] = PyTuple_GET_ITEM(__pyx_args, 74);
      values[75] = PyTuple_GET_ITEM(__pyx_args, 75);
      values[76] = PyTuple_GET_ITEM(__pyx_args, 76);
      values[77] = PyTuple_GET_ITEM(__pyx_args, 77);
      values[78] = PyTuple_GET_ITEM(__pyx_args, 78);
      values[79] = PyTuple_GET_ITEM(__pyx_args, 79);
      values[80] = PyTuple_GET_ITEM(__pyx_args, 80);
      values[81] = PyTuple_GET_ITEM(__pyx_args, 81);
      values[82] = PyTuple_GET_ITEM(__pyx_args, 82);
      values[83] = PyTuple_GET_ITEM(__pyx_args, 83);
      values[84] = PyTuple_GET_ITEM(__pyx_args, 84);
      values[85] = PyTuple_GET_ITEM(__pyx_args, 85);
      values[86] = PyTuple_GET_ITEM(__pyx_args, 86);
      values[87] = PyTuple_GET_ITEM(__pyx_args, 87);
      values[88] = PyTuple_GET_ITEM(__pyx_args, 88);
      values[89] = PyTuple_GET_ITEM(__pyx_args, 89);
      values[90] = PyTuple_GET_ITEM(__pyx_args, 90);
      values[91] = PyTuple_GET_ITEM(__pyx_args, 91);
      values[92] = PyTuple_GET_ITEM(__pyx_args, 92);
      values[93] = PyTuple_GET_ITEM(__pyx_args, 93);
      values[94] = PyTuple_GET_ITEM(__pyx_args, 94);
      values[95] = PyTuple_GET_ITEM(__pyx_args, 95);
      values[96] = PyTuple_GET_ITEM(__pyx_args, 96);
      values[97] = PyTuple_GET_ITEM(__pyx_args, 97);
      values[98] = PyTuple_GET_ITEM(__pyx_args, 98);
      values[99] = PyTuple_GET_ITEM(__pyx_args, 99);
      values[100] = PyTuple_GET_ITEM(__pyx_args, 100);
      values[101] = PyTuple_GET_ITEM(__pyx_args, 101);
      values[102] = PyTuple_GET_ITEM(__pyx_args, 102);
      values[103] = PyTuple_GET_ITEM(__pyx_args, 103);
      values[104] = PyTuple_GET_ITEM(__pyx_args, 104);
      values[105] = PyTuple_GET_ITEM(__pyx_args, 105);
      values[106] = PyTuple_GET_ITEM(__pyx_args, 106);
      values[107] = PyTuple_GET_ITEM(__pyx_args, 107);
      values[108] = PyTuple_GET_ITEM(__pyx_args, 108);
      values[109] = PyTuple_GET_ITEM(__pyx_args, 109);
      values[110] = PyTuple_GET_ITEM(__pyx_args, 110);
      values[111] = PyTuple_GET_ITEM(__pyx_args, 111);
      values[112] = PyTuple_GET_ITEM(__pyx_args, 112);
      values[113] = PyTuple_GET_ITEM(__pyx_args, 113);
      values[114] = PyTuple_GET_ITEM(__pyx_args, 114);
      values[115] = PyTuple_GET_ITEM(__pyx_args, 115);
      values[116] = PyTuple_GET_ITEM(__pyx_args, 116);
      values[117] = PyTuple_GET_ITEM(__pyx_args, 117);
      values[118] = PyTuple_GET_ITEM(__pyx_args, 118);
      values[119] = PyTuple_GET_ITEM(__pyx_args, 119);
      values[120] = PyTuple_GET_ITEM(__pyx_args, 120);
      values[121] = PyTuple_GET_ITEM(__pyx_args, 121);
      values[122] = PyTuple_GET_ITEM(__pyx_args, 122);
      values[123] = PyTuple_GET_ITEM(__pyx_args, 123);
      values[124] = PyTuple_GET_ITEM(__pyx_args, 124);
      values[125] = PyTuple_GET_ITEM(__pyx_args, 125);
      values[126] = PyTuple_GET_ITEM(__pyx_args, 126);
      values[127] = PyTuple_GET_ITEM(__pyx_args, 127);
      values[128] = PyTuple_GET_ITEM(__pyx_args, 128);
      values[129] = PyTuple_GET_ITEM(__pyx_args, 129);
      values[130] = PyTuple_GET_ITEM(__pyx_args, 130);
      values[131] = PyTuple_GET_ITEM(__pyx_args, 131);
      values[132] = PyTuple_GET_ITEM(__pyx_args, 132);
      values[133] = PyTuple_GET_ITEM(__pyx_args, 133);
      values[134] = PyTuple_GET_ITEM(__pyx_args, 134);
      values[135] = PyTuple_GET_ITEM(__pyx_args, 135);
      values[136] = PyTuple_GET_ITEM(__pyx_args, 136);
      values[137] = PyTuple_GET_ITEM(__pyx_args, 137);
      values[138] = PyTuple_GET_ITEM(__pyx_args, 138);
      values[139] = PyTuple_GET_ITEM(__pyx_args, 139);
      values[140] = PyTuple_GET_ITEM(__pyx_args, 140);
      values[141] = PyTuple_GET_ITEM(__pyx_args, 141);
      values[142] = PyTuple_GET_ITEM(__pyx_args, 142);
      values[143] = PyTuple_GET_ITEM(__pyx_args, 143);
      values[144] = PyTuple_GET_ITEM(__pyx_args, 144);
      values[145] = PyTuple_GET_ITEM(__pyx_args, 145);
      values[146] = PyTuple_GET_ITEM(__pyx_args, 146);
      values[147] = PyTuple_GET_ITEM(__pyx_args, 147);
      values[148] = PyTuple_GET_ITEM(__pyx_args, 148);
      values[149] = PyTuple_GET_ITEM(__pyx_args, 149);
      values[150] = PyTuple_GET_ITEM(__pyx_args, 150);
      values[151] = PyTuple_GET_ITEM(__pyx_args, 151);
      values[152] = PyTuple_GET_ITEM(__pyx_args, 152);
      values[153] = PyTuple_GET_ITEM(__pyx_args, 153);
      values[154] = PyTuple_GET_ITEM(__pyx_args, 154);
      values[155] = PyTuple_GET_ITEM(__pyx_args, 155);
      values[156] = PyTuple_GET_ITEM(__pyx_args, 156);
      values[157] = PyTuple_GET_ITEM(__pyx_args, 157);
      values[158] = PyTuple_GET_ITEM(__pyx_args, 158);
      values[159] = PyTuple_GET_ITEM(__pyx_args, 159);
      values[160] = PyTuple_GET_ITEM(__pyx_args, 160);
      values[161] = PyTuple_GET_ITEM(__pyx_args, 161);
      values[162] = PyTuple_GET_ITEM(__pyx_args, 162);
      values[163] = PyTuple_GET_ITEM(__pyx_args, 163);
      values[164] = PyTuple_GET_ITEM(__pyx_args, 164);
      values[165] = PyTuple_GET_ITEM(__pyx_args, 165);
      values[166] = PyTuple_GET_ITEM(__pyx_args, 166);
      values[167] = PyTuple_GET_ITEM(__pyx_args, 167);
      values[168] = PyTuple_GET_ITEM(__pyx_args, 168);
      values[169] = PyTuple_GET_ITEM(__pyx_args, 169);
      values[170] = PyTuple_GET_ITEM(__pyx_args, 170);
      values[171] = PyTuple_GET_ITEM(__pyx_args, 171);
      values[172] = PyTuple_GET_ITEM(__pyx_args, 172);
      values[173] = PyTuple_GET_ITEM(__pyx_args, 173);
      values[174] = PyTuple_GET_ITEM(__pyx_args, 174);
      values[175] = PyTuple_GET_ITEM(__pyx_args, 175);
      values[176] = PyTuple_GET_ITEM(__pyx_args, 176);
      values[177] = PyTuple_GET_ITEM(__pyx_args, 177);
      values[178] = PyTuple_GET_ITEM(__pyx_args, 178);
      values[179] = PyTuple_GET_ITEM(__pyx_args, 179);
      values[180] = PyTuple_GET_ITEM(__pyx_args, 180);
      values[181] = PyTuple_GET_ITEM(__pyx_args, 181);
      values[182] = PyTuple_GET_ITEM(__pyx_args, 182);
      values[183] = PyTuple_GET_ITEM(__pyx_args, 183);
      values[184] = PyTuple_GET_ITEM(__pyx_args, 184);
      values[185] = PyTuple_GET_ITEM(__pyx_args, 185);
      values[186] = PyTuple_GET_ITEM(__pyx_args, 186);
      values[187] = PyTuple_GET_ITEM(__pyx_args, 187);
      values[188] = PyTuple_GET_ITEM(__pyx_args, 188);
      values[189] = PyTuple_GET_ITEM(__pyx_args, 189);
      values[190] = PyTuple_GET_ITEM(__pyx_args, 190);
      values[191] = PyTuple_GET_ITEM(__pyx_args, 191);
      values[192] = PyTuple_GET_ITEM(__pyx_args, 192);
      values[193] = PyTuple_GET_ITEM(__pyx_args, 193);
      values[194] = PyTuple_GET_ITEM(__pyx_args, 194);
      values[195] = PyTuple_GET_ITEM(__pyx_args, 195);
      values[196] = PyTuple_GET_ITEM(__pyx_args, 196);
      values[197] = PyTuple_GET_ITEM(__pyx_args, 197);
      values[198] = PyTuple_GET_ITEM(__pyx_args, 198);
      values[199] = PyTuple_GET_ITEM(__pyx_args, 199);
      values[200] = PyTuple_GET_ITEM(__pyx_args, 200);
      values[201] = PyTuple_GET_ITEM(__pyx_args, 201);
      values[202] = PyTuple_GET_ITEM(__pyx_args, 202);
      values[203] = PyTuple_GET_ITEM(__pyx_args, 203);
      values[204] = PyTuple_GET_ITEM(__pyx_args, 204);
      values[205] = PyTuple_GET_ITEM(__pyx_args, 205);
      values[206] = PyTuple_GET_ITEM(__pyx_args, 206);
      values[207] = PyTuple_GET_ITEM(__pyx_args, 207);
      values[208] = PyTuple_GET_ITEM(__pyx_args, 208);
      values[209] = PyTuple_GET_ITEM(__pyx_args, 209);
    }
    __pyx_v_mesh_trial_ref = ((PyArrayObject *)values[0]);
    __pyx_v_mesh_grad_trial_ref = ((PyArrayObject *)values[1]);
    __pyx_v_mesh_dof = ((PyArrayObject *)values[2]);
    __pyx_v_mesh_velocity_dof = ((PyArrayObject *)values[3]);
    __pyx_v_MOVING_DOMAIN = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_MOVING_DOMAIN == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1382, __pyx_L3_error)
    __pyx_v_PSTAB = __pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_PSTAB == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1383, __pyx_L3_error)
    __pyx_v_mesh_l2g = ((PyArrayObject *)values[6]);
    __pyx_v_dV_ref = ((PyArrayObject *)values[7]);
    __pyx_v_p_trial_ref = ((PyArrayObject *)values[8]);
    __pyx_v_p_grad_trial_ref = ((PyArrayObject *)values[9]);
    __pyx_v_p_test_ref = ((PyArrayObject *)values[10]);
    __pyx_v_p_grad_test_ref = ((PyArrayObject *)values[11]);
    __pyx_v_q_p = ((PyArrayObject *)values[12]);
    __pyx_v_q_grad_p = ((PyArrayObject *)values[13]);
    __pyx_v_ebqe_p = ((PyArrayObject *)values[14]);
    __pyx_v_ebqe_grad_p = ((PyArrayObject *)values[15]);
    __pyx_v_vel_trial_ref = ((PyArrayObject *)values[16]);
    __pyx_v_vel_grad_trial_ref = ((PyArrayObject *)values[17]);
    __pyx_v_vel_hess_trial_ref = ((PyArrayObject *)values[18]);
    __pyx_v_vel_test_ref = ((PyArrayObject *)values[19]);
    __pyx_v_vel_grad_test_ref = ((PyArrayObject *)values[20]);
    __pyx_v_mesh_trial_trace_ref = ((PyArrayObject *)values[21]);
    __pyx_v_mesh_grad_trial_trace_ref = ((PyArrayObject *)values[22]);
    __pyx_v_dS_ref = ((PyArrayObject *)values[23]);
    __pyx_v_p_trial_trace_ref = ((PyArrayObject *)values[24]);
    __pyx_v_p_grad_trial_trace_ref = ((PyArrayObject *)values[25]);
    __pyx_v_p_test_trace_ref = ((PyArrayObject *)values[26]);
    __pyx_v_p_grad_test_trace_ref = ((PyArrayObject *)values[27]);
    __pyx_v_vel_trial_trace_ref = ((PyArrayObject *)values[28]);
    __pyx_v_vel_grad_trial_trace_ref = ((PyArrayObject *)values[29]);
    __pyx_v_vel_test_trace_ref = ((PyArrayObject *)values[30]);
    __pyx_v_vel_grad_test_trace_ref = ((PyArrayObject *)values[31]);
    __pyx_v_normal_ref = ((PyArrayObject *)values[32]);
    __pyx_v_boundaryJac_ref = ((PyArrayObject *)values[33]);
    __pyx_v_eb_adjoint_sigma = __pyx_PyFloat_AsDouble(values[34]); if (unlikely((__pyx_v_eb_adjoint_sigma == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1412, __pyx_L3_error)
    __pyx_v_elementDiameter = ((PyArrayObject *)values[35]);
    __pyx_v_nodeDiametersArray = ((PyArrayObject *)values[36]);
    __pyx_v_hFactor = __pyx_PyFloat_AsDouble(values[37]); if (unlikely((__pyx_v_hFactor == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1415, __pyx_L3_error)
    __pyx_v_nElements_global = __Pyx_PyInt_As_int(values[38]); if (unlikely((__pyx_v_nElements_global == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1416, __pyx_L3_error)
    __pyx_v_nElements_owned = __Pyx_PyInt_As_int(values[39]); if (unlikely((__pyx_v_nElements_owned == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1417, __pyx_L3_error)
    __pyx_v_useRBLES = __pyx_PyFloat_AsDouble(values[40]); if (unlikely((__pyx_v_useRBLES == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1418, __pyx_L3_error)
    __pyx_v_useMetrics = __pyx_PyFloat_AsDouble(values[41]); if (unlikely((__pyx_v_useMetrics == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1419, __pyx_L3_error)
    __pyx_v_alphaBDF = __pyx_PyFloat_AsDouble(values[42]); if (unlikely((__pyx_v_alphaBDF == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1420, __pyx_L3_error)
    __pyx_v_epsFact_rho = __pyx_PyFloat_AsDouble(values[43]); if (unlikely((__pyx_v_epsFact_rho == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1421, __pyx_L3_error)
    __pyx_v_epsFact_mu = __pyx_PyFloat_AsDouble(values[44]); if (unlikely((__pyx_v_epsFact_mu == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1422, __pyx_L3_error)
    __pyx_v_sigma = __pyx_PyFloat_AsDouble(values[45]); if (unlikely((__pyx_v_sigma == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1423, __pyx_L3_error)
    __pyx_v_rho_0 = __pyx_PyFloat_AsDouble(values[46]); if (unlikely((__pyx_v_rho_0 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1424, __pyx_L3_error)
    __pyx_v_nu_0 = __pyx_PyFloat_AsDouble(values[47]); if (unlikely((__pyx_v_nu_0 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1425, __pyx_L3_error)
    __pyx_v_rho_1 = __pyx_PyFloat_AsDouble(values[48]); if (unlikely((__pyx_v_rho_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1426, __pyx_L3_error)
    __pyx_v_nu_1 = __pyx_PyFloat_AsDouble(values[49]); if (unlikely((__pyx_v_nu_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1427, __pyx_L3_error)
    __pyx_v_smagorinskyConstant = __pyx_PyFloat_AsDouble(values[50]); if (unlikely((__pyx_v_smagorinskyConstant == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1428, __pyx_L3_error)
    __pyx_v_turbulenceClosureModel = __Pyx_PyInt_As_int(values[51]); if (unlikely((__pyx_v_turbulenceClosureModel == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1429, __pyx_L3_error)
    __pyx_v_Ct_sge = __pyx_PyFloat_AsDouble(values[52]); if (unlikely((__pyx_v_Ct_sge == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1430, __pyx_L3_error)
    __pyx_v_Cd_sge = __pyx_PyFloat_AsDouble(values[53]); if (unlikely((__pyx_v_Cd_sge == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1431, __pyx_L3_error)
    __pyx_v_C_dg = __pyx_PyFloat_AsDouble(values[54]); if (unlikely((__pyx_v_C_dg == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1432, __pyx_L3_error)
    __pyx_v_C_b = __pyx_PyFloat_AsDouble(values[55]); if (unlikely((__pyx_v_C_b == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1433, __pyx_L3_error)
    __pyx_v_eps_solid = ((PyArrayObject *)values[56]);
    __pyx_v_phi_solid = ((PyArrayObject *)values[57]);
    __pyx_v_q_velocity_solid = ((PyArrayObject *)values[58]);
    __pyx_v_q_vos = ((PyArrayObject *)values[59]);
    __pyx_v_q_dvos_dt = ((PyArrayObject *)values[60]);
    __pyx_v_q_dragAlpha = ((PyArrayObject *)values[61]);
    __pyx_v_q_dragBeta = ((PyArrayObject *)values[62]);
    __pyx_v_q_mass_source = ((PyArrayObject *)values[63]);
    __pyx_v_q_turb_var_0 = ((PyArrayObject *)values[64]);
    __pyx_v_q_turb_var_1 = ((PyArrayObject *)values[65]);
    __pyx_v_q_turb_var_grad_0 = ((PyArrayObject *)values[66]);
    __pyx_v_p_l2g = ((PyArrayObject *)values[67]);
    __pyx_v_vel_l2g = ((PyArrayObject *)values[68]);
    __pyx_v_p_dof = ((PyArrayObject *)values[69]);
    __pyx_v_u_dof = ((PyArrayObject *)values[70]);
    __pyx_v_v_dof = ((PyArrayObject *)values[71]);
    __pyx_v_w_dof = ((PyArrayObject *)values[72]);
    __pyx_v_g = ((PyArrayObject *)values[73]);
    __pyx_v_useVF = __pyx_PyFloat_AsDouble(values[74]); if (unlikely((__pyx_v_useVF == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1451, __pyx_L3_error)
    __pyx_v_vf = ((PyArrayObject *)values[75]);
    __pyx_v_phi = ((PyArrayObject *)values[76]);
    __pyx_v_normal_phi = ((PyArrayObject *)values[77]);
    __pyx_v_kappa_phi = ((PyArrayObject *)values[78]);
    __pyx_v_q_mom_u_acc_beta_bdf = ((PyArrayObject *)values[79]);
    __pyx_v_q_mom_v_acc_beta_bdf = ((PyArrayObject *)values[80]);
    __pyx_v_q_mom_w_acc_beta_bdf = ((PyArrayObject *)values[81]);
    __pyx_v_q_dV = ((PyArrayObject *)values[82]);
    __pyx_v_q_dV_last = ((PyArrayObject *)values[83]);
    __pyx_v_q_velocity_sge = ((PyArrayObject *)values[84]);
    __pyx_v_ebqe_velocity_star = ((PyArrayObject *)values[85]);
    __pyx_v_q_cfl = ((PyArrayObject *)values[86]);
    __pyx_v_q_numDiff_u_last = ((PyArrayObject *)values[87]);
    __pyx_v_q_numDiff_v_last = ((PyArrayObject *)values[88]);
    __pyx_v_q_numDiff_w_last = ((PyArrayObject *)values[89]);
    __pyx_v_sdInfo_u_u_rowptr = ((PyArrayObject *)values[90]);
    __pyx_v_sdInfo_u_u_colind = ((PyArrayObject *)values[91]);
    __pyx_v_sdInfo_u_v_rowptr = ((PyArrayObject *)values[92]);
    __pyx_v_sdInfo_u_v_colind = ((PyArrayObject *)values[93]);
    __pyx_v_sdInfo_u_w_rowptr = ((PyArrayObject *)values[94]);
    __pyx_v_sdInfo_u_w_colind = ((PyArrayObject *)values[95]);
    __pyx_v_sdInfo_v_v_rowptr = ((PyArrayObject *)values[96]);
    __pyx_v_sdInfo_v_v_colind = ((PyArrayObject *)values[97]);
    __pyx_v_sdInfo_v_u_rowptr = ((PyArrayObject *)values[98]);
    __pyx_v_sdInfo_v_u_colind = ((PyArrayObject *)values[99]);
    __pyx_v_sdInfo_v_w_rowptr = ((PyArrayObject *)values[100]);
    __pyx_v_sdInfo_v_w_colind = ((PyArrayObject *)values[101]);
    __pyx_v_sdInfo_w_w_rowptr = ((PyArrayObject *)values[102]);
    __pyx_v_sdInfo_w_w_colind = ((PyArrayObject *)values[103]);
    __pyx_v_sdInfo_w_u_rowptr = ((PyArrayObject *)values[104]);
    __pyx_v_sdInfo_w_u_colind = ((PyArrayObject *)values[105]);
    __pyx_v_sdInfo_w_v_rowptr = ((PyArrayObject *)values[106]);
    __pyx_v_sdInfo_w_v_colind = ((PyArrayObject *)values[107]);
    __pyx_v_csrRowIndeces_p_p = ((PyArrayObject *)values[108]);
    __pyx_v_csrColumnOffsets_p_p = ((PyArrayObject *)values[109]);
    __pyx_v_csrRowIndeces_p_u = ((PyArrayObject *)values[110]);
    __pyx_v_csrColumnOffsets_p_u = ((PyArrayObject *)values[111]);
    __pyx_v_csrRowIndeces_p_v = ((PyArrayObject *)values[112]);
    __pyx_v_csrColumnOffsets_p_v = ((PyArrayObject *)values[113]);
    __pyx_v_csrRowIndeces_p_w = ((PyArrayObject *)values[114]);
    __pyx_v_csrColumnOffsets_p_w = ((PyArrayObject *)values[115]);
    __pyx_v_csrRowIndeces_u_p = ((PyArrayObject *)values[116]);
    __pyx_v_csrColumnOffsets_u_p = ((PyArrayObject *)values[117]);
    __pyx_v_csrRowIndeces_u_u = ((PyArrayObject *)values[118]);
    __pyx_v_csrColumnOffsets_u_u = ((PyArrayObject *)values[119]);
    __pyx_v_csrRowIndeces_u_v = ((PyArrayObject *)values[120]);
    __pyx_v_csrColumnOffsets_u_v = ((PyArrayObject *)values[121]);
    __pyx_v_csrRowIndeces_u_w = ((PyArrayObject *)values[122]);
    __pyx_v_csrColumnOffsets_u_w = ((PyArrayObject *)values[123]);
    __pyx_v_csrRowIndeces_v_p = ((PyArrayObject *)values[124]);
    __pyx_v_csrColumnOffsets_v_p = ((PyArrayObject *)values[125]);
    __pyx_v_csrRowIndeces_v_u = ((PyArrayObject *)values[126]);
    __pyx_v_csrColumnOffsets_v_u = ((PyArrayObject *)values[127]);
    __pyx_v_csrRowIndeces_v_v = ((PyArrayObject *)values[128]);
    __pyx_v_csrColumnOffsets_v_v = ((PyArrayObject *)values[129]);
    __pyx_v_csrRowIndeces_v_w = ((PyArrayObject *)values[130]);
    __pyx_v_csrColumnOffsets_v_w = ((PyArrayObject *)values[131]);
    __pyx_v_csrRowIndeces_w_p = ((PyArrayObject *)values[132]);
    __pyx_v_csrColumnOffsets_w_p = ((PyArrayObject *)values[133]);
    __pyx_v_csrRowIndeces_w_u = ((PyArrayObject *)values[134]);
    __pyx_v_csrColumnOffsets_w_u = ((PyArrayObject *)values[135]);
    __pyx_v_csrRowIndeces_w_v = ((PyArrayObject *)values[136]);
    __pyx_v_csrColumnOffsets_w_v = ((PyArrayObject *)values[137]);
    __pyx_v_csrRowIndeces_w_w = ((PyArrayObject *)values[138]);
    __pyx_v_csrColumnOffsets_w_w = ((PyArrayObject *)values[139]);
    __pyx_v_globalJacobian = values[140];
    __pyx_v_nExteriorElementBoundaries_global = __Pyx_PyInt_As_int(values[141]); if (unlikely((__pyx_v_nExteriorElementBoundaries_global == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1489, __pyx_L3_error)
    __pyx_v_exteriorElementBoundariesArray = ((PyArrayObject *)values[142]);
    __pyx_v_elementBoundaryElementsArray = ((PyArrayObject *)values[143]);
    __pyx_v_elementBoundaryLocalElementBoundariesArray = ((PyArrayObject *)values[144]);
    __pyx_v_ebqe_vf_ext = ((PyArrayObject *)values[145]);
    __pyx_v_bc_ebqe_vf_ext = ((PyArrayObject *)values[146]);
    __pyx_v_ebqe_phi_ext = ((PyArrayObject *)values[147]);
    __pyx_v_bc_ebqe_phi_ext = ((PyArrayObject *)values[148]);
    __pyx_v_ebqe_normal_phi_ext = ((PyArrayObject *)values[149]);
    __pyx_v_ebqe_kappa_phi_ext = ((PyArrayObject *)values[150]);
    __pyx_v_ebqe_vos_ext = ((PyArrayObject *)values[151]);
    __pyx_v_ebqe_turb_var_0 = ((PyArrayObject *)values[152]);
    __pyx_v_ebqe_turb_var_1 = ((PyArrayObject *)values[153]);
    __pyx_v_isDOFBoundary_p = ((PyArrayObject *)values[154]);
    __pyx_v_isDOFBoundary_u = ((PyArrayObject *)values[155]);
    __pyx_v_isDOFBoundary_v = ((PyArrayObject *)values[156]);
    __pyx_v_isDOFBoundary_w = ((PyArrayObject *)values[157]);
    __pyx_v_isAdvectiveFluxBoundary_p = ((PyArrayObject *)values[158]);
    __pyx_v_isAdvectiveFluxBoundary_u = ((PyArrayObject *)values[159]);
    __pyx_v_isAdvectiveFluxBoundary_v = ((PyArrayObject *)values[160]);
    __pyx_v_isAdvectiveFluxBoundary_w = ((PyArrayObject *)values[161]);
    __pyx_v_isDiffusiveFluxBoundary_u = ((PyArrayObject *)values[162]);
    __pyx_v_isDiffusiveFluxBoundary_v = ((PyArrayObject *)values[163]);
    __pyx_v_isDiffusiveFluxBoundary_w = ((PyArrayObject *)values[164]);
    __pyx_v_ebqe_bc_p_ext = ((PyArrayObject *)values[165]);
    __pyx_v_ebqe_bc_flux_mass_ext = ((PyArrayObject *)values[166]);
    __pyx_v_ebqe_bc_flux_mom_u_adv_ext = ((PyArrayObject *)values[167]);
    __pyx_v_ebqe_bc_flux_mom_v_adv_ext = ((PyArrayObject *)values[168]);
    __pyx_v_ebqe_bc_flux_mom_w_adv_ext = ((PyArrayObject *)values[169]);
    __pyx_v_ebqe_bc_u_ext = ((PyArrayObject *)values[170]);
    __pyx_v_ebqe_bc_flux_u_diff_ext = ((PyArrayObject *)values[171]);
    __pyx_v_ebqe_penalty_ext = ((PyArrayObject *)values[172]);
    __pyx_v_ebqe_bc_v_ext = ((PyArrayObject *)values[173]);
    __pyx_v_ebqe_bc_flux_v_diff_ext = ((PyArrayObject *)values[174]);
    __pyx_v_ebqe_bc_w_ext = ((PyArrayObject *)values[175]);
    __pyx_v_ebqe_bc_flux_w_diff_ext = ((PyArrayObject *)values[176]);
    __pyx_v_csrColumnOffsets_eb_p_p = ((PyArrayObject *)values[177]);
    __pyx_v_csrColumnOffsets_eb_p_u = ((PyArrayObject *)values[178]);
    __pyx_v_csrColumnOffsets_eb_p_v = ((PyArrayObject *)values[179]);
    __pyx_v_csrColumnOffsets_eb_p_w = ((PyArrayObject *)values[180]);
    __pyx_v_csrColumnOffsets_eb_u_p = ((PyArrayObject *)values[181]);
    __pyx_v_csrColumnOffsets_eb_u_u = ((PyArrayObject *)values[182]);
    __pyx_v_csrColumnOffsets_eb_u_v = ((PyArrayObject *)values[183]);
    __pyx_v_csrColumnOffsets_eb_u_w = ((PyArrayObject *)values[184]);
    __pyx_v_csrColumnOffsets_eb_v_p = ((PyArrayObject *)values[185]);
    __pyx_v_csrColumnOffsets_eb_v_u = ((PyArrayObject *)values[186]);
    __pyx_v_csrColumnOffsets_eb_v_v = ((PyArrayObject *)values[187]);
    __pyx_v_csrColumnOffsets_eb_v_w = ((PyArrayObject *)values[188]);
    __pyx_v_csrColumnOffsets_eb_w_p = ((PyArrayObject *)values[189]);
    __pyx_v_csrColumnOffsets_eb_w_u = ((PyArrayObject *)values[190]);
    __pyx_v_csrColumnOffsets_eb_w_v = ((PyArrayObject *)values[191]);
    __pyx_v_csrColumnOffsets_eb_w_w = ((PyArrayObject *)values[192]);
    __pyx_v_elementFlags = ((PyArrayObject *)values[193]);
    __pyx_v_nParticles = __Pyx_PyInt_As_int(values[194]); if (unlikely((__pyx_v_nParticles == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1544, __pyx_L3_error)
    __pyx_v_particle_epsFact = __pyx_PyFloat_AsDouble(values[195]); if (unlikely((__pyx_v_particle_epsFact == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1545, __pyx_L3_error)
    __pyx_v_particle_alpha = __pyx_PyFloat_AsDouble(values[196]); if (unlikely((__pyx_v_particle_alpha == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1546, __pyx_L3_error)
    __pyx_v_particle_beta = __pyx_PyFloat_AsDouble(values[197]); if (unlikely((__pyx_v_particle_beta == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1547, __pyx_L3_error)
    __pyx_v_particle_penalty_constant = __pyx_PyFloat_AsDouble(values[198]); if (unlikely((__pyx_v_particle_penalty_constant == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1548, __pyx_L3_error)
    __pyx_v_particle_signed_distances = ((PyArrayObject *)values[199]);
    __pyx_v_particle_signed_distance_normals = ((PyArrayObject *)values[200]);
    __pyx_v_particle_velocities = ((PyArrayObject *)values[201]);
    __pyx_v_particle_centroids = ((PyArrayObject *)values[202]);
    __pyx_v_particle_nitsche = __pyx_PyFloat_AsDouble(values[203]); if (unlikely((__pyx_v_particle_nitsche == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1553, __pyx_L3_error)
    __pyx_v_KILL_PRESSURE_TERM = __Pyx_PyInt_As_int(values[204]); if (unlikely((__pyx_v_KILL_PRESSURE_TERM == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1554, __pyx_L3_error)
    __pyx_v_MATERIAL_PARAMETERS_AS_FUNCTION = __Pyx_PyInt_As_int(values[205]); if (unlikely((__pyx_v_MATERIAL_PARAMETERS_AS_FUNCTION == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1555, __pyx_L3_error)
    __pyx_v_density_as_function = ((PyArrayObject *)values[206]);
    __pyx_v_dynamic_viscosity_as_function = ((PyArrayObject *)values[207]);
    __pyx_v_ebqe_density_as_function = ((PyArrayObject *)values[208]);
    __pyx_v_ebqe_dynamic_viscosity_as_function = ((PyArrayObject *)values[209]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1377, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mprans.cRANS3PF.RANS3PF.calculateJacobian", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "mesh_trial_ref", 0))) __PYX_ERR(0, 1378, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_grad_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "mesh_grad_trial_ref", 0))) __PYX_ERR(0, 1379, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_dof), __pyx_ptype_5numpy_ndarray, 1, "mesh_dof", 0))) __PYX_ERR(0, 1380, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_velocity_dof), __pyx_ptype_5numpy_ndarray, 1, "mesh_velocity_dof", 0))) __PYX_ERR(0, 1381, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_l2g), __pyx_ptype_5numpy_ndarray, 1, "mesh_l2g", 0))) __PYX_ERR(0, 1384, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dV_ref), __pyx_ptype_5numpy_ndarray, 1, "dV_ref", 0))) __PYX_ERR(0, 1385, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "p_trial_ref", 0))) __PYX_ERR(0, 1386, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_grad_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "p_grad_trial_ref", 0))) __PYX_ERR(0, 1387, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_test_ref), __pyx_ptype_5numpy_ndarray, 1, "p_test_ref", 0))) __PYX_ERR(0, 1388, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_grad_test_ref), __pyx_ptype_5numpy_ndarray, 1, "p_grad_test_ref", 0))) __PYX_ERR(0, 1389, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_p), __pyx_ptype_5numpy_ndarray, 1, "q_p", 0))) __PYX_ERR(0, 1390, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_grad_p), __pyx_ptype_5numpy_ndarray, 1, "q_grad_p", 0))) __PYX_ERR(0, 1391, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_p), __pyx_ptype_5numpy_ndarray, 1, "ebqe_p", 0))) __PYX_ERR(0, 1392, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_grad_p), __pyx_ptype_5numpy_ndarray, 1, "ebqe_grad_p", 0))) __PYX_ERR(0, 1393, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_trial_ref", 0))) __PYX_ERR(0, 1394, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_grad_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_grad_trial_ref", 0))) __PYX_ERR(0, 1395, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_hess_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_hess_trial_ref", 0))) __PYX_ERR(0, 1396, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_test_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_test_ref", 0))) __PYX_ERR(0, 1397, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_grad_test_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_grad_test_ref", 0))) __PYX_ERR(0, 1398, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "mesh_trial_trace_ref", 0))) __PYX_ERR(0, 1399, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_grad_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "mesh_grad_trial_trace_ref", 0))) __PYX_ERR(0, 1400, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dS_ref), __pyx_ptype_5numpy_ndarray, 1, "dS_ref", 0))) __PYX_ERR(0, 1401, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "p_trial_trace_ref", 0))) __PYX_ERR(0, 1402, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_grad_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "p_grad_trial_trace_ref", 0))) __PYX_ERR(0, 1403, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_test_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "p_test_trace_ref", 0))) __PYX_ERR(0, 1404, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_grad_test_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "p_grad_test_trace_ref", 0))) __PYX_ERR(0, 1405, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_trial_trace_ref", 0))) __PYX_ERR(0, 1406, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_grad_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_grad_trial_trace_ref", 0))) __PYX_ERR(0, 1407, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_test_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_test_trace_ref", 0))) __PYX_ERR(0, 1408, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_grad_test_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_grad_test_trace_ref", 0))) __PYX_ERR(0, 1409, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_normal_ref), __pyx_ptype_5numpy_ndarray, 1, "normal_ref", 0))) __PYX_ERR(0, 1410, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_boundaryJac_ref), __pyx_ptype_5numpy_ndarray, 1, "boundaryJac_ref", 0))) __PYX_ERR(0, 1411, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_elementDiameter), __pyx_ptype_5numpy_ndarray, 1, "elementDiameter", 0))) __PYX_ERR(0, 1413, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_nodeDiametersArray), __pyx_ptype_5numpy_ndarray, 1, "nodeDiametersArray", 0))) __PYX_ERR(0, 1414, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_eps_solid), __pyx_ptype_5numpy_ndarray, 1, "eps_solid", 0))) __PYX_ERR(0, 1435, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_phi_solid), __pyx_ptype_5numpy_ndarray, 1, "phi_solid", 0))) __PYX_ERR(0, 1436, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_velocity_solid), __pyx_ptype_5numpy_ndarray, 1, "q_velocity_solid", 0))) __PYX_ERR(0, 1437, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_vos), __pyx_ptype_5numpy_ndarray, 1, "q_vos", 0))) __PYX_ERR(0, 1438, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_dvos_dt), __pyx_ptype_5numpy_ndarray, 1, "q_dvos_dt", 0))) __PYX_ERR(0, 1439, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_dragAlpha), __pyx_ptype_5numpy_ndarray, 1, "q_dragAlpha", 0))) __PYX_ERR(0, 1440, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_dragBeta), __pyx_ptype_5numpy_ndarray, 1, "q_dragBeta", 0))) __PYX_ERR(0, 1441, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_mass_source), __pyx_ptype_5numpy_ndarray, 1, "q_mass_source", 0))) __PYX_ERR(0, 1442, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_turb_var_0), __pyx_ptype_5numpy_ndarray, 1, "q_turb_var_0", 0))) __PYX_ERR(0, 1443, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_turb_var_1), __pyx_ptype_5numpy_ndarray, 1, "q_turb_var_1", 0))) __PYX_ERR(0, 1444, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_turb_var_grad_0), __pyx_ptype_5numpy_ndarray, 1, "q_turb_var_grad_0", 0))) __PYX_ERR(0, 1445, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_l2g), __pyx_ptype_5numpy_ndarray, 1, "p_l2g", 0))) __PYX_ERR(0, 1447, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_l2g), __pyx_ptype_5numpy_ndarray, 1, "vel_l2g", 0))) __PYX_ERR(0, 1448, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_dof), __pyx_ptype_5numpy_ndarray, 1, "p_dof", 0))) __PYX_ERR(0, 1449, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_u_dof), __pyx_ptype_5numpy_ndarray, 1, "u_dof", 0))) __PYX_ERR(0, 1449, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_v_dof), __pyx_ptype_5numpy_ndarray, 1, "v_dof", 0))) __PYX_ERR(0, 1449, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_w_dof), __pyx_ptype_5numpy_ndarray, 1, "w_dof", 0))) __PYX_ERR(0, 1449, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_g), __pyx_ptype_5numpy_ndarray, 1, "g", 0))) __PYX_ERR(0, 1450, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vf), __pyx_ptype_5numpy_ndarray, 1, "vf", 0))) __PYX_ERR(0, 1452, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_phi), __pyx_ptype_5numpy_ndarray, 1, "phi", 0))) __PYX_ERR(0, 1453, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_normal_phi), __pyx_ptype_5numpy_ndarray, 1, "normal_phi", 0))) __PYX_ERR(0, 1454, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_kappa_phi), __pyx_ptype_5numpy_ndarray, 1, "kappa_phi", 0))) __PYX_ERR(0, 1455, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_mom_u_acc_beta_bdf), __pyx_ptype_5numpy_ndarray, 1, "q_mom_u_acc_beta_bdf", 0))) __PYX_ERR(0, 1456, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_mom_v_acc_beta_bdf), __pyx_ptype_5numpy_ndarray, 1, "q_mom_v_acc_beta_bdf", 0))) __PYX_ERR(0, 1456, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_mom_w_acc_beta_bdf), __pyx_ptype_5numpy_ndarray, 1, "q_mom_w_acc_beta_bdf", 0))) __PYX_ERR(0, 1456, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_dV), __pyx_ptype_5numpy_ndarray, 1, "q_dV", 0))) __PYX_ERR(0, 1457, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_dV_last), __pyx_ptype_5numpy_ndarray, 1, "q_dV_last", 0))) __PYX_ERR(0, 1458, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_velocity_sge), __pyx_ptype_5numpy_ndarray, 1, "q_velocity_sge", 0))) __PYX_ERR(0, 1459, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_velocity_star), __pyx_ptype_5numpy_ndarray, 1, "ebqe_velocity_star", 0))) __PYX_ERR(0, 1460, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_cfl), __pyx_ptype_5numpy_ndarray, 1, "q_cfl", 0))) __PYX_ERR(0, 1461, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_numDiff_u_last), __pyx_ptype_5numpy_ndarray, 1, "q_numDiff_u_last", 0))) __PYX_ERR(0, 1462, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_numDiff_v_last), __pyx_ptype_5numpy_ndarray, 1, "q_numDiff_v_last", 0))) __PYX_ERR(0, 1462, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_numDiff_w_last), __pyx_ptype_5numpy_ndarray, 1, "q_numDiff_w_last", 0))) __PYX_ERR(0, 1462, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_u_u_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_u_u_rowptr", 0))) __PYX_ERR(0, 1463, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_u_u_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_u_u_colind", 0))) __PYX_ERR(0, 1463, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_u_v_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_u_v_rowptr", 0))) __PYX_ERR(0, 1464, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_u_v_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_u_v_colind", 0))) __PYX_ERR(0, 1464, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_u_w_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_u_w_rowptr", 0))) __PYX_ERR(0, 1465, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_u_w_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_u_w_colind", 0))) __PYX_ERR(0, 1465, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_v_v_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_v_v_rowptr", 0))) __PYX_ERR(0, 1466, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_v_v_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_v_v_colind", 0))) __PYX_ERR(0, 1466, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_v_u_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_v_u_rowptr", 0))) __PYX_ERR(0, 1467, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_v_u_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_v_u_colind", 0))) __PYX_ERR(0, 1467, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_v_w_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_v_w_rowptr", 0))) __PYX_ERR(0, 1468, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_v_w_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_v_w_colind", 0))) __PYX_ERR(0, 1468, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_w_w_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_w_w_rowptr", 0))) __PYX_ERR(0, 1469, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_w_w_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_w_w_colind", 0))) __PYX_ERR(0, 1469, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_w_u_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_w_u_rowptr", 0))) __PYX_ERR(0, 1470, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_w_u_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_w_u_colind", 0))) __PYX_ERR(0, 1470, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_w_v_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_w_v_rowptr", 0))) __PYX_ERR(0, 1471, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_w_v_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_w_v_colind", 0))) __PYX_ERR(0, 1471, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_p_p), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_p_p", 0))) __PYX_ERR(0, 1472, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_p_p), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_p_p", 0))) __PYX_ERR(0, 1472, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_p_u), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_p_u", 0))) __PYX_ERR(0, 1473, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_p_u), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_p_u", 0))) __PYX_ERR(0, 1473, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_p_v), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_p_v", 0))) __PYX_ERR(0, 1474, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_p_v), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_p_v", 0))) __PYX_ERR(0, 1474, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_p_w), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_p_w", 0))) __PYX_ERR(0, 1475, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_p_w), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_p_w", 0))) __PYX_ERR(0, 1475, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_u_p), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_u_p", 0))) __PYX_ERR(0, 1476, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_u_p), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_u_p", 0))) __PYX_ERR(0, 1476, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_u_u), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_u_u", 0))) __PYX_ERR(0, 1477, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_u_u), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_u_u", 0))) __PYX_ERR(0, 1477, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_u_v), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_u_v", 0))) __PYX_ERR(0, 1478, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_u_v), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_u_v", 0))) __PYX_ERR(0, 1478, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_u_w), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_u_w", 0))) __PYX_ERR(0, 1479, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_u_w), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_u_w", 0))) __PYX_ERR(0, 1479, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_v_p), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_v_p", 0))) __PYX_ERR(0, 1480, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_v_p), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_v_p", 0))) __PYX_ERR(0, 1480, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_v_u), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_v_u", 0))) __PYX_ERR(0, 1481, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_v_u), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_v_u", 0))) __PYX_ERR(0, 1481, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_v_v), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_v_v", 0))) __PYX_ERR(0, 1482, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_v_v), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_v_v", 0))) __PYX_ERR(0, 1482, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_v_w), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_v_w", 0))) __PYX_ERR(0, 1483, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_v_w), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_v_w", 0))) __PYX_ERR(0, 1483, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_w_p), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_w_p", 0))) __PYX_ERR(0, 1484, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_w_p), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_w_p", 0))) __PYX_ERR(0, 1484, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_w_u), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_w_u", 0))) __PYX_ERR(0, 1485, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_w_u), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_w_u", 0))) __PYX_ERR(0, 1485, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_w_v), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_w_v", 0))) __PYX_ERR(0, 1486, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_w_v), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_w_v", 0))) __PYX_ERR(0, 1486, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_w_w), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_w_w", 0))) __PYX_ERR(0, 1487, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_w_w), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_w_w", 0))) __PYX_ERR(0, 1487, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_exteriorElementBoundariesArray), __pyx_ptype_5numpy_ndarray, 1, "exteriorElementBoundariesArray", 0))) __PYX_ERR(0, 1490, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_elementBoundaryElementsArray), __pyx_ptype_5numpy_ndarray, 1, "elementBoundaryElementsArray", 0))) __PYX_ERR(0, 1491, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_elementBoundaryLocalElementBoundariesArray), __pyx_ptype_5numpy_ndarray, 1, "elementBoundaryLocalElementBoundariesArray", 0))) __PYX_ERR(0, 1492, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_vf_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_vf_ext", 0))) __PYX_ERR(0, 1493, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_bc_ebqe_vf_ext), __pyx_ptype_5numpy_ndarray, 1, "bc_ebqe_vf_ext", 0))) __PYX_ERR(0, 1494, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_phi_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_phi_ext", 0))) __PYX_ERR(0, 1495, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_bc_ebqe_phi_ext), __pyx_ptype_5numpy_ndarray, 1, "bc_ebqe_phi_ext", 0))) __PYX_ERR(0, 1496, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_normal_phi_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_normal_phi_ext", 0))) __PYX_ERR(0, 1497, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_kappa_phi_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_kappa_phi_ext", 0))) __PYX_ERR(0, 1498, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_vos_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_vos_ext", 0))) __PYX_ERR(0, 1500, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_turb_var_0), __pyx_ptype_5numpy_ndarray, 1, "ebqe_turb_var_0", 0))) __PYX_ERR(0, 1501, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_turb_var_1), __pyx_ptype_5numpy_ndarray, 1, "ebqe_turb_var_1", 0))) __PYX_ERR(0, 1502, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isDOFBoundary_p), __pyx_ptype_5numpy_ndarray, 1, "isDOFBoundary_p", 0))) __PYX_ERR(0, 1504, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isDOFBoundary_u), __pyx_ptype_5numpy_ndarray, 1, "isDOFBoundary_u", 0))) __PYX_ERR(0, 1505, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isDOFBoundary_v), __pyx_ptype_5numpy_ndarray, 1, "isDOFBoundary_v", 0))) __PYX_ERR(0, 1506, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isDOFBoundary_w), __pyx_ptype_5numpy_ndarray, 1, "isDOFBoundary_w", 0))) __PYX_ERR(0, 1507, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isAdvectiveFluxBoundary_p), __pyx_ptype_5numpy_ndarray, 1, "isAdvectiveFluxBoundary_p", 0))) __PYX_ERR(0, 1508, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isAdvectiveFluxBoundary_u), __pyx_ptype_5numpy_ndarray, 1, "isAdvectiveFluxBoundary_u", 0))) __PYX_ERR(0, 1509, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isAdvectiveFluxBoundary_v), __pyx_ptype_5numpy_ndarray, 1, "isAdvectiveFluxBoundary_v", 0))) __PYX_ERR(0, 1510, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isAdvectiveFluxBoundary_w), __pyx_ptype_5numpy_ndarray, 1, "isAdvectiveFluxBoundary_w", 0))) __PYX_ERR(0, 1511, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isDiffusiveFluxBoundary_u), __pyx_ptype_5numpy_ndarray, 1, "isDiffusiveFluxBoundary_u", 0))) __PYX_ERR(0, 1512, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isDiffusiveFluxBoundary_v), __pyx_ptype_5numpy_ndarray, 1, "isDiffusiveFluxBoundary_v", 0))) __PYX_ERR(0, 1513, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isDiffusiveFluxBoundary_w), __pyx_ptype_5numpy_ndarray, 1, "isDiffusiveFluxBoundary_w", 0))) __PYX_ERR(0, 1514, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_p_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_p_ext", 0))) __PYX_ERR(0, 1515, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_flux_mass_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_flux_mass_ext", 0))) __PYX_ERR(0, 1516, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_flux_mom_u_adv_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_flux_mom_u_adv_ext", 0))) __PYX_ERR(0, 1517, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_flux_mom_v_adv_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_flux_mom_v_adv_ext", 0))) __PYX_ERR(0, 1518, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_flux_mom_w_adv_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_flux_mom_w_adv_ext", 0))) __PYX_ERR(0, 1519, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_u_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_u_ext", 0))) __PYX_ERR(0, 1520, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_flux_u_diff_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_flux_u_diff_ext", 0))) __PYX_ERR(0, 1521, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_penalty_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_penalty_ext", 0))) __PYX_ERR(0, 1522, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_v_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_v_ext", 0))) __PYX_ERR(0, 1523, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_flux_v_diff_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_flux_v_diff_ext", 0))) __PYX_ERR(0, 1524, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_w_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_w_ext", 0))) __PYX_ERR(0, 1525, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_flux_w_diff_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_flux_w_diff_ext", 0))) __PYX_ERR(0, 1526, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_p_p), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_p_p", 0))) __PYX_ERR(0, 1527, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_p_u), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_p_u", 0))) __PYX_ERR(0, 1528, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_p_v), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_p_v", 0))) __PYX_ERR(0, 1529, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_p_w), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_p_w", 0))) __PYX_ERR(0, 1530, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_u_p), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_u_p", 0))) __PYX_ERR(0, 1531, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_u_u), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_u_u", 0))) __PYX_ERR(0, 1532, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_u_v), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_u_v", 0))) __PYX_ERR(0, 1533, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_u_w), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_u_w", 0))) __PYX_ERR(0, 1534, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_v_p), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_v_p", 0))) __PYX_ERR(0, 1535, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_v_u), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_v_u", 0))) __PYX_ERR(0, 1536, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_v_v), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_v_v", 0))) __PYX_ERR(0, 1537, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_v_w), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_v_w", 0))) __PYX_ERR(0, 1538, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_w_p), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_w_p", 0))) __PYX_ERR(0, 1539, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_w_u), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_w_u", 0))) __PYX_ERR(0, 1540, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_w_v), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_w_v", 0))) __PYX_ERR(0, 1541, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_w_w), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_w_w", 0))) __PYX_ERR(0, 1542, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_elementFlags), __pyx_ptype_5numpy_ndarray, 1, "elementFlags", 0))) __PYX_ERR(0, 1543, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particle_signed_distances), __pyx_ptype_5numpy_ndarray, 1, "particle_signed_distances", 0))) __PYX_ERR(0, 1549, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particle_signed_distance_normals), __pyx_ptype_5numpy_ndarray, 1, "particle_signed_distance_normals", 0))) __PYX_ERR(0, 1550, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particle_velocities), __pyx_ptype_5numpy_ndarray, 1, "particle_velocities", 0))) __PYX_ERR(0, 1551, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particle_centroids), __pyx_ptype_5numpy_ndarray, 1, "particle_centroids", 0))) __PYX_ERR(0, 1552, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_density_as_function), __pyx_ptype_5numpy_ndarray, 1, "density_as_function", 0))) __PYX_ERR(0, 1556, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dynamic_viscosity_as_function), __pyx_ptype_5numpy_ndarray, 1, "dynamic_viscosity_as_function", 0))) __PYX_ERR(0, 1557, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_density_as_function), __pyx_ptype_5numpy_ndarray, 1, "ebqe_density_as_function", 0))) __PYX_ERR(0, 1558, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_dynamic_viscosity_as_function), __pyx_ptype_5numpy_ndarray, 1, "ebqe_dynamic_viscosity_as_function", 0))) __PYX_ERR(0, 1559, __pyx_L1_error)
  __pyx_r = __pyx_pf_6mprans_8cRANS3PF_7RANS3PF_6calculateJacobian(((struct __pyx_obj_6mprans_8cRANS3PF_RANS3PF *)__pyx_v_self), __pyx_v_mesh_trial_ref, __pyx_v_mesh_grad_trial_ref, __pyx_v_mesh_dof, __pyx_v_mesh_velocity_dof, __pyx_v_MOVING_DOMAIN, __pyx_v_PSTAB, __pyx_v_mesh_l2g, __pyx_v_dV_ref, __pyx_v_p_trial_ref, __pyx_v_p_grad_trial_ref, __pyx_v_p_test_ref, __pyx_v_p_grad_test_ref, __pyx_v_q_p, __pyx_v_q_grad_p, __pyx_v_ebqe_p, __pyx_v_ebqe_grad_p, __pyx_v_vel_trial_ref, __pyx_v_vel_grad_trial_ref, __pyx_v_vel_hess_trial_ref, __pyx_v_vel_test_ref, __pyx_v_vel_grad_test_ref, __pyx_v_mesh_trial_trace_ref, __pyx_v_mesh_grad_trial_trace_ref, __pyx_v_dS_ref, __pyx_v_p_trial_trace_ref, __pyx_v_p_grad_trial_trace_ref, __pyx_v_p_test_trace_ref, __pyx_v_p_grad_test_trace_ref, __pyx_v_vel_trial_trace_ref, __pyx_v_vel_grad_trial_trace_ref, __pyx_v_vel_test_trace_ref, __pyx_v_vel_grad_test_trace_ref, __pyx_v_normal_ref, __pyx_v_boundaryJac_ref, __pyx_v_eb_adjoint_sigma, __pyx_v_elementDiameter, __pyx_v_nodeDiametersArray, __pyx_v_hFactor, __pyx_v_nElements_global, __pyx_v_nElements_owned, __pyx_v_useRBLES, __pyx_v_useMetrics, __pyx_v_alphaBDF, __pyx_v_epsFact_rho, __pyx_v_epsFact_mu, __pyx_v_sigma, __pyx_v_rho_0, __pyx_v_nu_0, __pyx_v_rho_1, __pyx_v_nu_1, __pyx_v_smagorinskyConstant, __pyx_v_turbulenceClosureModel, __pyx_v_Ct_sge, __pyx_v_Cd_sge, __pyx_v_C_dg, __pyx_v_C_b, __pyx_v_eps_solid, __pyx_v_phi_solid, __pyx_v_q_velocity_solid, __pyx_v_q_vos, __pyx_v_q_dvos_dt, __pyx_v_q_dragAlpha, __pyx_v_q_dragBeta, __pyx_v_q_mass_source, __pyx_v_q_turb_var_0, __pyx_v_q_turb_var_1, __pyx_v_q_turb_var_grad_0, __pyx_v_p_l2g, __pyx_v_vel_l2g, __pyx_v_p_dof, __pyx_v_u_dof, __pyx_v_v_dof, __pyx_v_w_dof, __pyx_v_g, __pyx_v_useVF, __pyx_v_vf, __pyx_v_phi, __pyx_v_normal_phi, __pyx_v_kappa_phi, __pyx_v_q_mom_u_acc_beta_bdf, __pyx_v_q_mom_v_acc_beta_bdf, __pyx_v_q_mom_w_acc_beta_bdf, __pyx_v_q_dV, __pyx_v_q_dV_last, __pyx_v_q_velocity_sge, __pyx_v_ebqe_velocity_star, __pyx_v_q_cfl, __pyx_v_q_numDiff_u_last, __pyx_v_q_numDiff_v_last, __pyx_v_q_numDiff_w_last, __pyx_v_sdInfo_u_u_rowptr, __pyx_v_sdInfo_u_u_colind, __pyx_v_sdInfo_u_v_rowptr, __pyx_v_sdInfo_u_v_colind, __pyx_v_sdInfo_u_w_rowptr, __pyx_v_sdInfo_u_w_colind, __pyx_v_sdInfo_v_v_rowptr, __pyx_v_sdInfo_v_v_colind, __pyx_v_sdInfo_v_u_rowptr, __pyx_v_sdInfo_v_u_colind, __pyx_v_sdInfo_v_w_rowptr, __pyx_v_sdInfo_v_w_colind, __pyx_v_sdInfo_w_w_rowptr, __pyx_v_sdInfo_w_w_colind, __pyx_v_sdInfo_w_u_rowptr, __pyx_v_sdInfo_w_u_colind, __pyx_v_sdInfo_w_v_rowptr, __pyx_v_sdInfo_w_v_colind, __pyx_v_csrRowIndeces_p_p, __pyx_v_csrColumnOffsets_p_p, __pyx_v_csrRowIndeces_p_u, __pyx_v_csrColumnOffsets_p_u, __pyx_v_csrRowIndeces_p_v, __pyx_v_csrColumnOffsets_p_v, __pyx_v_csrRowIndeces_p_w, __pyx_v_csrColumnOffsets_p_w, __pyx_v_csrRowIndeces_u_p, __pyx_v_csrColumnOffsets_u_p, __pyx_v_csrRowIndeces_u_u, __pyx_v_csrColumnOffsets_u_u, __pyx_v_csrRowIndeces_u_v, __pyx_v_csrColumnOffsets_u_v, __pyx_v_csrRowIndeces_u_w, __pyx_v_csrColumnOffsets_u_w, __pyx_v_csrRowIndeces_v_p, __pyx_v_csrColumnOffsets_v_p, __pyx_v_csrRowIndeces_v_u, __pyx_v_csrColumnOffsets_v_u, __pyx_v_csrRowIndeces_v_v, __pyx_v_csrColumnOffsets_v_v, __pyx_v_csrRowIndeces_v_w, __pyx_v_csrColumnOffsets_v_w, __pyx_v_csrRowIndeces_w_p, __pyx_v_csrColumnOffsets_w_p, __pyx_v_csrRowIndeces_w_u, __pyx_v_csrColumnOffsets_w_u, __pyx_v_csrRowIndeces_w_v, __pyx_v_csrColumnOffsets_w_v, __pyx_v_csrRowIndeces_w_w, __pyx_v_csrColumnOffsets_w_w, __pyx_v_globalJacobian, __pyx_v_nExteriorElementBoundaries_global, __pyx_v_exteriorElementBoundariesArray, __pyx_v_elementBoundaryElementsArray, __pyx_v_elementBoundaryLocalElementBoundariesArray, __pyx_v_ebqe_vf_ext, __pyx_v_bc_ebqe_vf_ext, __pyx_v_ebqe_phi_ext, __pyx_v_bc_ebqe_phi_ext, __pyx_v_ebqe_normal_phi_ext, __pyx_v_ebqe_kappa_phi_ext, __pyx_v_ebqe_vos_ext, __pyx_v_ebqe_turb_var_0, __pyx_v_ebqe_turb_var_1, __pyx_v_isDOFBoundary_p, __pyx_v_isDOFBoundary_u, __pyx_v_isDOFBoundary_v, __pyx_v_isDOFBoundary_w, __pyx_v_isAdvectiveFluxBoundary_p, __pyx_v_isAdvectiveFluxBoundary_u, __pyx_v_isAdvectiveFluxBoundary_v, __pyx_v_isAdvectiveFluxBoundary_w, __pyx_v_isDiffusiveFluxBoundary_u, __pyx_v_isDiffusiveFluxBoundary_v, __pyx_v_isDiffusiveFluxBoundary_w, __pyx_v_ebqe_bc_p_ext, __pyx_v_ebqe_bc_flux_mass_ext, __pyx_v_ebqe_bc_flux_mom_u_adv_ext, __pyx_v_ebqe_bc_flux_mom_v_adv_ext, __pyx_v_ebqe_bc_flux_mom_w_adv_ext, __pyx_v_ebqe_bc_u_ext, __pyx_v_ebqe_bc_flux_u_diff_ext, __pyx_v_ebqe_penalty_ext, __pyx_v_ebqe_bc_v_ext, __pyx_v_ebqe_bc_flux_v_diff_ext, __pyx_v_ebqe_bc_w_ext, __pyx_v_ebqe_bc_flux_w_diff_ext, __pyx_v_csrColumnOffsets_eb_p_p, __pyx_v_csrColumnOffsets_eb_p_u, __pyx_v_csrColumnOffsets_eb_p_v, __pyx_v_csrColumnOffsets_eb_p_w, __pyx_v_csrColumnOffsets_eb_u_p, __pyx_v_csrColumnOffsets_eb_u_u, __pyx_v_csrColumnOffsets_eb_u_v, __pyx_v_csrColumnOffsets_eb_u_w, __pyx_v_csrColumnOffsets_eb_v_p, __pyx_v_csrColumnOffsets_eb_v_u, __pyx_v_csrColumnOffsets_eb_v_v, __pyx_v_csrColumnOffsets_eb_v_w, __pyx_v_csrColumnOffsets_eb_w_p, __pyx_v_csrColumnOffsets_eb_w_u, __pyx_v_csrColumnOffsets_eb_w_v, __pyx_v_csrColumnOffsets_eb_w_w, __pyx_v_elementFlags, __pyx_v_nParticles, __pyx_v_particle_epsFact, __pyx_v_particle_alpha, __pyx_v_particle_beta, __pyx_v_particle_penalty_constant, __pyx_v_particle_signed_distances, __pyx_v_particle_signed_distance_normals, __pyx_v_particle_velocities, __pyx_v_particle_centroids, __pyx_v_particle_nitsche, __pyx_v_KILL_PRESSURE_TERM, __pyx_v_MATERIAL_PARAMETERS_AS_FUNCTION, __pyx_v_density_as_function, __pyx_v_dynamic_viscosity_as_function, __pyx_v_ebqe_density_as_function, __pyx_v_ebqe_dynamic_viscosity_as_function);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6mprans_8cRANS3PF_7RANS3PF_6calculateJacobian(struct __pyx_obj_6mprans_8cRANS3PF_RANS3PF *__pyx_v_self, PyArrayObject *__pyx_v_mesh_trial_ref, PyArrayObject *__pyx_v_mesh_grad_trial_ref, PyArrayObject *__pyx_v_mesh_dof, PyArrayObject *__pyx_v_mesh_velocity_dof, double __pyx_v_MOVING_DOMAIN, double __pyx_v_PSTAB, PyArrayObject *__pyx_v_mesh_l2g, PyArrayObject *__pyx_v_dV_ref, PyArrayObject *__pyx_v_p_trial_ref, PyArrayObject *__pyx_v_p_grad_trial_ref, PyArrayObject *__pyx_v_p_test_ref, PyArrayObject *__pyx_v_p_grad_test_ref, PyArrayObject *__pyx_v_q_p, PyArrayObject *__pyx_v_q_grad_p, PyArrayObject *__pyx_v_ebqe_p, PyArrayObject *__pyx_v_ebqe_grad_p, PyArrayObject *__pyx_v_vel_trial_ref, PyArrayObject *__pyx_v_vel_grad_trial_ref, PyArrayObject *__pyx_v_vel_hess_trial_ref, PyArrayObject *__pyx_v_vel_test_ref, PyArrayObject *__pyx_v_vel_grad_test_ref, PyArrayObject *__pyx_v_mesh_trial_trace_ref, PyArrayObject *__pyx_v_mesh_grad_trial_trace_ref, PyArrayObject *__pyx_v_dS_ref, PyArrayObject *__pyx_v_p_trial_trace_ref, PyArrayObject *__pyx_v_p_grad_trial_trace_ref, PyArrayObject *__pyx_v_p_test_trace_ref, PyArrayObject *__pyx_v_p_grad_test_trace_ref, PyArrayObject *__pyx_v_vel_trial_trace_ref, PyArrayObject *__pyx_v_vel_grad_trial_trace_ref, PyArrayObject *__pyx_v_vel_test_trace_ref, PyArrayObject *__pyx_v_vel_grad_test_trace_ref, PyArrayObject *__pyx_v_normal_ref, PyArrayObject *__pyx_v_boundaryJac_ref, double __pyx_v_eb_adjoint_sigma, PyArrayObject *__pyx_v_elementDiameter, PyArrayObject *__pyx_v_nodeDiametersArray, double __pyx_v_hFactor, int __pyx_v_nElements_global, int __pyx_v_nElements_owned, double __pyx_v_useRBLES, double __pyx_v_useMetrics, double __pyx_v_alphaBDF, double __pyx_v_epsFact_rho, double __pyx_v_epsFact_mu, double __pyx_v_sigma, double __pyx_v_rho_0, double __pyx_v_nu_0, double __pyx_v_rho_1, double __pyx_v_nu_1, double __pyx_v_smagorinskyConstant, int __pyx_v_turbulenceClosureModel, double __pyx_v_Ct_sge, double __pyx_v_Cd_sge, double __pyx_v_C_dg, double __pyx_v_C_b, PyArrayObject *__pyx_v_eps_solid, PyArrayObject *__pyx_v_phi_solid, PyArrayObject *__pyx_v_q_velocity_solid, PyArrayObject *__pyx_v_q_vos, PyArrayObject *__pyx_v_q_dvos_dt, PyArrayObject *__pyx_v_q_dragAlpha, PyArrayObject *__pyx_v_q_dragBeta, PyArrayObject *__pyx_v_q_mass_source, PyArrayObject *__pyx_v_q_turb_var_0, PyArrayObject *__pyx_v_q_turb_var_1, PyArrayObject *__pyx_v_q_turb_var_grad_0, PyArrayObject *__pyx_v_p_l2g, PyArrayObject *__pyx_v_vel_l2g, PyArrayObject *__pyx_v_p_dof, PyArrayObject *__pyx_v_u_dof, PyArrayObject *__pyx_v_v_dof, PyArrayObject *__pyx_v_w_dof, PyArrayObject *__pyx_v_g, double __pyx_v_useVF, PyArrayObject *__pyx_v_vf, PyArrayObject *__pyx_v_phi, PyArrayObject *__pyx_v_normal_phi, PyArrayObject *__pyx_v_kappa_phi, PyArrayObject *__pyx_v_q_mom_u_acc_beta_bdf, PyArrayObject *__pyx_v_q_mom_v_acc_beta_bdf, PyArrayObject *__pyx_v_q_mom_w_acc_beta_bdf, PyArrayObject *__pyx_v_q_dV, PyArrayObject *__pyx_v_q_dV_last, PyArrayObject *__pyx_v_q_velocity_sge, PyArrayObject *__pyx_v_ebqe_velocity_star, PyArrayObject *__pyx_v_q_cfl, PyArrayObject *__pyx_v_q_numDiff_u_last, PyArrayObject *__pyx_v_q_numDiff_v_last, PyArrayObject *__pyx_v_q_numDiff_w_last, PyArrayObject *__pyx_v_sdInfo_u_u_rowptr, PyArrayObject *__pyx_v_sdInfo_u_u_colind, PyArrayObject *__pyx_v_sdInfo_u_v_rowptr, PyArrayObject *__pyx_v_sdInfo_u_v_colind, PyArrayObject *__pyx_v_sdInfo_u_w_rowptr, PyArrayObject *__pyx_v_sdInfo_u_w_colind, PyArrayObject *__pyx_v_sdInfo_v_v_rowptr, PyArrayObject *__pyx_v_sdInfo_v_v_colind, PyArrayObject *__pyx_v_sdInfo_v_u_rowptr, PyArrayObject *__pyx_v_sdInfo_v_u_colind, PyArrayObject *__pyx_v_sdInfo_v_w_rowptr, PyArrayObject *__pyx_v_sdInfo_v_w_colind, PyArrayObject *__pyx_v_sdInfo_w_w_rowptr, PyArrayObject *__pyx_v_sdInfo_w_w_colind, PyArrayObject *__pyx_v_sdInfo_w_u_rowptr, PyArrayObject *__pyx_v_sdInfo_w_u_colind, PyArrayObject *__pyx_v_sdInfo_w_v_rowptr, PyArrayObject *__pyx_v_sdInfo_w_v_colind, PyArrayObject *__pyx_v_csrRowIndeces_p_p, PyArrayObject *__pyx_v_csrColumnOffsets_p_p, PyArrayObject *__pyx_v_csrRowIndeces_p_u, PyArrayObject *__pyx_v_csrColumnOffsets_p_u, PyArrayObject *__pyx_v_csrRowIndeces_p_v, PyArrayObject *__pyx_v_csrColumnOffsets_p_v, PyArrayObject *__pyx_v_csrRowIndeces_p_w, PyArrayObject *__pyx_v_csrColumnOffsets_p_w, PyArrayObject *__pyx_v_csrRowIndeces_u_p, PyArrayObject *__pyx_v_csrColumnOffsets_u_p, PyArrayObject *__pyx_v_csrRowIndeces_u_u, PyArrayObject *__pyx_v_csrColumnOffsets_u_u, PyArrayObject *__pyx_v_csrRowIndeces_u_v, PyArrayObject *__pyx_v_csrColumnOffsets_u_v, PyArrayObject *__pyx_v_csrRowIndeces_u_w, PyArrayObject *__pyx_v_csrColumnOffsets_u_w, PyArrayObject *__pyx_v_csrRowIndeces_v_p, PyArrayObject *__pyx_v_csrColumnOffsets_v_p, PyArrayObject *__pyx_v_csrRowIndeces_v_u, PyArrayObject *__pyx_v_csrColumnOffsets_v_u, PyArrayObject *__pyx_v_csrRowIndeces_v_v, PyArrayObject *__pyx_v_csrColumnOffsets_v_v, PyArrayObject *__pyx_v_csrRowIndeces_v_w, PyArrayObject *__pyx_v_csrColumnOffsets_v_w, PyArrayObject *__pyx_v_csrRowIndeces_w_p, PyArrayObject *__pyx_v_csrColumnOffsets_w_p, PyArrayObject *__pyx_v_csrRowIndeces_w_u, PyArrayObject *__pyx_v_csrColumnOffsets_w_u, PyArrayObject *__pyx_v_csrRowIndeces_w_v, PyArrayObject *__pyx_v_csrColumnOffsets_w_v, PyArrayObject *__pyx_v_csrRowIndeces_w_w, PyArrayObject *__pyx_v_csrColumnOffsets_w_w, PyObject *__pyx_v_globalJacobian, int __pyx_v_nExteriorElementBoundaries_global, PyArrayObject *__pyx_v_exteriorElementBoundariesArray, PyArrayObject *__pyx_v_elementBoundaryElementsArray, PyArrayObject *__pyx_v_elementBoundaryLocalElementBoundariesArray, PyArrayObject *__pyx_v_ebqe_vf_ext, PyArrayObject *__pyx_v_bc_ebqe_vf_ext, PyArrayObject *__pyx_v_ebqe_phi_ext, PyArrayObject *__pyx_v_bc_ebqe_phi_ext, PyArrayObject *__pyx_v_ebqe_normal_phi_ext, PyArrayObject *__pyx_v_ebqe_kappa_phi_ext, PyArrayObject *__pyx_v_ebqe_vos_ext, PyArrayObject *__pyx_v_ebqe_turb_var_0, PyArrayObject *__pyx_v_ebqe_turb_var_1, PyArrayObject *__pyx_v_isDOFBoundary_p, PyArrayObject *__pyx_v_isDOFBoundary_u, PyArrayObject *__pyx_v_isDOFBoundary_v, PyArrayObject *__pyx_v_isDOFBoundary_w, PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_p, PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_u, PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_v, PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_w, PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_u, PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_v, PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_w, PyArrayObject *__pyx_v_ebqe_bc_p_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_mass_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_mom_u_adv_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_mom_v_adv_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_mom_w_adv_ext, PyArrayObject *__pyx_v_ebqe_bc_u_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_u_diff_ext, PyArrayObject *__pyx_v_ebqe_penalty_ext, PyArrayObject *__pyx_v_ebqe_bc_v_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_v_diff_ext, PyArrayObject *__pyx_v_ebqe_bc_w_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_w_diff_ext, PyArrayObject *__pyx_v_csrColumnOffsets_eb_p_p, PyArrayObject *__pyx_v_csrColumnOffsets_eb_p_u, PyArrayObject *__pyx_v_csrColumnOffsets_eb_p_v, PyArrayObject *__pyx_v_csrColumnOffsets_eb_p_w, PyArrayObject *__pyx_v_csrColumnOffsets_eb_u_p, PyArrayObject *__pyx_v_csrColumnOffsets_eb_u_u, PyArrayObject *__pyx_v_csrColumnOffsets_eb_u_v, PyArrayObject *__pyx_v_csrColumnOffsets_eb_u_w, PyArrayObject *__pyx_v_csrColumnOffsets_eb_v_p, PyArrayObject *__pyx_v_csrColumnOffsets_eb_v_u, PyArrayObject *__pyx_v_csrColumnOffsets_eb_v_v, PyArrayObject *__pyx_v_csrColumnOffsets_eb_v_w, PyArrayObject *__pyx_v_csrColumnOffsets_eb_w_p, PyArrayObject *__pyx_v_csrColumnOffsets_eb_w_u, PyArrayObject *__pyx_v_csrColumnOffsets_eb_w_v, PyArrayObject *__pyx_v_csrColumnOffsets_eb_w_w, PyArrayObject *__pyx_v_elementFlags, int __pyx_v_nParticles, double __pyx_v_particle_epsFact, double __pyx_v_particle_alpha, double __pyx_v_particle_beta, double __pyx_v_particle_penalty_constant, PyArrayObject *__pyx_v_particle_signed_distances, PyArrayObject *__pyx_v_particle_signed_distance_normals, PyArrayObject *__pyx_v_particle_velocities, PyArrayObject *__pyx_v_particle_centroids, double __pyx_v_particle_nitsche, int __pyx_v_KILL_PRESSURE_TERM, int __pyx_v_MATERIAL_PARAMETERS_AS_FUNCTION, PyArrayObject *__pyx_v_density_as_function, PyArrayObject *__pyx_v_dynamic_viscosity_as_function, PyArrayObject *__pyx_v_ebqe_density_as_function, PyArrayObject *__pyx_v_ebqe_dynamic_viscosity_as_function) {
  CYTHON_UNUSED PyArrayObject *__pyx_v_rowptr = 0;
  CYTHON_UNUSED PyArrayObject *__pyx_v_colind = 0;
  PyArrayObject *__pyx_v_globalJacobian_a = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  __Pyx_RefNannySetupContext("calculateJacobian", 0);

  /* "mprans/cRANS3PF.pyx":1561
 *                           numpy.ndarray ebqe_dynamic_viscosity_as_function):
 *         cdef numpy.ndarray rowptr, colind, globalJacobian_a
 *         (rowptr, colind, globalJacobian_a) = globalJacobian.getCSRrepresentation()             # <<<<<<<<<<<<<<
 *         self.thisptr.calculateJacobian(< double *> mesh_trial_ref.data,
 *                                        < double * > mesh_grad_trial_ref.data,
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_globalJacobian, __pyx_n_s_getCSRrepresentation); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1561, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1561, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    #if !CYTHON_COMPILING_IN_PYPY
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 3)) {
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 1561, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 2); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1561, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1561, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1561, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_5 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1561, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = Py_TYPE(__pyx_t_5)->tp_iternext;
    index = 0; __pyx_t_2 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_3 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    index = 2; __pyx_t_4 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_4)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_4);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_5), 3) < 0) __PYX_ERR(0, 1561, __pyx_L1_error)
    __pyx_t_6 = NULL;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 1561, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1561, __pyx_L1_error)
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1561, __pyx_L1_error)
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1561, __pyx_L1_error)
  __pyx_v_rowptr = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_v_colind = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_v_globalJacobian_a = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "mprans/cRANS3PF.pyx":1562
 *         cdef numpy.ndarray rowptr, colind, globalJacobian_a
 *         (rowptr, colind, globalJacobian_a) = globalJacobian.getCSRrepresentation()
 *         self.thisptr.calculateJacobian(< double *> mesh_trial_ref.data,             # <<<<<<<<<<<<<<
 *                                        < double * > mesh_grad_trial_ref.data,
 *                                        < double * > mesh_dof.data,
 */
  __pyx_v_self->thisptr->calculateJacobian(((double *)__pyx_v_mesh_trial_ref->data), ((double *)__pyx_v_mesh_grad_trial_ref->data), ((double *)__pyx_v_mesh_dof->data), ((double *)__pyx_v_mesh_velocity_dof->data), __pyx_v_MOVING_DOMAIN, __pyx_v_PSTAB, ((int *)__pyx_v_mesh_l2g->data), ((double *)__pyx_v_dV_ref->data), ((double *)__pyx_v_p_trial_ref->data), ((double *)__pyx_v_p_grad_trial_ref->data), ((double *)__pyx_v_p_test_ref->data), ((double *)__pyx_v_p_grad_test_ref->data), ((double *)__pyx_v_q_p->data), ((double *)__pyx_v_q_grad_p->data), ((double *)__pyx_v_ebqe_p->data), ((double *)__pyx_v_ebqe_grad_p->data), ((double *)__pyx_v_vel_trial_ref->data), ((double *)__pyx_v_vel_grad_trial_ref->data), ((double *)__pyx_v_vel_hess_trial_ref->data), ((double *)__pyx_v_vel_test_ref->data), ((double *)__pyx_v_vel_grad_test_ref->data), ((double *)__pyx_v_mesh_trial_trace_ref->data), ((double *)__pyx_v_mesh_grad_trial_trace_ref->data), ((double *)__pyx_v_dS_ref->data), ((double *)__pyx_v_p_trial_trace_ref->data), ((double *)__pyx_v_p_grad_trial_trace_ref->data), ((double *)__pyx_v_p_test_trace_ref->data), ((double *)__pyx_v_p_grad_test_trace_ref->data), ((double *)__pyx_v_vel_trial_trace_ref->data), ((double *)__pyx_v_vel_grad_trial_trace_ref->data), ((double *)__pyx_v_vel_test_trace_ref->data), ((double *)__pyx_v_vel_grad_test_trace_ref->data), ((double *)__pyx_v_normal_ref->data), ((double *)__pyx_v_boundaryJac_ref->data), __pyx_v_eb_adjoint_sigma, ((double *)__pyx_v_elementDiameter->data), ((double *)__pyx_v_nodeDiametersArray->data), __pyx_v_hFactor, __pyx_v_nElements_global, __pyx_v_nElements_owned, __pyx_v_useRBLES, __pyx_v_useMetrics, __pyx_v_alphaBDF, __pyx_v_epsFact_rho, __pyx_v_epsFact_mu, __pyx_v_sigma, __pyx_v_rho_0, __pyx_v_nu_0, __pyx_v_rho_1, __pyx_v_nu_1, __pyx_v_smagorinskyConstant, __pyx_v_turbulenceClosureModel, __pyx_v_Ct_sge, __pyx_v_Cd_sge, __pyx_v_C_dg, __pyx_v_C_b, ((double *)__pyx_v_eps_solid->data), ((double *)__pyx_v_phi_solid->data), ((double *)__pyx_v_q_velocity_solid->data), ((double *)__pyx_v_q_vos->data), ((double *)__pyx_v_q_dvos_dt->data), ((double *)__pyx_v_q_dragAlpha->data), ((double *)__pyx_v_q_dragBeta->data), ((double *)__pyx_v_q_mass_source->data), ((double *)__pyx_v_q_turb_var_0->data), ((double *)__pyx_v_q_turb_var_1->data), ((double *)__pyx_v_q_turb_var_grad_0->data), ((int *)__pyx_v_p_l2g->data), ((int *)__pyx_v_vel_l2g->data), ((double *)__pyx_v_p_dof->data), ((double *)__pyx_v_u_dof->data), ((double *)__pyx_v_v_dof->data), ((double *)__pyx_v_w_dof->data), ((double *)__pyx_v_g->data), __pyx_v_useVF, ((double *)__pyx_v_vf->data), ((double *)__pyx_v_phi->data), ((double *)__pyx_v_normal_phi->data), ((double *)__pyx_v_kappa_phi->data), ((double *)__pyx_v_q_mom_u_acc_beta_bdf->data), ((double *)__pyx_v_q_mom_v_acc_beta_bdf->data), ((double *)__pyx_v_q_mom_w_acc_beta_bdf->data), ((double *)__pyx_v_q_dV->data), ((double *)__pyx_v_q_dV_last->data), ((double *)__pyx_v_q_velocity_sge->data), ((double *)__pyx_v_ebqe_velocity_star->data), ((double *)__pyx_v_q_cfl->data), ((double *)__pyx_v_q_numDiff_u_last->data), ((double *)__pyx_v_q_numDiff_v_last->data), ((double *)__pyx_v_q_numDiff_w_last->data), ((int *)__pyx_v_sdInfo_u_u_rowptr->data), ((int *)__pyx_v_sdInfo_u_u_colind->data), ((int *)__pyx_v_sdInfo_u_v_rowptr->data), ((int *)__pyx_v_sdInfo_u_v_colind->data), ((int *)__pyx_v_sdInfo_u_w_rowptr->data), ((int *)__pyx_v_sdInfo_u_w_colind->data), ((int *)__pyx_v_sdInfo_v_v_rowptr->data), ((int *)__pyx_v_sdInfo_v_v_colind->data), ((int *)__pyx_v_sdInfo_v_u_rowptr->data), ((int *)__pyx_v_sdInfo_v_u_colind->data), ((int *)__pyx_v_sdInfo_v_w_rowptr->data), ((int *)__pyx_v_sdInfo_v_w_colind->data), ((int *)__pyx_v_sdInfo_w_w_rowptr->data), ((int *)__pyx_v_sdInfo_w_w_colind->data), ((int *)__pyx_v_sdInfo_w_u_rowptr->data), ((int *)__pyx_v_sdInfo_w_u_colind->data), ((int *)__pyx_v_sdInfo_w_v_rowptr->data), ((int *)__pyx_v_sdInfo_w_v_colind->data), ((int *)__pyx_v_csrRowIndeces_p_p->data), ((int *)__pyx_v_csrColumnOffsets_p_p->data), ((int *)__pyx_v_csrRowIndeces_p_u->data), ((int *)__pyx_v_csrColumnOffsets_p_u->data), ((int *)__pyx_v_csrRowIndeces_p_v->data), ((int *)__pyx_v_csrColumnOffsets_p_v->data), ((int *)__pyx_v_csrRowIndeces_p_w->data), ((int *)__pyx_v_csrColumnOffsets_p_w->data), ((int *)__pyx_v_csrRowIndeces_u_p->data), ((int *)__pyx_v_csrColumnOffsets_u_p->data), ((int *)__pyx_v_csrRowIndeces_u_u->data), ((int *)__pyx_v_csrColumnOffsets_u_u->data), ((int *)__pyx_v_csrRowIndeces_u_v->data), ((int *)__pyx_v_csrColumnOffsets_u_v->data), ((int *)__pyx_v_csrRowIndeces_u_w->data), ((int *)__pyx_v_csrColumnOffsets_u_w->data), ((int *)__pyx_v_csrRowIndeces_v_p->data), ((int *)__pyx_v_csrColumnOffsets_v_p->data), ((int *)__pyx_v_csrRowIndeces_v_u->data), ((int *)__pyx_v_csrColumnOffsets_v_u->data), ((int *)__pyx_v_csrRowIndeces_v_v->data), ((int *)__pyx_v_csrColumnOffsets_v_v->data), ((int *)__pyx_v_csrRowIndeces_v_w->data), ((int *)__pyx_v_csrColumnOffsets_v_w->data), ((int *)__pyx_v_csrRowIndeces_w_p->data), ((int *)__pyx_v_csrColumnOffsets_w_p->data), ((int *)__pyx_v_csrRowIndeces_w_u->data), ((int *)__pyx_v_csrColumnOffsets_w_u->data), ((int *)__pyx_v_csrRowIndeces_w_v->data), ((int *)__pyx_v_csrColumnOffsets_w_v->data), ((int *)__pyx_v_csrRowIndeces_w_w->data), ((int *)__pyx_v_csrColumnOffsets_w_w->data), ((double *)__pyx_v_globalJacobian_a->data), __pyx_v_nExteriorElementBoundaries_global, ((int *)__pyx_v_exteriorElementBoundariesArray->data), ((int *)__pyx_v_elementBoundaryElementsArray->data), ((int *)__pyx_v_elementBoundaryLocalElementBoundariesArray->data), ((double *)__pyx_v_ebqe_vf_ext->data), ((double *)__pyx_v_bc_ebqe_vf_ext->data), ((double *)__pyx_v_ebqe_phi_ext->data), ((double *)__pyx_v_bc_ebqe_phi_ext->data), ((double *)__pyx_v_ebqe_normal_phi_ext->data), ((double *)__pyx_v_ebqe_kappa_phi_ext->data), ((double *)__pyx_v_ebqe_vos_ext->data), ((double *)__pyx_v_ebqe_turb_var_0->data), ((double *)__pyx_v_ebqe_turb_var_1->data), ((int *)__pyx_v_isDOFBoundary_p->data), ((int *)__pyx_v_isDOFBoundary_u->data), ((int *)__pyx_v_isDOFBoundary_v->data), ((int *)__pyx_v_isDOFBoundary_w->data), ((int *)__pyx_v_isAdvectiveFluxBoundary_p->data), ((int *)__pyx_v_isAdvectiveFluxBoundary_u->data), ((int *)__pyx_v_isAdvectiveFluxBoundary_v->data), ((int *)__pyx_v_isAdvectiveFluxBoundary_w->data), ((int *)__pyx_v_isDiffusiveFluxBoundary_u->data), ((int *)__pyx_v_isDiffusiveFluxBoundary_v->data), ((int *)__pyx_v_isDiffusiveFluxBoundary_w->data), ((double *)__pyx_v_ebqe_bc_p_ext->data), ((double *)__pyx_v_ebqe_bc_flux_mass_ext->data), ((double *)__pyx_v_ebqe_bc_flux_mom_u_adv_ext->data), ((double *)__pyx_v_ebqe_bc_flux_mom_v_adv_ext->data), ((double *)__pyx_v_ebqe_bc_flux_mom_w_adv_ext->data), ((double *)__pyx_v_ebqe_bc_u_ext->data), ((double *)__pyx_v_ebqe_bc_flux_u_diff_ext->data), ((double *)__pyx_v_ebqe_penalty_ext->data), ((double *)__pyx_v_ebqe_bc_v_ext->data), ((double *)__pyx_v_ebqe_bc_flux_v_diff_ext->data), ((double *)__pyx_v_ebqe_bc_w_ext->data), ((double *)__pyx_v_ebqe_bc_flux_w_diff_ext->data), ((int *)__pyx_v_csrColumnOffsets_eb_p_p->data), ((int *)__pyx_v_csrColumnOffsets_eb_p_u->data), ((int *)__pyx_v_csrColumnOffsets_eb_p_v->data), ((int *)__pyx_v_csrColumnOffsets_eb_p_w->data), ((int *)__pyx_v_csrColumnOffsets_eb_u_p->data), ((int *)__pyx_v_csrColumnOffsets_eb_u_u->data), ((int *)__pyx_v_csrColumnOffsets_eb_u_v->data), ((int *)__pyx_v_csrColumnOffsets_eb_u_w->data), ((int *)__pyx_v_csrColumnOffsets_eb_v_p->data), ((int *)__pyx_v_csrColumnOffsets_eb_v_u->data), ((int *)__pyx_v_csrColumnOffsets_eb_v_v->data), ((int *)__pyx_v_csrColumnOffsets_eb_v_w->data), ((int *)__pyx_v_csrColumnOffsets_eb_w_p->data), ((int *)__pyx_v_csrColumnOffsets_eb_w_u->data), ((int *)__pyx_v_csrColumnOffsets_eb_w_v->data), ((int *)__pyx_v_csrColumnOffsets_eb_w_w->data), ((int *)__pyx_v_elementFlags->data), __pyx_v_nParticles, __pyx_v_particle_epsFact, __pyx_v_particle_alpha, __pyx_v_particle_beta, __pyx_v_particle_penalty_constant, ((double *)__pyx_v_particle_signed_distances->data), ((double *)__pyx_v_particle_signed_distance_normals->data), ((double *)__pyx_v_particle_velocities->data), ((double *)__pyx_v_particle_centroids->data), __pyx_v_particle_nitsche, __pyx_v_KILL_PRESSURE_TERM, __pyx_v_MATERIAL_PARAMETERS_AS_FUNCTION, ((double *)__pyx_v_density_as_function->data), ((double *)__pyx_v_dynamic_viscosity_as_function->data), ((double *)__pyx_v_ebqe_density_as_function->data), ((double *)__pyx_v_ebqe_dynamic_viscosity_as_function->data));

  /* "mprans/cRANS3PF.pyx":1377
 *                                         < double * > ebqe_dynamic_viscosity_as_function.data,
 *                                         order_polynomial)
 *     def calculateJacobian(self,             # <<<<<<<<<<<<<<
 *                           numpy.ndarray mesh_trial_ref,
 *                           numpy.ndarray mesh_grad_trial_ref,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("mprans.cRANS3PF.RANS3PF.calculateJacobian", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_rowptr);
  __Pyx_XDECREF((PyObject *)__pyx_v_colind);
  __Pyx_XDECREF((PyObject *)__pyx_v_globalJacobian_a);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mprans/cRANS3PF.pyx":1744
 *                                        < double * > ebqe_density_as_function.data,
 *                                        < double * > ebqe_dynamic_viscosity_as_function.data)
 *     def calculateResidual_entropy_viscosity(self,             # <<<<<<<<<<<<<<
 *                                             numpy.ndarray mesh_trial_ref,
 *                                             numpy.ndarray mesh_grad_trial_ref,
 */

/* Python wrapper */
static PyObject *__pyx_pw_6mprans_8cRANS3PF_7RANS3PF_9calculateResidual_entropy_viscosity(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6mprans_8cRANS3PF_7RANS3PF_9calculateResidual_entropy_viscosity(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_mesh_trial_ref = 0;
  PyArrayObject *__pyx_v_mesh_grad_trial_ref = 0;
  PyArrayObject *__pyx_v_mesh_dof = 0;
  PyArrayObject *__pyx_v_mesh_velocity_dof = 0;
  double __pyx_v_MOVING_DOMAIN;
  double __pyx_v_PSTAB;
  PyArrayObject *__pyx_v_mesh_l2g = 0;
  PyArrayObject *__pyx_v_dV_ref = 0;
  PyArrayObject *__pyx_v_p_trial_ref = 0;
  PyArrayObject *__pyx_v_p_grad_trial_ref = 0;
  PyArrayObject *__pyx_v_p_test_ref = 0;
  PyArrayObject *__pyx_v_p_grad_test_ref = 0;
  PyArrayObject *__pyx_v_q_p = 0;
  PyArrayObject *__pyx_v_q_grad_p = 0;
  PyArrayObject *__pyx_v_ebqe_p = 0;
  PyArrayObject *__pyx_v_ebqe_grad_p = 0;
  PyArrayObject *__pyx_v_vel_trial_ref = 0;
  PyArrayObject *__pyx_v_vel_grad_trial_ref = 0;
  PyArrayObject *__pyx_v_vel_hess_trial_ref = 0;
  PyArrayObject *__pyx_v_vel_test_ref = 0;
  PyArrayObject *__pyx_v_vel_grad_test_ref = 0;
  PyArrayObject *__pyx_v_mesh_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_mesh_grad_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_dS_ref = 0;
  PyArrayObject *__pyx_v_p_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_p_grad_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_p_test_trace_ref = 0;
  PyArrayObject *__pyx_v_p_grad_test_trace_ref = 0;
  PyArrayObject *__pyx_v_vel_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_vel_grad_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_vel_test_trace_ref = 0;
  PyArrayObject *__pyx_v_vel_grad_test_trace_ref = 0;
  PyArrayObject *__pyx_v_normal_ref = 0;
  PyArrayObject *__pyx_v_boundaryJac_ref = 0;
  double __pyx_v_eb_adjoint_sigma;
  PyArrayObject *__pyx_v_elementDiameter = 0;
  PyArrayObject *__pyx_v_nodeDiametersArray = 0;
  double __pyx_v_hFactor;
  int __pyx_v_nElements_global;
  int __pyx_v_nElements_owned;
  int __pyx_v_nElementBoundaries_owned;
  double __pyx_v_useRBLES;
  double __pyx_v_useMetrics;
  double __pyx_v_alphaBDF;
  double __pyx_v_epsFact_rho;
  double __pyx_v_epsFact_mu;
  double __pyx_v_sigma;
  double __pyx_v_rho_0;
  double __pyx_v_nu_0;
  double __pyx_v_rho_1;
  double __pyx_v_nu_1;
  double __pyx_v_smagorinskyConstant;
  int __pyx_v_turbulenceClosureModel;
  double __pyx_v_Ct_sge;
  double __pyx_v_Cd_sge;
  double __pyx_v_C_dc;
  double __pyx_v_C_b;
  PyArrayObject *__pyx_v_eps_solid = 0;
  PyArrayObject *__pyx_v_phi_solid = 0;
  PyArrayObject *__pyx_v_q_velocity_solid = 0;
  PyArrayObject *__pyx_v_q_vos = 0;
  PyArrayObject *__pyx_v_q_dvos_dt = 0;
  PyArrayObject *__pyx_v_q_dragAlpha = 0;
  PyArrayObject *__pyx_v_q_dragBeta = 0;
  PyArrayObject *__pyx_v_q_mass_source = 0;
  PyArrayObject *__pyx_v_q_turb_var_0 = 0;
  PyArrayObject *__pyx_v_q_turb_var_1 = 0;
  PyArrayObject *__pyx_v_q_turb_var_grad_0 = 0;
  PyArrayObject *__pyx_v_q_eddy_viscosity = 0;
  PyArrayObject *__pyx_v_p_l2g = 0;
  PyArrayObject *__pyx_v_vel_l2g = 0;
  PyArrayObject *__pyx_v_p_dof = 0;
  PyArrayObject *__pyx_v_u_dof = 0;
  PyArrayObject *__pyx_v_v_dof = 0;
  PyArrayObject *__pyx_v_w_dof = 0;
  PyArrayObject *__pyx_v_u_dof_old = 0;
  PyArrayObject *__pyx_v_v_dof_old = 0;
  PyArrayObject *__pyx_v_w_dof_old = 0;
  PyArrayObject *__pyx_v_u_dof_old_old = 0;
  PyArrayObject *__pyx_v_v_dof_old_old = 0;
  PyArrayObject *__pyx_v_w_dof_old_old = 0;
  PyArrayObject *__pyx_v_g = 0;
  double __pyx_v_useVF;
  PyArrayObject *__pyx_v_vf = 0;
  PyArrayObject *__pyx_v_phi = 0;
  PyArrayObject *__pyx_v_normal_phi = 0;
  PyArrayObject *__pyx_v_kappa_phi = 0;
  PyArrayObject *__pyx_v_q_mom_u_acc = 0;
  PyArrayObject *__pyx_v_q_mom_v_acc = 0;
  PyArrayObject *__pyx_v_q_mom_w_acc = 0;
  PyArrayObject *__pyx_v_q_mass_adv = 0;
  PyArrayObject *__pyx_v_q_mom_u_acc_beta_bdf = 0;
  PyArrayObject *__pyx_v_q_mom_v_acc_beta_bdf = 0;
  PyArrayObject *__pyx_v_q_mom_w_acc_beta_bdf = 0;
  PyArrayObject *__pyx_v_q_dV = 0;
  PyArrayObject *__pyx_v_q_dV_last = 0;
  PyArrayObject *__pyx_v_q_velocity_sge = 0;
  PyArrayObject *__pyx_v_ebqe_velocity_star = 0;
  PyArrayObject *__pyx_v_q_cfl = 0;
  PyArrayObject *__pyx_v_q_numDiff_u = 0;
  PyArrayObject *__pyx_v_q_numDiff_v = 0;
  PyArrayObject *__pyx_v_q_numDiff_w = 0;
  PyArrayObject *__pyx_v_q_numDiff_u_last = 0;
  PyArrayObject *__pyx_v_q_numDiff_v_last = 0;
  PyArrayObject *__pyx_v_q_numDiff_w_last = 0;
  PyArrayObject *__pyx_v_sdInfo_u_u_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_u_u_colind = 0;
  PyArrayObject *__pyx_v_sdInfo_u_v_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_u_v_colind = 0;
  PyArrayObject *__pyx_v_sdInfo_u_w_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_u_w_colind = 0;
  PyArrayObject *__pyx_v_sdInfo_v_v_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_v_v_colind = 0;
  PyArrayObject *__pyx_v_sdInfo_v_u_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_v_u_colind = 0;
  PyArrayObject *__pyx_v_sdInfo_v_w_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_v_w_colind = 0;
  PyArrayObject *__pyx_v_sdInfo_w_w_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_w_w_colind = 0;
  PyArrayObject *__pyx_v_sdInfo_w_u_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_w_u_colind = 0;
  PyArrayObject *__pyx_v_sdInfo_w_v_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_w_v_colind = 0;
  int __pyx_v_offset_p;
  int __pyx_v_offset_u;
  int __pyx_v_offset_v;
  int __pyx_v_offset_w;
  int __pyx_v_stride_p;
  int __pyx_v_stride_u;
  int __pyx_v_stride_v;
  int __pyx_v_stride_w;
  PyArrayObject *__pyx_v_globalResidual = 0;
  int __pyx_v_nExteriorElementBoundaries_global;
  PyArrayObject *__pyx_v_exteriorElementBoundariesArray = 0;
  PyArrayObject *__pyx_v_elementBoundaryElementsArray = 0;
  PyArrayObject *__pyx_v_elementBoundaryLocalElementBoundariesArray = 0;
  PyArrayObject *__pyx_v_ebqe_vf_ext = 0;
  PyArrayObject *__pyx_v_bc_ebqe_vf_ext = 0;
  PyArrayObject *__pyx_v_ebqe_phi_ext = 0;
  PyArrayObject *__pyx_v_bc_ebqe_phi_ext = 0;
  PyArrayObject *__pyx_v_ebqe_normal_phi_ext = 0;
  PyArrayObject *__pyx_v_ebqe_kappa_phi_ext = 0;
  PyArrayObject *__pyx_v_ebqe_vos_ext = 0;
  PyArrayObject *__pyx_v_ebqe_turb_var_0 = 0;
  PyArrayObject *__pyx_v_ebqe_turb_var_1 = 0;
  PyArrayObject *__pyx_v_isDOFBoundary_p = 0;
  PyArrayObject *__pyx_v_isDOFBoundary_u = 0;
  PyArrayObject *__pyx_v_isDOFBoundary_v = 0;
  PyArrayObject *__pyx_v_isDOFBoundary_w = 0;
  PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_p = 0;
  PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_u = 0;
  PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_v = 0;
  PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_w = 0;
  PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_u = 0;
  PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_v = 0;
  PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_w = 0;
  PyArrayObject *__pyx_v_ebqe_bc_p_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_flux_mass_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_flux_mom_u_adv_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_flux_mom_v_adv_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_flux_mom_w_adv_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_u_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_flux_u_diff_ext = 0;
  PyArrayObject *__pyx_v_ebqe_penalty_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_v_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_flux_v_diff_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_w_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_flux_w_diff_ext = 0;
  PyArrayObject *__pyx_v_q_x = 0;
  PyArrayObject *__pyx_v_q_velocity = 0;
  PyArrayObject *__pyx_v_ebqe_velocity = 0;
  PyArrayObject *__pyx_v_q_grad_u = 0;
  PyArrayObject *__pyx_v_q_grad_v = 0;
  PyArrayObject *__pyx_v_q_grad_w = 0;
  PyArrayObject *__pyx_v_q_divU = 0;
  PyArrayObject *__pyx_v_ebqe_grad_u = 0;
  PyArrayObject *__pyx_v_ebqe_grad_v = 0;
  PyArrayObject *__pyx_v_ebqe_grad_w = 0;
  PyArrayObject *__pyx_v_flux = 0;
  PyArrayObject *__pyx_v_elementResidual_p = 0;
  PyArrayObject *__pyx_v_elementFlags = 0;
  PyArrayObject *__pyx_v_boundaryFlags = 0;
  PyArrayObject *__pyx_v_barycenters = 0;
  PyArrayObject *__pyx_v_wettedAreas = 0;
  PyArrayObject *__pyx_v_netForces_p = 0;
  PyArrayObject *__pyx_v_netForces_v = 0;
  PyArrayObject *__pyx_v_netMoments = 0;
  PyArrayObject *__pyx_v_q_rho = 0;
  PyArrayObject *__pyx_v_ebqe_rho = 0;
  PyArrayObject *__pyx_v_q_nu = 0;
  PyArrayObject *__pyx_v_ebqe_nu = 0;
  int __pyx_v_nParticles;
  double __pyx_v_particle_epsFact;
  double __pyx_v_particle_alpha;
  double __pyx_v_particle_beta;
  double __pyx_v_particle_penalty_constant;
  PyArrayObject *__pyx_v_particle_signed_distances = 0;
  PyArrayObject *__pyx_v_particle_signed_distance_normals = 0;
  PyArrayObject *__pyx_v_particle_velocities = 0;
  PyArrayObject *__pyx_v_particle_centroids = 0;
  PyArrayObject *__pyx_v_particle_netForces = 0;
  PyArrayObject *__pyx_v_particle_netMoments = 0;
  PyArrayObject *__pyx_v_particle_surfaceArea = 0;
  double __pyx_v_particle_nitsche;
  int __pyx_v_STABILIZATION_TYPE;
  double __pyx_v_areaRefElement;
  double __pyx_v_cMax;
  double __pyx_v_cE;
  PyArrayObject *__pyx_v_forcex = 0;
  PyArrayObject *__pyx_v_forcey = 0;
  PyArrayObject *__pyx_v_forcez = 0;
  int __pyx_v_KILL_PRESSURE_TERM;
  double __pyx_v_dt;
  PyArrayObject *__pyx_v_entropyResidualAtCell = 0;
  PyArrayObject *__pyx_v_maxSpeed2AtCell = 0;
  double __pyx_v_maxSpeed2AtOmega;
  PyArrayObject *__pyx_v_rhoAtCell = 0;
  PyArrayObject *__pyx_v_muAtCell = 0;
  PyArrayObject *__pyx_v_quantDOFs = 0;
  int __pyx_v_numDOFsPerEqn;
  PyArrayObject *__pyx_v_csrRowIndeces_DofLoops = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_DofLoops = 0;
  PyArrayObject *__pyx_v_ML = 0;
  PyArrayObject *__pyx_v_Cx = 0;
  PyArrayObject *__pyx_v_Cy = 0;
  PyArrayObject *__pyx_v_Cz = 0;
  int __pyx_v_MATERIAL_PARAMETERS_AS_FUNCTION;
  PyArrayObject *__pyx_v_density_as_function = 0;
  PyArrayObject *__pyx_v_dynamic_viscosity_as_function = 0;
  PyArrayObject *__pyx_v_ebqe_density_as_function = 0;
  PyArrayObject *__pyx_v_ebqe_dynamic_viscosity_as_function = 0;
  double __pyx_v_order_polynomial;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calculateResidual_entropy_viscosity (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_mesh_trial_ref,&__pyx_n_s_mesh_grad_trial_ref,&__pyx_n_s_mesh_dof,&__pyx_n_s_mesh_velocity_dof,&__pyx_n_s_MOVING_DOMAIN,&__pyx_n_s_PSTAB,&__pyx_n_s_mesh_l2g,&__pyx_n_s_dV_ref,&__pyx_n_s_p_trial_ref,&__pyx_n_s_p_grad_trial_ref,&__pyx_n_s_p_test_ref,&__pyx_n_s_p_grad_test_ref,&__pyx_n_s_q_p,&__pyx_n_s_q_grad_p,&__pyx_n_s_ebqe_p,&__pyx_n_s_ebqe_grad_p,&__pyx_n_s_vel_trial_ref,&__pyx_n_s_vel_grad_trial_ref,&__pyx_n_s_vel_hess_trial_ref,&__pyx_n_s_vel_test_ref,&__pyx_n_s_vel_grad_test_ref,&__pyx_n_s_mesh_trial_trace_ref,&__pyx_n_s_mesh_grad_trial_trace_ref,&__pyx_n_s_dS_ref,&__pyx_n_s_p_trial_trace_ref,&__pyx_n_s_p_grad_trial_trace_ref,&__pyx_n_s_p_test_trace_ref,&__pyx_n_s_p_grad_test_trace_ref,&__pyx_n_s_vel_trial_trace_ref,&__pyx_n_s_vel_grad_trial_trace_ref,&__pyx_n_s_vel_test_trace_ref,&__pyx_n_s_vel_grad_test_trace_ref,&__pyx_n_s_normal_ref,&__pyx_n_s_boundaryJac_ref,&__pyx_n_s_eb_adjoint_sigma,&__pyx_n_s_elementDiameter,&__pyx_n_s_nodeDiametersArray,&__pyx_n_s_hFactor,&__pyx_n_s_nElements_global,&__pyx_n_s_nElements_owned,&__pyx_n_s_nElementBoundaries_owned,&__pyx_n_s_useRBLES,&__pyx_n_s_useMetrics,&__pyx_n_s_alphaBDF,&__pyx_n_s_epsFact_rho,&__pyx_n_s_epsFact_mu,&__pyx_n_s_sigma,&__pyx_n_s_rho_0,&__pyx_n_s_nu_0,&__pyx_n_s_rho_1,&__pyx_n_s_nu_1,&__pyx_n_s_smagorinskyConstant,&__pyx_n_s_turbulenceClosureModel,&__pyx_n_s_Ct_sge,&__pyx_n_s_Cd_sge,&__pyx_n_s_C_dc,&__pyx_n_s_C_b,&__pyx_n_s_eps_solid,&__pyx_n_s_phi_solid,&__pyx_n_s_q_velocity_solid,&__pyx_n_s_q_vos,&__pyx_n_s_q_dvos_dt,&__pyx_n_s_q_dragAlpha,&__pyx_n_s_q_dragBeta,&__pyx_n_s_q_mass_source,&__pyx_n_s_q_turb_var_0,&__pyx_n_s_q_turb_var_1,&__pyx_n_s_q_turb_var_grad_0,&__pyx_n_s_q_eddy_viscosity,&__pyx_n_s_p_l2g,&__pyx_n_s_vel_l2g,&__pyx_n_s_p_dof,&__pyx_n_s_u_dof,&__pyx_n_s_v_dof,&__pyx_n_s_w_dof,&__pyx_n_s_u_dof_old,&__pyx_n_s_v_dof_old,&__pyx_n_s_w_dof_old,&__pyx_n_s_u_dof_old_old,&__pyx_n_s_v_dof_old_old,&__pyx_n_s_w_dof_old_old,&__pyx_n_s_g,&__pyx_n_s_useVF,&__pyx_n_s_vf,&__pyx_n_s_phi,&__pyx_n_s_normal_phi,&__pyx_n_s_kappa_phi,&__pyx_n_s_q_mom_u_acc,&__pyx_n_s_q_mom_v_acc,&__pyx_n_s_q_mom_w_acc,&__pyx_n_s_q_mass_adv,&__pyx_n_s_q_mom_u_acc_beta_bdf,&__pyx_n_s_q_mom_v_acc_beta_bdf,&__pyx_n_s_q_mom_w_acc_beta_bdf,&__pyx_n_s_q_dV,&__pyx_n_s_q_dV_last,&__pyx_n_s_q_velocity_sge,&__pyx_n_s_ebqe_velocity_star,&__pyx_n_s_q_cfl,&__pyx_n_s_q_numDiff_u,&__pyx_n_s_q_numDiff_v,&__pyx_n_s_q_numDiff_w,&__pyx_n_s_q_numDiff_u_last,&__pyx_n_s_q_numDiff_v_last,&__pyx_n_s_q_numDiff_w_last,&__pyx_n_s_sdInfo_u_u_rowptr,&__pyx_n_s_sdInfo_u_u_colind,&__pyx_n_s_sdInfo_u_v_rowptr,&__pyx_n_s_sdInfo_u_v_colind,&__pyx_n_s_sdInfo_u_w_rowptr,&__pyx_n_s_sdInfo_u_w_colind,&__pyx_n_s_sdInfo_v_v_rowptr,&__pyx_n_s_sdInfo_v_v_colind,&__pyx_n_s_sdInfo_v_u_rowptr,&__pyx_n_s_sdInfo_v_u_colind,&__pyx_n_s_sdInfo_v_w_rowptr,&__pyx_n_s_sdInfo_v_w_colind,&__pyx_n_s_sdInfo_w_w_rowptr,&__pyx_n_s_sdInfo_w_w_colind,&__pyx_n_s_sdInfo_w_u_rowptr,&__pyx_n_s_sdInfo_w_u_colind,&__pyx_n_s_sdInfo_w_v_rowptr,&__pyx_n_s_sdInfo_w_v_colind,&__pyx_n_s_offset_p,&__pyx_n_s_offset_u,&__pyx_n_s_offset_v,&__pyx_n_s_offset_w,&__pyx_n_s_stride_p,&__pyx_n_s_stride_u,&__pyx_n_s_stride_v,&__pyx_n_s_stride_w,&__pyx_n_s_globalResidual,&__pyx_n_s_nExteriorElementBoundaries_globa,&__pyx_n_s_exteriorElementBoundariesArray,&__pyx_n_s_elementBoundaryElementsArray,&__pyx_n_s_elementBoundaryLocalElementBound,&__pyx_n_s_ebqe_vf_ext,&__pyx_n_s_bc_ebqe_vf_ext,&__pyx_n_s_ebqe_phi_ext,&__pyx_n_s_bc_ebqe_phi_ext,&__pyx_n_s_ebqe_normal_phi_ext,&__pyx_n_s_ebqe_kappa_phi_ext,&__pyx_n_s_ebqe_vos_ext,&__pyx_n_s_ebqe_turb_var_0,&__pyx_n_s_ebqe_turb_var_1,&__pyx_n_s_isDOFBoundary_p,&__pyx_n_s_isDOFBoundary_u,&__pyx_n_s_isDOFBoundary_v,&__pyx_n_s_isDOFBoundary_w,&__pyx_n_s_isAdvectiveFluxBoundary_p,&__pyx_n_s_isAdvectiveFluxBoundary_u,&__pyx_n_s_isAdvectiveFluxBoundary_v,&__pyx_n_s_isAdvectiveFluxBoundary_w,&__pyx_n_s_isDiffusiveFluxBoundary_u,&__pyx_n_s_isDiffusiveFluxBoundary_v,&__pyx_n_s_isDiffusiveFluxBoundary_w,&__pyx_n_s_ebqe_bc_p_ext,&__pyx_n_s_ebqe_bc_flux_mass_ext,&__pyx_n_s_ebqe_bc_flux_mom_u_adv_ext,&__pyx_n_s_ebqe_bc_flux_mom_v_adv_ext,&__pyx_n_s_ebqe_bc_flux_mom_w_adv_ext,&__pyx_n_s_ebqe_bc_u_ext,&__pyx_n_s_ebqe_bc_flux_u_diff_ext,&__pyx_n_s_ebqe_penalty_ext,&__pyx_n_s_ebqe_bc_v_ext,&__pyx_n_s_ebqe_bc_flux_v_diff_ext,&__pyx_n_s_ebqe_bc_w_ext,&__pyx_n_s_ebqe_bc_flux_w_diff_ext,&__pyx_n_s_q_x,&__pyx_n_s_q_velocity,&__pyx_n_s_ebqe_velocity,&__pyx_n_s_q_grad_u,&__pyx_n_s_q_grad_v,&__pyx_n_s_q_grad_w,&__pyx_n_s_q_divU,&__pyx_n_s_ebqe_grad_u,&__pyx_n_s_ebqe_grad_v,&__pyx_n_s_ebqe_grad_w,&__pyx_n_s_flux,&__pyx_n_s_elementResidual_p,&__pyx_n_s_elementFlags,&__pyx_n_s_boundaryFlags,&__pyx_n_s_barycenters,&__pyx_n_s_wettedAreas,&__pyx_n_s_netForces_p,&__pyx_n_s_netForces_v,&__pyx_n_s_netMoments,&__pyx_n_s_q_rho,&__pyx_n_s_ebqe_rho,&__pyx_n_s_q_nu,&__pyx_n_s_ebqe_nu,&__pyx_n_s_nParticles,&__pyx_n_s_particle_epsFact,&__pyx_n_s_particle_alpha,&__pyx_n_s_particle_beta,&__pyx_n_s_particle_penalty_constant,&__pyx_n_s_particle_signed_distances,&__pyx_n_s_particle_signed_distance_normals,&__pyx_n_s_particle_velocities,&__pyx_n_s_particle_centroids,&__pyx_n_s_particle_netForces,&__pyx_n_s_particle_netMoments,&__pyx_n_s_particle_surfaceArea,&__pyx_n_s_particle_nitsche,&__pyx_n_s_STABILIZATION_TYPE,&__pyx_n_s_areaRefElement,&__pyx_n_s_cMax,&__pyx_n_s_cE,&__pyx_n_s_forcex,&__pyx_n_s_forcey,&__pyx_n_s_forcez,&__pyx_n_s_KILL_PRESSURE_TERM,&__pyx_n_s_dt,&__pyx_n_s_entropyResidualAtCell,&__pyx_n_s_maxSpeed2AtCell,&__pyx_n_s_maxSpeed2AtOmega,&__pyx_n_s_rhoAtCell,&__pyx_n_s_muAtCell,&__pyx_n_s_quantDOFs,&__pyx_n_s_numDOFsPerEqn,&__pyx_n_s_csrRowIndeces_DofLoops,&__pyx_n_s_csrColumnOffsets_DofLoops,&__pyx_n_s_ML,&__pyx_n_s_Cx,&__pyx_n_s_Cy,&__pyx_n_s_Cz,&__pyx_n_s_MATERIAL_PARAMETERS_AS_FUNCTION,&__pyx_n_s_density_as_function,&__pyx_n_s_dynamic_viscosity_as_function,&__pyx_n_s_ebqe_density_as_function,&__pyx_n_s_ebqe_dynamic_viscosity_as_functi,&__pyx_n_s_order_polynomial,0};
    PyObject* values[232] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 232: values[231] = PyTuple_GET_ITEM(__pyx_args, 231);
        case 231: values[230] = PyTuple_GET_ITEM(__pyx_args, 230);
        case 230: values[229] = PyTuple_GET_ITEM(__pyx_args, 229);
        case 229: values[228] = PyTuple_GET_ITEM(__pyx_args, 228);
        case 228: values[227] = PyTuple_GET_ITEM(__pyx_args, 227);
        case 227: values[226] = PyTuple_GET_ITEM(__pyx_args, 226);
        case 226: values[225] = PyTuple_GET_ITEM(__pyx_args, 225);
        case 225: values[224] = PyTuple_GET_ITEM(__pyx_args, 224);
        case 224: values[223] = PyTuple_GET_ITEM(__pyx_args, 223);
        case 223: values[222] = PyTuple_GET_ITEM(__pyx_args, 222);
        case 222: values[221] = PyTuple_GET_ITEM(__pyx_args, 221);
        case 221: values[220] = PyTuple_GET_ITEM(__pyx_args, 220);
        case 220: values[219] = PyTuple_GET_ITEM(__pyx_args, 219);
        case 219: values[218] = PyTuple_GET_ITEM(__pyx_args, 218);
        case 218: values[217] = PyTuple_GET_ITEM(__pyx_args, 217);
        case 217: values[216] = PyTuple_GET_ITEM(__pyx_args, 216);
        case 216: values[215] = PyTuple_GET_ITEM(__pyx_args, 215);
        case 215: values[214] = PyTuple_GET_ITEM(__pyx_args, 214);
        case 214: values[213] = PyTuple_GET_ITEM(__pyx_args, 213);
        case 213: values[212] = PyTuple_GET_ITEM(__pyx_args, 212);
        case 212: values[211] = PyTuple_GET_ITEM(__pyx_args, 211);
        case 211: values[210] = PyTuple_GET_ITEM(__pyx_args, 210);
        case 210: values[209] = PyTuple_GET_ITEM(__pyx_args, 209);
        case 209: values[208] = PyTuple_GET_ITEM(__pyx_args, 208);
        case 208: values[207] = PyTuple_GET_ITEM(__pyx_args, 207);
        case 207: values[206] = PyTuple_GET_ITEM(__pyx_args, 206);
        case 206: values[205] = PyTuple_GET_ITEM(__pyx_args, 205);
        case 205: values[204] = PyTuple_GET_ITEM(__pyx_args, 204);
        case 204: values[203] = PyTuple_GET_ITEM(__pyx_args, 203);
        case 203: values[202] = PyTuple_GET_ITEM(__pyx_args, 202);
        case 202: values[201] = PyTuple_GET_ITEM(__pyx_args, 201);
        case 201: values[200] = PyTuple_GET_ITEM(__pyx_args, 200);
        case 200: values[199] = PyTuple_GET_ITEM(__pyx_args, 199);
        case 199: values[198] = PyTuple_GET_ITEM(__pyx_args, 198);
        case 198: values[197] = PyTuple_GET_ITEM(__pyx_args, 197);
        case 197: values[196] = PyTuple_GET_ITEM(__pyx_args, 196);
        case 196: values[195] = PyTuple_GET_ITEM(__pyx_args, 195);
        case 195: values[194] = PyTuple_GET_ITEM(__pyx_args, 194);
        case 194: values[193] = PyTuple_GET_ITEM(__pyx_args, 193);
        case 193: values[192] = PyTuple_GET_ITEM(__pyx_args, 192);
        case 192: values[191] = PyTuple_GET_ITEM(__pyx_args, 191);
        case 191: values[190] = PyTuple_GET_ITEM(__pyx_args, 190);
        case 190: values[189] = PyTuple_GET_ITEM(__pyx_args, 189);
        case 189: values[188] = PyTuple_GET_ITEM(__pyx_args, 188);
        case 188: values[187] = PyTuple_GET_ITEM(__pyx_args, 187);
        case 187: values[186] = PyTuple_GET_ITEM(__pyx_args, 186);
        case 186: values[185] = PyTuple_GET_ITEM(__pyx_args, 185);
        case 185: values[184] = PyTuple_GET_ITEM(__pyx_args, 184);
        case 184: values[183] = PyTuple_GET_ITEM(__pyx_args, 183);
        case 183: values[182] = PyTuple_GET_ITEM(__pyx_args, 182);
        case 182: values[181] = PyTuple_GET_ITEM(__pyx_args, 181);
        case 181: values[180] = PyTuple_GET_ITEM(__pyx_args, 180);
        case 180: values[179] = PyTuple_GET_ITEM(__pyx_args, 179);
        case 179: values[178] = PyTuple_GET_ITEM(__pyx_args, 178);
        case 178: values[177] = PyTuple_GET_ITEM(__pyx_args, 177);
        case 177: values[176] = PyTuple_GET_ITEM(__pyx_args, 176);
        case 176: values[175] = PyTuple_GET_ITEM(__pyx_args, 175);
        case 175: values[174] = PyTuple_GET_ITEM(__pyx_args, 174);
        case 174: values[173] = PyTuple_GET_ITEM(__pyx_args, 173);
        case 173: values[172] = PyTuple_GET_ITEM(__pyx_args, 172);
        case 172: values[171] = PyTuple_GET_ITEM(__pyx_args, 171);
        case 171: values[170] = PyTuple_GET_ITEM(__pyx_args, 170);
        case 170: values[169] = PyTuple_GET_ITEM(__pyx_args, 169);
        case 169: values[168] = PyTuple_GET_ITEM(__pyx_args, 168);
        case 168: values[167] = PyTuple_GET_ITEM(__pyx_args, 167);
        case 167: values[166] = PyTuple_GET_ITEM(__pyx_args, 166);
        case 166: values[165] = PyTuple_GET_ITEM(__pyx_args, 165);
        case 165: values[164] = PyTuple_GET_ITEM(__pyx_args, 164);
        case 164: values[163] = PyTuple_GET_ITEM(__pyx_args, 163);
        case 163: values[162] = PyTuple_GET_ITEM(__pyx_args, 162);
        case 162: values[161] = PyTuple_GET_ITEM(__pyx_args, 161);
        case 161: values[160] = PyTuple_GET_ITEM(__pyx_args, 160);
        case 160: values[159] = PyTuple_GET_ITEM(__pyx_args, 159);
        case 159: values[158] = PyTuple_GET_ITEM(__pyx_args, 158);
        case 158: values[157] = PyTuple_GET_ITEM(__pyx_args, 157);
        case 157: values[156] = PyTuple_GET_ITEM(__pyx_args, 156);
        case 156: values[155] = PyTuple_GET_ITEM(__pyx_args, 155);
        case 155: values[154] = PyTuple_GET_ITEM(__pyx_args, 154);
        case 154: values[153] = PyTuple_GET_ITEM(__pyx_args, 153);
        case 153: values[152] = PyTuple_GET_ITEM(__pyx_args, 152);
        case 152: values[151] = PyTuple_GET_ITEM(__pyx_args, 151);
        case 151: values[150] = PyTuple_GET_ITEM(__pyx_args, 150);
        case 150: values[149] = PyTuple_GET_ITEM(__pyx_args, 149);
        case 149: values[148] = PyTuple_GET_ITEM(__pyx_args, 148);
        case 148: values[147] = PyTuple_GET_ITEM(__pyx_args, 147);
        case 147: values[146] = PyTuple_GET_ITEM(__pyx_args, 146);
        case 146: values[145] = PyTuple_GET_ITEM(__pyx_args, 145);
        case 145: values[144] = PyTuple_GET_ITEM(__pyx_args, 144);
        case 144: values[143] = PyTuple_GET_ITEM(__pyx_args, 143);
        case 143: values[142] = PyTuple_GET_ITEM(__pyx_args, 142);
        case 142: values[141] = PyTuple_GET_ITEM(__pyx_args, 141);
        case 141: values[140] = PyTuple_GET_ITEM(__pyx_args, 140);
        case 140: values[139] = PyTuple_GET_ITEM(__pyx_args, 139);
        case 139: values[138] = PyTuple_GET_ITEM(__pyx_args, 138);
        case 138: values[137] = PyTuple_GET_ITEM(__pyx_args, 137);
        case 137: values[136] = PyTuple_GET_ITEM(__pyx_args, 136);
        case 136: values[135] = PyTuple_GET_ITEM(__pyx_args, 135);
        case 135: values[134] = PyTuple_GET_ITEM(__pyx_args, 134);
        case 134: values[133] = PyTuple_GET_ITEM(__pyx_args, 133);
        case 133: values[132] = PyTuple_GET_ITEM(__pyx_args, 132);
        case 132: values[131] = PyTuple_GET_ITEM(__pyx_args, 131);
        case 131: values[130] = PyTuple_GET_ITEM(__pyx_args, 130);
        case 130: values[129] = PyTuple_GET_ITEM(__pyx_args, 129);
        case 129: values[128] = PyTuple_GET_ITEM(__pyx_args, 128);
        case 128: values[127] = PyTuple_GET_ITEM(__pyx_args, 127);
        case 127: values[126] = PyTuple_GET_ITEM(__pyx_args, 126);
        case 126: values[125] = PyTuple_GET_ITEM(__pyx_args, 125);
        case 125: values[124] = PyTuple_GET_ITEM(__pyx_args, 124);
        case 124: values[123] = PyTuple_GET_ITEM(__pyx_args, 123);
        case 123: values[122] = PyTuple_GET_ITEM(__pyx_args, 122);
        case 122: values[121] = PyTuple_GET_ITEM(__pyx_args, 121);
        case 121: values[120] = PyTuple_GET_ITEM(__pyx_args, 120);
        case 120: values[119] = PyTuple_GET_ITEM(__pyx_args, 119);
        case 119: values[118] = PyTuple_GET_ITEM(__pyx_args, 118);
        case 118: values[117] = PyTuple_GET_ITEM(__pyx_args, 117);
        case 117: values[116] = PyTuple_GET_ITEM(__pyx_args, 116);
        case 116: values[115] = PyTuple_GET_ITEM(__pyx_args, 115);
        case 115: values[114] = PyTuple_GET_ITEM(__pyx_args, 114);
        case 114: values[113] = PyTuple_GET_ITEM(__pyx_args, 113);
        case 113: values[112] = PyTuple_GET_ITEM(__pyx_args, 112);
        case 112: values[111] = PyTuple_GET_ITEM(__pyx_args, 111);
        case 111: values[110] = PyTuple_GET_ITEM(__pyx_args, 110);
        case 110: values[109] = PyTuple_GET_ITEM(__pyx_args, 109);
        case 109: values[108] = PyTuple_GET_ITEM(__pyx_args, 108);
        case 108: values[107] = PyTuple_GET_ITEM(__pyx_args, 107);
        case 107: values[106] = PyTuple_GET_ITEM(__pyx_args, 106);
        case 106: values[105] = PyTuple_GET_ITEM(__pyx_args, 105);
        case 105: values[104] = PyTuple_GET_ITEM(__pyx_args, 104);
        case 104: values[103] = PyTuple_GET_ITEM(__pyx_args, 103);
        case 103: values[102] = PyTuple_GET_ITEM(__pyx_args, 102);
        case 102: values[101] = PyTuple_GET_ITEM(__pyx_args, 101);
        case 101: values[100] = PyTuple_GET_ITEM(__pyx_args, 100);
        case 100: values[99] = PyTuple_GET_ITEM(__pyx_args, 99);
        case 99: values[98] = PyTuple_GET_ITEM(__pyx_args, 98);
        case 98: values[97] = PyTuple_GET_ITEM(__pyx_args, 97);
        case 97: values[96] = PyTuple_GET_ITEM(__pyx_args, 96);
        case 96: values[95] = PyTuple_GET_ITEM(__pyx_args, 95);
        case 95: values[94] = PyTuple_GET_ITEM(__pyx_args, 94);
        case 94: values[93] = PyTuple_GET_ITEM(__pyx_args, 93);
        case 93: values[92] = PyTuple_GET_ITEM(__pyx_args, 92);
        case 92: values[91] = PyTuple_GET_ITEM(__pyx_args, 91);
        case 91: values[90] = PyTuple_GET_ITEM(__pyx_args, 90);
        case 90: values[89] = PyTuple_GET_ITEM(__pyx_args, 89);
        case 89: values[88] = PyTuple_GET_ITEM(__pyx_args, 88);
        case 88: values[87] = PyTuple_GET_ITEM(__pyx_args, 87);
        case 87: values[86] = PyTuple_GET_ITEM(__pyx_args, 86);
        case 86: values[85] = PyTuple_GET_ITEM(__pyx_args, 85);
        case 85: values[84] = PyTuple_GET_ITEM(__pyx_args, 84);
        case 84: values[83] = PyTuple_GET_ITEM(__pyx_args, 83);
        case 83: values[82] = PyTuple_GET_ITEM(__pyx_args, 82);
        case 82: values[81] = PyTuple_GET_ITEM(__pyx_args, 81);
        case 81: values[80] = PyTuple_GET_ITEM(__pyx_args, 80);
        case 80: values[79] = PyTuple_GET_ITEM(__pyx_args, 79);
        case 79: values[78] = PyTuple_GET_ITEM(__pyx_args, 78);
        case 78: values[77] = PyTuple_GET_ITEM(__pyx_args, 77);
        case 77: values[76] = PyTuple_GET_ITEM(__pyx_args, 76);
        case 76: values[75] = PyTuple_GET_ITEM(__pyx_args, 75);
        case 75: values[74] = PyTuple_GET_ITEM(__pyx_args, 74);
        case 74: values[73] = PyTuple_GET_ITEM(__pyx_args, 73);
        case 73: values[72] = PyTuple_GET_ITEM(__pyx_args, 72);
        case 72: values[71] = PyTuple_GET_ITEM(__pyx_args, 71);
        case 71: values[70] = PyTuple_GET_ITEM(__pyx_args, 70);
        case 70: values[69] = PyTuple_GET_ITEM(__pyx_args, 69);
        case 69: values[68] = PyTuple_GET_ITEM(__pyx_args, 68);
        case 68: values[67] = PyTuple_GET_ITEM(__pyx_args, 67);
        case 67: values[66] = PyTuple_GET_ITEM(__pyx_args, 66);
        case 66: values[65] = PyTuple_GET_ITEM(__pyx_args, 65);
        case 65: values[64] = PyTuple_GET_ITEM(__pyx_args, 64);
        case 64: values[63] = PyTuple_GET_ITEM(__pyx_args, 63);
        case 63: values[62] = PyTuple_GET_ITEM(__pyx_args, 62);
        case 62: values[61] = PyTuple_GET_ITEM(__pyx_args, 61);
        case 61: values[60] = PyTuple_GET_ITEM(__pyx_args, 60);
        case 60: values[59] = PyTuple_GET_ITEM(__pyx_args, 59);
        case 59: values[58] = PyTuple_GET_ITEM(__pyx_args, 58);
        case 58: values[57] = PyTuple_GET_ITEM(__pyx_args, 57);
        case 57: values[56] = PyTuple_GET_ITEM(__pyx_args, 56);
        case 56: values[55] = PyTuple_GET_ITEM(__pyx_args, 55);
        case 55: values[54] = PyTuple_GET_ITEM(__pyx_args, 54);
        case 54: values[53] = PyTuple_GET_ITEM(__pyx_args, 53);
        case 53: values[52] = PyTuple_GET_ITEM(__pyx_args, 52);
        case 52: values[51] = PyTuple_GET_ITEM(__pyx_args, 51);
        case 51: values[50] = PyTuple_GET_ITEM(__pyx_args, 50);
        case 50: values[49] = PyTuple_GET_ITEM(__pyx_args, 49);
        case 49: values[48] = PyTuple_GET_ITEM(__pyx_args, 48);
        case 48: values[47] = PyTuple_GET_ITEM(__pyx_args, 47);
        case 47: values[46] = PyTuple_GET_ITEM(__pyx_args, 46);
        case 46: values[45] = PyTuple_GET_ITEM(__pyx_args, 45);
        case 45: values[44] = PyTuple_GET_ITEM(__pyx_args, 44);
        case 44: values[43] = PyTuple_GET_ITEM(__pyx_args, 43);
        case 43: values[42] = PyTuple_GET_ITEM(__pyx_args, 42);
        case 42: values[41] = PyTuple_GET_ITEM(__pyx_args, 41);
        case 41: values[40] = PyTuple_GET_ITEM(__pyx_args, 40);
        case 40: values[39] = PyTuple_GET_ITEM(__pyx_args, 39);
        case 39: values[38] = PyTuple_GET_ITEM(__pyx_args, 38);
        case 38: values[37] = PyTuple_GET_ITEM(__pyx_args, 37);
        case 37: values[36] = PyTuple_GET_ITEM(__pyx_args, 36);
        case 36: values[35] = PyTuple_GET_ITEM(__pyx_args, 35);
        case 35: values[34] = PyTuple_GET_ITEM(__pyx_args, 34);
        case 34: values[33] = PyTuple_GET_ITEM(__pyx_args, 33);
        case 33: values[32] = PyTuple_GET_ITEM(__pyx_args, 32);
        case 32: values[31] = PyTuple_GET_ITEM(__pyx_args, 31);
        case 31: values[30] = PyTuple_GET_ITEM(__pyx_args, 30);
        case 30: values[29] = PyTuple_GET_ITEM(__pyx_args, 29);
        case 29: values[28] = PyTuple_GET_ITEM(__pyx_args, 28);
        case 28: values[27] = PyTuple_GET_ITEM(__pyx_args, 27);
        case 27: values[26] = PyTuple_GET_ITEM(__pyx_args, 26);
        case 26: values[25] = PyTuple_GET_ITEM(__pyx_args, 25);
        case 25: values[24] = PyTuple_GET_ITEM(__pyx_args, 24);
        case 24: values[23] = PyTuple_GET_ITEM(__pyx_args, 23);
        case 23: values[22] = PyTuple_GET_ITEM(__pyx_args, 22);
        case 22: values[21] = PyTuple_GET_ITEM(__pyx_args, 21);
        case 21: values[20] = PyTuple_GET_ITEM(__pyx_args, 20);
        case 20: values[19] = PyTuple_GET_ITEM(__pyx_args, 19);
        case 19: values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
        case 18: values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
        case 17: values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_trial_ref)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_grad_trial_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 1); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 2); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_velocity_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 3); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_MOVING_DOMAIN)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 4); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_PSTAB)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 5); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_l2g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 6); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case  7:
        if (likely((values[7] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dV_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 7); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case  8:
        if (likely((values[8] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_trial_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 8); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case  9:
        if (likely((values[9] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_grad_trial_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 9); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 10:
        if (likely((values[10] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_test_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 10); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 11:
        if (likely((values[11] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_grad_test_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 11); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 12:
        if (likely((values[12] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 12); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 13:
        if (likely((values[13] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_grad_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 13); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 14:
        if (likely((values[14] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 14); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 15:
        if (likely((values[15] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_grad_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 15); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 16:
        if (likely((values[16] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_trial_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 16); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 17:
        if (likely((values[17] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_grad_trial_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 17); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 18:
        if (likely((values[18] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_hess_trial_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 18); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 19:
        if (likely((values[19] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_test_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 19); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 20:
        if (likely((values[20] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_grad_test_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 20); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 21:
        if (likely((values[21] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 21); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 22:
        if (likely((values[22] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_grad_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 22); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 23:
        if (likely((values[23] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dS_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 23); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 24:
        if (likely((values[24] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 24); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 25:
        if (likely((values[25] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_grad_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 25); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 26:
        if (likely((values[26] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_test_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 26); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 27:
        if (likely((values[27] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_grad_test_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 27); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 28:
        if (likely((values[28] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 28); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 29:
        if (likely((values[29] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_grad_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 29); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 30:
        if (likely((values[30] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_test_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 30); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 31:
        if (likely((values[31] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_grad_test_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 31); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 32:
        if (likely((values[32] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_normal_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 32); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 33:
        if (likely((values[33] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_boundaryJac_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 33); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 34:
        if (likely((values[34] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_eb_adjoint_sigma)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 34); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 35:
        if (likely((values[35] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_elementDiameter)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 35); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 36:
        if (likely((values[36] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nodeDiametersArray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 36); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 37:
        if (likely((values[37] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_hFactor)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 37); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 38:
        if (likely((values[38] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nElements_global)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 38); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 39:
        if (likely((values[39] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nElements_owned)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 39); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 40:
        if (likely((values[40] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nElementBoundaries_owned)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 40); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 41:
        if (likely((values[41] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_useRBLES)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 41); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 42:
        if (likely((values[42] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_useMetrics)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 42); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 43:
        if (likely((values[43] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_alphaBDF)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 43); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 44:
        if (likely((values[44] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_epsFact_rho)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 44); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 45:
        if (likely((values[45] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_epsFact_mu)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 45); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 46:
        if (likely((values[46] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sigma)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 46); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 47:
        if (likely((values[47] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rho_0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 47); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 48:
        if (likely((values[48] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nu_0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 48); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 49:
        if (likely((values[49] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rho_1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 49); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 50:
        if (likely((values[50] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nu_1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 50); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 51:
        if (likely((values[51] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_smagorinskyConstant)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 51); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 52:
        if (likely((values[52] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_turbulenceClosureModel)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 52); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 53:
        if (likely((values[53] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Ct_sge)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 53); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 54:
        if (likely((values[54] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Cd_sge)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 54); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 55:
        if (likely((values[55] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_C_dc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 55); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 56:
        if (likely((values[56] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_C_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 56); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 57:
        if (likely((values[57] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_eps_solid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 57); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 58:
        if (likely((values[58] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_phi_solid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 58); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 59:
        if (likely((values[59] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_velocity_solid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 59); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 60:
        if (likely((values[60] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_vos)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 60); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 61:
        if (likely((values[61] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_dvos_dt)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 61); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 62:
        if (likely((values[62] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_dragAlpha)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 62); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 63:
        if (likely((values[63] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_dragBeta)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 63); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 64:
        if (likely((values[64] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_mass_source)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 64); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 65:
        if (likely((values[65] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_turb_var_0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 65); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 66:
        if (likely((values[66] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_turb_var_1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 66); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 67:
        if (likely((values[67] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_turb_var_grad_0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 67); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 68:
        if (likely((values[68] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_eddy_viscosity)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 68); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 69:
        if (likely((values[69] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_l2g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 69); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 70:
        if (likely((values[70] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_l2g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 70); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 71:
        if (likely((values[71] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 71); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 72:
        if (likely((values[72] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_u_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 72); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 73:
        if (likely((values[73] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_v_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 73); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 74:
        if (likely((values[74] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_w_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 74); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 75:
        if (likely((values[75] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_u_dof_old)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 75); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 76:
        if (likely((values[76] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_v_dof_old)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 76); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 77:
        if (likely((values[77] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_w_dof_old)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 77); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 78:
        if (likely((values[78] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_u_dof_old_old)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 78); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 79:
        if (likely((values[79] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_v_dof_old_old)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 79); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 80:
        if (likely((values[80] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_w_dof_old_old)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 80); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 81:
        if (likely((values[81] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 81); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 82:
        if (likely((values[82] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_useVF)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 82); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 83:
        if (likely((values[83] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vf)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 83); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 84:
        if (likely((values[84] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_phi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 84); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 85:
        if (likely((values[85] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_normal_phi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 85); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 86:
        if (likely((values[86] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_kappa_phi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 86); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 87:
        if (likely((values[87] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_mom_u_acc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 87); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 88:
        if (likely((values[88] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_mom_v_acc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 88); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 89:
        if (likely((values[89] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_mom_w_acc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 89); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 90:
        if (likely((values[90] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_mass_adv)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 90); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 91:
        if (likely((values[91] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_mom_u_acc_beta_bdf)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 91); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 92:
        if (likely((values[92] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_mom_v_acc_beta_bdf)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 92); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 93:
        if (likely((values[93] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_mom_w_acc_beta_bdf)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 93); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 94:
        if (likely((values[94] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_dV)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 94); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 95:
        if (likely((values[95] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_dV_last)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 95); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 96:
        if (likely((values[96] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_velocity_sge)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 96); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 97:
        if (likely((values[97] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_velocity_star)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 97); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 98:
        if (likely((values[98] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_cfl)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 98); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 99:
        if (likely((values[99] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_numDiff_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 99); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 100:
        if (likely((values[100] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_numDiff_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 100); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 101:
        if (likely((values[101] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_numDiff_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 101); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 102:
        if (likely((values[102] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_numDiff_u_last)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 102); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 103:
        if (likely((values[103] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_numDiff_v_last)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 103); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 104:
        if (likely((values[104] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_numDiff_w_last)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 104); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 105:
        if (likely((values[105] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_u_u_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 105); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 106:
        if (likely((values[106] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_u_u_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 106); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 107:
        if (likely((values[107] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_u_v_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 107); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 108:
        if (likely((values[108] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_u_v_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 108); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 109:
        if (likely((values[109] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_u_w_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 109); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 110:
        if (likely((values[110] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_u_w_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 110); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 111:
        if (likely((values[111] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_v_v_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 111); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 112:
        if (likely((values[112] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_v_v_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 112); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 113:
        if (likely((values[113] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_v_u_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 113); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 114:
        if (likely((values[114] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_v_u_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 114); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 115:
        if (likely((values[115] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_v_w_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 115); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 116:
        if (likely((values[116] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_v_w_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 116); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 117:
        if (likely((values[117] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_w_w_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 117); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 118:
        if (likely((values[118] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_w_w_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 118); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 119:
        if (likely((values[119] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_w_u_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 119); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 120:
        if (likely((values[120] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_w_u_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 120); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 121:
        if (likely((values[121] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_w_v_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 121); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 122:
        if (likely((values[122] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_w_v_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 122); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 123:
        if (likely((values[123] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_offset_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 123); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 124:
        if (likely((values[124] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_offset_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 124); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 125:
        if (likely((values[125] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_offset_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 125); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 126:
        if (likely((values[126] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_offset_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 126); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 127:
        if (likely((values[127] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stride_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 127); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 128:
        if (likely((values[128] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stride_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 128); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 129:
        if (likely((values[129] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stride_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 129); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 130:
        if (likely((values[130] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stride_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 130); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 131:
        if (likely((values[131] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_globalResidual)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 131); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 132:
        if (likely((values[132] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nExteriorElementBoundaries_globa)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 132); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 133:
        if (likely((values[133] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_exteriorElementBoundariesArray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 133); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 134:
        if (likely((values[134] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_elementBoundaryElementsArray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 134); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 135:
        if (likely((values[135] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_elementBoundaryLocalElementBound)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 135); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 136:
        if (likely((values[136] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_vf_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 136); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 137:
        if (likely((values[137] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bc_ebqe_vf_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 137); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 138:
        if (likely((values[138] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_phi_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 138); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 139:
        if (likely((values[139] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bc_ebqe_phi_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 139); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 140:
        if (likely((values[140] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_normal_phi_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 140); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 141:
        if (likely((values[141] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_kappa_phi_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 141); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 142:
        if (likely((values[142] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_vos_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 142); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 143:
        if (likely((values[143] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_turb_var_0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 143); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 144:
        if (likely((values[144] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_turb_var_1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 144); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 145:
        if (likely((values[145] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isDOFBoundary_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 145); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 146:
        if (likely((values[146] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isDOFBoundary_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 146); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 147:
        if (likely((values[147] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isDOFBoundary_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 147); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 148:
        if (likely((values[148] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isDOFBoundary_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 148); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 149:
        if (likely((values[149] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isAdvectiveFluxBoundary_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 149); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 150:
        if (likely((values[150] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isAdvectiveFluxBoundary_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 150); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 151:
        if (likely((values[151] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isAdvectiveFluxBoundary_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 151); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 152:
        if (likely((values[152] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isAdvectiveFluxBoundary_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 152); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 153:
        if (likely((values[153] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isDiffusiveFluxBoundary_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 153); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 154:
        if (likely((values[154] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isDiffusiveFluxBoundary_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 154); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 155:
        if (likely((values[155] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isDiffusiveFluxBoundary_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 155); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 156:
        if (likely((values[156] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_p_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 156); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 157:
        if (likely((values[157] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_flux_mass_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 157); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 158:
        if (likely((values[158] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_flux_mom_u_adv_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 158); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 159:
        if (likely((values[159] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_flux_mom_v_adv_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 159); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 160:
        if (likely((values[160] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_flux_mom_w_adv_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 160); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 161:
        if (likely((values[161] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_u_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 161); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 162:
        if (likely((values[162] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_flux_u_diff_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 162); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 163:
        if (likely((values[163] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_penalty_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 163); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 164:
        if (likely((values[164] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_v_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 164); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 165:
        if (likely((values[165] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_flux_v_diff_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 165); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 166:
        if (likely((values[166] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_w_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 166); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 167:
        if (likely((values[167] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_flux_w_diff_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 167); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 168:
        if (likely((values[168] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 168); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 169:
        if (likely((values[169] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_velocity)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 169); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 170:
        if (likely((values[170] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_velocity)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 170); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 171:
        if (likely((values[171] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_grad_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 171); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 172:
        if (likely((values[172] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_grad_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 172); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 173:
        if (likely((values[173] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_grad_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 173); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 174:
        if (likely((values[174] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_divU)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 174); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 175:
        if (likely((values[175] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_grad_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 175); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 176:
        if (likely((values[176] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_grad_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 176); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 177:
        if (likely((values[177] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_grad_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 177); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 178:
        if (likely((values[178] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flux)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 178); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 179:
        if (likely((values[179] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_elementResidual_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 179); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 180:
        if (likely((values[180] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_elementFlags)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 180); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 181:
        if (likely((values[181] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_boundaryFlags)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 181); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 182:
        if (likely((values[182] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_barycenters)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 182); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 183:
        if (likely((values[183] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_wettedAreas)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 183); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 184:
        if (likely((values[184] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_netForces_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 184); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 185:
        if (likely((values[185] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_netForces_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 185); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 186:
        if (likely((values[186] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_netMoments)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 186); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 187:
        if (likely((values[187] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_rho)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 187); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 188:
        if (likely((values[188] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_rho)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 188); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 189:
        if (likely((values[189] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_nu)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 189); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 190:
        if (likely((values[190] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_nu)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 190); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 191:
        if (likely((values[191] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nParticles)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 191); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 192:
        if (likely((values[192] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_epsFact)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 192); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 193:
        if (likely((values[193] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_alpha)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 193); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 194:
        if (likely((values[194] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_beta)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 194); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 195:
        if (likely((values[195] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_penalty_constant)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 195); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 196:
        if (likely((values[196] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_signed_distances)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 196); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 197:
        if (likely((values[197] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_signed_distance_normals)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 197); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 198:
        if (likely((values[198] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_velocities)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 198); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 199:
        if (likely((values[199] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_centroids)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 199); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 200:
        if (likely((values[200] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_netForces)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 200); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 201:
        if (likely((values[201] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_netMoments)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 201); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 202:
        if (likely((values[202] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_surfaceArea)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 202); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 203:
        if (likely((values[203] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_nitsche)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 203); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 204:
        if (likely((values[204] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_STABILIZATION_TYPE)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 204); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 205:
        if (likely((values[205] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_areaRefElement)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 205); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 206:
        if (likely((values[206] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cMax)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 206); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 207:
        if (likely((values[207] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cE)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 207); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 208:
        if (likely((values[208] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_forcex)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 208); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 209:
        if (likely((values[209] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_forcey)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 209); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 210:
        if (likely((values[210] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_forcez)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 210); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 211:
        if (likely((values[211] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_KILL_PRESSURE_TERM)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 211); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 212:
        if (likely((values[212] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dt)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 212); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 213:
        if (likely((values[213] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_entropyResidualAtCell)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 213); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 214:
        if (likely((values[214] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_maxSpeed2AtCell)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 214); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 215:
        if (likely((values[215] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_maxSpeed2AtOmega)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 215); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 216:
        if (likely((values[216] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rhoAtCell)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 216); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 217:
        if (likely((values[217] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_muAtCell)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 217); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 218:
        if (likely((values[218] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_quantDOFs)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 218); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 219:
        if (likely((values[219] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_numDOFsPerEqn)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 219); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 220:
        if (likely((values[220] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_DofLoops)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 220); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 221:
        if (likely((values[221] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_DofLoops)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 221); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 222:
        if (likely((values[222] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ML)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 222); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 223:
        if (likely((values[223] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Cx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 223); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 224:
        if (likely((values[224] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Cy)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 224); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 225:
        if (likely((values[225] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Cz)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 225); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 226:
        if (likely((values[226] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_MATERIAL_PARAMETERS_AS_FUNCTION)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 226); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 227:
        if (likely((values[227] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_density_as_function)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 227); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 228:
        if (likely((values[228] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dynamic_viscosity_as_function)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 228); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 229:
        if (likely((values[229] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_density_as_function)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 229); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 230:
        if (likely((values[230] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_dynamic_viscosity_as_functi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 230); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
        case 231:
        if (likely((values[231] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_order_polynomial)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 231); __PYX_ERR(0, 1744, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calculateResidual_entropy_viscosity") < 0)) __PYX_ERR(0, 1744, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 232) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
      values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
      values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
      values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
      values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
      values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
      values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
      values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
      values[19] = PyTuple_GET_ITEM(__pyx_args, 19);
      values[20] = PyTuple_GET_ITEM(__pyx_args, 20);
      values[21] = PyTuple_GET_ITEM(__pyx_args, 21);
      values[22] = PyTuple_GET_ITEM(__pyx_args, 22);
      values[23] = PyTuple_GET_ITEM(__pyx_args, 23);
      values[24] = PyTuple_GET_ITEM(__pyx_args, 24);
      values[25] = PyTuple_GET_ITEM(__pyx_args, 25);
      values[26] = PyTuple_GET_ITEM(__pyx_args, 26);
      values[27] = PyTuple_GET_ITEM(__pyx_args, 27);
      values[28] = PyTuple_GET_ITEM(__pyx_args, 28);
      values[29] = PyTuple_GET_ITEM(__pyx_args, 29);
      values[30] = PyTuple_GET_ITEM(__pyx_args, 30);
      values[31] = PyTuple_GET_ITEM(__pyx_args, 31);
      values[32] = PyTuple_GET_ITEM(__pyx_args, 32);
      values[33] = PyTuple_GET_ITEM(__pyx_args, 33);
      values[34] = PyTuple_GET_ITEM(__pyx_args, 34);
      values[35] = PyTuple_GET_ITEM(__pyx_args, 35);
      values[36] = PyTuple_GET_ITEM(__pyx_args, 36);
      values[37] = PyTuple_GET_ITEM(__pyx_args, 37);
      values[38] = PyTuple_GET_ITEM(__pyx_args, 38);
      values[39] = PyTuple_GET_ITEM(__pyx_args, 39);
      values[40] = PyTuple_GET_ITEM(__pyx_args, 40);
      values[41] = PyTuple_GET_ITEM(__pyx_args, 41);
      values[42] = PyTuple_GET_ITEM(__pyx_args, 42);
      values[43] = PyTuple_GET_ITEM(__pyx_args, 43);
      values[44] = PyTuple_GET_ITEM(__pyx_args, 44);
      values[45] = PyTuple_GET_ITEM(__pyx_args, 45);
      values[46] = PyTuple_GET_ITEM(__pyx_args, 46);
      values[47] = PyTuple_GET_ITEM(__pyx_args, 47);
      values[48] = PyTuple_GET_ITEM(__pyx_args, 48);
      values[49] = PyTuple_GET_ITEM(__pyx_args, 49);
      values[50] = PyTuple_GET_ITEM(__pyx_args, 50);
      values[51] = PyTuple_GET_ITEM(__pyx_args, 51);
      values[52] = PyTuple_GET_ITEM(__pyx_args, 52);
      values[53] = PyTuple_GET_ITEM(__pyx_args, 53);
      values[54] = PyTuple_GET_ITEM(__pyx_args, 54);
      values[55] = PyTuple_GET_ITEM(__pyx_args, 55);
      values[56] = PyTuple_GET_ITEM(__pyx_args, 56);
      values[57] = PyTuple_GET_ITEM(__pyx_args, 57);
      values[58] = PyTuple_GET_ITEM(__pyx_args, 58);
      values[59] = PyTuple_GET_ITEM(__pyx_args, 59);
      values[60] = PyTuple_GET_ITEM(__pyx_args, 60);
      values[61] = PyTuple_GET_ITEM(__pyx_args, 61);
      values[62] = PyTuple_GET_ITEM(__pyx_args, 62);
      values[63] = PyTuple_GET_ITEM(__pyx_args, 63);
      values[64] = PyTuple_GET_ITEM(__pyx_args, 64);
      values[65] = PyTuple_GET_ITEM(__pyx_args, 65);
      values[66] = PyTuple_GET_ITEM(__pyx_args, 66);
      values[67] = PyTuple_GET_ITEM(__pyx_args, 67);
      values[68] = PyTuple_GET_ITEM(__pyx_args, 68);
      values[69] = PyTuple_GET_ITEM(__pyx_args, 69);
      values[70] = PyTuple_GET_ITEM(__pyx_args, 70);
      values[71] = PyTuple_GET_ITEM(__pyx_args, 71);
      values[72] = PyTuple_GET_ITEM(__pyx_args, 72);
      values[73] = PyTuple_GET_ITEM(__pyx_args, 73);
      values[74] = PyTuple_GET_ITEM(__pyx_args, 74);
      values[75] = PyTuple_GET_ITEM(__pyx_args, 75);
      values[76] = PyTuple_GET_ITEM(__pyx_args, 76);
      values[77] = PyTuple_GET_ITEM(__pyx_args, 77);
      values[78] = PyTuple_GET_ITEM(__pyx_args, 78);
      values[79] = PyTuple_GET_ITEM(__pyx_args, 79);
      values[80] = PyTuple_GET_ITEM(__pyx_args, 80);
      values[81] = PyTuple_GET_ITEM(__pyx_args, 81);
      values[82] = PyTuple_GET_ITEM(__pyx_args, 82);
      values[83] = PyTuple_GET_ITEM(__pyx_args, 83);
      values[84] = PyTuple_GET_ITEM(__pyx_args, 84);
      values[85] = PyTuple_GET_ITEM(__pyx_args, 85);
      values[86] = PyTuple_GET_ITEM(__pyx_args, 86);
      values[87] = PyTuple_GET_ITEM(__pyx_args, 87);
      values[88] = PyTuple_GET_ITEM(__pyx_args, 88);
      values[89] = PyTuple_GET_ITEM(__pyx_args, 89);
      values[90] = PyTuple_GET_ITEM(__pyx_args, 90);
      values[91] = PyTuple_GET_ITEM(__pyx_args, 91);
      values[92] = PyTuple_GET_ITEM(__pyx_args, 92);
      values[93] = PyTuple_GET_ITEM(__pyx_args, 93);
      values[94] = PyTuple_GET_ITEM(__pyx_args, 94);
      values[95] = PyTuple_GET_ITEM(__pyx_args, 95);
      values[96] = PyTuple_GET_ITEM(__pyx_args, 96);
      values[97] = PyTuple_GET_ITEM(__pyx_args, 97);
      values[98] = PyTuple_GET_ITEM(__pyx_args, 98);
      values[99] = PyTuple_GET_ITEM(__pyx_args, 99);
      values[100] = PyTuple_GET_ITEM(__pyx_args, 100);
      values[101] = PyTuple_GET_ITEM(__pyx_args, 101);
      values[102] = PyTuple_GET_ITEM(__pyx_args, 102);
      values[103] = PyTuple_GET_ITEM(__pyx_args, 103);
      values[104] = PyTuple_GET_ITEM(__pyx_args, 104);
      values[105] = PyTuple_GET_ITEM(__pyx_args, 105);
      values[106] = PyTuple_GET_ITEM(__pyx_args, 106);
      values[107] = PyTuple_GET_ITEM(__pyx_args, 107);
      values[108] = PyTuple_GET_ITEM(__pyx_args, 108);
      values[109] = PyTuple_GET_ITEM(__pyx_args, 109);
      values[110] = PyTuple_GET_ITEM(__pyx_args, 110);
      values[111] = PyTuple_GET_ITEM(__pyx_args, 111);
      values[112] = PyTuple_GET_ITEM(__pyx_args, 112);
      values[113] = PyTuple_GET_ITEM(__pyx_args, 113);
      values[114] = PyTuple_GET_ITEM(__pyx_args, 114);
      values[115] = PyTuple_GET_ITEM(__pyx_args, 115);
      values[116] = PyTuple_GET_ITEM(__pyx_args, 116);
      values[117] = PyTuple_GET_ITEM(__pyx_args, 117);
      values[118] = PyTuple_GET_ITEM(__pyx_args, 118);
      values[119] = PyTuple_GET_ITEM(__pyx_args, 119);
      values[120] = PyTuple_GET_ITEM(__pyx_args, 120);
      values[121] = PyTuple_GET_ITEM(__pyx_args, 121);
      values[122] = PyTuple_GET_ITEM(__pyx_args, 122);
      values[123] = PyTuple_GET_ITEM(__pyx_args, 123);
      values[124] = PyTuple_GET_ITEM(__pyx_args, 124);
      values[125] = PyTuple_GET_ITEM(__pyx_args, 125);
      values[126] = PyTuple_GET_ITEM(__pyx_args, 126);
      values[127] = PyTuple_GET_ITEM(__pyx_args, 127);
      values[128] = PyTuple_GET_ITEM(__pyx_args, 128);
      values[129] = PyTuple_GET_ITEM(__pyx_args, 129);
      values[130] = PyTuple_GET_ITEM(__pyx_args, 130);
      values[131] = PyTuple_GET_ITEM(__pyx_args, 131);
      values[132] = PyTuple_GET_ITEM(__pyx_args, 132);
      values[133] = PyTuple_GET_ITEM(__pyx_args, 133);
      values[134] = PyTuple_GET_ITEM(__pyx_args, 134);
      values[135] = PyTuple_GET_ITEM(__pyx_args, 135);
      values[136] = PyTuple_GET_ITEM(__pyx_args, 136);
      values[137] = PyTuple_GET_ITEM(__pyx_args, 137);
      values[138] = PyTuple_GET_ITEM(__pyx_args, 138);
      values[139] = PyTuple_GET_ITEM(__pyx_args, 139);
      values[140] = PyTuple_GET_ITEM(__pyx_args, 140);
      values[141] = PyTuple_GET_ITEM(__pyx_args, 141);
      values[142] = PyTuple_GET_ITEM(__pyx_args, 142);
      values[143] = PyTuple_GET_ITEM(__pyx_args, 143);
      values[144] = PyTuple_GET_ITEM(__pyx_args, 144);
      values[145] = PyTuple_GET_ITEM(__pyx_args, 145);
      values[146] = PyTuple_GET_ITEM(__pyx_args, 146);
      values[147] = PyTuple_GET_ITEM(__pyx_args, 147);
      values[148] = PyTuple_GET_ITEM(__pyx_args, 148);
      values[149] = PyTuple_GET_ITEM(__pyx_args, 149);
      values[150] = PyTuple_GET_ITEM(__pyx_args, 150);
      values[151] = PyTuple_GET_ITEM(__pyx_args, 151);
      values[152] = PyTuple_GET_ITEM(__pyx_args, 152);
      values[153] = PyTuple_GET_ITEM(__pyx_args, 153);
      values[154] = PyTuple_GET_ITEM(__pyx_args, 154);
      values[155] = PyTuple_GET_ITEM(__pyx_args, 155);
      values[156] = PyTuple_GET_ITEM(__pyx_args, 156);
      values[157] = PyTuple_GET_ITEM(__pyx_args, 157);
      values[158] = PyTuple_GET_ITEM(__pyx_args, 158);
      values[159] = PyTuple_GET_ITEM(__pyx_args, 159);
      values[160] = PyTuple_GET_ITEM(__pyx_args, 160);
      values[161] = PyTuple_GET_ITEM(__pyx_args, 161);
      values[162] = PyTuple_GET_ITEM(__pyx_args, 162);
      values[163] = PyTuple_GET_ITEM(__pyx_args, 163);
      values[164] = PyTuple_GET_ITEM(__pyx_args, 164);
      values[165] = PyTuple_GET_ITEM(__pyx_args, 165);
      values[166] = PyTuple_GET_ITEM(__pyx_args, 166);
      values[167] = PyTuple_GET_ITEM(__pyx_args, 167);
      values[168] = PyTuple_GET_ITEM(__pyx_args, 168);
      values[169] = PyTuple_GET_ITEM(__pyx_args, 169);
      values[170] = PyTuple_GET_ITEM(__pyx_args, 170);
      values[171] = PyTuple_GET_ITEM(__pyx_args, 171);
      values[172] = PyTuple_GET_ITEM(__pyx_args, 172);
      values[173] = PyTuple_GET_ITEM(__pyx_args, 173);
      values[174] = PyTuple_GET_ITEM(__pyx_args, 174);
      values[175] = PyTuple_GET_ITEM(__pyx_args, 175);
      values[176] = PyTuple_GET_ITEM(__pyx_args, 176);
      values[177] = PyTuple_GET_ITEM(__pyx_args, 177);
      values[178] = PyTuple_GET_ITEM(__pyx_args, 178);
      values[179] = PyTuple_GET_ITEM(__pyx_args, 179);
      values[180] = PyTuple_GET_ITEM(__pyx_args, 180);
      values[181] = PyTuple_GET_ITEM(__pyx_args, 181);
      values[182] = PyTuple_GET_ITEM(__pyx_args, 182);
      values[183] = PyTuple_GET_ITEM(__pyx_args, 183);
      values[184] = PyTuple_GET_ITEM(__pyx_args, 184);
      values[185] = PyTuple_GET_ITEM(__pyx_args, 185);
      values[186] = PyTuple_GET_ITEM(__pyx_args, 186);
      values[187] = PyTuple_GET_ITEM(__pyx_args, 187);
      values[188] = PyTuple_GET_ITEM(__pyx_args, 188);
      values[189] = PyTuple_GET_ITEM(__pyx_args, 189);
      values[190] = PyTuple_GET_ITEM(__pyx_args, 190);
      values[191] = PyTuple_GET_ITEM(__pyx_args, 191);
      values[192] = PyTuple_GET_ITEM(__pyx_args, 192);
      values[193] = PyTuple_GET_ITEM(__pyx_args, 193);
      values[194] = PyTuple_GET_ITEM(__pyx_args, 194);
      values[195] = PyTuple_GET_ITEM(__pyx_args, 195);
      values[196] = PyTuple_GET_ITEM(__pyx_args, 196);
      values[197] = PyTuple_GET_ITEM(__pyx_args, 197);
      values[198] = PyTuple_GET_ITEM(__pyx_args, 198);
      values[199] = PyTuple_GET_ITEM(__pyx_args, 199);
      values[200] = PyTuple_GET_ITEM(__pyx_args, 200);
      values[201] = PyTuple_GET_ITEM(__pyx_args, 201);
      values[202] = PyTuple_GET_ITEM(__pyx_args, 202);
      values[203] = PyTuple_GET_ITEM(__pyx_args, 203);
      values[204] = PyTuple_GET_ITEM(__pyx_args, 204);
      values[205] = PyTuple_GET_ITEM(__pyx_args, 205);
      values[206] = PyTuple_GET_ITEM(__pyx_args, 206);
      values[207] = PyTuple_GET_ITEM(__pyx_args, 207);
      values[208] = PyTuple_GET_ITEM(__pyx_args, 208);
      values[209] = PyTuple_GET_ITEM(__pyx_args, 209);
      values[210] = PyTuple_GET_ITEM(__pyx_args, 210);
      values[211] = PyTuple_GET_ITEM(__pyx_args, 211);
      values[212] = PyTuple_GET_ITEM(__pyx_args, 212);
      values[213] = PyTuple_GET_ITEM(__pyx_args, 213);
      values[214] = PyTuple_GET_ITEM(__pyx_args, 214);
      values[215] = PyTuple_GET_ITEM(__pyx_args, 215);
      values[216] = PyTuple_GET_ITEM(__pyx_args, 216);
      values[217] = PyTuple_GET_ITEM(__pyx_args, 217);
      values[218] = PyTuple_GET_ITEM(__pyx_args, 218);
      values[219] = PyTuple_GET_ITEM(__pyx_args, 219);
      values[220] = PyTuple_GET_ITEM(__pyx_args, 220);
      values[221] = PyTuple_GET_ITEM(__pyx_args, 221);
      values[222] = PyTuple_GET_ITEM(__pyx_args, 222);
      values[223] = PyTuple_GET_ITEM(__pyx_args, 223);
      values[224] = PyTuple_GET_ITEM(__pyx_args, 224);
      values[225] = PyTuple_GET_ITEM(__pyx_args, 225);
      values[226] = PyTuple_GET_ITEM(__pyx_args, 226);
      values[227] = PyTuple_GET_ITEM(__pyx_args, 227);
      values[228] = PyTuple_GET_ITEM(__pyx_args, 228);
      values[229] = PyTuple_GET_ITEM(__pyx_args, 229);
      values[230] = PyTuple_GET_ITEM(__pyx_args, 230);
      values[231] = PyTuple_GET_ITEM(__pyx_args, 231);
    }
    __pyx_v_mesh_trial_ref = ((PyArrayObject *)values[0]);
    __pyx_v_mesh_grad_trial_ref = ((PyArrayObject *)values[1]);
    __pyx_v_mesh_dof = ((PyArrayObject *)values[2]);
    __pyx_v_mesh_velocity_dof = ((PyArrayObject *)values[3]);
    __pyx_v_MOVING_DOMAIN = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_MOVING_DOMAIN == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1749, __pyx_L3_error)
    __pyx_v_PSTAB = __pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_PSTAB == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1750, __pyx_L3_error)
    __pyx_v_mesh_l2g = ((PyArrayObject *)values[6]);
    __pyx_v_dV_ref = ((PyArrayObject *)values[7]);
    __pyx_v_p_trial_ref = ((PyArrayObject *)values[8]);
    __pyx_v_p_grad_trial_ref = ((PyArrayObject *)values[9]);
    __pyx_v_p_test_ref = ((PyArrayObject *)values[10]);
    __pyx_v_p_grad_test_ref = ((PyArrayObject *)values[11]);
    __pyx_v_q_p = ((PyArrayObject *)values[12]);
    __pyx_v_q_grad_p = ((PyArrayObject *)values[13]);
    __pyx_v_ebqe_p = ((PyArrayObject *)values[14]);
    __pyx_v_ebqe_grad_p = ((PyArrayObject *)values[15]);
    __pyx_v_vel_trial_ref = ((PyArrayObject *)values[16]);
    __pyx_v_vel_grad_trial_ref = ((PyArrayObject *)values[17]);
    __pyx_v_vel_hess_trial_ref = ((PyArrayObject *)values[18]);
    __pyx_v_vel_test_ref = ((PyArrayObject *)values[19]);
    __pyx_v_vel_grad_test_ref = ((PyArrayObject *)values[20]);
    __pyx_v_mesh_trial_trace_ref = ((PyArrayObject *)values[21]);
    __pyx_v_mesh_grad_trial_trace_ref = ((PyArrayObject *)values[22]);
    __pyx_v_dS_ref = ((PyArrayObject *)values[23]);
    __pyx_v_p_trial_trace_ref = ((PyArrayObject *)values[24]);
    __pyx_v_p_grad_trial_trace_ref = ((PyArrayObject *)values[25]);
    __pyx_v_p_test_trace_ref = ((PyArrayObject *)values[26]);
    __pyx_v_p_grad_test_trace_ref = ((PyArrayObject *)values[27]);
    __pyx_v_vel_trial_trace_ref = ((PyArrayObject *)values[28]);
    __pyx_v_vel_grad_trial_trace_ref = ((PyArrayObject *)values[29]);
    __pyx_v_vel_test_trace_ref = ((PyArrayObject *)values[30]);
    __pyx_v_vel_grad_test_trace_ref = ((PyArrayObject *)values[31]);
    __pyx_v_normal_ref = ((PyArrayObject *)values[32]);
    __pyx_v_boundaryJac_ref = ((PyArrayObject *)values[33]);
    __pyx_v_eb_adjoint_sigma = __pyx_PyFloat_AsDouble(values[34]); if (unlikely((__pyx_v_eb_adjoint_sigma == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1779, __pyx_L3_error)
    __pyx_v_elementDiameter = ((PyArrayObject *)values[35]);
    __pyx_v_nodeDiametersArray = ((PyArrayObject *)values[36]);
    __pyx_v_hFactor = __pyx_PyFloat_AsDouble(values[37]); if (unlikely((__pyx_v_hFactor == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1782, __pyx_L3_error)
    __pyx_v_nElements_global = __Pyx_PyInt_As_int(values[38]); if (unlikely((__pyx_v_nElements_global == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1783, __pyx_L3_error)
    __pyx_v_nElements_owned = __Pyx_PyInt_As_int(values[39]); if (unlikely((__pyx_v_nElements_owned == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1784, __pyx_L3_error)
    __pyx_v_nElementBoundaries_owned = __Pyx_PyInt_As_int(values[40]); if (unlikely((__pyx_v_nElementBoundaries_owned == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1785, __pyx_L3_error)
    __pyx_v_useRBLES = __pyx_PyFloat_AsDouble(values[41]); if (unlikely((__pyx_v_useRBLES == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1786, __pyx_L3_error)
    __pyx_v_useMetrics = __pyx_PyFloat_AsDouble(values[42]); if (unlikely((__pyx_v_useMetrics == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1787, __pyx_L3_error)
    __pyx_v_alphaBDF = __pyx_PyFloat_AsDouble(values[43]); if (unlikely((__pyx_v_alphaBDF == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1788, __pyx_L3_error)
    __pyx_v_epsFact_rho = __pyx_PyFloat_AsDouble(values[44]); if (unlikely((__pyx_v_epsFact_rho == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1789, __pyx_L3_error)
    __pyx_v_epsFact_mu = __pyx_PyFloat_AsDouble(values[45]); if (unlikely((__pyx_v_epsFact_mu == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1790, __pyx_L3_error)
    __pyx_v_sigma = __pyx_PyFloat_AsDouble(values[46]); if (unlikely((__pyx_v_sigma == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1791, __pyx_L3_error)
    __pyx_v_rho_0 = __pyx_PyFloat_AsDouble(values[47]); if (unlikely((__pyx_v_rho_0 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1792, __pyx_L3_error)
    __pyx_v_nu_0 = __pyx_PyFloat_AsDouble(values[48]); if (unlikely((__pyx_v_nu_0 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1793, __pyx_L3_error)
    __pyx_v_rho_1 = __pyx_PyFloat_AsDouble(values[49]); if (unlikely((__pyx_v_rho_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1794, __pyx_L3_error)
    __pyx_v_nu_1 = __pyx_PyFloat_AsDouble(values[50]); if (unlikely((__pyx_v_nu_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1795, __pyx_L3_error)
    __pyx_v_smagorinskyConstant = __pyx_PyFloat_AsDouble(values[51]); if (unlikely((__pyx_v_smagorinskyConstant == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1796, __pyx_L3_error)
    __pyx_v_turbulenceClosureModel = __Pyx_PyInt_As_int(values[52]); if (unlikely((__pyx_v_turbulenceClosureModel == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1797, __pyx_L3_error)
    __pyx_v_Ct_sge = __pyx_PyFloat_AsDouble(values[53]); if (unlikely((__pyx_v_Ct_sge == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1798, __pyx_L3_error)
    __pyx_v_Cd_sge = __pyx_PyFloat_AsDouble(values[54]); if (unlikely((__pyx_v_Cd_sge == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1799, __pyx_L3_error)
    __pyx_v_C_dc = __pyx_PyFloat_AsDouble(values[55]); if (unlikely((__pyx_v_C_dc == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1800, __pyx_L3_error)
    __pyx_v_C_b = __pyx_PyFloat_AsDouble(values[56]); if (unlikely((__pyx_v_C_b == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1801, __pyx_L3_error)
    __pyx_v_eps_solid = ((PyArrayObject *)values[57]);
    __pyx_v_phi_solid = ((PyArrayObject *)values[58]);
    __pyx_v_q_velocity_solid = ((PyArrayObject *)values[59]);
    __pyx_v_q_vos = ((PyArrayObject *)values[60]);
    __pyx_v_q_dvos_dt = ((PyArrayObject *)values[61]);
    __pyx_v_q_dragAlpha = ((PyArrayObject *)values[62]);
    __pyx_v_q_dragBeta = ((PyArrayObject *)values[63]);
    __pyx_v_q_mass_source = ((PyArrayObject *)values[64]);
    __pyx_v_q_turb_var_0 = ((PyArrayObject *)values[65]);
    __pyx_v_q_turb_var_1 = ((PyArrayObject *)values[66]);
    __pyx_v_q_turb_var_grad_0 = ((PyArrayObject *)values[67]);
    __pyx_v_q_eddy_viscosity = ((PyArrayObject *)values[68]);
    __pyx_v_p_l2g = ((PyArrayObject *)values[69]);
    __pyx_v_vel_l2g = ((PyArrayObject *)values[70]);
    __pyx_v_p_dof = ((PyArrayObject *)values[71]);
    __pyx_v_u_dof = ((PyArrayObject *)values[72]);
    __pyx_v_v_dof = ((PyArrayObject *)values[73]);
    __pyx_v_w_dof = ((PyArrayObject *)values[74]);
    __pyx_v_u_dof_old = ((PyArrayObject *)values[75]);
    __pyx_v_v_dof_old = ((PyArrayObject *)values[76]);
    __pyx_v_w_dof_old = ((PyArrayObject *)values[77]);
    __pyx_v_u_dof_old_old = ((PyArrayObject *)values[78]);
    __pyx_v_v_dof_old_old = ((PyArrayObject *)values[79]);
    __pyx_v_w_dof_old_old = ((PyArrayObject *)values[80]);
    __pyx_v_g = ((PyArrayObject *)values[81]);
    __pyx_v_useVF = __pyx_PyFloat_AsDouble(values[82]); if (unlikely((__pyx_v_useVF == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1829, __pyx_L3_error)
    __pyx_v_vf = ((PyArrayObject *)values[83]);
    __pyx_v_phi = ((PyArrayObject *)values[84]);
    __pyx_v_normal_phi = ((PyArrayObject *)values[85]);
    __pyx_v_kappa_phi = ((PyArrayObject *)values[86]);
    __pyx_v_q_mom_u_acc = ((PyArrayObject *)values[87]);
    __pyx_v_q_mom_v_acc = ((PyArrayObject *)values[88]);
    __pyx_v_q_mom_w_acc = ((PyArrayObject *)values[89]);
    __pyx_v_q_mass_adv = ((PyArrayObject *)values[90]);
    __pyx_v_q_mom_u_acc_beta_bdf = ((PyArrayObject *)values[91]);
    __pyx_v_q_mom_v_acc_beta_bdf = ((PyArrayObject *)values[92]);
    __pyx_v_q_mom_w_acc_beta_bdf = ((PyArrayObject *)values[93]);
    __pyx_v_q_dV = ((PyArrayObject *)values[94]);
    __pyx_v_q_dV_last = ((PyArrayObject *)values[95]);
    __pyx_v_q_velocity_sge = ((PyArrayObject *)values[96]);
    __pyx_v_ebqe_velocity_star = ((PyArrayObject *)values[97]);
    __pyx_v_q_cfl = ((PyArrayObject *)values[98]);
    __pyx_v_q_numDiff_u = ((PyArrayObject *)values[99]);
    __pyx_v_q_numDiff_v = ((PyArrayObject *)values[100]);
    __pyx_v_q_numDiff_w = ((PyArrayObject *)values[101]);
    __pyx_v_q_numDiff_u_last = ((PyArrayObject *)values[102]);
    __pyx_v_q_numDiff_v_last = ((PyArrayObject *)values[103]);
    __pyx_v_q_numDiff_w_last = ((PyArrayObject *)values[104]);
    __pyx_v_sdInfo_u_u_rowptr = ((PyArrayObject *)values[105]);
    __pyx_v_sdInfo_u_u_colind = ((PyArrayObject *)values[106]);
    __pyx_v_sdInfo_u_v_rowptr = ((PyArrayObject *)values[107]);
    __pyx_v_sdInfo_u_v_colind = ((PyArrayObject *)values[108]);
    __pyx_v_sdInfo_u_w_rowptr = ((PyArrayObject *)values[109]);
    __pyx_v_sdInfo_u_w_colind = ((PyArrayObject *)values[110]);
    __pyx_v_sdInfo_v_v_rowptr = ((PyArrayObject *)values[111]);
    __pyx_v_sdInfo_v_v_colind = ((PyArrayObject *)values[112]);
    __pyx_v_sdInfo_v_u_rowptr = ((PyArrayObject *)values[113]);
    __pyx_v_sdInfo_v_u_colind = ((PyArrayObject *)values[114]);
    __pyx_v_sdInfo_v_w_rowptr = ((PyArrayObject *)values[115]);
    __pyx_v_sdInfo_v_w_colind = ((PyArrayObject *)values[116]);
    __pyx_v_sdInfo_w_w_rowptr = ((PyArrayObject *)values[117]);
    __pyx_v_sdInfo_w_w_colind = ((PyArrayObject *)values[118]);
    __pyx_v_sdInfo_w_u_rowptr = ((PyArrayObject *)values[119]);
    __pyx_v_sdInfo_w_u_colind = ((PyArrayObject *)values[120]);
    __pyx_v_sdInfo_w_v_rowptr = ((PyArrayObject *)values[121]);
    __pyx_v_sdInfo_w_v_colind = ((PyArrayObject *)values[122]);
    __pyx_v_offset_p = __Pyx_PyInt_As_int(values[123]); if (unlikely((__pyx_v_offset_p == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1855, __pyx_L3_error)
    __pyx_v_offset_u = __Pyx_PyInt_As_int(values[124]); if (unlikely((__pyx_v_offset_u == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1855, __pyx_L3_error)
    __pyx_v_offset_v = __Pyx_PyInt_As_int(values[125]); if (unlikely((__pyx_v_offset_v == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1855, __pyx_L3_error)
    __pyx_v_offset_w = __Pyx_PyInt_As_int(values[126]); if (unlikely((__pyx_v_offset_w == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1855, __pyx_L3_error)
    __pyx_v_stride_p = __Pyx_PyInt_As_int(values[127]); if (unlikely((__pyx_v_stride_p == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1856, __pyx_L3_error)
    __pyx_v_stride_u = __Pyx_PyInt_As_int(values[128]); if (unlikely((__pyx_v_stride_u == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1856, __pyx_L3_error)
    __pyx_v_stride_v = __Pyx_PyInt_As_int(values[129]); if (unlikely((__pyx_v_stride_v == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1856, __pyx_L3_error)
    __pyx_v_stride_w = __Pyx_PyInt_As_int(values[130]); if (unlikely((__pyx_v_stride_w == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1856, __pyx_L3_error)
    __pyx_v_globalResidual = ((PyArrayObject *)values[131]);
    __pyx_v_nExteriorElementBoundaries_global = __Pyx_PyInt_As_int(values[132]); if (unlikely((__pyx_v_nExteriorElementBoundaries_global == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1858, __pyx_L3_error)
    __pyx_v_exteriorElementBoundariesArray = ((PyArrayObject *)values[133]);
    __pyx_v_elementBoundaryElementsArray = ((PyArrayObject *)values[134]);
    __pyx_v_elementBoundaryLocalElementBoundariesArray = ((PyArrayObject *)values[135]);
    __pyx_v_ebqe_vf_ext = ((PyArrayObject *)values[136]);
    __pyx_v_bc_ebqe_vf_ext = ((PyArrayObject *)values[137]);
    __pyx_v_ebqe_phi_ext = ((PyArrayObject *)values[138]);
    __pyx_v_bc_ebqe_phi_ext = ((PyArrayObject *)values[139]);
    __pyx_v_ebqe_normal_phi_ext = ((PyArrayObject *)values[140]);
    __pyx_v_ebqe_kappa_phi_ext = ((PyArrayObject *)values[141]);
    __pyx_v_ebqe_vos_ext = ((PyArrayObject *)values[142]);
    __pyx_v_ebqe_turb_var_0 = ((PyArrayObject *)values[143]);
    __pyx_v_ebqe_turb_var_1 = ((PyArrayObject *)values[144]);
    __pyx_v_isDOFBoundary_p = ((PyArrayObject *)values[145]);
    __pyx_v_isDOFBoundary_u = ((PyArrayObject *)values[146]);
    __pyx_v_isDOFBoundary_v = ((PyArrayObject *)values[147]);
    __pyx_v_isDOFBoundary_w = ((PyArrayObject *)values[148]);
    __pyx_v_isAdvectiveFluxBoundary_p = ((PyArrayObject *)values[149]);
    __pyx_v_isAdvectiveFluxBoundary_u = ((PyArrayObject *)values[150]);
    __pyx_v_isAdvectiveFluxBoundary_v = ((PyArrayObject *)values[151]);
    __pyx_v_isAdvectiveFluxBoundary_w = ((PyArrayObject *)values[152]);
    __pyx_v_isDiffusiveFluxBoundary_u = ((PyArrayObject *)values[153]);
    __pyx_v_isDiffusiveFluxBoundary_v = ((PyArrayObject *)values[154]);
    __pyx_v_isDiffusiveFluxBoundary_w = ((PyArrayObject *)values[155]);
    __pyx_v_ebqe_bc_p_ext = ((PyArrayObject *)values[156]);
    __pyx_v_ebqe_bc_flux_mass_ext = ((PyArrayObject *)values[157]);
    __pyx_v_ebqe_bc_flux_mom_u_adv_ext = ((PyArrayObject *)values[158]);
    __pyx_v_ebqe_bc_flux_mom_v_adv_ext = ((PyArrayObject *)values[159]);
    __pyx_v_ebqe_bc_flux_mom_w_adv_ext = ((PyArrayObject *)values[160]);
    __pyx_v_ebqe_bc_u_ext = ((PyArrayObject *)values[161]);
    __pyx_v_ebqe_bc_flux_u_diff_ext = ((PyArrayObject *)values[162]);
    __pyx_v_ebqe_penalty_ext = ((PyArrayObject *)values[163]);
    __pyx_v_ebqe_bc_v_ext = ((PyArrayObject *)values[164]);
    __pyx_v_ebqe_bc_flux_v_diff_ext = ((PyArrayObject *)values[165]);
    __pyx_v_ebqe_bc_w_ext = ((PyArrayObject *)values[166]);
    __pyx_v_ebqe_bc_flux_w_diff_ext = ((PyArrayObject *)values[167]);
    __pyx_v_q_x = ((PyArrayObject *)values[168]);
    __pyx_v_q_velocity = ((PyArrayObject *)values[169]);
    __pyx_v_ebqe_velocity = ((PyArrayObject *)values[170]);
    __pyx_v_q_grad_u = ((PyArrayObject *)values[171]);
    __pyx_v_q_grad_v = ((PyArrayObject *)values[172]);
    __pyx_v_q_grad_w = ((PyArrayObject *)values[173]);
    __pyx_v_q_divU = ((PyArrayObject *)values[174]);
    __pyx_v_ebqe_grad_u = ((PyArrayObject *)values[175]);
    __pyx_v_ebqe_grad_v = ((PyArrayObject *)values[176]);
    __pyx_v_ebqe_grad_w = ((PyArrayObject *)values[177]);
    __pyx_v_flux = ((PyArrayObject *)values[178]);
    __pyx_v_elementResidual_p = ((PyArrayObject *)values[179]);
    __pyx_v_elementFlags = ((PyArrayObject *)values[180]);
    __pyx_v_boundaryFlags = ((PyArrayObject *)values[181]);
    __pyx_v_barycenters = ((PyArrayObject *)values[182]);
    __pyx_v_wettedAreas = ((PyArrayObject *)values[183]);
    __pyx_v_netForces_p = ((PyArrayObject *)values[184]);
    __pyx_v_netForces_v = ((PyArrayObject *)values[185]);
    __pyx_v_netMoments = ((PyArrayObject *)values[186]);
    __pyx_v_q_rho = ((PyArrayObject *)values[187]);
    __pyx_v_ebqe_rho = ((PyArrayObject *)values[188]);
    __pyx_v_q_nu = ((PyArrayObject *)values[189]);
    __pyx_v_ebqe_nu = ((PyArrayObject *)values[190]);
    __pyx_v_nParticles = __Pyx_PyInt_As_int(values[191]); if (unlikely((__pyx_v_nParticles == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1919, __pyx_L3_error)
    __pyx_v_particle_epsFact = __pyx_PyFloat_AsDouble(values[192]); if (unlikely((__pyx_v_particle_epsFact == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1920, __pyx_L3_error)
    __pyx_v_particle_alpha = __pyx_PyFloat_AsDouble(values[193]); if (unlikely((__pyx_v_particle_alpha == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1921, __pyx_L3_error)
    __pyx_v_particle_beta = __pyx_PyFloat_AsDouble(values[194]); if (unlikely((__pyx_v_particle_beta == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1922, __pyx_L3_error)
    __pyx_v_particle_penalty_constant = __pyx_PyFloat_AsDouble(values[195]); if (unlikely((__pyx_v_particle_penalty_constant == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1923, __pyx_L3_error)
    __pyx_v_particle_signed_distances = ((PyArrayObject *)values[196]);
    __pyx_v_particle_signed_distance_normals = ((PyArrayObject *)values[197]);
    __pyx_v_particle_velocities = ((PyArrayObject *)values[198]);
    __pyx_v_particle_centroids = ((PyArrayObject *)values[199]);
    __pyx_v_particle_netForces = ((PyArrayObject *)values[200]);
    __pyx_v_particle_netMoments = ((PyArrayObject *)values[201]);
    __pyx_v_particle_surfaceArea = ((PyArrayObject *)values[202]);
    __pyx_v_particle_nitsche = __pyx_PyFloat_AsDouble(values[203]); if (unlikely((__pyx_v_particle_nitsche == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1931, __pyx_L3_error)
    __pyx_v_STABILIZATION_TYPE = __Pyx_PyInt_As_int(values[204]); if (unlikely((__pyx_v_STABILIZATION_TYPE == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1932, __pyx_L3_error)
    __pyx_v_areaRefElement = __pyx_PyFloat_AsDouble(values[205]); if (unlikely((__pyx_v_areaRefElement == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1933, __pyx_L3_error)
    __pyx_v_cMax = __pyx_PyFloat_AsDouble(values[206]); if (unlikely((__pyx_v_cMax == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1934, __pyx_L3_error)
    __pyx_v_cE = __pyx_PyFloat_AsDouble(values[207]); if (unlikely((__pyx_v_cE == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1935, __pyx_L3_error)
    __pyx_v_forcex = ((PyArrayObject *)values[208]);
    __pyx_v_forcey = ((PyArrayObject *)values[209]);
    __pyx_v_forcez = ((PyArrayObject *)values[210]);
    __pyx_v_KILL_PRESSURE_TERM = __Pyx_PyInt_As_int(values[211]); if (unlikely((__pyx_v_KILL_PRESSURE_TERM == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1939, __pyx_L3_error)
    __pyx_v_dt = __pyx_PyFloat_AsDouble(values[212]); if (unlikely((__pyx_v_dt == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1940, __pyx_L3_error)
    __pyx_v_entropyResidualAtCell = ((PyArrayObject *)values[213]);
    __pyx_v_maxSpeed2AtCell = ((PyArrayObject *)values[214]);
    __pyx_v_maxSpeed2AtOmega = __pyx_PyFloat_AsDouble(values[215]); if (unlikely((__pyx_v_maxSpeed2AtOmega == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1943, __pyx_L3_error)
    __pyx_v_rhoAtCell = ((PyArrayObject *)values[216]);
    __pyx_v_muAtCell = ((PyArrayObject *)values[217]);
    __pyx_v_quantDOFs = ((PyArrayObject *)values[218]);
    __pyx_v_numDOFsPerEqn = __Pyx_PyInt_As_int(values[219]); if (unlikely((__pyx_v_numDOFsPerEqn == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1947, __pyx_L3_error)
    __pyx_v_csrRowIndeces_DofLoops = ((PyArrayObject *)values[220]);
    __pyx_v_csrColumnOffsets_DofLoops = ((PyArrayObject *)values[221]);
    __pyx_v_ML = ((PyArrayObject *)values[222]);
    __pyx_v_Cx = ((PyArrayObject *)values[223]);
    __pyx_v_Cy = ((PyArrayObject *)values[224]);
    __pyx_v_Cz = ((PyArrayObject *)values[225]);
    __pyx_v_MATERIAL_PARAMETERS_AS_FUNCTION = __Pyx_PyInt_As_int(values[226]); if (unlikely((__pyx_v_MATERIAL_PARAMETERS_AS_FUNCTION == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1954, __pyx_L3_error)
    __pyx_v_density_as_function = ((PyArrayObject *)values[227]);
    __pyx_v_dynamic_viscosity_as_function = ((PyArrayObject *)values[228]);
    __pyx_v_ebqe_density_as_function = ((PyArrayObject *)values[229]);
    __pyx_v_ebqe_dynamic_viscosity_as_function = ((PyArrayObject *)values[230]);
    __pyx_v_order_polynomial = __pyx_PyFloat_AsDouble(values[231]); if (unlikely((__pyx_v_order_polynomial == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1959, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1744, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mprans.cRANS3PF.RANS3PF.calculateResidual_entropy_viscosity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "mesh_trial_ref", 0))) __PYX_ERR(0, 1745, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_grad_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "mesh_grad_trial_ref", 0))) __PYX_ERR(0, 1746, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_dof), __pyx_ptype_5numpy_ndarray, 1, "mesh_dof", 0))) __PYX_ERR(0, 1747, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_velocity_dof), __pyx_ptype_5numpy_ndarray, 1, "mesh_velocity_dof", 0))) __PYX_ERR(0, 1748, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_l2g), __pyx_ptype_5numpy_ndarray, 1, "mesh_l2g", 0))) __PYX_ERR(0, 1751, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dV_ref), __pyx_ptype_5numpy_ndarray, 1, "dV_ref", 0))) __PYX_ERR(0, 1752, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "p_trial_ref", 0))) __PYX_ERR(0, 1753, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_grad_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "p_grad_trial_ref", 0))) __PYX_ERR(0, 1754, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_test_ref), __pyx_ptype_5numpy_ndarray, 1, "p_test_ref", 0))) __PYX_ERR(0, 1755, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_grad_test_ref), __pyx_ptype_5numpy_ndarray, 1, "p_grad_test_ref", 0))) __PYX_ERR(0, 1756, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_p), __pyx_ptype_5numpy_ndarray, 1, "q_p", 0))) __PYX_ERR(0, 1757, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_grad_p), __pyx_ptype_5numpy_ndarray, 1, "q_grad_p", 0))) __PYX_ERR(0, 1758, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_p), __pyx_ptype_5numpy_ndarray, 1, "ebqe_p", 0))) __PYX_ERR(0, 1759, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_grad_p), __pyx_ptype_5numpy_ndarray, 1, "ebqe_grad_p", 0))) __PYX_ERR(0, 1760, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_trial_ref", 0))) __PYX_ERR(0, 1761, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_grad_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_grad_trial_ref", 0))) __PYX_ERR(0, 1762, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_hess_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_hess_trial_ref", 0))) __PYX_ERR(0, 1763, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_test_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_test_ref", 0))) __PYX_ERR(0, 1764, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_grad_test_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_grad_test_ref", 0))) __PYX_ERR(0, 1765, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "mesh_trial_trace_ref", 0))) __PYX_ERR(0, 1766, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_grad_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "mesh_grad_trial_trace_ref", 0))) __PYX_ERR(0, 1767, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dS_ref), __pyx_ptype_5numpy_ndarray, 1, "dS_ref", 0))) __PYX_ERR(0, 1768, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "p_trial_trace_ref", 0))) __PYX_ERR(0, 1769, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_grad_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "p_grad_trial_trace_ref", 0))) __PYX_ERR(0, 1770, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_test_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "p_test_trace_ref", 0))) __PYX_ERR(0, 1771, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_grad_test_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "p_grad_test_trace_ref", 0))) __PYX_ERR(0, 1772, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_trial_trace_ref", 0))) __PYX_ERR(0, 1773, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_grad_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_grad_trial_trace_ref", 0))) __PYX_ERR(0, 1774, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_test_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_test_trace_ref", 0))) __PYX_ERR(0, 1775, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_grad_test_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_grad_test_trace_ref", 0))) __PYX_ERR(0, 1776, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_normal_ref), __pyx_ptype_5numpy_ndarray, 1, "normal_ref", 0))) __PYX_ERR(0, 1777, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_boundaryJac_ref), __pyx_ptype_5numpy_ndarray, 1, "boundaryJac_ref", 0))) __PYX_ERR(0, 1778, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_elementDiameter), __pyx_ptype_5numpy_ndarray, 1, "elementDiameter", 0))) __PYX_ERR(0, 1780, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_nodeDiametersArray), __pyx_ptype_5numpy_ndarray, 1, "nodeDiametersArray", 0))) __PYX_ERR(0, 1781, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_eps_solid), __pyx_ptype_5numpy_ndarray, 1, "eps_solid", 0))) __PYX_ERR(0, 1803, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_phi_solid), __pyx_ptype_5numpy_ndarray, 1, "phi_solid", 0))) __PYX_ERR(0, 1804, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_velocity_solid), __pyx_ptype_5numpy_ndarray, 1, "q_velocity_solid", 0))) __PYX_ERR(0, 1805, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_vos), __pyx_ptype_5numpy_ndarray, 1, "q_vos", 0))) __PYX_ERR(0, 1806, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_dvos_dt), __pyx_ptype_5numpy_ndarray, 1, "q_dvos_dt", 0))) __PYX_ERR(0, 1807, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_dragAlpha), __pyx_ptype_5numpy_ndarray, 1, "q_dragAlpha", 0))) __PYX_ERR(0, 1808, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_dragBeta), __pyx_ptype_5numpy_ndarray, 1, "q_dragBeta", 0))) __PYX_ERR(0, 1809, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_mass_source), __pyx_ptype_5numpy_ndarray, 1, "q_mass_source", 0))) __PYX_ERR(0, 1810, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_turb_var_0), __pyx_ptype_5numpy_ndarray, 1, "q_turb_var_0", 0))) __PYX_ERR(0, 1811, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_turb_var_1), __pyx_ptype_5numpy_ndarray, 1, "q_turb_var_1", 0))) __PYX_ERR(0, 1812, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_turb_var_grad_0), __pyx_ptype_5numpy_ndarray, 1, "q_turb_var_grad_0", 0))) __PYX_ERR(0, 1813, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_eddy_viscosity), __pyx_ptype_5numpy_ndarray, 1, "q_eddy_viscosity", 0))) __PYX_ERR(0, 1814, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_l2g), __pyx_ptype_5numpy_ndarray, 1, "p_l2g", 0))) __PYX_ERR(0, 1816, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_l2g), __pyx_ptype_5numpy_ndarray, 1, "vel_l2g", 0))) __PYX_ERR(0, 1817, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_dof), __pyx_ptype_5numpy_ndarray, 1, "p_dof", 0))) __PYX_ERR(0, 1818, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_u_dof), __pyx_ptype_5numpy_ndarray, 1, "u_dof", 0))) __PYX_ERR(0, 1819, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_v_dof), __pyx_ptype_5numpy_ndarray, 1, "v_dof", 0))) __PYX_ERR(0, 1820, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_w_dof), __pyx_ptype_5numpy_ndarray, 1, "w_dof", 0))) __PYX_ERR(0, 1821, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_u_dof_old), __pyx_ptype_5numpy_ndarray, 1, "u_dof_old", 0))) __PYX_ERR(0, 1822, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_v_dof_old), __pyx_ptype_5numpy_ndarray, 1, "v_dof_old", 0))) __PYX_ERR(0, 1823, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_w_dof_old), __pyx_ptype_5numpy_ndarray, 1, "w_dof_old", 0))) __PYX_ERR(0, 1824, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_u_dof_old_old), __pyx_ptype_5numpy_ndarray, 1, "u_dof_old_old", 0))) __PYX_ERR(0, 1825, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_v_dof_old_old), __pyx_ptype_5numpy_ndarray, 1, "v_dof_old_old", 0))) __PYX_ERR(0, 1826, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_w_dof_old_old), __pyx_ptype_5numpy_ndarray, 1, "w_dof_old_old", 0))) __PYX_ERR(0, 1827, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_g), __pyx_ptype_5numpy_ndarray, 1, "g", 0))) __PYX_ERR(0, 1828, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vf), __pyx_ptype_5numpy_ndarray, 1, "vf", 0))) __PYX_ERR(0, 1830, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_phi), __pyx_ptype_5numpy_ndarray, 1, "phi", 0))) __PYX_ERR(0, 1831, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_normal_phi), __pyx_ptype_5numpy_ndarray, 1, "normal_phi", 0))) __PYX_ERR(0, 1832, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_kappa_phi), __pyx_ptype_5numpy_ndarray, 1, "kappa_phi", 0))) __PYX_ERR(0, 1833, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_mom_u_acc), __pyx_ptype_5numpy_ndarray, 1, "q_mom_u_acc", 0))) __PYX_ERR(0, 1834, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_mom_v_acc), __pyx_ptype_5numpy_ndarray, 1, "q_mom_v_acc", 0))) __PYX_ERR(0, 1835, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_mom_w_acc), __pyx_ptype_5numpy_ndarray, 1, "q_mom_w_acc", 0))) __PYX_ERR(0, 1836, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_mass_adv), __pyx_ptype_5numpy_ndarray, 1, "q_mass_adv", 0))) __PYX_ERR(0, 1837, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_mom_u_acc_beta_bdf), __pyx_ptype_5numpy_ndarray, 1, "q_mom_u_acc_beta_bdf", 0))) __PYX_ERR(0, 1838, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_mom_v_acc_beta_bdf), __pyx_ptype_5numpy_ndarray, 1, "q_mom_v_acc_beta_bdf", 0))) __PYX_ERR(0, 1838, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_mom_w_acc_beta_bdf), __pyx_ptype_5numpy_ndarray, 1, "q_mom_w_acc_beta_bdf", 0))) __PYX_ERR(0, 1838, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_dV), __pyx_ptype_5numpy_ndarray, 1, "q_dV", 0))) __PYX_ERR(0, 1839, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_dV_last), __pyx_ptype_5numpy_ndarray, 1, "q_dV_last", 0))) __PYX_ERR(0, 1840, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_velocity_sge), __pyx_ptype_5numpy_ndarray, 1, "q_velocity_sge", 0))) __PYX_ERR(0, 1841, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_velocity_star), __pyx_ptype_5numpy_ndarray, 1, "ebqe_velocity_star", 0))) __PYX_ERR(0, 1842, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_cfl), __pyx_ptype_5numpy_ndarray, 1, "q_cfl", 0))) __PYX_ERR(0, 1843, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_numDiff_u), __pyx_ptype_5numpy_ndarray, 1, "q_numDiff_u", 0))) __PYX_ERR(0, 1844, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_numDiff_v), __pyx_ptype_5numpy_ndarray, 1, "q_numDiff_v", 0))) __PYX_ERR(0, 1844, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_numDiff_w), __pyx_ptype_5numpy_ndarray, 1, "q_numDiff_w", 0))) __PYX_ERR(0, 1844, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_numDiff_u_last), __pyx_ptype_5numpy_ndarray, 1, "q_numDiff_u_last", 0))) __PYX_ERR(0, 1845, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_numDiff_v_last), __pyx_ptype_5numpy_ndarray, 1, "q_numDiff_v_last", 0))) __PYX_ERR(0, 1845, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_numDiff_w_last), __pyx_ptype_5numpy_ndarray, 1, "q_numDiff_w_last", 0))) __PYX_ERR(0, 1845, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_u_u_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_u_u_rowptr", 0))) __PYX_ERR(0, 1846, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_u_u_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_u_u_colind", 0))) __PYX_ERR(0, 1846, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_u_v_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_u_v_rowptr", 0))) __PYX_ERR(0, 1847, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_u_v_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_u_v_colind", 0))) __PYX_ERR(0, 1847, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_u_w_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_u_w_rowptr", 0))) __PYX_ERR(0, 1848, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_u_w_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_u_w_colind", 0))) __PYX_ERR(0, 1848, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_v_v_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_v_v_rowptr", 0))) __PYX_ERR(0, 1849, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_v_v_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_v_v_colind", 0))) __PYX_ERR(0, 1849, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_v_u_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_v_u_rowptr", 0))) __PYX_ERR(0, 1850, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_v_u_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_v_u_colind", 0))) __PYX_ERR(0, 1850, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_v_w_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_v_w_rowptr", 0))) __PYX_ERR(0, 1851, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_v_w_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_v_w_colind", 0))) __PYX_ERR(0, 1851, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_w_w_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_w_w_rowptr", 0))) __PYX_ERR(0, 1852, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_w_w_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_w_w_colind", 0))) __PYX_ERR(0, 1852, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_w_u_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_w_u_rowptr", 0))) __PYX_ERR(0, 1853, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_w_u_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_w_u_colind", 0))) __PYX_ERR(0, 1853, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_w_v_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_w_v_rowptr", 0))) __PYX_ERR(0, 1854, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_w_v_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_w_v_colind", 0))) __PYX_ERR(0, 1854, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_globalResidual), __pyx_ptype_5numpy_ndarray, 1, "globalResidual", 0))) __PYX_ERR(0, 1857, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_exteriorElementBoundariesArray), __pyx_ptype_5numpy_ndarray, 1, "exteriorElementBoundariesArray", 0))) __PYX_ERR(0, 1859, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_elementBoundaryElementsArray), __pyx_ptype_5numpy_ndarray, 1, "elementBoundaryElementsArray", 0))) __PYX_ERR(0, 1860, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_elementBoundaryLocalElementBoundariesArray), __pyx_ptype_5numpy_ndarray, 1, "elementBoundaryLocalElementBoundariesArray", 0))) __PYX_ERR(0, 1861, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_vf_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_vf_ext", 0))) __PYX_ERR(0, 1862, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_bc_ebqe_vf_ext), __pyx_ptype_5numpy_ndarray, 1, "bc_ebqe_vf_ext", 0))) __PYX_ERR(0, 1863, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_phi_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_phi_ext", 0))) __PYX_ERR(0, 1864, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_bc_ebqe_phi_ext), __pyx_ptype_5numpy_ndarray, 1, "bc_ebqe_phi_ext", 0))) __PYX_ERR(0, 1865, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_normal_phi_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_normal_phi_ext", 0))) __PYX_ERR(0, 1866, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_kappa_phi_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_kappa_phi_ext", 0))) __PYX_ERR(0, 1867, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_vos_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_vos_ext", 0))) __PYX_ERR(0, 1869, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_turb_var_0), __pyx_ptype_5numpy_ndarray, 1, "ebqe_turb_var_0", 0))) __PYX_ERR(0, 1870, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_turb_var_1), __pyx_ptype_5numpy_ndarray, 1, "ebqe_turb_var_1", 0))) __PYX_ERR(0, 1871, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isDOFBoundary_p), __pyx_ptype_5numpy_ndarray, 1, "isDOFBoundary_p", 0))) __PYX_ERR(0, 1873, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isDOFBoundary_u), __pyx_ptype_5numpy_ndarray, 1, "isDOFBoundary_u", 0))) __PYX_ERR(0, 1874, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isDOFBoundary_v), __pyx_ptype_5numpy_ndarray, 1, "isDOFBoundary_v", 0))) __PYX_ERR(0, 1875, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isDOFBoundary_w), __pyx_ptype_5numpy_ndarray, 1, "isDOFBoundary_w", 0))) __PYX_ERR(0, 1876, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isAdvectiveFluxBoundary_p), __pyx_ptype_5numpy_ndarray, 1, "isAdvectiveFluxBoundary_p", 0))) __PYX_ERR(0, 1877, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isAdvectiveFluxBoundary_u), __pyx_ptype_5numpy_ndarray, 1, "isAdvectiveFluxBoundary_u", 0))) __PYX_ERR(0, 1878, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isAdvectiveFluxBoundary_v), __pyx_ptype_5numpy_ndarray, 1, "isAdvectiveFluxBoundary_v", 0))) __PYX_ERR(0, 1879, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isAdvectiveFluxBoundary_w), __pyx_ptype_5numpy_ndarray, 1, "isAdvectiveFluxBoundary_w", 0))) __PYX_ERR(0, 1880, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isDiffusiveFluxBoundary_u), __pyx_ptype_5numpy_ndarray, 1, "isDiffusiveFluxBoundary_u", 0))) __PYX_ERR(0, 1881, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isDiffusiveFluxBoundary_v), __pyx_ptype_5numpy_ndarray, 1, "isDiffusiveFluxBoundary_v", 0))) __PYX_ERR(0, 1882, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isDiffusiveFluxBoundary_w), __pyx_ptype_5numpy_ndarray, 1, "isDiffusiveFluxBoundary_w", 0))) __PYX_ERR(0, 1883, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_p_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_p_ext", 0))) __PYX_ERR(0, 1884, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_flux_mass_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_flux_mass_ext", 0))) __PYX_ERR(0, 1885, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_flux_mom_u_adv_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_flux_mom_u_adv_ext", 0))) __PYX_ERR(0, 1886, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_flux_mom_v_adv_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_flux_mom_v_adv_ext", 0))) __PYX_ERR(0, 1887, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_flux_mom_w_adv_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_flux_mom_w_adv_ext", 0))) __PYX_ERR(0, 1888, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_u_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_u_ext", 0))) __PYX_ERR(0, 1889, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_flux_u_diff_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_flux_u_diff_ext", 0))) __PYX_ERR(0, 1890, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_penalty_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_penalty_ext", 0))) __PYX_ERR(0, 1891, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_v_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_v_ext", 0))) __PYX_ERR(0, 1892, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_flux_v_diff_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_flux_v_diff_ext", 0))) __PYX_ERR(0, 1893, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_w_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_w_ext", 0))) __PYX_ERR(0, 1894, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_flux_w_diff_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_flux_w_diff_ext", 0))) __PYX_ERR(0, 1895, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_x), __pyx_ptype_5numpy_ndarray, 1, "q_x", 0))) __PYX_ERR(0, 1896, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_velocity), __pyx_ptype_5numpy_ndarray, 1, "q_velocity", 0))) __PYX_ERR(0, 1897, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_velocity), __pyx_ptype_5numpy_ndarray, 1, "ebqe_velocity", 0))) __PYX_ERR(0, 1898, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_grad_u), __pyx_ptype_5numpy_ndarray, 1, "q_grad_u", 0))) __PYX_ERR(0, 1899, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_grad_v), __pyx_ptype_5numpy_ndarray, 1, "q_grad_v", 0))) __PYX_ERR(0, 1900, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_grad_w), __pyx_ptype_5numpy_ndarray, 1, "q_grad_w", 0))) __PYX_ERR(0, 1901, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_divU), __pyx_ptype_5numpy_ndarray, 1, "q_divU", 0))) __PYX_ERR(0, 1902, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_grad_u), __pyx_ptype_5numpy_ndarray, 1, "ebqe_grad_u", 0))) __PYX_ERR(0, 1903, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_grad_v), __pyx_ptype_5numpy_ndarray, 1, "ebqe_grad_v", 0))) __PYX_ERR(0, 1904, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_grad_w), __pyx_ptype_5numpy_ndarray, 1, "ebqe_grad_w", 0))) __PYX_ERR(0, 1905, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_flux), __pyx_ptype_5numpy_ndarray, 1, "flux", 0))) __PYX_ERR(0, 1906, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_elementResidual_p), __pyx_ptype_5numpy_ndarray, 1, "elementResidual_p", 0))) __PYX_ERR(0, 1907, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_elementFlags), __pyx_ptype_5numpy_ndarray, 1, "elementFlags", 0))) __PYX_ERR(0, 1908, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_boundaryFlags), __pyx_ptype_5numpy_ndarray, 1, "boundaryFlags", 0))) __PYX_ERR(0, 1909, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_barycenters), __pyx_ptype_5numpy_ndarray, 1, "barycenters", 0))) __PYX_ERR(0, 1910, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_wettedAreas), __pyx_ptype_5numpy_ndarray, 1, "wettedAreas", 0))) __PYX_ERR(0, 1911, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_netForces_p), __pyx_ptype_5numpy_ndarray, 1, "netForces_p", 0))) __PYX_ERR(0, 1912, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_netForces_v), __pyx_ptype_5numpy_ndarray, 1, "netForces_v", 0))) __PYX_ERR(0, 1913, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_netMoments), __pyx_ptype_5numpy_ndarray, 1, "netMoments", 0))) __PYX_ERR(0, 1914, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_rho), __pyx_ptype_5numpy_ndarray, 1, "q_rho", 0))) __PYX_ERR(0, 1915, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_rho), __pyx_ptype_5numpy_ndarray, 1, "ebqe_rho", 0))) __PYX_ERR(0, 1916, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_nu), __pyx_ptype_5numpy_ndarray, 1, "q_nu", 0))) __PYX_ERR(0, 1917, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_nu), __pyx_ptype_5numpy_ndarray, 1, "ebqe_nu", 0))) __PYX_ERR(0, 1918, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particle_signed_distances), __pyx_ptype_5numpy_ndarray, 1, "particle_signed_distances", 0))) __PYX_ERR(0, 1924, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particle_signed_distance_normals), __pyx_ptype_5numpy_ndarray, 1, "particle_signed_distance_normals", 0))) __PYX_ERR(0, 1925, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particle_velocities), __pyx_ptype_5numpy_ndarray, 1, "particle_velocities", 0))) __PYX_ERR(0, 1926, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particle_centroids), __pyx_ptype_5numpy_ndarray, 1, "particle_centroids", 0))) __PYX_ERR(0, 1927, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particle_netForces), __pyx_ptype_5numpy_ndarray, 1, "particle_netForces", 0))) __PYX_ERR(0, 1928, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particle_netMoments), __pyx_ptype_5numpy_ndarray, 1, "particle_netMoments", 0))) __PYX_ERR(0, 1929, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particle_surfaceArea), __pyx_ptype_5numpy_ndarray, 1, "particle_surfaceArea", 0))) __PYX_ERR(0, 1930, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_forcex), __pyx_ptype_5numpy_ndarray, 1, "forcex", 0))) __PYX_ERR(0, 1936, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_forcey), __pyx_ptype_5numpy_ndarray, 1, "forcey", 0))) __PYX_ERR(0, 1937, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_forcez), __pyx_ptype_5numpy_ndarray, 1, "forcez", 0))) __PYX_ERR(0, 1938, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_entropyResidualAtCell), __pyx_ptype_5numpy_ndarray, 1, "entropyResidualAtCell", 0))) __PYX_ERR(0, 1941, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_maxSpeed2AtCell), __pyx_ptype_5numpy_ndarray, 1, "maxSpeed2AtCell", 0))) __PYX_ERR(0, 1942, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rhoAtCell), __pyx_ptype_5numpy_ndarray, 1, "rhoAtCell", 0))) __PYX_ERR(0, 1944, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_muAtCell), __pyx_ptype_5numpy_ndarray, 1, "muAtCell", 0))) __PYX_ERR(0, 1945, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_quantDOFs), __pyx_ptype_5numpy_ndarray, 1, "quantDOFs", 0))) __PYX_ERR(0, 1946, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_DofLoops), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_DofLoops", 0))) __PYX_ERR(0, 1948, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_DofLoops), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_DofLoops", 0))) __PYX_ERR(0, 1949, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ML), __pyx_ptype_5numpy_ndarray, 1, "ML", 0))) __PYX_ERR(0, 1950, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_Cx), __pyx_ptype_5numpy_ndarray, 1, "Cx", 0))) __PYX_ERR(0, 1951, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_Cy), __pyx_ptype_5numpy_ndarray, 1, "Cy", 0))) __PYX_ERR(0, 1952, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_Cz), __pyx_ptype_5numpy_ndarray, 1, "Cz", 0))) __PYX_ERR(0, 1953, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_density_as_function), __pyx_ptype_5numpy_ndarray, 1, "density_as_function", 0))) __PYX_ERR(0, 1955, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dynamic_viscosity_as_function), __pyx_ptype_5numpy_ndarray, 1, "dynamic_viscosity_as_function", 0))) __PYX_ERR(0, 1956, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_density_as_function), __pyx_ptype_5numpy_ndarray, 1, "ebqe_density_as_function", 0))) __PYX_ERR(0, 1957, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_dynamic_viscosity_as_function), __pyx_ptype_5numpy_ndarray, 1, "ebqe_dynamic_viscosity_as_function", 0))) __PYX_ERR(0, 1958, __pyx_L1_error)
  __pyx_r = __pyx_pf_6mprans_8cRANS3PF_7RANS3PF_8calculateResidual_entropy_viscosity(((struct __pyx_obj_6mprans_8cRANS3PF_RANS3PF *)__pyx_v_self), __pyx_v_mesh_trial_ref, __pyx_v_mesh_grad_trial_ref, __pyx_v_mesh_dof, __pyx_v_mesh_velocity_dof, __pyx_v_MOVING_DOMAIN, __pyx_v_PSTAB, __pyx_v_mesh_l2g, __pyx_v_dV_ref, __pyx_v_p_trial_ref, __pyx_v_p_grad_trial_ref, __pyx_v_p_test_ref, __pyx_v_p_grad_test_ref, __pyx_v_q_p, __pyx_v_q_grad_p, __pyx_v_ebqe_p, __pyx_v_ebqe_grad_p, __pyx_v_vel_trial_ref, __pyx_v_vel_grad_trial_ref, __pyx_v_vel_hess_trial_ref, __pyx_v_vel_test_ref, __pyx_v_vel_grad_test_ref, __pyx_v_mesh_trial_trace_ref, __pyx_v_mesh_grad_trial_trace_ref, __pyx_v_dS_ref, __pyx_v_p_trial_trace_ref, __pyx_v_p_grad_trial_trace_ref, __pyx_v_p_test_trace_ref, __pyx_v_p_grad_test_trace_ref, __pyx_v_vel_trial_trace_ref, __pyx_v_vel_grad_trial_trace_ref, __pyx_v_vel_test_trace_ref, __pyx_v_vel_grad_test_trace_ref, __pyx_v_normal_ref, __pyx_v_boundaryJac_ref, __pyx_v_eb_adjoint_sigma, __pyx_v_elementDiameter, __pyx_v_nodeDiametersArray, __pyx_v_hFactor, __pyx_v_nElements_global, __pyx_v_nElements_owned, __pyx_v_nElementBoundaries_owned, __pyx_v_useRBLES, __pyx_v_useMetrics, __pyx_v_alphaBDF, __pyx_v_epsFact_rho, __pyx_v_epsFact_mu, __pyx_v_sigma, __pyx_v_rho_0, __pyx_v_nu_0, __pyx_v_rho_1, __pyx_v_nu_1, __pyx_v_smagorinskyConstant, __pyx_v_turbulenceClosureModel, __pyx_v_Ct_sge, __pyx_v_Cd_sge, __pyx_v_C_dc, __pyx_v_C_b, __pyx_v_eps_solid, __pyx_v_phi_solid, __pyx_v_q_velocity_solid, __pyx_v_q_vos, __pyx_v_q_dvos_dt, __pyx_v_q_dragAlpha, __pyx_v_q_dragBeta, __pyx_v_q_mass_source, __pyx_v_q_turb_var_0, __pyx_v_q_turb_var_1, __pyx_v_q_turb_var_grad_0, __pyx_v_q_eddy_viscosity, __pyx_v_p_l2g, __pyx_v_vel_l2g, __pyx_v_p_dof, __pyx_v_u_dof, __pyx_v_v_dof, __pyx_v_w_dof, __pyx_v_u_dof_old, __pyx_v_v_dof_old, __pyx_v_w_dof_old, __pyx_v_u_dof_old_old, __pyx_v_v_dof_old_old, __pyx_v_w_dof_old_old, __pyx_v_g, __pyx_v_useVF, __pyx_v_vf, __pyx_v_phi, __pyx_v_normal_phi, __pyx_v_kappa_phi, __pyx_v_q_mom_u_acc, __pyx_v_q_mom_v_acc, __pyx_v_q_mom_w_acc, __pyx_v_q_mass_adv, __pyx_v_q_mom_u_acc_beta_bdf, __pyx_v_q_mom_v_acc_beta_bdf, __pyx_v_q_mom_w_acc_beta_bdf, __pyx_v_q_dV, __pyx_v_q_dV_last, __pyx_v_q_velocity_sge, __pyx_v_ebqe_velocity_star, __pyx_v_q_cfl, __pyx_v_q_numDiff_u, __pyx_v_q_numDiff_v, __pyx_v_q_numDiff_w, __pyx_v_q_numDiff_u_last, __pyx_v_q_numDiff_v_last, __pyx_v_q_numDiff_w_last, __pyx_v_sdInfo_u_u_rowptr, __pyx_v_sdInfo_u_u_colind, __pyx_v_sdInfo_u_v_rowptr, __pyx_v_sdInfo_u_v_colind, __pyx_v_sdInfo_u_w_rowptr, __pyx_v_sdInfo_u_w_colind, __pyx_v_sdInfo_v_v_rowptr, __pyx_v_sdInfo_v_v_colind, __pyx_v_sdInfo_v_u_rowptr, __pyx_v_sdInfo_v_u_colind, __pyx_v_sdInfo_v_w_rowptr, __pyx_v_sdInfo_v_w_colind, __pyx_v_sdInfo_w_w_rowptr, __pyx_v_sdInfo_w_w_colind, __pyx_v_sdInfo_w_u_rowptr, __pyx_v_sdInfo_w_u_colind, __pyx_v_sdInfo_w_v_rowptr, __pyx_v_sdInfo_w_v_colind, __pyx_v_offset_p, __pyx_v_offset_u, __pyx_v_offset_v, __pyx_v_offset_w, __pyx_v_stride_p, __pyx_v_stride_u, __pyx_v_stride_v, __pyx_v_stride_w, __pyx_v_globalResidual, __pyx_v_nExteriorElementBoundaries_global, __pyx_v_exteriorElementBoundariesArray, __pyx_v_elementBoundaryElementsArray, __pyx_v_elementBoundaryLocalElementBoundariesArray, __pyx_v_ebqe_vf_ext, __pyx_v_bc_ebqe_vf_ext, __pyx_v_ebqe_phi_ext, __pyx_v_bc_ebqe_phi_ext, __pyx_v_ebqe_normal_phi_ext, __pyx_v_ebqe_kappa_phi_ext, __pyx_v_ebqe_vos_ext, __pyx_v_ebqe_turb_var_0, __pyx_v_ebqe_turb_var_1, __pyx_v_isDOFBoundary_p, __pyx_v_isDOFBoundary_u, __pyx_v_isDOFBoundary_v, __pyx_v_isDOFBoundary_w, __pyx_v_isAdvectiveFluxBoundary_p, __pyx_v_isAdvectiveFluxBoundary_u, __pyx_v_isAdvectiveFluxBoundary_v, __pyx_v_isAdvectiveFluxBoundary_w, __pyx_v_isDiffusiveFluxBoundary_u, __pyx_v_isDiffusiveFluxBoundary_v, __pyx_v_isDiffusiveFluxBoundary_w, __pyx_v_ebqe_bc_p_ext, __pyx_v_ebqe_bc_flux_mass_ext, __pyx_v_ebqe_bc_flux_mom_u_adv_ext, __pyx_v_ebqe_bc_flux_mom_v_adv_ext, __pyx_v_ebqe_bc_flux_mom_w_adv_ext, __pyx_v_ebqe_bc_u_ext, __pyx_v_ebqe_bc_flux_u_diff_ext, __pyx_v_ebqe_penalty_ext, __pyx_v_ebqe_bc_v_ext, __pyx_v_ebqe_bc_flux_v_diff_ext, __pyx_v_ebqe_bc_w_ext, __pyx_v_ebqe_bc_flux_w_diff_ext, __pyx_v_q_x, __pyx_v_q_velocity, __pyx_v_ebqe_velocity, __pyx_v_q_grad_u, __pyx_v_q_grad_v, __pyx_v_q_grad_w, __pyx_v_q_divU, __pyx_v_ebqe_grad_u, __pyx_v_ebqe_grad_v, __pyx_v_ebqe_grad_w, __pyx_v_flux, __pyx_v_elementResidual_p, __pyx_v_elementFlags, __pyx_v_boundaryFlags, __pyx_v_barycenters, __pyx_v_wettedAreas, __pyx_v_netForces_p, __pyx_v_netForces_v, __pyx_v_netMoments, __pyx_v_q_rho, __pyx_v_ebqe_rho, __pyx_v_q_nu, __pyx_v_ebqe_nu, __pyx_v_nParticles, __pyx_v_particle_epsFact, __pyx_v_particle_alpha, __pyx_v_particle_beta, __pyx_v_particle_penalty_constant, __pyx_v_particle_signed_distances, __pyx_v_particle_signed_distance_normals, __pyx_v_particle_velocities, __pyx_v_particle_centroids, __pyx_v_particle_netForces, __pyx_v_particle_netMoments, __pyx_v_particle_surfaceArea, __pyx_v_particle_nitsche, __pyx_v_STABILIZATION_TYPE, __pyx_v_areaRefElement, __pyx_v_cMax, __pyx_v_cE, __pyx_v_forcex, __pyx_v_forcey, __pyx_v_forcez, __pyx_v_KILL_PRESSURE_TERM, __pyx_v_dt, __pyx_v_entropyResidualAtCell, __pyx_v_maxSpeed2AtCell, __pyx_v_maxSpeed2AtOmega, __pyx_v_rhoAtCell, __pyx_v_muAtCell, __pyx_v_quantDOFs, __pyx_v_numDOFsPerEqn, __pyx_v_csrRowIndeces_DofLoops, __pyx_v_csrColumnOffsets_DofLoops, __pyx_v_ML, __pyx_v_Cx, __pyx_v_Cy, __pyx_v_Cz, __pyx_v_MATERIAL_PARAMETERS_AS_FUNCTION, __pyx_v_density_as_function, __pyx_v_dynamic_viscosity_as_function, __pyx_v_ebqe_density_as_function, __pyx_v_ebqe_dynamic_viscosity_as_function, __pyx_v_order_polynomial);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6mprans_8cRANS3PF_7RANS3PF_8calculateResidual_entropy_viscosity(struct __pyx_obj_6mprans_8cRANS3PF_RANS3PF *__pyx_v_self, PyArrayObject *__pyx_v_mesh_trial_ref, PyArrayObject *__pyx_v_mesh_grad_trial_ref, PyArrayObject *__pyx_v_mesh_dof, PyArrayObject *__pyx_v_mesh_velocity_dof, double __pyx_v_MOVING_DOMAIN, double __pyx_v_PSTAB, PyArrayObject *__pyx_v_mesh_l2g, PyArrayObject *__pyx_v_dV_ref, PyArrayObject *__pyx_v_p_trial_ref, PyArrayObject *__pyx_v_p_grad_trial_ref, PyArrayObject *__pyx_v_p_test_ref, PyArrayObject *__pyx_v_p_grad_test_ref, PyArrayObject *__pyx_v_q_p, PyArrayObject *__pyx_v_q_grad_p, PyArrayObject *__pyx_v_ebqe_p, PyArrayObject *__pyx_v_ebqe_grad_p, PyArrayObject *__pyx_v_vel_trial_ref, PyArrayObject *__pyx_v_vel_grad_trial_ref, PyArrayObject *__pyx_v_vel_hess_trial_ref, PyArrayObject *__pyx_v_vel_test_ref, PyArrayObject *__pyx_v_vel_grad_test_ref, PyArrayObject *__pyx_v_mesh_trial_trace_ref, PyArrayObject *__pyx_v_mesh_grad_trial_trace_ref, PyArrayObject *__pyx_v_dS_ref, PyArrayObject *__pyx_v_p_trial_trace_ref, PyArrayObject *__pyx_v_p_grad_trial_trace_ref, PyArrayObject *__pyx_v_p_test_trace_ref, PyArrayObject *__pyx_v_p_grad_test_trace_ref, PyArrayObject *__pyx_v_vel_trial_trace_ref, PyArrayObject *__pyx_v_vel_grad_trial_trace_ref, PyArrayObject *__pyx_v_vel_test_trace_ref, PyArrayObject *__pyx_v_vel_grad_test_trace_ref, PyArrayObject *__pyx_v_normal_ref, PyArrayObject *__pyx_v_boundaryJac_ref, double __pyx_v_eb_adjoint_sigma, PyArrayObject *__pyx_v_elementDiameter, PyArrayObject *__pyx_v_nodeDiametersArray, double __pyx_v_hFactor, int __pyx_v_nElements_global, int __pyx_v_nElements_owned, int __pyx_v_nElementBoundaries_owned, double __pyx_v_useRBLES, double __pyx_v_useMetrics, double __pyx_v_alphaBDF, double __pyx_v_epsFact_rho, double __pyx_v_epsFact_mu, double __pyx_v_sigma, double __pyx_v_rho_0, double __pyx_v_nu_0, double __pyx_v_rho_1, double __pyx_v_nu_1, double __pyx_v_smagorinskyConstant, int __pyx_v_turbulenceClosureModel, double __pyx_v_Ct_sge, double __pyx_v_Cd_sge, double __pyx_v_C_dc, double __pyx_v_C_b, PyArrayObject *__pyx_v_eps_solid, PyArrayObject *__pyx_v_phi_solid, PyArrayObject *__pyx_v_q_velocity_solid, PyArrayObject *__pyx_v_q_vos, PyArrayObject *__pyx_v_q_dvos_dt, PyArrayObject *__pyx_v_q_dragAlpha, PyArrayObject *__pyx_v_q_dragBeta, PyArrayObject *__pyx_v_q_mass_source, PyArrayObject *__pyx_v_q_turb_var_0, PyArrayObject *__pyx_v_q_turb_var_1, PyArrayObject *__pyx_v_q_turb_var_grad_0, PyArrayObject *__pyx_v_q_eddy_viscosity, PyArrayObject *__pyx_v_p_l2g, PyArrayObject *__pyx_v_vel_l2g, PyArrayObject *__pyx_v_p_dof, PyArrayObject *__pyx_v_u_dof, PyArrayObject *__pyx_v_v_dof, PyArrayObject *__pyx_v_w_dof, PyArrayObject *__pyx_v_u_dof_old, PyArrayObject *__pyx_v_v_dof_old, PyArrayObject *__pyx_v_w_dof_old, PyArrayObject *__pyx_v_u_dof_old_old, PyArrayObject *__pyx_v_v_dof_old_old, PyArrayObject *__pyx_v_w_dof_old_old, PyArrayObject *__pyx_v_g, double __pyx_v_useVF, PyArrayObject *__pyx_v_vf, PyArrayObject *__pyx_v_phi, PyArrayObject *__pyx_v_normal_phi, PyArrayObject *__pyx_v_kappa_phi, PyArrayObject *__pyx_v_q_mom_u_acc, PyArrayObject *__pyx_v_q_mom_v_acc, PyArrayObject *__pyx_v_q_mom_w_acc, PyArrayObject *__pyx_v_q_mass_adv, PyArrayObject *__pyx_v_q_mom_u_acc_beta_bdf, PyArrayObject *__pyx_v_q_mom_v_acc_beta_bdf, PyArrayObject *__pyx_v_q_mom_w_acc_beta_bdf, PyArrayObject *__pyx_v_q_dV, PyArrayObject *__pyx_v_q_dV_last, PyArrayObject *__pyx_v_q_velocity_sge, PyArrayObject *__pyx_v_ebqe_velocity_star, PyArrayObject *__pyx_v_q_cfl, PyArrayObject *__pyx_v_q_numDiff_u, PyArrayObject *__pyx_v_q_numDiff_v, PyArrayObject *__pyx_v_q_numDiff_w, PyArrayObject *__pyx_v_q_numDiff_u_last, PyArrayObject *__pyx_v_q_numDiff_v_last, PyArrayObject *__pyx_v_q_numDiff_w_last, PyArrayObject *__pyx_v_sdInfo_u_u_rowptr, PyArrayObject *__pyx_v_sdInfo_u_u_colind, PyArrayObject *__pyx_v_sdInfo_u_v_rowptr, PyArrayObject *__pyx_v_sdInfo_u_v_colind, PyArrayObject *__pyx_v_sdInfo_u_w_rowptr, PyArrayObject *__pyx_v_sdInfo_u_w_colind, PyArrayObject *__pyx_v_sdInfo_v_v_rowptr, PyArrayObject *__pyx_v_sdInfo_v_v_colind, PyArrayObject *__pyx_v_sdInfo_v_u_rowptr, PyArrayObject *__pyx_v_sdInfo_v_u_colind, PyArrayObject *__pyx_v_sdInfo_v_w_rowptr, PyArrayObject *__pyx_v_sdInfo_v_w_colind, PyArrayObject *__pyx_v_sdInfo_w_w_rowptr, PyArrayObject *__pyx_v_sdInfo_w_w_colind, PyArrayObject *__pyx_v_sdInfo_w_u_rowptr, PyArrayObject *__pyx_v_sdInfo_w_u_colind, PyArrayObject *__pyx_v_sdInfo_w_v_rowptr, PyArrayObject *__pyx_v_sdInfo_w_v_colind, int __pyx_v_offset_p, int __pyx_v_offset_u, int __pyx_v_offset_v, int __pyx_v_offset_w, int __pyx_v_stride_p, int __pyx_v_stride_u, int __pyx_v_stride_v, int __pyx_v_stride_w, PyArrayObject *__pyx_v_globalResidual, int __pyx_v_nExteriorElementBoundaries_global, PyArrayObject *__pyx_v_exteriorElementBoundariesArray, PyArrayObject *__pyx_v_elementBoundaryElementsArray, PyArrayObject *__pyx_v_elementBoundaryLocalElementBoundariesArray, PyArrayObject *__pyx_v_ebqe_vf_ext, PyArrayObject *__pyx_v_bc_ebqe_vf_ext, PyArrayObject *__pyx_v_ebqe_phi_ext, PyArrayObject *__pyx_v_bc_ebqe_phi_ext, PyArrayObject *__pyx_v_ebqe_normal_phi_ext, PyArrayObject *__pyx_v_ebqe_kappa_phi_ext, PyArrayObject *__pyx_v_ebqe_vos_ext, PyArrayObject *__pyx_v_ebqe_turb_var_0, PyArrayObject *__pyx_v_ebqe_turb_var_1, PyArrayObject *__pyx_v_isDOFBoundary_p, PyArrayObject *__pyx_v_isDOFBoundary_u, PyArrayObject *__pyx_v_isDOFBoundary_v, PyArrayObject *__pyx_v_isDOFBoundary_w, PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_p, PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_u, PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_v, PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_w, PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_u, PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_v, PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_w, PyArrayObject *__pyx_v_ebqe_bc_p_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_mass_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_mom_u_adv_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_mom_v_adv_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_mom_w_adv_ext, PyArrayObject *__pyx_v_ebqe_bc_u_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_u_diff_ext, PyArrayObject *__pyx_v_ebqe_penalty_ext, PyArrayObject *__pyx_v_ebqe_bc_v_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_v_diff_ext, PyArrayObject *__pyx_v_ebqe_bc_w_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_w_diff_ext, PyArrayObject *__pyx_v_q_x, PyArrayObject *__pyx_v_q_velocity, PyArrayObject *__pyx_v_ebqe_velocity, PyArrayObject *__pyx_v_q_grad_u, PyArrayObject *__pyx_v_q_grad_v, PyArrayObject *__pyx_v_q_grad_w, PyArrayObject *__pyx_v_q_divU, PyArrayObject *__pyx_v_ebqe_grad_u, PyArrayObject *__pyx_v_ebqe_grad_v, PyArrayObject *__pyx_v_ebqe_grad_w, PyArrayObject *__pyx_v_flux, PyArrayObject *__pyx_v_elementResidual_p, PyArrayObject *__pyx_v_elementFlags, PyArrayObject *__pyx_v_boundaryFlags, PyArrayObject *__pyx_v_barycenters, PyArrayObject *__pyx_v_wettedAreas, PyArrayObject *__pyx_v_netForces_p, PyArrayObject *__pyx_v_netForces_v, PyArrayObject *__pyx_v_netMoments, PyArrayObject *__pyx_v_q_rho, PyArrayObject *__pyx_v_ebqe_rho, PyArrayObject *__pyx_v_q_nu, PyArrayObject *__pyx_v_ebqe_nu, int __pyx_v_nParticles, double __pyx_v_particle_epsFact, double __pyx_v_particle_alpha, double __pyx_v_particle_beta, double __pyx_v_particle_penalty_constant, PyArrayObject *__pyx_v_particle_signed_distances, PyArrayObject *__pyx_v_particle_signed_distance_normals, PyArrayObject *__pyx_v_particle_velocities, PyArrayObject *__pyx_v_particle_centroids, PyArrayObject *__pyx_v_particle_netForces, PyArrayObject *__pyx_v_particle_netMoments, PyArrayObject *__pyx_v_particle_surfaceArea, double __pyx_v_particle_nitsche, int __pyx_v_STABILIZATION_TYPE, double __pyx_v_areaRefElement, double __pyx_v_cMax, double __pyx_v_cE, PyArrayObject *__pyx_v_forcex, PyArrayObject *__pyx_v_forcey, PyArrayObject *__pyx_v_forcez, int __pyx_v_KILL_PRESSURE_TERM, double __pyx_v_dt, PyArrayObject *__pyx_v_entropyResidualAtCell, PyArrayObject *__pyx_v_maxSpeed2AtCell, double __pyx_v_maxSpeed2AtOmega, PyArrayObject *__pyx_v_rhoAtCell, PyArrayObject *__pyx_v_muAtCell, PyArrayObject *__pyx_v_quantDOFs, int __pyx_v_numDOFsPerEqn, PyArrayObject *__pyx_v_csrRowIndeces_DofLoops, PyArrayObject *__pyx_v_csrColumnOffsets_DofLoops, PyArrayObject *__pyx_v_ML, PyArrayObject *__pyx_v_Cx, PyArrayObject *__pyx_v_Cy, PyArrayObject *__pyx_v_Cz, int __pyx_v_MATERIAL_PARAMETERS_AS_FUNCTION, PyArrayObject *__pyx_v_density_as_function, PyArrayObject *__pyx_v_dynamic_viscosity_as_function, PyArrayObject *__pyx_v_ebqe_density_as_function, PyArrayObject *__pyx_v_ebqe_dynamic_viscosity_as_function, double __pyx_v_order_polynomial) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calculateResidual_entropy_viscosity", 0);

  /* "mprans/cRANS3PF.pyx":1960
 *                                             numpy.ndarray ebqe_dynamic_viscosity_as_function,
 *                                             double order_polynomial):
 *         self.thisptr.calculateResidual_entropy_viscosity(< double *> mesh_trial_ref.data,             # <<<<<<<<<<<<<<
 *                                                          < double * > mesh_grad_trial_ref.data,
 *                                                          < double * > mesh_dof.data,
 */
  __pyx_v_self->thisptr->calculateResidual_entropy_viscosity(((double *)__pyx_v_mesh_trial_ref->data), ((double *)__pyx_v_mesh_grad_trial_ref->data), ((double *)__pyx_v_mesh_dof->data), ((double *)__pyx_v_mesh_velocity_dof->data), __pyx_v_MOVING_DOMAIN, __pyx_v_PSTAB, ((int *)__pyx_v_mesh_l2g->data), ((double *)__pyx_v_dV_ref->data), ((double *)__pyx_v_p_trial_ref->data), ((double *)__pyx_v_p_grad_trial_ref->data), ((double *)__pyx_v_p_test_ref->data), ((double *)__pyx_v_p_grad_test_ref->data), ((double *)__pyx_v_q_p->data), ((double *)__pyx_v_q_grad_p->data), ((double *)__pyx_v_ebqe_p->data), ((double *)__pyx_v_ebqe_grad_p->data), ((double *)__pyx_v_vel_trial_ref->data), ((double *)__pyx_v_vel_grad_trial_ref->data), ((double *)__pyx_v_vel_hess_trial_ref->data), ((double *)__pyx_v_vel_test_ref->data), ((double *)__pyx_v_vel_grad_test_ref->data), ((double *)__pyx_v_mesh_trial_trace_ref->data), ((double *)__pyx_v_mesh_grad_trial_trace_ref->data), ((double *)__pyx_v_dS_ref->data), ((double *)__pyx_v_p_trial_trace_ref->data), ((double *)__pyx_v_p_grad_trial_trace_ref->data), ((double *)__pyx_v_p_test_trace_ref->data), ((double *)__pyx_v_p_grad_test_trace_ref->data), ((double *)__pyx_v_vel_trial_trace_ref->data), ((double *)__pyx_v_vel_grad_trial_trace_ref->data), ((double *)__pyx_v_vel_test_trace_ref->data), ((double *)__pyx_v_vel_grad_test_trace_ref->data), ((double *)__pyx_v_normal_ref->data), ((double *)__pyx_v_boundaryJac_ref->data), __pyx_v_eb_adjoint_sigma, ((double *)__pyx_v_elementDiameter->data), ((double *)__pyx_v_nodeDiametersArray->data), __pyx_v_hFactor, __pyx_v_nElements_global, __pyx_v_nElements_owned, __pyx_v_nElementBoundaries_owned, __pyx_v_useRBLES, __pyx_v_useMetrics, __pyx_v_alphaBDF, __pyx_v_epsFact_rho, __pyx_v_epsFact_mu, __pyx_v_sigma, __pyx_v_rho_0, __pyx_v_nu_0, __pyx_v_rho_1, __pyx_v_nu_1, __pyx_v_smagorinskyConstant, __pyx_v_turbulenceClosureModel, __pyx_v_Ct_sge, __pyx_v_Cd_sge, __pyx_v_C_dc, __pyx_v_C_b, ((double *)__pyx_v_eps_solid->data), ((double *)__pyx_v_phi_solid->data), ((double *)__pyx_v_q_velocity_solid->data), ((double *)__pyx_v_q_vos->data), ((double *)__pyx_v_q_dvos_dt->data), ((double *)__pyx_v_q_dragAlpha->data), ((double *)__pyx_v_q_dragBeta->data), ((double *)__pyx_v_q_mass_source->data), ((double *)__pyx_v_q_turb_var_0->data), ((double *)__pyx_v_q_turb_var_1->data), ((double *)__pyx_v_q_turb_var_grad_0->data), ((double *)__pyx_v_q_eddy_viscosity->data), ((int *)__pyx_v_p_l2g->data), ((int *)__pyx_v_vel_l2g->data), ((double *)__pyx_v_p_dof->data), ((double *)__pyx_v_u_dof->data), ((double *)__pyx_v_v_dof->data), ((double *)__pyx_v_w_dof->data), ((double *)__pyx_v_u_dof_old->data), ((double *)__pyx_v_v_dof_old->data), ((double *)__pyx_v_w_dof_old->data), ((double *)__pyx_v_u_dof_old_old->data), ((double *)__pyx_v_v_dof_old_old->data), ((double *)__pyx_v_w_dof_old_old->data), ((double *)__pyx_v_g->data), __pyx_v_useVF, ((double *)__pyx_v_vf->data), ((double *)__pyx_v_phi->data), ((double *)__pyx_v_normal_phi->data), ((double *)__pyx_v_kappa_phi->data), ((double *)__pyx_v_q_mom_u_acc->data), ((double *)__pyx_v_q_mom_v_acc->data), ((double *)__pyx_v_q_mom_w_acc->data), ((double *)__pyx_v_q_mass_adv->data), ((double *)__pyx_v_q_mom_u_acc_beta_bdf->data), ((double *)__pyx_v_q_mom_v_acc_beta_bdf->data), ((double *)__pyx_v_q_mom_w_acc_beta_bdf->data), ((double *)__pyx_v_q_dV->data), ((double *)__pyx_v_q_dV_last->data), ((double *)__pyx_v_q_velocity_sge->data), ((double *)__pyx_v_ebqe_velocity_star->data), ((double *)__pyx_v_q_cfl->data), ((double *)__pyx_v_q_numDiff_u->data), ((double *)__pyx_v_q_numDiff_v->data), ((double *)__pyx_v_q_numDiff_w->data), ((double *)__pyx_v_q_numDiff_u_last->data), ((double *)__pyx_v_q_numDiff_v_last->data), ((double *)__pyx_v_q_numDiff_w_last->data), ((int *)__pyx_v_sdInfo_u_u_rowptr->data), ((int *)__pyx_v_sdInfo_u_u_colind->data), ((int *)__pyx_v_sdInfo_u_v_rowptr->data), ((int *)__pyx_v_sdInfo_u_v_colind->data), ((int *)__pyx_v_sdInfo_u_w_rowptr->data), ((int *)__pyx_v_sdInfo_u_w_colind->data), ((int *)__pyx_v_sdInfo_v_v_rowptr->data), ((int *)__pyx_v_sdInfo_v_v_colind->data), ((int *)__pyx_v_sdInfo_v_u_rowptr->data), ((int *)__pyx_v_sdInfo_v_u_colind->data), ((int *)__pyx_v_sdInfo_v_w_rowptr->data), ((int *)__pyx_v_sdInfo_v_w_colind->data), ((int *)__pyx_v_sdInfo_w_w_rowptr->data), ((int *)__pyx_v_sdInfo_w_w_colind->data), ((int *)__pyx_v_sdInfo_w_u_rowptr->data), ((int *)__pyx_v_sdInfo_w_u_colind->data), ((int *)__pyx_v_sdInfo_w_v_rowptr->data), ((int *)__pyx_v_sdInfo_w_v_colind->data), __pyx_v_offset_p, __pyx_v_offset_u, __pyx_v_offset_v, __pyx_v_offset_w, __pyx_v_stride_p, __pyx_v_stride_u, __pyx_v_stride_v, __pyx_v_stride_w, ((double *)__pyx_v_globalResidual->data), __pyx_v_nExteriorElementBoundaries_global, ((int *)__pyx_v_exteriorElementBoundariesArray->data), ((int *)__pyx_v_elementBoundaryElementsArray->data), ((int *)__pyx_v_elementBoundaryLocalElementBoundariesArray->data), ((double *)__pyx_v_ebqe_vf_ext->data), ((double *)__pyx_v_bc_ebqe_vf_ext->data), ((double *)__pyx_v_ebqe_phi_ext->data), ((double *)__pyx_v_bc_ebqe_phi_ext->data), ((double *)__pyx_v_ebqe_normal_phi_ext->data), ((double *)__pyx_v_ebqe_kappa_phi_ext->data), ((double *)__pyx_v_ebqe_vos_ext->data), ((double *)__pyx_v_ebqe_turb_var_0->data), ((double *)__pyx_v_ebqe_turb_var_1->data), ((int *)__pyx_v_isDOFBoundary_p->data), ((int *)__pyx_v_isDOFBoundary_u->data), ((int *)__pyx_v_isDOFBoundary_v->data), ((int *)__pyx_v_isDOFBoundary_w->data), ((int *)__pyx_v_isAdvectiveFluxBoundary_p->data), ((int *)__pyx_v_isAdvectiveFluxBoundary_u->data), ((int *)__pyx_v_isAdvectiveFluxBoundary_v->data), ((int *)__pyx_v_isAdvectiveFluxBoundary_w->data), ((int *)__pyx_v_isDiffusiveFluxBoundary_u->data), ((int *)__pyx_v_isDiffusiveFluxBoundary_v->data), ((int *)__pyx_v_isDiffusiveFluxBoundary_w->data), ((double *)__pyx_v_ebqe_bc_p_ext->data), ((double *)__pyx_v_ebqe_bc_flux_mass_ext->data), ((double *)__pyx_v_ebqe_bc_flux_mom_u_adv_ext->data), ((double *)__pyx_v_ebqe_bc_flux_mom_v_adv_ext->data), ((double *)__pyx_v_ebqe_bc_flux_mom_w_adv_ext->data), ((double *)__pyx_v_ebqe_bc_u_ext->data), ((double *)__pyx_v_ebqe_bc_flux_u_diff_ext->data), ((double *)__pyx_v_ebqe_penalty_ext->data), ((double *)__pyx_v_ebqe_bc_v_ext->data), ((double *)__pyx_v_ebqe_bc_flux_v_diff_ext->data), ((double *)__pyx_v_ebqe_bc_w_ext->data), ((double *)__pyx_v_ebqe_bc_flux_w_diff_ext->data), ((double *)__pyx_v_q_x->data), ((double *)__pyx_v_q_velocity->data), ((double *)__pyx_v_ebqe_velocity->data), ((double *)__pyx_v_q_grad_u->data), ((double *)__pyx_v_q_grad_v->data), ((double *)__pyx_v_q_grad_w->data), ((double *)__pyx_v_q_divU->data), ((double *)__pyx_v_ebqe_grad_u->data), ((double *)__pyx_v_ebqe_grad_v->data), ((double *)__pyx_v_ebqe_grad_w->data), ((double *)__pyx_v_flux->data), ((double *)__pyx_v_elementResidual_p->data), ((int *)__pyx_v_elementFlags->data), ((int *)__pyx_v_boundaryFlags->data), ((double *)__pyx_v_barycenters->data), ((double *)__pyx_v_wettedAreas->data), ((double *)__pyx_v_netForces_p->data), ((double *)__pyx_v_netForces_v->data), ((double *)__pyx_v_netMoments->data), ((double *)__pyx_v_q_rho->data), ((double *)__pyx_v_ebqe_rho->data), ((double *)__pyx_v_q_nu->data), ((double *)__pyx_v_ebqe_nu->data), __pyx_v_nParticles, __pyx_v_particle_epsFact, __pyx_v_particle_alpha, __pyx_v_particle_beta, __pyx_v_particle_penalty_constant, ((double *)__pyx_v_particle_signed_distances->data), ((double *)__pyx_v_particle_signed_distance_normals->data), ((double *)__pyx_v_particle_velocities->data), ((double *)__pyx_v_particle_centroids->data), ((double *)__pyx_v_particle_netForces->data), ((double *)__pyx_v_particle_netMoments->data), ((double *)__pyx_v_particle_surfaceArea->data), __pyx_v_particle_nitsche, __pyx_v_STABILIZATION_TYPE, __pyx_v_areaRefElement, __pyx_v_cMax, __pyx_v_cE, ((double *)__pyx_v_forcex->data), ((double *)__pyx_v_forcey->data), ((double *)__pyx_v_forcez->data), __pyx_v_KILL_PRESSURE_TERM, __pyx_v_dt, ((double *)__pyx_v_entropyResidualAtCell->data), ((double *)__pyx_v_maxSpeed2AtCell->data), __pyx_v_maxSpeed2AtOmega, ((double *)__pyx_v_rhoAtCell->data), ((double *)__pyx_v_muAtCell->data), ((double *)__pyx_v_quantDOFs->data), __pyx_v_numDOFsPerEqn, ((int *)__pyx_v_csrRowIndeces_DofLoops->data), ((int *)__pyx_v_csrColumnOffsets_DofLoops->data), ((double *)__pyx_v_ML->data), ((double *)__pyx_v_Cx->data), ((double *)__pyx_v_Cy->data), ((double *)__pyx_v_Cz->data), __pyx_v_MATERIAL_PARAMETERS_AS_FUNCTION, ((double *)__pyx_v_density_as_function->data), ((double *)__pyx_v_dynamic_viscosity_as_function->data), ((double *)__pyx_v_ebqe_density_as_function->data), ((double *)__pyx_v_ebqe_dynamic_viscosity_as_function->data), __pyx_v_order_polynomial);

  /* "mprans/cRANS3PF.pyx":1744
 *                                        < double * > ebqe_density_as_function.data,
 *                                        < double * > ebqe_dynamic_viscosity_as_function.data)
 *     def calculateResidual_entropy_viscosity(self,             # <<<<<<<<<<<<<<
 *                                             numpy.ndarray mesh_trial_ref,
 *                                             numpy.ndarray mesh_grad_trial_ref,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mprans/cRANS3PF.pyx":2175
 *                                                          < double * > ebqe_dynamic_viscosity_as_function.data,
 *                                                          order_polynomial)
 *     def calculateJacobian_entropy_viscosity(self,             # <<<<<<<<<<<<<<
 *                                             numpy.ndarray mesh_trial_ref,
 *                                             numpy.ndarray mesh_grad_trial_ref,
 */

/* Python wrapper */
static PyObject *__pyx_pw_6mprans_8cRANS3PF_7RANS3PF_11calculateJacobian_entropy_viscosity(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6mprans_8cRANS3PF_7RANS3PF_11calculateJacobian_entropy_viscosity(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_mesh_trial_ref = 0;
  PyArrayObject *__pyx_v_mesh_grad_trial_ref = 0;
  PyArrayObject *__pyx_v_mesh_dof = 0;
  PyArrayObject *__pyx_v_mesh_velocity_dof = 0;
  double __pyx_v_MOVING_DOMAIN;
  double __pyx_v_PSTAB;
  PyArrayObject *__pyx_v_mesh_l2g = 0;
  PyArrayObject *__pyx_v_dV_ref = 0;
  PyArrayObject *__pyx_v_p_trial_ref = 0;
  PyArrayObject *__pyx_v_p_grad_trial_ref = 0;
  PyArrayObject *__pyx_v_p_test_ref = 0;
  PyArrayObject *__pyx_v_p_grad_test_ref = 0;
  PyArrayObject *__pyx_v_q_p = 0;
  PyArrayObject *__pyx_v_q_grad_p = 0;
  PyArrayObject *__pyx_v_ebqe_p = 0;
  PyArrayObject *__pyx_v_ebqe_grad_p = 0;
  PyArrayObject *__pyx_v_vel_trial_ref = 0;
  PyArrayObject *__pyx_v_vel_grad_trial_ref = 0;
  PyArrayObject *__pyx_v_vel_hess_trial_ref = 0;
  PyArrayObject *__pyx_v_vel_test_ref = 0;
  PyArrayObject *__pyx_v_vel_grad_test_ref = 0;
  PyArrayObject *__pyx_v_mesh_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_mesh_grad_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_dS_ref = 0;
  PyArrayObject *__pyx_v_p_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_p_grad_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_p_test_trace_ref = 0;
  PyArrayObject *__pyx_v_p_grad_test_trace_ref = 0;
  PyArrayObject *__pyx_v_vel_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_vel_grad_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_vel_test_trace_ref = 0;
  PyArrayObject *__pyx_v_vel_grad_test_trace_ref = 0;
  PyArrayObject *__pyx_v_normal_ref = 0;
  PyArrayObject *__pyx_v_boundaryJac_ref = 0;
  double __pyx_v_eb_adjoint_sigma;
  PyArrayObject *__pyx_v_elementDiameter = 0;
  PyArrayObject *__pyx_v_nodeDiametersArray = 0;
  double __pyx_v_hFactor;
  int __pyx_v_nElements_global;
  int __pyx_v_nElements_owned;
  double __pyx_v_useRBLES;
  double __pyx_v_useMetrics;
  double __pyx_v_alphaBDF;
  double __pyx_v_epsFact_rho;
  double __pyx_v_epsFact_mu;
  double __pyx_v_sigma;
  double __pyx_v_rho_0;
  double __pyx_v_nu_0;
  double __pyx_v_rho_1;
  double __pyx_v_nu_1;
  double __pyx_v_smagorinskyConstant;
  int __pyx_v_turbulenceClosureModel;
  double __pyx_v_Ct_sge;
  double __pyx_v_Cd_sge;
  double __pyx_v_C_dg;
  double __pyx_v_C_b;
  PyArrayObject *__pyx_v_eps_solid = 0;
  PyArrayObject *__pyx_v_phi_solid = 0;
  PyArrayObject *__pyx_v_q_velocity_solid = 0;
  PyArrayObject *__pyx_v_q_vos = 0;
  PyArrayObject *__pyx_v_q_dvos_dt = 0;
  PyArrayObject *__pyx_v_q_dragAlpha = 0;
  PyArrayObject *__pyx_v_q_dragBeta = 0;
  PyArrayObject *__pyx_v_q_mass_source = 0;
  PyArrayObject *__pyx_v_q_turb_var_0 = 0;
  PyArrayObject *__pyx_v_q_turb_var_1 = 0;
  PyArrayObject *__pyx_v_q_turb_var_grad_0 = 0;
  PyArrayObject *__pyx_v_p_l2g = 0;
  PyArrayObject *__pyx_v_vel_l2g = 0;
  PyArrayObject *__pyx_v_p_dof = 0;
  PyArrayObject *__pyx_v_u_dof = 0;
  PyArrayObject *__pyx_v_v_dof = 0;
  PyArrayObject *__pyx_v_w_dof = 0;
  PyArrayObject *__pyx_v_g = 0;
  double __pyx_v_useVF;
  PyArrayObject *__pyx_v_vf = 0;
  PyArrayObject *__pyx_v_phi = 0;
  PyArrayObject *__pyx_v_normal_phi = 0;
  PyArrayObject *__pyx_v_kappa_phi = 0;
  PyArrayObject *__pyx_v_q_mom_u_acc_beta_bdf = 0;
  PyArrayObject *__pyx_v_q_mom_v_acc_beta_bdf = 0;
  PyArrayObject *__pyx_v_q_mom_w_acc_beta_bdf = 0;
  PyArrayObject *__pyx_v_q_dV = 0;
  PyArrayObject *__pyx_v_q_dV_last = 0;
  PyArrayObject *__pyx_v_q_velocity_sge = 0;
  PyArrayObject *__pyx_v_ebqe_velocity_star = 0;
  PyArrayObject *__pyx_v_q_cfl = 0;
  PyArrayObject *__pyx_v_q_numDiff_u_last = 0;
  PyArrayObject *__pyx_v_q_numDiff_v_last = 0;
  PyArrayObject *__pyx_v_q_numDiff_w_last = 0;
  PyArrayObject *__pyx_v_sdInfo_u_u_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_u_u_colind = 0;
  PyArrayObject *__pyx_v_sdInfo_u_v_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_u_v_colind = 0;
  PyArrayObject *__pyx_v_sdInfo_u_w_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_u_w_colind = 0;
  PyArrayObject *__pyx_v_sdInfo_v_v_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_v_v_colind = 0;
  PyArrayObject *__pyx_v_sdInfo_v_u_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_v_u_colind = 0;
  PyArrayObject *__pyx_v_sdInfo_v_w_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_v_w_colind = 0;
  PyArrayObject *__pyx_v_sdInfo_w_w_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_w_w_colind = 0;
  PyArrayObject *__pyx_v_sdInfo_w_u_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_w_u_colind = 0;
  PyArrayObject *__pyx_v_sdInfo_w_v_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_w_v_colind = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_p_p = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_p_p = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_p_u = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_p_u = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_p_v = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_p_v = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_p_w = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_p_w = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_u_p = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_u_p = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_u_u = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_u_u = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_u_v = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_u_v = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_u_w = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_u_w = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_v_p = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_v_p = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_v_u = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_v_u = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_v_v = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_v_v = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_v_w = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_v_w = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_w_p = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_w_p = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_w_u = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_w_u = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_w_v = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_w_v = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_w_w = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_w_w = 0;
  PyObject *__pyx_v_globalJacobian = 0;
  int __pyx_v_nExteriorElementBoundaries_global;
  PyArrayObject *__pyx_v_exteriorElementBoundariesArray = 0;
  PyArrayObject *__pyx_v_elementBoundaryElementsArray = 0;
  PyArrayObject *__pyx_v_elementBoundaryLocalElementBoundariesArray = 0;
  PyArrayObject *__pyx_v_ebqe_vf_ext = 0;
  PyArrayObject *__pyx_v_bc_ebqe_vf_ext = 0;
  PyArrayObject *__pyx_v_ebqe_phi_ext = 0;
  PyArrayObject *__pyx_v_bc_ebqe_phi_ext = 0;
  PyArrayObject *__pyx_v_ebqe_normal_phi_ext = 0;
  PyArrayObject *__pyx_v_ebqe_kappa_phi_ext = 0;
  PyArrayObject *__pyx_v_ebqe_vos_ext = 0;
  PyArrayObject *__pyx_v_ebqe_turb_var_0 = 0;
  PyArrayObject *__pyx_v_ebqe_turb_var_1 = 0;
  PyArrayObject *__pyx_v_isDOFBoundary_p = 0;
  PyArrayObject *__pyx_v_isDOFBoundary_u = 0;
  PyArrayObject *__pyx_v_isDOFBoundary_v = 0;
  PyArrayObject *__pyx_v_isDOFBoundary_w = 0;
  PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_p = 0;
  PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_u = 0;
  PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_v = 0;
  PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_w = 0;
  PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_u = 0;
  PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_v = 0;
  PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_w = 0;
  PyArrayObject *__pyx_v_ebqe_bc_p_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_flux_mass_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_flux_mom_u_adv_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_flux_mom_v_adv_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_flux_mom_w_adv_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_u_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_flux_u_diff_ext = 0;
  PyArrayObject *__pyx_v_ebqe_penalty_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_v_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_flux_v_diff_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_w_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_flux_w_diff_ext = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_p_p = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_p_u = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_p_v = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_p_w = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_u_p = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_u_u = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_u_v = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_u_w = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_v_p = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_v_u = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_v_v = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_v_w = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_w_p = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_w_u = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_w_v = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_w_w = 0;
  PyArrayObject *__pyx_v_elementFlags = 0;
  int __pyx_v_nParticles;
  double __pyx_v_particle_epsFact;
  double __pyx_v_particle_alpha;
  double __pyx_v_particle_beta;
  double __pyx_v_particle_penalty_constant;
  PyArrayObject *__pyx_v_particle_signed_distances = 0;
  PyArrayObject *__pyx_v_particle_signed_distance_normals = 0;
  PyArrayObject *__pyx_v_particle_velocities = 0;
  PyArrayObject *__pyx_v_particle_centroids = 0;
  double __pyx_v_particle_nitsche;
  int __pyx_v_KILL_PRESSURE_TERM;
  int __pyx_v_MATERIAL_PARAMETERS_AS_FUNCTION;
  PyArrayObject *__pyx_v_density_as_function = 0;
  PyArrayObject *__pyx_v_dynamic_viscosity_as_function = 0;
  PyArrayObject *__pyx_v_ebqe_density_as_function = 0;
  PyArrayObject *__pyx_v_ebqe_dynamic_viscosity_as_function = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calculateJacobian_entropy_viscosity (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_mesh_trial_ref,&__pyx_n_s_mesh_grad_trial_ref,&__pyx_n_s_mesh_dof,&__pyx_n_s_mesh_velocity_dof,&__pyx_n_s_MOVING_DOMAIN,&__pyx_n_s_PSTAB,&__pyx_n_s_mesh_l2g,&__pyx_n_s_dV_ref,&__pyx_n_s_p_trial_ref,&__pyx_n_s_p_grad_trial_ref,&__pyx_n_s_p_test_ref,&__pyx_n_s_p_grad_test_ref,&__pyx_n_s_q_p,&__pyx_n_s_q_grad_p,&__pyx_n_s_ebqe_p,&__pyx_n_s_ebqe_grad_p,&__pyx_n_s_vel_trial_ref,&__pyx_n_s_vel_grad_trial_ref,&__pyx_n_s_vel_hess_trial_ref,&__pyx_n_s_vel_test_ref,&__pyx_n_s_vel_grad_test_ref,&__pyx_n_s_mesh_trial_trace_ref,&__pyx_n_s_mesh_grad_trial_trace_ref,&__pyx_n_s_dS_ref,&__pyx_n_s_p_trial_trace_ref,&__pyx_n_s_p_grad_trial_trace_ref,&__pyx_n_s_p_test_trace_ref,&__pyx_n_s_p_grad_test_trace_ref,&__pyx_n_s_vel_trial_trace_ref,&__pyx_n_s_vel_grad_trial_trace_ref,&__pyx_n_s_vel_test_trace_ref,&__pyx_n_s_vel_grad_test_trace_ref,&__pyx_n_s_normal_ref,&__pyx_n_s_boundaryJac_ref,&__pyx_n_s_eb_adjoint_sigma,&__pyx_n_s_elementDiameter,&__pyx_n_s_nodeDiametersArray,&__pyx_n_s_hFactor,&__pyx_n_s_nElements_global,&__pyx_n_s_nElements_owned,&__pyx_n_s_useRBLES,&__pyx_n_s_useMetrics,&__pyx_n_s_alphaBDF,&__pyx_n_s_epsFact_rho,&__pyx_n_s_epsFact_mu,&__pyx_n_s_sigma,&__pyx_n_s_rho_0,&__pyx_n_s_nu_0,&__pyx_n_s_rho_1,&__pyx_n_s_nu_1,&__pyx_n_s_smagorinskyConstant,&__pyx_n_s_turbulenceClosureModel,&__pyx_n_s_Ct_sge,&__pyx_n_s_Cd_sge,&__pyx_n_s_C_dg,&__pyx_n_s_C_b,&__pyx_n_s_eps_solid,&__pyx_n_s_phi_solid,&__pyx_n_s_q_velocity_solid,&__pyx_n_s_q_vos,&__pyx_n_s_q_dvos_dt,&__pyx_n_s_q_dragAlpha,&__pyx_n_s_q_dragBeta,&__pyx_n_s_q_mass_source,&__pyx_n_s_q_turb_var_0,&__pyx_n_s_q_turb_var_1,&__pyx_n_s_q_turb_var_grad_0,&__pyx_n_s_p_l2g,&__pyx_n_s_vel_l2g,&__pyx_n_s_p_dof,&__pyx_n_s_u_dof,&__pyx_n_s_v_dof,&__pyx_n_s_w_dof,&__pyx_n_s_g,&__pyx_n_s_useVF,&__pyx_n_s_vf,&__pyx_n_s_phi,&__pyx_n_s_normal_phi,&__pyx_n_s_kappa_phi,&__pyx_n_s_q_mom_u_acc_beta_bdf,&__pyx_n_s_q_mom_v_acc_beta_bdf,&__pyx_n_s_q_mom_w_acc_beta_bdf,&__pyx_n_s_q_dV,&__pyx_n_s_q_dV_last,&__pyx_n_s_q_velocity_sge,&__pyx_n_s_ebqe_velocity_star,&__pyx_n_s_q_cfl,&__pyx_n_s_q_numDiff_u_last,&__pyx_n_s_q_numDiff_v_last,&__pyx_n_s_q_numDiff_w_last,&__pyx_n_s_sdInfo_u_u_rowptr,&__pyx_n_s_sdInfo_u_u_colind,&__pyx_n_s_sdInfo_u_v_rowptr,&__pyx_n_s_sdInfo_u_v_colind,&__pyx_n_s_sdInfo_u_w_rowptr,&__pyx_n_s_sdInfo_u_w_colind,&__pyx_n_s_sdInfo_v_v_rowptr,&__pyx_n_s_sdInfo_v_v_colind,&__pyx_n_s_sdInfo_v_u_rowptr,&__pyx_n_s_sdInfo_v_u_colind,&__pyx_n_s_sdInfo_v_w_rowptr,&__pyx_n_s_sdInfo_v_w_colind,&__pyx_n_s_sdInfo_w_w_rowptr,&__pyx_n_s_sdInfo_w_w_colind,&__pyx_n_s_sdInfo_w_u_rowptr,&__pyx_n_s_sdInfo_w_u_colind,&__pyx_n_s_sdInfo_w_v_rowptr,&__pyx_n_s_sdInfo_w_v_colind,&__pyx_n_s_csrRowIndeces_p_p,&__pyx_n_s_csrColumnOffsets_p_p,&__pyx_n_s_csrRowIndeces_p_u,&__pyx_n_s_csrColumnOffsets_p_u,&__pyx_n_s_csrRowIndeces_p_v,&__pyx_n_s_csrColumnOffsets_p_v,&__pyx_n_s_csrRowIndeces_p_w,&__pyx_n_s_csrColumnOffsets_p_w,&__pyx_n_s_csrRowIndeces_u_p,&__pyx_n_s_csrColumnOffsets_u_p,&__pyx_n_s_csrRowIndeces_u_u,&__pyx_n_s_csrColumnOffsets_u_u,&__pyx_n_s_csrRowIndeces_u_v,&__pyx_n_s_csrColumnOffsets_u_v,&__pyx_n_s_csrRowIndeces_u_w,&__pyx_n_s_csrColumnOffsets_u_w,&__pyx_n_s_csrRowIndeces_v_p,&__pyx_n_s_csrColumnOffsets_v_p,&__pyx_n_s_csrRowIndeces_v_u,&__pyx_n_s_csrColumnOffsets_v_u,&__pyx_n_s_csrRowIndeces_v_v,&__pyx_n_s_csrColumnOffsets_v_v,&__pyx_n_s_csrRowIndeces_v_w,&__pyx_n_s_csrColumnOffsets_v_w,&__pyx_n_s_csrRowIndeces_w_p,&__pyx_n_s_csrColumnOffsets_w_p,&__pyx_n_s_csrRowIndeces_w_u,&__pyx_n_s_csrColumnOffsets_w_u,&__pyx_n_s_csrRowIndeces_w_v,&__pyx_n_s_csrColumnOffsets_w_v,&__pyx_n_s_csrRowIndeces_w_w,&__pyx_n_s_csrColumnOffsets_w_w,&__pyx_n_s_globalJacobian,&__pyx_n_s_nExteriorElementBoundaries_globa,&__pyx_n_s_exteriorElementBoundariesArray,&__pyx_n_s_elementBoundaryElementsArray,&__pyx_n_s_elementBoundaryLocalElementBound,&__pyx_n_s_ebqe_vf_ext,&__pyx_n_s_bc_ebqe_vf_ext,&__pyx_n_s_ebqe_phi_ext,&__pyx_n_s_bc_ebqe_phi_ext,&__pyx_n_s_ebqe_normal_phi_ext,&__pyx_n_s_ebqe_kappa_phi_ext,&__pyx_n_s_ebqe_vos_ext,&__pyx_n_s_ebqe_turb_var_0,&__pyx_n_s_ebqe_turb_var_1,&__pyx_n_s_isDOFBoundary_p,&__pyx_n_s_isDOFBoundary_u,&__pyx_n_s_isDOFBoundary_v,&__pyx_n_s_isDOFBoundary_w,&__pyx_n_s_isAdvectiveFluxBoundary_p,&__pyx_n_s_isAdvectiveFluxBoundary_u,&__pyx_n_s_isAdvectiveFluxBoundary_v,&__pyx_n_s_isAdvectiveFluxBoundary_w,&__pyx_n_s_isDiffusiveFluxBoundary_u,&__pyx_n_s_isDiffusiveFluxBoundary_v,&__pyx_n_s_isDiffusiveFluxBoundary_w,&__pyx_n_s_ebqe_bc_p_ext,&__pyx_n_s_ebqe_bc_flux_mass_ext,&__pyx_n_s_ebqe_bc_flux_mom_u_adv_ext,&__pyx_n_s_ebqe_bc_flux_mom_v_adv_ext,&__pyx_n_s_ebqe_bc_flux_mom_w_adv_ext,&__pyx_n_s_ebqe_bc_u_ext,&__pyx_n_s_ebqe_bc_flux_u_diff_ext,&__pyx_n_s_ebqe_penalty_ext,&__pyx_n_s_ebqe_bc_v_ext,&__pyx_n_s_ebqe_bc_flux_v_diff_ext,&__pyx_n_s_ebqe_bc_w_ext,&__pyx_n_s_ebqe_bc_flux_w_diff_ext,&__pyx_n_s_csrColumnOffsets_eb_p_p,&__pyx_n_s_csrColumnOffsets_eb_p_u,&__pyx_n_s_csrColumnOffsets_eb_p_v,&__pyx_n_s_csrColumnOffsets_eb_p_w,&__pyx_n_s_csrColumnOffsets_eb_u_p,&__pyx_n_s_csrColumnOffsets_eb_u_u,&__pyx_n_s_csrColumnOffsets_eb_u_v,&__pyx_n_s_csrColumnOffsets_eb_u_w,&__pyx_n_s_csrColumnOffsets_eb_v_p,&__pyx_n_s_csrColumnOffsets_eb_v_u,&__pyx_n_s_csrColumnOffsets_eb_v_v,&__pyx_n_s_csrColumnOffsets_eb_v_w,&__pyx_n_s_csrColumnOffsets_eb_w_p,&__pyx_n_s_csrColumnOffsets_eb_w_u,&__pyx_n_s_csrColumnOffsets_eb_w_v,&__pyx_n_s_csrColumnOffsets_eb_w_w,&__pyx_n_s_elementFlags,&__pyx_n_s_nParticles,&__pyx_n_s_particle_epsFact,&__pyx_n_s_particle_alpha,&__pyx_n_s_particle_beta,&__pyx_n_s_particle_penalty_constant,&__pyx_n_s_particle_signed_distances,&__pyx_n_s_particle_signed_distance_normals,&__pyx_n_s_particle_velocities,&__pyx_n_s_particle_centroids,&__pyx_n_s_particle_nitsche,&__pyx_n_s_KILL_PRESSURE_TERM,&__pyx_n_s_MATERIAL_PARAMETERS_AS_FUNCTION,&__pyx_n_s_density_as_function,&__pyx_n_s_dynamic_viscosity_as_function,&__pyx_n_s_ebqe_density_as_function,&__pyx_n_s_ebqe_dynamic_viscosity_as_functi,0};
    PyObject* values[210] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 210: values[209] = PyTuple_GET_ITEM(__pyx_args, 209);
        case 209: values[208] = PyTuple_GET_ITEM(__pyx_args, 208);
        case 208: values[207] = PyTuple_GET_ITEM(__pyx_args, 207);
        case 207: values[206] = PyTuple_GET_ITEM(__pyx_args, 206);
        case 206: values[205] = PyTuple_GET_ITEM(__pyx_args, 205);
        case 205: values[204] = PyTuple_GET_ITEM(__pyx_args, 204);
        case 204: values[203] = PyTuple_GET_ITEM(__pyx_args, 203);
        case 203: values[202] = PyTuple_GET_ITEM(__pyx_args, 202);
        case 202: values[201] = PyTuple_GET_ITEM(__pyx_args, 201);
        case 201: values[200] = PyTuple_GET_ITEM(__pyx_args, 200);
        case 200: values[199] = PyTuple_GET_ITEM(__pyx_args, 199);
        case 199: values[198] = PyTuple_GET_ITEM(__pyx_args, 198);
        case 198: values[197] = PyTuple_GET_ITEM(__pyx_args, 197);
        case 197: values[196] = PyTuple_GET_ITEM(__pyx_args, 196);
        case 196: values[195] = PyTuple_GET_ITEM(__pyx_args, 195);
        case 195: values[194] = PyTuple_GET_ITEM(__pyx_args, 194);
        case 194: values[193] = PyTuple_GET_ITEM(__pyx_args, 193);
        case 193: values[192] = PyTuple_GET_ITEM(__pyx_args, 192);
        case 192: values[191] = PyTuple_GET_ITEM(__pyx_args, 191);
        case 191: values[190] = PyTuple_GET_ITEM(__pyx_args, 190);
        case 190: values[189] = PyTuple_GET_ITEM(__pyx_args, 189);
        case 189: values[188] = PyTuple_GET_ITEM(__pyx_args, 188);
        case 188: values[187] = PyTuple_GET_ITEM(__pyx_args, 187);
        case 187: values[186] = PyTuple_GET_ITEM(__pyx_args, 186);
        case 186: values[185] = PyTuple_GET_ITEM(__pyx_args, 185);
        case 185: values[184] = PyTuple_GET_ITEM(__pyx_args, 184);
        case 184: values[183] = PyTuple_GET_ITEM(__pyx_args, 183);
        case 183: values[182] = PyTuple_GET_ITEM(__pyx_args, 182);
        case 182: values[181] = PyTuple_GET_ITEM(__pyx_args, 181);
        case 181: values[180] = PyTuple_GET_ITEM(__pyx_args, 180);
        case 180: values[179] = PyTuple_GET_ITEM(__pyx_args, 179);
        case 179: values[178] = PyTuple_GET_ITEM(__pyx_args, 178);
        case 178: values[177] = PyTuple_GET_ITEM(__pyx_args, 177);
        case 177: values[176] = PyTuple_GET_ITEM(__pyx_args, 176);
        case 176: values[175] = PyTuple_GET_ITEM(__pyx_args, 175);
        case 175: values[174] = PyTuple_GET_ITEM(__pyx_args, 174);
        case 174: values[173] = PyTuple_GET_ITEM(__pyx_args, 173);
        case 173: values[172] = PyTuple_GET_ITEM(__pyx_args, 172);
        case 172: values[171] = PyTuple_GET_ITEM(__pyx_args, 171);
        case 171: values[170] = PyTuple_GET_ITEM(__pyx_args, 170);
        case 170: values[169] = PyTuple_GET_ITEM(__pyx_args, 169);
        case 169: values[168] = PyTuple_GET_ITEM(__pyx_args, 168);
        case 168: values[167] = PyTuple_GET_ITEM(__pyx_args, 167);
        case 167: values[166] = PyTuple_GET_ITEM(__pyx_args, 166);
        case 166: values[165] = PyTuple_GET_ITEM(__pyx_args, 165);
        case 165: values[164] = PyTuple_GET_ITEM(__pyx_args, 164);
        case 164: values[163] = PyTuple_GET_ITEM(__pyx_args, 163);
        case 163: values[162] = PyTuple_GET_ITEM(__pyx_args, 162);
        case 162: values[161] = PyTuple_GET_ITEM(__pyx_args, 161);
        case 161: values[160] = PyTuple_GET_ITEM(__pyx_args, 160);
        case 160: values[159] = PyTuple_GET_ITEM(__pyx_args, 159);
        case 159: values[158] = PyTuple_GET_ITEM(__pyx_args, 158);
        case 158: values[157] = PyTuple_GET_ITEM(__pyx_args, 157);
        case 157: values[156] = PyTuple_GET_ITEM(__pyx_args, 156);
        case 156: values[155] = PyTuple_GET_ITEM(__pyx_args, 155);
        case 155: values[154] = PyTuple_GET_ITEM(__pyx_args, 154);
        case 154: values[153] = PyTuple_GET_ITEM(__pyx_args, 153);
        case 153: values[152] = PyTuple_GET_ITEM(__pyx_args, 152);
        case 152: values[151] = PyTuple_GET_ITEM(__pyx_args, 151);
        case 151: values[150] = PyTuple_GET_ITEM(__pyx_args, 150);
        case 150: values[149] = PyTuple_GET_ITEM(__pyx_args, 149);
        case 149: values[148] = PyTuple_GET_ITEM(__pyx_args, 148);
        case 148: values[147] = PyTuple_GET_ITEM(__pyx_args, 147);
        case 147: values[146] = PyTuple_GET_ITEM(__pyx_args, 146);
        case 146: values[145] = PyTuple_GET_ITEM(__pyx_args, 145);
        case 145: values[144] = PyTuple_GET_ITEM(__pyx_args, 144);
        case 144: values[143] = PyTuple_GET_ITEM(__pyx_args, 143);
        case 143: values[142] = PyTuple_GET_ITEM(__pyx_args, 142);
        case 142: values[141] = PyTuple_GET_ITEM(__pyx_args, 141);
        case 141: values[140] = PyTuple_GET_ITEM(__pyx_args, 140);
        case 140: values[139] = PyTuple_GET_ITEM(__pyx_args, 139);
        case 139: values[138] = PyTuple_GET_ITEM(__pyx_args, 138);
        case 138: values[137] = PyTuple_GET_ITEM(__pyx_args, 137);
        case 137: values[136] = PyTuple_GET_ITEM(__pyx_args, 136);
        case 136: values[135] = PyTuple_GET_ITEM(__pyx_args, 135);
        case 135: values[134] = PyTuple_GET_ITEM(__pyx_args, 134);
        case 134: values[133] = PyTuple_GET_ITEM(__pyx_args, 133);
        case 133: values[132] = PyTuple_GET_ITEM(__pyx_args, 132);
        case 132: values[131] = PyTuple_GET_ITEM(__pyx_args, 131);
        case 131: values[130] = PyTuple_GET_ITEM(__pyx_args, 130);
        case 130: values[129] = PyTuple_GET_ITEM(__pyx_args, 129);
        case 129: values[128] = PyTuple_GET_ITEM(__pyx_args, 128);
        case 128: values[127] = PyTuple_GET_ITEM(__pyx_args, 127);
        case 127: values[126] = PyTuple_GET_ITEM(__pyx_args, 126);
        case 126: values[125] = PyTuple_GET_ITEM(__pyx_args, 125);
        case 125: values[124] = PyTuple_GET_ITEM(__pyx_args, 124);
        case 124: values[123] = PyTuple_GET_ITEM(__pyx_args, 123);
        case 123: values[122] = PyTuple_GET_ITEM(__pyx_args, 122);
        case 122: values[121] = PyTuple_GET_ITEM(__pyx_args, 121);
        case 121: values[120] = PyTuple_GET_ITEM(__pyx_args, 120);
        case 120: values[119] = PyTuple_GET_ITEM(__pyx_args, 119);
        case 119: values[118] = PyTuple_GET_ITEM(__pyx_args, 118);
        case 118: values[117] = PyTuple_GET_ITEM(__pyx_args, 117);
        case 117: values[116] = PyTuple_GET_ITEM(__pyx_args, 116);
        case 116: values[115] = PyTuple_GET_ITEM(__pyx_args, 115);
        case 115: values[114] = PyTuple_GET_ITEM(__pyx_args, 114);
        case 114: values[113] = PyTuple_GET_ITEM(__pyx_args, 113);
        case 113: values[112] = PyTuple_GET_ITEM(__pyx_args, 112);
        case 112: values[111] = PyTuple_GET_ITEM(__pyx_args, 111);
        case 111: values[110] = PyTuple_GET_ITEM(__pyx_args, 110);
        case 110: values[109] = PyTuple_GET_ITEM(__pyx_args, 109);
        case 109: values[108] = PyTuple_GET_ITEM(__pyx_args, 108);
        case 108: values[107] = PyTuple_GET_ITEM(__pyx_args, 107);
        case 107: values[106] = PyTuple_GET_ITEM(__pyx_args, 106);
        case 106: values[105] = PyTuple_GET_ITEM(__pyx_args, 105);
        case 105: values[104] = PyTuple_GET_ITEM(__pyx_args, 104);
        case 104: values[103] = PyTuple_GET_ITEM(__pyx_args, 103);
        case 103: values[102] = PyTuple_GET_ITEM(__pyx_args, 102);
        case 102: values[101] = PyTuple_GET_ITEM(__pyx_args, 101);
        case 101: values[100] = PyTuple_GET_ITEM(__pyx_args, 100);
        case 100: values[99] = PyTuple_GET_ITEM(__pyx_args, 99);
        case 99: values[98] = PyTuple_GET_ITEM(__pyx_args, 98);
        case 98: values[97] = PyTuple_GET_ITEM(__pyx_args, 97);
        case 97: values[96] = PyTuple_GET_ITEM(__pyx_args, 96);
        case 96: values[95] = PyTuple_GET_ITEM(__pyx_args, 95);
        case 95: values[94] = PyTuple_GET_ITEM(__pyx_args, 94);
        case 94: values[93] = PyTuple_GET_ITEM(__pyx_args, 93);
        case 93: values[92] = PyTuple_GET_ITEM(__pyx_args, 92);
        case 92: values[91] = PyTuple_GET_ITEM(__pyx_args, 91);
        case 91: values[90] = PyTuple_GET_ITEM(__pyx_args, 90);
        case 90: values[89] = PyTuple_GET_ITEM(__pyx_args, 89);
        case 89: values[88] = PyTuple_GET_ITEM(__pyx_args, 88);
        case 88: values[87] = PyTuple_GET_ITEM(__pyx_args, 87);
        case 87: values[86] = PyTuple_GET_ITEM(__pyx_args, 86);
        case 86: values[85] = PyTuple_GET_ITEM(__pyx_args, 85);
        case 85: values[84] = PyTuple_GET_ITEM(__pyx_args, 84);
        case 84: values[83] = PyTuple_GET_ITEM(__pyx_args, 83);
        case 83: values[82] = PyTuple_GET_ITEM(__pyx_args, 82);
        case 82: values[81] = PyTuple_GET_ITEM(__pyx_args, 81);
        case 81: values[80] = PyTuple_GET_ITEM(__pyx_args, 80);
        case 80: values[79] = PyTuple_GET_ITEM(__pyx_args, 79);
        case 79: values[78] = PyTuple_GET_ITEM(__pyx_args, 78);
        case 78: values[77] = PyTuple_GET_ITEM(__pyx_args, 77);
        case 77: values[76] = PyTuple_GET_ITEM(__pyx_args, 76);
        case 76: values[75] = PyTuple_GET_ITEM(__pyx_args, 75);
        case 75: values[74] = PyTuple_GET_ITEM(__pyx_args, 74);
        case 74: values[73] = PyTuple_GET_ITEM(__pyx_args, 73);
        case 73: values[72] = PyTuple_GET_ITEM(__pyx_args, 72);
        case 72: values[71] = PyTuple_GET_ITEM(__pyx_args, 71);
        case 71: values[70] = PyTuple_GET_ITEM(__pyx_args, 70);
        case 70: values[69] = PyTuple_GET_ITEM(__pyx_args, 69);
        case 69: values[68] = PyTuple_GET_ITEM(__pyx_args, 68);
        case 68: values[67] = PyTuple_GET_ITEM(__pyx_args, 67);
        case 67: values[66] = PyTuple_GET_ITEM(__pyx_args, 66);
        case 66: values[65] = PyTuple_GET_ITEM(__pyx_args, 65);
        case 65: values[64] = PyTuple_GET_ITEM(__pyx_args, 64);
        case 64: values[63] = PyTuple_GET_ITEM(__pyx_args, 63);
        case 63: values[62] = PyTuple_GET_ITEM(__pyx_args, 62);
        case 62: values[61] = PyTuple_GET_ITEM(__pyx_args, 61);
        case 61: values[60] = PyTuple_GET_ITEM(__pyx_args, 60);
        case 60: values[59] = PyTuple_GET_ITEM(__pyx_args, 59);
        case 59: values[58] = PyTuple_GET_ITEM(__pyx_args, 58);
        case 58: values[57] = PyTuple_GET_ITEM(__pyx_args, 57);
        case 57: values[56] = PyTuple_GET_ITEM(__pyx_args, 56);
        case 56: values[55] = PyTuple_GET_ITEM(__pyx_args, 55);
        case 55: values[54] = PyTuple_GET_ITEM(__pyx_args, 54);
        case 54: values[53] = PyTuple_GET_ITEM(__pyx_args, 53);
        case 53: values[52] = PyTuple_GET_ITEM(__pyx_args, 52);
        case 52: values[51] = PyTuple_GET_ITEM(__pyx_args, 51);
        case 51: values[50] = PyTuple_GET_ITEM(__pyx_args, 50);
        case 50: values[49] = PyTuple_GET_ITEM(__pyx_args, 49);
        case 49: values[48] = PyTuple_GET_ITEM(__pyx_args, 48);
        case 48: values[47] = PyTuple_GET_ITEM(__pyx_args, 47);
        case 47: values[46] = PyTuple_GET_ITEM(__pyx_args, 46);
        case 46: values[45] = PyTuple_GET_ITEM(__pyx_args, 45);
        case 45: values[44] = PyTuple_GET_ITEM(__pyx_args, 44);
        case 44: values[43] = PyTuple_GET_ITEM(__pyx_args, 43);
        case 43: values[42] = PyTuple_GET_ITEM(__pyx_args, 42);
        case 42: values[41] = PyTuple_GET_ITEM(__pyx_args, 41);
        case 41: values[40] = PyTuple_GET_ITEM(__pyx_args, 40);
        case 40: values[39] = PyTuple_GET_ITEM(__pyx_args, 39);
        case 39: values[38] = PyTuple_GET_ITEM(__pyx_args, 38);
        case 38: values[37] = PyTuple_GET_ITEM(__pyx_args, 37);
        case 37: values[36] = PyTuple_GET_ITEM(__pyx_args, 36);
        case 36: values[35] = PyTuple_GET_ITEM(__pyx_args, 35);
        case 35: values[34] = PyTuple_GET_ITEM(__pyx_args, 34);
        case 34: values[33] = PyTuple_GET_ITEM(__pyx_args, 33);
        case 33: values[32] = PyTuple_GET_ITEM(__pyx_args, 32);
        case 32: values[31] = PyTuple_GET_ITEM(__pyx_args, 31);
        case 31: values[30] = PyTuple_GET_ITEM(__pyx_args, 30);
        case 30: values[29] = PyTuple_GET_ITEM(__pyx_args, 29);
        case 29: values[28] = PyTuple_GET_ITEM(__pyx_args, 28);
        case 28: values[27] = PyTuple_GET_ITEM(__pyx_args, 27);
        case 27: values[26] = PyTuple_GET_ITEM(__pyx_args, 26);
        case 26: values[25] = PyTuple_GET_ITEM(__pyx_args, 25);
        case 25: values[24] = PyTuple_GET_ITEM(__pyx_args, 24);
        case 24: values[23] = PyTuple_GET_ITEM(__pyx_args, 23);
        case 23: values[22] = PyTuple_GET_ITEM(__pyx_args, 22);
        case 22: values[21] = PyTuple_GET_ITEM(__pyx_args, 21);
        case 21: values[20] = PyTuple_GET_ITEM(__pyx_args, 20);
        case 20: values[19] = PyTuple_GET_ITEM(__pyx_args, 19);
        case 19: values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
        case 18: values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
        case 17: values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_trial_ref)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_grad_trial_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 1); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 2); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_velocity_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 3); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_MOVING_DOMAIN)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 4); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_PSTAB)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 5); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_l2g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 6); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case  7:
        if (likely((values[7] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dV_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 7); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case  8:
        if (likely((values[8] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_trial_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 8); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case  9:
        if (likely((values[9] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_grad_trial_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 9); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 10:
        if (likely((values[10] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_test_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 10); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 11:
        if (likely((values[11] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_grad_test_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 11); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 12:
        if (likely((values[12] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 12); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 13:
        if (likely((values[13] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_grad_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 13); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 14:
        if (likely((values[14] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 14); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 15:
        if (likely((values[15] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_grad_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 15); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 16:
        if (likely((values[16] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_trial_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 16); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 17:
        if (likely((values[17] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_grad_trial_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 17); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 18:
        if (likely((values[18] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_hess_trial_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 18); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 19:
        if (likely((values[19] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_test_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 19); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 20:
        if (likely((values[20] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_grad_test_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 20); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 21:
        if (likely((values[21] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 21); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 22:
        if (likely((values[22] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_grad_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 22); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 23:
        if (likely((values[23] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dS_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 23); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 24:
        if (likely((values[24] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 24); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 25:
        if (likely((values[25] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_grad_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 25); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 26:
        if (likely((values[26] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_test_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 26); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 27:
        if (likely((values[27] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_grad_test_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 27); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 28:
        if (likely((values[28] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 28); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 29:
        if (likely((values[29] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_grad_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 29); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 30:
        if (likely((values[30] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_test_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 30); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 31:
        if (likely((values[31] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_grad_test_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 31); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 32:
        if (likely((values[32] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_normal_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 32); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 33:
        if (likely((values[33] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_boundaryJac_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 33); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 34:
        if (likely((values[34] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_eb_adjoint_sigma)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 34); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 35:
        if (likely((values[35] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_elementDiameter)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 35); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 36:
        if (likely((values[36] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nodeDiametersArray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 36); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 37:
        if (likely((values[37] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_hFactor)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 37); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 38:
        if (likely((values[38] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nElements_global)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 38); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 39:
        if (likely((values[39] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nElements_owned)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 39); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 40:
        if (likely((values[40] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_useRBLES)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 40); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 41:
        if (likely((values[41] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_useMetrics)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 41); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 42:
        if (likely((values[42] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_alphaBDF)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 42); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 43:
        if (likely((values[43] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_epsFact_rho)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 43); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 44:
        if (likely((values[44] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_epsFact_mu)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 44); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 45:
        if (likely((values[45] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sigma)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 45); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 46:
        if (likely((values[46] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rho_0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 46); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 47:
        if (likely((values[47] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nu_0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 47); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 48:
        if (likely((values[48] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rho_1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 48); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 49:
        if (likely((values[49] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nu_1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 49); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 50:
        if (likely((values[50] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_smagorinskyConstant)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 50); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 51:
        if (likely((values[51] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_turbulenceClosureModel)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 51); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 52:
        if (likely((values[52] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Ct_sge)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 52); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 53:
        if (likely((values[53] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Cd_sge)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 53); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 54:
        if (likely((values[54] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_C_dg)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 54); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 55:
        if (likely((values[55] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_C_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 55); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 56:
        if (likely((values[56] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_eps_solid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 56); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 57:
        if (likely((values[57] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_phi_solid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 57); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 58:
        if (likely((values[58] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_velocity_solid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 58); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 59:
        if (likely((values[59] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_vos)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 59); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 60:
        if (likely((values[60] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_dvos_dt)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 60); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 61:
        if (likely((values[61] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_dragAlpha)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 61); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 62:
        if (likely((values[62] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_dragBeta)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 62); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 63:
        if (likely((values[63] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_mass_source)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 63); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 64:
        if (likely((values[64] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_turb_var_0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 64); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 65:
        if (likely((values[65] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_turb_var_1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 65); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 66:
        if (likely((values[66] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_turb_var_grad_0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 66); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 67:
        if (likely((values[67] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_l2g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 67); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 68:
        if (likely((values[68] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_l2g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 68); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 69:
        if (likely((values[69] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 69); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 70:
        if (likely((values[70] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_u_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 70); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 71:
        if (likely((values[71] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_v_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 71); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 72:
        if (likely((values[72] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_w_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 72); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 73:
        if (likely((values[73] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 73); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 74:
        if (likely((values[74] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_useVF)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 74); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 75:
        if (likely((values[75] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vf)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 75); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 76:
        if (likely((values[76] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_phi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 76); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 77:
        if (likely((values[77] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_normal_phi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 77); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 78:
        if (likely((values[78] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_kappa_phi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 78); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 79:
        if (likely((values[79] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_mom_u_acc_beta_bdf)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 79); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 80:
        if (likely((values[80] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_mom_v_acc_beta_bdf)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 80); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 81:
        if (likely((values[81] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_mom_w_acc_beta_bdf)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 81); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 82:
        if (likely((values[82] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_dV)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 82); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 83:
        if (likely((values[83] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_dV_last)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 83); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 84:
        if (likely((values[84] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_velocity_sge)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 84); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 85:
        if (likely((values[85] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_velocity_star)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 85); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 86:
        if (likely((values[86] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_cfl)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 86); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 87:
        if (likely((values[87] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_numDiff_u_last)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 87); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 88:
        if (likely((values[88] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_numDiff_v_last)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 88); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 89:
        if (likely((values[89] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_numDiff_w_last)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 89); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 90:
        if (likely((values[90] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_u_u_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 90); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 91:
        if (likely((values[91] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_u_u_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 91); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 92:
        if (likely((values[92] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_u_v_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 92); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 93:
        if (likely((values[93] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_u_v_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 93); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 94:
        if (likely((values[94] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_u_w_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 94); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 95:
        if (likely((values[95] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_u_w_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 95); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 96:
        if (likely((values[96] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_v_v_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 96); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 97:
        if (likely((values[97] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_v_v_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 97); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 98:
        if (likely((values[98] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_v_u_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 98); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 99:
        if (likely((values[99] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_v_u_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 99); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 100:
        if (likely((values[100] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_v_w_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 100); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 101:
        if (likely((values[101] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_v_w_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 101); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 102:
        if (likely((values[102] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_w_w_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 102); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 103:
        if (likely((values[103] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_w_w_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 103); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 104:
        if (likely((values[104] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_w_u_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 104); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 105:
        if (likely((values[105] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_w_u_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 105); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 106:
        if (likely((values[106] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_w_v_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 106); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 107:
        if (likely((values[107] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_w_v_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 107); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 108:
        if (likely((values[108] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_p_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 108); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 109:
        if (likely((values[109] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_p_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 109); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 110:
        if (likely((values[110] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_p_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 110); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 111:
        if (likely((values[111] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_p_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 111); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 112:
        if (likely((values[112] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_p_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 112); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 113:
        if (likely((values[113] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_p_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 113); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 114:
        if (likely((values[114] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_p_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 114); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 115:
        if (likely((values[115] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_p_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 115); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 116:
        if (likely((values[116] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_u_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 116); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 117:
        if (likely((values[117] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_u_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 117); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 118:
        if (likely((values[118] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_u_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 118); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 119:
        if (likely((values[119] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_u_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 119); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 120:
        if (likely((values[120] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_u_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 120); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 121:
        if (likely((values[121] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_u_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 121); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 122:
        if (likely((values[122] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_u_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 122); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 123:
        if (likely((values[123] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_u_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 123); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 124:
        if (likely((values[124] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_v_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 124); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 125:
        if (likely((values[125] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_v_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 125); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 126:
        if (likely((values[126] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_v_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 126); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 127:
        if (likely((values[127] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_v_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 127); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 128:
        if (likely((values[128] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_v_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 128); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 129:
        if (likely((values[129] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_v_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 129); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 130:
        if (likely((values[130] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_v_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 130); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 131:
        if (likely((values[131] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_v_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 131); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 132:
        if (likely((values[132] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_w_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 132); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 133:
        if (likely((values[133] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_w_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 133); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 134:
        if (likely((values[134] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_w_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 134); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 135:
        if (likely((values[135] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_w_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 135); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 136:
        if (likely((values[136] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_w_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 136); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 137:
        if (likely((values[137] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_w_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 137); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 138:
        if (likely((values[138] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_w_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 138); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 139:
        if (likely((values[139] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_w_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 139); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 140:
        if (likely((values[140] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_globalJacobian)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 140); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 141:
        if (likely((values[141] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nExteriorElementBoundaries_globa)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 141); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 142:
        if (likely((values[142] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_exteriorElementBoundariesArray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 142); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 143:
        if (likely((values[143] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_elementBoundaryElementsArray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 143); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 144:
        if (likely((values[144] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_elementBoundaryLocalElementBound)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 144); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 145:
        if (likely((values[145] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_vf_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 145); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 146:
        if (likely((values[146] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bc_ebqe_vf_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 146); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 147:
        if (likely((values[147] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_phi_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 147); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 148:
        if (likely((values[148] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bc_ebqe_phi_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 148); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 149:
        if (likely((values[149] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_normal_phi_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 149); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 150:
        if (likely((values[150] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_kappa_phi_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 150); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 151:
        if (likely((values[151] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_vos_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 151); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 152:
        if (likely((values[152] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_turb_var_0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 152); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 153:
        if (likely((values[153] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_turb_var_1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 153); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 154:
        if (likely((values[154] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isDOFBoundary_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 154); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 155:
        if (likely((values[155] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isDOFBoundary_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 155); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 156:
        if (likely((values[156] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isDOFBoundary_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 156); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 157:
        if (likely((values[157] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isDOFBoundary_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 157); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 158:
        if (likely((values[158] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isAdvectiveFluxBoundary_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 158); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 159:
        if (likely((values[159] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isAdvectiveFluxBoundary_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 159); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 160:
        if (likely((values[160] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isAdvectiveFluxBoundary_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 160); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 161:
        if (likely((values[161] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isAdvectiveFluxBoundary_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 161); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 162:
        if (likely((values[162] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isDiffusiveFluxBoundary_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 162); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 163:
        if (likely((values[163] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isDiffusiveFluxBoundary_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 163); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 164:
        if (likely((values[164] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isDiffusiveFluxBoundary_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 164); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 165:
        if (likely((values[165] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_p_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 165); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 166:
        if (likely((values[166] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_flux_mass_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 166); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 167:
        if (likely((values[167] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_flux_mom_u_adv_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 167); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 168:
        if (likely((values[168] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_flux_mom_v_adv_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 168); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 169:
        if (likely((values[169] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_flux_mom_w_adv_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 169); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 170:
        if (likely((values[170] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_u_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 170); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 171:
        if (likely((values[171] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_flux_u_diff_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 171); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 172:
        if (likely((values[172] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_penalty_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 172); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 173:
        if (likely((values[173] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_v_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 173); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 174:
        if (likely((values[174] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_flux_v_diff_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 174); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 175:
        if (likely((values[175] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_w_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 175); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 176:
        if (likely((values[176] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_flux_w_diff_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 176); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 177:
        if (likely((values[177] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_p_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 177); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 178:
        if (likely((values[178] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_p_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 178); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 179:
        if (likely((values[179] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_p_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 179); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 180:
        if (likely((values[180] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_p_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 180); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 181:
        if (likely((values[181] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_u_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 181); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 182:
        if (likely((values[182] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_u_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 182); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 183:
        if (likely((values[183] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_u_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 183); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 184:
        if (likely((values[184] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_u_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 184); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 185:
        if (likely((values[185] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_v_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 185); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 186:
        if (likely((values[186] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_v_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 186); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 187:
        if (likely((values[187] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_v_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 187); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 188:
        if (likely((values[188] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_v_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 188); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 189:
        if (likely((values[189] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_w_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 189); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 190:
        if (likely((values[190] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_w_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 190); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 191:
        if (likely((values[191] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_w_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 191); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 192:
        if (likely((values[192] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_w_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 192); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 193:
        if (likely((values[193] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_elementFlags)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 193); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 194:
        if (likely((values[194] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nParticles)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 194); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 195:
        if (likely((values[195] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_epsFact)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 195); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 196:
        if (likely((values[196] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_alpha)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 196); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 197:
        if (likely((values[197] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_beta)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 197); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 198:
        if (likely((values[198] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_penalty_constant)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 198); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 199:
        if (likely((values[199] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_signed_distances)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 199); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 200:
        if (likely((values[200] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_signed_distance_normals)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 200); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 201:
        if (likely((values[201] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_velocities)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 201); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 202:
        if (likely((values[202] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_centroids)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 202); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 203:
        if (likely((values[203] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_nitsche)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 203); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 204:
        if (likely((values[204] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_KILL_PRESSURE_TERM)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 204); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 205:
        if (likely((values[205] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_MATERIAL_PARAMETERS_AS_FUNCTION)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 205); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 206:
        if (likely((values[206] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_density_as_function)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 206); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 207:
        if (likely((values[207] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dynamic_viscosity_as_function)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 207); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 208:
        if (likely((values[208] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_density_as_function)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 208); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
        case 209:
        if (likely((values[209] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_dynamic_viscosity_as_functi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 209); __PYX_ERR(0, 2175, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calculateJacobian_entropy_viscosity") < 0)) __PYX_ERR(0, 2175, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 210) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
      values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
      values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
      values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
      values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
      values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
      values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
      values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
      values[19] = PyTuple_GET_ITEM(__pyx_args, 19);
      values[20] = PyTuple_GET_ITEM(__pyx_args, 20);
      values[21] = PyTuple_GET_ITEM(__pyx_args, 21);
      values[22] = PyTuple_GET_ITEM(__pyx_args, 22);
      values[23] = PyTuple_GET_ITEM(__pyx_args, 23);
      values[24] = PyTuple_GET_ITEM(__pyx_args, 24);
      values[25] = PyTuple_GET_ITEM(__pyx_args, 25);
      values[26] = PyTuple_GET_ITEM(__pyx_args, 26);
      values[27] = PyTuple_GET_ITEM(__pyx_args, 27);
      values[28] = PyTuple_GET_ITEM(__pyx_args, 28);
      values[29] = PyTuple_GET_ITEM(__pyx_args, 29);
      values[30] = PyTuple_GET_ITEM(__pyx_args, 30);
      values[31] = PyTuple_GET_ITEM(__pyx_args, 31);
      values[32] = PyTuple_GET_ITEM(__pyx_args, 32);
      values[33] = PyTuple_GET_ITEM(__pyx_args, 33);
      values[34] = PyTuple_GET_ITEM(__pyx_args, 34);
      values[35] = PyTuple_GET_ITEM(__pyx_args, 35);
      values[36] = PyTuple_GET_ITEM(__pyx_args, 36);
      values[37] = PyTuple_GET_ITEM(__pyx_args, 37);
      values[38] = PyTuple_GET_ITEM(__pyx_args, 38);
      values[39] = PyTuple_GET_ITEM(__pyx_args, 39);
      values[40] = PyTuple_GET_ITEM(__pyx_args, 40);
      values[41] = PyTuple_GET_ITEM(__pyx_args, 41);
      values[42] = PyTuple_GET_ITEM(__pyx_args, 42);
      values[43] = PyTuple_GET_ITEM(__pyx_args, 43);
      values[44] = PyTuple_GET_ITEM(__pyx_args, 44);
      values[45] = PyTuple_GET_ITEM(__pyx_args, 45);
      values[46] = PyTuple_GET_ITEM(__pyx_args, 46);
      values[47] = PyTuple_GET_ITEM(__pyx_args, 47);
      values[48] = PyTuple_GET_ITEM(__pyx_args, 48);
      values[49] = PyTuple_GET_ITEM(__pyx_args, 49);
      values[50] = PyTuple_GET_ITEM(__pyx_args, 50);
      values[51] = PyTuple_GET_ITEM(__pyx_args, 51);
      values[52] = PyTuple_GET_ITEM(__pyx_args, 52);
      values[53] = PyTuple_GET_ITEM(__pyx_args, 53);
      values[54] = PyTuple_GET_ITEM(__pyx_args, 54);
      values[55] = PyTuple_GET_ITEM(__pyx_args, 55);
      values[56] = PyTuple_GET_ITEM(__pyx_args, 56);
      values[57] = PyTuple_GET_ITEM(__pyx_args, 57);
      values[58] = PyTuple_GET_ITEM(__pyx_args, 58);
      values[59] = PyTuple_GET_ITEM(__pyx_args, 59);
      values[60] = PyTuple_GET_ITEM(__pyx_args, 60);
      values[61] = PyTuple_GET_ITEM(__pyx_args, 61);
      values[62] = PyTuple_GET_ITEM(__pyx_args, 62);
      values[63] = PyTuple_GET_ITEM(__pyx_args, 63);
      values[64] = PyTuple_GET_ITEM(__pyx_args, 64);
      values[65] = PyTuple_GET_ITEM(__pyx_args, 65);
      values[66] = PyTuple_GET_ITEM(__pyx_args, 66);
      values[67] = PyTuple_GET_ITEM(__pyx_args, 67);
      values[68] = PyTuple_GET_ITEM(__pyx_args, 68);
      values[69] = PyTuple_GET_ITEM(__pyx_args, 69);
      values[70] = PyTuple_GET_ITEM(__pyx_args, 70);
      values[71] = PyTuple_GET_ITEM(__pyx_args, 71);
      values[72] = PyTuple_GET_ITEM(__pyx_args, 72);
      values[73] = PyTuple_GET_ITEM(__pyx_args, 73);
      values[74] = PyTuple_GET_ITEM(__pyx_args, 74);
      values[75] = PyTuple_GET_ITEM(__pyx_args, 75);
      values[76] = PyTuple_GET_ITEM(__pyx_args, 76);
      values[77] = PyTuple_GET_ITEM(__pyx_args, 77);
      values[78] = PyTuple_GET_ITEM(__pyx_args, 78);
      values[79] = PyTuple_GET_ITEM(__pyx_args, 79);
      values[80] = PyTuple_GET_ITEM(__pyx_args, 80);
      values[81] = PyTuple_GET_ITEM(__pyx_args, 81);
      values[82] = PyTuple_GET_ITEM(__pyx_args, 82);
      values[83] = PyTuple_GET_ITEM(__pyx_args, 83);
      values[84] = PyTuple_GET_ITEM(__pyx_args, 84);
      values[85] = PyTuple_GET_ITEM(__pyx_args, 85);
      values[86] = PyTuple_GET_ITEM(__pyx_args, 86);
      values[87] = PyTuple_GET_ITEM(__pyx_args, 87);
      values[88] = PyTuple_GET_ITEM(__pyx_args, 88);
      values[89] = PyTuple_GET_ITEM(__pyx_args, 89);
      values[90] = PyTuple_GET_ITEM(__pyx_args, 90);
      values[91] = PyTuple_GET_ITEM(__pyx_args, 91);
      values[92] = PyTuple_GET_ITEM(__pyx_args, 92);
      values[93] = PyTuple_GET_ITEM(__pyx_args, 93);
      values[94] = PyTuple_GET_ITEM(__pyx_args, 94);
      values[95] = PyTuple_GET_ITEM(__pyx_args, 95);
      values[96] = PyTuple_GET_ITEM(__pyx_args, 96);
      values[97] = PyTuple_GET_ITEM(__pyx_args, 97);
      values[98] = PyTuple_GET_ITEM(__pyx_args, 98);
      values[99] = PyTuple_GET_ITEM(__pyx_args, 99);
      values[100] = PyTuple_GET_ITEM(__pyx_args, 100);
      values[101] = PyTuple_GET_ITEM(__pyx_args, 101);
      values[102] = PyTuple_GET_ITEM(__pyx_args, 102);
      values[103] = PyTuple_GET_ITEM(__pyx_args, 103);
      values[104] = PyTuple_GET_ITEM(__pyx_args, 104);
      values[105] = PyTuple_GET_ITEM(__pyx_args, 105);
      values[106] = PyTuple_GET_ITEM(__pyx_args, 106);
      values[107] = PyTuple_GET_ITEM(__pyx_args, 107);
      values[108] = PyTuple_GET_ITEM(__pyx_args, 108);
      values[109] = PyTuple_GET_ITEM(__pyx_args, 109);
      values[110] = PyTuple_GET_ITEM(__pyx_args, 110);
      values[111] = PyTuple_GET_ITEM(__pyx_args, 111);
      values[112] = PyTuple_GET_ITEM(__pyx_args, 112);
      values[113] = PyTuple_GET_ITEM(__pyx_args, 113);
      values[114] = PyTuple_GET_ITEM(__pyx_args, 114);
      values[115] = PyTuple_GET_ITEM(__pyx_args, 115);
      values[116] = PyTuple_GET_ITEM(__pyx_args, 116);
      values[117] = PyTuple_GET_ITEM(__pyx_args, 117);
      values[118] = PyTuple_GET_ITEM(__pyx_args, 118);
      values[119] = PyTuple_GET_ITEM(__pyx_args, 119);
      values[120] = PyTuple_GET_ITEM(__pyx_args, 120);
      values[121] = PyTuple_GET_ITEM(__pyx_args, 121);
      values[122] = PyTuple_GET_ITEM(__pyx_args, 122);
      values[123] = PyTuple_GET_ITEM(__pyx_args, 123);
      values[124] = PyTuple_GET_ITEM(__pyx_args, 124);
      values[125] = PyTuple_GET_ITEM(__pyx_args, 125);
      values[126] = PyTuple_GET_ITEM(__pyx_args, 126);
      values[127] = PyTuple_GET_ITEM(__pyx_args, 127);
      values[128] = PyTuple_GET_ITEM(__pyx_args, 128);
      values[129] = PyTuple_GET_ITEM(__pyx_args, 129);
      values[130] = PyTuple_GET_ITEM(__pyx_args, 130);
      values[131] = PyTuple_GET_ITEM(__pyx_args, 131);
      values[132] = PyTuple_GET_ITEM(__pyx_args, 132);
      values[133] = PyTuple_GET_ITEM(__pyx_args, 133);
      values[134] = PyTuple_GET_ITEM(__pyx_args, 134);
      values[135] = PyTuple_GET_ITEM(__pyx_args, 135);
      values[136] = PyTuple_GET_ITEM(__pyx_args, 136);
      values[137] = PyTuple_GET_ITEM(__pyx_args, 137);
      values[138] = PyTuple_GET_ITEM(__pyx_args, 138);
      values[139] = PyTuple_GET_ITEM(__pyx_args, 139);
      values[140] = PyTuple_GET_ITEM(__pyx_args, 140);
      values[141] = PyTuple_GET_ITEM(__pyx_args, 141);
      values[142] = PyTuple_GET_ITEM(__pyx_args, 142);
      values[143] = PyTuple_GET_ITEM(__pyx_args, 143);
      values[144] = PyTuple_GET_ITEM(__pyx_args, 144);
      values[145] = PyTuple_GET_ITEM(__pyx_args, 145);
      values[146] = PyTuple_GET_ITEM(__pyx_args, 146);
      values[147] = PyTuple_GET_ITEM(__pyx_args, 147);
      values[148] = PyTuple_GET_ITEM(__pyx_args, 148);
      values[149] = PyTuple_GET_ITEM(__pyx_args, 149);
      values[150] = PyTuple_GET_ITEM(__pyx_args, 150);
      values[151] = PyTuple_GET_ITEM(__pyx_args, 151);
      values[152] = PyTuple_GET_ITEM(__pyx_args, 152);
      values[153] = PyTuple_GET_ITEM(__pyx_args, 153);
      values[154] = PyTuple_GET_ITEM(__pyx_args, 154);
      values[155] = PyTuple_GET_ITEM(__pyx_args, 155);
      values[156] = PyTuple_GET_ITEM(__pyx_args, 156);
      values[157] = PyTuple_GET_ITEM(__pyx_args, 157);
      values[158] = PyTuple_GET_ITEM(__pyx_args, 158);
      values[159] = PyTuple_GET_ITEM(__pyx_args, 159);
      values[160] = PyTuple_GET_ITEM(__pyx_args, 160);
      values[161] = PyTuple_GET_ITEM(__pyx_args, 161);
      values[162] = PyTuple_GET_ITEM(__pyx_args, 162);
      values[163] = PyTuple_GET_ITEM(__pyx_args, 163);
      values[164] = PyTuple_GET_ITEM(__pyx_args, 164);
      values[165] = PyTuple_GET_ITEM(__pyx_args, 165);
      values[166] = PyTuple_GET_ITEM(__pyx_args, 166);
      values[167] = PyTuple_GET_ITEM(__pyx_args, 167);
      values[168] = PyTuple_GET_ITEM(__pyx_args, 168);
      values[169] = PyTuple_GET_ITEM(__pyx_args, 169);
      values[170] = PyTuple_GET_ITEM(__pyx_args, 170);
      values[171] = PyTuple_GET_ITEM(__pyx_args, 171);
      values[172] = PyTuple_GET_ITEM(__pyx_args, 172);
      values[173] = PyTuple_GET_ITEM(__pyx_args, 173);
      values[174] = PyTuple_GET_ITEM(__pyx_args, 174);
      values[175] = PyTuple_GET_ITEM(__pyx_args, 175);
      values[176] = PyTuple_GET_ITEM(__pyx_args, 176);
      values[177] = PyTuple_GET_ITEM(__pyx_args, 177);
      values[178] = PyTuple_GET_ITEM(__pyx_args, 178);
      values[179] = PyTuple_GET_ITEM(__pyx_args, 179);
      values[180] = PyTuple_GET_ITEM(__pyx_args, 180);
      values[181] = PyTuple_GET_ITEM(__pyx_args, 181);
      values[182] = PyTuple_GET_ITEM(__pyx_args, 182);
      values[183] = PyTuple_GET_ITEM(__pyx_args, 183);
      values[184] = PyTuple_GET_ITEM(__pyx_args, 184);
      values[185] = PyTuple_GET_ITEM(__pyx_args, 185);
      values[186] = PyTuple_GET_ITEM(__pyx_args, 186);
      values[187] = PyTuple_GET_ITEM(__pyx_args, 187);
      values[188] = PyTuple_GET_ITEM(__pyx_args, 188);
      values[189] = PyTuple_GET_ITEM(__pyx_args, 189);
      values[190] = PyTuple_GET_ITEM(__pyx_args, 190);
      values[191] = PyTuple_GET_ITEM(__pyx_args, 191);
      values[192] = PyTuple_GET_ITEM(__pyx_args, 192);
      values[193] = PyTuple_GET_ITEM(__pyx_args, 193);
      values[194] = PyTuple_GET_ITEM(__pyx_args, 194);
      values[195] = PyTuple_GET_ITEM(__pyx_args, 195);
      values[196] = PyTuple_GET_ITEM(__pyx_args, 196);
      values[197] = PyTuple_GET_ITEM(__pyx_args, 197);
      values[198] = PyTuple_GET_ITEM(__pyx_args, 198);
      values[199] = PyTuple_GET_ITEM(__pyx_args, 199);
      values[200] = PyTuple_GET_ITEM(__pyx_args, 200);
      values[201] = PyTuple_GET_ITEM(__pyx_args, 201);
      values[202] = PyTuple_GET_ITEM(__pyx_args, 202);
      values[203] = PyTuple_GET_ITEM(__pyx_args, 203);
      values[204] = PyTuple_GET_ITEM(__pyx_args, 204);
      values[205] = PyTuple_GET_ITEM(__pyx_args, 205);
      values[206] = PyTuple_GET_ITEM(__pyx_args, 206);
      values[207] = PyTuple_GET_ITEM(__pyx_args, 207);
      values[208] = PyTuple_GET_ITEM(__pyx_args, 208);
      values[209] = PyTuple_GET_ITEM(__pyx_args, 209);
    }
    __pyx_v_mesh_trial_ref = ((PyArrayObject *)values[0]);
    __pyx_v_mesh_grad_trial_ref = ((PyArrayObject *)values[1]);
    __pyx_v_mesh_dof = ((PyArrayObject *)values[2]);
    __pyx_v_mesh_velocity_dof = ((PyArrayObject *)values[3]);
    __pyx_v_MOVING_DOMAIN = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_MOVING_DOMAIN == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2180, __pyx_L3_error)
    __pyx_v_PSTAB = __pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_PSTAB == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2181, __pyx_L3_error)
    __pyx_v_mesh_l2g = ((PyArrayObject *)values[6]);
    __pyx_v_dV_ref = ((PyArrayObject *)values[7]);
    __pyx_v_p_trial_ref = ((PyArrayObject *)values[8]);
    __pyx_v_p_grad_trial_ref = ((PyArrayObject *)values[9]);
    __pyx_v_p_test_ref = ((PyArrayObject *)values[10]);
    __pyx_v_p_grad_test_ref = ((PyArrayObject *)values[11]);
    __pyx_v_q_p = ((PyArrayObject *)values[12]);
    __pyx_v_q_grad_p = ((PyArrayObject *)values[13]);
    __pyx_v_ebqe_p = ((PyArrayObject *)values[14]);
    __pyx_v_ebqe_grad_p = ((PyArrayObject *)values[15]);
    __pyx_v_vel_trial_ref = ((PyArrayObject *)values[16]);
    __pyx_v_vel_grad_trial_ref = ((PyArrayObject *)values[17]);
    __pyx_v_vel_hess_trial_ref = ((PyArrayObject *)values[18]);
    __pyx_v_vel_test_ref = ((PyArrayObject *)values[19]);
    __pyx_v_vel_grad_test_ref = ((PyArrayObject *)values[20]);
    __pyx_v_mesh_trial_trace_ref = ((PyArrayObject *)values[21]);
    __pyx_v_mesh_grad_trial_trace_ref = ((PyArrayObject *)values[22]);
    __pyx_v_dS_ref = ((PyArrayObject *)values[23]);
    __pyx_v_p_trial_trace_ref = ((PyArrayObject *)values[24]);
    __pyx_v_p_grad_trial_trace_ref = ((PyArrayObject *)values[25]);
    __pyx_v_p_test_trace_ref = ((PyArrayObject *)values[26]);
    __pyx_v_p_grad_test_trace_ref = ((PyArrayObject *)values[27]);
    __pyx_v_vel_trial_trace_ref = ((PyArrayObject *)values[28]);
    __pyx_v_vel_grad_trial_trace_ref = ((PyArrayObject *)values[29]);
    __pyx_v_vel_test_trace_ref = ((PyArrayObject *)values[30]);
    __pyx_v_vel_grad_test_trace_ref = ((PyArrayObject *)values[31]);
    __pyx_v_normal_ref = ((PyArrayObject *)values[32]);
    __pyx_v_boundaryJac_ref = ((PyArrayObject *)values[33]);
    __pyx_v_eb_adjoint_sigma = __pyx_PyFloat_AsDouble(values[34]); if (unlikely((__pyx_v_eb_adjoint_sigma == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2210, __pyx_L3_error)
    __pyx_v_elementDiameter = ((PyArrayObject *)values[35]);
    __pyx_v_nodeDiametersArray = ((PyArrayObject *)values[36]);
    __pyx_v_hFactor = __pyx_PyFloat_AsDouble(values[37]); if (unlikely((__pyx_v_hFactor == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2213, __pyx_L3_error)
    __pyx_v_nElements_global = __Pyx_PyInt_As_int(values[38]); if (unlikely((__pyx_v_nElements_global == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2214, __pyx_L3_error)
    __pyx_v_nElements_owned = __Pyx_PyInt_As_int(values[39]); if (unlikely((__pyx_v_nElements_owned == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2215, __pyx_L3_error)
    __pyx_v_useRBLES = __pyx_PyFloat_AsDouble(values[40]); if (unlikely((__pyx_v_useRBLES == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2216, __pyx_L3_error)
    __pyx_v_useMetrics = __pyx_PyFloat_AsDouble(values[41]); if (unlikely((__pyx_v_useMetrics == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2217, __pyx_L3_error)
    __pyx_v_alphaBDF = __pyx_PyFloat_AsDouble(values[42]); if (unlikely((__pyx_v_alphaBDF == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2218, __pyx_L3_error)
    __pyx_v_epsFact_rho = __pyx_PyFloat_AsDouble(values[43]); if (unlikely((__pyx_v_epsFact_rho == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2219, __pyx_L3_error)
    __pyx_v_epsFact_mu = __pyx_PyFloat_AsDouble(values[44]); if (unlikely((__pyx_v_epsFact_mu == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2220, __pyx_L3_error)
    __pyx_v_sigma = __pyx_PyFloat_AsDouble(values[45]); if (unlikely((__pyx_v_sigma == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2221, __pyx_L3_error)
    __pyx_v_rho_0 = __pyx_PyFloat_AsDouble(values[46]); if (unlikely((__pyx_v_rho_0 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2222, __pyx_L3_error)
    __pyx_v_nu_0 = __pyx_PyFloat_AsDouble(values[47]); if (unlikely((__pyx_v_nu_0 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2223, __pyx_L3_error)
    __pyx_v_rho_1 = __pyx_PyFloat_AsDouble(values[48]); if (unlikely((__pyx_v_rho_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2224, __pyx_L3_error)
    __pyx_v_nu_1 = __pyx_PyFloat_AsDouble(values[49]); if (unlikely((__pyx_v_nu_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2225, __pyx_L3_error)
    __pyx_v_smagorinskyConstant = __pyx_PyFloat_AsDouble(values[50]); if (unlikely((__pyx_v_smagorinskyConstant == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2226, __pyx_L3_error)
    __pyx_v_turbulenceClosureModel = __Pyx_PyInt_As_int(values[51]); if (unlikely((__pyx_v_turbulenceClosureModel == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2227, __pyx_L3_error)
    __pyx_v_Ct_sge = __pyx_PyFloat_AsDouble(values[52]); if (unlikely((__pyx_v_Ct_sge == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2228, __pyx_L3_error)
    __pyx_v_Cd_sge = __pyx_PyFloat_AsDouble(values[53]); if (unlikely((__pyx_v_Cd_sge == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2229, __pyx_L3_error)
    __pyx_v_C_dg = __pyx_PyFloat_AsDouble(values[54]); if (unlikely((__pyx_v_C_dg == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2230, __pyx_L3_error)
    __pyx_v_C_b = __pyx_PyFloat_AsDouble(values[55]); if (unlikely((__pyx_v_C_b == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2231, __pyx_L3_error)
    __pyx_v_eps_solid = ((PyArrayObject *)values[56]);
    __pyx_v_phi_solid = ((PyArrayObject *)values[57]);
    __pyx_v_q_velocity_solid = ((PyArrayObject *)values[58]);
    __pyx_v_q_vos = ((PyArrayObject *)values[59]);
    __pyx_v_q_dvos_dt = ((PyArrayObject *)values[60]);
    __pyx_v_q_dragAlpha = ((PyArrayObject *)values[61]);
    __pyx_v_q_dragBeta = ((PyArrayObject *)values[62]);
    __pyx_v_q_mass_source = ((PyArrayObject *)values[63]);
    __pyx_v_q_turb_var_0 = ((PyArrayObject *)values[64]);
    __pyx_v_q_turb_var_1 = ((PyArrayObject *)values[65]);
    __pyx_v_q_turb_var_grad_0 = ((PyArrayObject *)values[66]);
    __pyx_v_p_l2g = ((PyArrayObject *)values[67]);
    __pyx_v_vel_l2g = ((PyArrayObject *)values[68]);
    __pyx_v_p_dof = ((PyArrayObject *)values[69]);
    __pyx_v_u_dof = ((PyArrayObject *)values[70]);
    __pyx_v_v_dof = ((PyArrayObject *)values[71]);
    __pyx_v_w_dof = ((PyArrayObject *)values[72]);
    __pyx_v_g = ((PyArrayObject *)values[73]);
    __pyx_v_useVF = __pyx_PyFloat_AsDouble(values[74]); if (unlikely((__pyx_v_useVF == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2249, __pyx_L3_error)
    __pyx_v_vf = ((PyArrayObject *)values[75]);
    __pyx_v_phi = ((PyArrayObject *)values[76]);
    __pyx_v_normal_phi = ((PyArrayObject *)values[77]);
    __pyx_v_kappa_phi = ((PyArrayObject *)values[78]);
    __pyx_v_q_mom_u_acc_beta_bdf = ((PyArrayObject *)values[79]);
    __pyx_v_q_mom_v_acc_beta_bdf = ((PyArrayObject *)values[80]);
    __pyx_v_q_mom_w_acc_beta_bdf = ((PyArrayObject *)values[81]);
    __pyx_v_q_dV = ((PyArrayObject *)values[82]);
    __pyx_v_q_dV_last = ((PyArrayObject *)values[83]);
    __pyx_v_q_velocity_sge = ((PyArrayObject *)values[84]);
    __pyx_v_ebqe_velocity_star = ((PyArrayObject *)values[85]);
    __pyx_v_q_cfl = ((PyArrayObject *)values[86]);
    __pyx_v_q_numDiff_u_last = ((PyArrayObject *)values[87]);
    __pyx_v_q_numDiff_v_last = ((PyArrayObject *)values[88]);
    __pyx_v_q_numDiff_w_last = ((PyArrayObject *)values[89]);
    __pyx_v_sdInfo_u_u_rowptr = ((PyArrayObject *)values[90]);
    __pyx_v_sdInfo_u_u_colind = ((PyArrayObject *)values[91]);
    __pyx_v_sdInfo_u_v_rowptr = ((PyArrayObject *)values[92]);
    __pyx_v_sdInfo_u_v_colind = ((PyArrayObject *)values[93]);
    __pyx_v_sdInfo_u_w_rowptr = ((PyArrayObject *)values[94]);
    __pyx_v_sdInfo_u_w_colind = ((PyArrayObject *)values[95]);
    __pyx_v_sdInfo_v_v_rowptr = ((PyArrayObject *)values[96]);
    __pyx_v_sdInfo_v_v_colind = ((PyArrayObject *)values[97]);
    __pyx_v_sdInfo_v_u_rowptr = ((PyArrayObject *)values[98]);
    __pyx_v_sdInfo_v_u_colind = ((PyArrayObject *)values[99]);
    __pyx_v_sdInfo_v_w_rowptr = ((PyArrayObject *)values[100]);
    __pyx_v_sdInfo_v_w_colind = ((PyArrayObject *)values[101]);
    __pyx_v_sdInfo_w_w_rowptr = ((PyArrayObject *)values[102]);
    __pyx_v_sdInfo_w_w_colind = ((PyArrayObject *)values[103]);
    __pyx_v_sdInfo_w_u_rowptr = ((PyArrayObject *)values[104]);
    __pyx_v_sdInfo_w_u_colind = ((PyArrayObject *)values[105]);
    __pyx_v_sdInfo_w_v_rowptr = ((PyArrayObject *)values[106]);
    __pyx_v_sdInfo_w_v_colind = ((PyArrayObject *)values[107]);
    __pyx_v_csrRowIndeces_p_p = ((PyArrayObject *)values[108]);
    __pyx_v_csrColumnOffsets_p_p = ((PyArrayObject *)values[109]);
    __pyx_v_csrRowIndeces_p_u = ((PyArrayObject *)values[110]);
    __pyx_v_csrColumnOffsets_p_u = ((PyArrayObject *)values[111]);
    __pyx_v_csrRowIndeces_p_v = ((PyArrayObject *)values[112]);
    __pyx_v_csrColumnOffsets_p_v = ((PyArrayObject *)values[113]);
    __pyx_v_csrRowIndeces_p_w = ((PyArrayObject *)values[114]);
    __pyx_v_csrColumnOffsets_p_w = ((PyArrayObject *)values[115]);
    __pyx_v_csrRowIndeces_u_p = ((PyArrayObject *)values[116]);
    __pyx_v_csrColumnOffsets_u_p = ((PyArrayObject *)values[117]);
    __pyx_v_csrRowIndeces_u_u = ((PyArrayObject *)values[118]);
    __pyx_v_csrColumnOffsets_u_u = ((PyArrayObject *)values[119]);
    __pyx_v_csrRowIndeces_u_v = ((PyArrayObject *)values[120]);
    __pyx_v_csrColumnOffsets_u_v = ((PyArrayObject *)values[121]);
    __pyx_v_csrRowIndeces_u_w = ((PyArrayObject *)values[122]);
    __pyx_v_csrColumnOffsets_u_w = ((PyArrayObject *)values[123]);
    __pyx_v_csrRowIndeces_v_p = ((PyArrayObject *)values[124]);
    __pyx_v_csrColumnOffsets_v_p = ((PyArrayObject *)values[125]);
    __pyx_v_csrRowIndeces_v_u = ((PyArrayObject *)values[126]);
    __pyx_v_csrColumnOffsets_v_u = ((PyArrayObject *)values[127]);
    __pyx_v_csrRowIndeces_v_v = ((PyArrayObject *)values[128]);
    __pyx_v_csrColumnOffsets_v_v = ((PyArrayObject *)values[129]);
    __pyx_v_csrRowIndeces_v_w = ((PyArrayObject *)values[130]);
    __pyx_v_csrColumnOffsets_v_w = ((PyArrayObject *)values[131]);
    __pyx_v_csrRowIndeces_w_p = ((PyArrayObject *)values[132]);
    __pyx_v_csrColumnOffsets_w_p = ((PyArrayObject *)values[133]);
    __pyx_v_csrRowIndeces_w_u = ((PyArrayObject *)values[134]);
    __pyx_v_csrColumnOffsets_w_u = ((PyArrayObject *)values[135]);
    __pyx_v_csrRowIndeces_w_v = ((PyArrayObject *)values[136]);
    __pyx_v_csrColumnOffsets_w_v = ((PyArrayObject *)values[137]);
    __pyx_v_csrRowIndeces_w_w = ((PyArrayObject *)values[138]);
    __pyx_v_csrColumnOffsets_w_w = ((PyArrayObject *)values[139]);
    __pyx_v_globalJacobian = values[140];
    __pyx_v_nExteriorElementBoundaries_global = __Pyx_PyInt_As_int(values[141]); if (unlikely((__pyx_v_nExteriorElementBoundaries_global == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2287, __pyx_L3_error)
    __pyx_v_exteriorElementBoundariesArray = ((PyArrayObject *)values[142]);
    __pyx_v_elementBoundaryElementsArray = ((PyArrayObject *)values[143]);
    __pyx_v_elementBoundaryLocalElementBoundariesArray = ((PyArrayObject *)values[144]);
    __pyx_v_ebqe_vf_ext = ((PyArrayObject *)values[145]);
    __pyx_v_bc_ebqe_vf_ext = ((PyArrayObject *)values[146]);
    __pyx_v_ebqe_phi_ext = ((PyArrayObject *)values[147]);
    __pyx_v_bc_ebqe_phi_ext = ((PyArrayObject *)values[148]);
    __pyx_v_ebqe_normal_phi_ext = ((PyArrayObject *)values[149]);
    __pyx_v_ebqe_kappa_phi_ext = ((PyArrayObject *)values[150]);
    __pyx_v_ebqe_vos_ext = ((PyArrayObject *)values[151]);
    __pyx_v_ebqe_turb_var_0 = ((PyArrayObject *)values[152]);
    __pyx_v_ebqe_turb_var_1 = ((PyArrayObject *)values[153]);
    __pyx_v_isDOFBoundary_p = ((PyArrayObject *)values[154]);
    __pyx_v_isDOFBoundary_u = ((PyArrayObject *)values[155]);
    __pyx_v_isDOFBoundary_v = ((PyArrayObject *)values[156]);
    __pyx_v_isDOFBoundary_w = ((PyArrayObject *)values[157]);
    __pyx_v_isAdvectiveFluxBoundary_p = ((PyArrayObject *)values[158]);
    __pyx_v_isAdvectiveFluxBoundary_u = ((PyArrayObject *)values[159]);
    __pyx_v_isAdvectiveFluxBoundary_v = ((PyArrayObject *)values[160]);
    __pyx_v_isAdvectiveFluxBoundary_w = ((PyArrayObject *)values[161]);
    __pyx_v_isDiffusiveFluxBoundary_u = ((PyArrayObject *)values[162]);
    __pyx_v_isDiffusiveFluxBoundary_v = ((PyArrayObject *)values[163]);
    __pyx_v_isDiffusiveFluxBoundary_w = ((PyArrayObject *)values[164]);
    __pyx_v_ebqe_bc_p_ext = ((PyArrayObject *)values[165]);
    __pyx_v_ebqe_bc_flux_mass_ext = ((PyArrayObject *)values[166]);
    __pyx_v_ebqe_bc_flux_mom_u_adv_ext = ((PyArrayObject *)values[167]);
    __pyx_v_ebqe_bc_flux_mom_v_adv_ext = ((PyArrayObject *)values[168]);
    __pyx_v_ebqe_bc_flux_mom_w_adv_ext = ((PyArrayObject *)values[169]);
    __pyx_v_ebqe_bc_u_ext = ((PyArrayObject *)values[170]);
    __pyx_v_ebqe_bc_flux_u_diff_ext = ((PyArrayObject *)values[171]);
    __pyx_v_ebqe_penalty_ext = ((PyArrayObject *)values[172]);
    __pyx_v_ebqe_bc_v_ext = ((PyArrayObject *)values[173]);
    __pyx_v_ebqe_bc_flux_v_diff_ext = ((PyArrayObject *)values[174]);
    __pyx_v_ebqe_bc_w_ext = ((PyArrayObject *)values[175]);
    __pyx_v_ebqe_bc_flux_w_diff_ext = ((PyArrayObject *)values[176]);
    __pyx_v_csrColumnOffsets_eb_p_p = ((PyArrayObject *)values[177]);
    __pyx_v_csrColumnOffsets_eb_p_u = ((PyArrayObject *)values[178]);
    __pyx_v_csrColumnOffsets_eb_p_v = ((PyArrayObject *)values[179]);
    __pyx_v_csrColumnOffsets_eb_p_w = ((PyArrayObject *)values[180]);
    __pyx_v_csrColumnOffsets_eb_u_p = ((PyArrayObject *)values[181]);
    __pyx_v_csrColumnOffsets_eb_u_u = ((PyArrayObject *)values[182]);
    __pyx_v_csrColumnOffsets_eb_u_v = ((PyArrayObject *)values[183]);
    __pyx_v_csrColumnOffsets_eb_u_w = ((PyArrayObject *)values[184]);
    __pyx_v_csrColumnOffsets_eb_v_p = ((PyArrayObject *)values[185]);
    __pyx_v_csrColumnOffsets_eb_v_u = ((PyArrayObject *)values[186]);
    __pyx_v_csrColumnOffsets_eb_v_v = ((PyArrayObject *)values[187]);
    __pyx_v_csrColumnOffsets_eb_v_w = ((PyArrayObject *)values[188]);
    __pyx_v_csrColumnOffsets_eb_w_p = ((PyArrayObject *)values[189]);
    __pyx_v_csrColumnOffsets_eb_w_u = ((PyArrayObject *)values[190]);
    __pyx_v_csrColumnOffsets_eb_w_v = ((PyArrayObject *)values[191]);
    __pyx_v_csrColumnOffsets_eb_w_w = ((PyArrayObject *)values[192]);
    __pyx_v_elementFlags = ((PyArrayObject *)values[193]);
    __pyx_v_nParticles = __Pyx_PyInt_As_int(values[194]); if (unlikely((__pyx_v_nParticles == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2342, __pyx_L3_error)
    __pyx_v_particle_epsFact = __pyx_PyFloat_AsDouble(values[195]); if (unlikely((__pyx_v_particle_epsFact == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2343, __pyx_L3_error)
    __pyx_v_particle_alpha = __pyx_PyFloat_AsDouble(values[196]); if (unlikely((__pyx_v_particle_alpha == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2344, __pyx_L3_error)
    __pyx_v_particle_beta = __pyx_PyFloat_AsDouble(values[197]); if (unlikely((__pyx_v_particle_beta == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2345, __pyx_L3_error)
    __pyx_v_particle_penalty_constant = __pyx_PyFloat_AsDouble(values[198]); if (unlikely((__pyx_v_particle_penalty_constant == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2346, __pyx_L3_error)
    __pyx_v_particle_signed_distances = ((PyArrayObject *)values[199]);
    __pyx_v_particle_signed_distance_normals = ((PyArrayObject *)values[200]);
    __pyx_v_particle_velocities = ((PyArrayObject *)values[201]);
    __pyx_v_particle_centroids = ((PyArrayObject *)values[202]);
    __pyx_v_particle_nitsche = __pyx_PyFloat_AsDouble(values[203]); if (unlikely((__pyx_v_particle_nitsche == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2351, __pyx_L3_error)
    __pyx_v_KILL_PRESSURE_TERM = __Pyx_PyInt_As_int(values[204]); if (unlikely((__pyx_v_KILL_PRESSURE_TERM == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2352, __pyx_L3_error)
    __pyx_v_MATERIAL_PARAMETERS_AS_FUNCTION = __Pyx_PyInt_As_int(values[205]); if (unlikely((__pyx_v_MATERIAL_PARAMETERS_AS_FUNCTION == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2353, __pyx_L3_error)
    __pyx_v_density_as_function = ((PyArrayObject *)values[206]);
    __pyx_v_dynamic_viscosity_as_function = ((PyArrayObject *)values[207]);
    __pyx_v_ebqe_density_as_function = ((PyArrayObject *)values[208]);
    __pyx_v_ebqe_dynamic_viscosity_as_function = ((PyArrayObject *)values[209]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2175, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mprans.cRANS3PF.RANS3PF.calculateJacobian_entropy_viscosity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "mesh_trial_ref", 0))) __PYX_ERR(0, 2176, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_grad_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "mesh_grad_trial_ref", 0))) __PYX_ERR(0, 2177, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_dof), __pyx_ptype_5numpy_ndarray, 1, "mesh_dof", 0))) __PYX_ERR(0, 2178, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_velocity_dof), __pyx_ptype_5numpy_ndarray, 1, "mesh_velocity_dof", 0))) __PYX_ERR(0, 2179, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_l2g), __pyx_ptype_5numpy_ndarray, 1, "mesh_l2g", 0))) __PYX_ERR(0, 2182, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dV_ref), __pyx_ptype_5numpy_ndarray, 1, "dV_ref", 0))) __PYX_ERR(0, 2183, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "p_trial_ref", 0))) __PYX_ERR(0, 2184, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_grad_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "p_grad_trial_ref", 0))) __PYX_ERR(0, 2185, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_test_ref), __pyx_ptype_5numpy_ndarray, 1, "p_test_ref", 0))) __PYX_ERR(0, 2186, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_grad_test_ref), __pyx_ptype_5numpy_ndarray, 1, "p_grad_test_ref", 0))) __PYX_ERR(0, 2187, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_p), __pyx_ptype_5numpy_ndarray, 1, "q_p", 0))) __PYX_ERR(0, 2188, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_grad_p), __pyx_ptype_5numpy_ndarray, 1, "q_grad_p", 0))) __PYX_ERR(0, 2189, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_p), __pyx_ptype_5numpy_ndarray, 1, "ebqe_p", 0))) __PYX_ERR(0, 2190, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_grad_p), __pyx_ptype_5numpy_ndarray, 1, "ebqe_grad_p", 0))) __PYX_ERR(0, 2191, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_trial_ref", 0))) __PYX_ERR(0, 2192, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_grad_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_grad_trial_ref", 0))) __PYX_ERR(0, 2193, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_hess_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_hess_trial_ref", 0))) __PYX_ERR(0, 2194, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_test_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_test_ref", 0))) __PYX_ERR(0, 2195, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_grad_test_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_grad_test_ref", 0))) __PYX_ERR(0, 2196, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "mesh_trial_trace_ref", 0))) __PYX_ERR(0, 2197, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_grad_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "mesh_grad_trial_trace_ref", 0))) __PYX_ERR(0, 2198, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dS_ref), __pyx_ptype_5numpy_ndarray, 1, "dS_ref", 0))) __PYX_ERR(0, 2199, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "p_trial_trace_ref", 0))) __PYX_ERR(0, 2200, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_grad_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "p_grad_trial_trace_ref", 0))) __PYX_ERR(0, 2201, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_test_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "p_test_trace_ref", 0))) __PYX_ERR(0, 2202, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_grad_test_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "p_grad_test_trace_ref", 0))) __PYX_ERR(0, 2203, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_trial_trace_ref", 0))) __PYX_ERR(0, 2204, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_grad_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_grad_trial_trace_ref", 0))) __PYX_ERR(0, 2205, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_test_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_test_trace_ref", 0))) __PYX_ERR(0, 2206, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_grad_test_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_grad_test_trace_ref", 0))) __PYX_ERR(0, 2207, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_normal_ref), __pyx_ptype_5numpy_ndarray, 1, "normal_ref", 0))) __PYX_ERR(0, 2208, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_boundaryJac_ref), __pyx_ptype_5numpy_ndarray, 1, "boundaryJac_ref", 0))) __PYX_ERR(0, 2209, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_elementDiameter), __pyx_ptype_5numpy_ndarray, 1, "elementDiameter", 0))) __PYX_ERR(0, 2211, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_nodeDiametersArray), __pyx_ptype_5numpy_ndarray, 1, "nodeDiametersArray", 0))) __PYX_ERR(0, 2212, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_eps_solid), __pyx_ptype_5numpy_ndarray, 1, "eps_solid", 0))) __PYX_ERR(0, 2233, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_phi_solid), __pyx_ptype_5numpy_ndarray, 1, "phi_solid", 0))) __PYX_ERR(0, 2234, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_velocity_solid), __pyx_ptype_5numpy_ndarray, 1, "q_velocity_solid", 0))) __PYX_ERR(0, 2235, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_vos), __pyx_ptype_5numpy_ndarray, 1, "q_vos", 0))) __PYX_ERR(0, 2236, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_dvos_dt), __pyx_ptype_5numpy_ndarray, 1, "q_dvos_dt", 0))) __PYX_ERR(0, 2237, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_dragAlpha), __pyx_ptype_5numpy_ndarray, 1, "q_dragAlpha", 0))) __PYX_ERR(0, 2238, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_dragBeta), __pyx_ptype_5numpy_ndarray, 1, "q_dragBeta", 0))) __PYX_ERR(0, 2239, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_mass_source), __pyx_ptype_5numpy_ndarray, 1, "q_mass_source", 0))) __PYX_ERR(0, 2240, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_turb_var_0), __pyx_ptype_5numpy_ndarray, 1, "q_turb_var_0", 0))) __PYX_ERR(0, 2241, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_turb_var_1), __pyx_ptype_5numpy_ndarray, 1, "q_turb_var_1", 0))) __PYX_ERR(0, 2242, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_turb_var_grad_0), __pyx_ptype_5numpy_ndarray, 1, "q_turb_var_grad_0", 0))) __PYX_ERR(0, 2243, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_l2g), __pyx_ptype_5numpy_ndarray, 1, "p_l2g", 0))) __PYX_ERR(0, 2245, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_l2g), __pyx_ptype_5numpy_ndarray, 1, "vel_l2g", 0))) __PYX_ERR(0, 2246, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_dof), __pyx_ptype_5numpy_ndarray, 1, "p_dof", 0))) __PYX_ERR(0, 2247, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_u_dof), __pyx_ptype_5numpy_ndarray, 1, "u_dof", 0))) __PYX_ERR(0, 2247, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_v_dof), __pyx_ptype_5numpy_ndarray, 1, "v_dof", 0))) __PYX_ERR(0, 2247, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_w_dof), __pyx_ptype_5numpy_ndarray, 1, "w_dof", 0))) __PYX_ERR(0, 2247, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_g), __pyx_ptype_5numpy_ndarray, 1, "g", 0))) __PYX_ERR(0, 2248, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vf), __pyx_ptype_5numpy_ndarray, 1, "vf", 0))) __PYX_ERR(0, 2250, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_phi), __pyx_ptype_5numpy_ndarray, 1, "phi", 0))) __PYX_ERR(0, 2251, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_normal_phi), __pyx_ptype_5numpy_ndarray, 1, "normal_phi", 0))) __PYX_ERR(0, 2252, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_kappa_phi), __pyx_ptype_5numpy_ndarray, 1, "kappa_phi", 0))) __PYX_ERR(0, 2253, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_mom_u_acc_beta_bdf), __pyx_ptype_5numpy_ndarray, 1, "q_mom_u_acc_beta_bdf", 0))) __PYX_ERR(0, 2254, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_mom_v_acc_beta_bdf), __pyx_ptype_5numpy_ndarray, 1, "q_mom_v_acc_beta_bdf", 0))) __PYX_ERR(0, 2254, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_mom_w_acc_beta_bdf), __pyx_ptype_5numpy_ndarray, 1, "q_mom_w_acc_beta_bdf", 0))) __PYX_ERR(0, 2254, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_dV), __pyx_ptype_5numpy_ndarray, 1, "q_dV", 0))) __PYX_ERR(0, 2255, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_dV_last), __pyx_ptype_5numpy_ndarray, 1, "q_dV_last", 0))) __PYX_ERR(0, 2256, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_velocity_sge), __pyx_ptype_5numpy_ndarray, 1, "q_velocity_sge", 0))) __PYX_ERR(0, 2257, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_velocity_star), __pyx_ptype_5numpy_ndarray, 1, "ebqe_velocity_star", 0))) __PYX_ERR(0, 2258, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_cfl), __pyx_ptype_5numpy_ndarray, 1, "q_cfl", 0))) __PYX_ERR(0, 2259, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_numDiff_u_last), __pyx_ptype_5numpy_ndarray, 1, "q_numDiff_u_last", 0))) __PYX_ERR(0, 2260, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_numDiff_v_last), __pyx_ptype_5numpy_ndarray, 1, "q_numDiff_v_last", 0))) __PYX_ERR(0, 2260, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_numDiff_w_last), __pyx_ptype_5numpy_ndarray, 1, "q_numDiff_w_last", 0))) __PYX_ERR(0, 2260, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_u_u_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_u_u_rowptr", 0))) __PYX_ERR(0, 2261, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_u_u_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_u_u_colind", 0))) __PYX_ERR(0, 2261, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_u_v_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_u_v_rowptr", 0))) __PYX_ERR(0, 2262, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_u_v_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_u_v_colind", 0))) __PYX_ERR(0, 2262, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_u_w_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_u_w_rowptr", 0))) __PYX_ERR(0, 2263, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_u_w_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_u_w_colind", 0))) __PYX_ERR(0, 2263, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_v_v_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_v_v_rowptr", 0))) __PYX_ERR(0, 2264, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_v_v_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_v_v_colind", 0))) __PYX_ERR(0, 2264, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_v_u_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_v_u_rowptr", 0))) __PYX_ERR(0, 2265, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_v_u_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_v_u_colind", 0))) __PYX_ERR(0, 2265, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_v_w_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_v_w_rowptr", 0))) __PYX_ERR(0, 2266, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_v_w_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_v_w_colind", 0))) __PYX_ERR(0, 2266, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_w_w_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_w_w_rowptr", 0))) __PYX_ERR(0, 2267, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_w_w_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_w_w_colind", 0))) __PYX_ERR(0, 2267, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_w_u_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_w_u_rowptr", 0))) __PYX_ERR(0, 2268, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_w_u_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_w_u_colind", 0))) __PYX_ERR(0, 2268, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_w_v_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_w_v_rowptr", 0))) __PYX_ERR(0, 2269, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_w_v_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_w_v_colind", 0))) __PYX_ERR(0, 2269, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_p_p), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_p_p", 0))) __PYX_ERR(0, 2270, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_p_p), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_p_p", 0))) __PYX_ERR(0, 2270, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_p_u), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_p_u", 0))) __PYX_ERR(0, 2271, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_p_u), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_p_u", 0))) __PYX_ERR(0, 2271, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_p_v), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_p_v", 0))) __PYX_ERR(0, 2272, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_p_v), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_p_v", 0))) __PYX_ERR(0, 2272, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_p_w), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_p_w", 0))) __PYX_ERR(0, 2273, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_p_w), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_p_w", 0))) __PYX_ERR(0, 2273, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_u_p), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_u_p", 0))) __PYX_ERR(0, 2274, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_u_p), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_u_p", 0))) __PYX_ERR(0, 2274, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_u_u), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_u_u", 0))) __PYX_ERR(0, 2275, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_u_u), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_u_u", 0))) __PYX_ERR(0, 2275, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_u_v), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_u_v", 0))) __PYX_ERR(0, 2276, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_u_v), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_u_v", 0))) __PYX_ERR(0, 2276, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_u_w), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_u_w", 0))) __PYX_ERR(0, 2277, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_u_w), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_u_w", 0))) __PYX_ERR(0, 2277, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_v_p), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_v_p", 0))) __PYX_ERR(0, 2278, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_v_p), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_v_p", 0))) __PYX_ERR(0, 2278, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_v_u), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_v_u", 0))) __PYX_ERR(0, 2279, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_v_u), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_v_u", 0))) __PYX_ERR(0, 2279, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_v_v), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_v_v", 0))) __PYX_ERR(0, 2280, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_v_v), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_v_v", 0))) __PYX_ERR(0, 2280, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_v_w), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_v_w", 0))) __PYX_ERR(0, 2281, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_v_w), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_v_w", 0))) __PYX_ERR(0, 2281, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_w_p), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_w_p", 0))) __PYX_ERR(0, 2282, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_w_p), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_w_p", 0))) __PYX_ERR(0, 2282, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_w_u), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_w_u", 0))) __PYX_ERR(0, 2283, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_w_u), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_w_u", 0))) __PYX_ERR(0, 2283, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_w_v), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_w_v", 0))) __PYX_ERR(0, 2284, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_w_v), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_w_v", 0))) __PYX_ERR(0, 2284, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_w_w), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_w_w", 0))) __PYX_ERR(0, 2285, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_w_w), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_w_w", 0))) __PYX_ERR(0, 2285, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_exteriorElementBoundariesArray), __pyx_ptype_5numpy_ndarray, 1, "exteriorElementBoundariesArray", 0))) __PYX_ERR(0, 2288, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_elementBoundaryElementsArray), __pyx_ptype_5numpy_ndarray, 1, "elementBoundaryElementsArray", 0))) __PYX_ERR(0, 2289, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_elementBoundaryLocalElementBoundariesArray), __pyx_ptype_5numpy_ndarray, 1, "elementBoundaryLocalElementBoundariesArray", 0))) __PYX_ERR(0, 2290, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_vf_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_vf_ext", 0))) __PYX_ERR(0, 2291, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_bc_ebqe_vf_ext), __pyx_ptype_5numpy_ndarray, 1, "bc_ebqe_vf_ext", 0))) __PYX_ERR(0, 2292, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_phi_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_phi_ext", 0))) __PYX_ERR(0, 2293, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_bc_ebqe_phi_ext), __pyx_ptype_5numpy_ndarray, 1, "bc_ebqe_phi_ext", 0))) __PYX_ERR(0, 2294, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_normal_phi_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_normal_phi_ext", 0))) __PYX_ERR(0, 2295, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_kappa_phi_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_kappa_phi_ext", 0))) __PYX_ERR(0, 2296, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_vos_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_vos_ext", 0))) __PYX_ERR(0, 2298, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_turb_var_0), __pyx_ptype_5numpy_ndarray, 1, "ebqe_turb_var_0", 0))) __PYX_ERR(0, 2299, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_turb_var_1), __pyx_ptype_5numpy_ndarray, 1, "ebqe_turb_var_1", 0))) __PYX_ERR(0, 2300, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isDOFBoundary_p), __pyx_ptype_5numpy_ndarray, 1, "isDOFBoundary_p", 0))) __PYX_ERR(0, 2302, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isDOFBoundary_u), __pyx_ptype_5numpy_ndarray, 1, "isDOFBoundary_u", 0))) __PYX_ERR(0, 2303, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isDOFBoundary_v), __pyx_ptype_5numpy_ndarray, 1, "isDOFBoundary_v", 0))) __PYX_ERR(0, 2304, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isDOFBoundary_w), __pyx_ptype_5numpy_ndarray, 1, "isDOFBoundary_w", 0))) __PYX_ERR(0, 2305, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isAdvectiveFluxBoundary_p), __pyx_ptype_5numpy_ndarray, 1, "isAdvectiveFluxBoundary_p", 0))) __PYX_ERR(0, 2306, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isAdvectiveFluxBoundary_u), __pyx_ptype_5numpy_ndarray, 1, "isAdvectiveFluxBoundary_u", 0))) __PYX_ERR(0, 2307, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isAdvectiveFluxBoundary_v), __pyx_ptype_5numpy_ndarray, 1, "isAdvectiveFluxBoundary_v", 0))) __PYX_ERR(0, 2308, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isAdvectiveFluxBoundary_w), __pyx_ptype_5numpy_ndarray, 1, "isAdvectiveFluxBoundary_w", 0))) __PYX_ERR(0, 2309, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isDiffusiveFluxBoundary_u), __pyx_ptype_5numpy_ndarray, 1, "isDiffusiveFluxBoundary_u", 0))) __PYX_ERR(0, 2310, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isDiffusiveFluxBoundary_v), __pyx_ptype_5numpy_ndarray, 1, "isDiffusiveFluxBoundary_v", 0))) __PYX_ERR(0, 2311, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isDiffusiveFluxBoundary_w), __pyx_ptype_5numpy_ndarray, 1, "isDiffusiveFluxBoundary_w", 0))) __PYX_ERR(0, 2312, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_p_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_p_ext", 0))) __PYX_ERR(0, 2313, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_flux_mass_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_flux_mass_ext", 0))) __PYX_ERR(0, 2314, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_flux_mom_u_adv_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_flux_mom_u_adv_ext", 0))) __PYX_ERR(0, 2315, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_flux_mom_v_adv_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_flux_mom_v_adv_ext", 0))) __PYX_ERR(0, 2316, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_flux_mom_w_adv_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_flux_mom_w_adv_ext", 0))) __PYX_ERR(0, 2317, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_u_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_u_ext", 0))) __PYX_ERR(0, 2318, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_flux_u_diff_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_flux_u_diff_ext", 0))) __PYX_ERR(0, 2319, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_penalty_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_penalty_ext", 0))) __PYX_ERR(0, 2320, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_v_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_v_ext", 0))) __PYX_ERR(0, 2321, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_flux_v_diff_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_flux_v_diff_ext", 0))) __PYX_ERR(0, 2322, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_w_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_w_ext", 0))) __PYX_ERR(0, 2323, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_flux_w_diff_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_flux_w_diff_ext", 0))) __PYX_ERR(0, 2324, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_p_p), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_p_p", 0))) __PYX_ERR(0, 2325, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_p_u), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_p_u", 0))) __PYX_ERR(0, 2326, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_p_v), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_p_v", 0))) __PYX_ERR(0, 2327, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_p_w), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_p_w", 0))) __PYX_ERR(0, 2328, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_u_p), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_u_p", 0))) __PYX_ERR(0, 2329, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_u_u), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_u_u", 0))) __PYX_ERR(0, 2330, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_u_v), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_u_v", 0))) __PYX_ERR(0, 2331, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_u_w), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_u_w", 0))) __PYX_ERR(0, 2332, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_v_p), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_v_p", 0))) __PYX_ERR(0, 2333, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_v_u), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_v_u", 0))) __PYX_ERR(0, 2334, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_v_v), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_v_v", 0))) __PYX_ERR(0, 2335, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_v_w), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_v_w", 0))) __PYX_ERR(0, 2336, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_w_p), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_w_p", 0))) __PYX_ERR(0, 2337, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_w_u), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_w_u", 0))) __PYX_ERR(0, 2338, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_w_v), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_w_v", 0))) __PYX_ERR(0, 2339, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_w_w), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_w_w", 0))) __PYX_ERR(0, 2340, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_elementFlags), __pyx_ptype_5numpy_ndarray, 1, "elementFlags", 0))) __PYX_ERR(0, 2341, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particle_signed_distances), __pyx_ptype_5numpy_ndarray, 1, "particle_signed_distances", 0))) __PYX_ERR(0, 2347, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particle_signed_distance_normals), __pyx_ptype_5numpy_ndarray, 1, "particle_signed_distance_normals", 0))) __PYX_ERR(0, 2348, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particle_velocities), __pyx_ptype_5numpy_ndarray, 1, "particle_velocities", 0))) __PYX_ERR(0, 2349, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particle_centroids), __pyx_ptype_5numpy_ndarray, 1, "particle_centroids", 0))) __PYX_ERR(0, 2350, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_density_as_function), __pyx_ptype_5numpy_ndarray, 1, "density_as_function", 0))) __PYX_ERR(0, 2354, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dynamic_viscosity_as_function), __pyx_ptype_5numpy_ndarray, 1, "dynamic_viscosity_as_function", 0))) __PYX_ERR(0, 2355, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_density_as_function), __pyx_ptype_5numpy_ndarray, 1, "ebqe_density_as_function", 0))) __PYX_ERR(0, 2356, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_dynamic_viscosity_as_function), __pyx_ptype_5numpy_ndarray, 1, "ebqe_dynamic_viscosity_as_function", 0))) __PYX_ERR(0, 2357, __pyx_L1_error)
  __pyx_r = __pyx_pf_6mprans_8cRANS3PF_7RANS3PF_10calculateJacobian_entropy_viscosity(((struct __pyx_obj_6mprans_8cRANS3PF_RANS3PF *)__pyx_v_self), __pyx_v_mesh_trial_ref, __pyx_v_mesh_grad_trial_ref, __pyx_v_mesh_dof, __pyx_v_mesh_velocity_dof, __pyx_v_MOVING_DOMAIN, __pyx_v_PSTAB, __pyx_v_mesh_l2g, __pyx_v_dV_ref, __pyx_v_p_trial_ref, __pyx_v_p_grad_trial_ref, __pyx_v_p_test_ref, __pyx_v_p_grad_test_ref, __pyx_v_q_p, __pyx_v_q_grad_p, __pyx_v_ebqe_p, __pyx_v_ebqe_grad_p, __pyx_v_vel_trial_ref, __pyx_v_vel_grad_trial_ref, __pyx_v_vel_hess_trial_ref, __pyx_v_vel_test_ref, __pyx_v_vel_grad_test_ref, __pyx_v_mesh_trial_trace_ref, __pyx_v_mesh_grad_trial_trace_ref, __pyx_v_dS_ref, __pyx_v_p_trial_trace_ref, __pyx_v_p_grad_trial_trace_ref, __pyx_v_p_test_trace_ref, __pyx_v_p_grad_test_trace_ref, __pyx_v_vel_trial_trace_ref, __pyx_v_vel_grad_trial_trace_ref, __pyx_v_vel_test_trace_ref, __pyx_v_vel_grad_test_trace_ref, __pyx_v_normal_ref, __pyx_v_boundaryJac_ref, __pyx_v_eb_adjoint_sigma, __pyx_v_elementDiameter, __pyx_v_nodeDiametersArray, __pyx_v_hFactor, __pyx_v_nElements_global, __pyx_v_nElements_owned, __pyx_v_useRBLES, __pyx_v_useMetrics, __pyx_v_alphaBDF, __pyx_v_epsFact_rho, __pyx_v_epsFact_mu, __pyx_v_sigma, __pyx_v_rho_0, __pyx_v_nu_0, __pyx_v_rho_1, __pyx_v_nu_1, __pyx_v_smagorinskyConstant, __pyx_v_turbulenceClosureModel, __pyx_v_Ct_sge, __pyx_v_Cd_sge, __pyx_v_C_dg, __pyx_v_C_b, __pyx_v_eps_solid, __pyx_v_phi_solid, __pyx_v_q_velocity_solid, __pyx_v_q_vos, __pyx_v_q_dvos_dt, __pyx_v_q_dragAlpha, __pyx_v_q_dragBeta, __pyx_v_q_mass_source, __pyx_v_q_turb_var_0, __pyx_v_q_turb_var_1, __pyx_v_q_turb_var_grad_0, __pyx_v_p_l2g, __pyx_v_vel_l2g, __pyx_v_p_dof, __pyx_v_u_dof, __pyx_v_v_dof, __pyx_v_w_dof, __pyx_v_g, __pyx_v_useVF, __pyx_v_vf, __pyx_v_phi, __pyx_v_normal_phi, __pyx_v_kappa_phi, __pyx_v_q_mom_u_acc_beta_bdf, __pyx_v_q_mom_v_acc_beta_bdf, __pyx_v_q_mom_w_acc_beta_bdf, __pyx_v_q_dV, __pyx_v_q_dV_last, __pyx_v_q_velocity_sge, __pyx_v_ebqe_velocity_star, __pyx_v_q_cfl, __pyx_v_q_numDiff_u_last, __pyx_v_q_numDiff_v_last, __pyx_v_q_numDiff_w_last, __pyx_v_sdInfo_u_u_rowptr, __pyx_v_sdInfo_u_u_colind, __pyx_v_sdInfo_u_v_rowptr, __pyx_v_sdInfo_u_v_colind, __pyx_v_sdInfo_u_w_rowptr, __pyx_v_sdInfo_u_w_colind, __pyx_v_sdInfo_v_v_rowptr, __pyx_v_sdInfo_v_v_colind, __pyx_v_sdInfo_v_u_rowptr, __pyx_v_sdInfo_v_u_colind, __pyx_v_sdInfo_v_w_rowptr, __pyx_v_sdInfo_v_w_colind, __pyx_v_sdInfo_w_w_rowptr, __pyx_v_sdInfo_w_w_colind, __pyx_v_sdInfo_w_u_rowptr, __pyx_v_sdInfo_w_u_colind, __pyx_v_sdInfo_w_v_rowptr, __pyx_v_sdInfo_w_v_colind, __pyx_v_csrRowIndeces_p_p, __pyx_v_csrColumnOffsets_p_p, __pyx_v_csrRowIndeces_p_u, __pyx_v_csrColumnOffsets_p_u, __pyx_v_csrRowIndeces_p_v, __pyx_v_csrColumnOffsets_p_v, __pyx_v_csrRowIndeces_p_w, __pyx_v_csrColumnOffsets_p_w, __pyx_v_csrRowIndeces_u_p, __pyx_v_csrColumnOffsets_u_p, __pyx_v_csrRowIndeces_u_u, __pyx_v_csrColumnOffsets_u_u, __pyx_v_csrRowIndeces_u_v, __pyx_v_csrColumnOffsets_u_v, __pyx_v_csrRowIndeces_u_w, __pyx_v_csrColumnOffsets_u_w, __pyx_v_csrRowIndeces_v_p, __pyx_v_csrColumnOffsets_v_p, __pyx_v_csrRowIndeces_v_u, __pyx_v_csrColumnOffsets_v_u, __pyx_v_csrRowIndeces_v_v, __pyx_v_csrColumnOffsets_v_v, __pyx_v_csrRowIndeces_v_w, __pyx_v_csrColumnOffsets_v_w, __pyx_v_csrRowIndeces_w_p, __pyx_v_csrColumnOffsets_w_p, __pyx_v_csrRowIndeces_w_u, __pyx_v_csrColumnOffsets_w_u, __pyx_v_csrRowIndeces_w_v, __pyx_v_csrColumnOffsets_w_v, __pyx_v_csrRowIndeces_w_w, __pyx_v_csrColumnOffsets_w_w, __pyx_v_globalJacobian, __pyx_v_nExteriorElementBoundaries_global, __pyx_v_exteriorElementBoundariesArray, __pyx_v_elementBoundaryElementsArray, __pyx_v_elementBoundaryLocalElementBoundariesArray, __pyx_v_ebqe_vf_ext, __pyx_v_bc_ebqe_vf_ext, __pyx_v_ebqe_phi_ext, __pyx_v_bc_ebqe_phi_ext, __pyx_v_ebqe_normal_phi_ext, __pyx_v_ebqe_kappa_phi_ext, __pyx_v_ebqe_vos_ext, __pyx_v_ebqe_turb_var_0, __pyx_v_ebqe_turb_var_1, __pyx_v_isDOFBoundary_p, __pyx_v_isDOFBoundary_u, __pyx_v_isDOFBoundary_v, __pyx_v_isDOFBoundary_w, __pyx_v_isAdvectiveFluxBoundary_p, __pyx_v_isAdvectiveFluxBoundary_u, __pyx_v_isAdvectiveFluxBoundary_v, __pyx_v_isAdvectiveFluxBoundary_w, __pyx_v_isDiffusiveFluxBoundary_u, __pyx_v_isDiffusiveFluxBoundary_v, __pyx_v_isDiffusiveFluxBoundary_w, __pyx_v_ebqe_bc_p_ext, __pyx_v_ebqe_bc_flux_mass_ext, __pyx_v_ebqe_bc_flux_mom_u_adv_ext, __pyx_v_ebqe_bc_flux_mom_v_adv_ext, __pyx_v_ebqe_bc_flux_mom_w_adv_ext, __pyx_v_ebqe_bc_u_ext, __pyx_v_ebqe_bc_flux_u_diff_ext, __pyx_v_ebqe_penalty_ext, __pyx_v_ebqe_bc_v_ext, __pyx_v_ebqe_bc_flux_v_diff_ext, __pyx_v_ebqe_bc_w_ext, __pyx_v_ebqe_bc_flux_w_diff_ext, __pyx_v_csrColumnOffsets_eb_p_p, __pyx_v_csrColumnOffsets_eb_p_u, __pyx_v_csrColumnOffsets_eb_p_v, __pyx_v_csrColumnOffsets_eb_p_w, __pyx_v_csrColumnOffsets_eb_u_p, __pyx_v_csrColumnOffsets_eb_u_u, __pyx_v_csrColumnOffsets_eb_u_v, __pyx_v_csrColumnOffsets_eb_u_w, __pyx_v_csrColumnOffsets_eb_v_p, __pyx_v_csrColumnOffsets_eb_v_u, __pyx_v_csrColumnOffsets_eb_v_v, __pyx_v_csrColumnOffsets_eb_v_w, __pyx_v_csrColumnOffsets_eb_w_p, __pyx_v_csrColumnOffsets_eb_w_u, __pyx_v_csrColumnOffsets_eb_w_v, __pyx_v_csrColumnOffsets_eb_w_w, __pyx_v_elementFlags, __pyx_v_nParticles, __pyx_v_particle_epsFact, __pyx_v_particle_alpha, __pyx_v_particle_beta, __pyx_v_particle_penalty_constant, __pyx_v_particle_signed_distances, __pyx_v_particle_signed_distance_normals, __pyx_v_particle_velocities, __pyx_v_particle_centroids, __pyx_v_particle_nitsche, __pyx_v_KILL_PRESSURE_TERM, __pyx_v_MATERIAL_PARAMETERS_AS_FUNCTION, __pyx_v_density_as_function, __pyx_v_dynamic_viscosity_as_function, __pyx_v_ebqe_density_as_function, __pyx_v_ebqe_dynamic_viscosity_as_function);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6mprans_8cRANS3PF_7RANS3PF_10calculateJacobian_entropy_viscosity(struct __pyx_obj_6mprans_8cRANS3PF_RANS3PF *__pyx_v_self, PyArrayObject *__pyx_v_mesh_trial_ref, PyArrayObject *__pyx_v_mesh_grad_trial_ref, PyArrayObject *__pyx_v_mesh_dof, PyArrayObject *__pyx_v_mesh_velocity_dof, double __pyx_v_MOVING_DOMAIN, double __pyx_v_PSTAB, PyArrayObject *__pyx_v_mesh_l2g, PyArrayObject *__pyx_v_dV_ref, PyArrayObject *__pyx_v_p_trial_ref, PyArrayObject *__pyx_v_p_grad_trial_ref, PyArrayObject *__pyx_v_p_test_ref, PyArrayObject *__pyx_v_p_grad_test_ref, PyArrayObject *__pyx_v_q_p, PyArrayObject *__pyx_v_q_grad_p, PyArrayObject *__pyx_v_ebqe_p, PyArrayObject *__pyx_v_ebqe_grad_p, PyArrayObject *__pyx_v_vel_trial_ref, PyArrayObject *__pyx_v_vel_grad_trial_ref, PyArrayObject *__pyx_v_vel_hess_trial_ref, PyArrayObject *__pyx_v_vel_test_ref, PyArrayObject *__pyx_v_vel_grad_test_ref, PyArrayObject *__pyx_v_mesh_trial_trace_ref, PyArrayObject *__pyx_v_mesh_grad_trial_trace_ref, PyArrayObject *__pyx_v_dS_ref, PyArrayObject *__pyx_v_p_trial_trace_ref, PyArrayObject *__pyx_v_p_grad_trial_trace_ref, PyArrayObject *__pyx_v_p_test_trace_ref, PyArrayObject *__pyx_v_p_grad_test_trace_ref, PyArrayObject *__pyx_v_vel_trial_trace_ref, PyArrayObject *__pyx_v_vel_grad_trial_trace_ref, PyArrayObject *__pyx_v_vel_test_trace_ref, PyArrayObject *__pyx_v_vel_grad_test_trace_ref, PyArrayObject *__pyx_v_normal_ref, PyArrayObject *__pyx_v_boundaryJac_ref, double __pyx_v_eb_adjoint_sigma, PyArrayObject *__pyx_v_elementDiameter, PyArrayObject *__pyx_v_nodeDiametersArray, double __pyx_v_hFactor, int __pyx_v_nElements_global, int __pyx_v_nElements_owned, double __pyx_v_useRBLES, double __pyx_v_useMetrics, double __pyx_v_alphaBDF, double __pyx_v_epsFact_rho, double __pyx_v_epsFact_mu, double __pyx_v_sigma, double __pyx_v_rho_0, double __pyx_v_nu_0, double __pyx_v_rho_1, double __pyx_v_nu_1, double __pyx_v_smagorinskyConstant, int __pyx_v_turbulenceClosureModel, double __pyx_v_Ct_sge, double __pyx_v_Cd_sge, double __pyx_v_C_dg, double __pyx_v_C_b, PyArrayObject *__pyx_v_eps_solid, PyArrayObject *__pyx_v_phi_solid, PyArrayObject *__pyx_v_q_velocity_solid, PyArrayObject *__pyx_v_q_vos, PyArrayObject *__pyx_v_q_dvos_dt, PyArrayObject *__pyx_v_q_dragAlpha, PyArrayObject *__pyx_v_q_dragBeta, PyArrayObject *__pyx_v_q_mass_source, PyArrayObject *__pyx_v_q_turb_var_0, PyArrayObject *__pyx_v_q_turb_var_1, PyArrayObject *__pyx_v_q_turb_var_grad_0, PyArrayObject *__pyx_v_p_l2g, PyArrayObject *__pyx_v_vel_l2g, PyArrayObject *__pyx_v_p_dof, PyArrayObject *__pyx_v_u_dof, PyArrayObject *__pyx_v_v_dof, PyArrayObject *__pyx_v_w_dof, PyArrayObject *__pyx_v_g, double __pyx_v_useVF, PyArrayObject *__pyx_v_vf, PyArrayObject *__pyx_v_phi, PyArrayObject *__pyx_v_normal_phi, PyArrayObject *__pyx_v_kappa_phi, PyArrayObject *__pyx_v_q_mom_u_acc_beta_bdf, PyArrayObject *__pyx_v_q_mom_v_acc_beta_bdf, PyArrayObject *__pyx_v_q_mom_w_acc_beta_bdf, PyArrayObject *__pyx_v_q_dV, PyArrayObject *__pyx_v_q_dV_last, PyArrayObject *__pyx_v_q_velocity_sge, PyArrayObject *__pyx_v_ebqe_velocity_star, PyArrayObject *__pyx_v_q_cfl, PyArrayObject *__pyx_v_q_numDiff_u_last, PyArrayObject *__pyx_v_q_numDiff_v_last, PyArrayObject *__pyx_v_q_numDiff_w_last, PyArrayObject *__pyx_v_sdInfo_u_u_rowptr, PyArrayObject *__pyx_v_sdInfo_u_u_colind, PyArrayObject *__pyx_v_sdInfo_u_v_rowptr, PyArrayObject *__pyx_v_sdInfo_u_v_colind, PyArrayObject *__pyx_v_sdInfo_u_w_rowptr, PyArrayObject *__pyx_v_sdInfo_u_w_colind, PyArrayObject *__pyx_v_sdInfo_v_v_rowptr, PyArrayObject *__pyx_v_sdInfo_v_v_colind, PyArrayObject *__pyx_v_sdInfo_v_u_rowptr, PyArrayObject *__pyx_v_sdInfo_v_u_colind, PyArrayObject *__pyx_v_sdInfo_v_w_rowptr, PyArrayObject *__pyx_v_sdInfo_v_w_colind, PyArrayObject *__pyx_v_sdInfo_w_w_rowptr, PyArrayObject *__pyx_v_sdInfo_w_w_colind, PyArrayObject *__pyx_v_sdInfo_w_u_rowptr, PyArrayObject *__pyx_v_sdInfo_w_u_colind, PyArrayObject *__pyx_v_sdInfo_w_v_rowptr, PyArrayObject *__pyx_v_sdInfo_w_v_colind, PyArrayObject *__pyx_v_csrRowIndeces_p_p, PyArrayObject *__pyx_v_csrColumnOffsets_p_p, PyArrayObject *__pyx_v_csrRowIndeces_p_u, PyArrayObject *__pyx_v_csrColumnOffsets_p_u, PyArrayObject *__pyx_v_csrRowIndeces_p_v, PyArrayObject *__pyx_v_csrColumnOffsets_p_v, PyArrayObject *__pyx_v_csrRowIndeces_p_w, PyArrayObject *__pyx_v_csrColumnOffsets_p_w, PyArrayObject *__pyx_v_csrRowIndeces_u_p, PyArrayObject *__pyx_v_csrColumnOffsets_u_p, PyArrayObject *__pyx_v_csrRowIndeces_u_u, PyArrayObject *__pyx_v_csrColumnOffsets_u_u, PyArrayObject *__pyx_v_csrRowIndeces_u_v, PyArrayObject *__pyx_v_csrColumnOffsets_u_v, PyArrayObject *__pyx_v_csrRowIndeces_u_w, PyArrayObject *__pyx_v_csrColumnOffsets_u_w, PyArrayObject *__pyx_v_csrRowIndeces_v_p, PyArrayObject *__pyx_v_csrColumnOffsets_v_p, PyArrayObject *__pyx_v_csrRowIndeces_v_u, PyArrayObject *__pyx_v_csrColumnOffsets_v_u, PyArrayObject *__pyx_v_csrRowIndeces_v_v, PyArrayObject *__pyx_v_csrColumnOffsets_v_v, PyArrayObject *__pyx_v_csrRowIndeces_v_w, PyArrayObject *__pyx_v_csrColumnOffsets_v_w, PyArrayObject *__pyx_v_csrRowIndeces_w_p, PyArrayObject *__pyx_v_csrColumnOffsets_w_p, PyArrayObject *__pyx_v_csrRowIndeces_w_u, PyArrayObject *__pyx_v_csrColumnOffsets_w_u, PyArrayObject *__pyx_v_csrRowIndeces_w_v, PyArrayObject *__pyx_v_csrColumnOffsets_w_v, PyArrayObject *__pyx_v_csrRowIndeces_w_w, PyArrayObject *__pyx_v_csrColumnOffsets_w_w, PyObject *__pyx_v_globalJacobian, int __pyx_v_nExteriorElementBoundaries_global, PyArrayObject *__pyx_v_exteriorElementBoundariesArray, PyArrayObject *__pyx_v_elementBoundaryElementsArray, PyArrayObject *__pyx_v_elementBoundaryLocalElementBoundariesArray, PyArrayObject *__pyx_v_ebqe_vf_ext, PyArrayObject *__pyx_v_bc_ebqe_vf_ext, PyArrayObject *__pyx_v_ebqe_phi_ext, PyArrayObject *__pyx_v_bc_ebqe_phi_ext, PyArrayObject *__pyx_v_ebqe_normal_phi_ext, PyArrayObject *__pyx_v_ebqe_kappa_phi_ext, PyArrayObject *__pyx_v_ebqe_vos_ext, PyArrayObject *__pyx_v_ebqe_turb_var_0, PyArrayObject *__pyx_v_ebqe_turb_var_1, PyArrayObject *__pyx_v_isDOFBoundary_p, PyArrayObject *__pyx_v_isDOFBoundary_u, PyArrayObject *__pyx_v_isDOFBoundary_v, PyArrayObject *__pyx_v_isDOFBoundary_w, PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_p, PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_u, PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_v, PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_w, PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_u, PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_v, PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_w, PyArrayObject *__pyx_v_ebqe_bc_p_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_mass_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_mom_u_adv_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_mom_v_adv_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_mom_w_adv_ext, PyArrayObject *__pyx_v_ebqe_bc_u_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_u_diff_ext, PyArrayObject *__pyx_v_ebqe_penalty_ext, PyArrayObject *__pyx_v_ebqe_bc_v_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_v_diff_ext, PyArrayObject *__pyx_v_ebqe_bc_w_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_w_diff_ext, PyArrayObject *__pyx_v_csrColumnOffsets_eb_p_p, PyArrayObject *__pyx_v_csrColumnOffsets_eb_p_u, PyArrayObject *__pyx_v_csrColumnOffsets_eb_p_v, PyArrayObject *__pyx_v_csrColumnOffsets_eb_p_w, PyArrayObject *__pyx_v_csrColumnOffsets_eb_u_p, PyArrayObject *__pyx_v_csrColumnOffsets_eb_u_u, PyArrayObject *__pyx_v_csrColumnOffsets_eb_u_v, PyArrayObject *__pyx_v_csrColumnOffsets_eb_u_w, PyArrayObject *__pyx_v_csrColumnOffsets_eb_v_p, PyArrayObject *__pyx_v_csrColumnOffsets_eb_v_u, PyArrayObject *__pyx_v_csrColumnOffsets_eb_v_v, PyArrayObject *__pyx_v_csrColumnOffsets_eb_v_w, PyArrayObject *__pyx_v_csrColumnOffsets_eb_w_p, PyArrayObject *__pyx_v_csrColumnOffsets_eb_w_u, PyArrayObject *__pyx_v_csrColumnOffsets_eb_w_v, PyArrayObject *__pyx_v_csrColumnOffsets_eb_w_w, PyArrayObject *__pyx_v_elementFlags, int __pyx_v_nParticles, double __pyx_v_particle_epsFact, double __pyx_v_particle_alpha, double __pyx_v_particle_beta, double __pyx_v_particle_penalty_constant, PyArrayObject *__pyx_v_particle_signed_distances, PyArrayObject *__pyx_v_particle_signed_distance_normals, PyArrayObject *__pyx_v_particle_velocities, PyArrayObject *__pyx_v_particle_centroids, double __pyx_v_particle_nitsche, int __pyx_v_KILL_PRESSURE_TERM, int __pyx_v_MATERIAL_PARAMETERS_AS_FUNCTION, PyArrayObject *__pyx_v_density_as_function, PyArrayObject *__pyx_v_dynamic_viscosity_as_function, PyArrayObject *__pyx_v_ebqe_density_as_function, PyArrayObject *__pyx_v_ebqe_dynamic_viscosity_as_function) {
  CYTHON_UNUSED PyArrayObject *__pyx_v_rowptr = 0;
  CYTHON_UNUSED PyArrayObject *__pyx_v_colind = 0;
  PyArrayObject *__pyx_v_globalJacobian_a = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  __Pyx_RefNannySetupContext("calculateJacobian_entropy_viscosity", 0);

  /* "mprans/cRANS3PF.pyx":2359
 *                                             numpy.ndarray ebqe_dynamic_viscosity_as_function):
 *         cdef numpy.ndarray rowptr, colind, globalJacobian_a
 *         (rowptr, colind, globalJacobian_a) = globalJacobian.getCSRrepresentation()             # <<<<<<<<<<<<<<
 *         self.thisptr.calculateJacobian_entropy_viscosity(< double *> mesh_trial_ref.data,
 *                                                          < double * > mesh_grad_trial_ref.data,
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_globalJacobian, __pyx_n_s_getCSRrepresentation); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2359, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2359, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2359, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    #if !CYTHON_COMPILING_IN_PYPY
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 3)) {
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 2359, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 2); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2359, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2359, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2359, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_5 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2359, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = Py_TYPE(__pyx_t_5)->tp_iternext;
    index = 0; __pyx_t_2 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_3 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    index = 2; __pyx_t_4 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_4)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_4);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_5), 3) < 0) __PYX_ERR(0, 2359, __pyx_L1_error)
    __pyx_t_6 = NULL;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 2359, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 2359, __pyx_L1_error)
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 2359, __pyx_L1_error)
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 2359, __pyx_L1_error)
  __pyx_v_rowptr = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_v_colind = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_v_globalJacobian_a = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "mprans/cRANS3PF.pyx":2360
 *         cdef numpy.ndarray rowptr, colind, globalJacobian_a
 *         (rowptr, colind, globalJacobian_a) = globalJacobian.getCSRrepresentation()
 *         self.thisptr.calculateJacobian_entropy_viscosity(< double *> mesh_trial_ref.data,             # <<<<<<<<<<<<<<
 *                                                          < double * > mesh_grad_trial_ref.data,
 *                                                          < double * > mesh_dof.data,
 */
  __pyx_v_self->thisptr->calculateJacobian_entropy_viscosity(((double *)__pyx_v_mesh_trial_ref->data), ((double *)__pyx_v_mesh_grad_trial_ref->data), ((double *)__pyx_v_mesh_dof->data), ((double *)__pyx_v_mesh_velocity_dof->data), __pyx_v_MOVING_DOMAIN, __pyx_v_PSTAB, ((int *)__pyx_v_mesh_l2g->data), ((double *)__pyx_v_dV_ref->data), ((double *)__pyx_v_p_trial_ref->data), ((double *)__pyx_v_p_grad_trial_ref->data), ((double *)__pyx_v_p_test_ref->data), ((double *)__pyx_v_p_grad_test_ref->data), ((double *)__pyx_v_q_p->data), ((double *)__pyx_v_q_grad_p->data), ((double *)__pyx_v_ebqe_p->data), ((double *)__pyx_v_ebqe_grad_p->data), ((double *)__pyx_v_vel_trial_ref->data), ((double *)__pyx_v_vel_grad_trial_ref->data), ((double *)__pyx_v_vel_hess_trial_ref->data), ((double *)__pyx_v_vel_test_ref->data), ((double *)__pyx_v_vel_grad_test_ref->data), ((double *)__pyx_v_mesh_trial_trace_ref->data), ((double *)__pyx_v_mesh_grad_trial_trace_ref->data), ((double *)__pyx_v_dS_ref->data), ((double *)__pyx_v_p_trial_trace_ref->data), ((double *)__pyx_v_p_grad_trial_trace_ref->data), ((double *)__pyx_v_p_test_trace_ref->data), ((double *)__pyx_v_p_grad_test_trace_ref->data), ((double *)__pyx_v_vel_trial_trace_ref->data), ((double *)__pyx_v_vel_grad_trial_trace_ref->data), ((double *)__pyx_v_vel_test_trace_ref->data), ((double *)__pyx_v_vel_grad_test_trace_ref->data), ((double *)__pyx_v_normal_ref->data), ((double *)__pyx_v_boundaryJac_ref->data), __pyx_v_eb_adjoint_sigma, ((double *)__pyx_v_elementDiameter->data), ((double *)__pyx_v_nodeDiametersArray->data), __pyx_v_hFactor, __pyx_v_nElements_global, __pyx_v_nElements_owned, __pyx_v_useRBLES, __pyx_v_useMetrics, __pyx_v_alphaBDF, __pyx_v_epsFact_rho, __pyx_v_epsFact_mu, __pyx_v_sigma, __pyx_v_rho_0, __pyx_v_nu_0, __pyx_v_rho_1, __pyx_v_nu_1, __pyx_v_smagorinskyConstant, __pyx_v_turbulenceClosureModel, __pyx_v_Ct_sge, __pyx_v_Cd_sge, __pyx_v_C_dg, __pyx_v_C_b, ((double *)__pyx_v_eps_solid->data), ((double *)__pyx_v_phi_solid->data), ((double *)__pyx_v_q_velocity_solid->data), ((double *)__pyx_v_q_vos->data), ((double *)__pyx_v_q_dvos_dt->data), ((double *)__pyx_v_q_dragAlpha->data), ((double *)__pyx_v_q_dragBeta->data), ((double *)__pyx_v_q_mass_source->data), ((double *)__pyx_v_q_turb_var_0->data), ((double *)__pyx_v_q_turb_var_1->data), ((double *)__pyx_v_q_turb_var_grad_0->data), ((int *)__pyx_v_p_l2g->data), ((int *)__pyx_v_vel_l2g->data), ((double *)__pyx_v_p_dof->data), ((double *)__pyx_v_u_dof->data), ((double *)__pyx_v_v_dof->data), ((double *)__pyx_v_w_dof->data), ((double *)__pyx_v_g->data), __pyx_v_useVF, ((double *)__pyx_v_vf->data), ((double *)__pyx_v_phi->data), ((double *)__pyx_v_normal_phi->data), ((double *)__pyx_v_kappa_phi->data), ((double *)__pyx_v_q_mom_u_acc_beta_bdf->data), ((double *)__pyx_v_q_mom_v_acc_beta_bdf->data), ((double *)__pyx_v_q_mom_w_acc_beta_bdf->data), ((double *)__pyx_v_q_dV->data), ((double *)__pyx_v_q_dV_last->data), ((double *)__pyx_v_q_velocity_sge->data), ((double *)__pyx_v_ebqe_velocity_star->data), ((double *)__pyx_v_q_cfl->data), ((double *)__pyx_v_q_numDiff_u_last->data), ((double *)__pyx_v_q_numDiff_v_last->data), ((double *)__pyx_v_q_numDiff_w_last->data), ((int *)__pyx_v_sdInfo_u_u_rowptr->data), ((int *)__pyx_v_sdInfo_u_u_colind->data), ((int *)__pyx_v_sdInfo_u_v_rowptr->data), ((int *)__pyx_v_sdInfo_u_v_colind->data), ((int *)__pyx_v_sdInfo_u_w_rowptr->data), ((int *)__pyx_v_sdInfo_u_w_colind->data), ((int *)__pyx_v_sdInfo_v_v_rowptr->data), ((int *)__pyx_v_sdInfo_v_v_colind->data), ((int *)__pyx_v_sdInfo_v_u_rowptr->data), ((int *)__pyx_v_sdInfo_v_u_colind->data), ((int *)__pyx_v_sdInfo_v_w_rowptr->data), ((int *)__pyx_v_sdInfo_v_w_colind->data), ((int *)__pyx_v_sdInfo_w_w_rowptr->data), ((int *)__pyx_v_sdInfo_w_w_colind->data), ((int *)__pyx_v_sdInfo_w_u_rowptr->data), ((int *)__pyx_v_sdInfo_w_u_colind->data), ((int *)__pyx_v_sdInfo_w_v_rowptr->data), ((int *)__pyx_v_sdInfo_w_v_colind->data), ((int *)__pyx_v_csrRowIndeces_p_p->data), ((int *)__pyx_v_csrColumnOffsets_p_p->data), ((int *)__pyx_v_csrRowIndeces_p_u->data), ((int *)__pyx_v_csrColumnOffsets_p_u->data), ((int *)__pyx_v_csrRowIndeces_p_v->data), ((int *)__pyx_v_csrColumnOffsets_p_v->data), ((int *)__pyx_v_csrRowIndeces_p_w->data), ((int *)__pyx_v_csrColumnOffsets_p_w->data), ((int *)__pyx_v_csrRowIndeces_u_p->data), ((int *)__pyx_v_csrColumnOffsets_u_p->data), ((int *)__pyx_v_csrRowIndeces_u_u->data), ((int *)__pyx_v_csrColumnOffsets_u_u->data), ((int *)__pyx_v_csrRowIndeces_u_v->data), ((int *)__pyx_v_csrColumnOffsets_u_v->data), ((int *)__pyx_v_csrRowIndeces_u_w->data), ((int *)__pyx_v_csrColumnOffsets_u_w->data), ((int *)__pyx_v_csrRowIndeces_v_p->data), ((int *)__pyx_v_csrColumnOffsets_v_p->data), ((int *)__pyx_v_csrRowIndeces_v_u->data), ((int *)__pyx_v_csrColumnOffsets_v_u->data), ((int *)__pyx_v_csrRowIndeces_v_v->data), ((int *)__pyx_v_csrColumnOffsets_v_v->data), ((int *)__pyx_v_csrRowIndeces_v_w->data), ((int *)__pyx_v_csrColumnOffsets_v_w->data), ((int *)__pyx_v_csrRowIndeces_w_p->data), ((int *)__pyx_v_csrColumnOffsets_w_p->data), ((int *)__pyx_v_csrRowIndeces_w_u->data), ((int *)__pyx_v_csrColumnOffsets_w_u->data), ((int *)__pyx_v_csrRowIndeces_w_v->data), ((int *)__pyx_v_csrColumnOffsets_w_v->data), ((int *)__pyx_v_csrRowIndeces_w_w->data), ((int *)__pyx_v_csrColumnOffsets_w_w->data), ((double *)__pyx_v_globalJacobian_a->data), __pyx_v_nExteriorElementBoundaries_global, ((int *)__pyx_v_exteriorElementBoundariesArray->data), ((int *)__pyx_v_elementBoundaryElementsArray->data), ((int *)__pyx_v_elementBoundaryLocalElementBoundariesArray->data), ((double *)__pyx_v_ebqe_vf_ext->data), ((double *)__pyx_v_bc_ebqe_vf_ext->data), ((double *)__pyx_v_ebqe_phi_ext->data), ((double *)__pyx_v_bc_ebqe_phi_ext->data), ((double *)__pyx_v_ebqe_normal_phi_ext->data), ((double *)__pyx_v_ebqe_kappa_phi_ext->data), ((double *)__pyx_v_ebqe_vos_ext->data), ((double *)__pyx_v_ebqe_turb_var_0->data), ((double *)__pyx_v_ebqe_turb_var_1->data), ((int *)__pyx_v_isDOFBoundary_p->data), ((int *)__pyx_v_isDOFBoundary_u->data), ((int *)__pyx_v_isDOFBoundary_v->data), ((int *)__pyx_v_isDOFBoundary_w->data), ((int *)__pyx_v_isAdvectiveFluxBoundary_p->data), ((int *)__pyx_v_isAdvectiveFluxBoundary_u->data), ((int *)__pyx_v_isAdvectiveFluxBoundary_v->data), ((int *)__pyx_v_isAdvectiveFluxBoundary_w->data), ((int *)__pyx_v_isDiffusiveFluxBoundary_u->data), ((int *)__pyx_v_isDiffusiveFluxBoundary_v->data), ((int *)__pyx_v_isDiffusiveFluxBoundary_w->data), ((double *)__pyx_v_ebqe_bc_p_ext->data), ((double *)__pyx_v_ebqe_bc_flux_mass_ext->data), ((double *)__pyx_v_ebqe_bc_flux_mom_u_adv_ext->data), ((double *)__pyx_v_ebqe_bc_flux_mom_v_adv_ext->data), ((double *)__pyx_v_ebqe_bc_flux_mom_w_adv_ext->data), ((double *)__pyx_v_ebqe_bc_u_ext->data), ((double *)__pyx_v_ebqe_bc_flux_u_diff_ext->data), ((double *)__pyx_v_ebqe_penalty_ext->data), ((double *)__pyx_v_ebqe_bc_v_ext->data), ((double *)__pyx_v_ebqe_bc_flux_v_diff_ext->data), ((double *)__pyx_v_ebqe_bc_w_ext->data), ((double *)__pyx_v_ebqe_bc_flux_w_diff_ext->data), ((int *)__pyx_v_csrColumnOffsets_eb_p_p->data), ((int *)__pyx_v_csrColumnOffsets_eb_p_u->data), ((int *)__pyx_v_csrColumnOffsets_eb_p_v->data), ((int *)__pyx_v_csrColumnOffsets_eb_p_w->data), ((int *)__pyx_v_csrColumnOffsets_eb_u_p->data), ((int *)__pyx_v_csrColumnOffsets_eb_u_u->data), ((int *)__pyx_v_csrColumnOffsets_eb_u_v->data), ((int *)__pyx_v_csrColumnOffsets_eb_u_w->data), ((int *)__pyx_v_csrColumnOffsets_eb_v_p->data), ((int *)__pyx_v_csrColumnOffsets_eb_v_u->data), ((int *)__pyx_v_csrColumnOffsets_eb_v_v->data), ((int *)__pyx_v_csrColumnOffsets_eb_v_w->data), ((int *)__pyx_v_csrColumnOffsets_eb_w_p->data), ((int *)__pyx_v_csrColumnOffsets_eb_w_u->data), ((int *)__pyx_v_csrColumnOffsets_eb_w_v->data), ((int *)__pyx_v_csrColumnOffsets_eb_w_w->data), ((int *)__pyx_v_elementFlags->data), __pyx_v_nParticles, __pyx_v_particle_epsFact, __pyx_v_particle_alpha, __pyx_v_particle_beta, __pyx_v_particle_penalty_constant, ((double *)__pyx_v_particle_signed_distances->data), ((double *)__pyx_v_particle_signed_distance_normals->data), ((double *)__pyx_v_particle_velocities->data), ((double *)__pyx_v_particle_centroids->data), __pyx_v_particle_nitsche, __pyx_v_KILL_PRESSURE_TERM, __pyx_v_MATERIAL_PARAMETERS_AS_FUNCTION, ((double *)__pyx_v_density_as_function->data), ((double *)__pyx_v_dynamic_viscosity_as_function->data), ((double *)__pyx_v_ebqe_density_as_function->data), ((double *)__pyx_v_ebqe_dynamic_viscosity_as_function->data));

  /* "mprans/cRANS3PF.pyx":2175
 *                                                          < double * > ebqe_dynamic_viscosity_as_function.data,
 *                                                          order_polynomial)
 *     def calculateJacobian_entropy_viscosity(self,             # <<<<<<<<<<<<<<
 *                                             numpy.ndarray mesh_trial_ref,
 *                                             numpy.ndarray mesh_grad_trial_ref,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("mprans.cRANS3PF.RANS3PF.calculateJacobian_entropy_viscosity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_rowptr);
  __Pyx_XDECREF((PyObject *)__pyx_v_colind);
  __Pyx_XDECREF((PyObject *)__pyx_v_globalJacobian_a);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mprans/cRANS3PF.pyx":2542
 *                                                          < double * > ebqe_density_as_function.data,
 *                                                          < double * > ebqe_dynamic_viscosity_as_function.data)
 *     def calculateVelocityAverage(self,             # <<<<<<<<<<<<<<
 *                                  int nExteriorElementBoundaries_global,
 *                                  numpy.ndarray exteriorElementBoundariesArray,
 */

/* Python wrapper */
static PyObject *__pyx_pw_6mprans_8cRANS3PF_7RANS3PF_13calculateVelocityAverage(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6mprans_8cRANS3PF_7RANS3PF_13calculateVelocityAverage(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_nExteriorElementBoundaries_global;
  PyArrayObject *__pyx_v_exteriorElementBoundariesArray = 0;
  int __pyx_v_nInteriorElementBoundaries_global;
  PyArrayObject *__pyx_v_interiorElementBoundariesArray = 0;
  PyArrayObject *__pyx_v_elementBoundaryElementsArray = 0;
  PyArrayObject *__pyx_v_elementBoundaryLocalElementBoundariesArray = 0;
  PyArrayObject *__pyx_v_mesh_dof = 0;
  PyArrayObject *__pyx_v_mesh_velocity_dof = 0;
  double __pyx_v_MOVING_DOMAIN;
  PyArrayObject *__pyx_v_mesh_l2g = 0;
  PyArrayObject *__pyx_v_mesh_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_mesh_grad_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_normal_ref = 0;
  PyArrayObject *__pyx_v_boundaryJac_ref = 0;
  PyArrayObject *__pyx_v_vel_l2g = 0;
  PyArrayObject *__pyx_v_u_dof = 0;
  PyArrayObject *__pyx_v_v_dof = 0;
  PyArrayObject *__pyx_v_w_dof = 0;
  PyArrayObject *__pyx_v_vos_dof = 0;
  PyArrayObject *__pyx_v_vel_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_ebqe_velocity = 0;
  PyArrayObject *__pyx_v_velocityAverage = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calculateVelocityAverage (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_nExteriorElementBoundaries_globa,&__pyx_n_s_exteriorElementBoundariesArray,&__pyx_n_s_nInteriorElementBoundaries_globa,&__pyx_n_s_interiorElementBoundariesArray,&__pyx_n_s_elementBoundaryElementsArray,&__pyx_n_s_elementBoundaryLocalElementBound,&__pyx_n_s_mesh_dof,&__pyx_n_s_mesh_velocity_dof,&__pyx_n_s_MOVING_DOMAIN,&__pyx_n_s_mesh_l2g,&__pyx_n_s_mesh_trial_trace_ref,&__pyx_n_s_mesh_grad_trial_trace_ref,&__pyx_n_s_normal_ref,&__pyx_n_s_boundaryJac_ref,&__pyx_n_s_vel_l2g,&__pyx_n_s_u_dof,&__pyx_n_s_v_dof,&__pyx_n_s_w_dof,&__pyx_n_s_vos_dof,&__pyx_n_s_vel_trial_trace_ref,&__pyx_n_s_ebqe_velocity,&__pyx_n_s_velocityAverage,0};
    PyObject* values[22] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 22: values[21] = PyTuple_GET_ITEM(__pyx_args, 21);
        case 21: values[20] = PyTuple_GET_ITEM(__pyx_args, 20);
        case 20: values[19] = PyTuple_GET_ITEM(__pyx_args, 19);
        case 19: values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
        case 18: values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
        case 17: values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nExteriorElementBoundaries_globa)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_exteriorElementBoundariesArray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateVelocityAverage", 1, 22, 22, 1); __PYX_ERR(0, 2542, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nInteriorElementBoundaries_globa)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateVelocityAverage", 1, 22, 22, 2); __PYX_ERR(0, 2542, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_interiorElementBoundariesArray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateVelocityAverage", 1, 22, 22, 3); __PYX_ERR(0, 2542, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_elementBoundaryElementsArray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateVelocityAverage", 1, 22, 22, 4); __PYX_ERR(0, 2542, __pyx_L3_error)
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_elementBoundaryLocalElementBound)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateVelocityAverage", 1, 22, 22, 5); __PYX_ERR(0, 2542, __pyx_L3_error)
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateVelocityAverage", 1, 22, 22, 6); __PYX_ERR(0, 2542, __pyx_L3_error)
        }
        case  7:
        if (likely((values[7] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_velocity_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateVelocityAverage", 1, 22, 22, 7); __PYX_ERR(0, 2542, __pyx_L3_error)
        }
        case  8:
        if (likely((values[8] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_MOVING_DOMAIN)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateVelocityAverage", 1, 22, 22, 8); __PYX_ERR(0, 2542, __pyx_L3_error)
        }
        case  9:
        if (likely((values[9] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_l2g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateVelocityAverage", 1, 22, 22, 9); __PYX_ERR(0, 2542, __pyx_L3_error)
        }
        case 10:
        if (likely((values[10] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateVelocityAverage", 1, 22, 22, 10); __PYX_ERR(0, 2542, __pyx_L3_error)
        }
        case 11:
        if (likely((values[11] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_grad_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateVelocityAverage", 1, 22, 22, 11); __PYX_ERR(0, 2542, __pyx_L3_error)
        }
        case 12:
        if (likely((values[12] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_normal_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateVelocityAverage", 1, 22, 22, 12); __PYX_ERR(0, 2542, __pyx_L3_error)
        }
        case 13:
        if (likely((values[13] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_boundaryJac_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateVelocityAverage", 1, 22, 22, 13); __PYX_ERR(0, 2542, __pyx_L3_error)
        }
        case 14:
        if (likely((values[14] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_l2g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateVelocityAverage", 1, 22, 22, 14); __PYX_ERR(0, 2542, __pyx_L3_error)
        }
        case 15:
        if (likely((values[15] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_u_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateVelocityAverage", 1, 22, 22, 15); __PYX_ERR(0, 2542, __pyx_L3_error)
        }
        case 16:
        if (likely((values[16] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_v_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateVelocityAverage", 1, 22, 22, 16); __PYX_ERR(0, 2542, __pyx_L3_error)
        }
        case 17:
        if (likely((values[17] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_w_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateVelocityAverage", 1, 22, 22, 17); __PYX_ERR(0, 2542, __pyx_L3_error)
        }
        case 18:
        if (likely((values[18] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vos_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateVelocityAverage", 1, 22, 22, 18); __PYX_ERR(0, 2542, __pyx_L3_error)
        }
        case 19:
        if (likely((values[19] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateVelocityAverage", 1, 22, 22, 19); __PYX_ERR(0, 2542, __pyx_L3_error)
        }
        case 20:
        if (likely((values[20] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_velocity)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateVelocityAverage", 1, 22, 22, 20); __PYX_ERR(0, 2542, __pyx_L3_error)
        }
        case 21:
        if (likely((values[21] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_velocityAverage)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateVelocityAverage", 1, 22, 22, 21); __PYX_ERR(0, 2542, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calculateVelocityAverage") < 0)) __PYX_ERR(0, 2542, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 22) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
      values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
      values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
      values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
      values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
      values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
      values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
      values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
      values[19] = PyTuple_GET_ITEM(__pyx_args, 19);
      values[20] = PyTuple_GET_ITEM(__pyx_args, 20);
      values[21] = PyTuple_GET_ITEM(__pyx_args, 21);
    }
    __pyx_v_nExteriorElementBoundaries_global = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_nExteriorElementBoundaries_global == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2543, __pyx_L3_error)
    __pyx_v_exteriorElementBoundariesArray = ((PyArrayObject *)values[1]);
    __pyx_v_nInteriorElementBoundaries_global = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_nInteriorElementBoundaries_global == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2545, __pyx_L3_error)
    __pyx_v_interiorElementBoundariesArray = ((PyArrayObject *)values[3]);
    __pyx_v_elementBoundaryElementsArray = ((PyArrayObject *)values[4]);
    __pyx_v_elementBoundaryLocalElementBoundariesArray = ((PyArrayObject *)values[5]);
    __pyx_v_mesh_dof = ((PyArrayObject *)values[6]);
    __pyx_v_mesh_velocity_dof = ((PyArrayObject *)values[7]);
    __pyx_v_MOVING_DOMAIN = __pyx_PyFloat_AsDouble(values[8]); if (unlikely((__pyx_v_MOVING_DOMAIN == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2551, __pyx_L3_error)
    __pyx_v_mesh_l2g = ((PyArrayObject *)values[9]);
    __pyx_v_mesh_trial_trace_ref = ((PyArrayObject *)values[10]);
    __pyx_v_mesh_grad_trial_trace_ref = ((PyArrayObject *)values[11]);
    __pyx_v_normal_ref = ((PyArrayObject *)values[12]);
    __pyx_v_boundaryJac_ref = ((PyArrayObject *)values[13]);
    __pyx_v_vel_l2g = ((PyArrayObject *)values[14]);
    __pyx_v_u_dof = ((PyArrayObject *)values[15]);
    __pyx_v_v_dof = ((PyArrayObject *)values[16]);
    __pyx_v_w_dof = ((PyArrayObject *)values[17]);
    __pyx_v_vos_dof = ((PyArrayObject *)values[18]);
    __pyx_v_vel_trial_trace_ref = ((PyArrayObject *)values[19]);
    __pyx_v_ebqe_velocity = ((PyArrayObject *)values[20]);
    __pyx_v_velocityAverage = ((PyArrayObject *)values[21]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calculateVelocityAverage", 1, 22, 22, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2542, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mprans.cRANS3PF.RANS3PF.calculateVelocityAverage", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_exteriorElementBoundariesArray), __pyx_ptype_5numpy_ndarray, 1, "exteriorElementBoundariesArray", 0))) __PYX_ERR(0, 2544, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_interiorElementBoundariesArray), __pyx_ptype_5numpy_ndarray, 1, "interiorElementBoundariesArray", 0))) __PYX_ERR(0, 2546, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_elementBoundaryElementsArray), __pyx_ptype_5numpy_ndarray, 1, "elementBoundaryElementsArray", 0))) __PYX_ERR(0, 2547, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_elementBoundaryLocalElementBoundariesArray), __pyx_ptype_5numpy_ndarray, 1, "elementBoundaryLocalElementBoundariesArray", 0))) __PYX_ERR(0, 2548, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_dof), __pyx_ptype_5numpy_ndarray, 1, "mesh_dof", 0))) __PYX_ERR(0, 2549, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_velocity_dof), __pyx_ptype_5numpy_ndarray, 1, "mesh_velocity_dof", 0))) __PYX_ERR(0, 2550, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_l2g), __pyx_ptype_5numpy_ndarray, 1, "mesh_l2g", 0))) __PYX_ERR(0, 2552, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "mesh_trial_trace_ref", 0))) __PYX_ERR(0, 2553, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_grad_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "mesh_grad_trial_trace_ref", 0))) __PYX_ERR(0, 2554, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_normal_ref), __pyx_ptype_5numpy_ndarray, 1, "normal_ref", 0))) __PYX_ERR(0, 2555, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_boundaryJac_ref), __pyx_ptype_5numpy_ndarray, 1, "boundaryJac_ref", 0))) __PYX_ERR(0, 2556, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_l2g), __pyx_ptype_5numpy_ndarray, 1, "vel_l2g", 0))) __PYX_ERR(0, 2557, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_u_dof), __pyx_ptype_5numpy_ndarray, 1, "u_dof", 0))) __PYX_ERR(0, 2558, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_v_dof), __pyx_ptype_5numpy_ndarray, 1, "v_dof", 0))) __PYX_ERR(0, 2559, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_w_dof), __pyx_ptype_5numpy_ndarray, 1, "w_dof", 0))) __PYX_ERR(0, 2560, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vos_dof), __pyx_ptype_5numpy_ndarray, 1, "vos_dof", 0))) __PYX_ERR(0, 2561, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_trial_trace_ref", 0))) __PYX_ERR(0, 2562, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_velocity), __pyx_ptype_5numpy_ndarray, 1, "ebqe_velocity", 0))) __PYX_ERR(0, 2563, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_velocityAverage), __pyx_ptype_5numpy_ndarray, 1, "velocityAverage", 0))) __PYX_ERR(0, 2564, __pyx_L1_error)
  __pyx_r = __pyx_pf_6mprans_8cRANS3PF_7RANS3PF_12calculateVelocityAverage(((struct __pyx_obj_6mprans_8cRANS3PF_RANS3PF *)__pyx_v_self), __pyx_v_nExteriorElementBoundaries_global, __pyx_v_exteriorElementBoundariesArray, __pyx_v_nInteriorElementBoundaries_global, __pyx_v_interiorElementBoundariesArray, __pyx_v_elementBoundaryElementsArray, __pyx_v_elementBoundaryLocalElementBoundariesArray, __pyx_v_mesh_dof, __pyx_v_mesh_velocity_dof, __pyx_v_MOVING_DOMAIN, __pyx_v_mesh_l2g, __pyx_v_mesh_trial_trace_ref, __pyx_v_mesh_grad_trial_trace_ref, __pyx_v_normal_ref, __pyx_v_boundaryJac_ref, __pyx_v_vel_l2g, __pyx_v_u_dof, __pyx_v_v_dof, __pyx_v_w_dof, __pyx_v_vos_dof, __pyx_v_vel_trial_trace_ref, __pyx_v_ebqe_velocity, __pyx_v_velocityAverage);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6mprans_8cRANS3PF_7RANS3PF_12calculateVelocityAverage(struct __pyx_obj_6mprans_8cRANS3PF_RANS3PF *__pyx_v_self, int __pyx_v_nExteriorElementBoundaries_global, PyArrayObject *__pyx_v_exteriorElementBoundariesArray, int __pyx_v_nInteriorElementBoundaries_global, PyArrayObject *__pyx_v_interiorElementBoundariesArray, PyArrayObject *__pyx_v_elementBoundaryElementsArray, PyArrayObject *__pyx_v_elementBoundaryLocalElementBoundariesArray, PyArrayObject *__pyx_v_mesh_dof, PyArrayObject *__pyx_v_mesh_velocity_dof, double __pyx_v_MOVING_DOMAIN, PyArrayObject *__pyx_v_mesh_l2g, PyArrayObject *__pyx_v_mesh_trial_trace_ref, PyArrayObject *__pyx_v_mesh_grad_trial_trace_ref, PyArrayObject *__pyx_v_normal_ref, PyArrayObject *__pyx_v_boundaryJac_ref, PyArrayObject *__pyx_v_vel_l2g, PyArrayObject *__pyx_v_u_dof, PyArrayObject *__pyx_v_v_dof, PyArrayObject *__pyx_v_w_dof, PyArrayObject *__pyx_v_vos_dof, PyArrayObject *__pyx_v_vel_trial_trace_ref, PyArrayObject *__pyx_v_ebqe_velocity, PyArrayObject *__pyx_v_velocityAverage) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calculateVelocityAverage", 0);

  /* "mprans/cRANS3PF.pyx":2566
 *                                  numpy.ndarray velocityAverage):
 * 
 *         self.thisptr.calculateVelocityAverage(nExteriorElementBoundaries_global,             # <<<<<<<<<<<<<<
 *                                               < int * > exteriorElementBoundariesArray.data,
 *                                               nInteriorElementBoundaries_global,
 */
  __pyx_v_self->thisptr->calculateVelocityAverage(__pyx_v_nExteriorElementBoundaries_global, ((int *)__pyx_v_exteriorElementBoundariesArray->data), __pyx_v_nInteriorElementBoundaries_global, ((int *)__pyx_v_interiorElementBoundariesArray->data), ((int *)__pyx_v_elementBoundaryElementsArray->data), ((int *)__pyx_v_elementBoundaryLocalElementBoundariesArray->data), ((double *)__pyx_v_mesh_dof->data), ((double *)__pyx_v_mesh_velocity_dof->data), __pyx_v_MOVING_DOMAIN, ((int *)__pyx_v_mesh_l2g->data), ((double *)__pyx_v_mesh_trial_trace_ref->data), ((double *)__pyx_v_mesh_grad_trial_trace_ref->data), ((double *)__pyx_v_normal_ref->data), ((double *)__pyx_v_boundaryJac_ref->data), ((int *)__pyx_v_vel_l2g->data), ((double *)__pyx_v_u_dof->data), ((double *)__pyx_v_v_dof->data), ((double *)__pyx_v_w_dof->data), ((double *)__pyx_v_vos_dof->data), ((double *)__pyx_v_vel_trial_trace_ref->data), ((double *)__pyx_v_ebqe_velocity->data), ((double *)__pyx_v_velocityAverage->data));

  /* "mprans/cRANS3PF.pyx":2542
 *                                                          < double * > ebqe_density_as_function.data,
 *                                                          < double * > ebqe_dynamic_viscosity_as_function.data)
 *     def calculateVelocityAverage(self,             # <<<<<<<<<<<<<<
 *                                  int nExteriorElementBoundaries_global,
 *                                  numpy.ndarray exteriorElementBoundariesArray,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mprans/cRANS3PF.pyx":3437
 *     cdef cppRANS3PF2D_base * thisptr
 * 
 *     def __cinit__(self,             # <<<<<<<<<<<<<<
 *                   int nSpaceIn,
 *                   int nQuadraturePoints_elementIn,
 */

/* Python wrapper */
static int __pyx_pw_6mprans_8cRANS3PF_9RANS3PF2D_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6mprans_8cRANS3PF_9RANS3PF2D_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_nSpaceIn;
  int __pyx_v_nQuadraturePoints_elementIn;
  int __pyx_v_nDOF_mesh_trial_elementIn;
  int __pyx_v_nDOF_trial_elementIn;
  int __pyx_v_nDOF_test_elementIn;
  int __pyx_v_nQuadraturePoints_elementBoundaryIn;
  int __pyx_v_CompKernelFlag;
  double __pyx_v_aDarcy;
  double __pyx_v_betaForch;
  double __pyx_v_grain;
  double __pyx_v_packFraction;
  double __pyx_v_packMargin;
  double __pyx_v_maxFraction;
  double __pyx_v_frFraction;
  double __pyx_v_sigmaC;
  double __pyx_v_C3e;
  double __pyx_v_C4e;
  double __pyx_v_eR;
  double __pyx_v_fContact;
  double __pyx_v_mContact;
  double __pyx_v_nContact;
  double __pyx_v_angFriction;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_nSpaceIn,&__pyx_n_s_nQuadraturePoints_elementIn,&__pyx_n_s_nDOF_mesh_trial_elementIn,&__pyx_n_s_nDOF_trial_elementIn,&__pyx_n_s_nDOF_test_elementIn,&__pyx_n_s_nQuadraturePoints_elementBoundar,&__pyx_n_s_CompKernelFlag,&__pyx_n_s_aDarcy,&__pyx_n_s_betaForch,&__pyx_n_s_grain,&__pyx_n_s_packFraction,&__pyx_n_s_packMargin,&__pyx_n_s_maxFraction,&__pyx_n_s_frFraction,&__pyx_n_s_sigmaC,&__pyx_n_s_C3e,&__pyx_n_s_C4e,&__pyx_n_s_eR,&__pyx_n_s_fContact,&__pyx_n_s_mContact,&__pyx_n_s_nContact,&__pyx_n_s_angFriction,0};
    PyObject* values[22] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 22: values[21] = PyTuple_GET_ITEM(__pyx_args, 21);
        case 21: values[20] = PyTuple_GET_ITEM(__pyx_args, 20);
        case 20: values[19] = PyTuple_GET_ITEM(__pyx_args, 19);
        case 19: values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
        case 18: values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
        case 17: values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nSpaceIn)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nQuadraturePoints_elementIn)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 22, 22, 1); __PYX_ERR(0, 3437, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nDOF_mesh_trial_elementIn)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 22, 22, 2); __PYX_ERR(0, 3437, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nDOF_trial_elementIn)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 22, 22, 3); __PYX_ERR(0, 3437, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nDOF_test_elementIn)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 22, 22, 4); __PYX_ERR(0, 3437, __pyx_L3_error)
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nQuadraturePoints_elementBoundar)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 22, 22, 5); __PYX_ERR(0, 3437, __pyx_L3_error)
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_CompKernelFlag)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 22, 22, 6); __PYX_ERR(0, 3437, __pyx_L3_error)
        }
        case  7:
        if (likely((values[7] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_aDarcy)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 22, 22, 7); __PYX_ERR(0, 3437, __pyx_L3_error)
        }
        case  8:
        if (likely((values[8] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_betaForch)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 22, 22, 8); __PYX_ERR(0, 3437, __pyx_L3_error)
        }
        case  9:
        if (likely((values[9] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_grain)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 22, 22, 9); __PYX_ERR(0, 3437, __pyx_L3_error)
        }
        case 10:
        if (likely((values[10] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_packFraction)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 22, 22, 10); __PYX_ERR(0, 3437, __pyx_L3_error)
        }
        case 11:
        if (likely((values[11] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_packMargin)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 22, 22, 11); __PYX_ERR(0, 3437, __pyx_L3_error)
        }
        case 12:
        if (likely((values[12] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_maxFraction)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 22, 22, 12); __PYX_ERR(0, 3437, __pyx_L3_error)
        }
        case 13:
        if (likely((values[13] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_frFraction)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 22, 22, 13); __PYX_ERR(0, 3437, __pyx_L3_error)
        }
        case 14:
        if (likely((values[14] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sigmaC)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 22, 22, 14); __PYX_ERR(0, 3437, __pyx_L3_error)
        }
        case 15:
        if (likely((values[15] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_C3e)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 22, 22, 15); __PYX_ERR(0, 3437, __pyx_L3_error)
        }
        case 16:
        if (likely((values[16] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_C4e)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 22, 22, 16); __PYX_ERR(0, 3437, __pyx_L3_error)
        }
        case 17:
        if (likely((values[17] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_eR)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 22, 22, 17); __PYX_ERR(0, 3437, __pyx_L3_error)
        }
        case 18:
        if (likely((values[18] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fContact)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 22, 22, 18); __PYX_ERR(0, 3437, __pyx_L3_error)
        }
        case 19:
        if (likely((values[19] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mContact)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 22, 22, 19); __PYX_ERR(0, 3437, __pyx_L3_error)
        }
        case 20:
        if (likely((values[20] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nContact)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 22, 22, 20); __PYX_ERR(0, 3437, __pyx_L3_error)
        }
        case 21:
        if (likely((values[21] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_angFriction)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 22, 22, 21); __PYX_ERR(0, 3437, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 3437, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 22) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
      values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
      values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
      values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
      values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
      values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
      values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
      values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
      values[19] = PyTuple_GET_ITEM(__pyx_args, 19);
      values[20] = PyTuple_GET_ITEM(__pyx_args, 20);
      values[21] = PyTuple_GET_ITEM(__pyx_args, 21);
    }
    __pyx_v_nSpaceIn = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_nSpaceIn == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3438, __pyx_L3_error)
    __pyx_v_nQuadraturePoints_elementIn = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_nQuadraturePoints_elementIn == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3439, __pyx_L3_error)
    __pyx_v_nDOF_mesh_trial_elementIn = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_nDOF_mesh_trial_elementIn == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3440, __pyx_L3_error)
    __pyx_v_nDOF_trial_elementIn = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_nDOF_trial_elementIn == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3441, __pyx_L3_error)
    __pyx_v_nDOF_test_elementIn = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_nDOF_test_elementIn == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3442, __pyx_L3_error)
    __pyx_v_nQuadraturePoints_elementBoundaryIn = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_nQuadraturePoints_elementBoundaryIn == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3443, __pyx_L3_error)
    __pyx_v_CompKernelFlag = __Pyx_PyInt_As_int(values[6]); if (unlikely((__pyx_v_CompKernelFlag == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3444, __pyx_L3_error)
    __pyx_v_aDarcy = __pyx_PyFloat_AsDouble(values[7]); if (unlikely((__pyx_v_aDarcy == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3445, __pyx_L3_error)
    __pyx_v_betaForch = __pyx_PyFloat_AsDouble(values[8]); if (unlikely((__pyx_v_betaForch == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3446, __pyx_L3_error)
    __pyx_v_grain = __pyx_PyFloat_AsDouble(values[9]); if (unlikely((__pyx_v_grain == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3447, __pyx_L3_error)
    __pyx_v_packFraction = __pyx_PyFloat_AsDouble(values[10]); if (unlikely((__pyx_v_packFraction == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3448, __pyx_L3_error)
    __pyx_v_packMargin = __pyx_PyFloat_AsDouble(values[11]); if (unlikely((__pyx_v_packMargin == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3449, __pyx_L3_error)
    __pyx_v_maxFraction = __pyx_PyFloat_AsDouble(values[12]); if (unlikely((__pyx_v_maxFraction == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3450, __pyx_L3_error)
    __pyx_v_frFraction = __pyx_PyFloat_AsDouble(values[13]); if (unlikely((__pyx_v_frFraction == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3451, __pyx_L3_error)
    __pyx_v_sigmaC = __pyx_PyFloat_AsDouble(values[14]); if (unlikely((__pyx_v_sigmaC == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3452, __pyx_L3_error)
    __pyx_v_C3e = __pyx_PyFloat_AsDouble(values[15]); if (unlikely((__pyx_v_C3e == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3453, __pyx_L3_error)
    __pyx_v_C4e = __pyx_PyFloat_AsDouble(values[16]); if (unlikely((__pyx_v_C4e == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3454, __pyx_L3_error)
    __pyx_v_eR = __pyx_PyFloat_AsDouble(values[17]); if (unlikely((__pyx_v_eR == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3455, __pyx_L3_error)
    __pyx_v_fContact = __pyx_PyFloat_AsDouble(values[18]); if (unlikely((__pyx_v_fContact == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3456, __pyx_L3_error)
    __pyx_v_mContact = __pyx_PyFloat_AsDouble(values[19]); if (unlikely((__pyx_v_mContact == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3457, __pyx_L3_error)
    __pyx_v_nContact = __pyx_PyFloat_AsDouble(values[20]); if (unlikely((__pyx_v_nContact == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3458, __pyx_L3_error)
    __pyx_v_angFriction = __pyx_PyFloat_AsDouble(values[21]); if (unlikely((__pyx_v_angFriction == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3459, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 22, 22, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3437, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mprans.cRANS3PF.RANS3PF2D.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6mprans_8cRANS3PF_9RANS3PF2D___cinit__(((struct __pyx_obj_6mprans_8cRANS3PF_RANS3PF2D *)__pyx_v_self), __pyx_v_nSpaceIn, __pyx_v_nQuadraturePoints_elementIn, __pyx_v_nDOF_mesh_trial_elementIn, __pyx_v_nDOF_trial_elementIn, __pyx_v_nDOF_test_elementIn, __pyx_v_nQuadraturePoints_elementBoundaryIn, __pyx_v_CompKernelFlag, __pyx_v_aDarcy, __pyx_v_betaForch, __pyx_v_grain, __pyx_v_packFraction, __pyx_v_packMargin, __pyx_v_maxFraction, __pyx_v_frFraction, __pyx_v_sigmaC, __pyx_v_C3e, __pyx_v_C4e, __pyx_v_eR, __pyx_v_fContact, __pyx_v_mContact, __pyx_v_nContact, __pyx_v_angFriction);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6mprans_8cRANS3PF_9RANS3PF2D___cinit__(struct __pyx_obj_6mprans_8cRANS3PF_RANS3PF2D *__pyx_v_self, int __pyx_v_nSpaceIn, int __pyx_v_nQuadraturePoints_elementIn, int __pyx_v_nDOF_mesh_trial_elementIn, int __pyx_v_nDOF_trial_elementIn, int __pyx_v_nDOF_test_elementIn, int __pyx_v_nQuadraturePoints_elementBoundaryIn, int __pyx_v_CompKernelFlag, double __pyx_v_aDarcy, double __pyx_v_betaForch, double __pyx_v_grain, double __pyx_v_packFraction, double __pyx_v_packMargin, double __pyx_v_maxFraction, double __pyx_v_frFraction, double __pyx_v_sigmaC, double __pyx_v_C3e, double __pyx_v_C4e, double __pyx_v_eR, double __pyx_v_fContact, double __pyx_v_mContact, double __pyx_v_nContact, double __pyx_v_angFriction) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "mprans/cRANS3PF.pyx":3460
 *                   double nContact,
 *                   double angFriction):
 *         self.thisptr = newRANS3PF2D(nSpaceIn,             # <<<<<<<<<<<<<<
 *                                     nQuadraturePoints_elementIn,
 *                                     nDOF_mesh_trial_elementIn,
 */
  __pyx_v_self->thisptr = proteus::newRANS3PF2D(__pyx_v_nSpaceIn, __pyx_v_nQuadraturePoints_elementIn, __pyx_v_nDOF_mesh_trial_elementIn, __pyx_v_nDOF_trial_elementIn, __pyx_v_nDOF_test_elementIn, __pyx_v_nQuadraturePoints_elementBoundaryIn, __pyx_v_CompKernelFlag, __pyx_v_aDarcy, __pyx_v_betaForch, __pyx_v_grain, __pyx_v_packFraction, __pyx_v_packMargin, __pyx_v_maxFraction, __pyx_v_frFraction, __pyx_v_sigmaC, __pyx_v_C3e, __pyx_v_C4e, __pyx_v_eR, __pyx_v_fContact, __pyx_v_mContact, __pyx_v_nContact, __pyx_v_angFriction);

  /* "mprans/cRANS3PF.pyx":3437
 *     cdef cppRANS3PF2D_base * thisptr
 * 
 *     def __cinit__(self,             # <<<<<<<<<<<<<<
 *                   int nSpaceIn,
 *                   int nQuadraturePoints_elementIn,
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mprans/cRANS3PF.pyx":3484
 * 
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_6mprans_8cRANS3PF_9RANS3PF2D_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6mprans_8cRANS3PF_9RANS3PF2D_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6mprans_8cRANS3PF_9RANS3PF2D_2__dealloc__(((struct __pyx_obj_6mprans_8cRANS3PF_RANS3PF2D *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6mprans_8cRANS3PF_9RANS3PF2D_2__dealloc__(struct __pyx_obj_6mprans_8cRANS3PF_RANS3PF2D *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "mprans/cRANS3PF.pyx":3485
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def calculateResidual(self,
 */
  delete __pyx_v_self->thisptr;

  /* "mprans/cRANS3PF.pyx":3484
 * 
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "mprans/cRANS3PF.pyx":3487
 *         del self.thisptr
 * 
 *     def calculateResidual(self,             # <<<<<<<<<<<<<<
 *                           numpy.ndarray mesh_trial_ref,
 *                           numpy.ndarray mesh_grad_trial_ref,
 */

/* Python wrapper */
static PyObject *__pyx_pw_6mprans_8cRANS3PF_9RANS3PF2D_5calculateResidual(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6mprans_8cRANS3PF_9RANS3PF2D_5calculateResidual(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_mesh_trial_ref = 0;
  PyArrayObject *__pyx_v_mesh_grad_trial_ref = 0;
  PyArrayObject *__pyx_v_mesh_dof = 0;
  PyArrayObject *__pyx_v_mesh_velocity_dof = 0;
  double __pyx_v_MOVING_DOMAIN;
  double __pyx_v_PSTAB;
  PyArrayObject *__pyx_v_mesh_l2g = 0;
  PyArrayObject *__pyx_v_dV_ref = 0;
  PyArrayObject *__pyx_v_p_trial_ref = 0;
  PyArrayObject *__pyx_v_p_grad_trial_ref = 0;
  PyArrayObject *__pyx_v_p_test_ref = 0;
  PyArrayObject *__pyx_v_p_grad_test_ref = 0;
  PyArrayObject *__pyx_v_q_p = 0;
  PyArrayObject *__pyx_v_q_grad_p = 0;
  PyArrayObject *__pyx_v_ebqe_p = 0;
  PyArrayObject *__pyx_v_ebqe_grad_p = 0;
  PyArrayObject *__pyx_v_vel_trial_ref = 0;
  PyArrayObject *__pyx_v_vel_grad_trial_ref = 0;
  PyArrayObject *__pyx_v_vel_hess_trial_ref = 0;
  PyArrayObject *__pyx_v_vel_test_ref = 0;
  PyArrayObject *__pyx_v_vel_grad_test_ref = 0;
  PyArrayObject *__pyx_v_mesh_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_mesh_grad_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_dS_ref = 0;
  PyArrayObject *__pyx_v_p_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_p_grad_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_p_test_trace_ref = 0;
  PyArrayObject *__pyx_v_p_grad_test_trace_ref = 0;
  PyArrayObject *__pyx_v_vel_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_vel_grad_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_vel_test_trace_ref = 0;
  PyArrayObject *__pyx_v_vel_grad_test_trace_ref = 0;
  PyArrayObject *__pyx_v_normal_ref = 0;
  PyArrayObject *__pyx_v_boundaryJac_ref = 0;
  double __pyx_v_eb_adjoint_sigma;
  PyArrayObject *__pyx_v_elementDiameter = 0;
  PyArrayObject *__pyx_v_nodeDiametersArray = 0;
  double __pyx_v_hFactor;
  int __pyx_v_nElements_global;
  int __pyx_v_nElements_owned;
  int __pyx_v_nElementBoundaries_owned;
  double __pyx_v_useRBLES;
  double __pyx_v_useMetrics;
  double __pyx_v_alphaBDF;
  double __pyx_v_epsFact_rho;
  double __pyx_v_epsFact_mu;
  double __pyx_v_sigma;
  double __pyx_v_rho_0;
  double __pyx_v_nu_0;
  double __pyx_v_rho_1;
  double __pyx_v_nu_1;
  double __pyx_v_smagorinskyConstant;
  int __pyx_v_turbulenceClosureModel;
  double __pyx_v_Ct_sge;
  double __pyx_v_Cd_sge;
  double __pyx_v_C_dc;
  double __pyx_v_C_b;
  PyArrayObject *__pyx_v_eps_solid = 0;
  PyArrayObject *__pyx_v_phi_solid = 0;
  PyArrayObject *__pyx_v_q_velocity_solid = 0;
  PyArrayObject *__pyx_v_q_vos = 0;
  PyArrayObject *__pyx_v_q_dvos_dt = 0;
  PyArrayObject *__pyx_v_q_dragAlpha = 0;
  PyArrayObject *__pyx_v_q_dragBeta = 0;
  PyArrayObject *__pyx_v_q_mass_source = 0;
  PyArrayObject *__pyx_v_q_turb_var_0 = 0;
  PyArrayObject *__pyx_v_q_turb_var_1 = 0;
  PyArrayObject *__pyx_v_q_turb_var_grad_0 = 0;
  PyArrayObject *__pyx_v_q_eddy_viscosity = 0;
  PyArrayObject *__pyx_v_p_l2g = 0;
  PyArrayObject *__pyx_v_vel_l2g = 0;
  PyArrayObject *__pyx_v_p_dof = 0;
  PyArrayObject *__pyx_v_u_dof = 0;
  PyArrayObject *__pyx_v_v_dof = 0;
  PyArrayObject *__pyx_v_w_dof = 0;
  PyArrayObject *__pyx_v_u_dof_old = 0;
  PyArrayObject *__pyx_v_v_dof_old = 0;
  PyArrayObject *__pyx_v_w_dof_old = 0;
  PyArrayObject *__pyx_v_u_dof_old_old = 0;
  PyArrayObject *__pyx_v_v_dof_old_old = 0;
  PyArrayObject *__pyx_v_w_dof_old_old = 0;
  PyArrayObject *__pyx_v_g = 0;
  double __pyx_v_useVF;
  PyArrayObject *__pyx_v_vf = 0;
  PyArrayObject *__pyx_v_phi = 0;
  PyArrayObject *__pyx_v_normal_phi = 0;
  PyArrayObject *__pyx_v_kappa_phi = 0;
  PyArrayObject *__pyx_v_q_mom_u_acc = 0;
  PyArrayObject *__pyx_v_q_mom_v_acc = 0;
  PyArrayObject *__pyx_v_q_mom_w_acc = 0;
  PyArrayObject *__pyx_v_q_mass_adv = 0;
  PyArrayObject *__pyx_v_q_mom_u_acc_beta_bdf = 0;
  PyArrayObject *__pyx_v_q_mom_v_acc_beta_bdf = 0;
  PyArrayObject *__pyx_v_q_mom_w_acc_beta_bdf = 0;
  PyArrayObject *__pyx_v_q_dV = 0;
  PyArrayObject *__pyx_v_q_dV_last = 0;
  PyArrayObject *__pyx_v_q_velocity_sge = 0;
  PyArrayObject *__pyx_v_ebqe_velocity_star = 0;
  PyArrayObject *__pyx_v_q_cfl = 0;
  PyArrayObject *__pyx_v_q_numDiff_u = 0;
  PyArrayObject *__pyx_v_q_numDiff_v = 0;
  PyArrayObject *__pyx_v_q_numDiff_w = 0;
  PyArrayObject *__pyx_v_q_numDiff_u_last = 0;
  PyArrayObject *__pyx_v_q_numDiff_v_last = 0;
  PyArrayObject *__pyx_v_q_numDiff_w_last = 0;
  PyArrayObject *__pyx_v_sdInfo_u_u_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_u_u_colind = 0;
  PyArrayObject *__pyx_v_sdInfo_u_v_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_u_v_colind = 0;
  PyArrayObject *__pyx_v_sdInfo_u_w_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_u_w_colind = 0;
  PyArrayObject *__pyx_v_sdInfo_v_v_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_v_v_colind = 0;
  PyArrayObject *__pyx_v_sdInfo_v_u_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_v_u_colind = 0;
  PyArrayObject *__pyx_v_sdInfo_v_w_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_v_w_colind = 0;
  PyArrayObject *__pyx_v_sdInfo_w_w_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_w_w_colind = 0;
  PyArrayObject *__pyx_v_sdInfo_w_u_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_w_u_colind = 0;
  PyArrayObject *__pyx_v_sdInfo_w_v_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_w_v_colind = 0;
  int __pyx_v_offset_p;
  int __pyx_v_offset_u;
  int __pyx_v_offset_v;
  int __pyx_v_offset_w;
  int __pyx_v_stride_p;
  int __pyx_v_stride_u;
  int __pyx_v_stride_v;
  int __pyx_v_stride_w;
  PyArrayObject *__pyx_v_globalResidual = 0;
  int __pyx_v_nExteriorElementBoundaries_global;
  PyArrayObject *__pyx_v_exteriorElementBoundariesArray = 0;
  PyArrayObject *__pyx_v_elementBoundaryElementsArray = 0;
  PyArrayObject *__pyx_v_elementBoundaryLocalElementBoundariesArray = 0;
  PyArrayObject *__pyx_v_ebqe_vf_ext = 0;
  PyArrayObject *__pyx_v_bc_ebqe_vf_ext = 0;
  PyArrayObject *__pyx_v_ebqe_phi_ext = 0;
  PyArrayObject *__pyx_v_bc_ebqe_phi_ext = 0;
  PyArrayObject *__pyx_v_ebqe_normal_phi_ext = 0;
  PyArrayObject *__pyx_v_ebqe_kappa_phi_ext = 0;
  PyArrayObject *__pyx_v_ebqe_vos_ext = 0;
  PyArrayObject *__pyx_v_ebqe_turb_var_0 = 0;
  PyArrayObject *__pyx_v_ebqe_turb_var_1 = 0;
  PyArrayObject *__pyx_v_isDOFBoundary_p = 0;
  PyArrayObject *__pyx_v_isDOFBoundary_u = 0;
  PyArrayObject *__pyx_v_isDOFBoundary_v = 0;
  PyArrayObject *__pyx_v_isDOFBoundary_w = 0;
  PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_p = 0;
  PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_u = 0;
  PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_v = 0;
  PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_w = 0;
  PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_u = 0;
  PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_v = 0;
  PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_w = 0;
  PyArrayObject *__pyx_v_ebqe_bc_p_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_flux_mass_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_flux_mom_u_adv_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_flux_mom_v_adv_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_flux_mom_w_adv_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_u_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_flux_u_diff_ext = 0;
  PyArrayObject *__pyx_v_ebqe_penalty_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_v_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_flux_v_diff_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_w_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_flux_w_diff_ext = 0;
  PyArrayObject *__pyx_v_q_x = 0;
  PyArrayObject *__pyx_v_q_velocity = 0;
  PyArrayObject *__pyx_v_ebqe_velocity = 0;
  PyArrayObject *__pyx_v_q_grad_u = 0;
  PyArrayObject *__pyx_v_q_grad_v = 0;
  PyArrayObject *__pyx_v_q_grad_w = 0;
  PyArrayObject *__pyx_v_q_divU = 0;
  PyArrayObject *__pyx_v_ebqe_grad_u = 0;
  PyArrayObject *__pyx_v_ebqe_grad_v = 0;
  PyArrayObject *__pyx_v_ebqe_grad_w = 0;
  PyArrayObject *__pyx_v_flux = 0;
  PyArrayObject *__pyx_v_elementResidual_p = 0;
  PyArrayObject *__pyx_v_elementFlags = 0;
  PyArrayObject *__pyx_v_boundaryFlags = 0;
  PyArrayObject *__pyx_v_barycenters = 0;
  PyArrayObject *__pyx_v_wettedAreas = 0;
  PyArrayObject *__pyx_v_netForces_p = 0;
  PyArrayObject *__pyx_v_netForces_v = 0;
  PyArrayObject *__pyx_v_netMoments = 0;
  PyArrayObject *__pyx_v_q_rho = 0;
  PyArrayObject *__pyx_v_ebqe_rho = 0;
  PyArrayObject *__pyx_v_q_nu = 0;
  PyArrayObject *__pyx_v_ebqe_nu = 0;
  int __pyx_v_nParticles;
  double __pyx_v_particle_epsFact;
  double __pyx_v_particle_alpha;
  double __pyx_v_particle_beta;
  double __pyx_v_particle_penalty_constant;
  PyArrayObject *__pyx_v_particle_signed_distances = 0;
  PyArrayObject *__pyx_v_particle_signed_distance_normals = 0;
  PyArrayObject *__pyx_v_particle_velocities = 0;
  PyArrayObject *__pyx_v_particle_centroids = 0;
  PyArrayObject *__pyx_v_particle_netForces = 0;
  PyArrayObject *__pyx_v_particle_netMoments = 0;
  PyArrayObject *__pyx_v_particle_surfaceArea = 0;
  double __pyx_v_particle_nitsche;
  int __pyx_v_STABILIZATION_TYPE;
  double __pyx_v_areaRefElement;
  double __pyx_v_cMax;
  double __pyx_v_cE;
  PyArrayObject *__pyx_v_forcex = 0;
  PyArrayObject *__pyx_v_forcey = 0;
  PyArrayObject *__pyx_v_forcez = 0;
  int __pyx_v_KILL_PRESSURE_TERM;
  double __pyx_v_dt;
  PyArrayObject *__pyx_v_entropyResidualAtCell = 0;
  PyArrayObject *__pyx_v_maxSpeed2AtCell = 0;
  double __pyx_v_maxSpeed2AtOmega;
  PyArrayObject *__pyx_v_rhoAtCell = 0;
  PyArrayObject *__pyx_v_muAtCell = 0;
  PyArrayObject *__pyx_v_quantDOFs = 0;
  int __pyx_v_numDOFsPerEqn;
  PyArrayObject *__pyx_v_csrRowIndeces_DofLoops = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_DofLoops = 0;
  PyArrayObject *__pyx_v_ML = 0;
  PyArrayObject *__pyx_v_Cx = 0;
  PyArrayObject *__pyx_v_Cy = 0;
  PyArrayObject *__pyx_v_Cz = 0;
  int __pyx_v_MATERIAL_PARAMETERS_AS_FUNCTION;
  PyArrayObject *__pyx_v_density_as_function = 0;
  PyArrayObject *__pyx_v_dynamic_viscosity_as_function = 0;
  PyArrayObject *__pyx_v_ebqe_density_as_function = 0;
  PyArrayObject *__pyx_v_ebqe_dynamic_viscosity_as_function = 0;
  double __pyx_v_order_polynomial;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calculateResidual (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_mesh_trial_ref,&__pyx_n_s_mesh_grad_trial_ref,&__pyx_n_s_mesh_dof,&__pyx_n_s_mesh_velocity_dof,&__pyx_n_s_MOVING_DOMAIN,&__pyx_n_s_PSTAB,&__pyx_n_s_mesh_l2g,&__pyx_n_s_dV_ref,&__pyx_n_s_p_trial_ref,&__pyx_n_s_p_grad_trial_ref,&__pyx_n_s_p_test_ref,&__pyx_n_s_p_grad_test_ref,&__pyx_n_s_q_p,&__pyx_n_s_q_grad_p,&__pyx_n_s_ebqe_p,&__pyx_n_s_ebqe_grad_p,&__pyx_n_s_vel_trial_ref,&__pyx_n_s_vel_grad_trial_ref,&__pyx_n_s_vel_hess_trial_ref,&__pyx_n_s_vel_test_ref,&__pyx_n_s_vel_grad_test_ref,&__pyx_n_s_mesh_trial_trace_ref,&__pyx_n_s_mesh_grad_trial_trace_ref,&__pyx_n_s_dS_ref,&__pyx_n_s_p_trial_trace_ref,&__pyx_n_s_p_grad_trial_trace_ref,&__pyx_n_s_p_test_trace_ref,&__pyx_n_s_p_grad_test_trace_ref,&__pyx_n_s_vel_trial_trace_ref,&__pyx_n_s_vel_grad_trial_trace_ref,&__pyx_n_s_vel_test_trace_ref,&__pyx_n_s_vel_grad_test_trace_ref,&__pyx_n_s_normal_ref,&__pyx_n_s_boundaryJac_ref,&__pyx_n_s_eb_adjoint_sigma,&__pyx_n_s_elementDiameter,&__pyx_n_s_nodeDiametersArray,&__pyx_n_s_hFactor,&__pyx_n_s_nElements_global,&__pyx_n_s_nElements_owned,&__pyx_n_s_nElementBoundaries_owned,&__pyx_n_s_useRBLES,&__pyx_n_s_useMetrics,&__pyx_n_s_alphaBDF,&__pyx_n_s_epsFact_rho,&__pyx_n_s_epsFact_mu,&__pyx_n_s_sigma,&__pyx_n_s_rho_0,&__pyx_n_s_nu_0,&__pyx_n_s_rho_1,&__pyx_n_s_nu_1,&__pyx_n_s_smagorinskyConstant,&__pyx_n_s_turbulenceClosureModel,&__pyx_n_s_Ct_sge,&__pyx_n_s_Cd_sge,&__pyx_n_s_C_dc,&__pyx_n_s_C_b,&__pyx_n_s_eps_solid,&__pyx_n_s_phi_solid,&__pyx_n_s_q_velocity_solid,&__pyx_n_s_q_vos,&__pyx_n_s_q_dvos_dt,&__pyx_n_s_q_dragAlpha,&__pyx_n_s_q_dragBeta,&__pyx_n_s_q_mass_source,&__pyx_n_s_q_turb_var_0,&__pyx_n_s_q_turb_var_1,&__pyx_n_s_q_turb_var_grad_0,&__pyx_n_s_q_eddy_viscosity,&__pyx_n_s_p_l2g,&__pyx_n_s_vel_l2g,&__pyx_n_s_p_dof,&__pyx_n_s_u_dof,&__pyx_n_s_v_dof,&__pyx_n_s_w_dof,&__pyx_n_s_u_dof_old,&__pyx_n_s_v_dof_old,&__pyx_n_s_w_dof_old,&__pyx_n_s_u_dof_old_old,&__pyx_n_s_v_dof_old_old,&__pyx_n_s_w_dof_old_old,&__pyx_n_s_g,&__pyx_n_s_useVF,&__pyx_n_s_vf,&__pyx_n_s_phi,&__pyx_n_s_normal_phi,&__pyx_n_s_kappa_phi,&__pyx_n_s_q_mom_u_acc,&__pyx_n_s_q_mom_v_acc,&__pyx_n_s_q_mom_w_acc,&__pyx_n_s_q_mass_adv,&__pyx_n_s_q_mom_u_acc_beta_bdf,&__pyx_n_s_q_mom_v_acc_beta_bdf,&__pyx_n_s_q_mom_w_acc_beta_bdf,&__pyx_n_s_q_dV,&__pyx_n_s_q_dV_last,&__pyx_n_s_q_velocity_sge,&__pyx_n_s_ebqe_velocity_star,&__pyx_n_s_q_cfl,&__pyx_n_s_q_numDiff_u,&__pyx_n_s_q_numDiff_v,&__pyx_n_s_q_numDiff_w,&__pyx_n_s_q_numDiff_u_last,&__pyx_n_s_q_numDiff_v_last,&__pyx_n_s_q_numDiff_w_last,&__pyx_n_s_sdInfo_u_u_rowptr,&__pyx_n_s_sdInfo_u_u_colind,&__pyx_n_s_sdInfo_u_v_rowptr,&__pyx_n_s_sdInfo_u_v_colind,&__pyx_n_s_sdInfo_u_w_rowptr,&__pyx_n_s_sdInfo_u_w_colind,&__pyx_n_s_sdInfo_v_v_rowptr,&__pyx_n_s_sdInfo_v_v_colind,&__pyx_n_s_sdInfo_v_u_rowptr,&__pyx_n_s_sdInfo_v_u_colind,&__pyx_n_s_sdInfo_v_w_rowptr,&__pyx_n_s_sdInfo_v_w_colind,&__pyx_n_s_sdInfo_w_w_rowptr,&__pyx_n_s_sdInfo_w_w_colind,&__pyx_n_s_sdInfo_w_u_rowptr,&__pyx_n_s_sdInfo_w_u_colind,&__pyx_n_s_sdInfo_w_v_rowptr,&__pyx_n_s_sdInfo_w_v_colind,&__pyx_n_s_offset_p,&__pyx_n_s_offset_u,&__pyx_n_s_offset_v,&__pyx_n_s_offset_w,&__pyx_n_s_stride_p,&__pyx_n_s_stride_u,&__pyx_n_s_stride_v,&__pyx_n_s_stride_w,&__pyx_n_s_globalResidual,&__pyx_n_s_nExteriorElementBoundaries_globa,&__pyx_n_s_exteriorElementBoundariesArray,&__pyx_n_s_elementBoundaryElementsArray,&__pyx_n_s_elementBoundaryLocalElementBound,&__pyx_n_s_ebqe_vf_ext,&__pyx_n_s_bc_ebqe_vf_ext,&__pyx_n_s_ebqe_phi_ext,&__pyx_n_s_bc_ebqe_phi_ext,&__pyx_n_s_ebqe_normal_phi_ext,&__pyx_n_s_ebqe_kappa_phi_ext,&__pyx_n_s_ebqe_vos_ext,&__pyx_n_s_ebqe_turb_var_0,&__pyx_n_s_ebqe_turb_var_1,&__pyx_n_s_isDOFBoundary_p,&__pyx_n_s_isDOFBoundary_u,&__pyx_n_s_isDOFBoundary_v,&__pyx_n_s_isDOFBoundary_w,&__pyx_n_s_isAdvectiveFluxBoundary_p,&__pyx_n_s_isAdvectiveFluxBoundary_u,&__pyx_n_s_isAdvectiveFluxBoundary_v,&__pyx_n_s_isAdvectiveFluxBoundary_w,&__pyx_n_s_isDiffusiveFluxBoundary_u,&__pyx_n_s_isDiffusiveFluxBoundary_v,&__pyx_n_s_isDiffusiveFluxBoundary_w,&__pyx_n_s_ebqe_bc_p_ext,&__pyx_n_s_ebqe_bc_flux_mass_ext,&__pyx_n_s_ebqe_bc_flux_mom_u_adv_ext,&__pyx_n_s_ebqe_bc_flux_mom_v_adv_ext,&__pyx_n_s_ebqe_bc_flux_mom_w_adv_ext,&__pyx_n_s_ebqe_bc_u_ext,&__pyx_n_s_ebqe_bc_flux_u_diff_ext,&__pyx_n_s_ebqe_penalty_ext,&__pyx_n_s_ebqe_bc_v_ext,&__pyx_n_s_ebqe_bc_flux_v_diff_ext,&__pyx_n_s_ebqe_bc_w_ext,&__pyx_n_s_ebqe_bc_flux_w_diff_ext,&__pyx_n_s_q_x,&__pyx_n_s_q_velocity,&__pyx_n_s_ebqe_velocity,&__pyx_n_s_q_grad_u,&__pyx_n_s_q_grad_v,&__pyx_n_s_q_grad_w,&__pyx_n_s_q_divU,&__pyx_n_s_ebqe_grad_u,&__pyx_n_s_ebqe_grad_v,&__pyx_n_s_ebqe_grad_w,&__pyx_n_s_flux,&__pyx_n_s_elementResidual_p,&__pyx_n_s_elementFlags,&__pyx_n_s_boundaryFlags,&__pyx_n_s_barycenters,&__pyx_n_s_wettedAreas,&__pyx_n_s_netForces_p,&__pyx_n_s_netForces_v,&__pyx_n_s_netMoments,&__pyx_n_s_q_rho,&__pyx_n_s_ebqe_rho,&__pyx_n_s_q_nu,&__pyx_n_s_ebqe_nu,&__pyx_n_s_nParticles,&__pyx_n_s_particle_epsFact,&__pyx_n_s_particle_alpha,&__pyx_n_s_particle_beta,&__pyx_n_s_particle_penalty_constant,&__pyx_n_s_particle_signed_distances,&__pyx_n_s_particle_signed_distance_normals,&__pyx_n_s_particle_velocities,&__pyx_n_s_particle_centroids,&__pyx_n_s_particle_netForces,&__pyx_n_s_particle_netMoments,&__pyx_n_s_particle_surfaceArea,&__pyx_n_s_particle_nitsche,&__pyx_n_s_STABILIZATION_TYPE,&__pyx_n_s_areaRefElement,&__pyx_n_s_cMax,&__pyx_n_s_cE,&__pyx_n_s_forcex,&__pyx_n_s_forcey,&__pyx_n_s_forcez,&__pyx_n_s_KILL_PRESSURE_TERM,&__pyx_n_s_dt,&__pyx_n_s_entropyResidualAtCell,&__pyx_n_s_maxSpeed2AtCell,&__pyx_n_s_maxSpeed2AtOmega,&__pyx_n_s_rhoAtCell,&__pyx_n_s_muAtCell,&__pyx_n_s_quantDOFs,&__pyx_n_s_numDOFsPerEqn,&__pyx_n_s_csrRowIndeces_DofLoops,&__pyx_n_s_csrColumnOffsets_DofLoops,&__pyx_n_s_ML,&__pyx_n_s_Cx,&__pyx_n_s_Cy,&__pyx_n_s_Cz,&__pyx_n_s_MATERIAL_PARAMETERS_AS_FUNCTION,&__pyx_n_s_density_as_function,&__pyx_n_s_dynamic_viscosity_as_function,&__pyx_n_s_ebqe_density_as_function,&__pyx_n_s_ebqe_dynamic_viscosity_as_functi,&__pyx_n_s_order_polynomial,0};
    PyObject* values[232] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 232: values[231] = PyTuple_GET_ITEM(__pyx_args, 231);
        case 231: values[230] = PyTuple_GET_ITEM(__pyx_args, 230);
        case 230: values[229] = PyTuple_GET_ITEM(__pyx_args, 229);
        case 229: values[228] = PyTuple_GET_ITEM(__pyx_args, 228);
        case 228: values[227] = PyTuple_GET_ITEM(__pyx_args, 227);
        case 227: values[226] = PyTuple_GET_ITEM(__pyx_args, 226);
        case 226: values[225] = PyTuple_GET_ITEM(__pyx_args, 225);
        case 225: values[224] = PyTuple_GET_ITEM(__pyx_args, 224);
        case 224: values[223] = PyTuple_GET_ITEM(__pyx_args, 223);
        case 223: values[222] = PyTuple_GET_ITEM(__pyx_args, 222);
        case 222: values[221] = PyTuple_GET_ITEM(__pyx_args, 221);
        case 221: values[220] = PyTuple_GET_ITEM(__pyx_args, 220);
        case 220: values[219] = PyTuple_GET_ITEM(__pyx_args, 219);
        case 219: values[218] = PyTuple_GET_ITEM(__pyx_args, 218);
        case 218: values[217] = PyTuple_GET_ITEM(__pyx_args, 217);
        case 217: values[216] = PyTuple_GET_ITEM(__pyx_args, 216);
        case 216: values[215] = PyTuple_GET_ITEM(__pyx_args, 215);
        case 215: values[214] = PyTuple_GET_ITEM(__pyx_args, 214);
        case 214: values[213] = PyTuple_GET_ITEM(__pyx_args, 213);
        case 213: values[212] = PyTuple_GET_ITEM(__pyx_args, 212);
        case 212: values[211] = PyTuple_GET_ITEM(__pyx_args, 211);
        case 211: values[210] = PyTuple_GET_ITEM(__pyx_args, 210);
        case 210: values[209] = PyTuple_GET_ITEM(__pyx_args, 209);
        case 209: values[208] = PyTuple_GET_ITEM(__pyx_args, 208);
        case 208: values[207] = PyTuple_GET_ITEM(__pyx_args, 207);
        case 207: values[206] = PyTuple_GET_ITEM(__pyx_args, 206);
        case 206: values[205] = PyTuple_GET_ITEM(__pyx_args, 205);
        case 205: values[204] = PyTuple_GET_ITEM(__pyx_args, 204);
        case 204: values[203] = PyTuple_GET_ITEM(__pyx_args, 203);
        case 203: values[202] = PyTuple_GET_ITEM(__pyx_args, 202);
        case 202: values[201] = PyTuple_GET_ITEM(__pyx_args, 201);
        case 201: values[200] = PyTuple_GET_ITEM(__pyx_args, 200);
        case 200: values[199] = PyTuple_GET_ITEM(__pyx_args, 199);
        case 199: values[198] = PyTuple_GET_ITEM(__pyx_args, 198);
        case 198: values[197] = PyTuple_GET_ITEM(__pyx_args, 197);
        case 197: values[196] = PyTuple_GET_ITEM(__pyx_args, 196);
        case 196: values[195] = PyTuple_GET_ITEM(__pyx_args, 195);
        case 195: values[194] = PyTuple_GET_ITEM(__pyx_args, 194);
        case 194: values[193] = PyTuple_GET_ITEM(__pyx_args, 193);
        case 193: values[192] = PyTuple_GET_ITEM(__pyx_args, 192);
        case 192: values[191] = PyTuple_GET_ITEM(__pyx_args, 191);
        case 191: values[190] = PyTuple_GET_ITEM(__pyx_args, 190);
        case 190: values[189] = PyTuple_GET_ITEM(__pyx_args, 189);
        case 189: values[188] = PyTuple_GET_ITEM(__pyx_args, 188);
        case 188: values[187] = PyTuple_GET_ITEM(__pyx_args, 187);
        case 187: values[186] = PyTuple_GET_ITEM(__pyx_args, 186);
        case 186: values[185] = PyTuple_GET_ITEM(__pyx_args, 185);
        case 185: values[184] = PyTuple_GET_ITEM(__pyx_args, 184);
        case 184: values[183] = PyTuple_GET_ITEM(__pyx_args, 183);
        case 183: values[182] = PyTuple_GET_ITEM(__pyx_args, 182);
        case 182: values[181] = PyTuple_GET_ITEM(__pyx_args, 181);
        case 181: values[180] = PyTuple_GET_ITEM(__pyx_args, 180);
        case 180: values[179] = PyTuple_GET_ITEM(__pyx_args, 179);
        case 179: values[178] = PyTuple_GET_ITEM(__pyx_args, 178);
        case 178: values[177] = PyTuple_GET_ITEM(__pyx_args, 177);
        case 177: values[176] = PyTuple_GET_ITEM(__pyx_args, 176);
        case 176: values[175] = PyTuple_GET_ITEM(__pyx_args, 175);
        case 175: values[174] = PyTuple_GET_ITEM(__pyx_args, 174);
        case 174: values[173] = PyTuple_GET_ITEM(__pyx_args, 173);
        case 173: values[172] = PyTuple_GET_ITEM(__pyx_args, 172);
        case 172: values[171] = PyTuple_GET_ITEM(__pyx_args, 171);
        case 171: values[170] = PyTuple_GET_ITEM(__pyx_args, 170);
        case 170: values[169] = PyTuple_GET_ITEM(__pyx_args, 169);
        case 169: values[168] = PyTuple_GET_ITEM(__pyx_args, 168);
        case 168: values[167] = PyTuple_GET_ITEM(__pyx_args, 167);
        case 167: values[166] = PyTuple_GET_ITEM(__pyx_args, 166);
        case 166: values[165] = PyTuple_GET_ITEM(__pyx_args, 165);
        case 165: values[164] = PyTuple_GET_ITEM(__pyx_args, 164);
        case 164: values[163] = PyTuple_GET_ITEM(__pyx_args, 163);
        case 163: values[162] = PyTuple_GET_ITEM(__pyx_args, 162);
        case 162: values[161] = PyTuple_GET_ITEM(__pyx_args, 161);
        case 161: values[160] = PyTuple_GET_ITEM(__pyx_args, 160);
        case 160: values[159] = PyTuple_GET_ITEM(__pyx_args, 159);
        case 159: values[158] = PyTuple_GET_ITEM(__pyx_args, 158);
        case 158: values[157] = PyTuple_GET_ITEM(__pyx_args, 157);
        case 157: values[156] = PyTuple_GET_ITEM(__pyx_args, 156);
        case 156: values[155] = PyTuple_GET_ITEM(__pyx_args, 155);
        case 155: values[154] = PyTuple_GET_ITEM(__pyx_args, 154);
        case 154: values[153] = PyTuple_GET_ITEM(__pyx_args, 153);
        case 153: values[152] = PyTuple_GET_ITEM(__pyx_args, 152);
        case 152: values[151] = PyTuple_GET_ITEM(__pyx_args, 151);
        case 151: values[150] = PyTuple_GET_ITEM(__pyx_args, 150);
        case 150: values[149] = PyTuple_GET_ITEM(__pyx_args, 149);
        case 149: values[148] = PyTuple_GET_ITEM(__pyx_args, 148);
        case 148: values[147] = PyTuple_GET_ITEM(__pyx_args, 147);
        case 147: values[146] = PyTuple_GET_ITEM(__pyx_args, 146);
        case 146: values[145] = PyTuple_GET_ITEM(__pyx_args, 145);
        case 145: values[144] = PyTuple_GET_ITEM(__pyx_args, 144);
        case 144: values[143] = PyTuple_GET_ITEM(__pyx_args, 143);
        case 143: values[142] = PyTuple_GET_ITEM(__pyx_args, 142);
        case 142: values[141] = PyTuple_GET_ITEM(__pyx_args, 141);
        case 141: values[140] = PyTuple_GET_ITEM(__pyx_args, 140);
        case 140: values[139] = PyTuple_GET_ITEM(__pyx_args, 139);
        case 139: values[138] = PyTuple_GET_ITEM(__pyx_args, 138);
        case 138: values[137] = PyTuple_GET_ITEM(__pyx_args, 137);
        case 137: values[136] = PyTuple_GET_ITEM(__pyx_args, 136);
        case 136: values[135] = PyTuple_GET_ITEM(__pyx_args, 135);
        case 135: values[134] = PyTuple_GET_ITEM(__pyx_args, 134);
        case 134: values[133] = PyTuple_GET_ITEM(__pyx_args, 133);
        case 133: values[132] = PyTuple_GET_ITEM(__pyx_args, 132);
        case 132: values[131] = PyTuple_GET_ITEM(__pyx_args, 131);
        case 131: values[130] = PyTuple_GET_ITEM(__pyx_args, 130);
        case 130: values[129] = PyTuple_GET_ITEM(__pyx_args, 129);
        case 129: values[128] = PyTuple_GET_ITEM(__pyx_args, 128);
        case 128: values[127] = PyTuple_GET_ITEM(__pyx_args, 127);
        case 127: values[126] = PyTuple_GET_ITEM(__pyx_args, 126);
        case 126: values[125] = PyTuple_GET_ITEM(__pyx_args, 125);
        case 125: values[124] = PyTuple_GET_ITEM(__pyx_args, 124);
        case 124: values[123] = PyTuple_GET_ITEM(__pyx_args, 123);
        case 123: values[122] = PyTuple_GET_ITEM(__pyx_args, 122);
        case 122: values[121] = PyTuple_GET_ITEM(__pyx_args, 121);
        case 121: values[120] = PyTuple_GET_ITEM(__pyx_args, 120);
        case 120: values[119] = PyTuple_GET_ITEM(__pyx_args, 119);
        case 119: values[118] = PyTuple_GET_ITEM(__pyx_args, 118);
        case 118: values[117] = PyTuple_GET_ITEM(__pyx_args, 117);
        case 117: values[116] = PyTuple_GET_ITEM(__pyx_args, 116);
        case 116: values[115] = PyTuple_GET_ITEM(__pyx_args, 115);
        case 115: values[114] = PyTuple_GET_ITEM(__pyx_args, 114);
        case 114: values[113] = PyTuple_GET_ITEM(__pyx_args, 113);
        case 113: values[112] = PyTuple_GET_ITEM(__pyx_args, 112);
        case 112: values[111] = PyTuple_GET_ITEM(__pyx_args, 111);
        case 111: values[110] = PyTuple_GET_ITEM(__pyx_args, 110);
        case 110: values[109] = PyTuple_GET_ITEM(__pyx_args, 109);
        case 109: values[108] = PyTuple_GET_ITEM(__pyx_args, 108);
        case 108: values[107] = PyTuple_GET_ITEM(__pyx_args, 107);
        case 107: values[106] = PyTuple_GET_ITEM(__pyx_args, 106);
        case 106: values[105] = PyTuple_GET_ITEM(__pyx_args, 105);
        case 105: values[104] = PyTuple_GET_ITEM(__pyx_args, 104);
        case 104: values[103] = PyTuple_GET_ITEM(__pyx_args, 103);
        case 103: values[102] = PyTuple_GET_ITEM(__pyx_args, 102);
        case 102: values[101] = PyTuple_GET_ITEM(__pyx_args, 101);
        case 101: values[100] = PyTuple_GET_ITEM(__pyx_args, 100);
        case 100: values[99] = PyTuple_GET_ITEM(__pyx_args, 99);
        case 99: values[98] = PyTuple_GET_ITEM(__pyx_args, 98);
        case 98: values[97] = PyTuple_GET_ITEM(__pyx_args, 97);
        case 97: values[96] = PyTuple_GET_ITEM(__pyx_args, 96);
        case 96: values[95] = PyTuple_GET_ITEM(__pyx_args, 95);
        case 95: values[94] = PyTuple_GET_ITEM(__pyx_args, 94);
        case 94: values[93] = PyTuple_GET_ITEM(__pyx_args, 93);
        case 93: values[92] = PyTuple_GET_ITEM(__pyx_args, 92);
        case 92: values[91] = PyTuple_GET_ITEM(__pyx_args, 91);
        case 91: values[90] = PyTuple_GET_ITEM(__pyx_args, 90);
        case 90: values[89] = PyTuple_GET_ITEM(__pyx_args, 89);
        case 89: values[88] = PyTuple_GET_ITEM(__pyx_args, 88);
        case 88: values[87] = PyTuple_GET_ITEM(__pyx_args, 87);
        case 87: values[86] = PyTuple_GET_ITEM(__pyx_args, 86);
        case 86: values[85] = PyTuple_GET_ITEM(__pyx_args, 85);
        case 85: values[84] = PyTuple_GET_ITEM(__pyx_args, 84);
        case 84: values[83] = PyTuple_GET_ITEM(__pyx_args, 83);
        case 83: values[82] = PyTuple_GET_ITEM(__pyx_args, 82);
        case 82: values[81] = PyTuple_GET_ITEM(__pyx_args, 81);
        case 81: values[80] = PyTuple_GET_ITEM(__pyx_args, 80);
        case 80: values[79] = PyTuple_GET_ITEM(__pyx_args, 79);
        case 79: values[78] = PyTuple_GET_ITEM(__pyx_args, 78);
        case 78: values[77] = PyTuple_GET_ITEM(__pyx_args, 77);
        case 77: values[76] = PyTuple_GET_ITEM(__pyx_args, 76);
        case 76: values[75] = PyTuple_GET_ITEM(__pyx_args, 75);
        case 75: values[74] = PyTuple_GET_ITEM(__pyx_args, 74);
        case 74: values[73] = PyTuple_GET_ITEM(__pyx_args, 73);
        case 73: values[72] = PyTuple_GET_ITEM(__pyx_args, 72);
        case 72: values[71] = PyTuple_GET_ITEM(__pyx_args, 71);
        case 71: values[70] = PyTuple_GET_ITEM(__pyx_args, 70);
        case 70: values[69] = PyTuple_GET_ITEM(__pyx_args, 69);
        case 69: values[68] = PyTuple_GET_ITEM(__pyx_args, 68);
        case 68: values[67] = PyTuple_GET_ITEM(__pyx_args, 67);
        case 67: values[66] = PyTuple_GET_ITEM(__pyx_args, 66);
        case 66: values[65] = PyTuple_GET_ITEM(__pyx_args, 65);
        case 65: values[64] = PyTuple_GET_ITEM(__pyx_args, 64);
        case 64: values[63] = PyTuple_GET_ITEM(__pyx_args, 63);
        case 63: values[62] = PyTuple_GET_ITEM(__pyx_args, 62);
        case 62: values[61] = PyTuple_GET_ITEM(__pyx_args, 61);
        case 61: values[60] = PyTuple_GET_ITEM(__pyx_args, 60);
        case 60: values[59] = PyTuple_GET_ITEM(__pyx_args, 59);
        case 59: values[58] = PyTuple_GET_ITEM(__pyx_args, 58);
        case 58: values[57] = PyTuple_GET_ITEM(__pyx_args, 57);
        case 57: values[56] = PyTuple_GET_ITEM(__pyx_args, 56);
        case 56: values[55] = PyTuple_GET_ITEM(__pyx_args, 55);
        case 55: values[54] = PyTuple_GET_ITEM(__pyx_args, 54);
        case 54: values[53] = PyTuple_GET_ITEM(__pyx_args, 53);
        case 53: values[52] = PyTuple_GET_ITEM(__pyx_args, 52);
        case 52: values[51] = PyTuple_GET_ITEM(__pyx_args, 51);
        case 51: values[50] = PyTuple_GET_ITEM(__pyx_args, 50);
        case 50: values[49] = PyTuple_GET_ITEM(__pyx_args, 49);
        case 49: values[48] = PyTuple_GET_ITEM(__pyx_args, 48);
        case 48: values[47] = PyTuple_GET_ITEM(__pyx_args, 47);
        case 47: values[46] = PyTuple_GET_ITEM(__pyx_args, 46);
        case 46: values[45] = PyTuple_GET_ITEM(__pyx_args, 45);
        case 45: values[44] = PyTuple_GET_ITEM(__pyx_args, 44);
        case 44: values[43] = PyTuple_GET_ITEM(__pyx_args, 43);
        case 43: values[42] = PyTuple_GET_ITEM(__pyx_args, 42);
        case 42: values[41] = PyTuple_GET_ITEM(__pyx_args, 41);
        case 41: values[40] = PyTuple_GET_ITEM(__pyx_args, 40);
        case 40: values[39] = PyTuple_GET_ITEM(__pyx_args, 39);
        case 39: values[38] = PyTuple_GET_ITEM(__pyx_args, 38);
        case 38: values[37] = PyTuple_GET_ITEM(__pyx_args, 37);
        case 37: values[36] = PyTuple_GET_ITEM(__pyx_args, 36);
        case 36: values[35] = PyTuple_GET_ITEM(__pyx_args, 35);
        case 35: values[34] = PyTuple_GET_ITEM(__pyx_args, 34);
        case 34: values[33] = PyTuple_GET_ITEM(__pyx_args, 33);
        case 33: values[32] = PyTuple_GET_ITEM(__pyx_args, 32);
        case 32: values[31] = PyTuple_GET_ITEM(__pyx_args, 31);
        case 31: values[30] = PyTuple_GET_ITEM(__pyx_args, 30);
        case 30: values[29] = PyTuple_GET_ITEM(__pyx_args, 29);
        case 29: values[28] = PyTuple_GET_ITEM(__pyx_args, 28);
        case 28: values[27] = PyTuple_GET_ITEM(__pyx_args, 27);
        case 27: values[26] = PyTuple_GET_ITEM(__pyx_args, 26);
        case 26: values[25] = PyTuple_GET_ITEM(__pyx_args, 25);
        case 25: values[24] = PyTuple_GET_ITEM(__pyx_args, 24);
        case 24: values[23] = PyTuple_GET_ITEM(__pyx_args, 23);
        case 23: values[22] = PyTuple_GET_ITEM(__pyx_args, 22);
        case 22: values[21] = PyTuple_GET_ITEM(__pyx_args, 21);
        case 21: values[20] = PyTuple_GET_ITEM(__pyx_args, 20);
        case 20: values[19] = PyTuple_GET_ITEM(__pyx_args, 19);
        case 19: values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
        case 18: values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
        case 17: values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_trial_ref)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_grad_trial_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 1); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 2); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_velocity_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 3); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_MOVING_DOMAIN)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 4); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_PSTAB)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 5); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_l2g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 6); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case  7:
        if (likely((values[7] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dV_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 7); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case  8:
        if (likely((values[8] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_trial_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 8); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case  9:
        if (likely((values[9] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_grad_trial_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 9); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 10:
        if (likely((values[10] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_test_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 10); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 11:
        if (likely((values[11] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_grad_test_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 11); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 12:
        if (likely((values[12] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 12); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 13:
        if (likely((values[13] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_grad_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 13); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 14:
        if (likely((values[14] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 14); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 15:
        if (likely((values[15] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_grad_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 15); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 16:
        if (likely((values[16] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_trial_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 16); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 17:
        if (likely((values[17] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_grad_trial_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 17); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 18:
        if (likely((values[18] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_hess_trial_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 18); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 19:
        if (likely((values[19] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_test_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 19); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 20:
        if (likely((values[20] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_grad_test_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 20); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 21:
        if (likely((values[21] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 21); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 22:
        if (likely((values[22] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_grad_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 22); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 23:
        if (likely((values[23] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dS_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 23); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 24:
        if (likely((values[24] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 24); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 25:
        if (likely((values[25] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_grad_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 25); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 26:
        if (likely((values[26] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_test_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 26); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 27:
        if (likely((values[27] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_grad_test_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 27); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 28:
        if (likely((values[28] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 28); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 29:
        if (likely((values[29] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_grad_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 29); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 30:
        if (likely((values[30] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_test_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 30); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 31:
        if (likely((values[31] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_grad_test_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 31); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 32:
        if (likely((values[32] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_normal_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 32); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 33:
        if (likely((values[33] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_boundaryJac_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 33); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 34:
        if (likely((values[34] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_eb_adjoint_sigma)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 34); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 35:
        if (likely((values[35] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_elementDiameter)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 35); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 36:
        if (likely((values[36] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nodeDiametersArray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 36); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 37:
        if (likely((values[37] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_hFactor)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 37); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 38:
        if (likely((values[38] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nElements_global)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 38); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 39:
        if (likely((values[39] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nElements_owned)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 39); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 40:
        if (likely((values[40] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nElementBoundaries_owned)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 40); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 41:
        if (likely((values[41] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_useRBLES)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 41); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 42:
        if (likely((values[42] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_useMetrics)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 42); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 43:
        if (likely((values[43] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_alphaBDF)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 43); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 44:
        if (likely((values[44] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_epsFact_rho)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 44); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 45:
        if (likely((values[45] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_epsFact_mu)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 45); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 46:
        if (likely((values[46] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sigma)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 46); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 47:
        if (likely((values[47] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rho_0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 47); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 48:
        if (likely((values[48] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nu_0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 48); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 49:
        if (likely((values[49] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rho_1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 49); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 50:
        if (likely((values[50] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nu_1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 50); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 51:
        if (likely((values[51] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_smagorinskyConstant)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 51); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 52:
        if (likely((values[52] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_turbulenceClosureModel)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 52); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 53:
        if (likely((values[53] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Ct_sge)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 53); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 54:
        if (likely((values[54] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Cd_sge)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 54); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 55:
        if (likely((values[55] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_C_dc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 55); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 56:
        if (likely((values[56] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_C_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 56); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 57:
        if (likely((values[57] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_eps_solid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 57); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 58:
        if (likely((values[58] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_phi_solid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 58); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 59:
        if (likely((values[59] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_velocity_solid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 59); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 60:
        if (likely((values[60] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_vos)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 60); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 61:
        if (likely((values[61] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_dvos_dt)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 61); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 62:
        if (likely((values[62] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_dragAlpha)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 62); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 63:
        if (likely((values[63] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_dragBeta)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 63); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 64:
        if (likely((values[64] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_mass_source)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 64); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 65:
        if (likely((values[65] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_turb_var_0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 65); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 66:
        if (likely((values[66] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_turb_var_1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 66); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 67:
        if (likely((values[67] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_turb_var_grad_0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 67); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 68:
        if (likely((values[68] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_eddy_viscosity)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 68); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 69:
        if (likely((values[69] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_l2g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 69); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 70:
        if (likely((values[70] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_l2g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 70); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 71:
        if (likely((values[71] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 71); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 72:
        if (likely((values[72] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_u_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 72); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 73:
        if (likely((values[73] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_v_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 73); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 74:
        if (likely((values[74] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_w_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 74); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 75:
        if (likely((values[75] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_u_dof_old)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 75); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 76:
        if (likely((values[76] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_v_dof_old)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 76); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 77:
        if (likely((values[77] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_w_dof_old)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 77); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 78:
        if (likely((values[78] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_u_dof_old_old)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 78); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 79:
        if (likely((values[79] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_v_dof_old_old)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 79); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 80:
        if (likely((values[80] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_w_dof_old_old)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 80); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 81:
        if (likely((values[81] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 81); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 82:
        if (likely((values[82] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_useVF)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 82); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 83:
        if (likely((values[83] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vf)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 83); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 84:
        if (likely((values[84] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_phi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 84); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 85:
        if (likely((values[85] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_normal_phi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 85); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 86:
        if (likely((values[86] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_kappa_phi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 86); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 87:
        if (likely((values[87] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_mom_u_acc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 87); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 88:
        if (likely((values[88] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_mom_v_acc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 88); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 89:
        if (likely((values[89] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_mom_w_acc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 89); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 90:
        if (likely((values[90] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_mass_adv)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 90); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 91:
        if (likely((values[91] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_mom_u_acc_beta_bdf)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 91); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 92:
        if (likely((values[92] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_mom_v_acc_beta_bdf)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 92); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 93:
        if (likely((values[93] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_mom_w_acc_beta_bdf)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 93); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 94:
        if (likely((values[94] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_dV)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 94); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 95:
        if (likely((values[95] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_dV_last)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 95); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 96:
        if (likely((values[96] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_velocity_sge)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 96); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 97:
        if (likely((values[97] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_velocity_star)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 97); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 98:
        if (likely((values[98] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_cfl)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 98); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 99:
        if (likely((values[99] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_numDiff_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 99); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 100:
        if (likely((values[100] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_numDiff_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 100); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 101:
        if (likely((values[101] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_numDiff_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 101); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 102:
        if (likely((values[102] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_numDiff_u_last)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 102); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 103:
        if (likely((values[103] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_numDiff_v_last)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 103); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 104:
        if (likely((values[104] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_numDiff_w_last)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 104); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 105:
        if (likely((values[105] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_u_u_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 105); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 106:
        if (likely((values[106] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_u_u_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 106); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 107:
        if (likely((values[107] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_u_v_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 107); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 108:
        if (likely((values[108] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_u_v_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 108); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 109:
        if (likely((values[109] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_u_w_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 109); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 110:
        if (likely((values[110] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_u_w_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 110); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 111:
        if (likely((values[111] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_v_v_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 111); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 112:
        if (likely((values[112] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_v_v_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 112); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 113:
        if (likely((values[113] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_v_u_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 113); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 114:
        if (likely((values[114] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_v_u_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 114); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 115:
        if (likely((values[115] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_v_w_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 115); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 116:
        if (likely((values[116] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_v_w_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 116); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 117:
        if (likely((values[117] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_w_w_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 117); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 118:
        if (likely((values[118] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_w_w_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 118); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 119:
        if (likely((values[119] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_w_u_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 119); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 120:
        if (likely((values[120] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_w_u_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 120); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 121:
        if (likely((values[121] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_w_v_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 121); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 122:
        if (likely((values[122] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_w_v_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 122); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 123:
        if (likely((values[123] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_offset_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 123); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 124:
        if (likely((values[124] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_offset_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 124); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 125:
        if (likely((values[125] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_offset_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 125); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 126:
        if (likely((values[126] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_offset_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 126); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 127:
        if (likely((values[127] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stride_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 127); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 128:
        if (likely((values[128] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stride_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 128); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 129:
        if (likely((values[129] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stride_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 129); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 130:
        if (likely((values[130] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stride_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 130); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 131:
        if (likely((values[131] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_globalResidual)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 131); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 132:
        if (likely((values[132] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nExteriorElementBoundaries_globa)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 132); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 133:
        if (likely((values[133] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_exteriorElementBoundariesArray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 133); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 134:
        if (likely((values[134] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_elementBoundaryElementsArray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 134); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 135:
        if (likely((values[135] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_elementBoundaryLocalElementBound)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 135); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 136:
        if (likely((values[136] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_vf_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 136); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 137:
        if (likely((values[137] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bc_ebqe_vf_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 137); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 138:
        if (likely((values[138] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_phi_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 138); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 139:
        if (likely((values[139] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bc_ebqe_phi_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 139); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 140:
        if (likely((values[140] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_normal_phi_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 140); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 141:
        if (likely((values[141] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_kappa_phi_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 141); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 142:
        if (likely((values[142] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_vos_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 142); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 143:
        if (likely((values[143] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_turb_var_0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 143); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 144:
        if (likely((values[144] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_turb_var_1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 144); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 145:
        if (likely((values[145] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isDOFBoundary_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 145); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 146:
        if (likely((values[146] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isDOFBoundary_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 146); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 147:
        if (likely((values[147] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isDOFBoundary_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 147); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 148:
        if (likely((values[148] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isDOFBoundary_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 148); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 149:
        if (likely((values[149] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isAdvectiveFluxBoundary_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 149); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 150:
        if (likely((values[150] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isAdvectiveFluxBoundary_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 150); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 151:
        if (likely((values[151] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isAdvectiveFluxBoundary_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 151); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 152:
        if (likely((values[152] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isAdvectiveFluxBoundary_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 152); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 153:
        if (likely((values[153] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isDiffusiveFluxBoundary_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 153); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 154:
        if (likely((values[154] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isDiffusiveFluxBoundary_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 154); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 155:
        if (likely((values[155] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isDiffusiveFluxBoundary_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 155); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 156:
        if (likely((values[156] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_p_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 156); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 157:
        if (likely((values[157] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_flux_mass_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 157); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 158:
        if (likely((values[158] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_flux_mom_u_adv_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 158); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 159:
        if (likely((values[159] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_flux_mom_v_adv_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 159); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 160:
        if (likely((values[160] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_flux_mom_w_adv_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 160); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 161:
        if (likely((values[161] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_u_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 161); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 162:
        if (likely((values[162] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_flux_u_diff_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 162); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 163:
        if (likely((values[163] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_penalty_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 163); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 164:
        if (likely((values[164] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_v_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 164); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 165:
        if (likely((values[165] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_flux_v_diff_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 165); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 166:
        if (likely((values[166] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_w_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 166); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 167:
        if (likely((values[167] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_flux_w_diff_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 167); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 168:
        if (likely((values[168] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 168); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 169:
        if (likely((values[169] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_velocity)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 169); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 170:
        if (likely((values[170] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_velocity)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 170); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 171:
        if (likely((values[171] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_grad_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 171); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 172:
        if (likely((values[172] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_grad_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 172); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 173:
        if (likely((values[173] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_grad_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 173); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 174:
        if (likely((values[174] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_divU)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 174); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 175:
        if (likely((values[175] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_grad_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 175); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 176:
        if (likely((values[176] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_grad_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 176); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 177:
        if (likely((values[177] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_grad_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 177); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 178:
        if (likely((values[178] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flux)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 178); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 179:
        if (likely((values[179] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_elementResidual_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 179); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 180:
        if (likely((values[180] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_elementFlags)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 180); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 181:
        if (likely((values[181] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_boundaryFlags)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 181); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 182:
        if (likely((values[182] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_barycenters)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 182); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 183:
        if (likely((values[183] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_wettedAreas)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 183); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 184:
        if (likely((values[184] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_netForces_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 184); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 185:
        if (likely((values[185] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_netForces_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 185); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 186:
        if (likely((values[186] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_netMoments)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 186); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 187:
        if (likely((values[187] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_rho)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 187); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 188:
        if (likely((values[188] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_rho)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 188); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 189:
        if (likely((values[189] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_nu)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 189); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 190:
        if (likely((values[190] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_nu)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 190); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 191:
        if (likely((values[191] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nParticles)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 191); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 192:
        if (likely((values[192] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_epsFact)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 192); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 193:
        if (likely((values[193] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_alpha)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 193); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 194:
        if (likely((values[194] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_beta)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 194); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 195:
        if (likely((values[195] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_penalty_constant)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 195); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 196:
        if (likely((values[196] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_signed_distances)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 196); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 197:
        if (likely((values[197] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_signed_distance_normals)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 197); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 198:
        if (likely((values[198] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_velocities)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 198); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 199:
        if (likely((values[199] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_centroids)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 199); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 200:
        if (likely((values[200] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_netForces)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 200); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 201:
        if (likely((values[201] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_netMoments)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 201); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 202:
        if (likely((values[202] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_surfaceArea)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 202); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 203:
        if (likely((values[203] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_nitsche)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 203); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 204:
        if (likely((values[204] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_STABILIZATION_TYPE)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 204); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 205:
        if (likely((values[205] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_areaRefElement)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 205); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 206:
        if (likely((values[206] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cMax)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 206); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 207:
        if (likely((values[207] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cE)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 207); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 208:
        if (likely((values[208] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_forcex)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 208); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 209:
        if (likely((values[209] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_forcey)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 209); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 210:
        if (likely((values[210] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_forcez)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 210); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 211:
        if (likely((values[211] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_KILL_PRESSURE_TERM)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 211); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 212:
        if (likely((values[212] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dt)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 212); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 213:
        if (likely((values[213] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_entropyResidualAtCell)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 213); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 214:
        if (likely((values[214] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_maxSpeed2AtCell)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 214); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 215:
        if (likely((values[215] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_maxSpeed2AtOmega)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 215); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 216:
        if (likely((values[216] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rhoAtCell)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 216); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 217:
        if (likely((values[217] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_muAtCell)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 217); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 218:
        if (likely((values[218] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_quantDOFs)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 218); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 219:
        if (likely((values[219] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_numDOFsPerEqn)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 219); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 220:
        if (likely((values[220] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_DofLoops)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 220); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 221:
        if (likely((values[221] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_DofLoops)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 221); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 222:
        if (likely((values[222] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ML)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 222); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 223:
        if (likely((values[223] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Cx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 223); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 224:
        if (likely((values[224] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Cy)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 224); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 225:
        if (likely((values[225] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Cz)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 225); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 226:
        if (likely((values[226] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_MATERIAL_PARAMETERS_AS_FUNCTION)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 226); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 227:
        if (likely((values[227] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_density_as_function)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 227); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 228:
        if (likely((values[228] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dynamic_viscosity_as_function)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 228); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 229:
        if (likely((values[229] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_density_as_function)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 229); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 230:
        if (likely((values[230] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_dynamic_viscosity_as_functi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 230); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
        case 231:
        if (likely((values[231] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_order_polynomial)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, 231); __PYX_ERR(0, 3487, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calculateResidual") < 0)) __PYX_ERR(0, 3487, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 232) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
      values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
      values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
      values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
      values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
      values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
      values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
      values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
      values[19] = PyTuple_GET_ITEM(__pyx_args, 19);
      values[20] = PyTuple_GET_ITEM(__pyx_args, 20);
      values[21] = PyTuple_GET_ITEM(__pyx_args, 21);
      values[22] = PyTuple_GET_ITEM(__pyx_args, 22);
      values[23] = PyTuple_GET_ITEM(__pyx_args, 23);
      values[24] = PyTuple_GET_ITEM(__pyx_args, 24);
      values[25] = PyTuple_GET_ITEM(__pyx_args, 25);
      values[26] = PyTuple_GET_ITEM(__pyx_args, 26);
      values[27] = PyTuple_GET_ITEM(__pyx_args, 27);
      values[28] = PyTuple_GET_ITEM(__pyx_args, 28);
      values[29] = PyTuple_GET_ITEM(__pyx_args, 29);
      values[30] = PyTuple_GET_ITEM(__pyx_args, 30);
      values[31] = PyTuple_GET_ITEM(__pyx_args, 31);
      values[32] = PyTuple_GET_ITEM(__pyx_args, 32);
      values[33] = PyTuple_GET_ITEM(__pyx_args, 33);
      values[34] = PyTuple_GET_ITEM(__pyx_args, 34);
      values[35] = PyTuple_GET_ITEM(__pyx_args, 35);
      values[36] = PyTuple_GET_ITEM(__pyx_args, 36);
      values[37] = PyTuple_GET_ITEM(__pyx_args, 37);
      values[38] = PyTuple_GET_ITEM(__pyx_args, 38);
      values[39] = PyTuple_GET_ITEM(__pyx_args, 39);
      values[40] = PyTuple_GET_ITEM(__pyx_args, 40);
      values[41] = PyTuple_GET_ITEM(__pyx_args, 41);
      values[42] = PyTuple_GET_ITEM(__pyx_args, 42);
      values[43] = PyTuple_GET_ITEM(__pyx_args, 43);
      values[44] = PyTuple_GET_ITEM(__pyx_args, 44);
      values[45] = PyTuple_GET_ITEM(__pyx_args, 45);
      values[46] = PyTuple_GET_ITEM(__pyx_args, 46);
      values[47] = PyTuple_GET_ITEM(__pyx_args, 47);
      values[48] = PyTuple_GET_ITEM(__pyx_args, 48);
      values[49] = PyTuple_GET_ITEM(__pyx_args, 49);
      values[50] = PyTuple_GET_ITEM(__pyx_args, 50);
      values[51] = PyTuple_GET_ITEM(__pyx_args, 51);
      values[52] = PyTuple_GET_ITEM(__pyx_args, 52);
      values[53] = PyTuple_GET_ITEM(__pyx_args, 53);
      values[54] = PyTuple_GET_ITEM(__pyx_args, 54);
      values[55] = PyTuple_GET_ITEM(__pyx_args, 55);
      values[56] = PyTuple_GET_ITEM(__pyx_args, 56);
      values[57] = PyTuple_GET_ITEM(__pyx_args, 57);
      values[58] = PyTuple_GET_ITEM(__pyx_args, 58);
      values[59] = PyTuple_GET_ITEM(__pyx_args, 59);
      values[60] = PyTuple_GET_ITEM(__pyx_args, 60);
      values[61] = PyTuple_GET_ITEM(__pyx_args, 61);
      values[62] = PyTuple_GET_ITEM(__pyx_args, 62);
      values[63] = PyTuple_GET_ITEM(__pyx_args, 63);
      values[64] = PyTuple_GET_ITEM(__pyx_args, 64);
      values[65] = PyTuple_GET_ITEM(__pyx_args, 65);
      values[66] = PyTuple_GET_ITEM(__pyx_args, 66);
      values[67] = PyTuple_GET_ITEM(__pyx_args, 67);
      values[68] = PyTuple_GET_ITEM(__pyx_args, 68);
      values[69] = PyTuple_GET_ITEM(__pyx_args, 69);
      values[70] = PyTuple_GET_ITEM(__pyx_args, 70);
      values[71] = PyTuple_GET_ITEM(__pyx_args, 71);
      values[72] = PyTuple_GET_ITEM(__pyx_args, 72);
      values[73] = PyTuple_GET_ITEM(__pyx_args, 73);
      values[74] = PyTuple_GET_ITEM(__pyx_args, 74);
      values[75] = PyTuple_GET_ITEM(__pyx_args, 75);
      values[76] = PyTuple_GET_ITEM(__pyx_args, 76);
      values[77] = PyTuple_GET_ITEM(__pyx_args, 77);
      values[78] = PyTuple_GET_ITEM(__pyx_args, 78);
      values[79] = PyTuple_GET_ITEM(__pyx_args, 79);
      values[80] = PyTuple_GET_ITEM(__pyx_args, 80);
      values[81] = PyTuple_GET_ITEM(__pyx_args, 81);
      values[82] = PyTuple_GET_ITEM(__pyx_args, 82);
      values[83] = PyTuple_GET_ITEM(__pyx_args, 83);
      values[84] = PyTuple_GET_ITEM(__pyx_args, 84);
      values[85] = PyTuple_GET_ITEM(__pyx_args, 85);
      values[86] = PyTuple_GET_ITEM(__pyx_args, 86);
      values[87] = PyTuple_GET_ITEM(__pyx_args, 87);
      values[88] = PyTuple_GET_ITEM(__pyx_args, 88);
      values[89] = PyTuple_GET_ITEM(__pyx_args, 89);
      values[90] = PyTuple_GET_ITEM(__pyx_args, 90);
      values[91] = PyTuple_GET_ITEM(__pyx_args, 91);
      values[92] = PyTuple_GET_ITEM(__pyx_args, 92);
      values[93] = PyTuple_GET_ITEM(__pyx_args, 93);
      values[94] = PyTuple_GET_ITEM(__pyx_args, 94);
      values[95] = PyTuple_GET_ITEM(__pyx_args, 95);
      values[96] = PyTuple_GET_ITEM(__pyx_args, 96);
      values[97] = PyTuple_GET_ITEM(__pyx_args, 97);
      values[98] = PyTuple_GET_ITEM(__pyx_args, 98);
      values[99] = PyTuple_GET_ITEM(__pyx_args, 99);
      values[100] = PyTuple_GET_ITEM(__pyx_args, 100);
      values[101] = PyTuple_GET_ITEM(__pyx_args, 101);
      values[102] = PyTuple_GET_ITEM(__pyx_args, 102);
      values[103] = PyTuple_GET_ITEM(__pyx_args, 103);
      values[104] = PyTuple_GET_ITEM(__pyx_args, 104);
      values[105] = PyTuple_GET_ITEM(__pyx_args, 105);
      values[106] = PyTuple_GET_ITEM(__pyx_args, 106);
      values[107] = PyTuple_GET_ITEM(__pyx_args, 107);
      values[108] = PyTuple_GET_ITEM(__pyx_args, 108);
      values[109] = PyTuple_GET_ITEM(__pyx_args, 109);
      values[110] = PyTuple_GET_ITEM(__pyx_args, 110);
      values[111] = PyTuple_GET_ITEM(__pyx_args, 111);
      values[112] = PyTuple_GET_ITEM(__pyx_args, 112);
      values[113] = PyTuple_GET_ITEM(__pyx_args, 113);
      values[114] = PyTuple_GET_ITEM(__pyx_args, 114);
      values[115] = PyTuple_GET_ITEM(__pyx_args, 115);
      values[116] = PyTuple_GET_ITEM(__pyx_args, 116);
      values[117] = PyTuple_GET_ITEM(__pyx_args, 117);
      values[118] = PyTuple_GET_ITEM(__pyx_args, 118);
      values[119] = PyTuple_GET_ITEM(__pyx_args, 119);
      values[120] = PyTuple_GET_ITEM(__pyx_args, 120);
      values[121] = PyTuple_GET_ITEM(__pyx_args, 121);
      values[122] = PyTuple_GET_ITEM(__pyx_args, 122);
      values[123] = PyTuple_GET_ITEM(__pyx_args, 123);
      values[124] = PyTuple_GET_ITEM(__pyx_args, 124);
      values[125] = PyTuple_GET_ITEM(__pyx_args, 125);
      values[126] = PyTuple_GET_ITEM(__pyx_args, 126);
      values[127] = PyTuple_GET_ITEM(__pyx_args, 127);
      values[128] = PyTuple_GET_ITEM(__pyx_args, 128);
      values[129] = PyTuple_GET_ITEM(__pyx_args, 129);
      values[130] = PyTuple_GET_ITEM(__pyx_args, 130);
      values[131] = PyTuple_GET_ITEM(__pyx_args, 131);
      values[132] = PyTuple_GET_ITEM(__pyx_args, 132);
      values[133] = PyTuple_GET_ITEM(__pyx_args, 133);
      values[134] = PyTuple_GET_ITEM(__pyx_args, 134);
      values[135] = PyTuple_GET_ITEM(__pyx_args, 135);
      values[136] = PyTuple_GET_ITEM(__pyx_args, 136);
      values[137] = PyTuple_GET_ITEM(__pyx_args, 137);
      values[138] = PyTuple_GET_ITEM(__pyx_args, 138);
      values[139] = PyTuple_GET_ITEM(__pyx_args, 139);
      values[140] = PyTuple_GET_ITEM(__pyx_args, 140);
      values[141] = PyTuple_GET_ITEM(__pyx_args, 141);
      values[142] = PyTuple_GET_ITEM(__pyx_args, 142);
      values[143] = PyTuple_GET_ITEM(__pyx_args, 143);
      values[144] = PyTuple_GET_ITEM(__pyx_args, 144);
      values[145] = PyTuple_GET_ITEM(__pyx_args, 145);
      values[146] = PyTuple_GET_ITEM(__pyx_args, 146);
      values[147] = PyTuple_GET_ITEM(__pyx_args, 147);
      values[148] = PyTuple_GET_ITEM(__pyx_args, 148);
      values[149] = PyTuple_GET_ITEM(__pyx_args, 149);
      values[150] = PyTuple_GET_ITEM(__pyx_args, 150);
      values[151] = PyTuple_GET_ITEM(__pyx_args, 151);
      values[152] = PyTuple_GET_ITEM(__pyx_args, 152);
      values[153] = PyTuple_GET_ITEM(__pyx_args, 153);
      values[154] = PyTuple_GET_ITEM(__pyx_args, 154);
      values[155] = PyTuple_GET_ITEM(__pyx_args, 155);
      values[156] = PyTuple_GET_ITEM(__pyx_args, 156);
      values[157] = PyTuple_GET_ITEM(__pyx_args, 157);
      values[158] = PyTuple_GET_ITEM(__pyx_args, 158);
      values[159] = PyTuple_GET_ITEM(__pyx_args, 159);
      values[160] = PyTuple_GET_ITEM(__pyx_args, 160);
      values[161] = PyTuple_GET_ITEM(__pyx_args, 161);
      values[162] = PyTuple_GET_ITEM(__pyx_args, 162);
      values[163] = PyTuple_GET_ITEM(__pyx_args, 163);
      values[164] = PyTuple_GET_ITEM(__pyx_args, 164);
      values[165] = PyTuple_GET_ITEM(__pyx_args, 165);
      values[166] = PyTuple_GET_ITEM(__pyx_args, 166);
      values[167] = PyTuple_GET_ITEM(__pyx_args, 167);
      values[168] = PyTuple_GET_ITEM(__pyx_args, 168);
      values[169] = PyTuple_GET_ITEM(__pyx_args, 169);
      values[170] = PyTuple_GET_ITEM(__pyx_args, 170);
      values[171] = PyTuple_GET_ITEM(__pyx_args, 171);
      values[172] = PyTuple_GET_ITEM(__pyx_args, 172);
      values[173] = PyTuple_GET_ITEM(__pyx_args, 173);
      values[174] = PyTuple_GET_ITEM(__pyx_args, 174);
      values[175] = PyTuple_GET_ITEM(__pyx_args, 175);
      values[176] = PyTuple_GET_ITEM(__pyx_args, 176);
      values[177] = PyTuple_GET_ITEM(__pyx_args, 177);
      values[178] = PyTuple_GET_ITEM(__pyx_args, 178);
      values[179] = PyTuple_GET_ITEM(__pyx_args, 179);
      values[180] = PyTuple_GET_ITEM(__pyx_args, 180);
      values[181] = PyTuple_GET_ITEM(__pyx_args, 181);
      values[182] = PyTuple_GET_ITEM(__pyx_args, 182);
      values[183] = PyTuple_GET_ITEM(__pyx_args, 183);
      values[184] = PyTuple_GET_ITEM(__pyx_args, 184);
      values[185] = PyTuple_GET_ITEM(__pyx_args, 185);
      values[186] = PyTuple_GET_ITEM(__pyx_args, 186);
      values[187] = PyTuple_GET_ITEM(__pyx_args, 187);
      values[188] = PyTuple_GET_ITEM(__pyx_args, 188);
      values[189] = PyTuple_GET_ITEM(__pyx_args, 189);
      values[190] = PyTuple_GET_ITEM(__pyx_args, 190);
      values[191] = PyTuple_GET_ITEM(__pyx_args, 191);
      values[192] = PyTuple_GET_ITEM(__pyx_args, 192);
      values[193] = PyTuple_GET_ITEM(__pyx_args, 193);
      values[194] = PyTuple_GET_ITEM(__pyx_args, 194);
      values[195] = PyTuple_GET_ITEM(__pyx_args, 195);
      values[196] = PyTuple_GET_ITEM(__pyx_args, 196);
      values[197] = PyTuple_GET_ITEM(__pyx_args, 197);
      values[198] = PyTuple_GET_ITEM(__pyx_args, 198);
      values[199] = PyTuple_GET_ITEM(__pyx_args, 199);
      values[200] = PyTuple_GET_ITEM(__pyx_args, 200);
      values[201] = PyTuple_GET_ITEM(__pyx_args, 201);
      values[202] = PyTuple_GET_ITEM(__pyx_args, 202);
      values[203] = PyTuple_GET_ITEM(__pyx_args, 203);
      values[204] = PyTuple_GET_ITEM(__pyx_args, 204);
      values[205] = PyTuple_GET_ITEM(__pyx_args, 205);
      values[206] = PyTuple_GET_ITEM(__pyx_args, 206);
      values[207] = PyTuple_GET_ITEM(__pyx_args, 207);
      values[208] = PyTuple_GET_ITEM(__pyx_args, 208);
      values[209] = PyTuple_GET_ITEM(__pyx_args, 209);
      values[210] = PyTuple_GET_ITEM(__pyx_args, 210);
      values[211] = PyTuple_GET_ITEM(__pyx_args, 211);
      values[212] = PyTuple_GET_ITEM(__pyx_args, 212);
      values[213] = PyTuple_GET_ITEM(__pyx_args, 213);
      values[214] = PyTuple_GET_ITEM(__pyx_args, 214);
      values[215] = PyTuple_GET_ITEM(__pyx_args, 215);
      values[216] = PyTuple_GET_ITEM(__pyx_args, 216);
      values[217] = PyTuple_GET_ITEM(__pyx_args, 217);
      values[218] = PyTuple_GET_ITEM(__pyx_args, 218);
      values[219] = PyTuple_GET_ITEM(__pyx_args, 219);
      values[220] = PyTuple_GET_ITEM(__pyx_args, 220);
      values[221] = PyTuple_GET_ITEM(__pyx_args, 221);
      values[222] = PyTuple_GET_ITEM(__pyx_args, 222);
      values[223] = PyTuple_GET_ITEM(__pyx_args, 223);
      values[224] = PyTuple_GET_ITEM(__pyx_args, 224);
      values[225] = PyTuple_GET_ITEM(__pyx_args, 225);
      values[226] = PyTuple_GET_ITEM(__pyx_args, 226);
      values[227] = PyTuple_GET_ITEM(__pyx_args, 227);
      values[228] = PyTuple_GET_ITEM(__pyx_args, 228);
      values[229] = PyTuple_GET_ITEM(__pyx_args, 229);
      values[230] = PyTuple_GET_ITEM(__pyx_args, 230);
      values[231] = PyTuple_GET_ITEM(__pyx_args, 231);
    }
    __pyx_v_mesh_trial_ref = ((PyArrayObject *)values[0]);
    __pyx_v_mesh_grad_trial_ref = ((PyArrayObject *)values[1]);
    __pyx_v_mesh_dof = ((PyArrayObject *)values[2]);
    __pyx_v_mesh_velocity_dof = ((PyArrayObject *)values[3]);
    __pyx_v_MOVING_DOMAIN = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_MOVING_DOMAIN == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3492, __pyx_L3_error)
    __pyx_v_PSTAB = __pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_PSTAB == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3493, __pyx_L3_error)
    __pyx_v_mesh_l2g = ((PyArrayObject *)values[6]);
    __pyx_v_dV_ref = ((PyArrayObject *)values[7]);
    __pyx_v_p_trial_ref = ((PyArrayObject *)values[8]);
    __pyx_v_p_grad_trial_ref = ((PyArrayObject *)values[9]);
    __pyx_v_p_test_ref = ((PyArrayObject *)values[10]);
    __pyx_v_p_grad_test_ref = ((PyArrayObject *)values[11]);
    __pyx_v_q_p = ((PyArrayObject *)values[12]);
    __pyx_v_q_grad_p = ((PyArrayObject *)values[13]);
    __pyx_v_ebqe_p = ((PyArrayObject *)values[14]);
    __pyx_v_ebqe_grad_p = ((PyArrayObject *)values[15]);
    __pyx_v_vel_trial_ref = ((PyArrayObject *)values[16]);
    __pyx_v_vel_grad_trial_ref = ((PyArrayObject *)values[17]);
    __pyx_v_vel_hess_trial_ref = ((PyArrayObject *)values[18]);
    __pyx_v_vel_test_ref = ((PyArrayObject *)values[19]);
    __pyx_v_vel_grad_test_ref = ((PyArrayObject *)values[20]);
    __pyx_v_mesh_trial_trace_ref = ((PyArrayObject *)values[21]);
    __pyx_v_mesh_grad_trial_trace_ref = ((PyArrayObject *)values[22]);
    __pyx_v_dS_ref = ((PyArrayObject *)values[23]);
    __pyx_v_p_trial_trace_ref = ((PyArrayObject *)values[24]);
    __pyx_v_p_grad_trial_trace_ref = ((PyArrayObject *)values[25]);
    __pyx_v_p_test_trace_ref = ((PyArrayObject *)values[26]);
    __pyx_v_p_grad_test_trace_ref = ((PyArrayObject *)values[27]);
    __pyx_v_vel_trial_trace_ref = ((PyArrayObject *)values[28]);
    __pyx_v_vel_grad_trial_trace_ref = ((PyArrayObject *)values[29]);
    __pyx_v_vel_test_trace_ref = ((PyArrayObject *)values[30]);
    __pyx_v_vel_grad_test_trace_ref = ((PyArrayObject *)values[31]);
    __pyx_v_normal_ref = ((PyArrayObject *)values[32]);
    __pyx_v_boundaryJac_ref = ((PyArrayObject *)values[33]);
    __pyx_v_eb_adjoint_sigma = __pyx_PyFloat_AsDouble(values[34]); if (unlikely((__pyx_v_eb_adjoint_sigma == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3522, __pyx_L3_error)
    __pyx_v_elementDiameter = ((PyArrayObject *)values[35]);
    __pyx_v_nodeDiametersArray = ((PyArrayObject *)values[36]);
    __pyx_v_hFactor = __pyx_PyFloat_AsDouble(values[37]); if (unlikely((__pyx_v_hFactor == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3525, __pyx_L3_error)
    __pyx_v_nElements_global = __Pyx_PyInt_As_int(values[38]); if (unlikely((__pyx_v_nElements_global == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3526, __pyx_L3_error)
    __pyx_v_nElements_owned = __Pyx_PyInt_As_int(values[39]); if (unlikely((__pyx_v_nElements_owned == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3527, __pyx_L3_error)
    __pyx_v_nElementBoundaries_owned = __Pyx_PyInt_As_int(values[40]); if (unlikely((__pyx_v_nElementBoundaries_owned == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3528, __pyx_L3_error)
    __pyx_v_useRBLES = __pyx_PyFloat_AsDouble(values[41]); if (unlikely((__pyx_v_useRBLES == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3529, __pyx_L3_error)
    __pyx_v_useMetrics = __pyx_PyFloat_AsDouble(values[42]); if (unlikely((__pyx_v_useMetrics == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3530, __pyx_L3_error)
    __pyx_v_alphaBDF = __pyx_PyFloat_AsDouble(values[43]); if (unlikely((__pyx_v_alphaBDF == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3531, __pyx_L3_error)
    __pyx_v_epsFact_rho = __pyx_PyFloat_AsDouble(values[44]); if (unlikely((__pyx_v_epsFact_rho == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3532, __pyx_L3_error)
    __pyx_v_epsFact_mu = __pyx_PyFloat_AsDouble(values[45]); if (unlikely((__pyx_v_epsFact_mu == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3533, __pyx_L3_error)
    __pyx_v_sigma = __pyx_PyFloat_AsDouble(values[46]); if (unlikely((__pyx_v_sigma == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3534, __pyx_L3_error)
    __pyx_v_rho_0 = __pyx_PyFloat_AsDouble(values[47]); if (unlikely((__pyx_v_rho_0 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3535, __pyx_L3_error)
    __pyx_v_nu_0 = __pyx_PyFloat_AsDouble(values[48]); if (unlikely((__pyx_v_nu_0 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3536, __pyx_L3_error)
    __pyx_v_rho_1 = __pyx_PyFloat_AsDouble(values[49]); if (unlikely((__pyx_v_rho_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3537, __pyx_L3_error)
    __pyx_v_nu_1 = __pyx_PyFloat_AsDouble(values[50]); if (unlikely((__pyx_v_nu_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3538, __pyx_L3_error)
    __pyx_v_smagorinskyConstant = __pyx_PyFloat_AsDouble(values[51]); if (unlikely((__pyx_v_smagorinskyConstant == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3539, __pyx_L3_error)
    __pyx_v_turbulenceClosureModel = __Pyx_PyInt_As_int(values[52]); if (unlikely((__pyx_v_turbulenceClosureModel == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3540, __pyx_L3_error)
    __pyx_v_Ct_sge = __pyx_PyFloat_AsDouble(values[53]); if (unlikely((__pyx_v_Ct_sge == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3541, __pyx_L3_error)
    __pyx_v_Cd_sge = __pyx_PyFloat_AsDouble(values[54]); if (unlikely((__pyx_v_Cd_sge == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3542, __pyx_L3_error)
    __pyx_v_C_dc = __pyx_PyFloat_AsDouble(values[55]); if (unlikely((__pyx_v_C_dc == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3543, __pyx_L3_error)
    __pyx_v_C_b = __pyx_PyFloat_AsDouble(values[56]); if (unlikely((__pyx_v_C_b == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3544, __pyx_L3_error)
    __pyx_v_eps_solid = ((PyArrayObject *)values[57]);
    __pyx_v_phi_solid = ((PyArrayObject *)values[58]);
    __pyx_v_q_velocity_solid = ((PyArrayObject *)values[59]);
    __pyx_v_q_vos = ((PyArrayObject *)values[60]);
    __pyx_v_q_dvos_dt = ((PyArrayObject *)values[61]);
    __pyx_v_q_dragAlpha = ((PyArrayObject *)values[62]);
    __pyx_v_q_dragBeta = ((PyArrayObject *)values[63]);
    __pyx_v_q_mass_source = ((PyArrayObject *)values[64]);
    __pyx_v_q_turb_var_0 = ((PyArrayObject *)values[65]);
    __pyx_v_q_turb_var_1 = ((PyArrayObject *)values[66]);
    __pyx_v_q_turb_var_grad_0 = ((PyArrayObject *)values[67]);
    __pyx_v_q_eddy_viscosity = ((PyArrayObject *)values[68]);
    __pyx_v_p_l2g = ((PyArrayObject *)values[69]);
    __pyx_v_vel_l2g = ((PyArrayObject *)values[70]);
    __pyx_v_p_dof = ((PyArrayObject *)values[71]);
    __pyx_v_u_dof = ((PyArrayObject *)values[72]);
    __pyx_v_v_dof = ((PyArrayObject *)values[73]);
    __pyx_v_w_dof = ((PyArrayObject *)values[74]);
    __pyx_v_u_dof_old = ((PyArrayObject *)values[75]);
    __pyx_v_v_dof_old = ((PyArrayObject *)values[76]);
    __pyx_v_w_dof_old = ((PyArrayObject *)values[77]);
    __pyx_v_u_dof_old_old = ((PyArrayObject *)values[78]);
    __pyx_v_v_dof_old_old = ((PyArrayObject *)values[79]);
    __pyx_v_w_dof_old_old = ((PyArrayObject *)values[80]);
    __pyx_v_g = ((PyArrayObject *)values[81]);
    __pyx_v_useVF = __pyx_PyFloat_AsDouble(values[82]); if (unlikely((__pyx_v_useVF == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3572, __pyx_L3_error)
    __pyx_v_vf = ((PyArrayObject *)values[83]);
    __pyx_v_phi = ((PyArrayObject *)values[84]);
    __pyx_v_normal_phi = ((PyArrayObject *)values[85]);
    __pyx_v_kappa_phi = ((PyArrayObject *)values[86]);
    __pyx_v_q_mom_u_acc = ((PyArrayObject *)values[87]);
    __pyx_v_q_mom_v_acc = ((PyArrayObject *)values[88]);
    __pyx_v_q_mom_w_acc = ((PyArrayObject *)values[89]);
    __pyx_v_q_mass_adv = ((PyArrayObject *)values[90]);
    __pyx_v_q_mom_u_acc_beta_bdf = ((PyArrayObject *)values[91]);
    __pyx_v_q_mom_v_acc_beta_bdf = ((PyArrayObject *)values[92]);
    __pyx_v_q_mom_w_acc_beta_bdf = ((PyArrayObject *)values[93]);
    __pyx_v_q_dV = ((PyArrayObject *)values[94]);
    __pyx_v_q_dV_last = ((PyArrayObject *)values[95]);
    __pyx_v_q_velocity_sge = ((PyArrayObject *)values[96]);
    __pyx_v_ebqe_velocity_star = ((PyArrayObject *)values[97]);
    __pyx_v_q_cfl = ((PyArrayObject *)values[98]);
    __pyx_v_q_numDiff_u = ((PyArrayObject *)values[99]);
    __pyx_v_q_numDiff_v = ((PyArrayObject *)values[100]);
    __pyx_v_q_numDiff_w = ((PyArrayObject *)values[101]);
    __pyx_v_q_numDiff_u_last = ((PyArrayObject *)values[102]);
    __pyx_v_q_numDiff_v_last = ((PyArrayObject *)values[103]);
    __pyx_v_q_numDiff_w_last = ((PyArrayObject *)values[104]);
    __pyx_v_sdInfo_u_u_rowptr = ((PyArrayObject *)values[105]);
    __pyx_v_sdInfo_u_u_colind = ((PyArrayObject *)values[106]);
    __pyx_v_sdInfo_u_v_rowptr = ((PyArrayObject *)values[107]);
    __pyx_v_sdInfo_u_v_colind = ((PyArrayObject *)values[108]);
    __pyx_v_sdInfo_u_w_rowptr = ((PyArrayObject *)values[109]);
    __pyx_v_sdInfo_u_w_colind = ((PyArrayObject *)values[110]);
    __pyx_v_sdInfo_v_v_rowptr = ((PyArrayObject *)values[111]);
    __pyx_v_sdInfo_v_v_colind = ((PyArrayObject *)values[112]);
    __pyx_v_sdInfo_v_u_rowptr = ((PyArrayObject *)values[113]);
    __pyx_v_sdInfo_v_u_colind = ((PyArrayObject *)values[114]);
    __pyx_v_sdInfo_v_w_rowptr = ((PyArrayObject *)values[115]);
    __pyx_v_sdInfo_v_w_colind = ((PyArrayObject *)values[116]);
    __pyx_v_sdInfo_w_w_rowptr = ((PyArrayObject *)values[117]);
    __pyx_v_sdInfo_w_w_colind = ((PyArrayObject *)values[118]);
    __pyx_v_sdInfo_w_u_rowptr = ((PyArrayObject *)values[119]);
    __pyx_v_sdInfo_w_u_colind = ((PyArrayObject *)values[120]);
    __pyx_v_sdInfo_w_v_rowptr = ((PyArrayObject *)values[121]);
    __pyx_v_sdInfo_w_v_colind = ((PyArrayObject *)values[122]);
    __pyx_v_offset_p = __Pyx_PyInt_As_int(values[123]); if (unlikely((__pyx_v_offset_p == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3598, __pyx_L3_error)
    __pyx_v_offset_u = __Pyx_PyInt_As_int(values[124]); if (unlikely((__pyx_v_offset_u == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3598, __pyx_L3_error)
    __pyx_v_offset_v = __Pyx_PyInt_As_int(values[125]); if (unlikely((__pyx_v_offset_v == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3598, __pyx_L3_error)
    __pyx_v_offset_w = __Pyx_PyInt_As_int(values[126]); if (unlikely((__pyx_v_offset_w == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3598, __pyx_L3_error)
    __pyx_v_stride_p = __Pyx_PyInt_As_int(values[127]); if (unlikely((__pyx_v_stride_p == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3599, __pyx_L3_error)
    __pyx_v_stride_u = __Pyx_PyInt_As_int(values[128]); if (unlikely((__pyx_v_stride_u == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3599, __pyx_L3_error)
    __pyx_v_stride_v = __Pyx_PyInt_As_int(values[129]); if (unlikely((__pyx_v_stride_v == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3599, __pyx_L3_error)
    __pyx_v_stride_w = __Pyx_PyInt_As_int(values[130]); if (unlikely((__pyx_v_stride_w == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3599, __pyx_L3_error)
    __pyx_v_globalResidual = ((PyArrayObject *)values[131]);
    __pyx_v_nExteriorElementBoundaries_global = __Pyx_PyInt_As_int(values[132]); if (unlikely((__pyx_v_nExteriorElementBoundaries_global == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3601, __pyx_L3_error)
    __pyx_v_exteriorElementBoundariesArray = ((PyArrayObject *)values[133]);
    __pyx_v_elementBoundaryElementsArray = ((PyArrayObject *)values[134]);
    __pyx_v_elementBoundaryLocalElementBoundariesArray = ((PyArrayObject *)values[135]);
    __pyx_v_ebqe_vf_ext = ((PyArrayObject *)values[136]);
    __pyx_v_bc_ebqe_vf_ext = ((PyArrayObject *)values[137]);
    __pyx_v_ebqe_phi_ext = ((PyArrayObject *)values[138]);
    __pyx_v_bc_ebqe_phi_ext = ((PyArrayObject *)values[139]);
    __pyx_v_ebqe_normal_phi_ext = ((PyArrayObject *)values[140]);
    __pyx_v_ebqe_kappa_phi_ext = ((PyArrayObject *)values[141]);
    __pyx_v_ebqe_vos_ext = ((PyArrayObject *)values[142]);
    __pyx_v_ebqe_turb_var_0 = ((PyArrayObject *)values[143]);
    __pyx_v_ebqe_turb_var_1 = ((PyArrayObject *)values[144]);
    __pyx_v_isDOFBoundary_p = ((PyArrayObject *)values[145]);
    __pyx_v_isDOFBoundary_u = ((PyArrayObject *)values[146]);
    __pyx_v_isDOFBoundary_v = ((PyArrayObject *)values[147]);
    __pyx_v_isDOFBoundary_w = ((PyArrayObject *)values[148]);
    __pyx_v_isAdvectiveFluxBoundary_p = ((PyArrayObject *)values[149]);
    __pyx_v_isAdvectiveFluxBoundary_u = ((PyArrayObject *)values[150]);
    __pyx_v_isAdvectiveFluxBoundary_v = ((PyArrayObject *)values[151]);
    __pyx_v_isAdvectiveFluxBoundary_w = ((PyArrayObject *)values[152]);
    __pyx_v_isDiffusiveFluxBoundary_u = ((PyArrayObject *)values[153]);
    __pyx_v_isDiffusiveFluxBoundary_v = ((PyArrayObject *)values[154]);
    __pyx_v_isDiffusiveFluxBoundary_w = ((PyArrayObject *)values[155]);
    __pyx_v_ebqe_bc_p_ext = ((PyArrayObject *)values[156]);
    __pyx_v_ebqe_bc_flux_mass_ext = ((PyArrayObject *)values[157]);
    __pyx_v_ebqe_bc_flux_mom_u_adv_ext = ((PyArrayObject *)values[158]);
    __pyx_v_ebqe_bc_flux_mom_v_adv_ext = ((PyArrayObject *)values[159]);
    __pyx_v_ebqe_bc_flux_mom_w_adv_ext = ((PyArrayObject *)values[160]);
    __pyx_v_ebqe_bc_u_ext = ((PyArrayObject *)values[161]);
    __pyx_v_ebqe_bc_flux_u_diff_ext = ((PyArrayObject *)values[162]);
    __pyx_v_ebqe_penalty_ext = ((PyArrayObject *)values[163]);
    __pyx_v_ebqe_bc_v_ext = ((PyArrayObject *)values[164]);
    __pyx_v_ebqe_bc_flux_v_diff_ext = ((PyArrayObject *)values[165]);
    __pyx_v_ebqe_bc_w_ext = ((PyArrayObject *)values[166]);
    __pyx_v_ebqe_bc_flux_w_diff_ext = ((PyArrayObject *)values[167]);
    __pyx_v_q_x = ((PyArrayObject *)values[168]);
    __pyx_v_q_velocity = ((PyArrayObject *)values[169]);
    __pyx_v_ebqe_velocity = ((PyArrayObject *)values[170]);
    __pyx_v_q_grad_u = ((PyArrayObject *)values[171]);
    __pyx_v_q_grad_v = ((PyArrayObject *)values[172]);
    __pyx_v_q_grad_w = ((PyArrayObject *)values[173]);
    __pyx_v_q_divU = ((PyArrayObject *)values[174]);
    __pyx_v_ebqe_grad_u = ((PyArrayObject *)values[175]);
    __pyx_v_ebqe_grad_v = ((PyArrayObject *)values[176]);
    __pyx_v_ebqe_grad_w = ((PyArrayObject *)values[177]);
    __pyx_v_flux = ((PyArrayObject *)values[178]);
    __pyx_v_elementResidual_p = ((PyArrayObject *)values[179]);
    __pyx_v_elementFlags = ((PyArrayObject *)values[180]);
    __pyx_v_boundaryFlags = ((PyArrayObject *)values[181]);
    __pyx_v_barycenters = ((PyArrayObject *)values[182]);
    __pyx_v_wettedAreas = ((PyArrayObject *)values[183]);
    __pyx_v_netForces_p = ((PyArrayObject *)values[184]);
    __pyx_v_netForces_v = ((PyArrayObject *)values[185]);
    __pyx_v_netMoments = ((PyArrayObject *)values[186]);
    __pyx_v_q_rho = ((PyArrayObject *)values[187]);
    __pyx_v_ebqe_rho = ((PyArrayObject *)values[188]);
    __pyx_v_q_nu = ((PyArrayObject *)values[189]);
    __pyx_v_ebqe_nu = ((PyArrayObject *)values[190]);
    __pyx_v_nParticles = __Pyx_PyInt_As_int(values[191]); if (unlikely((__pyx_v_nParticles == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3662, __pyx_L3_error)
    __pyx_v_particle_epsFact = __pyx_PyFloat_AsDouble(values[192]); if (unlikely((__pyx_v_particle_epsFact == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3663, __pyx_L3_error)
    __pyx_v_particle_alpha = __pyx_PyFloat_AsDouble(values[193]); if (unlikely((__pyx_v_particle_alpha == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3664, __pyx_L3_error)
    __pyx_v_particle_beta = __pyx_PyFloat_AsDouble(values[194]); if (unlikely((__pyx_v_particle_beta == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3665, __pyx_L3_error)
    __pyx_v_particle_penalty_constant = __pyx_PyFloat_AsDouble(values[195]); if (unlikely((__pyx_v_particle_penalty_constant == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3666, __pyx_L3_error)
    __pyx_v_particle_signed_distances = ((PyArrayObject *)values[196]);
    __pyx_v_particle_signed_distance_normals = ((PyArrayObject *)values[197]);
    __pyx_v_particle_velocities = ((PyArrayObject *)values[198]);
    __pyx_v_particle_centroids = ((PyArrayObject *)values[199]);
    __pyx_v_particle_netForces = ((PyArrayObject *)values[200]);
    __pyx_v_particle_netMoments = ((PyArrayObject *)values[201]);
    __pyx_v_particle_surfaceArea = ((PyArrayObject *)values[202]);
    __pyx_v_particle_nitsche = __pyx_PyFloat_AsDouble(values[203]); if (unlikely((__pyx_v_particle_nitsche == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3674, __pyx_L3_error)
    __pyx_v_STABILIZATION_TYPE = __Pyx_PyInt_As_int(values[204]); if (unlikely((__pyx_v_STABILIZATION_TYPE == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3675, __pyx_L3_error)
    __pyx_v_areaRefElement = __pyx_PyFloat_AsDouble(values[205]); if (unlikely((__pyx_v_areaRefElement == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3676, __pyx_L3_error)
    __pyx_v_cMax = __pyx_PyFloat_AsDouble(values[206]); if (unlikely((__pyx_v_cMax == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3677, __pyx_L3_error)
    __pyx_v_cE = __pyx_PyFloat_AsDouble(values[207]); if (unlikely((__pyx_v_cE == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3678, __pyx_L3_error)
    __pyx_v_forcex = ((PyArrayObject *)values[208]);
    __pyx_v_forcey = ((PyArrayObject *)values[209]);
    __pyx_v_forcez = ((PyArrayObject *)values[210]);
    __pyx_v_KILL_PRESSURE_TERM = __Pyx_PyInt_As_int(values[211]); if (unlikely((__pyx_v_KILL_PRESSURE_TERM == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3682, __pyx_L3_error)
    __pyx_v_dt = __pyx_PyFloat_AsDouble(values[212]); if (unlikely((__pyx_v_dt == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3683, __pyx_L3_error)
    __pyx_v_entropyResidualAtCell = ((PyArrayObject *)values[213]);
    __pyx_v_maxSpeed2AtCell = ((PyArrayObject *)values[214]);
    __pyx_v_maxSpeed2AtOmega = __pyx_PyFloat_AsDouble(values[215]); if (unlikely((__pyx_v_maxSpeed2AtOmega == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3686, __pyx_L3_error)
    __pyx_v_rhoAtCell = ((PyArrayObject *)values[216]);
    __pyx_v_muAtCell = ((PyArrayObject *)values[217]);
    __pyx_v_quantDOFs = ((PyArrayObject *)values[218]);
    __pyx_v_numDOFsPerEqn = __Pyx_PyInt_As_int(values[219]); if (unlikely((__pyx_v_numDOFsPerEqn == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3690, __pyx_L3_error)
    __pyx_v_csrRowIndeces_DofLoops = ((PyArrayObject *)values[220]);
    __pyx_v_csrColumnOffsets_DofLoops = ((PyArrayObject *)values[221]);
    __pyx_v_ML = ((PyArrayObject *)values[222]);
    __pyx_v_Cx = ((PyArrayObject *)values[223]);
    __pyx_v_Cy = ((PyArrayObject *)values[224]);
    __pyx_v_Cz = ((PyArrayObject *)values[225]);
    __pyx_v_MATERIAL_PARAMETERS_AS_FUNCTION = __Pyx_PyInt_As_int(values[226]); if (unlikely((__pyx_v_MATERIAL_PARAMETERS_AS_FUNCTION == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3697, __pyx_L3_error)
    __pyx_v_density_as_function = ((PyArrayObject *)values[227]);
    __pyx_v_dynamic_viscosity_as_function = ((PyArrayObject *)values[228]);
    __pyx_v_ebqe_density_as_function = ((PyArrayObject *)values[229]);
    __pyx_v_ebqe_dynamic_viscosity_as_function = ((PyArrayObject *)values[230]);
    __pyx_v_order_polynomial = __pyx_PyFloat_AsDouble(values[231]); if (unlikely((__pyx_v_order_polynomial == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3702, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 232, 232, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3487, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mprans.cRANS3PF.RANS3PF2D.calculateResidual", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "mesh_trial_ref", 0))) __PYX_ERR(0, 3488, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_grad_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "mesh_grad_trial_ref", 0))) __PYX_ERR(0, 3489, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_dof), __pyx_ptype_5numpy_ndarray, 1, "mesh_dof", 0))) __PYX_ERR(0, 3490, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_velocity_dof), __pyx_ptype_5numpy_ndarray, 1, "mesh_velocity_dof", 0))) __PYX_ERR(0, 3491, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_l2g), __pyx_ptype_5numpy_ndarray, 1, "mesh_l2g", 0))) __PYX_ERR(0, 3494, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dV_ref), __pyx_ptype_5numpy_ndarray, 1, "dV_ref", 0))) __PYX_ERR(0, 3495, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "p_trial_ref", 0))) __PYX_ERR(0, 3496, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_grad_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "p_grad_trial_ref", 0))) __PYX_ERR(0, 3497, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_test_ref), __pyx_ptype_5numpy_ndarray, 1, "p_test_ref", 0))) __PYX_ERR(0, 3498, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_grad_test_ref), __pyx_ptype_5numpy_ndarray, 1, "p_grad_test_ref", 0))) __PYX_ERR(0, 3499, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_p), __pyx_ptype_5numpy_ndarray, 1, "q_p", 0))) __PYX_ERR(0, 3500, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_grad_p), __pyx_ptype_5numpy_ndarray, 1, "q_grad_p", 0))) __PYX_ERR(0, 3501, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_p), __pyx_ptype_5numpy_ndarray, 1, "ebqe_p", 0))) __PYX_ERR(0, 3502, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_grad_p), __pyx_ptype_5numpy_ndarray, 1, "ebqe_grad_p", 0))) __PYX_ERR(0, 3503, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_trial_ref", 0))) __PYX_ERR(0, 3504, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_grad_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_grad_trial_ref", 0))) __PYX_ERR(0, 3505, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_hess_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_hess_trial_ref", 0))) __PYX_ERR(0, 3506, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_test_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_test_ref", 0))) __PYX_ERR(0, 3507, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_grad_test_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_grad_test_ref", 0))) __PYX_ERR(0, 3508, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "mesh_trial_trace_ref", 0))) __PYX_ERR(0, 3509, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_grad_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "mesh_grad_trial_trace_ref", 0))) __PYX_ERR(0, 3510, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dS_ref), __pyx_ptype_5numpy_ndarray, 1, "dS_ref", 0))) __PYX_ERR(0, 3511, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "p_trial_trace_ref", 0))) __PYX_ERR(0, 3512, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_grad_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "p_grad_trial_trace_ref", 0))) __PYX_ERR(0, 3513, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_test_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "p_test_trace_ref", 0))) __PYX_ERR(0, 3514, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_grad_test_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "p_grad_test_trace_ref", 0))) __PYX_ERR(0, 3515, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_trial_trace_ref", 0))) __PYX_ERR(0, 3516, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_grad_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_grad_trial_trace_ref", 0))) __PYX_ERR(0, 3517, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_test_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_test_trace_ref", 0))) __PYX_ERR(0, 3518, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_grad_test_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_grad_test_trace_ref", 0))) __PYX_ERR(0, 3519, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_normal_ref), __pyx_ptype_5numpy_ndarray, 1, "normal_ref", 0))) __PYX_ERR(0, 3520, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_boundaryJac_ref), __pyx_ptype_5numpy_ndarray, 1, "boundaryJac_ref", 0))) __PYX_ERR(0, 3521, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_elementDiameter), __pyx_ptype_5numpy_ndarray, 1, "elementDiameter", 0))) __PYX_ERR(0, 3523, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_nodeDiametersArray), __pyx_ptype_5numpy_ndarray, 1, "nodeDiametersArray", 0))) __PYX_ERR(0, 3524, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_eps_solid), __pyx_ptype_5numpy_ndarray, 1, "eps_solid", 0))) __PYX_ERR(0, 3546, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_phi_solid), __pyx_ptype_5numpy_ndarray, 1, "phi_solid", 0))) __PYX_ERR(0, 3547, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_velocity_solid), __pyx_ptype_5numpy_ndarray, 1, "q_velocity_solid", 0))) __PYX_ERR(0, 3548, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_vos), __pyx_ptype_5numpy_ndarray, 1, "q_vos", 0))) __PYX_ERR(0, 3549, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_dvos_dt), __pyx_ptype_5numpy_ndarray, 1, "q_dvos_dt", 0))) __PYX_ERR(0, 3550, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_dragAlpha), __pyx_ptype_5numpy_ndarray, 1, "q_dragAlpha", 0))) __PYX_ERR(0, 3551, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_dragBeta), __pyx_ptype_5numpy_ndarray, 1, "q_dragBeta", 0))) __PYX_ERR(0, 3552, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_mass_source), __pyx_ptype_5numpy_ndarray, 1, "q_mass_source", 0))) __PYX_ERR(0, 3553, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_turb_var_0), __pyx_ptype_5numpy_ndarray, 1, "q_turb_var_0", 0))) __PYX_ERR(0, 3554, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_turb_var_1), __pyx_ptype_5numpy_ndarray, 1, "q_turb_var_1", 0))) __PYX_ERR(0, 3555, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_turb_var_grad_0), __pyx_ptype_5numpy_ndarray, 1, "q_turb_var_grad_0", 0))) __PYX_ERR(0, 3556, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_eddy_viscosity), __pyx_ptype_5numpy_ndarray, 1, "q_eddy_viscosity", 0))) __PYX_ERR(0, 3557, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_l2g), __pyx_ptype_5numpy_ndarray, 1, "p_l2g", 0))) __PYX_ERR(0, 3559, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_l2g), __pyx_ptype_5numpy_ndarray, 1, "vel_l2g", 0))) __PYX_ERR(0, 3560, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_dof), __pyx_ptype_5numpy_ndarray, 1, "p_dof", 0))) __PYX_ERR(0, 3561, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_u_dof), __pyx_ptype_5numpy_ndarray, 1, "u_dof", 0))) __PYX_ERR(0, 3562, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_v_dof), __pyx_ptype_5numpy_ndarray, 1, "v_dof", 0))) __PYX_ERR(0, 3563, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_w_dof), __pyx_ptype_5numpy_ndarray, 1, "w_dof", 0))) __PYX_ERR(0, 3564, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_u_dof_old), __pyx_ptype_5numpy_ndarray, 1, "u_dof_old", 0))) __PYX_ERR(0, 3565, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_v_dof_old), __pyx_ptype_5numpy_ndarray, 1, "v_dof_old", 0))) __PYX_ERR(0, 3566, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_w_dof_old), __pyx_ptype_5numpy_ndarray, 1, "w_dof_old", 0))) __PYX_ERR(0, 3567, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_u_dof_old_old), __pyx_ptype_5numpy_ndarray, 1, "u_dof_old_old", 0))) __PYX_ERR(0, 3568, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_v_dof_old_old), __pyx_ptype_5numpy_ndarray, 1, "v_dof_old_old", 0))) __PYX_ERR(0, 3569, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_w_dof_old_old), __pyx_ptype_5numpy_ndarray, 1, "w_dof_old_old", 0))) __PYX_ERR(0, 3570, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_g), __pyx_ptype_5numpy_ndarray, 1, "g", 0))) __PYX_ERR(0, 3571, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vf), __pyx_ptype_5numpy_ndarray, 1, "vf", 0))) __PYX_ERR(0, 3573, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_phi), __pyx_ptype_5numpy_ndarray, 1, "phi", 0))) __PYX_ERR(0, 3574, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_normal_phi), __pyx_ptype_5numpy_ndarray, 1, "normal_phi", 0))) __PYX_ERR(0, 3575, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_kappa_phi), __pyx_ptype_5numpy_ndarray, 1, "kappa_phi", 0))) __PYX_ERR(0, 3576, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_mom_u_acc), __pyx_ptype_5numpy_ndarray, 1, "q_mom_u_acc", 0))) __PYX_ERR(0, 3577, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_mom_v_acc), __pyx_ptype_5numpy_ndarray, 1, "q_mom_v_acc", 0))) __PYX_ERR(0, 3578, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_mom_w_acc), __pyx_ptype_5numpy_ndarray, 1, "q_mom_w_acc", 0))) __PYX_ERR(0, 3579, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_mass_adv), __pyx_ptype_5numpy_ndarray, 1, "q_mass_adv", 0))) __PYX_ERR(0, 3580, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_mom_u_acc_beta_bdf), __pyx_ptype_5numpy_ndarray, 1, "q_mom_u_acc_beta_bdf", 0))) __PYX_ERR(0, 3581, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_mom_v_acc_beta_bdf), __pyx_ptype_5numpy_ndarray, 1, "q_mom_v_acc_beta_bdf", 0))) __PYX_ERR(0, 3581, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_mom_w_acc_beta_bdf), __pyx_ptype_5numpy_ndarray, 1, "q_mom_w_acc_beta_bdf", 0))) __PYX_ERR(0, 3581, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_dV), __pyx_ptype_5numpy_ndarray, 1, "q_dV", 0))) __PYX_ERR(0, 3582, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_dV_last), __pyx_ptype_5numpy_ndarray, 1, "q_dV_last", 0))) __PYX_ERR(0, 3583, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_velocity_sge), __pyx_ptype_5numpy_ndarray, 1, "q_velocity_sge", 0))) __PYX_ERR(0, 3584, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_velocity_star), __pyx_ptype_5numpy_ndarray, 1, "ebqe_velocity_star", 0))) __PYX_ERR(0, 3585, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_cfl), __pyx_ptype_5numpy_ndarray, 1, "q_cfl", 0))) __PYX_ERR(0, 3586, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_numDiff_u), __pyx_ptype_5numpy_ndarray, 1, "q_numDiff_u", 0))) __PYX_ERR(0, 3587, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_numDiff_v), __pyx_ptype_5numpy_ndarray, 1, "q_numDiff_v", 0))) __PYX_ERR(0, 3587, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_numDiff_w), __pyx_ptype_5numpy_ndarray, 1, "q_numDiff_w", 0))) __PYX_ERR(0, 3587, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_numDiff_u_last), __pyx_ptype_5numpy_ndarray, 1, "q_numDiff_u_last", 0))) __PYX_ERR(0, 3588, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_numDiff_v_last), __pyx_ptype_5numpy_ndarray, 1, "q_numDiff_v_last", 0))) __PYX_ERR(0, 3588, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_numDiff_w_last), __pyx_ptype_5numpy_ndarray, 1, "q_numDiff_w_last", 0))) __PYX_ERR(0, 3588, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_u_u_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_u_u_rowptr", 0))) __PYX_ERR(0, 3589, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_u_u_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_u_u_colind", 0))) __PYX_ERR(0, 3589, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_u_v_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_u_v_rowptr", 0))) __PYX_ERR(0, 3590, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_u_v_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_u_v_colind", 0))) __PYX_ERR(0, 3590, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_u_w_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_u_w_rowptr", 0))) __PYX_ERR(0, 3591, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_u_w_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_u_w_colind", 0))) __PYX_ERR(0, 3591, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_v_v_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_v_v_rowptr", 0))) __PYX_ERR(0, 3592, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_v_v_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_v_v_colind", 0))) __PYX_ERR(0, 3592, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_v_u_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_v_u_rowptr", 0))) __PYX_ERR(0, 3593, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_v_u_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_v_u_colind", 0))) __PYX_ERR(0, 3593, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_v_w_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_v_w_rowptr", 0))) __PYX_ERR(0, 3594, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_v_w_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_v_w_colind", 0))) __PYX_ERR(0, 3594, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_w_w_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_w_w_rowptr", 0))) __PYX_ERR(0, 3595, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_w_w_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_w_w_colind", 0))) __PYX_ERR(0, 3595, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_w_u_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_w_u_rowptr", 0))) __PYX_ERR(0, 3596, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_w_u_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_w_u_colind", 0))) __PYX_ERR(0, 3596, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_w_v_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_w_v_rowptr", 0))) __PYX_ERR(0, 3597, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_w_v_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_w_v_colind", 0))) __PYX_ERR(0, 3597, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_globalResidual), __pyx_ptype_5numpy_ndarray, 1, "globalResidual", 0))) __PYX_ERR(0, 3600, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_exteriorElementBoundariesArray), __pyx_ptype_5numpy_ndarray, 1, "exteriorElementBoundariesArray", 0))) __PYX_ERR(0, 3602, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_elementBoundaryElementsArray), __pyx_ptype_5numpy_ndarray, 1, "elementBoundaryElementsArray", 0))) __PYX_ERR(0, 3603, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_elementBoundaryLocalElementBoundariesArray), __pyx_ptype_5numpy_ndarray, 1, "elementBoundaryLocalElementBoundariesArray", 0))) __PYX_ERR(0, 3604, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_vf_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_vf_ext", 0))) __PYX_ERR(0, 3605, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_bc_ebqe_vf_ext), __pyx_ptype_5numpy_ndarray, 1, "bc_ebqe_vf_ext", 0))) __PYX_ERR(0, 3606, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_phi_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_phi_ext", 0))) __PYX_ERR(0, 3607, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_bc_ebqe_phi_ext), __pyx_ptype_5numpy_ndarray, 1, "bc_ebqe_phi_ext", 0))) __PYX_ERR(0, 3608, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_normal_phi_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_normal_phi_ext", 0))) __PYX_ERR(0, 3609, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_kappa_phi_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_kappa_phi_ext", 0))) __PYX_ERR(0, 3610, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_vos_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_vos_ext", 0))) __PYX_ERR(0, 3612, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_turb_var_0), __pyx_ptype_5numpy_ndarray, 1, "ebqe_turb_var_0", 0))) __PYX_ERR(0, 3613, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_turb_var_1), __pyx_ptype_5numpy_ndarray, 1, "ebqe_turb_var_1", 0))) __PYX_ERR(0, 3614, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isDOFBoundary_p), __pyx_ptype_5numpy_ndarray, 1, "isDOFBoundary_p", 0))) __PYX_ERR(0, 3616, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isDOFBoundary_u), __pyx_ptype_5numpy_ndarray, 1, "isDOFBoundary_u", 0))) __PYX_ERR(0, 3617, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isDOFBoundary_v), __pyx_ptype_5numpy_ndarray, 1, "isDOFBoundary_v", 0))) __PYX_ERR(0, 3618, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isDOFBoundary_w), __pyx_ptype_5numpy_ndarray, 1, "isDOFBoundary_w", 0))) __PYX_ERR(0, 3619, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isAdvectiveFluxBoundary_p), __pyx_ptype_5numpy_ndarray, 1, "isAdvectiveFluxBoundary_p", 0))) __PYX_ERR(0, 3620, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isAdvectiveFluxBoundary_u), __pyx_ptype_5numpy_ndarray, 1, "isAdvectiveFluxBoundary_u", 0))) __PYX_ERR(0, 3621, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isAdvectiveFluxBoundary_v), __pyx_ptype_5numpy_ndarray, 1, "isAdvectiveFluxBoundary_v", 0))) __PYX_ERR(0, 3622, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isAdvectiveFluxBoundary_w), __pyx_ptype_5numpy_ndarray, 1, "isAdvectiveFluxBoundary_w", 0))) __PYX_ERR(0, 3623, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isDiffusiveFluxBoundary_u), __pyx_ptype_5numpy_ndarray, 1, "isDiffusiveFluxBoundary_u", 0))) __PYX_ERR(0, 3624, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isDiffusiveFluxBoundary_v), __pyx_ptype_5numpy_ndarray, 1, "isDiffusiveFluxBoundary_v", 0))) __PYX_ERR(0, 3625, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isDiffusiveFluxBoundary_w), __pyx_ptype_5numpy_ndarray, 1, "isDiffusiveFluxBoundary_w", 0))) __PYX_ERR(0, 3626, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_p_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_p_ext", 0))) __PYX_ERR(0, 3627, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_flux_mass_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_flux_mass_ext", 0))) __PYX_ERR(0, 3628, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_flux_mom_u_adv_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_flux_mom_u_adv_ext", 0))) __PYX_ERR(0, 3629, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_flux_mom_v_adv_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_flux_mom_v_adv_ext", 0))) __PYX_ERR(0, 3630, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_flux_mom_w_adv_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_flux_mom_w_adv_ext", 0))) __PYX_ERR(0, 3631, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_u_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_u_ext", 0))) __PYX_ERR(0, 3632, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_flux_u_diff_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_flux_u_diff_ext", 0))) __PYX_ERR(0, 3633, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_penalty_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_penalty_ext", 0))) __PYX_ERR(0, 3634, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_v_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_v_ext", 0))) __PYX_ERR(0, 3635, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_flux_v_diff_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_flux_v_diff_ext", 0))) __PYX_ERR(0, 3636, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_w_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_w_ext", 0))) __PYX_ERR(0, 3637, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_flux_w_diff_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_flux_w_diff_ext", 0))) __PYX_ERR(0, 3638, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_x), __pyx_ptype_5numpy_ndarray, 1, "q_x", 0))) __PYX_ERR(0, 3639, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_velocity), __pyx_ptype_5numpy_ndarray, 1, "q_velocity", 0))) __PYX_ERR(0, 3640, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_velocity), __pyx_ptype_5numpy_ndarray, 1, "ebqe_velocity", 0))) __PYX_ERR(0, 3641, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_grad_u), __pyx_ptype_5numpy_ndarray, 1, "q_grad_u", 0))) __PYX_ERR(0, 3642, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_grad_v), __pyx_ptype_5numpy_ndarray, 1, "q_grad_v", 0))) __PYX_ERR(0, 3643, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_grad_w), __pyx_ptype_5numpy_ndarray, 1, "q_grad_w", 0))) __PYX_ERR(0, 3644, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_divU), __pyx_ptype_5numpy_ndarray, 1, "q_divU", 0))) __PYX_ERR(0, 3645, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_grad_u), __pyx_ptype_5numpy_ndarray, 1, "ebqe_grad_u", 0))) __PYX_ERR(0, 3646, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_grad_v), __pyx_ptype_5numpy_ndarray, 1, "ebqe_grad_v", 0))) __PYX_ERR(0, 3647, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_grad_w), __pyx_ptype_5numpy_ndarray, 1, "ebqe_grad_w", 0))) __PYX_ERR(0, 3648, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_flux), __pyx_ptype_5numpy_ndarray, 1, "flux", 0))) __PYX_ERR(0, 3649, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_elementResidual_p), __pyx_ptype_5numpy_ndarray, 1, "elementResidual_p", 0))) __PYX_ERR(0, 3650, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_elementFlags), __pyx_ptype_5numpy_ndarray, 1, "elementFlags", 0))) __PYX_ERR(0, 3651, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_boundaryFlags), __pyx_ptype_5numpy_ndarray, 1, "boundaryFlags", 0))) __PYX_ERR(0, 3652, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_barycenters), __pyx_ptype_5numpy_ndarray, 1, "barycenters", 0))) __PYX_ERR(0, 3653, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_wettedAreas), __pyx_ptype_5numpy_ndarray, 1, "wettedAreas", 0))) __PYX_ERR(0, 3654, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_netForces_p), __pyx_ptype_5numpy_ndarray, 1, "netForces_p", 0))) __PYX_ERR(0, 3655, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_netForces_v), __pyx_ptype_5numpy_ndarray, 1, "netForces_v", 0))) __PYX_ERR(0, 3656, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_netMoments), __pyx_ptype_5numpy_ndarray, 1, "netMoments", 0))) __PYX_ERR(0, 3657, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_rho), __pyx_ptype_5numpy_ndarray, 1, "q_rho", 0))) __PYX_ERR(0, 3658, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_rho), __pyx_ptype_5numpy_ndarray, 1, "ebqe_rho", 0))) __PYX_ERR(0, 3659, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_nu), __pyx_ptype_5numpy_ndarray, 1, "q_nu", 0))) __PYX_ERR(0, 3660, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_nu), __pyx_ptype_5numpy_ndarray, 1, "ebqe_nu", 0))) __PYX_ERR(0, 3661, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particle_signed_distances), __pyx_ptype_5numpy_ndarray, 1, "particle_signed_distances", 0))) __PYX_ERR(0, 3667, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particle_signed_distance_normals), __pyx_ptype_5numpy_ndarray, 1, "particle_signed_distance_normals", 0))) __PYX_ERR(0, 3668, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particle_velocities), __pyx_ptype_5numpy_ndarray, 1, "particle_velocities", 0))) __PYX_ERR(0, 3669, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particle_centroids), __pyx_ptype_5numpy_ndarray, 1, "particle_centroids", 0))) __PYX_ERR(0, 3670, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particle_netForces), __pyx_ptype_5numpy_ndarray, 1, "particle_netForces", 0))) __PYX_ERR(0, 3671, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particle_netMoments), __pyx_ptype_5numpy_ndarray, 1, "particle_netMoments", 0))) __PYX_ERR(0, 3672, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particle_surfaceArea), __pyx_ptype_5numpy_ndarray, 1, "particle_surfaceArea", 0))) __PYX_ERR(0, 3673, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_forcex), __pyx_ptype_5numpy_ndarray, 1, "forcex", 0))) __PYX_ERR(0, 3679, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_forcey), __pyx_ptype_5numpy_ndarray, 1, "forcey", 0))) __PYX_ERR(0, 3680, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_forcez), __pyx_ptype_5numpy_ndarray, 1, "forcez", 0))) __PYX_ERR(0, 3681, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_entropyResidualAtCell), __pyx_ptype_5numpy_ndarray, 1, "entropyResidualAtCell", 0))) __PYX_ERR(0, 3684, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_maxSpeed2AtCell), __pyx_ptype_5numpy_ndarray, 1, "maxSpeed2AtCell", 0))) __PYX_ERR(0, 3685, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rhoAtCell), __pyx_ptype_5numpy_ndarray, 1, "rhoAtCell", 0))) __PYX_ERR(0, 3687, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_muAtCell), __pyx_ptype_5numpy_ndarray, 1, "muAtCell", 0))) __PYX_ERR(0, 3688, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_quantDOFs), __pyx_ptype_5numpy_ndarray, 1, "quantDOFs", 0))) __PYX_ERR(0, 3689, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_DofLoops), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_DofLoops", 0))) __PYX_ERR(0, 3691, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_DofLoops), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_DofLoops", 0))) __PYX_ERR(0, 3692, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ML), __pyx_ptype_5numpy_ndarray, 1, "ML", 0))) __PYX_ERR(0, 3693, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_Cx), __pyx_ptype_5numpy_ndarray, 1, "Cx", 0))) __PYX_ERR(0, 3694, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_Cy), __pyx_ptype_5numpy_ndarray, 1, "Cy", 0))) __PYX_ERR(0, 3695, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_Cz), __pyx_ptype_5numpy_ndarray, 1, "Cz", 0))) __PYX_ERR(0, 3696, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_density_as_function), __pyx_ptype_5numpy_ndarray, 1, "density_as_function", 0))) __PYX_ERR(0, 3698, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dynamic_viscosity_as_function), __pyx_ptype_5numpy_ndarray, 1, "dynamic_viscosity_as_function", 0))) __PYX_ERR(0, 3699, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_density_as_function), __pyx_ptype_5numpy_ndarray, 1, "ebqe_density_as_function", 0))) __PYX_ERR(0, 3700, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_dynamic_viscosity_as_function), __pyx_ptype_5numpy_ndarray, 1, "ebqe_dynamic_viscosity_as_function", 0))) __PYX_ERR(0, 3701, __pyx_L1_error)
  __pyx_r = __pyx_pf_6mprans_8cRANS3PF_9RANS3PF2D_4calculateResidual(((struct __pyx_obj_6mprans_8cRANS3PF_RANS3PF2D *)__pyx_v_self), __pyx_v_mesh_trial_ref, __pyx_v_mesh_grad_trial_ref, __pyx_v_mesh_dof, __pyx_v_mesh_velocity_dof, __pyx_v_MOVING_DOMAIN, __pyx_v_PSTAB, __pyx_v_mesh_l2g, __pyx_v_dV_ref, __pyx_v_p_trial_ref, __pyx_v_p_grad_trial_ref, __pyx_v_p_test_ref, __pyx_v_p_grad_test_ref, __pyx_v_q_p, __pyx_v_q_grad_p, __pyx_v_ebqe_p, __pyx_v_ebqe_grad_p, __pyx_v_vel_trial_ref, __pyx_v_vel_grad_trial_ref, __pyx_v_vel_hess_trial_ref, __pyx_v_vel_test_ref, __pyx_v_vel_grad_test_ref, __pyx_v_mesh_trial_trace_ref, __pyx_v_mesh_grad_trial_trace_ref, __pyx_v_dS_ref, __pyx_v_p_trial_trace_ref, __pyx_v_p_grad_trial_trace_ref, __pyx_v_p_test_trace_ref, __pyx_v_p_grad_test_trace_ref, __pyx_v_vel_trial_trace_ref, __pyx_v_vel_grad_trial_trace_ref, __pyx_v_vel_test_trace_ref, __pyx_v_vel_grad_test_trace_ref, __pyx_v_normal_ref, __pyx_v_boundaryJac_ref, __pyx_v_eb_adjoint_sigma, __pyx_v_elementDiameter, __pyx_v_nodeDiametersArray, __pyx_v_hFactor, __pyx_v_nElements_global, __pyx_v_nElements_owned, __pyx_v_nElementBoundaries_owned, __pyx_v_useRBLES, __pyx_v_useMetrics, __pyx_v_alphaBDF, __pyx_v_epsFact_rho, __pyx_v_epsFact_mu, __pyx_v_sigma, __pyx_v_rho_0, __pyx_v_nu_0, __pyx_v_rho_1, __pyx_v_nu_1, __pyx_v_smagorinskyConstant, __pyx_v_turbulenceClosureModel, __pyx_v_Ct_sge, __pyx_v_Cd_sge, __pyx_v_C_dc, __pyx_v_C_b, __pyx_v_eps_solid, __pyx_v_phi_solid, __pyx_v_q_velocity_solid, __pyx_v_q_vos, __pyx_v_q_dvos_dt, __pyx_v_q_dragAlpha, __pyx_v_q_dragBeta, __pyx_v_q_mass_source, __pyx_v_q_turb_var_0, __pyx_v_q_turb_var_1, __pyx_v_q_turb_var_grad_0, __pyx_v_q_eddy_viscosity, __pyx_v_p_l2g, __pyx_v_vel_l2g, __pyx_v_p_dof, __pyx_v_u_dof, __pyx_v_v_dof, __pyx_v_w_dof, __pyx_v_u_dof_old, __pyx_v_v_dof_old, __pyx_v_w_dof_old, __pyx_v_u_dof_old_old, __pyx_v_v_dof_old_old, __pyx_v_w_dof_old_old, __pyx_v_g, __pyx_v_useVF, __pyx_v_vf, __pyx_v_phi, __pyx_v_normal_phi, __pyx_v_kappa_phi, __pyx_v_q_mom_u_acc, __pyx_v_q_mom_v_acc, __pyx_v_q_mom_w_acc, __pyx_v_q_mass_adv, __pyx_v_q_mom_u_acc_beta_bdf, __pyx_v_q_mom_v_acc_beta_bdf, __pyx_v_q_mom_w_acc_beta_bdf, __pyx_v_q_dV, __pyx_v_q_dV_last, __pyx_v_q_velocity_sge, __pyx_v_ebqe_velocity_star, __pyx_v_q_cfl, __pyx_v_q_numDiff_u, __pyx_v_q_numDiff_v, __pyx_v_q_numDiff_w, __pyx_v_q_numDiff_u_last, __pyx_v_q_numDiff_v_last, __pyx_v_q_numDiff_w_last, __pyx_v_sdInfo_u_u_rowptr, __pyx_v_sdInfo_u_u_colind, __pyx_v_sdInfo_u_v_rowptr, __pyx_v_sdInfo_u_v_colind, __pyx_v_sdInfo_u_w_rowptr, __pyx_v_sdInfo_u_w_colind, __pyx_v_sdInfo_v_v_rowptr, __pyx_v_sdInfo_v_v_colind, __pyx_v_sdInfo_v_u_rowptr, __pyx_v_sdInfo_v_u_colind, __pyx_v_sdInfo_v_w_rowptr, __pyx_v_sdInfo_v_w_colind, __pyx_v_sdInfo_w_w_rowptr, __pyx_v_sdInfo_w_w_colind, __pyx_v_sdInfo_w_u_rowptr, __pyx_v_sdInfo_w_u_colind, __pyx_v_sdInfo_w_v_rowptr, __pyx_v_sdInfo_w_v_colind, __pyx_v_offset_p, __pyx_v_offset_u, __pyx_v_offset_v, __pyx_v_offset_w, __pyx_v_stride_p, __pyx_v_stride_u, __pyx_v_stride_v, __pyx_v_stride_w, __pyx_v_globalResidual, __pyx_v_nExteriorElementBoundaries_global, __pyx_v_exteriorElementBoundariesArray, __pyx_v_elementBoundaryElementsArray, __pyx_v_elementBoundaryLocalElementBoundariesArray, __pyx_v_ebqe_vf_ext, __pyx_v_bc_ebqe_vf_ext, __pyx_v_ebqe_phi_ext, __pyx_v_bc_ebqe_phi_ext, __pyx_v_ebqe_normal_phi_ext, __pyx_v_ebqe_kappa_phi_ext, __pyx_v_ebqe_vos_ext, __pyx_v_ebqe_turb_var_0, __pyx_v_ebqe_turb_var_1, __pyx_v_isDOFBoundary_p, __pyx_v_isDOFBoundary_u, __pyx_v_isDOFBoundary_v, __pyx_v_isDOFBoundary_w, __pyx_v_isAdvectiveFluxBoundary_p, __pyx_v_isAdvectiveFluxBoundary_u, __pyx_v_isAdvectiveFluxBoundary_v, __pyx_v_isAdvectiveFluxBoundary_w, __pyx_v_isDiffusiveFluxBoundary_u, __pyx_v_isDiffusiveFluxBoundary_v, __pyx_v_isDiffusiveFluxBoundary_w, __pyx_v_ebqe_bc_p_ext, __pyx_v_ebqe_bc_flux_mass_ext, __pyx_v_ebqe_bc_flux_mom_u_adv_ext, __pyx_v_ebqe_bc_flux_mom_v_adv_ext, __pyx_v_ebqe_bc_flux_mom_w_adv_ext, __pyx_v_ebqe_bc_u_ext, __pyx_v_ebqe_bc_flux_u_diff_ext, __pyx_v_ebqe_penalty_ext, __pyx_v_ebqe_bc_v_ext, __pyx_v_ebqe_bc_flux_v_diff_ext, __pyx_v_ebqe_bc_w_ext, __pyx_v_ebqe_bc_flux_w_diff_ext, __pyx_v_q_x, __pyx_v_q_velocity, __pyx_v_ebqe_velocity, __pyx_v_q_grad_u, __pyx_v_q_grad_v, __pyx_v_q_grad_w, __pyx_v_q_divU, __pyx_v_ebqe_grad_u, __pyx_v_ebqe_grad_v, __pyx_v_ebqe_grad_w, __pyx_v_flux, __pyx_v_elementResidual_p, __pyx_v_elementFlags, __pyx_v_boundaryFlags, __pyx_v_barycenters, __pyx_v_wettedAreas, __pyx_v_netForces_p, __pyx_v_netForces_v, __pyx_v_netMoments, __pyx_v_q_rho, __pyx_v_ebqe_rho, __pyx_v_q_nu, __pyx_v_ebqe_nu, __pyx_v_nParticles, __pyx_v_particle_epsFact, __pyx_v_particle_alpha, __pyx_v_particle_beta, __pyx_v_particle_penalty_constant, __pyx_v_particle_signed_distances, __pyx_v_particle_signed_distance_normals, __pyx_v_particle_velocities, __pyx_v_particle_centroids, __pyx_v_particle_netForces, __pyx_v_particle_netMoments, __pyx_v_particle_surfaceArea, __pyx_v_particle_nitsche, __pyx_v_STABILIZATION_TYPE, __pyx_v_areaRefElement, __pyx_v_cMax, __pyx_v_cE, __pyx_v_forcex, __pyx_v_forcey, __pyx_v_forcez, __pyx_v_KILL_PRESSURE_TERM, __pyx_v_dt, __pyx_v_entropyResidualAtCell, __pyx_v_maxSpeed2AtCell, __pyx_v_maxSpeed2AtOmega, __pyx_v_rhoAtCell, __pyx_v_muAtCell, __pyx_v_quantDOFs, __pyx_v_numDOFsPerEqn, __pyx_v_csrRowIndeces_DofLoops, __pyx_v_csrColumnOffsets_DofLoops, __pyx_v_ML, __pyx_v_Cx, __pyx_v_Cy, __pyx_v_Cz, __pyx_v_MATERIAL_PARAMETERS_AS_FUNCTION, __pyx_v_density_as_function, __pyx_v_dynamic_viscosity_as_function, __pyx_v_ebqe_density_as_function, __pyx_v_ebqe_dynamic_viscosity_as_function, __pyx_v_order_polynomial);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6mprans_8cRANS3PF_9RANS3PF2D_4calculateResidual(struct __pyx_obj_6mprans_8cRANS3PF_RANS3PF2D *__pyx_v_self, PyArrayObject *__pyx_v_mesh_trial_ref, PyArrayObject *__pyx_v_mesh_grad_trial_ref, PyArrayObject *__pyx_v_mesh_dof, PyArrayObject *__pyx_v_mesh_velocity_dof, double __pyx_v_MOVING_DOMAIN, double __pyx_v_PSTAB, PyArrayObject *__pyx_v_mesh_l2g, PyArrayObject *__pyx_v_dV_ref, PyArrayObject *__pyx_v_p_trial_ref, PyArrayObject *__pyx_v_p_grad_trial_ref, PyArrayObject *__pyx_v_p_test_ref, PyArrayObject *__pyx_v_p_grad_test_ref, PyArrayObject *__pyx_v_q_p, PyArrayObject *__pyx_v_q_grad_p, PyArrayObject *__pyx_v_ebqe_p, PyArrayObject *__pyx_v_ebqe_grad_p, PyArrayObject *__pyx_v_vel_trial_ref, PyArrayObject *__pyx_v_vel_grad_trial_ref, PyArrayObject *__pyx_v_vel_hess_trial_ref, PyArrayObject *__pyx_v_vel_test_ref, PyArrayObject *__pyx_v_vel_grad_test_ref, PyArrayObject *__pyx_v_mesh_trial_trace_ref, PyArrayObject *__pyx_v_mesh_grad_trial_trace_ref, PyArrayObject *__pyx_v_dS_ref, PyArrayObject *__pyx_v_p_trial_trace_ref, PyArrayObject *__pyx_v_p_grad_trial_trace_ref, PyArrayObject *__pyx_v_p_test_trace_ref, PyArrayObject *__pyx_v_p_grad_test_trace_ref, PyArrayObject *__pyx_v_vel_trial_trace_ref, PyArrayObject *__pyx_v_vel_grad_trial_trace_ref, PyArrayObject *__pyx_v_vel_test_trace_ref, PyArrayObject *__pyx_v_vel_grad_test_trace_ref, PyArrayObject *__pyx_v_normal_ref, PyArrayObject *__pyx_v_boundaryJac_ref, double __pyx_v_eb_adjoint_sigma, PyArrayObject *__pyx_v_elementDiameter, PyArrayObject *__pyx_v_nodeDiametersArray, double __pyx_v_hFactor, int __pyx_v_nElements_global, int __pyx_v_nElements_owned, int __pyx_v_nElementBoundaries_owned, double __pyx_v_useRBLES, double __pyx_v_useMetrics, double __pyx_v_alphaBDF, double __pyx_v_epsFact_rho, double __pyx_v_epsFact_mu, double __pyx_v_sigma, double __pyx_v_rho_0, double __pyx_v_nu_0, double __pyx_v_rho_1, double __pyx_v_nu_1, double __pyx_v_smagorinskyConstant, int __pyx_v_turbulenceClosureModel, double __pyx_v_Ct_sge, double __pyx_v_Cd_sge, double __pyx_v_C_dc, double __pyx_v_C_b, PyArrayObject *__pyx_v_eps_solid, PyArrayObject *__pyx_v_phi_solid, PyArrayObject *__pyx_v_q_velocity_solid, PyArrayObject *__pyx_v_q_vos, PyArrayObject *__pyx_v_q_dvos_dt, PyArrayObject *__pyx_v_q_dragAlpha, PyArrayObject *__pyx_v_q_dragBeta, PyArrayObject *__pyx_v_q_mass_source, PyArrayObject *__pyx_v_q_turb_var_0, PyArrayObject *__pyx_v_q_turb_var_1, PyArrayObject *__pyx_v_q_turb_var_grad_0, PyArrayObject *__pyx_v_q_eddy_viscosity, PyArrayObject *__pyx_v_p_l2g, PyArrayObject *__pyx_v_vel_l2g, PyArrayObject *__pyx_v_p_dof, PyArrayObject *__pyx_v_u_dof, PyArrayObject *__pyx_v_v_dof, PyArrayObject *__pyx_v_w_dof, PyArrayObject *__pyx_v_u_dof_old, PyArrayObject *__pyx_v_v_dof_old, PyArrayObject *__pyx_v_w_dof_old, PyArrayObject *__pyx_v_u_dof_old_old, PyArrayObject *__pyx_v_v_dof_old_old, PyArrayObject *__pyx_v_w_dof_old_old, PyArrayObject *__pyx_v_g, double __pyx_v_useVF, PyArrayObject *__pyx_v_vf, PyArrayObject *__pyx_v_phi, PyArrayObject *__pyx_v_normal_phi, PyArrayObject *__pyx_v_kappa_phi, PyArrayObject *__pyx_v_q_mom_u_acc, PyArrayObject *__pyx_v_q_mom_v_acc, PyArrayObject *__pyx_v_q_mom_w_acc, PyArrayObject *__pyx_v_q_mass_adv, PyArrayObject *__pyx_v_q_mom_u_acc_beta_bdf, PyArrayObject *__pyx_v_q_mom_v_acc_beta_bdf, PyArrayObject *__pyx_v_q_mom_w_acc_beta_bdf, PyArrayObject *__pyx_v_q_dV, PyArrayObject *__pyx_v_q_dV_last, PyArrayObject *__pyx_v_q_velocity_sge, PyArrayObject *__pyx_v_ebqe_velocity_star, PyArrayObject *__pyx_v_q_cfl, PyArrayObject *__pyx_v_q_numDiff_u, PyArrayObject *__pyx_v_q_numDiff_v, PyArrayObject *__pyx_v_q_numDiff_w, PyArrayObject *__pyx_v_q_numDiff_u_last, PyArrayObject *__pyx_v_q_numDiff_v_last, PyArrayObject *__pyx_v_q_numDiff_w_last, PyArrayObject *__pyx_v_sdInfo_u_u_rowptr, PyArrayObject *__pyx_v_sdInfo_u_u_colind, PyArrayObject *__pyx_v_sdInfo_u_v_rowptr, PyArrayObject *__pyx_v_sdInfo_u_v_colind, PyArrayObject *__pyx_v_sdInfo_u_w_rowptr, PyArrayObject *__pyx_v_sdInfo_u_w_colind, PyArrayObject *__pyx_v_sdInfo_v_v_rowptr, PyArrayObject *__pyx_v_sdInfo_v_v_colind, PyArrayObject *__pyx_v_sdInfo_v_u_rowptr, PyArrayObject *__pyx_v_sdInfo_v_u_colind, PyArrayObject *__pyx_v_sdInfo_v_w_rowptr, PyArrayObject *__pyx_v_sdInfo_v_w_colind, PyArrayObject *__pyx_v_sdInfo_w_w_rowptr, PyArrayObject *__pyx_v_sdInfo_w_w_colind, PyArrayObject *__pyx_v_sdInfo_w_u_rowptr, PyArrayObject *__pyx_v_sdInfo_w_u_colind, PyArrayObject *__pyx_v_sdInfo_w_v_rowptr, PyArrayObject *__pyx_v_sdInfo_w_v_colind, int __pyx_v_offset_p, int __pyx_v_offset_u, int __pyx_v_offset_v, int __pyx_v_offset_w, int __pyx_v_stride_p, int __pyx_v_stride_u, int __pyx_v_stride_v, int __pyx_v_stride_w, PyArrayObject *__pyx_v_globalResidual, int __pyx_v_nExteriorElementBoundaries_global, PyArrayObject *__pyx_v_exteriorElementBoundariesArray, PyArrayObject *__pyx_v_elementBoundaryElementsArray, PyArrayObject *__pyx_v_elementBoundaryLocalElementBoundariesArray, PyArrayObject *__pyx_v_ebqe_vf_ext, PyArrayObject *__pyx_v_bc_ebqe_vf_ext, PyArrayObject *__pyx_v_ebqe_phi_ext, PyArrayObject *__pyx_v_bc_ebqe_phi_ext, PyArrayObject *__pyx_v_ebqe_normal_phi_ext, PyArrayObject *__pyx_v_ebqe_kappa_phi_ext, PyArrayObject *__pyx_v_ebqe_vos_ext, PyArrayObject *__pyx_v_ebqe_turb_var_0, PyArrayObject *__pyx_v_ebqe_turb_var_1, PyArrayObject *__pyx_v_isDOFBoundary_p, PyArrayObject *__pyx_v_isDOFBoundary_u, PyArrayObject *__pyx_v_isDOFBoundary_v, PyArrayObject *__pyx_v_isDOFBoundary_w, PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_p, PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_u, PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_v, PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_w, PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_u, PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_v, PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_w, PyArrayObject *__pyx_v_ebqe_bc_p_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_mass_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_mom_u_adv_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_mom_v_adv_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_mom_w_adv_ext, PyArrayObject *__pyx_v_ebqe_bc_u_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_u_diff_ext, PyArrayObject *__pyx_v_ebqe_penalty_ext, PyArrayObject *__pyx_v_ebqe_bc_v_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_v_diff_ext, PyArrayObject *__pyx_v_ebqe_bc_w_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_w_diff_ext, PyArrayObject *__pyx_v_q_x, PyArrayObject *__pyx_v_q_velocity, PyArrayObject *__pyx_v_ebqe_velocity, PyArrayObject *__pyx_v_q_grad_u, PyArrayObject *__pyx_v_q_grad_v, PyArrayObject *__pyx_v_q_grad_w, PyArrayObject *__pyx_v_q_divU, PyArrayObject *__pyx_v_ebqe_grad_u, PyArrayObject *__pyx_v_ebqe_grad_v, PyArrayObject *__pyx_v_ebqe_grad_w, PyArrayObject *__pyx_v_flux, PyArrayObject *__pyx_v_elementResidual_p, PyArrayObject *__pyx_v_elementFlags, PyArrayObject *__pyx_v_boundaryFlags, PyArrayObject *__pyx_v_barycenters, PyArrayObject *__pyx_v_wettedAreas, PyArrayObject *__pyx_v_netForces_p, PyArrayObject *__pyx_v_netForces_v, PyArrayObject *__pyx_v_netMoments, PyArrayObject *__pyx_v_q_rho, PyArrayObject *__pyx_v_ebqe_rho, PyArrayObject *__pyx_v_q_nu, PyArrayObject *__pyx_v_ebqe_nu, int __pyx_v_nParticles, double __pyx_v_particle_epsFact, double __pyx_v_particle_alpha, double __pyx_v_particle_beta, double __pyx_v_particle_penalty_constant, PyArrayObject *__pyx_v_particle_signed_distances, PyArrayObject *__pyx_v_particle_signed_distance_normals, PyArrayObject *__pyx_v_particle_velocities, PyArrayObject *__pyx_v_particle_centroids, PyArrayObject *__pyx_v_particle_netForces, PyArrayObject *__pyx_v_particle_netMoments, PyArrayObject *__pyx_v_particle_surfaceArea, double __pyx_v_particle_nitsche, int __pyx_v_STABILIZATION_TYPE, double __pyx_v_areaRefElement, double __pyx_v_cMax, double __pyx_v_cE, PyArrayObject *__pyx_v_forcex, PyArrayObject *__pyx_v_forcey, PyArrayObject *__pyx_v_forcez, int __pyx_v_KILL_PRESSURE_TERM, double __pyx_v_dt, PyArrayObject *__pyx_v_entropyResidualAtCell, PyArrayObject *__pyx_v_maxSpeed2AtCell, double __pyx_v_maxSpeed2AtOmega, PyArrayObject *__pyx_v_rhoAtCell, PyArrayObject *__pyx_v_muAtCell, PyArrayObject *__pyx_v_quantDOFs, int __pyx_v_numDOFsPerEqn, PyArrayObject *__pyx_v_csrRowIndeces_DofLoops, PyArrayObject *__pyx_v_csrColumnOffsets_DofLoops, PyArrayObject *__pyx_v_ML, PyArrayObject *__pyx_v_Cx, PyArrayObject *__pyx_v_Cy, PyArrayObject *__pyx_v_Cz, int __pyx_v_MATERIAL_PARAMETERS_AS_FUNCTION, PyArrayObject *__pyx_v_density_as_function, PyArrayObject *__pyx_v_dynamic_viscosity_as_function, PyArrayObject *__pyx_v_ebqe_density_as_function, PyArrayObject *__pyx_v_ebqe_dynamic_viscosity_as_function, double __pyx_v_order_polynomial) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calculateResidual", 0);

  /* "mprans/cRANS3PF.pyx":3703
 *                           numpy.ndarray ebqe_dynamic_viscosity_as_function,
 *                           double order_polynomial):
 *         self.thisptr.calculateResidual(< double *> mesh_trial_ref.data,             # <<<<<<<<<<<<<<
 *                                        < double * > mesh_grad_trial_ref.data,
 *                                        < double * > mesh_dof.data,
 */
  __pyx_v_self->thisptr->calculateResidual(((double *)__pyx_v_mesh_trial_ref->data), ((double *)__pyx_v_mesh_grad_trial_ref->data), ((double *)__pyx_v_mesh_dof->data), ((double *)__pyx_v_mesh_velocity_dof->data), __pyx_v_MOVING_DOMAIN, __pyx_v_PSTAB, ((int *)__pyx_v_mesh_l2g->data), ((double *)__pyx_v_dV_ref->data), ((double *)__pyx_v_p_trial_ref->data), ((double *)__pyx_v_p_grad_trial_ref->data), ((double *)__pyx_v_p_test_ref->data), ((double *)__pyx_v_p_grad_test_ref->data), ((double *)__pyx_v_q_p->data), ((double *)__pyx_v_q_grad_p->data), ((double *)__pyx_v_ebqe_p->data), ((double *)__pyx_v_ebqe_grad_p->data), ((double *)__pyx_v_vel_trial_ref->data), ((double *)__pyx_v_vel_grad_trial_ref->data), ((double *)__pyx_v_vel_hess_trial_ref->data), ((double *)__pyx_v_vel_test_ref->data), ((double *)__pyx_v_vel_grad_test_ref->data), ((double *)__pyx_v_mesh_trial_trace_ref->data), ((double *)__pyx_v_mesh_grad_trial_trace_ref->data), ((double *)__pyx_v_dS_ref->data), ((double *)__pyx_v_p_trial_trace_ref->data), ((double *)__pyx_v_p_grad_trial_trace_ref->data), ((double *)__pyx_v_p_test_trace_ref->data), ((double *)__pyx_v_p_grad_test_trace_ref->data), ((double *)__pyx_v_vel_trial_trace_ref->data), ((double *)__pyx_v_vel_grad_trial_trace_ref->data), ((double *)__pyx_v_vel_test_trace_ref->data), ((double *)__pyx_v_vel_grad_test_trace_ref->data), ((double *)__pyx_v_normal_ref->data), ((double *)__pyx_v_boundaryJac_ref->data), __pyx_v_eb_adjoint_sigma, ((double *)__pyx_v_elementDiameter->data), ((double *)__pyx_v_nodeDiametersArray->data), __pyx_v_hFactor, __pyx_v_nElements_global, __pyx_v_nElements_owned, __pyx_v_nElementBoundaries_owned, __pyx_v_useRBLES, __pyx_v_useMetrics, __pyx_v_alphaBDF, __pyx_v_epsFact_rho, __pyx_v_epsFact_mu, __pyx_v_sigma, __pyx_v_rho_0, __pyx_v_nu_0, __pyx_v_rho_1, __pyx_v_nu_1, __pyx_v_smagorinskyConstant, __pyx_v_turbulenceClosureModel, __pyx_v_Ct_sge, __pyx_v_Cd_sge, __pyx_v_C_dc, __pyx_v_C_b, ((double *)__pyx_v_eps_solid->data), ((double *)__pyx_v_phi_solid->data), ((double *)__pyx_v_q_velocity_solid->data), ((double *)__pyx_v_q_vos->data), ((double *)__pyx_v_q_dvos_dt->data), ((double *)__pyx_v_q_dragAlpha->data), ((double *)__pyx_v_q_dragBeta->data), ((double *)__pyx_v_q_mass_source->data), ((double *)__pyx_v_q_turb_var_0->data), ((double *)__pyx_v_q_turb_var_1->data), ((double *)__pyx_v_q_turb_var_grad_0->data), ((double *)__pyx_v_q_eddy_viscosity->data), ((int *)__pyx_v_p_l2g->data), ((int *)__pyx_v_vel_l2g->data), ((double *)__pyx_v_p_dof->data), ((double *)__pyx_v_u_dof->data), ((double *)__pyx_v_v_dof->data), ((double *)__pyx_v_w_dof->data), ((double *)__pyx_v_u_dof_old->data), ((double *)__pyx_v_v_dof_old->data), ((double *)__pyx_v_w_dof_old->data), ((double *)__pyx_v_u_dof_old_old->data), ((double *)__pyx_v_v_dof_old_old->data), ((double *)__pyx_v_w_dof_old_old->data), ((double *)__pyx_v_g->data), __pyx_v_useVF, ((double *)__pyx_v_vf->data), ((double *)__pyx_v_phi->data), ((double *)__pyx_v_normal_phi->data), ((double *)__pyx_v_kappa_phi->data), ((double *)__pyx_v_q_mom_u_acc->data), ((double *)__pyx_v_q_mom_v_acc->data), ((double *)__pyx_v_q_mom_w_acc->data), ((double *)__pyx_v_q_mass_adv->data), ((double *)__pyx_v_q_mom_u_acc_beta_bdf->data), ((double *)__pyx_v_q_mom_v_acc_beta_bdf->data), ((double *)__pyx_v_q_mom_w_acc_beta_bdf->data), ((double *)__pyx_v_q_dV->data), ((double *)__pyx_v_q_dV_last->data), ((double *)__pyx_v_q_velocity_sge->data), ((double *)__pyx_v_ebqe_velocity_star->data), ((double *)__pyx_v_q_cfl->data), ((double *)__pyx_v_q_numDiff_u->data), ((double *)__pyx_v_q_numDiff_v->data), ((double *)__pyx_v_q_numDiff_w->data), ((double *)__pyx_v_q_numDiff_u_last->data), ((double *)__pyx_v_q_numDiff_v_last->data), ((double *)__pyx_v_q_numDiff_w_last->data), ((int *)__pyx_v_sdInfo_u_u_rowptr->data), ((int *)__pyx_v_sdInfo_u_u_colind->data), ((int *)__pyx_v_sdInfo_u_v_rowptr->data), ((int *)__pyx_v_sdInfo_u_v_colind->data), ((int *)__pyx_v_sdInfo_u_w_rowptr->data), ((int *)__pyx_v_sdInfo_u_w_colind->data), ((int *)__pyx_v_sdInfo_v_v_rowptr->data), ((int *)__pyx_v_sdInfo_v_v_colind->data), ((int *)__pyx_v_sdInfo_v_u_rowptr->data), ((int *)__pyx_v_sdInfo_v_u_colind->data), ((int *)__pyx_v_sdInfo_v_w_rowptr->data), ((int *)__pyx_v_sdInfo_v_w_colind->data), ((int *)__pyx_v_sdInfo_w_w_rowptr->data), ((int *)__pyx_v_sdInfo_w_w_colind->data), ((int *)__pyx_v_sdInfo_w_u_rowptr->data), ((int *)__pyx_v_sdInfo_w_u_colind->data), ((int *)__pyx_v_sdInfo_w_v_rowptr->data), ((int *)__pyx_v_sdInfo_w_v_colind->data), __pyx_v_offset_p, __pyx_v_offset_u, __pyx_v_offset_v, __pyx_v_offset_w, __pyx_v_stride_p, __pyx_v_stride_u, __pyx_v_stride_v, __pyx_v_stride_w, ((double *)__pyx_v_globalResidual->data), __pyx_v_nExteriorElementBoundaries_global, ((int *)__pyx_v_exteriorElementBoundariesArray->data), ((int *)__pyx_v_elementBoundaryElementsArray->data), ((int *)__pyx_v_elementBoundaryLocalElementBoundariesArray->data), ((double *)__pyx_v_ebqe_vf_ext->data), ((double *)__pyx_v_bc_ebqe_vf_ext->data), ((double *)__pyx_v_ebqe_phi_ext->data), ((double *)__pyx_v_bc_ebqe_phi_ext->data), ((double *)__pyx_v_ebqe_normal_phi_ext->data), ((double *)__pyx_v_ebqe_kappa_phi_ext->data), ((double *)__pyx_v_ebqe_vos_ext->data), ((double *)__pyx_v_ebqe_turb_var_0->data), ((double *)__pyx_v_ebqe_turb_var_1->data), ((int *)__pyx_v_isDOFBoundary_p->data), ((int *)__pyx_v_isDOFBoundary_u->data), ((int *)__pyx_v_isDOFBoundary_v->data), ((int *)__pyx_v_isDOFBoundary_w->data), ((int *)__pyx_v_isAdvectiveFluxBoundary_p->data), ((int *)__pyx_v_isAdvectiveFluxBoundary_u->data), ((int *)__pyx_v_isAdvectiveFluxBoundary_v->data), ((int *)__pyx_v_isAdvectiveFluxBoundary_w->data), ((int *)__pyx_v_isDiffusiveFluxBoundary_u->data), ((int *)__pyx_v_isDiffusiveFluxBoundary_v->data), ((int *)__pyx_v_isDiffusiveFluxBoundary_w->data), ((double *)__pyx_v_ebqe_bc_p_ext->data), ((double *)__pyx_v_ebqe_bc_flux_mass_ext->data), ((double *)__pyx_v_ebqe_bc_flux_mom_u_adv_ext->data), ((double *)__pyx_v_ebqe_bc_flux_mom_v_adv_ext->data), ((double *)__pyx_v_ebqe_bc_flux_mom_w_adv_ext->data), ((double *)__pyx_v_ebqe_bc_u_ext->data), ((double *)__pyx_v_ebqe_bc_flux_u_diff_ext->data), ((double *)__pyx_v_ebqe_penalty_ext->data), ((double *)__pyx_v_ebqe_bc_v_ext->data), ((double *)__pyx_v_ebqe_bc_flux_v_diff_ext->data), ((double *)__pyx_v_ebqe_bc_w_ext->data), ((double *)__pyx_v_ebqe_bc_flux_w_diff_ext->data), ((double *)__pyx_v_q_x->data), ((double *)__pyx_v_q_velocity->data), ((double *)__pyx_v_ebqe_velocity->data), ((double *)__pyx_v_q_grad_u->data), ((double *)__pyx_v_q_grad_v->data), ((double *)__pyx_v_q_grad_w->data), ((double *)__pyx_v_q_divU->data), ((double *)__pyx_v_ebqe_grad_u->data), ((double *)__pyx_v_ebqe_grad_v->data), ((double *)__pyx_v_ebqe_grad_w->data), ((double *)__pyx_v_flux->data), ((double *)__pyx_v_elementResidual_p->data), ((int *)__pyx_v_elementFlags->data), ((int *)__pyx_v_boundaryFlags->data), ((double *)__pyx_v_barycenters->data), ((double *)__pyx_v_wettedAreas->data), ((double *)__pyx_v_netForces_p->data), ((double *)__pyx_v_netForces_v->data), ((double *)__pyx_v_netMoments->data), ((double *)__pyx_v_q_rho->data), ((double *)__pyx_v_ebqe_rho->data), ((double *)__pyx_v_q_nu->data), ((double *)__pyx_v_ebqe_nu->data), __pyx_v_nParticles, __pyx_v_particle_epsFact, __pyx_v_particle_alpha, __pyx_v_particle_beta, __pyx_v_particle_penalty_constant, ((double *)__pyx_v_particle_signed_distances->data), ((double *)__pyx_v_particle_signed_distance_normals->data), ((double *)__pyx_v_particle_velocities->data), ((double *)__pyx_v_particle_centroids->data), ((double *)__pyx_v_particle_netForces->data), ((double *)__pyx_v_particle_netMoments->data), ((double *)__pyx_v_particle_surfaceArea->data), __pyx_v_particle_nitsche, __pyx_v_STABILIZATION_TYPE, __pyx_v_areaRefElement, __pyx_v_cMax, __pyx_v_cE, ((double *)__pyx_v_forcex->data), ((double *)__pyx_v_forcey->data), ((double *)__pyx_v_forcez->data), __pyx_v_KILL_PRESSURE_TERM, __pyx_v_dt, ((double *)__pyx_v_entropyResidualAtCell->data), ((double *)__pyx_v_maxSpeed2AtCell->data), __pyx_v_maxSpeed2AtOmega, ((double *)__pyx_v_rhoAtCell->data), ((double *)__pyx_v_muAtCell->data), ((double *)__pyx_v_quantDOFs->data), __pyx_v_numDOFsPerEqn, ((int *)__pyx_v_csrRowIndeces_DofLoops->data), ((int *)__pyx_v_csrColumnOffsets_DofLoops->data), ((double *)__pyx_v_ML->data), ((double *)__pyx_v_Cx->data), ((double *)__pyx_v_Cy->data), ((double *)__pyx_v_Cz->data), __pyx_v_MATERIAL_PARAMETERS_AS_FUNCTION, ((double *)__pyx_v_density_as_function->data), ((double *)__pyx_v_dynamic_viscosity_as_function->data), ((double *)__pyx_v_ebqe_density_as_function->data), ((double *)__pyx_v_ebqe_dynamic_viscosity_as_function->data), __pyx_v_order_polynomial);

  /* "mprans/cRANS3PF.pyx":3487
 *         del self.thisptr
 * 
 *     def calculateResidual(self,             # <<<<<<<<<<<<<<
 *                           numpy.ndarray mesh_trial_ref,
 *                           numpy.ndarray mesh_grad_trial_ref,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mprans/cRANS3PF.pyx":3918
 *                                        < double * > ebqe_dynamic_viscosity_as_function.data,
 *                                        order_polynomial)
 *     def calculateJacobian(self,             # <<<<<<<<<<<<<<
 *                           numpy.ndarray mesh_trial_ref,
 *                           numpy.ndarray mesh_grad_trial_ref,
 */

/* Python wrapper */
static PyObject *__pyx_pw_6mprans_8cRANS3PF_9RANS3PF2D_7calculateJacobian(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6mprans_8cRANS3PF_9RANS3PF2D_7calculateJacobian(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_mesh_trial_ref = 0;
  PyArrayObject *__pyx_v_mesh_grad_trial_ref = 0;
  PyArrayObject *__pyx_v_mesh_dof = 0;
  PyArrayObject *__pyx_v_mesh_velocity_dof = 0;
  double __pyx_v_MOVING_DOMAIN;
  double __pyx_v_PSTAB;
  PyArrayObject *__pyx_v_mesh_l2g = 0;
  PyArrayObject *__pyx_v_dV_ref = 0;
  PyArrayObject *__pyx_v_p_trial_ref = 0;
  PyArrayObject *__pyx_v_p_grad_trial_ref = 0;
  PyArrayObject *__pyx_v_p_test_ref = 0;
  PyArrayObject *__pyx_v_p_grad_test_ref = 0;
  PyArrayObject *__pyx_v_q_p = 0;
  PyArrayObject *__pyx_v_q_grad_p = 0;
  PyArrayObject *__pyx_v_ebqe_p = 0;
  PyArrayObject *__pyx_v_ebqe_grad_p = 0;
  PyArrayObject *__pyx_v_vel_trial_ref = 0;
  PyArrayObject *__pyx_v_vel_grad_trial_ref = 0;
  PyArrayObject *__pyx_v_vel_hess_trial_ref = 0;
  PyArrayObject *__pyx_v_vel_test_ref = 0;
  PyArrayObject *__pyx_v_vel_grad_test_ref = 0;
  PyArrayObject *__pyx_v_mesh_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_mesh_grad_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_dS_ref = 0;
  PyArrayObject *__pyx_v_p_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_p_grad_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_p_test_trace_ref = 0;
  PyArrayObject *__pyx_v_p_grad_test_trace_ref = 0;
  PyArrayObject *__pyx_v_vel_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_vel_grad_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_vel_test_trace_ref = 0;
  PyArrayObject *__pyx_v_vel_grad_test_trace_ref = 0;
  PyArrayObject *__pyx_v_normal_ref = 0;
  PyArrayObject *__pyx_v_boundaryJac_ref = 0;
  double __pyx_v_eb_adjoint_sigma;
  PyArrayObject *__pyx_v_elementDiameter = 0;
  PyArrayObject *__pyx_v_nodeDiametersArray = 0;
  double __pyx_v_hFactor;
  int __pyx_v_nElements_global;
  int __pyx_v_nElements_owned;
  double __pyx_v_useRBLES;
  double __pyx_v_useMetrics;
  double __pyx_v_alphaBDF;
  double __pyx_v_epsFact_rho;
  double __pyx_v_epsFact_mu;
  double __pyx_v_sigma;
  double __pyx_v_rho_0;
  double __pyx_v_nu_0;
  double __pyx_v_rho_1;
  double __pyx_v_nu_1;
  double __pyx_v_smagorinskyConstant;
  int __pyx_v_turbulenceClosureModel;
  double __pyx_v_Ct_sge;
  double __pyx_v_Cd_sge;
  double __pyx_v_C_dg;
  double __pyx_v_C_b;
  PyArrayObject *__pyx_v_eps_solid = 0;
  PyArrayObject *__pyx_v_phi_solid = 0;
  PyArrayObject *__pyx_v_q_velocity_solid = 0;
  PyArrayObject *__pyx_v_q_vos = 0;
  PyArrayObject *__pyx_v_q_dvos_dt = 0;
  PyArrayObject *__pyx_v_q_dragAlpha = 0;
  PyArrayObject *__pyx_v_q_dragBeta = 0;
  PyArrayObject *__pyx_v_q_mass_source = 0;
  PyArrayObject *__pyx_v_q_turb_var_0 = 0;
  PyArrayObject *__pyx_v_q_turb_var_1 = 0;
  PyArrayObject *__pyx_v_q_turb_var_grad_0 = 0;
  PyArrayObject *__pyx_v_p_l2g = 0;
  PyArrayObject *__pyx_v_vel_l2g = 0;
  PyArrayObject *__pyx_v_p_dof = 0;
  PyArrayObject *__pyx_v_u_dof = 0;
  PyArrayObject *__pyx_v_v_dof = 0;
  PyArrayObject *__pyx_v_w_dof = 0;
  PyArrayObject *__pyx_v_g = 0;
  double __pyx_v_useVF;
  PyArrayObject *__pyx_v_vf = 0;
  PyArrayObject *__pyx_v_phi = 0;
  PyArrayObject *__pyx_v_normal_phi = 0;
  PyArrayObject *__pyx_v_kappa_phi = 0;
  PyArrayObject *__pyx_v_q_mom_u_acc_beta_bdf = 0;
  PyArrayObject *__pyx_v_q_mom_v_acc_beta_bdf = 0;
  PyArrayObject *__pyx_v_q_mom_w_acc_beta_bdf = 0;
  PyArrayObject *__pyx_v_q_dV = 0;
  PyArrayObject *__pyx_v_q_dV_last = 0;
  PyArrayObject *__pyx_v_q_velocity_sge = 0;
  PyArrayObject *__pyx_v_ebqe_velocity_star = 0;
  PyArrayObject *__pyx_v_q_cfl = 0;
  PyArrayObject *__pyx_v_q_numDiff_u_last = 0;
  PyArrayObject *__pyx_v_q_numDiff_v_last = 0;
  PyArrayObject *__pyx_v_q_numDiff_w_last = 0;
  PyArrayObject *__pyx_v_sdInfo_u_u_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_u_u_colind = 0;
  PyArrayObject *__pyx_v_sdInfo_u_v_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_u_v_colind = 0;
  PyArrayObject *__pyx_v_sdInfo_u_w_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_u_w_colind = 0;
  PyArrayObject *__pyx_v_sdInfo_v_v_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_v_v_colind = 0;
  PyArrayObject *__pyx_v_sdInfo_v_u_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_v_u_colind = 0;
  PyArrayObject *__pyx_v_sdInfo_v_w_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_v_w_colind = 0;
  PyArrayObject *__pyx_v_sdInfo_w_w_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_w_w_colind = 0;
  PyArrayObject *__pyx_v_sdInfo_w_u_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_w_u_colind = 0;
  PyArrayObject *__pyx_v_sdInfo_w_v_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_w_v_colind = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_p_p = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_p_p = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_p_u = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_p_u = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_p_v = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_p_v = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_p_w = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_p_w = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_u_p = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_u_p = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_u_u = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_u_u = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_u_v = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_u_v = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_u_w = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_u_w = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_v_p = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_v_p = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_v_u = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_v_u = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_v_v = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_v_v = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_v_w = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_v_w = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_w_p = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_w_p = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_w_u = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_w_u = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_w_v = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_w_v = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_w_w = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_w_w = 0;
  PyObject *__pyx_v_globalJacobian = 0;
  int __pyx_v_nExteriorElementBoundaries_global;
  PyArrayObject *__pyx_v_exteriorElementBoundariesArray = 0;
  PyArrayObject *__pyx_v_elementBoundaryElementsArray = 0;
  PyArrayObject *__pyx_v_elementBoundaryLocalElementBoundariesArray = 0;
  PyArrayObject *__pyx_v_ebqe_vf_ext = 0;
  PyArrayObject *__pyx_v_bc_ebqe_vf_ext = 0;
  PyArrayObject *__pyx_v_ebqe_phi_ext = 0;
  PyArrayObject *__pyx_v_bc_ebqe_phi_ext = 0;
  PyArrayObject *__pyx_v_ebqe_normal_phi_ext = 0;
  PyArrayObject *__pyx_v_ebqe_kappa_phi_ext = 0;
  PyArrayObject *__pyx_v_ebqe_vos_ext = 0;
  PyArrayObject *__pyx_v_ebqe_turb_var_0 = 0;
  PyArrayObject *__pyx_v_ebqe_turb_var_1 = 0;
  PyArrayObject *__pyx_v_isDOFBoundary_p = 0;
  PyArrayObject *__pyx_v_isDOFBoundary_u = 0;
  PyArrayObject *__pyx_v_isDOFBoundary_v = 0;
  PyArrayObject *__pyx_v_isDOFBoundary_w = 0;
  PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_p = 0;
  PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_u = 0;
  PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_v = 0;
  PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_w = 0;
  PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_u = 0;
  PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_v = 0;
  PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_w = 0;
  PyArrayObject *__pyx_v_ebqe_bc_p_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_flux_mass_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_flux_mom_u_adv_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_flux_mom_v_adv_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_flux_mom_w_adv_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_u_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_flux_u_diff_ext = 0;
  PyArrayObject *__pyx_v_ebqe_penalty_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_v_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_flux_v_diff_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_w_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_flux_w_diff_ext = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_p_p = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_p_u = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_p_v = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_p_w = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_u_p = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_u_u = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_u_v = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_u_w = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_v_p = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_v_u = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_v_v = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_v_w = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_w_p = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_w_u = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_w_v = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_w_w = 0;
  PyArrayObject *__pyx_v_elementFlags = 0;
  int __pyx_v_nParticles;
  double __pyx_v_particle_epsFact;
  double __pyx_v_particle_alpha;
  double __pyx_v_particle_beta;
  double __pyx_v_particle_penalty_constant;
  PyArrayObject *__pyx_v_particle_signed_distances = 0;
  PyArrayObject *__pyx_v_particle_signed_distance_normals = 0;
  PyArrayObject *__pyx_v_particle_velocities = 0;
  PyArrayObject *__pyx_v_particle_centroids = 0;
  double __pyx_v_particle_nitsche;
  int __pyx_v_KILL_PRESSURE_TERM;
  int __pyx_v_MATERIAL_PARAMETERS_AS_FUNCTION;
  PyArrayObject *__pyx_v_density_as_function = 0;
  PyArrayObject *__pyx_v_dynamic_viscosity_as_function = 0;
  PyArrayObject *__pyx_v_ebqe_density_as_function = 0;
  PyArrayObject *__pyx_v_ebqe_dynamic_viscosity_as_function = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calculateJacobian (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_mesh_trial_ref,&__pyx_n_s_mesh_grad_trial_ref,&__pyx_n_s_mesh_dof,&__pyx_n_s_mesh_velocity_dof,&__pyx_n_s_MOVING_DOMAIN,&__pyx_n_s_PSTAB,&__pyx_n_s_mesh_l2g,&__pyx_n_s_dV_ref,&__pyx_n_s_p_trial_ref,&__pyx_n_s_p_grad_trial_ref,&__pyx_n_s_p_test_ref,&__pyx_n_s_p_grad_test_ref,&__pyx_n_s_q_p,&__pyx_n_s_q_grad_p,&__pyx_n_s_ebqe_p,&__pyx_n_s_ebqe_grad_p,&__pyx_n_s_vel_trial_ref,&__pyx_n_s_vel_grad_trial_ref,&__pyx_n_s_vel_hess_trial_ref,&__pyx_n_s_vel_test_ref,&__pyx_n_s_vel_grad_test_ref,&__pyx_n_s_mesh_trial_trace_ref,&__pyx_n_s_mesh_grad_trial_trace_ref,&__pyx_n_s_dS_ref,&__pyx_n_s_p_trial_trace_ref,&__pyx_n_s_p_grad_trial_trace_ref,&__pyx_n_s_p_test_trace_ref,&__pyx_n_s_p_grad_test_trace_ref,&__pyx_n_s_vel_trial_trace_ref,&__pyx_n_s_vel_grad_trial_trace_ref,&__pyx_n_s_vel_test_trace_ref,&__pyx_n_s_vel_grad_test_trace_ref,&__pyx_n_s_normal_ref,&__pyx_n_s_boundaryJac_ref,&__pyx_n_s_eb_adjoint_sigma,&__pyx_n_s_elementDiameter,&__pyx_n_s_nodeDiametersArray,&__pyx_n_s_hFactor,&__pyx_n_s_nElements_global,&__pyx_n_s_nElements_owned,&__pyx_n_s_useRBLES,&__pyx_n_s_useMetrics,&__pyx_n_s_alphaBDF,&__pyx_n_s_epsFact_rho,&__pyx_n_s_epsFact_mu,&__pyx_n_s_sigma,&__pyx_n_s_rho_0,&__pyx_n_s_nu_0,&__pyx_n_s_rho_1,&__pyx_n_s_nu_1,&__pyx_n_s_smagorinskyConstant,&__pyx_n_s_turbulenceClosureModel,&__pyx_n_s_Ct_sge,&__pyx_n_s_Cd_sge,&__pyx_n_s_C_dg,&__pyx_n_s_C_b,&__pyx_n_s_eps_solid,&__pyx_n_s_phi_solid,&__pyx_n_s_q_velocity_solid,&__pyx_n_s_q_vos,&__pyx_n_s_q_dvos_dt,&__pyx_n_s_q_dragAlpha,&__pyx_n_s_q_dragBeta,&__pyx_n_s_q_mass_source,&__pyx_n_s_q_turb_var_0,&__pyx_n_s_q_turb_var_1,&__pyx_n_s_q_turb_var_grad_0,&__pyx_n_s_p_l2g,&__pyx_n_s_vel_l2g,&__pyx_n_s_p_dof,&__pyx_n_s_u_dof,&__pyx_n_s_v_dof,&__pyx_n_s_w_dof,&__pyx_n_s_g,&__pyx_n_s_useVF,&__pyx_n_s_vf,&__pyx_n_s_phi,&__pyx_n_s_normal_phi,&__pyx_n_s_kappa_phi,&__pyx_n_s_q_mom_u_acc_beta_bdf,&__pyx_n_s_q_mom_v_acc_beta_bdf,&__pyx_n_s_q_mom_w_acc_beta_bdf,&__pyx_n_s_q_dV,&__pyx_n_s_q_dV_last,&__pyx_n_s_q_velocity_sge,&__pyx_n_s_ebqe_velocity_star,&__pyx_n_s_q_cfl,&__pyx_n_s_q_numDiff_u_last,&__pyx_n_s_q_numDiff_v_last,&__pyx_n_s_q_numDiff_w_last,&__pyx_n_s_sdInfo_u_u_rowptr,&__pyx_n_s_sdInfo_u_u_colind,&__pyx_n_s_sdInfo_u_v_rowptr,&__pyx_n_s_sdInfo_u_v_colind,&__pyx_n_s_sdInfo_u_w_rowptr,&__pyx_n_s_sdInfo_u_w_colind,&__pyx_n_s_sdInfo_v_v_rowptr,&__pyx_n_s_sdInfo_v_v_colind,&__pyx_n_s_sdInfo_v_u_rowptr,&__pyx_n_s_sdInfo_v_u_colind,&__pyx_n_s_sdInfo_v_w_rowptr,&__pyx_n_s_sdInfo_v_w_colind,&__pyx_n_s_sdInfo_w_w_rowptr,&__pyx_n_s_sdInfo_w_w_colind,&__pyx_n_s_sdInfo_w_u_rowptr,&__pyx_n_s_sdInfo_w_u_colind,&__pyx_n_s_sdInfo_w_v_rowptr,&__pyx_n_s_sdInfo_w_v_colind,&__pyx_n_s_csrRowIndeces_p_p,&__pyx_n_s_csrColumnOffsets_p_p,&__pyx_n_s_csrRowIndeces_p_u,&__pyx_n_s_csrColumnOffsets_p_u,&__pyx_n_s_csrRowIndeces_p_v,&__pyx_n_s_csrColumnOffsets_p_v,&__pyx_n_s_csrRowIndeces_p_w,&__pyx_n_s_csrColumnOffsets_p_w,&__pyx_n_s_csrRowIndeces_u_p,&__pyx_n_s_csrColumnOffsets_u_p,&__pyx_n_s_csrRowIndeces_u_u,&__pyx_n_s_csrColumnOffsets_u_u,&__pyx_n_s_csrRowIndeces_u_v,&__pyx_n_s_csrColumnOffsets_u_v,&__pyx_n_s_csrRowIndeces_u_w,&__pyx_n_s_csrColumnOffsets_u_w,&__pyx_n_s_csrRowIndeces_v_p,&__pyx_n_s_csrColumnOffsets_v_p,&__pyx_n_s_csrRowIndeces_v_u,&__pyx_n_s_csrColumnOffsets_v_u,&__pyx_n_s_csrRowIndeces_v_v,&__pyx_n_s_csrColumnOffsets_v_v,&__pyx_n_s_csrRowIndeces_v_w,&__pyx_n_s_csrColumnOffsets_v_w,&__pyx_n_s_csrRowIndeces_w_p,&__pyx_n_s_csrColumnOffsets_w_p,&__pyx_n_s_csrRowIndeces_w_u,&__pyx_n_s_csrColumnOffsets_w_u,&__pyx_n_s_csrRowIndeces_w_v,&__pyx_n_s_csrColumnOffsets_w_v,&__pyx_n_s_csrRowIndeces_w_w,&__pyx_n_s_csrColumnOffsets_w_w,&__pyx_n_s_globalJacobian,&__pyx_n_s_nExteriorElementBoundaries_globa,&__pyx_n_s_exteriorElementBoundariesArray,&__pyx_n_s_elementBoundaryElementsArray,&__pyx_n_s_elementBoundaryLocalElementBound,&__pyx_n_s_ebqe_vf_ext,&__pyx_n_s_bc_ebqe_vf_ext,&__pyx_n_s_ebqe_phi_ext,&__pyx_n_s_bc_ebqe_phi_ext,&__pyx_n_s_ebqe_normal_phi_ext,&__pyx_n_s_ebqe_kappa_phi_ext,&__pyx_n_s_ebqe_vos_ext,&__pyx_n_s_ebqe_turb_var_0,&__pyx_n_s_ebqe_turb_var_1,&__pyx_n_s_isDOFBoundary_p,&__pyx_n_s_isDOFBoundary_u,&__pyx_n_s_isDOFBoundary_v,&__pyx_n_s_isDOFBoundary_w,&__pyx_n_s_isAdvectiveFluxBoundary_p,&__pyx_n_s_isAdvectiveFluxBoundary_u,&__pyx_n_s_isAdvectiveFluxBoundary_v,&__pyx_n_s_isAdvectiveFluxBoundary_w,&__pyx_n_s_isDiffusiveFluxBoundary_u,&__pyx_n_s_isDiffusiveFluxBoundary_v,&__pyx_n_s_isDiffusiveFluxBoundary_w,&__pyx_n_s_ebqe_bc_p_ext,&__pyx_n_s_ebqe_bc_flux_mass_ext,&__pyx_n_s_ebqe_bc_flux_mom_u_adv_ext,&__pyx_n_s_ebqe_bc_flux_mom_v_adv_ext,&__pyx_n_s_ebqe_bc_flux_mom_w_adv_ext,&__pyx_n_s_ebqe_bc_u_ext,&__pyx_n_s_ebqe_bc_flux_u_diff_ext,&__pyx_n_s_ebqe_penalty_ext,&__pyx_n_s_ebqe_bc_v_ext,&__pyx_n_s_ebqe_bc_flux_v_diff_ext,&__pyx_n_s_ebqe_bc_w_ext,&__pyx_n_s_ebqe_bc_flux_w_diff_ext,&__pyx_n_s_csrColumnOffsets_eb_p_p,&__pyx_n_s_csrColumnOffsets_eb_p_u,&__pyx_n_s_csrColumnOffsets_eb_p_v,&__pyx_n_s_csrColumnOffsets_eb_p_w,&__pyx_n_s_csrColumnOffsets_eb_u_p,&__pyx_n_s_csrColumnOffsets_eb_u_u,&__pyx_n_s_csrColumnOffsets_eb_u_v,&__pyx_n_s_csrColumnOffsets_eb_u_w,&__pyx_n_s_csrColumnOffsets_eb_v_p,&__pyx_n_s_csrColumnOffsets_eb_v_u,&__pyx_n_s_csrColumnOffsets_eb_v_v,&__pyx_n_s_csrColumnOffsets_eb_v_w,&__pyx_n_s_csrColumnOffsets_eb_w_p,&__pyx_n_s_csrColumnOffsets_eb_w_u,&__pyx_n_s_csrColumnOffsets_eb_w_v,&__pyx_n_s_csrColumnOffsets_eb_w_w,&__pyx_n_s_elementFlags,&__pyx_n_s_nParticles,&__pyx_n_s_particle_epsFact,&__pyx_n_s_particle_alpha,&__pyx_n_s_particle_beta,&__pyx_n_s_particle_penalty_constant,&__pyx_n_s_particle_signed_distances,&__pyx_n_s_particle_signed_distance_normals,&__pyx_n_s_particle_velocities,&__pyx_n_s_particle_centroids,&__pyx_n_s_particle_nitsche,&__pyx_n_s_KILL_PRESSURE_TERM,&__pyx_n_s_MATERIAL_PARAMETERS_AS_FUNCTION,&__pyx_n_s_density_as_function,&__pyx_n_s_dynamic_viscosity_as_function,&__pyx_n_s_ebqe_density_as_function,&__pyx_n_s_ebqe_dynamic_viscosity_as_functi,0};
    PyObject* values[210] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 210: values[209] = PyTuple_GET_ITEM(__pyx_args, 209);
        case 209: values[208] = PyTuple_GET_ITEM(__pyx_args, 208);
        case 208: values[207] = PyTuple_GET_ITEM(__pyx_args, 207);
        case 207: values[206] = PyTuple_GET_ITEM(__pyx_args, 206);
        case 206: values[205] = PyTuple_GET_ITEM(__pyx_args, 205);
        case 205: values[204] = PyTuple_GET_ITEM(__pyx_args, 204);
        case 204: values[203] = PyTuple_GET_ITEM(__pyx_args, 203);
        case 203: values[202] = PyTuple_GET_ITEM(__pyx_args, 202);
        case 202: values[201] = PyTuple_GET_ITEM(__pyx_args, 201);
        case 201: values[200] = PyTuple_GET_ITEM(__pyx_args, 200);
        case 200: values[199] = PyTuple_GET_ITEM(__pyx_args, 199);
        case 199: values[198] = PyTuple_GET_ITEM(__pyx_args, 198);
        case 198: values[197] = PyTuple_GET_ITEM(__pyx_args, 197);
        case 197: values[196] = PyTuple_GET_ITEM(__pyx_args, 196);
        case 196: values[195] = PyTuple_GET_ITEM(__pyx_args, 195);
        case 195: values[194] = PyTuple_GET_ITEM(__pyx_args, 194);
        case 194: values[193] = PyTuple_GET_ITEM(__pyx_args, 193);
        case 193: values[192] = PyTuple_GET_ITEM(__pyx_args, 192);
        case 192: values[191] = PyTuple_GET_ITEM(__pyx_args, 191);
        case 191: values[190] = PyTuple_GET_ITEM(__pyx_args, 190);
        case 190: values[189] = PyTuple_GET_ITEM(__pyx_args, 189);
        case 189: values[188] = PyTuple_GET_ITEM(__pyx_args, 188);
        case 188: values[187] = PyTuple_GET_ITEM(__pyx_args, 187);
        case 187: values[186] = PyTuple_GET_ITEM(__pyx_args, 186);
        case 186: values[185] = PyTuple_GET_ITEM(__pyx_args, 185);
        case 185: values[184] = PyTuple_GET_ITEM(__pyx_args, 184);
        case 184: values[183] = PyTuple_GET_ITEM(__pyx_args, 183);
        case 183: values[182] = PyTuple_GET_ITEM(__pyx_args, 182);
        case 182: values[181] = PyTuple_GET_ITEM(__pyx_args, 181);
        case 181: values[180] = PyTuple_GET_ITEM(__pyx_args, 180);
        case 180: values[179] = PyTuple_GET_ITEM(__pyx_args, 179);
        case 179: values[178] = PyTuple_GET_ITEM(__pyx_args, 178);
        case 178: values[177] = PyTuple_GET_ITEM(__pyx_args, 177);
        case 177: values[176] = PyTuple_GET_ITEM(__pyx_args, 176);
        case 176: values[175] = PyTuple_GET_ITEM(__pyx_args, 175);
        case 175: values[174] = PyTuple_GET_ITEM(__pyx_args, 174);
        case 174: values[173] = PyTuple_GET_ITEM(__pyx_args, 173);
        case 173: values[172] = PyTuple_GET_ITEM(__pyx_args, 172);
        case 172: values[171] = PyTuple_GET_ITEM(__pyx_args, 171);
        case 171: values[170] = PyTuple_GET_ITEM(__pyx_args, 170);
        case 170: values[169] = PyTuple_GET_ITEM(__pyx_args, 169);
        case 169: values[168] = PyTuple_GET_ITEM(__pyx_args, 168);
        case 168: values[167] = PyTuple_GET_ITEM(__pyx_args, 167);
        case 167: values[166] = PyTuple_GET_ITEM(__pyx_args, 166);
        case 166: values[165] = PyTuple_GET_ITEM(__pyx_args, 165);
        case 165: values[164] = PyTuple_GET_ITEM(__pyx_args, 164);
        case 164: values[163] = PyTuple_GET_ITEM(__pyx_args, 163);
        case 163: values[162] = PyTuple_GET_ITEM(__pyx_args, 162);
        case 162: values[161] = PyTuple_GET_ITEM(__pyx_args, 161);
        case 161: values[160] = PyTuple_GET_ITEM(__pyx_args, 160);
        case 160: values[159] = PyTuple_GET_ITEM(__pyx_args, 159);
        case 159: values[158] = PyTuple_GET_ITEM(__pyx_args, 158);
        case 158: values[157] = PyTuple_GET_ITEM(__pyx_args, 157);
        case 157: values[156] = PyTuple_GET_ITEM(__pyx_args, 156);
        case 156: values[155] = PyTuple_GET_ITEM(__pyx_args, 155);
        case 155: values[154] = PyTuple_GET_ITEM(__pyx_args, 154);
        case 154: values[153] = PyTuple_GET_ITEM(__pyx_args, 153);
        case 153: values[152] = PyTuple_GET_ITEM(__pyx_args, 152);
        case 152: values[151] = PyTuple_GET_ITEM(__pyx_args, 151);
        case 151: values[150] = PyTuple_GET_ITEM(__pyx_args, 150);
        case 150: values[149] = PyTuple_GET_ITEM(__pyx_args, 149);
        case 149: values[148] = PyTuple_GET_ITEM(__pyx_args, 148);
        case 148: values[147] = PyTuple_GET_ITEM(__pyx_args, 147);
        case 147: values[146] = PyTuple_GET_ITEM(__pyx_args, 146);
        case 146: values[145] = PyTuple_GET_ITEM(__pyx_args, 145);
        case 145: values[144] = PyTuple_GET_ITEM(__pyx_args, 144);
        case 144: values[143] = PyTuple_GET_ITEM(__pyx_args, 143);
        case 143: values[142] = PyTuple_GET_ITEM(__pyx_args, 142);
        case 142: values[141] = PyTuple_GET_ITEM(__pyx_args, 141);
        case 141: values[140] = PyTuple_GET_ITEM(__pyx_args, 140);
        case 140: values[139] = PyTuple_GET_ITEM(__pyx_args, 139);
        case 139: values[138] = PyTuple_GET_ITEM(__pyx_args, 138);
        case 138: values[137] = PyTuple_GET_ITEM(__pyx_args, 137);
        case 137: values[136] = PyTuple_GET_ITEM(__pyx_args, 136);
        case 136: values[135] = PyTuple_GET_ITEM(__pyx_args, 135);
        case 135: values[134] = PyTuple_GET_ITEM(__pyx_args, 134);
        case 134: values[133] = PyTuple_GET_ITEM(__pyx_args, 133);
        case 133: values[132] = PyTuple_GET_ITEM(__pyx_args, 132);
        case 132: values[131] = PyTuple_GET_ITEM(__pyx_args, 131);
        case 131: values[130] = PyTuple_GET_ITEM(__pyx_args, 130);
        case 130: values[129] = PyTuple_GET_ITEM(__pyx_args, 129);
        case 129: values[128] = PyTuple_GET_ITEM(__pyx_args, 128);
        case 128: values[127] = PyTuple_GET_ITEM(__pyx_args, 127);
        case 127: values[126] = PyTuple_GET_ITEM(__pyx_args, 126);
        case 126: values[125] = PyTuple_GET_ITEM(__pyx_args, 125);
        case 125: values[124] = PyTuple_GET_ITEM(__pyx_args, 124);
        case 124: values[123] = PyTuple_GET_ITEM(__pyx_args, 123);
        case 123: values[122] = PyTuple_GET_ITEM(__pyx_args, 122);
        case 122: values[121] = PyTuple_GET_ITEM(__pyx_args, 121);
        case 121: values[120] = PyTuple_GET_ITEM(__pyx_args, 120);
        case 120: values[119] = PyTuple_GET_ITEM(__pyx_args, 119);
        case 119: values[118] = PyTuple_GET_ITEM(__pyx_args, 118);
        case 118: values[117] = PyTuple_GET_ITEM(__pyx_args, 117);
        case 117: values[116] = PyTuple_GET_ITEM(__pyx_args, 116);
        case 116: values[115] = PyTuple_GET_ITEM(__pyx_args, 115);
        case 115: values[114] = PyTuple_GET_ITEM(__pyx_args, 114);
        case 114: values[113] = PyTuple_GET_ITEM(__pyx_args, 113);
        case 113: values[112] = PyTuple_GET_ITEM(__pyx_args, 112);
        case 112: values[111] = PyTuple_GET_ITEM(__pyx_args, 111);
        case 111: values[110] = PyTuple_GET_ITEM(__pyx_args, 110);
        case 110: values[109] = PyTuple_GET_ITEM(__pyx_args, 109);
        case 109: values[108] = PyTuple_GET_ITEM(__pyx_args, 108);
        case 108: values[107] = PyTuple_GET_ITEM(__pyx_args, 107);
        case 107: values[106] = PyTuple_GET_ITEM(__pyx_args, 106);
        case 106: values[105] = PyTuple_GET_ITEM(__pyx_args, 105);
        case 105: values[104] = PyTuple_GET_ITEM(__pyx_args, 104);
        case 104: values[103] = PyTuple_GET_ITEM(__pyx_args, 103);
        case 103: values[102] = PyTuple_GET_ITEM(__pyx_args, 102);
        case 102: values[101] = PyTuple_GET_ITEM(__pyx_args, 101);
        case 101: values[100] = PyTuple_GET_ITEM(__pyx_args, 100);
        case 100: values[99] = PyTuple_GET_ITEM(__pyx_args, 99);
        case 99: values[98] = PyTuple_GET_ITEM(__pyx_args, 98);
        case 98: values[97] = PyTuple_GET_ITEM(__pyx_args, 97);
        case 97: values[96] = PyTuple_GET_ITEM(__pyx_args, 96);
        case 96: values[95] = PyTuple_GET_ITEM(__pyx_args, 95);
        case 95: values[94] = PyTuple_GET_ITEM(__pyx_args, 94);
        case 94: values[93] = PyTuple_GET_ITEM(__pyx_args, 93);
        case 93: values[92] = PyTuple_GET_ITEM(__pyx_args, 92);
        case 92: values[91] = PyTuple_GET_ITEM(__pyx_args, 91);
        case 91: values[90] = PyTuple_GET_ITEM(__pyx_args, 90);
        case 90: values[89] = PyTuple_GET_ITEM(__pyx_args, 89);
        case 89: values[88] = PyTuple_GET_ITEM(__pyx_args, 88);
        case 88: values[87] = PyTuple_GET_ITEM(__pyx_args, 87);
        case 87: values[86] = PyTuple_GET_ITEM(__pyx_args, 86);
        case 86: values[85] = PyTuple_GET_ITEM(__pyx_args, 85);
        case 85: values[84] = PyTuple_GET_ITEM(__pyx_args, 84);
        case 84: values[83] = PyTuple_GET_ITEM(__pyx_args, 83);
        case 83: values[82] = PyTuple_GET_ITEM(__pyx_args, 82);
        case 82: values[81] = PyTuple_GET_ITEM(__pyx_args, 81);
        case 81: values[80] = PyTuple_GET_ITEM(__pyx_args, 80);
        case 80: values[79] = PyTuple_GET_ITEM(__pyx_args, 79);
        case 79: values[78] = PyTuple_GET_ITEM(__pyx_args, 78);
        case 78: values[77] = PyTuple_GET_ITEM(__pyx_args, 77);
        case 77: values[76] = PyTuple_GET_ITEM(__pyx_args, 76);
        case 76: values[75] = PyTuple_GET_ITEM(__pyx_args, 75);
        case 75: values[74] = PyTuple_GET_ITEM(__pyx_args, 74);
        case 74: values[73] = PyTuple_GET_ITEM(__pyx_args, 73);
        case 73: values[72] = PyTuple_GET_ITEM(__pyx_args, 72);
        case 72: values[71] = PyTuple_GET_ITEM(__pyx_args, 71);
        case 71: values[70] = PyTuple_GET_ITEM(__pyx_args, 70);
        case 70: values[69] = PyTuple_GET_ITEM(__pyx_args, 69);
        case 69: values[68] = PyTuple_GET_ITEM(__pyx_args, 68);
        case 68: values[67] = PyTuple_GET_ITEM(__pyx_args, 67);
        case 67: values[66] = PyTuple_GET_ITEM(__pyx_args, 66);
        case 66: values[65] = PyTuple_GET_ITEM(__pyx_args, 65);
        case 65: values[64] = PyTuple_GET_ITEM(__pyx_args, 64);
        case 64: values[63] = PyTuple_GET_ITEM(__pyx_args, 63);
        case 63: values[62] = PyTuple_GET_ITEM(__pyx_args, 62);
        case 62: values[61] = PyTuple_GET_ITEM(__pyx_args, 61);
        case 61: values[60] = PyTuple_GET_ITEM(__pyx_args, 60);
        case 60: values[59] = PyTuple_GET_ITEM(__pyx_args, 59);
        case 59: values[58] = PyTuple_GET_ITEM(__pyx_args, 58);
        case 58: values[57] = PyTuple_GET_ITEM(__pyx_args, 57);
        case 57: values[56] = PyTuple_GET_ITEM(__pyx_args, 56);
        case 56: values[55] = PyTuple_GET_ITEM(__pyx_args, 55);
        case 55: values[54] = PyTuple_GET_ITEM(__pyx_args, 54);
        case 54: values[53] = PyTuple_GET_ITEM(__pyx_args, 53);
        case 53: values[52] = PyTuple_GET_ITEM(__pyx_args, 52);
        case 52: values[51] = PyTuple_GET_ITEM(__pyx_args, 51);
        case 51: values[50] = PyTuple_GET_ITEM(__pyx_args, 50);
        case 50: values[49] = PyTuple_GET_ITEM(__pyx_args, 49);
        case 49: values[48] = PyTuple_GET_ITEM(__pyx_args, 48);
        case 48: values[47] = PyTuple_GET_ITEM(__pyx_args, 47);
        case 47: values[46] = PyTuple_GET_ITEM(__pyx_args, 46);
        case 46: values[45] = PyTuple_GET_ITEM(__pyx_args, 45);
        case 45: values[44] = PyTuple_GET_ITEM(__pyx_args, 44);
        case 44: values[43] = PyTuple_GET_ITEM(__pyx_args, 43);
        case 43: values[42] = PyTuple_GET_ITEM(__pyx_args, 42);
        case 42: values[41] = PyTuple_GET_ITEM(__pyx_args, 41);
        case 41: values[40] = PyTuple_GET_ITEM(__pyx_args, 40);
        case 40: values[39] = PyTuple_GET_ITEM(__pyx_args, 39);
        case 39: values[38] = PyTuple_GET_ITEM(__pyx_args, 38);
        case 38: values[37] = PyTuple_GET_ITEM(__pyx_args, 37);
        case 37: values[36] = PyTuple_GET_ITEM(__pyx_args, 36);
        case 36: values[35] = PyTuple_GET_ITEM(__pyx_args, 35);
        case 35: values[34] = PyTuple_GET_ITEM(__pyx_args, 34);
        case 34: values[33] = PyTuple_GET_ITEM(__pyx_args, 33);
        case 33: values[32] = PyTuple_GET_ITEM(__pyx_args, 32);
        case 32: values[31] = PyTuple_GET_ITEM(__pyx_args, 31);
        case 31: values[30] = PyTuple_GET_ITEM(__pyx_args, 30);
        case 30: values[29] = PyTuple_GET_ITEM(__pyx_args, 29);
        case 29: values[28] = PyTuple_GET_ITEM(__pyx_args, 28);
        case 28: values[27] = PyTuple_GET_ITEM(__pyx_args, 27);
        case 27: values[26] = PyTuple_GET_ITEM(__pyx_args, 26);
        case 26: values[25] = PyTuple_GET_ITEM(__pyx_args, 25);
        case 25: values[24] = PyTuple_GET_ITEM(__pyx_args, 24);
        case 24: values[23] = PyTuple_GET_ITEM(__pyx_args, 23);
        case 23: values[22] = PyTuple_GET_ITEM(__pyx_args, 22);
        case 22: values[21] = PyTuple_GET_ITEM(__pyx_args, 21);
        case 21: values[20] = PyTuple_GET_ITEM(__pyx_args, 20);
        case 20: values[19] = PyTuple_GET_ITEM(__pyx_args, 19);
        case 19: values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
        case 18: values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
        case 17: values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_trial_ref)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_grad_trial_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 1); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 2); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_velocity_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 3); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_MOVING_DOMAIN)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 4); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_PSTAB)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 5); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_l2g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 6); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case  7:
        if (likely((values[7] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dV_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 7); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case  8:
        if (likely((values[8] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_trial_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 8); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case  9:
        if (likely((values[9] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_grad_trial_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 9); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 10:
        if (likely((values[10] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_test_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 10); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 11:
        if (likely((values[11] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_grad_test_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 11); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 12:
        if (likely((values[12] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 12); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 13:
        if (likely((values[13] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_grad_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 13); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 14:
        if (likely((values[14] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 14); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 15:
        if (likely((values[15] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_grad_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 15); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 16:
        if (likely((values[16] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_trial_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 16); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 17:
        if (likely((values[17] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_grad_trial_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 17); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 18:
        if (likely((values[18] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_hess_trial_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 18); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 19:
        if (likely((values[19] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_test_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 19); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 20:
        if (likely((values[20] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_grad_test_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 20); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 21:
        if (likely((values[21] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 21); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 22:
        if (likely((values[22] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_grad_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 22); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 23:
        if (likely((values[23] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dS_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 23); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 24:
        if (likely((values[24] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 24); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 25:
        if (likely((values[25] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_grad_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 25); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 26:
        if (likely((values[26] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_test_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 26); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 27:
        if (likely((values[27] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_grad_test_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 27); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 28:
        if (likely((values[28] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 28); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 29:
        if (likely((values[29] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_grad_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 29); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 30:
        if (likely((values[30] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_test_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 30); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 31:
        if (likely((values[31] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_grad_test_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 31); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 32:
        if (likely((values[32] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_normal_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 32); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 33:
        if (likely((values[33] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_boundaryJac_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 33); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 34:
        if (likely((values[34] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_eb_adjoint_sigma)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 34); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 35:
        if (likely((values[35] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_elementDiameter)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 35); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 36:
        if (likely((values[36] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nodeDiametersArray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 36); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 37:
        if (likely((values[37] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_hFactor)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 37); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 38:
        if (likely((values[38] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nElements_global)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 38); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 39:
        if (likely((values[39] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nElements_owned)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 39); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 40:
        if (likely((values[40] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_useRBLES)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 40); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 41:
        if (likely((values[41] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_useMetrics)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 41); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 42:
        if (likely((values[42] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_alphaBDF)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 42); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 43:
        if (likely((values[43] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_epsFact_rho)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 43); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 44:
        if (likely((values[44] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_epsFact_mu)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 44); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 45:
        if (likely((values[45] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sigma)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 45); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 46:
        if (likely((values[46] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rho_0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 46); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 47:
        if (likely((values[47] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nu_0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 47); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 48:
        if (likely((values[48] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rho_1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 48); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 49:
        if (likely((values[49] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nu_1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 49); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 50:
        if (likely((values[50] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_smagorinskyConstant)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 50); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 51:
        if (likely((values[51] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_turbulenceClosureModel)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 51); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 52:
        if (likely((values[52] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Ct_sge)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 52); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 53:
        if (likely((values[53] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Cd_sge)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 53); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 54:
        if (likely((values[54] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_C_dg)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 54); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 55:
        if (likely((values[55] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_C_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 55); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 56:
        if (likely((values[56] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_eps_solid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 56); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 57:
        if (likely((values[57] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_phi_solid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 57); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 58:
        if (likely((values[58] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_velocity_solid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 58); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 59:
        if (likely((values[59] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_vos)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 59); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 60:
        if (likely((values[60] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_dvos_dt)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 60); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 61:
        if (likely((values[61] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_dragAlpha)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 61); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 62:
        if (likely((values[62] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_dragBeta)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 62); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 63:
        if (likely((values[63] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_mass_source)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 63); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 64:
        if (likely((values[64] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_turb_var_0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 64); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 65:
        if (likely((values[65] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_turb_var_1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 65); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 66:
        if (likely((values[66] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_turb_var_grad_0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 66); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 67:
        if (likely((values[67] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_l2g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 67); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 68:
        if (likely((values[68] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_l2g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 68); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 69:
        if (likely((values[69] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 69); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 70:
        if (likely((values[70] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_u_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 70); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 71:
        if (likely((values[71] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_v_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 71); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 72:
        if (likely((values[72] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_w_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 72); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 73:
        if (likely((values[73] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 73); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 74:
        if (likely((values[74] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_useVF)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 74); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 75:
        if (likely((values[75] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vf)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 75); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 76:
        if (likely((values[76] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_phi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 76); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 77:
        if (likely((values[77] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_normal_phi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 77); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 78:
        if (likely((values[78] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_kappa_phi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 78); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 79:
        if (likely((values[79] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_mom_u_acc_beta_bdf)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 79); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 80:
        if (likely((values[80] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_mom_v_acc_beta_bdf)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 80); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 81:
        if (likely((values[81] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_mom_w_acc_beta_bdf)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 81); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 82:
        if (likely((values[82] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_dV)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 82); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 83:
        if (likely((values[83] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_dV_last)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 83); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 84:
        if (likely((values[84] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_velocity_sge)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 84); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 85:
        if (likely((values[85] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_velocity_star)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 85); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 86:
        if (likely((values[86] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_cfl)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 86); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 87:
        if (likely((values[87] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_numDiff_u_last)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 87); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 88:
        if (likely((values[88] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_numDiff_v_last)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 88); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 89:
        if (likely((values[89] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_numDiff_w_last)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 89); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 90:
        if (likely((values[90] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_u_u_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 90); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 91:
        if (likely((values[91] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_u_u_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 91); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 92:
        if (likely((values[92] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_u_v_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 92); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 93:
        if (likely((values[93] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_u_v_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 93); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 94:
        if (likely((values[94] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_u_w_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 94); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 95:
        if (likely((values[95] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_u_w_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 95); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 96:
        if (likely((values[96] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_v_v_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 96); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 97:
        if (likely((values[97] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_v_v_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 97); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 98:
        if (likely((values[98] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_v_u_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 98); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 99:
        if (likely((values[99] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_v_u_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 99); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 100:
        if (likely((values[100] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_v_w_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 100); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 101:
        if (likely((values[101] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_v_w_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 101); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 102:
        if (likely((values[102] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_w_w_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 102); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 103:
        if (likely((values[103] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_w_w_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 103); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 104:
        if (likely((values[104] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_w_u_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 104); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 105:
        if (likely((values[105] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_w_u_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 105); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 106:
        if (likely((values[106] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_w_v_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 106); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 107:
        if (likely((values[107] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_w_v_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 107); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 108:
        if (likely((values[108] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_p_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 108); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 109:
        if (likely((values[109] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_p_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 109); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 110:
        if (likely((values[110] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_p_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 110); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 111:
        if (likely((values[111] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_p_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 111); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 112:
        if (likely((values[112] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_p_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 112); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 113:
        if (likely((values[113] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_p_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 113); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 114:
        if (likely((values[114] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_p_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 114); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 115:
        if (likely((values[115] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_p_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 115); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 116:
        if (likely((values[116] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_u_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 116); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 117:
        if (likely((values[117] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_u_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 117); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 118:
        if (likely((values[118] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_u_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 118); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 119:
        if (likely((values[119] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_u_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 119); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 120:
        if (likely((values[120] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_u_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 120); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 121:
        if (likely((values[121] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_u_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 121); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 122:
        if (likely((values[122] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_u_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 122); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 123:
        if (likely((values[123] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_u_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 123); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 124:
        if (likely((values[124] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_v_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 124); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 125:
        if (likely((values[125] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_v_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 125); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 126:
        if (likely((values[126] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_v_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 126); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 127:
        if (likely((values[127] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_v_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 127); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 128:
        if (likely((values[128] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_v_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 128); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 129:
        if (likely((values[129] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_v_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 129); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 130:
        if (likely((values[130] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_v_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 130); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 131:
        if (likely((values[131] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_v_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 131); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 132:
        if (likely((values[132] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_w_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 132); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 133:
        if (likely((values[133] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_w_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 133); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 134:
        if (likely((values[134] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_w_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 134); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 135:
        if (likely((values[135] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_w_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 135); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 136:
        if (likely((values[136] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_w_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 136); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 137:
        if (likely((values[137] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_w_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 137); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 138:
        if (likely((values[138] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_w_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 138); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 139:
        if (likely((values[139] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_w_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 139); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 140:
        if (likely((values[140] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_globalJacobian)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 140); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 141:
        if (likely((values[141] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nExteriorElementBoundaries_globa)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 141); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 142:
        if (likely((values[142] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_exteriorElementBoundariesArray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 142); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 143:
        if (likely((values[143] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_elementBoundaryElementsArray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 143); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 144:
        if (likely((values[144] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_elementBoundaryLocalElementBound)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 144); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 145:
        if (likely((values[145] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_vf_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 145); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 146:
        if (likely((values[146] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bc_ebqe_vf_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 146); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 147:
        if (likely((values[147] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_phi_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 147); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 148:
        if (likely((values[148] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bc_ebqe_phi_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 148); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 149:
        if (likely((values[149] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_normal_phi_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 149); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 150:
        if (likely((values[150] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_kappa_phi_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 150); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 151:
        if (likely((values[151] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_vos_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 151); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 152:
        if (likely((values[152] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_turb_var_0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 152); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 153:
        if (likely((values[153] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_turb_var_1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 153); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 154:
        if (likely((values[154] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isDOFBoundary_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 154); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 155:
        if (likely((values[155] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isDOFBoundary_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 155); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 156:
        if (likely((values[156] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isDOFBoundary_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 156); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 157:
        if (likely((values[157] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isDOFBoundary_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 157); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 158:
        if (likely((values[158] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isAdvectiveFluxBoundary_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 158); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 159:
        if (likely((values[159] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isAdvectiveFluxBoundary_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 159); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 160:
        if (likely((values[160] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isAdvectiveFluxBoundary_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 160); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 161:
        if (likely((values[161] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isAdvectiveFluxBoundary_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 161); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 162:
        if (likely((values[162] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isDiffusiveFluxBoundary_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 162); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 163:
        if (likely((values[163] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isDiffusiveFluxBoundary_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 163); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 164:
        if (likely((values[164] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isDiffusiveFluxBoundary_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 164); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 165:
        if (likely((values[165] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_p_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 165); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 166:
        if (likely((values[166] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_flux_mass_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 166); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 167:
        if (likely((values[167] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_flux_mom_u_adv_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 167); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 168:
        if (likely((values[168] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_flux_mom_v_adv_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 168); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 169:
        if (likely((values[169] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_flux_mom_w_adv_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 169); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 170:
        if (likely((values[170] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_u_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 170); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 171:
        if (likely((values[171] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_flux_u_diff_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 171); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 172:
        if (likely((values[172] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_penalty_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 172); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 173:
        if (likely((values[173] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_v_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 173); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 174:
        if (likely((values[174] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_flux_v_diff_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 174); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 175:
        if (likely((values[175] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_w_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 175); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 176:
        if (likely((values[176] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_flux_w_diff_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 176); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 177:
        if (likely((values[177] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_p_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 177); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 178:
        if (likely((values[178] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_p_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 178); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 179:
        if (likely((values[179] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_p_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 179); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 180:
        if (likely((values[180] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_p_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 180); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 181:
        if (likely((values[181] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_u_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 181); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 182:
        if (likely((values[182] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_u_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 182); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 183:
        if (likely((values[183] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_u_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 183); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 184:
        if (likely((values[184] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_u_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 184); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 185:
        if (likely((values[185] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_v_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 185); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 186:
        if (likely((values[186] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_v_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 186); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 187:
        if (likely((values[187] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_v_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 187); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 188:
        if (likely((values[188] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_v_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 188); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 189:
        if (likely((values[189] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_w_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 189); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 190:
        if (likely((values[190] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_w_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 190); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 191:
        if (likely((values[191] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_w_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 191); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 192:
        if (likely((values[192] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_w_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 192); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 193:
        if (likely((values[193] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_elementFlags)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 193); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 194:
        if (likely((values[194] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nParticles)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 194); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 195:
        if (likely((values[195] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_epsFact)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 195); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 196:
        if (likely((values[196] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_alpha)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 196); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 197:
        if (likely((values[197] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_beta)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 197); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 198:
        if (likely((values[198] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_penalty_constant)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 198); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 199:
        if (likely((values[199] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_signed_distances)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 199); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 200:
        if (likely((values[200] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_signed_distance_normals)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 200); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 201:
        if (likely((values[201] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_velocities)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 201); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 202:
        if (likely((values[202] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_centroids)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 202); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 203:
        if (likely((values[203] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_nitsche)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 203); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 204:
        if (likely((values[204] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_KILL_PRESSURE_TERM)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 204); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 205:
        if (likely((values[205] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_MATERIAL_PARAMETERS_AS_FUNCTION)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 205); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 206:
        if (likely((values[206] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_density_as_function)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 206); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 207:
        if (likely((values[207] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dynamic_viscosity_as_function)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 207); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 208:
        if (likely((values[208] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_density_as_function)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 208); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
        case 209:
        if (likely((values[209] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_dynamic_viscosity_as_functi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, 209); __PYX_ERR(0, 3918, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calculateJacobian") < 0)) __PYX_ERR(0, 3918, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 210) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
      values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
      values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
      values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
      values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
      values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
      values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
      values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
      values[19] = PyTuple_GET_ITEM(__pyx_args, 19);
      values[20] = PyTuple_GET_ITEM(__pyx_args, 20);
      values[21] = PyTuple_GET_ITEM(__pyx_args, 21);
      values[22] = PyTuple_GET_ITEM(__pyx_args, 22);
      values[23] = PyTuple_GET_ITEM(__pyx_args, 23);
      values[24] = PyTuple_GET_ITEM(__pyx_args, 24);
      values[25] = PyTuple_GET_ITEM(__pyx_args, 25);
      values[26] = PyTuple_GET_ITEM(__pyx_args, 26);
      values[27] = PyTuple_GET_ITEM(__pyx_args, 27);
      values[28] = PyTuple_GET_ITEM(__pyx_args, 28);
      values[29] = PyTuple_GET_ITEM(__pyx_args, 29);
      values[30] = PyTuple_GET_ITEM(__pyx_args, 30);
      values[31] = PyTuple_GET_ITEM(__pyx_args, 31);
      values[32] = PyTuple_GET_ITEM(__pyx_args, 32);
      values[33] = PyTuple_GET_ITEM(__pyx_args, 33);
      values[34] = PyTuple_GET_ITEM(__pyx_args, 34);
      values[35] = PyTuple_GET_ITEM(__pyx_args, 35);
      values[36] = PyTuple_GET_ITEM(__pyx_args, 36);
      values[37] = PyTuple_GET_ITEM(__pyx_args, 37);
      values[38] = PyTuple_GET_ITEM(__pyx_args, 38);
      values[39] = PyTuple_GET_ITEM(__pyx_args, 39);
      values[40] = PyTuple_GET_ITEM(__pyx_args, 40);
      values[41] = PyTuple_GET_ITEM(__pyx_args, 41);
      values[42] = PyTuple_GET_ITEM(__pyx_args, 42);
      values[43] = PyTuple_GET_ITEM(__pyx_args, 43);
      values[44] = PyTuple_GET_ITEM(__pyx_args, 44);
      values[45] = PyTuple_GET_ITEM(__pyx_args, 45);
      values[46] = PyTuple_GET_ITEM(__pyx_args, 46);
      values[47] = PyTuple_GET_ITEM(__pyx_args, 47);
      values[48] = PyTuple_GET_ITEM(__pyx_args, 48);
      values[49] = PyTuple_GET_ITEM(__pyx_args, 49);
      values[50] = PyTuple_GET_ITEM(__pyx_args, 50);
      values[51] = PyTuple_GET_ITEM(__pyx_args, 51);
      values[52] = PyTuple_GET_ITEM(__pyx_args, 52);
      values[53] = PyTuple_GET_ITEM(__pyx_args, 53);
      values[54] = PyTuple_GET_ITEM(__pyx_args, 54);
      values[55] = PyTuple_GET_ITEM(__pyx_args, 55);
      values[56] = PyTuple_GET_ITEM(__pyx_args, 56);
      values[57] = PyTuple_GET_ITEM(__pyx_args, 57);
      values[58] = PyTuple_GET_ITEM(__pyx_args, 58);
      values[59] = PyTuple_GET_ITEM(__pyx_args, 59);
      values[60] = PyTuple_GET_ITEM(__pyx_args, 60);
      values[61] = PyTuple_GET_ITEM(__pyx_args, 61);
      values[62] = PyTuple_GET_ITEM(__pyx_args, 62);
      values[63] = PyTuple_GET_ITEM(__pyx_args, 63);
      values[64] = PyTuple_GET_ITEM(__pyx_args, 64);
      values[65] = PyTuple_GET_ITEM(__pyx_args, 65);
      values[66] = PyTuple_GET_ITEM(__pyx_args, 66);
      values[67] = PyTuple_GET_ITEM(__pyx_args, 67);
      values[68] = PyTuple_GET_ITEM(__pyx_args, 68);
      values[69] = PyTuple_GET_ITEM(__pyx_args, 69);
      values[70] = PyTuple_GET_ITEM(__pyx_args, 70);
      values[71] = PyTuple_GET_ITEM(__pyx_args, 71);
      values[72] = PyTuple_GET_ITEM(__pyx_args, 72);
      values[73] = PyTuple_GET_ITEM(__pyx_args, 73);
      values[74] = PyTuple_GET_ITEM(__pyx_args, 74);
      values[75] = PyTuple_GET_ITEM(__pyx_args, 75);
      values[76] = PyTuple_GET_ITEM(__pyx_args, 76);
      values[77] = PyTuple_GET_ITEM(__pyx_args, 77);
      values[78] = PyTuple_GET_ITEM(__pyx_args, 78);
      values[79] = PyTuple_GET_ITEM(__pyx_args, 79);
      values[80] = PyTuple_GET_ITEM(__pyx_args, 80);
      values[81] = PyTuple_GET_ITEM(__pyx_args, 81);
      values[82] = PyTuple_GET_ITEM(__pyx_args, 82);
      values[83] = PyTuple_GET_ITEM(__pyx_args, 83);
      values[84] = PyTuple_GET_ITEM(__pyx_args, 84);
      values[85] = PyTuple_GET_ITEM(__pyx_args, 85);
      values[86] = PyTuple_GET_ITEM(__pyx_args, 86);
      values[87] = PyTuple_GET_ITEM(__pyx_args, 87);
      values[88] = PyTuple_GET_ITEM(__pyx_args, 88);
      values[89] = PyTuple_GET_ITEM(__pyx_args, 89);
      values[90] = PyTuple_GET_ITEM(__pyx_args, 90);
      values[91] = PyTuple_GET_ITEM(__pyx_args, 91);
      values[92] = PyTuple_GET_ITEM(__pyx_args, 92);
      values[93] = PyTuple_GET_ITEM(__pyx_args, 93);
      values[94] = PyTuple_GET_ITEM(__pyx_args, 94);
      values[95] = PyTuple_GET_ITEM(__pyx_args, 95);
      values[96] = PyTuple_GET_ITEM(__pyx_args, 96);
      values[97] = PyTuple_GET_ITEM(__pyx_args, 97);
      values[98] = PyTuple_GET_ITEM(__pyx_args, 98);
      values[99] = PyTuple_GET_ITEM(__pyx_args, 99);
      values[100] = PyTuple_GET_ITEM(__pyx_args, 100);
      values[101] = PyTuple_GET_ITEM(__pyx_args, 101);
      values[102] = PyTuple_GET_ITEM(__pyx_args, 102);
      values[103] = PyTuple_GET_ITEM(__pyx_args, 103);
      values[104] = PyTuple_GET_ITEM(__pyx_args, 104);
      values[105] = PyTuple_GET_ITEM(__pyx_args, 105);
      values[106] = PyTuple_GET_ITEM(__pyx_args, 106);
      values[107] = PyTuple_GET_ITEM(__pyx_args, 107);
      values[108] = PyTuple_GET_ITEM(__pyx_args, 108);
      values[109] = PyTuple_GET_ITEM(__pyx_args, 109);
      values[110] = PyTuple_GET_ITEM(__pyx_args, 110);
      values[111] = PyTuple_GET_ITEM(__pyx_args, 111);
      values[112] = PyTuple_GET_ITEM(__pyx_args, 112);
      values[113] = PyTuple_GET_ITEM(__pyx_args, 113);
      values[114] = PyTuple_GET_ITEM(__pyx_args, 114);
      values[115] = PyTuple_GET_ITEM(__pyx_args, 115);
      values[116] = PyTuple_GET_ITEM(__pyx_args, 116);
      values[117] = PyTuple_GET_ITEM(__pyx_args, 117);
      values[118] = PyTuple_GET_ITEM(__pyx_args, 118);
      values[119] = PyTuple_GET_ITEM(__pyx_args, 119);
      values[120] = PyTuple_GET_ITEM(__pyx_args, 120);
      values[121] = PyTuple_GET_ITEM(__pyx_args, 121);
      values[122] = PyTuple_GET_ITEM(__pyx_args, 122);
      values[123] = PyTuple_GET_ITEM(__pyx_args, 123);
      values[124] = PyTuple_GET_ITEM(__pyx_args, 124);
      values[125] = PyTuple_GET_ITEM(__pyx_args, 125);
      values[126] = PyTuple_GET_ITEM(__pyx_args, 126);
      values[127] = PyTuple_GET_ITEM(__pyx_args, 127);
      values[128] = PyTuple_GET_ITEM(__pyx_args, 128);
      values[129] = PyTuple_GET_ITEM(__pyx_args, 129);
      values[130] = PyTuple_GET_ITEM(__pyx_args, 130);
      values[131] = PyTuple_GET_ITEM(__pyx_args, 131);
      values[132] = PyTuple_GET_ITEM(__pyx_args, 132);
      values[133] = PyTuple_GET_ITEM(__pyx_args, 133);
      values[134] = PyTuple_GET_ITEM(__pyx_args, 134);
      values[135] = PyTuple_GET_ITEM(__pyx_args, 135);
      values[136] = PyTuple_GET_ITEM(__pyx_args, 136);
      values[137] = PyTuple_GET_ITEM(__pyx_args, 137);
      values[138] = PyTuple_GET_ITEM(__pyx_args, 138);
      values[139] = PyTuple_GET_ITEM(__pyx_args, 139);
      values[140] = PyTuple_GET_ITEM(__pyx_args, 140);
      values[141] = PyTuple_GET_ITEM(__pyx_args, 141);
      values[142] = PyTuple_GET_ITEM(__pyx_args, 142);
      values[143] = PyTuple_GET_ITEM(__pyx_args, 143);
      values[144] = PyTuple_GET_ITEM(__pyx_args, 144);
      values[145] = PyTuple_GET_ITEM(__pyx_args, 145);
      values[146] = PyTuple_GET_ITEM(__pyx_args, 146);
      values[147] = PyTuple_GET_ITEM(__pyx_args, 147);
      values[148] = PyTuple_GET_ITEM(__pyx_args, 148);
      values[149] = PyTuple_GET_ITEM(__pyx_args, 149);
      values[150] = PyTuple_GET_ITEM(__pyx_args, 150);
      values[151] = PyTuple_GET_ITEM(__pyx_args, 151);
      values[152] = PyTuple_GET_ITEM(__pyx_args, 152);
      values[153] = PyTuple_GET_ITEM(__pyx_args, 153);
      values[154] = PyTuple_GET_ITEM(__pyx_args, 154);
      values[155] = PyTuple_GET_ITEM(__pyx_args, 155);
      values[156] = PyTuple_GET_ITEM(__pyx_args, 156);
      values[157] = PyTuple_GET_ITEM(__pyx_args, 157);
      values[158] = PyTuple_GET_ITEM(__pyx_args, 158);
      values[159] = PyTuple_GET_ITEM(__pyx_args, 159);
      values[160] = PyTuple_GET_ITEM(__pyx_args, 160);
      values[161] = PyTuple_GET_ITEM(__pyx_args, 161);
      values[162] = PyTuple_GET_ITEM(__pyx_args, 162);
      values[163] = PyTuple_GET_ITEM(__pyx_args, 163);
      values[164] = PyTuple_GET_ITEM(__pyx_args, 164);
      values[165] = PyTuple_GET_ITEM(__pyx_args, 165);
      values[166] = PyTuple_GET_ITEM(__pyx_args, 166);
      values[167] = PyTuple_GET_ITEM(__pyx_args, 167);
      values[168] = PyTuple_GET_ITEM(__pyx_args, 168);
      values[169] = PyTuple_GET_ITEM(__pyx_args, 169);
      values[170] = PyTuple_GET_ITEM(__pyx_args, 170);
      values[171] = PyTuple_GET_ITEM(__pyx_args, 171);
      values[172] = PyTuple_GET_ITEM(__pyx_args, 172);
      values[173] = PyTuple_GET_ITEM(__pyx_args, 173);
      values[174] = PyTuple_GET_ITEM(__pyx_args, 174);
      values[175] = PyTuple_GET_ITEM(__pyx_args, 175);
      values[176] = PyTuple_GET_ITEM(__pyx_args, 176);
      values[177] = PyTuple_GET_ITEM(__pyx_args, 177);
      values[178] = PyTuple_GET_ITEM(__pyx_args, 178);
      values[179] = PyTuple_GET_ITEM(__pyx_args, 179);
      values[180] = PyTuple_GET_ITEM(__pyx_args, 180);
      values[181] = PyTuple_GET_ITEM(__pyx_args, 181);
      values[182] = PyTuple_GET_ITEM(__pyx_args, 182);
      values[183] = PyTuple_GET_ITEM(__pyx_args, 183);
      values[184] = PyTuple_GET_ITEM(__pyx_args, 184);
      values[185] = PyTuple_GET_ITEM(__pyx_args, 185);
      values[186] = PyTuple_GET_ITEM(__pyx_args, 186);
      values[187] = PyTuple_GET_ITEM(__pyx_args, 187);
      values[188] = PyTuple_GET_ITEM(__pyx_args, 188);
      values[189] = PyTuple_GET_ITEM(__pyx_args, 189);
      values[190] = PyTuple_GET_ITEM(__pyx_args, 190);
      values[191] = PyTuple_GET_ITEM(__pyx_args, 191);
      values[192] = PyTuple_GET_ITEM(__pyx_args, 192);
      values[193] = PyTuple_GET_ITEM(__pyx_args, 193);
      values[194] = PyTuple_GET_ITEM(__pyx_args, 194);
      values[195] = PyTuple_GET_ITEM(__pyx_args, 195);
      values[196] = PyTuple_GET_ITEM(__pyx_args, 196);
      values[197] = PyTuple_GET_ITEM(__pyx_args, 197);
      values[198] = PyTuple_GET_ITEM(__pyx_args, 198);
      values[199] = PyTuple_GET_ITEM(__pyx_args, 199);
      values[200] = PyTuple_GET_ITEM(__pyx_args, 200);
      values[201] = PyTuple_GET_ITEM(__pyx_args, 201);
      values[202] = PyTuple_GET_ITEM(__pyx_args, 202);
      values[203] = PyTuple_GET_ITEM(__pyx_args, 203);
      values[204] = PyTuple_GET_ITEM(__pyx_args, 204);
      values[205] = PyTuple_GET_ITEM(__pyx_args, 205);
      values[206] = PyTuple_GET_ITEM(__pyx_args, 206);
      values[207] = PyTuple_GET_ITEM(__pyx_args, 207);
      values[208] = PyTuple_GET_ITEM(__pyx_args, 208);
      values[209] = PyTuple_GET_ITEM(__pyx_args, 209);
    }
    __pyx_v_mesh_trial_ref = ((PyArrayObject *)values[0]);
    __pyx_v_mesh_grad_trial_ref = ((PyArrayObject *)values[1]);
    __pyx_v_mesh_dof = ((PyArrayObject *)values[2]);
    __pyx_v_mesh_velocity_dof = ((PyArrayObject *)values[3]);
    __pyx_v_MOVING_DOMAIN = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_MOVING_DOMAIN == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3923, __pyx_L3_error)
    __pyx_v_PSTAB = __pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_PSTAB == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3924, __pyx_L3_error)
    __pyx_v_mesh_l2g = ((PyArrayObject *)values[6]);
    __pyx_v_dV_ref = ((PyArrayObject *)values[7]);
    __pyx_v_p_trial_ref = ((PyArrayObject *)values[8]);
    __pyx_v_p_grad_trial_ref = ((PyArrayObject *)values[9]);
    __pyx_v_p_test_ref = ((PyArrayObject *)values[10]);
    __pyx_v_p_grad_test_ref = ((PyArrayObject *)values[11]);
    __pyx_v_q_p = ((PyArrayObject *)values[12]);
    __pyx_v_q_grad_p = ((PyArrayObject *)values[13]);
    __pyx_v_ebqe_p = ((PyArrayObject *)values[14]);
    __pyx_v_ebqe_grad_p = ((PyArrayObject *)values[15]);
    __pyx_v_vel_trial_ref = ((PyArrayObject *)values[16]);
    __pyx_v_vel_grad_trial_ref = ((PyArrayObject *)values[17]);
    __pyx_v_vel_hess_trial_ref = ((PyArrayObject *)values[18]);
    __pyx_v_vel_test_ref = ((PyArrayObject *)values[19]);
    __pyx_v_vel_grad_test_ref = ((PyArrayObject *)values[20]);
    __pyx_v_mesh_trial_trace_ref = ((PyArrayObject *)values[21]);
    __pyx_v_mesh_grad_trial_trace_ref = ((PyArrayObject *)values[22]);
    __pyx_v_dS_ref = ((PyArrayObject *)values[23]);
    __pyx_v_p_trial_trace_ref = ((PyArrayObject *)values[24]);
    __pyx_v_p_grad_trial_trace_ref = ((PyArrayObject *)values[25]);
    __pyx_v_p_test_trace_ref = ((PyArrayObject *)values[26]);
    __pyx_v_p_grad_test_trace_ref = ((PyArrayObject *)values[27]);
    __pyx_v_vel_trial_trace_ref = ((PyArrayObject *)values[28]);
    __pyx_v_vel_grad_trial_trace_ref = ((PyArrayObject *)values[29]);
    __pyx_v_vel_test_trace_ref = ((PyArrayObject *)values[30]);
    __pyx_v_vel_grad_test_trace_ref = ((PyArrayObject *)values[31]);
    __pyx_v_normal_ref = ((PyArrayObject *)values[32]);
    __pyx_v_boundaryJac_ref = ((PyArrayObject *)values[33]);
    __pyx_v_eb_adjoint_sigma = __pyx_PyFloat_AsDouble(values[34]); if (unlikely((__pyx_v_eb_adjoint_sigma == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3953, __pyx_L3_error)
    __pyx_v_elementDiameter = ((PyArrayObject *)values[35]);
    __pyx_v_nodeDiametersArray = ((PyArrayObject *)values[36]);
    __pyx_v_hFactor = __pyx_PyFloat_AsDouble(values[37]); if (unlikely((__pyx_v_hFactor == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3956, __pyx_L3_error)
    __pyx_v_nElements_global = __Pyx_PyInt_As_int(values[38]); if (unlikely((__pyx_v_nElements_global == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3957, __pyx_L3_error)
    __pyx_v_nElements_owned = __Pyx_PyInt_As_int(values[39]); if (unlikely((__pyx_v_nElements_owned == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3958, __pyx_L3_error)
    __pyx_v_useRBLES = __pyx_PyFloat_AsDouble(values[40]); if (unlikely((__pyx_v_useRBLES == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3959, __pyx_L3_error)
    __pyx_v_useMetrics = __pyx_PyFloat_AsDouble(values[41]); if (unlikely((__pyx_v_useMetrics == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3960, __pyx_L3_error)
    __pyx_v_alphaBDF = __pyx_PyFloat_AsDouble(values[42]); if (unlikely((__pyx_v_alphaBDF == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3961, __pyx_L3_error)
    __pyx_v_epsFact_rho = __pyx_PyFloat_AsDouble(values[43]); if (unlikely((__pyx_v_epsFact_rho == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3962, __pyx_L3_error)
    __pyx_v_epsFact_mu = __pyx_PyFloat_AsDouble(values[44]); if (unlikely((__pyx_v_epsFact_mu == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3963, __pyx_L3_error)
    __pyx_v_sigma = __pyx_PyFloat_AsDouble(values[45]); if (unlikely((__pyx_v_sigma == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3964, __pyx_L3_error)
    __pyx_v_rho_0 = __pyx_PyFloat_AsDouble(values[46]); if (unlikely((__pyx_v_rho_0 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3965, __pyx_L3_error)
    __pyx_v_nu_0 = __pyx_PyFloat_AsDouble(values[47]); if (unlikely((__pyx_v_nu_0 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3966, __pyx_L3_error)
    __pyx_v_rho_1 = __pyx_PyFloat_AsDouble(values[48]); if (unlikely((__pyx_v_rho_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3967, __pyx_L3_error)
    __pyx_v_nu_1 = __pyx_PyFloat_AsDouble(values[49]); if (unlikely((__pyx_v_nu_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3968, __pyx_L3_error)
    __pyx_v_smagorinskyConstant = __pyx_PyFloat_AsDouble(values[50]); if (unlikely((__pyx_v_smagorinskyConstant == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3969, __pyx_L3_error)
    __pyx_v_turbulenceClosureModel = __Pyx_PyInt_As_int(values[51]); if (unlikely((__pyx_v_turbulenceClosureModel == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3970, __pyx_L3_error)
    __pyx_v_Ct_sge = __pyx_PyFloat_AsDouble(values[52]); if (unlikely((__pyx_v_Ct_sge == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3971, __pyx_L3_error)
    __pyx_v_Cd_sge = __pyx_PyFloat_AsDouble(values[53]); if (unlikely((__pyx_v_Cd_sge == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3972, __pyx_L3_error)
    __pyx_v_C_dg = __pyx_PyFloat_AsDouble(values[54]); if (unlikely((__pyx_v_C_dg == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3973, __pyx_L3_error)
    __pyx_v_C_b = __pyx_PyFloat_AsDouble(values[55]); if (unlikely((__pyx_v_C_b == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3974, __pyx_L3_error)
    __pyx_v_eps_solid = ((PyArrayObject *)values[56]);
    __pyx_v_phi_solid = ((PyArrayObject *)values[57]);
    __pyx_v_q_velocity_solid = ((PyArrayObject *)values[58]);
    __pyx_v_q_vos = ((PyArrayObject *)values[59]);
    __pyx_v_q_dvos_dt = ((PyArrayObject *)values[60]);
    __pyx_v_q_dragAlpha = ((PyArrayObject *)values[61]);
    __pyx_v_q_dragBeta = ((PyArrayObject *)values[62]);
    __pyx_v_q_mass_source = ((PyArrayObject *)values[63]);
    __pyx_v_q_turb_var_0 = ((PyArrayObject *)values[64]);
    __pyx_v_q_turb_var_1 = ((PyArrayObject *)values[65]);
    __pyx_v_q_turb_var_grad_0 = ((PyArrayObject *)values[66]);
    __pyx_v_p_l2g = ((PyArrayObject *)values[67]);
    __pyx_v_vel_l2g = ((PyArrayObject *)values[68]);
    __pyx_v_p_dof = ((PyArrayObject *)values[69]);
    __pyx_v_u_dof = ((PyArrayObject *)values[70]);
    __pyx_v_v_dof = ((PyArrayObject *)values[71]);
    __pyx_v_w_dof = ((PyArrayObject *)values[72]);
    __pyx_v_g = ((PyArrayObject *)values[73]);
    __pyx_v_useVF = __pyx_PyFloat_AsDouble(values[74]); if (unlikely((__pyx_v_useVF == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3992, __pyx_L3_error)
    __pyx_v_vf = ((PyArrayObject *)values[75]);
    __pyx_v_phi = ((PyArrayObject *)values[76]);
    __pyx_v_normal_phi = ((PyArrayObject *)values[77]);
    __pyx_v_kappa_phi = ((PyArrayObject *)values[78]);
    __pyx_v_q_mom_u_acc_beta_bdf = ((PyArrayObject *)values[79]);
    __pyx_v_q_mom_v_acc_beta_bdf = ((PyArrayObject *)values[80]);
    __pyx_v_q_mom_w_acc_beta_bdf = ((PyArrayObject *)values[81]);
    __pyx_v_q_dV = ((PyArrayObject *)values[82]);
    __pyx_v_q_dV_last = ((PyArrayObject *)values[83]);
    __pyx_v_q_velocity_sge = ((PyArrayObject *)values[84]);
    __pyx_v_ebqe_velocity_star = ((PyArrayObject *)values[85]);
    __pyx_v_q_cfl = ((PyArrayObject *)values[86]);
    __pyx_v_q_numDiff_u_last = ((PyArrayObject *)values[87]);
    __pyx_v_q_numDiff_v_last = ((PyArrayObject *)values[88]);
    __pyx_v_q_numDiff_w_last = ((PyArrayObject *)values[89]);
    __pyx_v_sdInfo_u_u_rowptr = ((PyArrayObject *)values[90]);
    __pyx_v_sdInfo_u_u_colind = ((PyArrayObject *)values[91]);
    __pyx_v_sdInfo_u_v_rowptr = ((PyArrayObject *)values[92]);
    __pyx_v_sdInfo_u_v_colind = ((PyArrayObject *)values[93]);
    __pyx_v_sdInfo_u_w_rowptr = ((PyArrayObject *)values[94]);
    __pyx_v_sdInfo_u_w_colind = ((PyArrayObject *)values[95]);
    __pyx_v_sdInfo_v_v_rowptr = ((PyArrayObject *)values[96]);
    __pyx_v_sdInfo_v_v_colind = ((PyArrayObject *)values[97]);
    __pyx_v_sdInfo_v_u_rowptr = ((PyArrayObject *)values[98]);
    __pyx_v_sdInfo_v_u_colind = ((PyArrayObject *)values[99]);
    __pyx_v_sdInfo_v_w_rowptr = ((PyArrayObject *)values[100]);
    __pyx_v_sdInfo_v_w_colind = ((PyArrayObject *)values[101]);
    __pyx_v_sdInfo_w_w_rowptr = ((PyArrayObject *)values[102]);
    __pyx_v_sdInfo_w_w_colind = ((PyArrayObject *)values[103]);
    __pyx_v_sdInfo_w_u_rowptr = ((PyArrayObject *)values[104]);
    __pyx_v_sdInfo_w_u_colind = ((PyArrayObject *)values[105]);
    __pyx_v_sdInfo_w_v_rowptr = ((PyArrayObject *)values[106]);
    __pyx_v_sdInfo_w_v_colind = ((PyArrayObject *)values[107]);
    __pyx_v_csrRowIndeces_p_p = ((PyArrayObject *)values[108]);
    __pyx_v_csrColumnOffsets_p_p = ((PyArrayObject *)values[109]);
    __pyx_v_csrRowIndeces_p_u = ((PyArrayObject *)values[110]);
    __pyx_v_csrColumnOffsets_p_u = ((PyArrayObject *)values[111]);
    __pyx_v_csrRowIndeces_p_v = ((PyArrayObject *)values[112]);
    __pyx_v_csrColumnOffsets_p_v = ((PyArrayObject *)values[113]);
    __pyx_v_csrRowIndeces_p_w = ((PyArrayObject *)values[114]);
    __pyx_v_csrColumnOffsets_p_w = ((PyArrayObject *)values[115]);
    __pyx_v_csrRowIndeces_u_p = ((PyArrayObject *)values[116]);
    __pyx_v_csrColumnOffsets_u_p = ((PyArrayObject *)values[117]);
    __pyx_v_csrRowIndeces_u_u = ((PyArrayObject *)values[118]);
    __pyx_v_csrColumnOffsets_u_u = ((PyArrayObject *)values[119]);
    __pyx_v_csrRowIndeces_u_v = ((PyArrayObject *)values[120]);
    __pyx_v_csrColumnOffsets_u_v = ((PyArrayObject *)values[121]);
    __pyx_v_csrRowIndeces_u_w = ((PyArrayObject *)values[122]);
    __pyx_v_csrColumnOffsets_u_w = ((PyArrayObject *)values[123]);
    __pyx_v_csrRowIndeces_v_p = ((PyArrayObject *)values[124]);
    __pyx_v_csrColumnOffsets_v_p = ((PyArrayObject *)values[125]);
    __pyx_v_csrRowIndeces_v_u = ((PyArrayObject *)values[126]);
    __pyx_v_csrColumnOffsets_v_u = ((PyArrayObject *)values[127]);
    __pyx_v_csrRowIndeces_v_v = ((PyArrayObject *)values[128]);
    __pyx_v_csrColumnOffsets_v_v = ((PyArrayObject *)values[129]);
    __pyx_v_csrRowIndeces_v_w = ((PyArrayObject *)values[130]);
    __pyx_v_csrColumnOffsets_v_w = ((PyArrayObject *)values[131]);
    __pyx_v_csrRowIndeces_w_p = ((PyArrayObject *)values[132]);
    __pyx_v_csrColumnOffsets_w_p = ((PyArrayObject *)values[133]);
    __pyx_v_csrRowIndeces_w_u = ((PyArrayObject *)values[134]);
    __pyx_v_csrColumnOffsets_w_u = ((PyArrayObject *)values[135]);
    __pyx_v_csrRowIndeces_w_v = ((PyArrayObject *)values[136]);
    __pyx_v_csrColumnOffsets_w_v = ((PyArrayObject *)values[137]);
    __pyx_v_csrRowIndeces_w_w = ((PyArrayObject *)values[138]);
    __pyx_v_csrColumnOffsets_w_w = ((PyArrayObject *)values[139]);
    __pyx_v_globalJacobian = values[140];
    __pyx_v_nExteriorElementBoundaries_global = __Pyx_PyInt_As_int(values[141]); if (unlikely((__pyx_v_nExteriorElementBoundaries_global == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4030, __pyx_L3_error)
    __pyx_v_exteriorElementBoundariesArray = ((PyArrayObject *)values[142]);
    __pyx_v_elementBoundaryElementsArray = ((PyArrayObject *)values[143]);
    __pyx_v_elementBoundaryLocalElementBoundariesArray = ((PyArrayObject *)values[144]);
    __pyx_v_ebqe_vf_ext = ((PyArrayObject *)values[145]);
    __pyx_v_bc_ebqe_vf_ext = ((PyArrayObject *)values[146]);
    __pyx_v_ebqe_phi_ext = ((PyArrayObject *)values[147]);
    __pyx_v_bc_ebqe_phi_ext = ((PyArrayObject *)values[148]);
    __pyx_v_ebqe_normal_phi_ext = ((PyArrayObject *)values[149]);
    __pyx_v_ebqe_kappa_phi_ext = ((PyArrayObject *)values[150]);
    __pyx_v_ebqe_vos_ext = ((PyArrayObject *)values[151]);
    __pyx_v_ebqe_turb_var_0 = ((PyArrayObject *)values[152]);
    __pyx_v_ebqe_turb_var_1 = ((PyArrayObject *)values[153]);
    __pyx_v_isDOFBoundary_p = ((PyArrayObject *)values[154]);
    __pyx_v_isDOFBoundary_u = ((PyArrayObject *)values[155]);
    __pyx_v_isDOFBoundary_v = ((PyArrayObject *)values[156]);
    __pyx_v_isDOFBoundary_w = ((PyArrayObject *)values[157]);
    __pyx_v_isAdvectiveFluxBoundary_p = ((PyArrayObject *)values[158]);
    __pyx_v_isAdvectiveFluxBoundary_u = ((PyArrayObject *)values[159]);
    __pyx_v_isAdvectiveFluxBoundary_v = ((PyArrayObject *)values[160]);
    __pyx_v_isAdvectiveFluxBoundary_w = ((PyArrayObject *)values[161]);
    __pyx_v_isDiffusiveFluxBoundary_u = ((PyArrayObject *)values[162]);
    __pyx_v_isDiffusiveFluxBoundary_v = ((PyArrayObject *)values[163]);
    __pyx_v_isDiffusiveFluxBoundary_w = ((PyArrayObject *)values[164]);
    __pyx_v_ebqe_bc_p_ext = ((PyArrayObject *)values[165]);
    __pyx_v_ebqe_bc_flux_mass_ext = ((PyArrayObject *)values[166]);
    __pyx_v_ebqe_bc_flux_mom_u_adv_ext = ((PyArrayObject *)values[167]);
    __pyx_v_ebqe_bc_flux_mom_v_adv_ext = ((PyArrayObject *)values[168]);
    __pyx_v_ebqe_bc_flux_mom_w_adv_ext = ((PyArrayObject *)values[169]);
    __pyx_v_ebqe_bc_u_ext = ((PyArrayObject *)values[170]);
    __pyx_v_ebqe_bc_flux_u_diff_ext = ((PyArrayObject *)values[171]);
    __pyx_v_ebqe_penalty_ext = ((PyArrayObject *)values[172]);
    __pyx_v_ebqe_bc_v_ext = ((PyArrayObject *)values[173]);
    __pyx_v_ebqe_bc_flux_v_diff_ext = ((PyArrayObject *)values[174]);
    __pyx_v_ebqe_bc_w_ext = ((PyArrayObject *)values[175]);
    __pyx_v_ebqe_bc_flux_w_diff_ext = ((PyArrayObject *)values[176]);
    __pyx_v_csrColumnOffsets_eb_p_p = ((PyArrayObject *)values[177]);
    __pyx_v_csrColumnOffsets_eb_p_u = ((PyArrayObject *)values[178]);
    __pyx_v_csrColumnOffsets_eb_p_v = ((PyArrayObject *)values[179]);
    __pyx_v_csrColumnOffsets_eb_p_w = ((PyArrayObject *)values[180]);
    __pyx_v_csrColumnOffsets_eb_u_p = ((PyArrayObject *)values[181]);
    __pyx_v_csrColumnOffsets_eb_u_u = ((PyArrayObject *)values[182]);
    __pyx_v_csrColumnOffsets_eb_u_v = ((PyArrayObject *)values[183]);
    __pyx_v_csrColumnOffsets_eb_u_w = ((PyArrayObject *)values[184]);
    __pyx_v_csrColumnOffsets_eb_v_p = ((PyArrayObject *)values[185]);
    __pyx_v_csrColumnOffsets_eb_v_u = ((PyArrayObject *)values[186]);
    __pyx_v_csrColumnOffsets_eb_v_v = ((PyArrayObject *)values[187]);
    __pyx_v_csrColumnOffsets_eb_v_w = ((PyArrayObject *)values[188]);
    __pyx_v_csrColumnOffsets_eb_w_p = ((PyArrayObject *)values[189]);
    __pyx_v_csrColumnOffsets_eb_w_u = ((PyArrayObject *)values[190]);
    __pyx_v_csrColumnOffsets_eb_w_v = ((PyArrayObject *)values[191]);
    __pyx_v_csrColumnOffsets_eb_w_w = ((PyArrayObject *)values[192]);
    __pyx_v_elementFlags = ((PyArrayObject *)values[193]);
    __pyx_v_nParticles = __Pyx_PyInt_As_int(values[194]); if (unlikely((__pyx_v_nParticles == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4085, __pyx_L3_error)
    __pyx_v_particle_epsFact = __pyx_PyFloat_AsDouble(values[195]); if (unlikely((__pyx_v_particle_epsFact == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4086, __pyx_L3_error)
    __pyx_v_particle_alpha = __pyx_PyFloat_AsDouble(values[196]); if (unlikely((__pyx_v_particle_alpha == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4087, __pyx_L3_error)
    __pyx_v_particle_beta = __pyx_PyFloat_AsDouble(values[197]); if (unlikely((__pyx_v_particle_beta == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4088, __pyx_L3_error)
    __pyx_v_particle_penalty_constant = __pyx_PyFloat_AsDouble(values[198]); if (unlikely((__pyx_v_particle_penalty_constant == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4089, __pyx_L3_error)
    __pyx_v_particle_signed_distances = ((PyArrayObject *)values[199]);
    __pyx_v_particle_signed_distance_normals = ((PyArrayObject *)values[200]);
    __pyx_v_particle_velocities = ((PyArrayObject *)values[201]);
    __pyx_v_particle_centroids = ((PyArrayObject *)values[202]);
    __pyx_v_particle_nitsche = __pyx_PyFloat_AsDouble(values[203]); if (unlikely((__pyx_v_particle_nitsche == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4094, __pyx_L3_error)
    __pyx_v_KILL_PRESSURE_TERM = __Pyx_PyInt_As_int(values[204]); if (unlikely((__pyx_v_KILL_PRESSURE_TERM == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4095, __pyx_L3_error)
    __pyx_v_MATERIAL_PARAMETERS_AS_FUNCTION = __Pyx_PyInt_As_int(values[205]); if (unlikely((__pyx_v_MATERIAL_PARAMETERS_AS_FUNCTION == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4096, __pyx_L3_error)
    __pyx_v_density_as_function = ((PyArrayObject *)values[206]);
    __pyx_v_dynamic_viscosity_as_function = ((PyArrayObject *)values[207]);
    __pyx_v_ebqe_density_as_function = ((PyArrayObject *)values[208]);
    __pyx_v_ebqe_dynamic_viscosity_as_function = ((PyArrayObject *)values[209]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 210, 210, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3918, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mprans.cRANS3PF.RANS3PF2D.calculateJacobian", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "mesh_trial_ref", 0))) __PYX_ERR(0, 3919, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_grad_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "mesh_grad_trial_ref", 0))) __PYX_ERR(0, 3920, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_dof), __pyx_ptype_5numpy_ndarray, 1, "mesh_dof", 0))) __PYX_ERR(0, 3921, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_velocity_dof), __pyx_ptype_5numpy_ndarray, 1, "mesh_velocity_dof", 0))) __PYX_ERR(0, 3922, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_l2g), __pyx_ptype_5numpy_ndarray, 1, "mesh_l2g", 0))) __PYX_ERR(0, 3925, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dV_ref), __pyx_ptype_5numpy_ndarray, 1, "dV_ref", 0))) __PYX_ERR(0, 3926, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "p_trial_ref", 0))) __PYX_ERR(0, 3927, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_grad_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "p_grad_trial_ref", 0))) __PYX_ERR(0, 3928, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_test_ref), __pyx_ptype_5numpy_ndarray, 1, "p_test_ref", 0))) __PYX_ERR(0, 3929, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_grad_test_ref), __pyx_ptype_5numpy_ndarray, 1, "p_grad_test_ref", 0))) __PYX_ERR(0, 3930, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_p), __pyx_ptype_5numpy_ndarray, 1, "q_p", 0))) __PYX_ERR(0, 3931, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_grad_p), __pyx_ptype_5numpy_ndarray, 1, "q_grad_p", 0))) __PYX_ERR(0, 3932, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_p), __pyx_ptype_5numpy_ndarray, 1, "ebqe_p", 0))) __PYX_ERR(0, 3933, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_grad_p), __pyx_ptype_5numpy_ndarray, 1, "ebqe_grad_p", 0))) __PYX_ERR(0, 3934, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_trial_ref", 0))) __PYX_ERR(0, 3935, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_grad_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_grad_trial_ref", 0))) __PYX_ERR(0, 3936, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_hess_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_hess_trial_ref", 0))) __PYX_ERR(0, 3937, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_test_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_test_ref", 0))) __PYX_ERR(0, 3938, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_grad_test_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_grad_test_ref", 0))) __PYX_ERR(0, 3939, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "mesh_trial_trace_ref", 0))) __PYX_ERR(0, 3940, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_grad_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "mesh_grad_trial_trace_ref", 0))) __PYX_ERR(0, 3941, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dS_ref), __pyx_ptype_5numpy_ndarray, 1, "dS_ref", 0))) __PYX_ERR(0, 3942, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "p_trial_trace_ref", 0))) __PYX_ERR(0, 3943, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_grad_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "p_grad_trial_trace_ref", 0))) __PYX_ERR(0, 3944, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_test_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "p_test_trace_ref", 0))) __PYX_ERR(0, 3945, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_grad_test_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "p_grad_test_trace_ref", 0))) __PYX_ERR(0, 3946, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_trial_trace_ref", 0))) __PYX_ERR(0, 3947, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_grad_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_grad_trial_trace_ref", 0))) __PYX_ERR(0, 3948, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_test_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_test_trace_ref", 0))) __PYX_ERR(0, 3949, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_grad_test_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_grad_test_trace_ref", 0))) __PYX_ERR(0, 3950, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_normal_ref), __pyx_ptype_5numpy_ndarray, 1, "normal_ref", 0))) __PYX_ERR(0, 3951, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_boundaryJac_ref), __pyx_ptype_5numpy_ndarray, 1, "boundaryJac_ref", 0))) __PYX_ERR(0, 3952, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_elementDiameter), __pyx_ptype_5numpy_ndarray, 1, "elementDiameter", 0))) __PYX_ERR(0, 3954, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_nodeDiametersArray), __pyx_ptype_5numpy_ndarray, 1, "nodeDiametersArray", 0))) __PYX_ERR(0, 3955, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_eps_solid), __pyx_ptype_5numpy_ndarray, 1, "eps_solid", 0))) __PYX_ERR(0, 3976, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_phi_solid), __pyx_ptype_5numpy_ndarray, 1, "phi_solid", 0))) __PYX_ERR(0, 3977, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_velocity_solid), __pyx_ptype_5numpy_ndarray, 1, "q_velocity_solid", 0))) __PYX_ERR(0, 3978, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_vos), __pyx_ptype_5numpy_ndarray, 1, "q_vos", 0))) __PYX_ERR(0, 3979, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_dvos_dt), __pyx_ptype_5numpy_ndarray, 1, "q_dvos_dt", 0))) __PYX_ERR(0, 3980, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_dragAlpha), __pyx_ptype_5numpy_ndarray, 1, "q_dragAlpha", 0))) __PYX_ERR(0, 3981, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_dragBeta), __pyx_ptype_5numpy_ndarray, 1, "q_dragBeta", 0))) __PYX_ERR(0, 3982, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_mass_source), __pyx_ptype_5numpy_ndarray, 1, "q_mass_source", 0))) __PYX_ERR(0, 3983, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_turb_var_0), __pyx_ptype_5numpy_ndarray, 1, "q_turb_var_0", 0))) __PYX_ERR(0, 3984, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_turb_var_1), __pyx_ptype_5numpy_ndarray, 1, "q_turb_var_1", 0))) __PYX_ERR(0, 3985, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_turb_var_grad_0), __pyx_ptype_5numpy_ndarray, 1, "q_turb_var_grad_0", 0))) __PYX_ERR(0, 3986, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_l2g), __pyx_ptype_5numpy_ndarray, 1, "p_l2g", 0))) __PYX_ERR(0, 3988, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_l2g), __pyx_ptype_5numpy_ndarray, 1, "vel_l2g", 0))) __PYX_ERR(0, 3989, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_dof), __pyx_ptype_5numpy_ndarray, 1, "p_dof", 0))) __PYX_ERR(0, 3990, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_u_dof), __pyx_ptype_5numpy_ndarray, 1, "u_dof", 0))) __PYX_ERR(0, 3990, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_v_dof), __pyx_ptype_5numpy_ndarray, 1, "v_dof", 0))) __PYX_ERR(0, 3990, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_w_dof), __pyx_ptype_5numpy_ndarray, 1, "w_dof", 0))) __PYX_ERR(0, 3990, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_g), __pyx_ptype_5numpy_ndarray, 1, "g", 0))) __PYX_ERR(0, 3991, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vf), __pyx_ptype_5numpy_ndarray, 1, "vf", 0))) __PYX_ERR(0, 3993, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_phi), __pyx_ptype_5numpy_ndarray, 1, "phi", 0))) __PYX_ERR(0, 3994, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_normal_phi), __pyx_ptype_5numpy_ndarray, 1, "normal_phi", 0))) __PYX_ERR(0, 3995, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_kappa_phi), __pyx_ptype_5numpy_ndarray, 1, "kappa_phi", 0))) __PYX_ERR(0, 3996, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_mom_u_acc_beta_bdf), __pyx_ptype_5numpy_ndarray, 1, "q_mom_u_acc_beta_bdf", 0))) __PYX_ERR(0, 3997, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_mom_v_acc_beta_bdf), __pyx_ptype_5numpy_ndarray, 1, "q_mom_v_acc_beta_bdf", 0))) __PYX_ERR(0, 3997, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_mom_w_acc_beta_bdf), __pyx_ptype_5numpy_ndarray, 1, "q_mom_w_acc_beta_bdf", 0))) __PYX_ERR(0, 3997, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_dV), __pyx_ptype_5numpy_ndarray, 1, "q_dV", 0))) __PYX_ERR(0, 3998, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_dV_last), __pyx_ptype_5numpy_ndarray, 1, "q_dV_last", 0))) __PYX_ERR(0, 3999, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_velocity_sge), __pyx_ptype_5numpy_ndarray, 1, "q_velocity_sge", 0))) __PYX_ERR(0, 4000, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_velocity_star), __pyx_ptype_5numpy_ndarray, 1, "ebqe_velocity_star", 0))) __PYX_ERR(0, 4001, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_cfl), __pyx_ptype_5numpy_ndarray, 1, "q_cfl", 0))) __PYX_ERR(0, 4002, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_numDiff_u_last), __pyx_ptype_5numpy_ndarray, 1, "q_numDiff_u_last", 0))) __PYX_ERR(0, 4003, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_numDiff_v_last), __pyx_ptype_5numpy_ndarray, 1, "q_numDiff_v_last", 0))) __PYX_ERR(0, 4003, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_numDiff_w_last), __pyx_ptype_5numpy_ndarray, 1, "q_numDiff_w_last", 0))) __PYX_ERR(0, 4003, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_u_u_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_u_u_rowptr", 0))) __PYX_ERR(0, 4004, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_u_u_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_u_u_colind", 0))) __PYX_ERR(0, 4004, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_u_v_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_u_v_rowptr", 0))) __PYX_ERR(0, 4005, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_u_v_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_u_v_colind", 0))) __PYX_ERR(0, 4005, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_u_w_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_u_w_rowptr", 0))) __PYX_ERR(0, 4006, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_u_w_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_u_w_colind", 0))) __PYX_ERR(0, 4006, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_v_v_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_v_v_rowptr", 0))) __PYX_ERR(0, 4007, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_v_v_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_v_v_colind", 0))) __PYX_ERR(0, 4007, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_v_u_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_v_u_rowptr", 0))) __PYX_ERR(0, 4008, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_v_u_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_v_u_colind", 0))) __PYX_ERR(0, 4008, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_v_w_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_v_w_rowptr", 0))) __PYX_ERR(0, 4009, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_v_w_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_v_w_colind", 0))) __PYX_ERR(0, 4009, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_w_w_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_w_w_rowptr", 0))) __PYX_ERR(0, 4010, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_w_w_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_w_w_colind", 0))) __PYX_ERR(0, 4010, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_w_u_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_w_u_rowptr", 0))) __PYX_ERR(0, 4011, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_w_u_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_w_u_colind", 0))) __PYX_ERR(0, 4011, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_w_v_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_w_v_rowptr", 0))) __PYX_ERR(0, 4012, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_w_v_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_w_v_colind", 0))) __PYX_ERR(0, 4012, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_p_p), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_p_p", 0))) __PYX_ERR(0, 4013, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_p_p), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_p_p", 0))) __PYX_ERR(0, 4013, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_p_u), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_p_u", 0))) __PYX_ERR(0, 4014, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_p_u), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_p_u", 0))) __PYX_ERR(0, 4014, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_p_v), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_p_v", 0))) __PYX_ERR(0, 4015, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_p_v), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_p_v", 0))) __PYX_ERR(0, 4015, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_p_w), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_p_w", 0))) __PYX_ERR(0, 4016, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_p_w), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_p_w", 0))) __PYX_ERR(0, 4016, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_u_p), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_u_p", 0))) __PYX_ERR(0, 4017, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_u_p), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_u_p", 0))) __PYX_ERR(0, 4017, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_u_u), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_u_u", 0))) __PYX_ERR(0, 4018, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_u_u), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_u_u", 0))) __PYX_ERR(0, 4018, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_u_v), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_u_v", 0))) __PYX_ERR(0, 4019, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_u_v), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_u_v", 0))) __PYX_ERR(0, 4019, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_u_w), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_u_w", 0))) __PYX_ERR(0, 4020, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_u_w), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_u_w", 0))) __PYX_ERR(0, 4020, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_v_p), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_v_p", 0))) __PYX_ERR(0, 4021, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_v_p), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_v_p", 0))) __PYX_ERR(0, 4021, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_v_u), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_v_u", 0))) __PYX_ERR(0, 4022, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_v_u), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_v_u", 0))) __PYX_ERR(0, 4022, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_v_v), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_v_v", 0))) __PYX_ERR(0, 4023, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_v_v), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_v_v", 0))) __PYX_ERR(0, 4023, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_v_w), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_v_w", 0))) __PYX_ERR(0, 4024, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_v_w), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_v_w", 0))) __PYX_ERR(0, 4024, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_w_p), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_w_p", 0))) __PYX_ERR(0, 4025, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_w_p), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_w_p", 0))) __PYX_ERR(0, 4025, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_w_u), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_w_u", 0))) __PYX_ERR(0, 4026, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_w_u), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_w_u", 0))) __PYX_ERR(0, 4026, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_w_v), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_w_v", 0))) __PYX_ERR(0, 4027, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_w_v), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_w_v", 0))) __PYX_ERR(0, 4027, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_w_w), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_w_w", 0))) __PYX_ERR(0, 4028, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_w_w), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_w_w", 0))) __PYX_ERR(0, 4028, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_exteriorElementBoundariesArray), __pyx_ptype_5numpy_ndarray, 1, "exteriorElementBoundariesArray", 0))) __PYX_ERR(0, 4031, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_elementBoundaryElementsArray), __pyx_ptype_5numpy_ndarray, 1, "elementBoundaryElementsArray", 0))) __PYX_ERR(0, 4032, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_elementBoundaryLocalElementBoundariesArray), __pyx_ptype_5numpy_ndarray, 1, "elementBoundaryLocalElementBoundariesArray", 0))) __PYX_ERR(0, 4033, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_vf_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_vf_ext", 0))) __PYX_ERR(0, 4034, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_bc_ebqe_vf_ext), __pyx_ptype_5numpy_ndarray, 1, "bc_ebqe_vf_ext", 0))) __PYX_ERR(0, 4035, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_phi_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_phi_ext", 0))) __PYX_ERR(0, 4036, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_bc_ebqe_phi_ext), __pyx_ptype_5numpy_ndarray, 1, "bc_ebqe_phi_ext", 0))) __PYX_ERR(0, 4037, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_normal_phi_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_normal_phi_ext", 0))) __PYX_ERR(0, 4038, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_kappa_phi_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_kappa_phi_ext", 0))) __PYX_ERR(0, 4039, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_vos_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_vos_ext", 0))) __PYX_ERR(0, 4041, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_turb_var_0), __pyx_ptype_5numpy_ndarray, 1, "ebqe_turb_var_0", 0))) __PYX_ERR(0, 4042, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_turb_var_1), __pyx_ptype_5numpy_ndarray, 1, "ebqe_turb_var_1", 0))) __PYX_ERR(0, 4043, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isDOFBoundary_p), __pyx_ptype_5numpy_ndarray, 1, "isDOFBoundary_p", 0))) __PYX_ERR(0, 4045, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isDOFBoundary_u), __pyx_ptype_5numpy_ndarray, 1, "isDOFBoundary_u", 0))) __PYX_ERR(0, 4046, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isDOFBoundary_v), __pyx_ptype_5numpy_ndarray, 1, "isDOFBoundary_v", 0))) __PYX_ERR(0, 4047, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isDOFBoundary_w), __pyx_ptype_5numpy_ndarray, 1, "isDOFBoundary_w", 0))) __PYX_ERR(0, 4048, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isAdvectiveFluxBoundary_p), __pyx_ptype_5numpy_ndarray, 1, "isAdvectiveFluxBoundary_p", 0))) __PYX_ERR(0, 4049, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isAdvectiveFluxBoundary_u), __pyx_ptype_5numpy_ndarray, 1, "isAdvectiveFluxBoundary_u", 0))) __PYX_ERR(0, 4050, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isAdvectiveFluxBoundary_v), __pyx_ptype_5numpy_ndarray, 1, "isAdvectiveFluxBoundary_v", 0))) __PYX_ERR(0, 4051, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isAdvectiveFluxBoundary_w), __pyx_ptype_5numpy_ndarray, 1, "isAdvectiveFluxBoundary_w", 0))) __PYX_ERR(0, 4052, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isDiffusiveFluxBoundary_u), __pyx_ptype_5numpy_ndarray, 1, "isDiffusiveFluxBoundary_u", 0))) __PYX_ERR(0, 4053, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isDiffusiveFluxBoundary_v), __pyx_ptype_5numpy_ndarray, 1, "isDiffusiveFluxBoundary_v", 0))) __PYX_ERR(0, 4054, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isDiffusiveFluxBoundary_w), __pyx_ptype_5numpy_ndarray, 1, "isDiffusiveFluxBoundary_w", 0))) __PYX_ERR(0, 4055, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_p_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_p_ext", 0))) __PYX_ERR(0, 4056, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_flux_mass_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_flux_mass_ext", 0))) __PYX_ERR(0, 4057, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_flux_mom_u_adv_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_flux_mom_u_adv_ext", 0))) __PYX_ERR(0, 4058, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_flux_mom_v_adv_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_flux_mom_v_adv_ext", 0))) __PYX_ERR(0, 4059, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_flux_mom_w_adv_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_flux_mom_w_adv_ext", 0))) __PYX_ERR(0, 4060, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_u_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_u_ext", 0))) __PYX_ERR(0, 4061, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_flux_u_diff_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_flux_u_diff_ext", 0))) __PYX_ERR(0, 4062, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_penalty_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_penalty_ext", 0))) __PYX_ERR(0, 4063, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_v_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_v_ext", 0))) __PYX_ERR(0, 4064, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_flux_v_diff_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_flux_v_diff_ext", 0))) __PYX_ERR(0, 4065, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_w_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_w_ext", 0))) __PYX_ERR(0, 4066, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_flux_w_diff_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_flux_w_diff_ext", 0))) __PYX_ERR(0, 4067, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_p_p), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_p_p", 0))) __PYX_ERR(0, 4068, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_p_u), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_p_u", 0))) __PYX_ERR(0, 4069, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_p_v), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_p_v", 0))) __PYX_ERR(0, 4070, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_p_w), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_p_w", 0))) __PYX_ERR(0, 4071, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_u_p), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_u_p", 0))) __PYX_ERR(0, 4072, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_u_u), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_u_u", 0))) __PYX_ERR(0, 4073, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_u_v), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_u_v", 0))) __PYX_ERR(0, 4074, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_u_w), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_u_w", 0))) __PYX_ERR(0, 4075, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_v_p), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_v_p", 0))) __PYX_ERR(0, 4076, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_v_u), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_v_u", 0))) __PYX_ERR(0, 4077, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_v_v), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_v_v", 0))) __PYX_ERR(0, 4078, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_v_w), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_v_w", 0))) __PYX_ERR(0, 4079, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_w_p), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_w_p", 0))) __PYX_ERR(0, 4080, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_w_u), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_w_u", 0))) __PYX_ERR(0, 4081, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_w_v), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_w_v", 0))) __PYX_ERR(0, 4082, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_w_w), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_w_w", 0))) __PYX_ERR(0, 4083, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_elementFlags), __pyx_ptype_5numpy_ndarray, 1, "elementFlags", 0))) __PYX_ERR(0, 4084, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particle_signed_distances), __pyx_ptype_5numpy_ndarray, 1, "particle_signed_distances", 0))) __PYX_ERR(0, 4090, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particle_signed_distance_normals), __pyx_ptype_5numpy_ndarray, 1, "particle_signed_distance_normals", 0))) __PYX_ERR(0, 4091, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particle_velocities), __pyx_ptype_5numpy_ndarray, 1, "particle_velocities", 0))) __PYX_ERR(0, 4092, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particle_centroids), __pyx_ptype_5numpy_ndarray, 1, "particle_centroids", 0))) __PYX_ERR(0, 4093, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_density_as_function), __pyx_ptype_5numpy_ndarray, 1, "density_as_function", 0))) __PYX_ERR(0, 4097, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dynamic_viscosity_as_function), __pyx_ptype_5numpy_ndarray, 1, "dynamic_viscosity_as_function", 0))) __PYX_ERR(0, 4098, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_density_as_function), __pyx_ptype_5numpy_ndarray, 1, "ebqe_density_as_function", 0))) __PYX_ERR(0, 4099, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_dynamic_viscosity_as_function), __pyx_ptype_5numpy_ndarray, 1, "ebqe_dynamic_viscosity_as_function", 0))) __PYX_ERR(0, 4100, __pyx_L1_error)
  __pyx_r = __pyx_pf_6mprans_8cRANS3PF_9RANS3PF2D_6calculateJacobian(((struct __pyx_obj_6mprans_8cRANS3PF_RANS3PF2D *)__pyx_v_self), __pyx_v_mesh_trial_ref, __pyx_v_mesh_grad_trial_ref, __pyx_v_mesh_dof, __pyx_v_mesh_velocity_dof, __pyx_v_MOVING_DOMAIN, __pyx_v_PSTAB, __pyx_v_mesh_l2g, __pyx_v_dV_ref, __pyx_v_p_trial_ref, __pyx_v_p_grad_trial_ref, __pyx_v_p_test_ref, __pyx_v_p_grad_test_ref, __pyx_v_q_p, __pyx_v_q_grad_p, __pyx_v_ebqe_p, __pyx_v_ebqe_grad_p, __pyx_v_vel_trial_ref, __pyx_v_vel_grad_trial_ref, __pyx_v_vel_hess_trial_ref, __pyx_v_vel_test_ref, __pyx_v_vel_grad_test_ref, __pyx_v_mesh_trial_trace_ref, __pyx_v_mesh_grad_trial_trace_ref, __pyx_v_dS_ref, __pyx_v_p_trial_trace_ref, __pyx_v_p_grad_trial_trace_ref, __pyx_v_p_test_trace_ref, __pyx_v_p_grad_test_trace_ref, __pyx_v_vel_trial_trace_ref, __pyx_v_vel_grad_trial_trace_ref, __pyx_v_vel_test_trace_ref, __pyx_v_vel_grad_test_trace_ref, __pyx_v_normal_ref, __pyx_v_boundaryJac_ref, __pyx_v_eb_adjoint_sigma, __pyx_v_elementDiameter, __pyx_v_nodeDiametersArray, __pyx_v_hFactor, __pyx_v_nElements_global, __pyx_v_nElements_owned, __pyx_v_useRBLES, __pyx_v_useMetrics, __pyx_v_alphaBDF, __pyx_v_epsFact_rho, __pyx_v_epsFact_mu, __pyx_v_sigma, __pyx_v_rho_0, __pyx_v_nu_0, __pyx_v_rho_1, __pyx_v_nu_1, __pyx_v_smagorinskyConstant, __pyx_v_turbulenceClosureModel, __pyx_v_Ct_sge, __pyx_v_Cd_sge, __pyx_v_C_dg, __pyx_v_C_b, __pyx_v_eps_solid, __pyx_v_phi_solid, __pyx_v_q_velocity_solid, __pyx_v_q_vos, __pyx_v_q_dvos_dt, __pyx_v_q_dragAlpha, __pyx_v_q_dragBeta, __pyx_v_q_mass_source, __pyx_v_q_turb_var_0, __pyx_v_q_turb_var_1, __pyx_v_q_turb_var_grad_0, __pyx_v_p_l2g, __pyx_v_vel_l2g, __pyx_v_p_dof, __pyx_v_u_dof, __pyx_v_v_dof, __pyx_v_w_dof, __pyx_v_g, __pyx_v_useVF, __pyx_v_vf, __pyx_v_phi, __pyx_v_normal_phi, __pyx_v_kappa_phi, __pyx_v_q_mom_u_acc_beta_bdf, __pyx_v_q_mom_v_acc_beta_bdf, __pyx_v_q_mom_w_acc_beta_bdf, __pyx_v_q_dV, __pyx_v_q_dV_last, __pyx_v_q_velocity_sge, __pyx_v_ebqe_velocity_star, __pyx_v_q_cfl, __pyx_v_q_numDiff_u_last, __pyx_v_q_numDiff_v_last, __pyx_v_q_numDiff_w_last, __pyx_v_sdInfo_u_u_rowptr, __pyx_v_sdInfo_u_u_colind, __pyx_v_sdInfo_u_v_rowptr, __pyx_v_sdInfo_u_v_colind, __pyx_v_sdInfo_u_w_rowptr, __pyx_v_sdInfo_u_w_colind, __pyx_v_sdInfo_v_v_rowptr, __pyx_v_sdInfo_v_v_colind, __pyx_v_sdInfo_v_u_rowptr, __pyx_v_sdInfo_v_u_colind, __pyx_v_sdInfo_v_w_rowptr, __pyx_v_sdInfo_v_w_colind, __pyx_v_sdInfo_w_w_rowptr, __pyx_v_sdInfo_w_w_colind, __pyx_v_sdInfo_w_u_rowptr, __pyx_v_sdInfo_w_u_colind, __pyx_v_sdInfo_w_v_rowptr, __pyx_v_sdInfo_w_v_colind, __pyx_v_csrRowIndeces_p_p, __pyx_v_csrColumnOffsets_p_p, __pyx_v_csrRowIndeces_p_u, __pyx_v_csrColumnOffsets_p_u, __pyx_v_csrRowIndeces_p_v, __pyx_v_csrColumnOffsets_p_v, __pyx_v_csrRowIndeces_p_w, __pyx_v_csrColumnOffsets_p_w, __pyx_v_csrRowIndeces_u_p, __pyx_v_csrColumnOffsets_u_p, __pyx_v_csrRowIndeces_u_u, __pyx_v_csrColumnOffsets_u_u, __pyx_v_csrRowIndeces_u_v, __pyx_v_csrColumnOffsets_u_v, __pyx_v_csrRowIndeces_u_w, __pyx_v_csrColumnOffsets_u_w, __pyx_v_csrRowIndeces_v_p, __pyx_v_csrColumnOffsets_v_p, __pyx_v_csrRowIndeces_v_u, __pyx_v_csrColumnOffsets_v_u, __pyx_v_csrRowIndeces_v_v, __pyx_v_csrColumnOffsets_v_v, __pyx_v_csrRowIndeces_v_w, __pyx_v_csrColumnOffsets_v_w, __pyx_v_csrRowIndeces_w_p, __pyx_v_csrColumnOffsets_w_p, __pyx_v_csrRowIndeces_w_u, __pyx_v_csrColumnOffsets_w_u, __pyx_v_csrRowIndeces_w_v, __pyx_v_csrColumnOffsets_w_v, __pyx_v_csrRowIndeces_w_w, __pyx_v_csrColumnOffsets_w_w, __pyx_v_globalJacobian, __pyx_v_nExteriorElementBoundaries_global, __pyx_v_exteriorElementBoundariesArray, __pyx_v_elementBoundaryElementsArray, __pyx_v_elementBoundaryLocalElementBoundariesArray, __pyx_v_ebqe_vf_ext, __pyx_v_bc_ebqe_vf_ext, __pyx_v_ebqe_phi_ext, __pyx_v_bc_ebqe_phi_ext, __pyx_v_ebqe_normal_phi_ext, __pyx_v_ebqe_kappa_phi_ext, __pyx_v_ebqe_vos_ext, __pyx_v_ebqe_turb_var_0, __pyx_v_ebqe_turb_var_1, __pyx_v_isDOFBoundary_p, __pyx_v_isDOFBoundary_u, __pyx_v_isDOFBoundary_v, __pyx_v_isDOFBoundary_w, __pyx_v_isAdvectiveFluxBoundary_p, __pyx_v_isAdvectiveFluxBoundary_u, __pyx_v_isAdvectiveFluxBoundary_v, __pyx_v_isAdvectiveFluxBoundary_w, __pyx_v_isDiffusiveFluxBoundary_u, __pyx_v_isDiffusiveFluxBoundary_v, __pyx_v_isDiffusiveFluxBoundary_w, __pyx_v_ebqe_bc_p_ext, __pyx_v_ebqe_bc_flux_mass_ext, __pyx_v_ebqe_bc_flux_mom_u_adv_ext, __pyx_v_ebqe_bc_flux_mom_v_adv_ext, __pyx_v_ebqe_bc_flux_mom_w_adv_ext, __pyx_v_ebqe_bc_u_ext, __pyx_v_ebqe_bc_flux_u_diff_ext, __pyx_v_ebqe_penalty_ext, __pyx_v_ebqe_bc_v_ext, __pyx_v_ebqe_bc_flux_v_diff_ext, __pyx_v_ebqe_bc_w_ext, __pyx_v_ebqe_bc_flux_w_diff_ext, __pyx_v_csrColumnOffsets_eb_p_p, __pyx_v_csrColumnOffsets_eb_p_u, __pyx_v_csrColumnOffsets_eb_p_v, __pyx_v_csrColumnOffsets_eb_p_w, __pyx_v_csrColumnOffsets_eb_u_p, __pyx_v_csrColumnOffsets_eb_u_u, __pyx_v_csrColumnOffsets_eb_u_v, __pyx_v_csrColumnOffsets_eb_u_w, __pyx_v_csrColumnOffsets_eb_v_p, __pyx_v_csrColumnOffsets_eb_v_u, __pyx_v_csrColumnOffsets_eb_v_v, __pyx_v_csrColumnOffsets_eb_v_w, __pyx_v_csrColumnOffsets_eb_w_p, __pyx_v_csrColumnOffsets_eb_w_u, __pyx_v_csrColumnOffsets_eb_w_v, __pyx_v_csrColumnOffsets_eb_w_w, __pyx_v_elementFlags, __pyx_v_nParticles, __pyx_v_particle_epsFact, __pyx_v_particle_alpha, __pyx_v_particle_beta, __pyx_v_particle_penalty_constant, __pyx_v_particle_signed_distances, __pyx_v_particle_signed_distance_normals, __pyx_v_particle_velocities, __pyx_v_particle_centroids, __pyx_v_particle_nitsche, __pyx_v_KILL_PRESSURE_TERM, __pyx_v_MATERIAL_PARAMETERS_AS_FUNCTION, __pyx_v_density_as_function, __pyx_v_dynamic_viscosity_as_function, __pyx_v_ebqe_density_as_function, __pyx_v_ebqe_dynamic_viscosity_as_function);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6mprans_8cRANS3PF_9RANS3PF2D_6calculateJacobian(struct __pyx_obj_6mprans_8cRANS3PF_RANS3PF2D *__pyx_v_self, PyArrayObject *__pyx_v_mesh_trial_ref, PyArrayObject *__pyx_v_mesh_grad_trial_ref, PyArrayObject *__pyx_v_mesh_dof, PyArrayObject *__pyx_v_mesh_velocity_dof, double __pyx_v_MOVING_DOMAIN, double __pyx_v_PSTAB, PyArrayObject *__pyx_v_mesh_l2g, PyArrayObject *__pyx_v_dV_ref, PyArrayObject *__pyx_v_p_trial_ref, PyArrayObject *__pyx_v_p_grad_trial_ref, PyArrayObject *__pyx_v_p_test_ref, PyArrayObject *__pyx_v_p_grad_test_ref, PyArrayObject *__pyx_v_q_p, PyArrayObject *__pyx_v_q_grad_p, PyArrayObject *__pyx_v_ebqe_p, PyArrayObject *__pyx_v_ebqe_grad_p, PyArrayObject *__pyx_v_vel_trial_ref, PyArrayObject *__pyx_v_vel_grad_trial_ref, PyArrayObject *__pyx_v_vel_hess_trial_ref, PyArrayObject *__pyx_v_vel_test_ref, PyArrayObject *__pyx_v_vel_grad_test_ref, PyArrayObject *__pyx_v_mesh_trial_trace_ref, PyArrayObject *__pyx_v_mesh_grad_trial_trace_ref, PyArrayObject *__pyx_v_dS_ref, PyArrayObject *__pyx_v_p_trial_trace_ref, PyArrayObject *__pyx_v_p_grad_trial_trace_ref, PyArrayObject *__pyx_v_p_test_trace_ref, PyArrayObject *__pyx_v_p_grad_test_trace_ref, PyArrayObject *__pyx_v_vel_trial_trace_ref, PyArrayObject *__pyx_v_vel_grad_trial_trace_ref, PyArrayObject *__pyx_v_vel_test_trace_ref, PyArrayObject *__pyx_v_vel_grad_test_trace_ref, PyArrayObject *__pyx_v_normal_ref, PyArrayObject *__pyx_v_boundaryJac_ref, double __pyx_v_eb_adjoint_sigma, PyArrayObject *__pyx_v_elementDiameter, PyArrayObject *__pyx_v_nodeDiametersArray, double __pyx_v_hFactor, int __pyx_v_nElements_global, int __pyx_v_nElements_owned, double __pyx_v_useRBLES, double __pyx_v_useMetrics, double __pyx_v_alphaBDF, double __pyx_v_epsFact_rho, double __pyx_v_epsFact_mu, double __pyx_v_sigma, double __pyx_v_rho_0, double __pyx_v_nu_0, double __pyx_v_rho_1, double __pyx_v_nu_1, double __pyx_v_smagorinskyConstant, int __pyx_v_turbulenceClosureModel, double __pyx_v_Ct_sge, double __pyx_v_Cd_sge, double __pyx_v_C_dg, double __pyx_v_C_b, PyArrayObject *__pyx_v_eps_solid, PyArrayObject *__pyx_v_phi_solid, PyArrayObject *__pyx_v_q_velocity_solid, PyArrayObject *__pyx_v_q_vos, PyArrayObject *__pyx_v_q_dvos_dt, PyArrayObject *__pyx_v_q_dragAlpha, PyArrayObject *__pyx_v_q_dragBeta, PyArrayObject *__pyx_v_q_mass_source, PyArrayObject *__pyx_v_q_turb_var_0, PyArrayObject *__pyx_v_q_turb_var_1, PyArrayObject *__pyx_v_q_turb_var_grad_0, PyArrayObject *__pyx_v_p_l2g, PyArrayObject *__pyx_v_vel_l2g, PyArrayObject *__pyx_v_p_dof, PyArrayObject *__pyx_v_u_dof, PyArrayObject *__pyx_v_v_dof, PyArrayObject *__pyx_v_w_dof, PyArrayObject *__pyx_v_g, double __pyx_v_useVF, PyArrayObject *__pyx_v_vf, PyArrayObject *__pyx_v_phi, PyArrayObject *__pyx_v_normal_phi, PyArrayObject *__pyx_v_kappa_phi, PyArrayObject *__pyx_v_q_mom_u_acc_beta_bdf, PyArrayObject *__pyx_v_q_mom_v_acc_beta_bdf, PyArrayObject *__pyx_v_q_mom_w_acc_beta_bdf, PyArrayObject *__pyx_v_q_dV, PyArrayObject *__pyx_v_q_dV_last, PyArrayObject *__pyx_v_q_velocity_sge, PyArrayObject *__pyx_v_ebqe_velocity_star, PyArrayObject *__pyx_v_q_cfl, PyArrayObject *__pyx_v_q_numDiff_u_last, PyArrayObject *__pyx_v_q_numDiff_v_last, PyArrayObject *__pyx_v_q_numDiff_w_last, PyArrayObject *__pyx_v_sdInfo_u_u_rowptr, PyArrayObject *__pyx_v_sdInfo_u_u_colind, PyArrayObject *__pyx_v_sdInfo_u_v_rowptr, PyArrayObject *__pyx_v_sdInfo_u_v_colind, PyArrayObject *__pyx_v_sdInfo_u_w_rowptr, PyArrayObject *__pyx_v_sdInfo_u_w_colind, PyArrayObject *__pyx_v_sdInfo_v_v_rowptr, PyArrayObject *__pyx_v_sdInfo_v_v_colind, PyArrayObject *__pyx_v_sdInfo_v_u_rowptr, PyArrayObject *__pyx_v_sdInfo_v_u_colind, PyArrayObject *__pyx_v_sdInfo_v_w_rowptr, PyArrayObject *__pyx_v_sdInfo_v_w_colind, PyArrayObject *__pyx_v_sdInfo_w_w_rowptr, PyArrayObject *__pyx_v_sdInfo_w_w_colind, PyArrayObject *__pyx_v_sdInfo_w_u_rowptr, PyArrayObject *__pyx_v_sdInfo_w_u_colind, PyArrayObject *__pyx_v_sdInfo_w_v_rowptr, PyArrayObject *__pyx_v_sdInfo_w_v_colind, PyArrayObject *__pyx_v_csrRowIndeces_p_p, PyArrayObject *__pyx_v_csrColumnOffsets_p_p, PyArrayObject *__pyx_v_csrRowIndeces_p_u, PyArrayObject *__pyx_v_csrColumnOffsets_p_u, PyArrayObject *__pyx_v_csrRowIndeces_p_v, PyArrayObject *__pyx_v_csrColumnOffsets_p_v, PyArrayObject *__pyx_v_csrRowIndeces_p_w, PyArrayObject *__pyx_v_csrColumnOffsets_p_w, PyArrayObject *__pyx_v_csrRowIndeces_u_p, PyArrayObject *__pyx_v_csrColumnOffsets_u_p, PyArrayObject *__pyx_v_csrRowIndeces_u_u, PyArrayObject *__pyx_v_csrColumnOffsets_u_u, PyArrayObject *__pyx_v_csrRowIndeces_u_v, PyArrayObject *__pyx_v_csrColumnOffsets_u_v, PyArrayObject *__pyx_v_csrRowIndeces_u_w, PyArrayObject *__pyx_v_csrColumnOffsets_u_w, PyArrayObject *__pyx_v_csrRowIndeces_v_p, PyArrayObject *__pyx_v_csrColumnOffsets_v_p, PyArrayObject *__pyx_v_csrRowIndeces_v_u, PyArrayObject *__pyx_v_csrColumnOffsets_v_u, PyArrayObject *__pyx_v_csrRowIndeces_v_v, PyArrayObject *__pyx_v_csrColumnOffsets_v_v, PyArrayObject *__pyx_v_csrRowIndeces_v_w, PyArrayObject *__pyx_v_csrColumnOffsets_v_w, PyArrayObject *__pyx_v_csrRowIndeces_w_p, PyArrayObject *__pyx_v_csrColumnOffsets_w_p, PyArrayObject *__pyx_v_csrRowIndeces_w_u, PyArrayObject *__pyx_v_csrColumnOffsets_w_u, PyArrayObject *__pyx_v_csrRowIndeces_w_v, PyArrayObject *__pyx_v_csrColumnOffsets_w_v, PyArrayObject *__pyx_v_csrRowIndeces_w_w, PyArrayObject *__pyx_v_csrColumnOffsets_w_w, PyObject *__pyx_v_globalJacobian, int __pyx_v_nExteriorElementBoundaries_global, PyArrayObject *__pyx_v_exteriorElementBoundariesArray, PyArrayObject *__pyx_v_elementBoundaryElementsArray, PyArrayObject *__pyx_v_elementBoundaryLocalElementBoundariesArray, PyArrayObject *__pyx_v_ebqe_vf_ext, PyArrayObject *__pyx_v_bc_ebqe_vf_ext, PyArrayObject *__pyx_v_ebqe_phi_ext, PyArrayObject *__pyx_v_bc_ebqe_phi_ext, PyArrayObject *__pyx_v_ebqe_normal_phi_ext, PyArrayObject *__pyx_v_ebqe_kappa_phi_ext, PyArrayObject *__pyx_v_ebqe_vos_ext, PyArrayObject *__pyx_v_ebqe_turb_var_0, PyArrayObject *__pyx_v_ebqe_turb_var_1, PyArrayObject *__pyx_v_isDOFBoundary_p, PyArrayObject *__pyx_v_isDOFBoundary_u, PyArrayObject *__pyx_v_isDOFBoundary_v, PyArrayObject *__pyx_v_isDOFBoundary_w, PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_p, PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_u, PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_v, PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_w, PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_u, PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_v, PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_w, PyArrayObject *__pyx_v_ebqe_bc_p_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_mass_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_mom_u_adv_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_mom_v_adv_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_mom_w_adv_ext, PyArrayObject *__pyx_v_ebqe_bc_u_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_u_diff_ext, PyArrayObject *__pyx_v_ebqe_penalty_ext, PyArrayObject *__pyx_v_ebqe_bc_v_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_v_diff_ext, PyArrayObject *__pyx_v_ebqe_bc_w_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_w_diff_ext, PyArrayObject *__pyx_v_csrColumnOffsets_eb_p_p, PyArrayObject *__pyx_v_csrColumnOffsets_eb_p_u, PyArrayObject *__pyx_v_csrColumnOffsets_eb_p_v, PyArrayObject *__pyx_v_csrColumnOffsets_eb_p_w, PyArrayObject *__pyx_v_csrColumnOffsets_eb_u_p, PyArrayObject *__pyx_v_csrColumnOffsets_eb_u_u, PyArrayObject *__pyx_v_csrColumnOffsets_eb_u_v, PyArrayObject *__pyx_v_csrColumnOffsets_eb_u_w, PyArrayObject *__pyx_v_csrColumnOffsets_eb_v_p, PyArrayObject *__pyx_v_csrColumnOffsets_eb_v_u, PyArrayObject *__pyx_v_csrColumnOffsets_eb_v_v, PyArrayObject *__pyx_v_csrColumnOffsets_eb_v_w, PyArrayObject *__pyx_v_csrColumnOffsets_eb_w_p, PyArrayObject *__pyx_v_csrColumnOffsets_eb_w_u, PyArrayObject *__pyx_v_csrColumnOffsets_eb_w_v, PyArrayObject *__pyx_v_csrColumnOffsets_eb_w_w, PyArrayObject *__pyx_v_elementFlags, int __pyx_v_nParticles, double __pyx_v_particle_epsFact, double __pyx_v_particle_alpha, double __pyx_v_particle_beta, double __pyx_v_particle_penalty_constant, PyArrayObject *__pyx_v_particle_signed_distances, PyArrayObject *__pyx_v_particle_signed_distance_normals, PyArrayObject *__pyx_v_particle_velocities, PyArrayObject *__pyx_v_particle_centroids, double __pyx_v_particle_nitsche, int __pyx_v_KILL_PRESSURE_TERM, int __pyx_v_MATERIAL_PARAMETERS_AS_FUNCTION, PyArrayObject *__pyx_v_density_as_function, PyArrayObject *__pyx_v_dynamic_viscosity_as_function, PyArrayObject *__pyx_v_ebqe_density_as_function, PyArrayObject *__pyx_v_ebqe_dynamic_viscosity_as_function) {
  CYTHON_UNUSED PyArrayObject *__pyx_v_rowptr = 0;
  CYTHON_UNUSED PyArrayObject *__pyx_v_colind = 0;
  PyArrayObject *__pyx_v_globalJacobian_a = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  __Pyx_RefNannySetupContext("calculateJacobian", 0);

  /* "mprans/cRANS3PF.pyx":4102
 *                           numpy.ndarray ebqe_dynamic_viscosity_as_function):
 *         cdef numpy.ndarray rowptr, colind, globalJacobian_a
 *         (rowptr, colind, globalJacobian_a) = globalJacobian.getCSRrepresentation()             # <<<<<<<<<<<<<<
 *         self.thisptr.calculateJacobian(< double *> mesh_trial_ref.data,
 *                                        < double * > mesh_grad_trial_ref.data,
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_globalJacobian, __pyx_n_s_getCSRrepresentation); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4102, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4102, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    #if !CYTHON_COMPILING_IN_PYPY
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 3)) {
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 4102, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 2); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4102, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4102, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4102, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_5 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4102, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = Py_TYPE(__pyx_t_5)->tp_iternext;
    index = 0; __pyx_t_2 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_3 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    index = 2; __pyx_t_4 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_4)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_4);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_5), 3) < 0) __PYX_ERR(0, 4102, __pyx_L1_error)
    __pyx_t_6 = NULL;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 4102, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 4102, __pyx_L1_error)
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 4102, __pyx_L1_error)
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 4102, __pyx_L1_error)
  __pyx_v_rowptr = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_v_colind = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_v_globalJacobian_a = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "mprans/cRANS3PF.pyx":4103
 *         cdef numpy.ndarray rowptr, colind, globalJacobian_a
 *         (rowptr, colind, globalJacobian_a) = globalJacobian.getCSRrepresentation()
 *         self.thisptr.calculateJacobian(< double *> mesh_trial_ref.data,             # <<<<<<<<<<<<<<
 *                                        < double * > mesh_grad_trial_ref.data,
 *                                        < double * > mesh_dof.data,
 */
  __pyx_v_self->thisptr->calculateJacobian(((double *)__pyx_v_mesh_trial_ref->data), ((double *)__pyx_v_mesh_grad_trial_ref->data), ((double *)__pyx_v_mesh_dof->data), ((double *)__pyx_v_mesh_velocity_dof->data), __pyx_v_MOVING_DOMAIN, __pyx_v_PSTAB, ((int *)__pyx_v_mesh_l2g->data), ((double *)__pyx_v_dV_ref->data), ((double *)__pyx_v_p_trial_ref->data), ((double *)__pyx_v_p_grad_trial_ref->data), ((double *)__pyx_v_p_test_ref->data), ((double *)__pyx_v_p_grad_test_ref->data), ((double *)__pyx_v_q_p->data), ((double *)__pyx_v_q_grad_p->data), ((double *)__pyx_v_ebqe_p->data), ((double *)__pyx_v_ebqe_grad_p->data), ((double *)__pyx_v_vel_trial_ref->data), ((double *)__pyx_v_vel_grad_trial_ref->data), ((double *)__pyx_v_vel_hess_trial_ref->data), ((double *)__pyx_v_vel_test_ref->data), ((double *)__pyx_v_vel_grad_test_ref->data), ((double *)__pyx_v_mesh_trial_trace_ref->data), ((double *)__pyx_v_mesh_grad_trial_trace_ref->data), ((double *)__pyx_v_dS_ref->data), ((double *)__pyx_v_p_trial_trace_ref->data), ((double *)__pyx_v_p_grad_trial_trace_ref->data), ((double *)__pyx_v_p_test_trace_ref->data), ((double *)__pyx_v_p_grad_test_trace_ref->data), ((double *)__pyx_v_vel_trial_trace_ref->data), ((double *)__pyx_v_vel_grad_trial_trace_ref->data), ((double *)__pyx_v_vel_test_trace_ref->data), ((double *)__pyx_v_vel_grad_test_trace_ref->data), ((double *)__pyx_v_normal_ref->data), ((double *)__pyx_v_boundaryJac_ref->data), __pyx_v_eb_adjoint_sigma, ((double *)__pyx_v_elementDiameter->data), ((double *)__pyx_v_nodeDiametersArray->data), __pyx_v_hFactor, __pyx_v_nElements_global, __pyx_v_nElements_owned, __pyx_v_useRBLES, __pyx_v_useMetrics, __pyx_v_alphaBDF, __pyx_v_epsFact_rho, __pyx_v_epsFact_mu, __pyx_v_sigma, __pyx_v_rho_0, __pyx_v_nu_0, __pyx_v_rho_1, __pyx_v_nu_1, __pyx_v_smagorinskyConstant, __pyx_v_turbulenceClosureModel, __pyx_v_Ct_sge, __pyx_v_Cd_sge, __pyx_v_C_dg, __pyx_v_C_b, ((double *)__pyx_v_eps_solid->data), ((double *)__pyx_v_phi_solid->data), ((double *)__pyx_v_q_velocity_solid->data), ((double *)__pyx_v_q_vos->data), ((double *)__pyx_v_q_dvos_dt->data), ((double *)__pyx_v_q_dragAlpha->data), ((double *)__pyx_v_q_dragBeta->data), ((double *)__pyx_v_q_mass_source->data), ((double *)__pyx_v_q_turb_var_0->data), ((double *)__pyx_v_q_turb_var_1->data), ((double *)__pyx_v_q_turb_var_grad_0->data), ((int *)__pyx_v_p_l2g->data), ((int *)__pyx_v_vel_l2g->data), ((double *)__pyx_v_p_dof->data), ((double *)__pyx_v_u_dof->data), ((double *)__pyx_v_v_dof->data), ((double *)__pyx_v_w_dof->data), ((double *)__pyx_v_g->data), __pyx_v_useVF, ((double *)__pyx_v_vf->data), ((double *)__pyx_v_phi->data), ((double *)__pyx_v_normal_phi->data), ((double *)__pyx_v_kappa_phi->data), ((double *)__pyx_v_q_mom_u_acc_beta_bdf->data), ((double *)__pyx_v_q_mom_v_acc_beta_bdf->data), ((double *)__pyx_v_q_mom_w_acc_beta_bdf->data), ((double *)__pyx_v_q_dV->data), ((double *)__pyx_v_q_dV_last->data), ((double *)__pyx_v_q_velocity_sge->data), ((double *)__pyx_v_ebqe_velocity_star->data), ((double *)__pyx_v_q_cfl->data), ((double *)__pyx_v_q_numDiff_u_last->data), ((double *)__pyx_v_q_numDiff_v_last->data), ((double *)__pyx_v_q_numDiff_w_last->data), ((int *)__pyx_v_sdInfo_u_u_rowptr->data), ((int *)__pyx_v_sdInfo_u_u_colind->data), ((int *)__pyx_v_sdInfo_u_v_rowptr->data), ((int *)__pyx_v_sdInfo_u_v_colind->data), ((int *)__pyx_v_sdInfo_u_w_rowptr->data), ((int *)__pyx_v_sdInfo_u_w_colind->data), ((int *)__pyx_v_sdInfo_v_v_rowptr->data), ((int *)__pyx_v_sdInfo_v_v_colind->data), ((int *)__pyx_v_sdInfo_v_u_rowptr->data), ((int *)__pyx_v_sdInfo_v_u_colind->data), ((int *)__pyx_v_sdInfo_v_w_rowptr->data), ((int *)__pyx_v_sdInfo_v_w_colind->data), ((int *)__pyx_v_sdInfo_w_w_rowptr->data), ((int *)__pyx_v_sdInfo_w_w_colind->data), ((int *)__pyx_v_sdInfo_w_u_rowptr->data), ((int *)__pyx_v_sdInfo_w_u_colind->data), ((int *)__pyx_v_sdInfo_w_v_rowptr->data), ((int *)__pyx_v_sdInfo_w_v_colind->data), ((int *)__pyx_v_csrRowIndeces_p_p->data), ((int *)__pyx_v_csrColumnOffsets_p_p->data), ((int *)__pyx_v_csrRowIndeces_p_u->data), ((int *)__pyx_v_csrColumnOffsets_p_u->data), ((int *)__pyx_v_csrRowIndeces_p_v->data), ((int *)__pyx_v_csrColumnOffsets_p_v->data), ((int *)__pyx_v_csrRowIndeces_p_w->data), ((int *)__pyx_v_csrColumnOffsets_p_w->data), ((int *)__pyx_v_csrRowIndeces_u_p->data), ((int *)__pyx_v_csrColumnOffsets_u_p->data), ((int *)__pyx_v_csrRowIndeces_u_u->data), ((int *)__pyx_v_csrColumnOffsets_u_u->data), ((int *)__pyx_v_csrRowIndeces_u_v->data), ((int *)__pyx_v_csrColumnOffsets_u_v->data), ((int *)__pyx_v_csrRowIndeces_u_w->data), ((int *)__pyx_v_csrColumnOffsets_u_w->data), ((int *)__pyx_v_csrRowIndeces_v_p->data), ((int *)__pyx_v_csrColumnOffsets_v_p->data), ((int *)__pyx_v_csrRowIndeces_v_u->data), ((int *)__pyx_v_csrColumnOffsets_v_u->data), ((int *)__pyx_v_csrRowIndeces_v_v->data), ((int *)__pyx_v_csrColumnOffsets_v_v->data), ((int *)__pyx_v_csrRowIndeces_v_w->data), ((int *)__pyx_v_csrColumnOffsets_v_w->data), ((int *)__pyx_v_csrRowIndeces_w_p->data), ((int *)__pyx_v_csrColumnOffsets_w_p->data), ((int *)__pyx_v_csrRowIndeces_w_u->data), ((int *)__pyx_v_csrColumnOffsets_w_u->data), ((int *)__pyx_v_csrRowIndeces_w_v->data), ((int *)__pyx_v_csrColumnOffsets_w_v->data), ((int *)__pyx_v_csrRowIndeces_w_w->data), ((int *)__pyx_v_csrColumnOffsets_w_w->data), ((double *)__pyx_v_globalJacobian_a->data), __pyx_v_nExteriorElementBoundaries_global, ((int *)__pyx_v_exteriorElementBoundariesArray->data), ((int *)__pyx_v_elementBoundaryElementsArray->data), ((int *)__pyx_v_elementBoundaryLocalElementBoundariesArray->data), ((double *)__pyx_v_ebqe_vf_ext->data), ((double *)__pyx_v_bc_ebqe_vf_ext->data), ((double *)__pyx_v_ebqe_phi_ext->data), ((double *)__pyx_v_bc_ebqe_phi_ext->data), ((double *)__pyx_v_ebqe_normal_phi_ext->data), ((double *)__pyx_v_ebqe_kappa_phi_ext->data), ((double *)__pyx_v_ebqe_vos_ext->data), ((double *)__pyx_v_ebqe_turb_var_0->data), ((double *)__pyx_v_ebqe_turb_var_1->data), ((int *)__pyx_v_isDOFBoundary_p->data), ((int *)__pyx_v_isDOFBoundary_u->data), ((int *)__pyx_v_isDOFBoundary_v->data), ((int *)__pyx_v_isDOFBoundary_w->data), ((int *)__pyx_v_isAdvectiveFluxBoundary_p->data), ((int *)__pyx_v_isAdvectiveFluxBoundary_u->data), ((int *)__pyx_v_isAdvectiveFluxBoundary_v->data), ((int *)__pyx_v_isAdvectiveFluxBoundary_w->data), ((int *)__pyx_v_isDiffusiveFluxBoundary_u->data), ((int *)__pyx_v_isDiffusiveFluxBoundary_v->data), ((int *)__pyx_v_isDiffusiveFluxBoundary_w->data), ((double *)__pyx_v_ebqe_bc_p_ext->data), ((double *)__pyx_v_ebqe_bc_flux_mass_ext->data), ((double *)__pyx_v_ebqe_bc_flux_mom_u_adv_ext->data), ((double *)__pyx_v_ebqe_bc_flux_mom_v_adv_ext->data), ((double *)__pyx_v_ebqe_bc_flux_mom_w_adv_ext->data), ((double *)__pyx_v_ebqe_bc_u_ext->data), ((double *)__pyx_v_ebqe_bc_flux_u_diff_ext->data), ((double *)__pyx_v_ebqe_penalty_ext->data), ((double *)__pyx_v_ebqe_bc_v_ext->data), ((double *)__pyx_v_ebqe_bc_flux_v_diff_ext->data), ((double *)__pyx_v_ebqe_bc_w_ext->data), ((double *)__pyx_v_ebqe_bc_flux_w_diff_ext->data), ((int *)__pyx_v_csrColumnOffsets_eb_p_p->data), ((int *)__pyx_v_csrColumnOffsets_eb_p_u->data), ((int *)__pyx_v_csrColumnOffsets_eb_p_v->data), ((int *)__pyx_v_csrColumnOffsets_eb_p_w->data), ((int *)__pyx_v_csrColumnOffsets_eb_u_p->data), ((int *)__pyx_v_csrColumnOffsets_eb_u_u->data), ((int *)__pyx_v_csrColumnOffsets_eb_u_v->data), ((int *)__pyx_v_csrColumnOffsets_eb_u_w->data), ((int *)__pyx_v_csrColumnOffsets_eb_v_p->data), ((int *)__pyx_v_csrColumnOffsets_eb_v_u->data), ((int *)__pyx_v_csrColumnOffsets_eb_v_v->data), ((int *)__pyx_v_csrColumnOffsets_eb_v_w->data), ((int *)__pyx_v_csrColumnOffsets_eb_w_p->data), ((int *)__pyx_v_csrColumnOffsets_eb_w_u->data), ((int *)__pyx_v_csrColumnOffsets_eb_w_v->data), ((int *)__pyx_v_csrColumnOffsets_eb_w_w->data), ((int *)__pyx_v_elementFlags->data), __pyx_v_nParticles, __pyx_v_particle_epsFact, __pyx_v_particle_alpha, __pyx_v_particle_beta, __pyx_v_particle_penalty_constant, ((double *)__pyx_v_particle_signed_distances->data), ((double *)__pyx_v_particle_signed_distance_normals->data), ((double *)__pyx_v_particle_velocities->data), ((double *)__pyx_v_particle_centroids->data), __pyx_v_particle_nitsche, __pyx_v_KILL_PRESSURE_TERM, __pyx_v_MATERIAL_PARAMETERS_AS_FUNCTION, ((double *)__pyx_v_density_as_function->data), ((double *)__pyx_v_dynamic_viscosity_as_function->data), ((double *)__pyx_v_ebqe_density_as_function->data), ((double *)__pyx_v_ebqe_dynamic_viscosity_as_function->data));

  /* "mprans/cRANS3PF.pyx":3918
 *                                        < double * > ebqe_dynamic_viscosity_as_function.data,
 *                                        order_polynomial)
 *     def calculateJacobian(self,             # <<<<<<<<<<<<<<
 *                           numpy.ndarray mesh_trial_ref,
 *                           numpy.ndarray mesh_grad_trial_ref,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("mprans.cRANS3PF.RANS3PF2D.calculateJacobian", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_rowptr);
  __Pyx_XDECREF((PyObject *)__pyx_v_colind);
  __Pyx_XDECREF((PyObject *)__pyx_v_globalJacobian_a);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mprans/cRANS3PF.pyx":4285
 *                                        < double * > ebqe_density_as_function.data,
 *                                        < double * > ebqe_dynamic_viscosity_as_function.data)
 *     def calculateResidual_entropy_viscosity(self,             # <<<<<<<<<<<<<<
 *                                             numpy.ndarray mesh_trial_ref,
 *                                             numpy.ndarray mesh_grad_trial_ref,
 */

/* Python wrapper */
static PyObject *__pyx_pw_6mprans_8cRANS3PF_9RANS3PF2D_9calculateResidual_entropy_viscosity(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6mprans_8cRANS3PF_9RANS3PF2D_9calculateResidual_entropy_viscosity(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_mesh_trial_ref = 0;
  PyArrayObject *__pyx_v_mesh_grad_trial_ref = 0;
  PyArrayObject *__pyx_v_mesh_dof = 0;
  PyArrayObject *__pyx_v_mesh_velocity_dof = 0;
  double __pyx_v_MOVING_DOMAIN;
  double __pyx_v_PSTAB;
  PyArrayObject *__pyx_v_mesh_l2g = 0;
  PyArrayObject *__pyx_v_dV_ref = 0;
  PyArrayObject *__pyx_v_p_trial_ref = 0;
  PyArrayObject *__pyx_v_p_grad_trial_ref = 0;
  PyArrayObject *__pyx_v_p_test_ref = 0;
  PyArrayObject *__pyx_v_p_grad_test_ref = 0;
  PyArrayObject *__pyx_v_q_p = 0;
  PyArrayObject *__pyx_v_q_grad_p = 0;
  PyArrayObject *__pyx_v_ebqe_p = 0;
  PyArrayObject *__pyx_v_ebqe_grad_p = 0;
  PyArrayObject *__pyx_v_vel_trial_ref = 0;
  PyArrayObject *__pyx_v_vel_grad_trial_ref = 0;
  PyArrayObject *__pyx_v_vel_hess_trial_ref = 0;
  PyArrayObject *__pyx_v_vel_test_ref = 0;
  PyArrayObject *__pyx_v_vel_grad_test_ref = 0;
  PyArrayObject *__pyx_v_mesh_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_mesh_grad_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_dS_ref = 0;
  PyArrayObject *__pyx_v_p_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_p_grad_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_p_test_trace_ref = 0;
  PyArrayObject *__pyx_v_p_grad_test_trace_ref = 0;
  PyArrayObject *__pyx_v_vel_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_vel_grad_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_vel_test_trace_ref = 0;
  PyArrayObject *__pyx_v_vel_grad_test_trace_ref = 0;
  PyArrayObject *__pyx_v_normal_ref = 0;
  PyArrayObject *__pyx_v_boundaryJac_ref = 0;
  double __pyx_v_eb_adjoint_sigma;
  PyArrayObject *__pyx_v_elementDiameter = 0;
  PyArrayObject *__pyx_v_nodeDiametersArray = 0;
  double __pyx_v_hFactor;
  int __pyx_v_nElements_global;
  int __pyx_v_nElements_owned;
  int __pyx_v_nElementBoundaries_owned;
  double __pyx_v_useRBLES;
  double __pyx_v_useMetrics;
  double __pyx_v_alphaBDF;
  double __pyx_v_epsFact_rho;
  double __pyx_v_epsFact_mu;
  double __pyx_v_sigma;
  double __pyx_v_rho_0;
  double __pyx_v_nu_0;
  double __pyx_v_rho_1;
  double __pyx_v_nu_1;
  double __pyx_v_smagorinskyConstant;
  int __pyx_v_turbulenceClosureModel;
  double __pyx_v_Ct_sge;
  double __pyx_v_Cd_sge;
  double __pyx_v_C_dc;
  double __pyx_v_C_b;
  PyArrayObject *__pyx_v_eps_solid = 0;
  PyArrayObject *__pyx_v_phi_solid = 0;
  PyArrayObject *__pyx_v_q_velocity_solid = 0;
  PyArrayObject *__pyx_v_q_vos = 0;
  PyArrayObject *__pyx_v_q_dvos_dt = 0;
  PyArrayObject *__pyx_v_q_dragAlpha = 0;
  PyArrayObject *__pyx_v_q_dragBeta = 0;
  PyArrayObject *__pyx_v_q_mass_source = 0;
  PyArrayObject *__pyx_v_q_turb_var_0 = 0;
  PyArrayObject *__pyx_v_q_turb_var_1 = 0;
  PyArrayObject *__pyx_v_q_turb_var_grad_0 = 0;
  PyArrayObject *__pyx_v_q_eddy_viscosity = 0;
  PyArrayObject *__pyx_v_p_l2g = 0;
  PyArrayObject *__pyx_v_vel_l2g = 0;
  PyArrayObject *__pyx_v_p_dof = 0;
  PyArrayObject *__pyx_v_u_dof = 0;
  PyArrayObject *__pyx_v_v_dof = 0;
  PyArrayObject *__pyx_v_w_dof = 0;
  PyArrayObject *__pyx_v_u_dof_old = 0;
  PyArrayObject *__pyx_v_v_dof_old = 0;
  PyArrayObject *__pyx_v_w_dof_old = 0;
  PyArrayObject *__pyx_v_u_dof_old_old = 0;
  PyArrayObject *__pyx_v_v_dof_old_old = 0;
  PyArrayObject *__pyx_v_w_dof_old_old = 0;
  PyArrayObject *__pyx_v_g = 0;
  double __pyx_v_useVF;
  PyArrayObject *__pyx_v_vf = 0;
  PyArrayObject *__pyx_v_phi = 0;
  PyArrayObject *__pyx_v_normal_phi = 0;
  PyArrayObject *__pyx_v_kappa_phi = 0;
  PyArrayObject *__pyx_v_q_mom_u_acc = 0;
  PyArrayObject *__pyx_v_q_mom_v_acc = 0;
  PyArrayObject *__pyx_v_q_mom_w_acc = 0;
  PyArrayObject *__pyx_v_q_mass_adv = 0;
  PyArrayObject *__pyx_v_q_mom_u_acc_beta_bdf = 0;
  PyArrayObject *__pyx_v_q_mom_v_acc_beta_bdf = 0;
  PyArrayObject *__pyx_v_q_mom_w_acc_beta_bdf = 0;
  PyArrayObject *__pyx_v_q_dV = 0;
  PyArrayObject *__pyx_v_q_dV_last = 0;
  PyArrayObject *__pyx_v_q_velocity_sge = 0;
  PyArrayObject *__pyx_v_ebqe_velocity_star = 0;
  PyArrayObject *__pyx_v_q_cfl = 0;
  PyArrayObject *__pyx_v_q_numDiff_u = 0;
  PyArrayObject *__pyx_v_q_numDiff_v = 0;
  PyArrayObject *__pyx_v_q_numDiff_w = 0;
  PyArrayObject *__pyx_v_q_numDiff_u_last = 0;
  PyArrayObject *__pyx_v_q_numDiff_v_last = 0;
  PyArrayObject *__pyx_v_q_numDiff_w_last = 0;
  PyArrayObject *__pyx_v_sdInfo_u_u_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_u_u_colind = 0;
  PyArrayObject *__pyx_v_sdInfo_u_v_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_u_v_colind = 0;
  PyArrayObject *__pyx_v_sdInfo_u_w_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_u_w_colind = 0;
  PyArrayObject *__pyx_v_sdInfo_v_v_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_v_v_colind = 0;
  PyArrayObject *__pyx_v_sdInfo_v_u_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_v_u_colind = 0;
  PyArrayObject *__pyx_v_sdInfo_v_w_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_v_w_colind = 0;
  PyArrayObject *__pyx_v_sdInfo_w_w_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_w_w_colind = 0;
  PyArrayObject *__pyx_v_sdInfo_w_u_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_w_u_colind = 0;
  PyArrayObject *__pyx_v_sdInfo_w_v_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_w_v_colind = 0;
  int __pyx_v_offset_p;
  int __pyx_v_offset_u;
  int __pyx_v_offset_v;
  int __pyx_v_offset_w;
  int __pyx_v_stride_p;
  int __pyx_v_stride_u;
  int __pyx_v_stride_v;
  int __pyx_v_stride_w;
  PyArrayObject *__pyx_v_globalResidual = 0;
  int __pyx_v_nExteriorElementBoundaries_global;
  PyArrayObject *__pyx_v_exteriorElementBoundariesArray = 0;
  PyArrayObject *__pyx_v_elementBoundaryElementsArray = 0;
  PyArrayObject *__pyx_v_elementBoundaryLocalElementBoundariesArray = 0;
  PyArrayObject *__pyx_v_ebqe_vf_ext = 0;
  PyArrayObject *__pyx_v_bc_ebqe_vf_ext = 0;
  PyArrayObject *__pyx_v_ebqe_phi_ext = 0;
  PyArrayObject *__pyx_v_bc_ebqe_phi_ext = 0;
  PyArrayObject *__pyx_v_ebqe_normal_phi_ext = 0;
  PyArrayObject *__pyx_v_ebqe_kappa_phi_ext = 0;
  PyArrayObject *__pyx_v_ebqe_vos_ext = 0;
  PyArrayObject *__pyx_v_ebqe_turb_var_0 = 0;
  PyArrayObject *__pyx_v_ebqe_turb_var_1 = 0;
  PyArrayObject *__pyx_v_isDOFBoundary_p = 0;
  PyArrayObject *__pyx_v_isDOFBoundary_u = 0;
  PyArrayObject *__pyx_v_isDOFBoundary_v = 0;
  PyArrayObject *__pyx_v_isDOFBoundary_w = 0;
  PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_p = 0;
  PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_u = 0;
  PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_v = 0;
  PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_w = 0;
  PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_u = 0;
  PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_v = 0;
  PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_w = 0;
  PyArrayObject *__pyx_v_ebqe_bc_p_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_flux_mass_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_flux_mom_u_adv_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_flux_mom_v_adv_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_flux_mom_w_adv_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_u_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_flux_u_diff_ext = 0;
  PyArrayObject *__pyx_v_ebqe_penalty_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_v_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_flux_v_diff_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_w_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_flux_w_diff_ext = 0;
  PyArrayObject *__pyx_v_q_x = 0;
  PyArrayObject *__pyx_v_q_velocity = 0;
  PyArrayObject *__pyx_v_ebqe_velocity = 0;
  PyArrayObject *__pyx_v_q_grad_u = 0;
  PyArrayObject *__pyx_v_q_grad_v = 0;
  PyArrayObject *__pyx_v_q_grad_w = 0;
  PyArrayObject *__pyx_v_q_divU = 0;
  PyArrayObject *__pyx_v_ebqe_grad_u = 0;
  PyArrayObject *__pyx_v_ebqe_grad_v = 0;
  PyArrayObject *__pyx_v_ebqe_grad_w = 0;
  PyArrayObject *__pyx_v_flux = 0;
  PyArrayObject *__pyx_v_elementResidual_p = 0;
  PyArrayObject *__pyx_v_elementFlags = 0;
  PyArrayObject *__pyx_v_boundaryFlags = 0;
  PyArrayObject *__pyx_v_barycenters = 0;
  PyArrayObject *__pyx_v_wettedAreas = 0;
  PyArrayObject *__pyx_v_netForces_p = 0;
  PyArrayObject *__pyx_v_netForces_v = 0;
  PyArrayObject *__pyx_v_netMoments = 0;
  PyArrayObject *__pyx_v_q_rho = 0;
  PyArrayObject *__pyx_v_ebqe_rho = 0;
  PyArrayObject *__pyx_v_q_nu = 0;
  PyArrayObject *__pyx_v_ebqe_nu = 0;
  int __pyx_v_nParticles;
  double __pyx_v_particle_epsFact;
  double __pyx_v_particle_alpha;
  double __pyx_v_particle_beta;
  double __pyx_v_particle_penalty_constant;
  PyArrayObject *__pyx_v_particle_signed_distances = 0;
  PyArrayObject *__pyx_v_particle_signed_distance_normals = 0;
  PyArrayObject *__pyx_v_particle_velocities = 0;
  PyArrayObject *__pyx_v_particle_centroids = 0;
  PyArrayObject *__pyx_v_particle_netForces = 0;
  PyArrayObject *__pyx_v_particle_netMoments = 0;
  PyArrayObject *__pyx_v_particle_surfaceArea = 0;
  double __pyx_v_particle_nitsche;
  int __pyx_v_STABILIZATION_TYPE;
  double __pyx_v_areaRefElement;
  double __pyx_v_cMax;
  double __pyx_v_cE;
  PyArrayObject *__pyx_v_forcex = 0;
  PyArrayObject *__pyx_v_forcey = 0;
  PyArrayObject *__pyx_v_forcez = 0;
  int __pyx_v_KILL_PRESSURE_TERM;
  double __pyx_v_dt;
  PyArrayObject *__pyx_v_entropyResidualAtCell = 0;
  PyArrayObject *__pyx_v_maxSpeed2AtCell = 0;
  double __pyx_v_maxSpeed2AtOmega;
  PyArrayObject *__pyx_v_rhoAtCell = 0;
  PyArrayObject *__pyx_v_muAtCell = 0;
  PyArrayObject *__pyx_v_quantDOFs = 0;
  int __pyx_v_numDOFsPerEqn;
  PyArrayObject *__pyx_v_csrRowIndeces_DofLoops = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_DofLoops = 0;
  PyArrayObject *__pyx_v_ML = 0;
  PyArrayObject *__pyx_v_Cx = 0;
  PyArrayObject *__pyx_v_Cy = 0;
  PyArrayObject *__pyx_v_Cz = 0;
  int __pyx_v_MATERIAL_PARAMETERS_AS_FUNCTION;
  PyArrayObject *__pyx_v_density_as_function = 0;
  PyArrayObject *__pyx_v_dynamic_viscosity_as_function = 0;
  PyArrayObject *__pyx_v_ebqe_density_as_function = 0;
  PyArrayObject *__pyx_v_ebqe_dynamic_viscosity_as_function = 0;
  double __pyx_v_order_polynomial;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calculateResidual_entropy_viscosity (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_mesh_trial_ref,&__pyx_n_s_mesh_grad_trial_ref,&__pyx_n_s_mesh_dof,&__pyx_n_s_mesh_velocity_dof,&__pyx_n_s_MOVING_DOMAIN,&__pyx_n_s_PSTAB,&__pyx_n_s_mesh_l2g,&__pyx_n_s_dV_ref,&__pyx_n_s_p_trial_ref,&__pyx_n_s_p_grad_trial_ref,&__pyx_n_s_p_test_ref,&__pyx_n_s_p_grad_test_ref,&__pyx_n_s_q_p,&__pyx_n_s_q_grad_p,&__pyx_n_s_ebqe_p,&__pyx_n_s_ebqe_grad_p,&__pyx_n_s_vel_trial_ref,&__pyx_n_s_vel_grad_trial_ref,&__pyx_n_s_vel_hess_trial_ref,&__pyx_n_s_vel_test_ref,&__pyx_n_s_vel_grad_test_ref,&__pyx_n_s_mesh_trial_trace_ref,&__pyx_n_s_mesh_grad_trial_trace_ref,&__pyx_n_s_dS_ref,&__pyx_n_s_p_trial_trace_ref,&__pyx_n_s_p_grad_trial_trace_ref,&__pyx_n_s_p_test_trace_ref,&__pyx_n_s_p_grad_test_trace_ref,&__pyx_n_s_vel_trial_trace_ref,&__pyx_n_s_vel_grad_trial_trace_ref,&__pyx_n_s_vel_test_trace_ref,&__pyx_n_s_vel_grad_test_trace_ref,&__pyx_n_s_normal_ref,&__pyx_n_s_boundaryJac_ref,&__pyx_n_s_eb_adjoint_sigma,&__pyx_n_s_elementDiameter,&__pyx_n_s_nodeDiametersArray,&__pyx_n_s_hFactor,&__pyx_n_s_nElements_global,&__pyx_n_s_nElements_owned,&__pyx_n_s_nElementBoundaries_owned,&__pyx_n_s_useRBLES,&__pyx_n_s_useMetrics,&__pyx_n_s_alphaBDF,&__pyx_n_s_epsFact_rho,&__pyx_n_s_epsFact_mu,&__pyx_n_s_sigma,&__pyx_n_s_rho_0,&__pyx_n_s_nu_0,&__pyx_n_s_rho_1,&__pyx_n_s_nu_1,&__pyx_n_s_smagorinskyConstant,&__pyx_n_s_turbulenceClosureModel,&__pyx_n_s_Ct_sge,&__pyx_n_s_Cd_sge,&__pyx_n_s_C_dc,&__pyx_n_s_C_b,&__pyx_n_s_eps_solid,&__pyx_n_s_phi_solid,&__pyx_n_s_q_velocity_solid,&__pyx_n_s_q_vos,&__pyx_n_s_q_dvos_dt,&__pyx_n_s_q_dragAlpha,&__pyx_n_s_q_dragBeta,&__pyx_n_s_q_mass_source,&__pyx_n_s_q_turb_var_0,&__pyx_n_s_q_turb_var_1,&__pyx_n_s_q_turb_var_grad_0,&__pyx_n_s_q_eddy_viscosity,&__pyx_n_s_p_l2g,&__pyx_n_s_vel_l2g,&__pyx_n_s_p_dof,&__pyx_n_s_u_dof,&__pyx_n_s_v_dof,&__pyx_n_s_w_dof,&__pyx_n_s_u_dof_old,&__pyx_n_s_v_dof_old,&__pyx_n_s_w_dof_old,&__pyx_n_s_u_dof_old_old,&__pyx_n_s_v_dof_old_old,&__pyx_n_s_w_dof_old_old,&__pyx_n_s_g,&__pyx_n_s_useVF,&__pyx_n_s_vf,&__pyx_n_s_phi,&__pyx_n_s_normal_phi,&__pyx_n_s_kappa_phi,&__pyx_n_s_q_mom_u_acc,&__pyx_n_s_q_mom_v_acc,&__pyx_n_s_q_mom_w_acc,&__pyx_n_s_q_mass_adv,&__pyx_n_s_q_mom_u_acc_beta_bdf,&__pyx_n_s_q_mom_v_acc_beta_bdf,&__pyx_n_s_q_mom_w_acc_beta_bdf,&__pyx_n_s_q_dV,&__pyx_n_s_q_dV_last,&__pyx_n_s_q_velocity_sge,&__pyx_n_s_ebqe_velocity_star,&__pyx_n_s_q_cfl,&__pyx_n_s_q_numDiff_u,&__pyx_n_s_q_numDiff_v,&__pyx_n_s_q_numDiff_w,&__pyx_n_s_q_numDiff_u_last,&__pyx_n_s_q_numDiff_v_last,&__pyx_n_s_q_numDiff_w_last,&__pyx_n_s_sdInfo_u_u_rowptr,&__pyx_n_s_sdInfo_u_u_colind,&__pyx_n_s_sdInfo_u_v_rowptr,&__pyx_n_s_sdInfo_u_v_colind,&__pyx_n_s_sdInfo_u_w_rowptr,&__pyx_n_s_sdInfo_u_w_colind,&__pyx_n_s_sdInfo_v_v_rowptr,&__pyx_n_s_sdInfo_v_v_colind,&__pyx_n_s_sdInfo_v_u_rowptr,&__pyx_n_s_sdInfo_v_u_colind,&__pyx_n_s_sdInfo_v_w_rowptr,&__pyx_n_s_sdInfo_v_w_colind,&__pyx_n_s_sdInfo_w_w_rowptr,&__pyx_n_s_sdInfo_w_w_colind,&__pyx_n_s_sdInfo_w_u_rowptr,&__pyx_n_s_sdInfo_w_u_colind,&__pyx_n_s_sdInfo_w_v_rowptr,&__pyx_n_s_sdInfo_w_v_colind,&__pyx_n_s_offset_p,&__pyx_n_s_offset_u,&__pyx_n_s_offset_v,&__pyx_n_s_offset_w,&__pyx_n_s_stride_p,&__pyx_n_s_stride_u,&__pyx_n_s_stride_v,&__pyx_n_s_stride_w,&__pyx_n_s_globalResidual,&__pyx_n_s_nExteriorElementBoundaries_globa,&__pyx_n_s_exteriorElementBoundariesArray,&__pyx_n_s_elementBoundaryElementsArray,&__pyx_n_s_elementBoundaryLocalElementBound,&__pyx_n_s_ebqe_vf_ext,&__pyx_n_s_bc_ebqe_vf_ext,&__pyx_n_s_ebqe_phi_ext,&__pyx_n_s_bc_ebqe_phi_ext,&__pyx_n_s_ebqe_normal_phi_ext,&__pyx_n_s_ebqe_kappa_phi_ext,&__pyx_n_s_ebqe_vos_ext,&__pyx_n_s_ebqe_turb_var_0,&__pyx_n_s_ebqe_turb_var_1,&__pyx_n_s_isDOFBoundary_p,&__pyx_n_s_isDOFBoundary_u,&__pyx_n_s_isDOFBoundary_v,&__pyx_n_s_isDOFBoundary_w,&__pyx_n_s_isAdvectiveFluxBoundary_p,&__pyx_n_s_isAdvectiveFluxBoundary_u,&__pyx_n_s_isAdvectiveFluxBoundary_v,&__pyx_n_s_isAdvectiveFluxBoundary_w,&__pyx_n_s_isDiffusiveFluxBoundary_u,&__pyx_n_s_isDiffusiveFluxBoundary_v,&__pyx_n_s_isDiffusiveFluxBoundary_w,&__pyx_n_s_ebqe_bc_p_ext,&__pyx_n_s_ebqe_bc_flux_mass_ext,&__pyx_n_s_ebqe_bc_flux_mom_u_adv_ext,&__pyx_n_s_ebqe_bc_flux_mom_v_adv_ext,&__pyx_n_s_ebqe_bc_flux_mom_w_adv_ext,&__pyx_n_s_ebqe_bc_u_ext,&__pyx_n_s_ebqe_bc_flux_u_diff_ext,&__pyx_n_s_ebqe_penalty_ext,&__pyx_n_s_ebqe_bc_v_ext,&__pyx_n_s_ebqe_bc_flux_v_diff_ext,&__pyx_n_s_ebqe_bc_w_ext,&__pyx_n_s_ebqe_bc_flux_w_diff_ext,&__pyx_n_s_q_x,&__pyx_n_s_q_velocity,&__pyx_n_s_ebqe_velocity,&__pyx_n_s_q_grad_u,&__pyx_n_s_q_grad_v,&__pyx_n_s_q_grad_w,&__pyx_n_s_q_divU,&__pyx_n_s_ebqe_grad_u,&__pyx_n_s_ebqe_grad_v,&__pyx_n_s_ebqe_grad_w,&__pyx_n_s_flux,&__pyx_n_s_elementResidual_p,&__pyx_n_s_elementFlags,&__pyx_n_s_boundaryFlags,&__pyx_n_s_barycenters,&__pyx_n_s_wettedAreas,&__pyx_n_s_netForces_p,&__pyx_n_s_netForces_v,&__pyx_n_s_netMoments,&__pyx_n_s_q_rho,&__pyx_n_s_ebqe_rho,&__pyx_n_s_q_nu,&__pyx_n_s_ebqe_nu,&__pyx_n_s_nParticles,&__pyx_n_s_particle_epsFact,&__pyx_n_s_particle_alpha,&__pyx_n_s_particle_beta,&__pyx_n_s_particle_penalty_constant,&__pyx_n_s_particle_signed_distances,&__pyx_n_s_particle_signed_distance_normals,&__pyx_n_s_particle_velocities,&__pyx_n_s_particle_centroids,&__pyx_n_s_particle_netForces,&__pyx_n_s_particle_netMoments,&__pyx_n_s_particle_surfaceArea,&__pyx_n_s_particle_nitsche,&__pyx_n_s_STABILIZATION_TYPE,&__pyx_n_s_areaRefElement,&__pyx_n_s_cMax,&__pyx_n_s_cE,&__pyx_n_s_forcex,&__pyx_n_s_forcey,&__pyx_n_s_forcez,&__pyx_n_s_KILL_PRESSURE_TERM,&__pyx_n_s_dt,&__pyx_n_s_entropyResidualAtCell,&__pyx_n_s_maxSpeed2AtCell,&__pyx_n_s_maxSpeed2AtOmega,&__pyx_n_s_rhoAtCell,&__pyx_n_s_muAtCell,&__pyx_n_s_quantDOFs,&__pyx_n_s_numDOFsPerEqn,&__pyx_n_s_csrRowIndeces_DofLoops,&__pyx_n_s_csrColumnOffsets_DofLoops,&__pyx_n_s_ML,&__pyx_n_s_Cx,&__pyx_n_s_Cy,&__pyx_n_s_Cz,&__pyx_n_s_MATERIAL_PARAMETERS_AS_FUNCTION,&__pyx_n_s_density_as_function,&__pyx_n_s_dynamic_viscosity_as_function,&__pyx_n_s_ebqe_density_as_function,&__pyx_n_s_ebqe_dynamic_viscosity_as_functi,&__pyx_n_s_order_polynomial,0};
    PyObject* values[232] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 232: values[231] = PyTuple_GET_ITEM(__pyx_args, 231);
        case 231: values[230] = PyTuple_GET_ITEM(__pyx_args, 230);
        case 230: values[229] = PyTuple_GET_ITEM(__pyx_args, 229);
        case 229: values[228] = PyTuple_GET_ITEM(__pyx_args, 228);
        case 228: values[227] = PyTuple_GET_ITEM(__pyx_args, 227);
        case 227: values[226] = PyTuple_GET_ITEM(__pyx_args, 226);
        case 226: values[225] = PyTuple_GET_ITEM(__pyx_args, 225);
        case 225: values[224] = PyTuple_GET_ITEM(__pyx_args, 224);
        case 224: values[223] = PyTuple_GET_ITEM(__pyx_args, 223);
        case 223: values[222] = PyTuple_GET_ITEM(__pyx_args, 222);
        case 222: values[221] = PyTuple_GET_ITEM(__pyx_args, 221);
        case 221: values[220] = PyTuple_GET_ITEM(__pyx_args, 220);
        case 220: values[219] = PyTuple_GET_ITEM(__pyx_args, 219);
        case 219: values[218] = PyTuple_GET_ITEM(__pyx_args, 218);
        case 218: values[217] = PyTuple_GET_ITEM(__pyx_args, 217);
        case 217: values[216] = PyTuple_GET_ITEM(__pyx_args, 216);
        case 216: values[215] = PyTuple_GET_ITEM(__pyx_args, 215);
        case 215: values[214] = PyTuple_GET_ITEM(__pyx_args, 214);
        case 214: values[213] = PyTuple_GET_ITEM(__pyx_args, 213);
        case 213: values[212] = PyTuple_GET_ITEM(__pyx_args, 212);
        case 212: values[211] = PyTuple_GET_ITEM(__pyx_args, 211);
        case 211: values[210] = PyTuple_GET_ITEM(__pyx_args, 210);
        case 210: values[209] = PyTuple_GET_ITEM(__pyx_args, 209);
        case 209: values[208] = PyTuple_GET_ITEM(__pyx_args, 208);
        case 208: values[207] = PyTuple_GET_ITEM(__pyx_args, 207);
        case 207: values[206] = PyTuple_GET_ITEM(__pyx_args, 206);
        case 206: values[205] = PyTuple_GET_ITEM(__pyx_args, 205);
        case 205: values[204] = PyTuple_GET_ITEM(__pyx_args, 204);
        case 204: values[203] = PyTuple_GET_ITEM(__pyx_args, 203);
        case 203: values[202] = PyTuple_GET_ITEM(__pyx_args, 202);
        case 202: values[201] = PyTuple_GET_ITEM(__pyx_args, 201);
        case 201: values[200] = PyTuple_GET_ITEM(__pyx_args, 200);
        case 200: values[199] = PyTuple_GET_ITEM(__pyx_args, 199);
        case 199: values[198] = PyTuple_GET_ITEM(__pyx_args, 198);
        case 198: values[197] = PyTuple_GET_ITEM(__pyx_args, 197);
        case 197: values[196] = PyTuple_GET_ITEM(__pyx_args, 196);
        case 196: values[195] = PyTuple_GET_ITEM(__pyx_args, 195);
        case 195: values[194] = PyTuple_GET_ITEM(__pyx_args, 194);
        case 194: values[193] = PyTuple_GET_ITEM(__pyx_args, 193);
        case 193: values[192] = PyTuple_GET_ITEM(__pyx_args, 192);
        case 192: values[191] = PyTuple_GET_ITEM(__pyx_args, 191);
        case 191: values[190] = PyTuple_GET_ITEM(__pyx_args, 190);
        case 190: values[189] = PyTuple_GET_ITEM(__pyx_args, 189);
        case 189: values[188] = PyTuple_GET_ITEM(__pyx_args, 188);
        case 188: values[187] = PyTuple_GET_ITEM(__pyx_args, 187);
        case 187: values[186] = PyTuple_GET_ITEM(__pyx_args, 186);
        case 186: values[185] = PyTuple_GET_ITEM(__pyx_args, 185);
        case 185: values[184] = PyTuple_GET_ITEM(__pyx_args, 184);
        case 184: values[183] = PyTuple_GET_ITEM(__pyx_args, 183);
        case 183: values[182] = PyTuple_GET_ITEM(__pyx_args, 182);
        case 182: values[181] = PyTuple_GET_ITEM(__pyx_args, 181);
        case 181: values[180] = PyTuple_GET_ITEM(__pyx_args, 180);
        case 180: values[179] = PyTuple_GET_ITEM(__pyx_args, 179);
        case 179: values[178] = PyTuple_GET_ITEM(__pyx_args, 178);
        case 178: values[177] = PyTuple_GET_ITEM(__pyx_args, 177);
        case 177: values[176] = PyTuple_GET_ITEM(__pyx_args, 176);
        case 176: values[175] = PyTuple_GET_ITEM(__pyx_args, 175);
        case 175: values[174] = PyTuple_GET_ITEM(__pyx_args, 174);
        case 174: values[173] = PyTuple_GET_ITEM(__pyx_args, 173);
        case 173: values[172] = PyTuple_GET_ITEM(__pyx_args, 172);
        case 172: values[171] = PyTuple_GET_ITEM(__pyx_args, 171);
        case 171: values[170] = PyTuple_GET_ITEM(__pyx_args, 170);
        case 170: values[169] = PyTuple_GET_ITEM(__pyx_args, 169);
        case 169: values[168] = PyTuple_GET_ITEM(__pyx_args, 168);
        case 168: values[167] = PyTuple_GET_ITEM(__pyx_args, 167);
        case 167: values[166] = PyTuple_GET_ITEM(__pyx_args, 166);
        case 166: values[165] = PyTuple_GET_ITEM(__pyx_args, 165);
        case 165: values[164] = PyTuple_GET_ITEM(__pyx_args, 164);
        case 164: values[163] = PyTuple_GET_ITEM(__pyx_args, 163);
        case 163: values[162] = PyTuple_GET_ITEM(__pyx_args, 162);
        case 162: values[161] = PyTuple_GET_ITEM(__pyx_args, 161);
        case 161: values[160] = PyTuple_GET_ITEM(__pyx_args, 160);
        case 160: values[159] = PyTuple_GET_ITEM(__pyx_args, 159);
        case 159: values[158] = PyTuple_GET_ITEM(__pyx_args, 158);
        case 158: values[157] = PyTuple_GET_ITEM(__pyx_args, 157);
        case 157: values[156] = PyTuple_GET_ITEM(__pyx_args, 156);
        case 156: values[155] = PyTuple_GET_ITEM(__pyx_args, 155);
        case 155: values[154] = PyTuple_GET_ITEM(__pyx_args, 154);
        case 154: values[153] = PyTuple_GET_ITEM(__pyx_args, 153);
        case 153: values[152] = PyTuple_GET_ITEM(__pyx_args, 152);
        case 152: values[151] = PyTuple_GET_ITEM(__pyx_args, 151);
        case 151: values[150] = PyTuple_GET_ITEM(__pyx_args, 150);
        case 150: values[149] = PyTuple_GET_ITEM(__pyx_args, 149);
        case 149: values[148] = PyTuple_GET_ITEM(__pyx_args, 148);
        case 148: values[147] = PyTuple_GET_ITEM(__pyx_args, 147);
        case 147: values[146] = PyTuple_GET_ITEM(__pyx_args, 146);
        case 146: values[145] = PyTuple_GET_ITEM(__pyx_args, 145);
        case 145: values[144] = PyTuple_GET_ITEM(__pyx_args, 144);
        case 144: values[143] = PyTuple_GET_ITEM(__pyx_args, 143);
        case 143: values[142] = PyTuple_GET_ITEM(__pyx_args, 142);
        case 142: values[141] = PyTuple_GET_ITEM(__pyx_args, 141);
        case 141: values[140] = PyTuple_GET_ITEM(__pyx_args, 140);
        case 140: values[139] = PyTuple_GET_ITEM(__pyx_args, 139);
        case 139: values[138] = PyTuple_GET_ITEM(__pyx_args, 138);
        case 138: values[137] = PyTuple_GET_ITEM(__pyx_args, 137);
        case 137: values[136] = PyTuple_GET_ITEM(__pyx_args, 136);
        case 136: values[135] = PyTuple_GET_ITEM(__pyx_args, 135);
        case 135: values[134] = PyTuple_GET_ITEM(__pyx_args, 134);
        case 134: values[133] = PyTuple_GET_ITEM(__pyx_args, 133);
        case 133: values[132] = PyTuple_GET_ITEM(__pyx_args, 132);
        case 132: values[131] = PyTuple_GET_ITEM(__pyx_args, 131);
        case 131: values[130] = PyTuple_GET_ITEM(__pyx_args, 130);
        case 130: values[129] = PyTuple_GET_ITEM(__pyx_args, 129);
        case 129: values[128] = PyTuple_GET_ITEM(__pyx_args, 128);
        case 128: values[127] = PyTuple_GET_ITEM(__pyx_args, 127);
        case 127: values[126] = PyTuple_GET_ITEM(__pyx_args, 126);
        case 126: values[125] = PyTuple_GET_ITEM(__pyx_args, 125);
        case 125: values[124] = PyTuple_GET_ITEM(__pyx_args, 124);
        case 124: values[123] = PyTuple_GET_ITEM(__pyx_args, 123);
        case 123: values[122] = PyTuple_GET_ITEM(__pyx_args, 122);
        case 122: values[121] = PyTuple_GET_ITEM(__pyx_args, 121);
        case 121: values[120] = PyTuple_GET_ITEM(__pyx_args, 120);
        case 120: values[119] = PyTuple_GET_ITEM(__pyx_args, 119);
        case 119: values[118] = PyTuple_GET_ITEM(__pyx_args, 118);
        case 118: values[117] = PyTuple_GET_ITEM(__pyx_args, 117);
        case 117: values[116] = PyTuple_GET_ITEM(__pyx_args, 116);
        case 116: values[115] = PyTuple_GET_ITEM(__pyx_args, 115);
        case 115: values[114] = PyTuple_GET_ITEM(__pyx_args, 114);
        case 114: values[113] = PyTuple_GET_ITEM(__pyx_args, 113);
        case 113: values[112] = PyTuple_GET_ITEM(__pyx_args, 112);
        case 112: values[111] = PyTuple_GET_ITEM(__pyx_args, 111);
        case 111: values[110] = PyTuple_GET_ITEM(__pyx_args, 110);
        case 110: values[109] = PyTuple_GET_ITEM(__pyx_args, 109);
        case 109: values[108] = PyTuple_GET_ITEM(__pyx_args, 108);
        case 108: values[107] = PyTuple_GET_ITEM(__pyx_args, 107);
        case 107: values[106] = PyTuple_GET_ITEM(__pyx_args, 106);
        case 106: values[105] = PyTuple_GET_ITEM(__pyx_args, 105);
        case 105: values[104] = PyTuple_GET_ITEM(__pyx_args, 104);
        case 104: values[103] = PyTuple_GET_ITEM(__pyx_args, 103);
        case 103: values[102] = PyTuple_GET_ITEM(__pyx_args, 102);
        case 102: values[101] = PyTuple_GET_ITEM(__pyx_args, 101);
        case 101: values[100] = PyTuple_GET_ITEM(__pyx_args, 100);
        case 100: values[99] = PyTuple_GET_ITEM(__pyx_args, 99);
        case 99: values[98] = PyTuple_GET_ITEM(__pyx_args, 98);
        case 98: values[97] = PyTuple_GET_ITEM(__pyx_args, 97);
        case 97: values[96] = PyTuple_GET_ITEM(__pyx_args, 96);
        case 96: values[95] = PyTuple_GET_ITEM(__pyx_args, 95);
        case 95: values[94] = PyTuple_GET_ITEM(__pyx_args, 94);
        case 94: values[93] = PyTuple_GET_ITEM(__pyx_args, 93);
        case 93: values[92] = PyTuple_GET_ITEM(__pyx_args, 92);
        case 92: values[91] = PyTuple_GET_ITEM(__pyx_args, 91);
        case 91: values[90] = PyTuple_GET_ITEM(__pyx_args, 90);
        case 90: values[89] = PyTuple_GET_ITEM(__pyx_args, 89);
        case 89: values[88] = PyTuple_GET_ITEM(__pyx_args, 88);
        case 88: values[87] = PyTuple_GET_ITEM(__pyx_args, 87);
        case 87: values[86] = PyTuple_GET_ITEM(__pyx_args, 86);
        case 86: values[85] = PyTuple_GET_ITEM(__pyx_args, 85);
        case 85: values[84] = PyTuple_GET_ITEM(__pyx_args, 84);
        case 84: values[83] = PyTuple_GET_ITEM(__pyx_args, 83);
        case 83: values[82] = PyTuple_GET_ITEM(__pyx_args, 82);
        case 82: values[81] = PyTuple_GET_ITEM(__pyx_args, 81);
        case 81: values[80] = PyTuple_GET_ITEM(__pyx_args, 80);
        case 80: values[79] = PyTuple_GET_ITEM(__pyx_args, 79);
        case 79: values[78] = PyTuple_GET_ITEM(__pyx_args, 78);
        case 78: values[77] = PyTuple_GET_ITEM(__pyx_args, 77);
        case 77: values[76] = PyTuple_GET_ITEM(__pyx_args, 76);
        case 76: values[75] = PyTuple_GET_ITEM(__pyx_args, 75);
        case 75: values[74] = PyTuple_GET_ITEM(__pyx_args, 74);
        case 74: values[73] = PyTuple_GET_ITEM(__pyx_args, 73);
        case 73: values[72] = PyTuple_GET_ITEM(__pyx_args, 72);
        case 72: values[71] = PyTuple_GET_ITEM(__pyx_args, 71);
        case 71: values[70] = PyTuple_GET_ITEM(__pyx_args, 70);
        case 70: values[69] = PyTuple_GET_ITEM(__pyx_args, 69);
        case 69: values[68] = PyTuple_GET_ITEM(__pyx_args, 68);
        case 68: values[67] = PyTuple_GET_ITEM(__pyx_args, 67);
        case 67: values[66] = PyTuple_GET_ITEM(__pyx_args, 66);
        case 66: values[65] = PyTuple_GET_ITEM(__pyx_args, 65);
        case 65: values[64] = PyTuple_GET_ITEM(__pyx_args, 64);
        case 64: values[63] = PyTuple_GET_ITEM(__pyx_args, 63);
        case 63: values[62] = PyTuple_GET_ITEM(__pyx_args, 62);
        case 62: values[61] = PyTuple_GET_ITEM(__pyx_args, 61);
        case 61: values[60] = PyTuple_GET_ITEM(__pyx_args, 60);
        case 60: values[59] = PyTuple_GET_ITEM(__pyx_args, 59);
        case 59: values[58] = PyTuple_GET_ITEM(__pyx_args, 58);
        case 58: values[57] = PyTuple_GET_ITEM(__pyx_args, 57);
        case 57: values[56] = PyTuple_GET_ITEM(__pyx_args, 56);
        case 56: values[55] = PyTuple_GET_ITEM(__pyx_args, 55);
        case 55: values[54] = PyTuple_GET_ITEM(__pyx_args, 54);
        case 54: values[53] = PyTuple_GET_ITEM(__pyx_args, 53);
        case 53: values[52] = PyTuple_GET_ITEM(__pyx_args, 52);
        case 52: values[51] = PyTuple_GET_ITEM(__pyx_args, 51);
        case 51: values[50] = PyTuple_GET_ITEM(__pyx_args, 50);
        case 50: values[49] = PyTuple_GET_ITEM(__pyx_args, 49);
        case 49: values[48] = PyTuple_GET_ITEM(__pyx_args, 48);
        case 48: values[47] = PyTuple_GET_ITEM(__pyx_args, 47);
        case 47: values[46] = PyTuple_GET_ITEM(__pyx_args, 46);
        case 46: values[45] = PyTuple_GET_ITEM(__pyx_args, 45);
        case 45: values[44] = PyTuple_GET_ITEM(__pyx_args, 44);
        case 44: values[43] = PyTuple_GET_ITEM(__pyx_args, 43);
        case 43: values[42] = PyTuple_GET_ITEM(__pyx_args, 42);
        case 42: values[41] = PyTuple_GET_ITEM(__pyx_args, 41);
        case 41: values[40] = PyTuple_GET_ITEM(__pyx_args, 40);
        case 40: values[39] = PyTuple_GET_ITEM(__pyx_args, 39);
        case 39: values[38] = PyTuple_GET_ITEM(__pyx_args, 38);
        case 38: values[37] = PyTuple_GET_ITEM(__pyx_args, 37);
        case 37: values[36] = PyTuple_GET_ITEM(__pyx_args, 36);
        case 36: values[35] = PyTuple_GET_ITEM(__pyx_args, 35);
        case 35: values[34] = PyTuple_GET_ITEM(__pyx_args, 34);
        case 34: values[33] = PyTuple_GET_ITEM(__pyx_args, 33);
        case 33: values[32] = PyTuple_GET_ITEM(__pyx_args, 32);
        case 32: values[31] = PyTuple_GET_ITEM(__pyx_args, 31);
        case 31: values[30] = PyTuple_GET_ITEM(__pyx_args, 30);
        case 30: values[29] = PyTuple_GET_ITEM(__pyx_args, 29);
        case 29: values[28] = PyTuple_GET_ITEM(__pyx_args, 28);
        case 28: values[27] = PyTuple_GET_ITEM(__pyx_args, 27);
        case 27: values[26] = PyTuple_GET_ITEM(__pyx_args, 26);
        case 26: values[25] = PyTuple_GET_ITEM(__pyx_args, 25);
        case 25: values[24] = PyTuple_GET_ITEM(__pyx_args, 24);
        case 24: values[23] = PyTuple_GET_ITEM(__pyx_args, 23);
        case 23: values[22] = PyTuple_GET_ITEM(__pyx_args, 22);
        case 22: values[21] = PyTuple_GET_ITEM(__pyx_args, 21);
        case 21: values[20] = PyTuple_GET_ITEM(__pyx_args, 20);
        case 20: values[19] = PyTuple_GET_ITEM(__pyx_args, 19);
        case 19: values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
        case 18: values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
        case 17: values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_trial_ref)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_grad_trial_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 1); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 2); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_velocity_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 3); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_MOVING_DOMAIN)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 4); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_PSTAB)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 5); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_l2g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 6); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case  7:
        if (likely((values[7] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dV_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 7); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case  8:
        if (likely((values[8] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_trial_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 8); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case  9:
        if (likely((values[9] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_grad_trial_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 9); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 10:
        if (likely((values[10] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_test_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 10); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 11:
        if (likely((values[11] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_grad_test_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 11); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 12:
        if (likely((values[12] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 12); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 13:
        if (likely((values[13] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_grad_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 13); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 14:
        if (likely((values[14] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 14); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 15:
        if (likely((values[15] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_grad_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 15); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 16:
        if (likely((values[16] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_trial_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 16); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 17:
        if (likely((values[17] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_grad_trial_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 17); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 18:
        if (likely((values[18] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_hess_trial_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 18); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 19:
        if (likely((values[19] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_test_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 19); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 20:
        if (likely((values[20] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_grad_test_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 20); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 21:
        if (likely((values[21] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 21); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 22:
        if (likely((values[22] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_grad_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 22); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 23:
        if (likely((values[23] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dS_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 23); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 24:
        if (likely((values[24] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 24); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 25:
        if (likely((values[25] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_grad_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 25); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 26:
        if (likely((values[26] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_test_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 26); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 27:
        if (likely((values[27] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_grad_test_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 27); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 28:
        if (likely((values[28] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 28); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 29:
        if (likely((values[29] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_grad_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 29); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 30:
        if (likely((values[30] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_test_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 30); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 31:
        if (likely((values[31] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_grad_test_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 31); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 32:
        if (likely((values[32] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_normal_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 32); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 33:
        if (likely((values[33] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_boundaryJac_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 33); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 34:
        if (likely((values[34] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_eb_adjoint_sigma)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 34); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 35:
        if (likely((values[35] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_elementDiameter)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 35); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 36:
        if (likely((values[36] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nodeDiametersArray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 36); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 37:
        if (likely((values[37] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_hFactor)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 37); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 38:
        if (likely((values[38] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nElements_global)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 38); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 39:
        if (likely((values[39] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nElements_owned)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 39); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 40:
        if (likely((values[40] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nElementBoundaries_owned)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 40); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 41:
        if (likely((values[41] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_useRBLES)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 41); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 42:
        if (likely((values[42] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_useMetrics)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 42); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 43:
        if (likely((values[43] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_alphaBDF)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 43); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 44:
        if (likely((values[44] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_epsFact_rho)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 44); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 45:
        if (likely((values[45] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_epsFact_mu)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 45); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 46:
        if (likely((values[46] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sigma)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 46); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 47:
        if (likely((values[47] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rho_0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 47); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 48:
        if (likely((values[48] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nu_0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 48); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 49:
        if (likely((values[49] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rho_1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 49); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 50:
        if (likely((values[50] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nu_1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 50); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 51:
        if (likely((values[51] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_smagorinskyConstant)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 51); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 52:
        if (likely((values[52] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_turbulenceClosureModel)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 52); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 53:
        if (likely((values[53] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Ct_sge)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 53); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 54:
        if (likely((values[54] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Cd_sge)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 54); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 55:
        if (likely((values[55] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_C_dc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 55); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 56:
        if (likely((values[56] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_C_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 56); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 57:
        if (likely((values[57] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_eps_solid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 57); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 58:
        if (likely((values[58] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_phi_solid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 58); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 59:
        if (likely((values[59] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_velocity_solid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 59); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 60:
        if (likely((values[60] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_vos)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 60); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 61:
        if (likely((values[61] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_dvos_dt)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 61); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 62:
        if (likely((values[62] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_dragAlpha)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 62); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 63:
        if (likely((values[63] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_dragBeta)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 63); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 64:
        if (likely((values[64] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_mass_source)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 64); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 65:
        if (likely((values[65] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_turb_var_0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 65); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 66:
        if (likely((values[66] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_turb_var_1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 66); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 67:
        if (likely((values[67] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_turb_var_grad_0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 67); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 68:
        if (likely((values[68] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_eddy_viscosity)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 68); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 69:
        if (likely((values[69] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_l2g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 69); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 70:
        if (likely((values[70] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_l2g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 70); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 71:
        if (likely((values[71] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 71); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 72:
        if (likely((values[72] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_u_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 72); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 73:
        if (likely((values[73] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_v_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 73); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 74:
        if (likely((values[74] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_w_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 74); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 75:
        if (likely((values[75] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_u_dof_old)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 75); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 76:
        if (likely((values[76] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_v_dof_old)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 76); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 77:
        if (likely((values[77] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_w_dof_old)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 77); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 78:
        if (likely((values[78] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_u_dof_old_old)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 78); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 79:
        if (likely((values[79] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_v_dof_old_old)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 79); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 80:
        if (likely((values[80] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_w_dof_old_old)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 80); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 81:
        if (likely((values[81] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 81); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 82:
        if (likely((values[82] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_useVF)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 82); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 83:
        if (likely((values[83] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vf)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 83); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 84:
        if (likely((values[84] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_phi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 84); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 85:
        if (likely((values[85] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_normal_phi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 85); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 86:
        if (likely((values[86] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_kappa_phi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 86); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 87:
        if (likely((values[87] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_mom_u_acc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 87); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 88:
        if (likely((values[88] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_mom_v_acc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 88); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 89:
        if (likely((values[89] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_mom_w_acc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 89); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 90:
        if (likely((values[90] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_mass_adv)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 90); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 91:
        if (likely((values[91] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_mom_u_acc_beta_bdf)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 91); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 92:
        if (likely((values[92] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_mom_v_acc_beta_bdf)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 92); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 93:
        if (likely((values[93] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_mom_w_acc_beta_bdf)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 93); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 94:
        if (likely((values[94] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_dV)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 94); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 95:
        if (likely((values[95] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_dV_last)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 95); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 96:
        if (likely((values[96] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_velocity_sge)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 96); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 97:
        if (likely((values[97] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_velocity_star)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 97); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 98:
        if (likely((values[98] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_cfl)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 98); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 99:
        if (likely((values[99] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_numDiff_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 99); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 100:
        if (likely((values[100] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_numDiff_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 100); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 101:
        if (likely((values[101] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_numDiff_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 101); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 102:
        if (likely((values[102] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_numDiff_u_last)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 102); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 103:
        if (likely((values[103] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_numDiff_v_last)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 103); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 104:
        if (likely((values[104] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_numDiff_w_last)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 104); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 105:
        if (likely((values[105] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_u_u_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 105); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 106:
        if (likely((values[106] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_u_u_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 106); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 107:
        if (likely((values[107] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_u_v_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 107); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 108:
        if (likely((values[108] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_u_v_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 108); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 109:
        if (likely((values[109] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_u_w_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 109); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 110:
        if (likely((values[110] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_u_w_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 110); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 111:
        if (likely((values[111] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_v_v_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 111); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 112:
        if (likely((values[112] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_v_v_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 112); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 113:
        if (likely((values[113] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_v_u_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 113); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 114:
        if (likely((values[114] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_v_u_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 114); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 115:
        if (likely((values[115] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_v_w_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 115); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 116:
        if (likely((values[116] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_v_w_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 116); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 117:
        if (likely((values[117] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_w_w_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 117); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 118:
        if (likely((values[118] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_w_w_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 118); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 119:
        if (likely((values[119] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_w_u_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 119); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 120:
        if (likely((values[120] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_w_u_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 120); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 121:
        if (likely((values[121] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_w_v_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 121); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 122:
        if (likely((values[122] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_w_v_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 122); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 123:
        if (likely((values[123] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_offset_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 123); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 124:
        if (likely((values[124] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_offset_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 124); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 125:
        if (likely((values[125] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_offset_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 125); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 126:
        if (likely((values[126] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_offset_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 126); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 127:
        if (likely((values[127] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stride_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 127); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 128:
        if (likely((values[128] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stride_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 128); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 129:
        if (likely((values[129] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stride_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 129); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 130:
        if (likely((values[130] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stride_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 130); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 131:
        if (likely((values[131] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_globalResidual)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 131); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 132:
        if (likely((values[132] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nExteriorElementBoundaries_globa)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 132); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 133:
        if (likely((values[133] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_exteriorElementBoundariesArray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 133); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 134:
        if (likely((values[134] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_elementBoundaryElementsArray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 134); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 135:
        if (likely((values[135] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_elementBoundaryLocalElementBound)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 135); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 136:
        if (likely((values[136] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_vf_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 136); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 137:
        if (likely((values[137] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bc_ebqe_vf_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 137); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 138:
        if (likely((values[138] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_phi_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 138); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 139:
        if (likely((values[139] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bc_ebqe_phi_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 139); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 140:
        if (likely((values[140] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_normal_phi_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 140); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 141:
        if (likely((values[141] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_kappa_phi_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 141); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 142:
        if (likely((values[142] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_vos_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 142); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 143:
        if (likely((values[143] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_turb_var_0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 143); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 144:
        if (likely((values[144] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_turb_var_1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 144); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 145:
        if (likely((values[145] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isDOFBoundary_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 145); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 146:
        if (likely((values[146] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isDOFBoundary_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 146); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 147:
        if (likely((values[147] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isDOFBoundary_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 147); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 148:
        if (likely((values[148] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isDOFBoundary_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 148); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 149:
        if (likely((values[149] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isAdvectiveFluxBoundary_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 149); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 150:
        if (likely((values[150] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isAdvectiveFluxBoundary_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 150); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 151:
        if (likely((values[151] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isAdvectiveFluxBoundary_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 151); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 152:
        if (likely((values[152] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isAdvectiveFluxBoundary_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 152); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 153:
        if (likely((values[153] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isDiffusiveFluxBoundary_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 153); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 154:
        if (likely((values[154] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isDiffusiveFluxBoundary_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 154); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 155:
        if (likely((values[155] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isDiffusiveFluxBoundary_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 155); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 156:
        if (likely((values[156] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_p_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 156); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 157:
        if (likely((values[157] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_flux_mass_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 157); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 158:
        if (likely((values[158] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_flux_mom_u_adv_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 158); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 159:
        if (likely((values[159] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_flux_mom_v_adv_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 159); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 160:
        if (likely((values[160] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_flux_mom_w_adv_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 160); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 161:
        if (likely((values[161] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_u_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 161); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 162:
        if (likely((values[162] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_flux_u_diff_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 162); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 163:
        if (likely((values[163] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_penalty_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 163); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 164:
        if (likely((values[164] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_v_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 164); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 165:
        if (likely((values[165] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_flux_v_diff_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 165); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 166:
        if (likely((values[166] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_w_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 166); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 167:
        if (likely((values[167] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_flux_w_diff_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 167); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 168:
        if (likely((values[168] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 168); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 169:
        if (likely((values[169] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_velocity)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 169); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 170:
        if (likely((values[170] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_velocity)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 170); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 171:
        if (likely((values[171] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_grad_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 171); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 172:
        if (likely((values[172] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_grad_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 172); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 173:
        if (likely((values[173] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_grad_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 173); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 174:
        if (likely((values[174] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_divU)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 174); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 175:
        if (likely((values[175] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_grad_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 175); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 176:
        if (likely((values[176] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_grad_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 176); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 177:
        if (likely((values[177] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_grad_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 177); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 178:
        if (likely((values[178] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flux)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 178); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 179:
        if (likely((values[179] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_elementResidual_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 179); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 180:
        if (likely((values[180] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_elementFlags)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 180); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 181:
        if (likely((values[181] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_boundaryFlags)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 181); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 182:
        if (likely((values[182] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_barycenters)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 182); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 183:
        if (likely((values[183] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_wettedAreas)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 183); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 184:
        if (likely((values[184] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_netForces_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 184); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 185:
        if (likely((values[185] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_netForces_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 185); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 186:
        if (likely((values[186] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_netMoments)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 186); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 187:
        if (likely((values[187] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_rho)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 187); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 188:
        if (likely((values[188] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_rho)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 188); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 189:
        if (likely((values[189] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_nu)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 189); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 190:
        if (likely((values[190] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_nu)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 190); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 191:
        if (likely((values[191] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nParticles)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 191); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 192:
        if (likely((values[192] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_epsFact)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 192); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 193:
        if (likely((values[193] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_alpha)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 193); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 194:
        if (likely((values[194] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_beta)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 194); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 195:
        if (likely((values[195] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_penalty_constant)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 195); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 196:
        if (likely((values[196] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_signed_distances)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 196); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 197:
        if (likely((values[197] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_signed_distance_normals)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 197); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 198:
        if (likely((values[198] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_velocities)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 198); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 199:
        if (likely((values[199] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_centroids)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 199); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 200:
        if (likely((values[200] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_netForces)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 200); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 201:
        if (likely((values[201] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_netMoments)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 201); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 202:
        if (likely((values[202] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_surfaceArea)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 202); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 203:
        if (likely((values[203] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_nitsche)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 203); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 204:
        if (likely((values[204] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_STABILIZATION_TYPE)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 204); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 205:
        if (likely((values[205] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_areaRefElement)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 205); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 206:
        if (likely((values[206] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cMax)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 206); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 207:
        if (likely((values[207] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cE)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 207); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 208:
        if (likely((values[208] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_forcex)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 208); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 209:
        if (likely((values[209] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_forcey)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 209); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 210:
        if (likely((values[210] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_forcez)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 210); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 211:
        if (likely((values[211] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_KILL_PRESSURE_TERM)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 211); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 212:
        if (likely((values[212] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dt)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 212); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 213:
        if (likely((values[213] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_entropyResidualAtCell)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 213); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 214:
        if (likely((values[214] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_maxSpeed2AtCell)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 214); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 215:
        if (likely((values[215] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_maxSpeed2AtOmega)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 215); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 216:
        if (likely((values[216] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rhoAtCell)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 216); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 217:
        if (likely((values[217] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_muAtCell)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 217); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 218:
        if (likely((values[218] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_quantDOFs)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 218); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 219:
        if (likely((values[219] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_numDOFsPerEqn)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 219); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 220:
        if (likely((values[220] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_DofLoops)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 220); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 221:
        if (likely((values[221] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_DofLoops)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 221); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 222:
        if (likely((values[222] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ML)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 222); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 223:
        if (likely((values[223] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Cx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 223); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 224:
        if (likely((values[224] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Cy)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 224); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 225:
        if (likely((values[225] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Cz)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 225); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 226:
        if (likely((values[226] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_MATERIAL_PARAMETERS_AS_FUNCTION)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 226); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 227:
        if (likely((values[227] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_density_as_function)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 227); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 228:
        if (likely((values[228] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dynamic_viscosity_as_function)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 228); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 229:
        if (likely((values[229] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_density_as_function)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 229); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 230:
        if (likely((values[230] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_dynamic_viscosity_as_functi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 230); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
        case 231:
        if (likely((values[231] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_order_polynomial)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, 231); __PYX_ERR(0, 4285, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calculateResidual_entropy_viscosity") < 0)) __PYX_ERR(0, 4285, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 232) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
      values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
      values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
      values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
      values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
      values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
      values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
      values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
      values[19] = PyTuple_GET_ITEM(__pyx_args, 19);
      values[20] = PyTuple_GET_ITEM(__pyx_args, 20);
      values[21] = PyTuple_GET_ITEM(__pyx_args, 21);
      values[22] = PyTuple_GET_ITEM(__pyx_args, 22);
      values[23] = PyTuple_GET_ITEM(__pyx_args, 23);
      values[24] = PyTuple_GET_ITEM(__pyx_args, 24);
      values[25] = PyTuple_GET_ITEM(__pyx_args, 25);
      values[26] = PyTuple_GET_ITEM(__pyx_args, 26);
      values[27] = PyTuple_GET_ITEM(__pyx_args, 27);
      values[28] = PyTuple_GET_ITEM(__pyx_args, 28);
      values[29] = PyTuple_GET_ITEM(__pyx_args, 29);
      values[30] = PyTuple_GET_ITEM(__pyx_args, 30);
      values[31] = PyTuple_GET_ITEM(__pyx_args, 31);
      values[32] = PyTuple_GET_ITEM(__pyx_args, 32);
      values[33] = PyTuple_GET_ITEM(__pyx_args, 33);
      values[34] = PyTuple_GET_ITEM(__pyx_args, 34);
      values[35] = PyTuple_GET_ITEM(__pyx_args, 35);
      values[36] = PyTuple_GET_ITEM(__pyx_args, 36);
      values[37] = PyTuple_GET_ITEM(__pyx_args, 37);
      values[38] = PyTuple_GET_ITEM(__pyx_args, 38);
      values[39] = PyTuple_GET_ITEM(__pyx_args, 39);
      values[40] = PyTuple_GET_ITEM(__pyx_args, 40);
      values[41] = PyTuple_GET_ITEM(__pyx_args, 41);
      values[42] = PyTuple_GET_ITEM(__pyx_args, 42);
      values[43] = PyTuple_GET_ITEM(__pyx_args, 43);
      values[44] = PyTuple_GET_ITEM(__pyx_args, 44);
      values[45] = PyTuple_GET_ITEM(__pyx_args, 45);
      values[46] = PyTuple_GET_ITEM(__pyx_args, 46);
      values[47] = PyTuple_GET_ITEM(__pyx_args, 47);
      values[48] = PyTuple_GET_ITEM(__pyx_args, 48);
      values[49] = PyTuple_GET_ITEM(__pyx_args, 49);
      values[50] = PyTuple_GET_ITEM(__pyx_args, 50);
      values[51] = PyTuple_GET_ITEM(__pyx_args, 51);
      values[52] = PyTuple_GET_ITEM(__pyx_args, 52);
      values[53] = PyTuple_GET_ITEM(__pyx_args, 53);
      values[54] = PyTuple_GET_ITEM(__pyx_args, 54);
      values[55] = PyTuple_GET_ITEM(__pyx_args, 55);
      values[56] = PyTuple_GET_ITEM(__pyx_args, 56);
      values[57] = PyTuple_GET_ITEM(__pyx_args, 57);
      values[58] = PyTuple_GET_ITEM(__pyx_args, 58);
      values[59] = PyTuple_GET_ITEM(__pyx_args, 59);
      values[60] = PyTuple_GET_ITEM(__pyx_args, 60);
      values[61] = PyTuple_GET_ITEM(__pyx_args, 61);
      values[62] = PyTuple_GET_ITEM(__pyx_args, 62);
      values[63] = PyTuple_GET_ITEM(__pyx_args, 63);
      values[64] = PyTuple_GET_ITEM(__pyx_args, 64);
      values[65] = PyTuple_GET_ITEM(__pyx_args, 65);
      values[66] = PyTuple_GET_ITEM(__pyx_args, 66);
      values[67] = PyTuple_GET_ITEM(__pyx_args, 67);
      values[68] = PyTuple_GET_ITEM(__pyx_args, 68);
      values[69] = PyTuple_GET_ITEM(__pyx_args, 69);
      values[70] = PyTuple_GET_ITEM(__pyx_args, 70);
      values[71] = PyTuple_GET_ITEM(__pyx_args, 71);
      values[72] = PyTuple_GET_ITEM(__pyx_args, 72);
      values[73] = PyTuple_GET_ITEM(__pyx_args, 73);
      values[74] = PyTuple_GET_ITEM(__pyx_args, 74);
      values[75] = PyTuple_GET_ITEM(__pyx_args, 75);
      values[76] = PyTuple_GET_ITEM(__pyx_args, 76);
      values[77] = PyTuple_GET_ITEM(__pyx_args, 77);
      values[78] = PyTuple_GET_ITEM(__pyx_args, 78);
      values[79] = PyTuple_GET_ITEM(__pyx_args, 79);
      values[80] = PyTuple_GET_ITEM(__pyx_args, 80);
      values[81] = PyTuple_GET_ITEM(__pyx_args, 81);
      values[82] = PyTuple_GET_ITEM(__pyx_args, 82);
      values[83] = PyTuple_GET_ITEM(__pyx_args, 83);
      values[84] = PyTuple_GET_ITEM(__pyx_args, 84);
      values[85] = PyTuple_GET_ITEM(__pyx_args, 85);
      values[86] = PyTuple_GET_ITEM(__pyx_args, 86);
      values[87] = PyTuple_GET_ITEM(__pyx_args, 87);
      values[88] = PyTuple_GET_ITEM(__pyx_args, 88);
      values[89] = PyTuple_GET_ITEM(__pyx_args, 89);
      values[90] = PyTuple_GET_ITEM(__pyx_args, 90);
      values[91] = PyTuple_GET_ITEM(__pyx_args, 91);
      values[92] = PyTuple_GET_ITEM(__pyx_args, 92);
      values[93] = PyTuple_GET_ITEM(__pyx_args, 93);
      values[94] = PyTuple_GET_ITEM(__pyx_args, 94);
      values[95] = PyTuple_GET_ITEM(__pyx_args, 95);
      values[96] = PyTuple_GET_ITEM(__pyx_args, 96);
      values[97] = PyTuple_GET_ITEM(__pyx_args, 97);
      values[98] = PyTuple_GET_ITEM(__pyx_args, 98);
      values[99] = PyTuple_GET_ITEM(__pyx_args, 99);
      values[100] = PyTuple_GET_ITEM(__pyx_args, 100);
      values[101] = PyTuple_GET_ITEM(__pyx_args, 101);
      values[102] = PyTuple_GET_ITEM(__pyx_args, 102);
      values[103] = PyTuple_GET_ITEM(__pyx_args, 103);
      values[104] = PyTuple_GET_ITEM(__pyx_args, 104);
      values[105] = PyTuple_GET_ITEM(__pyx_args, 105);
      values[106] = PyTuple_GET_ITEM(__pyx_args, 106);
      values[107] = PyTuple_GET_ITEM(__pyx_args, 107);
      values[108] = PyTuple_GET_ITEM(__pyx_args, 108);
      values[109] = PyTuple_GET_ITEM(__pyx_args, 109);
      values[110] = PyTuple_GET_ITEM(__pyx_args, 110);
      values[111] = PyTuple_GET_ITEM(__pyx_args, 111);
      values[112] = PyTuple_GET_ITEM(__pyx_args, 112);
      values[113] = PyTuple_GET_ITEM(__pyx_args, 113);
      values[114] = PyTuple_GET_ITEM(__pyx_args, 114);
      values[115] = PyTuple_GET_ITEM(__pyx_args, 115);
      values[116] = PyTuple_GET_ITEM(__pyx_args, 116);
      values[117] = PyTuple_GET_ITEM(__pyx_args, 117);
      values[118] = PyTuple_GET_ITEM(__pyx_args, 118);
      values[119] = PyTuple_GET_ITEM(__pyx_args, 119);
      values[120] = PyTuple_GET_ITEM(__pyx_args, 120);
      values[121] = PyTuple_GET_ITEM(__pyx_args, 121);
      values[122] = PyTuple_GET_ITEM(__pyx_args, 122);
      values[123] = PyTuple_GET_ITEM(__pyx_args, 123);
      values[124] = PyTuple_GET_ITEM(__pyx_args, 124);
      values[125] = PyTuple_GET_ITEM(__pyx_args, 125);
      values[126] = PyTuple_GET_ITEM(__pyx_args, 126);
      values[127] = PyTuple_GET_ITEM(__pyx_args, 127);
      values[128] = PyTuple_GET_ITEM(__pyx_args, 128);
      values[129] = PyTuple_GET_ITEM(__pyx_args, 129);
      values[130] = PyTuple_GET_ITEM(__pyx_args, 130);
      values[131] = PyTuple_GET_ITEM(__pyx_args, 131);
      values[132] = PyTuple_GET_ITEM(__pyx_args, 132);
      values[133] = PyTuple_GET_ITEM(__pyx_args, 133);
      values[134] = PyTuple_GET_ITEM(__pyx_args, 134);
      values[135] = PyTuple_GET_ITEM(__pyx_args, 135);
      values[136] = PyTuple_GET_ITEM(__pyx_args, 136);
      values[137] = PyTuple_GET_ITEM(__pyx_args, 137);
      values[138] = PyTuple_GET_ITEM(__pyx_args, 138);
      values[139] = PyTuple_GET_ITEM(__pyx_args, 139);
      values[140] = PyTuple_GET_ITEM(__pyx_args, 140);
      values[141] = PyTuple_GET_ITEM(__pyx_args, 141);
      values[142] = PyTuple_GET_ITEM(__pyx_args, 142);
      values[143] = PyTuple_GET_ITEM(__pyx_args, 143);
      values[144] = PyTuple_GET_ITEM(__pyx_args, 144);
      values[145] = PyTuple_GET_ITEM(__pyx_args, 145);
      values[146] = PyTuple_GET_ITEM(__pyx_args, 146);
      values[147] = PyTuple_GET_ITEM(__pyx_args, 147);
      values[148] = PyTuple_GET_ITEM(__pyx_args, 148);
      values[149] = PyTuple_GET_ITEM(__pyx_args, 149);
      values[150] = PyTuple_GET_ITEM(__pyx_args, 150);
      values[151] = PyTuple_GET_ITEM(__pyx_args, 151);
      values[152] = PyTuple_GET_ITEM(__pyx_args, 152);
      values[153] = PyTuple_GET_ITEM(__pyx_args, 153);
      values[154] = PyTuple_GET_ITEM(__pyx_args, 154);
      values[155] = PyTuple_GET_ITEM(__pyx_args, 155);
      values[156] = PyTuple_GET_ITEM(__pyx_args, 156);
      values[157] = PyTuple_GET_ITEM(__pyx_args, 157);
      values[158] = PyTuple_GET_ITEM(__pyx_args, 158);
      values[159] = PyTuple_GET_ITEM(__pyx_args, 159);
      values[160] = PyTuple_GET_ITEM(__pyx_args, 160);
      values[161] = PyTuple_GET_ITEM(__pyx_args, 161);
      values[162] = PyTuple_GET_ITEM(__pyx_args, 162);
      values[163] = PyTuple_GET_ITEM(__pyx_args, 163);
      values[164] = PyTuple_GET_ITEM(__pyx_args, 164);
      values[165] = PyTuple_GET_ITEM(__pyx_args, 165);
      values[166] = PyTuple_GET_ITEM(__pyx_args, 166);
      values[167] = PyTuple_GET_ITEM(__pyx_args, 167);
      values[168] = PyTuple_GET_ITEM(__pyx_args, 168);
      values[169] = PyTuple_GET_ITEM(__pyx_args, 169);
      values[170] = PyTuple_GET_ITEM(__pyx_args, 170);
      values[171] = PyTuple_GET_ITEM(__pyx_args, 171);
      values[172] = PyTuple_GET_ITEM(__pyx_args, 172);
      values[173] = PyTuple_GET_ITEM(__pyx_args, 173);
      values[174] = PyTuple_GET_ITEM(__pyx_args, 174);
      values[175] = PyTuple_GET_ITEM(__pyx_args, 175);
      values[176] = PyTuple_GET_ITEM(__pyx_args, 176);
      values[177] = PyTuple_GET_ITEM(__pyx_args, 177);
      values[178] = PyTuple_GET_ITEM(__pyx_args, 178);
      values[179] = PyTuple_GET_ITEM(__pyx_args, 179);
      values[180] = PyTuple_GET_ITEM(__pyx_args, 180);
      values[181] = PyTuple_GET_ITEM(__pyx_args, 181);
      values[182] = PyTuple_GET_ITEM(__pyx_args, 182);
      values[183] = PyTuple_GET_ITEM(__pyx_args, 183);
      values[184] = PyTuple_GET_ITEM(__pyx_args, 184);
      values[185] = PyTuple_GET_ITEM(__pyx_args, 185);
      values[186] = PyTuple_GET_ITEM(__pyx_args, 186);
      values[187] = PyTuple_GET_ITEM(__pyx_args, 187);
      values[188] = PyTuple_GET_ITEM(__pyx_args, 188);
      values[189] = PyTuple_GET_ITEM(__pyx_args, 189);
      values[190] = PyTuple_GET_ITEM(__pyx_args, 190);
      values[191] = PyTuple_GET_ITEM(__pyx_args, 191);
      values[192] = PyTuple_GET_ITEM(__pyx_args, 192);
      values[193] = PyTuple_GET_ITEM(__pyx_args, 193);
      values[194] = PyTuple_GET_ITEM(__pyx_args, 194);
      values[195] = PyTuple_GET_ITEM(__pyx_args, 195);
      values[196] = PyTuple_GET_ITEM(__pyx_args, 196);
      values[197] = PyTuple_GET_ITEM(__pyx_args, 197);
      values[198] = PyTuple_GET_ITEM(__pyx_args, 198);
      values[199] = PyTuple_GET_ITEM(__pyx_args, 199);
      values[200] = PyTuple_GET_ITEM(__pyx_args, 200);
      values[201] = PyTuple_GET_ITEM(__pyx_args, 201);
      values[202] = PyTuple_GET_ITEM(__pyx_args, 202);
      values[203] = PyTuple_GET_ITEM(__pyx_args, 203);
      values[204] = PyTuple_GET_ITEM(__pyx_args, 204);
      values[205] = PyTuple_GET_ITEM(__pyx_args, 205);
      values[206] = PyTuple_GET_ITEM(__pyx_args, 206);
      values[207] = PyTuple_GET_ITEM(__pyx_args, 207);
      values[208] = PyTuple_GET_ITEM(__pyx_args, 208);
      values[209] = PyTuple_GET_ITEM(__pyx_args, 209);
      values[210] = PyTuple_GET_ITEM(__pyx_args, 210);
      values[211] = PyTuple_GET_ITEM(__pyx_args, 211);
      values[212] = PyTuple_GET_ITEM(__pyx_args, 212);
      values[213] = PyTuple_GET_ITEM(__pyx_args, 213);
      values[214] = PyTuple_GET_ITEM(__pyx_args, 214);
      values[215] = PyTuple_GET_ITEM(__pyx_args, 215);
      values[216] = PyTuple_GET_ITEM(__pyx_args, 216);
      values[217] = PyTuple_GET_ITEM(__pyx_args, 217);
      values[218] = PyTuple_GET_ITEM(__pyx_args, 218);
      values[219] = PyTuple_GET_ITEM(__pyx_args, 219);
      values[220] = PyTuple_GET_ITEM(__pyx_args, 220);
      values[221] = PyTuple_GET_ITEM(__pyx_args, 221);
      values[222] = PyTuple_GET_ITEM(__pyx_args, 222);
      values[223] = PyTuple_GET_ITEM(__pyx_args, 223);
      values[224] = PyTuple_GET_ITEM(__pyx_args, 224);
      values[225] = PyTuple_GET_ITEM(__pyx_args, 225);
      values[226] = PyTuple_GET_ITEM(__pyx_args, 226);
      values[227] = PyTuple_GET_ITEM(__pyx_args, 227);
      values[228] = PyTuple_GET_ITEM(__pyx_args, 228);
      values[229] = PyTuple_GET_ITEM(__pyx_args, 229);
      values[230] = PyTuple_GET_ITEM(__pyx_args, 230);
      values[231] = PyTuple_GET_ITEM(__pyx_args, 231);
    }
    __pyx_v_mesh_trial_ref = ((PyArrayObject *)values[0]);
    __pyx_v_mesh_grad_trial_ref = ((PyArrayObject *)values[1]);
    __pyx_v_mesh_dof = ((PyArrayObject *)values[2]);
    __pyx_v_mesh_velocity_dof = ((PyArrayObject *)values[3]);
    __pyx_v_MOVING_DOMAIN = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_MOVING_DOMAIN == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4290, __pyx_L3_error)
    __pyx_v_PSTAB = __pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_PSTAB == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4291, __pyx_L3_error)
    __pyx_v_mesh_l2g = ((PyArrayObject *)values[6]);
    __pyx_v_dV_ref = ((PyArrayObject *)values[7]);
    __pyx_v_p_trial_ref = ((PyArrayObject *)values[8]);
    __pyx_v_p_grad_trial_ref = ((PyArrayObject *)values[9]);
    __pyx_v_p_test_ref = ((PyArrayObject *)values[10]);
    __pyx_v_p_grad_test_ref = ((PyArrayObject *)values[11]);
    __pyx_v_q_p = ((PyArrayObject *)values[12]);
    __pyx_v_q_grad_p = ((PyArrayObject *)values[13]);
    __pyx_v_ebqe_p = ((PyArrayObject *)values[14]);
    __pyx_v_ebqe_grad_p = ((PyArrayObject *)values[15]);
    __pyx_v_vel_trial_ref = ((PyArrayObject *)values[16]);
    __pyx_v_vel_grad_trial_ref = ((PyArrayObject *)values[17]);
    __pyx_v_vel_hess_trial_ref = ((PyArrayObject *)values[18]);
    __pyx_v_vel_test_ref = ((PyArrayObject *)values[19]);
    __pyx_v_vel_grad_test_ref = ((PyArrayObject *)values[20]);
    __pyx_v_mesh_trial_trace_ref = ((PyArrayObject *)values[21]);
    __pyx_v_mesh_grad_trial_trace_ref = ((PyArrayObject *)values[22]);
    __pyx_v_dS_ref = ((PyArrayObject *)values[23]);
    __pyx_v_p_trial_trace_ref = ((PyArrayObject *)values[24]);
    __pyx_v_p_grad_trial_trace_ref = ((PyArrayObject *)values[25]);
    __pyx_v_p_test_trace_ref = ((PyArrayObject *)values[26]);
    __pyx_v_p_grad_test_trace_ref = ((PyArrayObject *)values[27]);
    __pyx_v_vel_trial_trace_ref = ((PyArrayObject *)values[28]);
    __pyx_v_vel_grad_trial_trace_ref = ((PyArrayObject *)values[29]);
    __pyx_v_vel_test_trace_ref = ((PyArrayObject *)values[30]);
    __pyx_v_vel_grad_test_trace_ref = ((PyArrayObject *)values[31]);
    __pyx_v_normal_ref = ((PyArrayObject *)values[32]);
    __pyx_v_boundaryJac_ref = ((PyArrayObject *)values[33]);
    __pyx_v_eb_adjoint_sigma = __pyx_PyFloat_AsDouble(values[34]); if (unlikely((__pyx_v_eb_adjoint_sigma == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4320, __pyx_L3_error)
    __pyx_v_elementDiameter = ((PyArrayObject *)values[35]);
    __pyx_v_nodeDiametersArray = ((PyArrayObject *)values[36]);
    __pyx_v_hFactor = __pyx_PyFloat_AsDouble(values[37]); if (unlikely((__pyx_v_hFactor == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4323, __pyx_L3_error)
    __pyx_v_nElements_global = __Pyx_PyInt_As_int(values[38]); if (unlikely((__pyx_v_nElements_global == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4324, __pyx_L3_error)
    __pyx_v_nElements_owned = __Pyx_PyInt_As_int(values[39]); if (unlikely((__pyx_v_nElements_owned == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4325, __pyx_L3_error)
    __pyx_v_nElementBoundaries_owned = __Pyx_PyInt_As_int(values[40]); if (unlikely((__pyx_v_nElementBoundaries_owned == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4326, __pyx_L3_error)
    __pyx_v_useRBLES = __pyx_PyFloat_AsDouble(values[41]); if (unlikely((__pyx_v_useRBLES == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4327, __pyx_L3_error)
    __pyx_v_useMetrics = __pyx_PyFloat_AsDouble(values[42]); if (unlikely((__pyx_v_useMetrics == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4328, __pyx_L3_error)
    __pyx_v_alphaBDF = __pyx_PyFloat_AsDouble(values[43]); if (unlikely((__pyx_v_alphaBDF == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4329, __pyx_L3_error)
    __pyx_v_epsFact_rho = __pyx_PyFloat_AsDouble(values[44]); if (unlikely((__pyx_v_epsFact_rho == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4330, __pyx_L3_error)
    __pyx_v_epsFact_mu = __pyx_PyFloat_AsDouble(values[45]); if (unlikely((__pyx_v_epsFact_mu == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4331, __pyx_L3_error)
    __pyx_v_sigma = __pyx_PyFloat_AsDouble(values[46]); if (unlikely((__pyx_v_sigma == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4332, __pyx_L3_error)
    __pyx_v_rho_0 = __pyx_PyFloat_AsDouble(values[47]); if (unlikely((__pyx_v_rho_0 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4333, __pyx_L3_error)
    __pyx_v_nu_0 = __pyx_PyFloat_AsDouble(values[48]); if (unlikely((__pyx_v_nu_0 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4334, __pyx_L3_error)
    __pyx_v_rho_1 = __pyx_PyFloat_AsDouble(values[49]); if (unlikely((__pyx_v_rho_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4335, __pyx_L3_error)
    __pyx_v_nu_1 = __pyx_PyFloat_AsDouble(values[50]); if (unlikely((__pyx_v_nu_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4336, __pyx_L3_error)
    __pyx_v_smagorinskyConstant = __pyx_PyFloat_AsDouble(values[51]); if (unlikely((__pyx_v_smagorinskyConstant == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4337, __pyx_L3_error)
    __pyx_v_turbulenceClosureModel = __Pyx_PyInt_As_int(values[52]); if (unlikely((__pyx_v_turbulenceClosureModel == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4338, __pyx_L3_error)
    __pyx_v_Ct_sge = __pyx_PyFloat_AsDouble(values[53]); if (unlikely((__pyx_v_Ct_sge == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4339, __pyx_L3_error)
    __pyx_v_Cd_sge = __pyx_PyFloat_AsDouble(values[54]); if (unlikely((__pyx_v_Cd_sge == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4340, __pyx_L3_error)
    __pyx_v_C_dc = __pyx_PyFloat_AsDouble(values[55]); if (unlikely((__pyx_v_C_dc == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4341, __pyx_L3_error)
    __pyx_v_C_b = __pyx_PyFloat_AsDouble(values[56]); if (unlikely((__pyx_v_C_b == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4342, __pyx_L3_error)
    __pyx_v_eps_solid = ((PyArrayObject *)values[57]);
    __pyx_v_phi_solid = ((PyArrayObject *)values[58]);
    __pyx_v_q_velocity_solid = ((PyArrayObject *)values[59]);
    __pyx_v_q_vos = ((PyArrayObject *)values[60]);
    __pyx_v_q_dvos_dt = ((PyArrayObject *)values[61]);
    __pyx_v_q_dragAlpha = ((PyArrayObject *)values[62]);
    __pyx_v_q_dragBeta = ((PyArrayObject *)values[63]);
    __pyx_v_q_mass_source = ((PyArrayObject *)values[64]);
    __pyx_v_q_turb_var_0 = ((PyArrayObject *)values[65]);
    __pyx_v_q_turb_var_1 = ((PyArrayObject *)values[66]);
    __pyx_v_q_turb_var_grad_0 = ((PyArrayObject *)values[67]);
    __pyx_v_q_eddy_viscosity = ((PyArrayObject *)values[68]);
    __pyx_v_p_l2g = ((PyArrayObject *)values[69]);
    __pyx_v_vel_l2g = ((PyArrayObject *)values[70]);
    __pyx_v_p_dof = ((PyArrayObject *)values[71]);
    __pyx_v_u_dof = ((PyArrayObject *)values[72]);
    __pyx_v_v_dof = ((PyArrayObject *)values[73]);
    __pyx_v_w_dof = ((PyArrayObject *)values[74]);
    __pyx_v_u_dof_old = ((PyArrayObject *)values[75]);
    __pyx_v_v_dof_old = ((PyArrayObject *)values[76]);
    __pyx_v_w_dof_old = ((PyArrayObject *)values[77]);
    __pyx_v_u_dof_old_old = ((PyArrayObject *)values[78]);
    __pyx_v_v_dof_old_old = ((PyArrayObject *)values[79]);
    __pyx_v_w_dof_old_old = ((PyArrayObject *)values[80]);
    __pyx_v_g = ((PyArrayObject *)values[81]);
    __pyx_v_useVF = __pyx_PyFloat_AsDouble(values[82]); if (unlikely((__pyx_v_useVF == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4370, __pyx_L3_error)
    __pyx_v_vf = ((PyArrayObject *)values[83]);
    __pyx_v_phi = ((PyArrayObject *)values[84]);
    __pyx_v_normal_phi = ((PyArrayObject *)values[85]);
    __pyx_v_kappa_phi = ((PyArrayObject *)values[86]);
    __pyx_v_q_mom_u_acc = ((PyArrayObject *)values[87]);
    __pyx_v_q_mom_v_acc = ((PyArrayObject *)values[88]);
    __pyx_v_q_mom_w_acc = ((PyArrayObject *)values[89]);
    __pyx_v_q_mass_adv = ((PyArrayObject *)values[90]);
    __pyx_v_q_mom_u_acc_beta_bdf = ((PyArrayObject *)values[91]);
    __pyx_v_q_mom_v_acc_beta_bdf = ((PyArrayObject *)values[92]);
    __pyx_v_q_mom_w_acc_beta_bdf = ((PyArrayObject *)values[93]);
    __pyx_v_q_dV = ((PyArrayObject *)values[94]);
    __pyx_v_q_dV_last = ((PyArrayObject *)values[95]);
    __pyx_v_q_velocity_sge = ((PyArrayObject *)values[96]);
    __pyx_v_ebqe_velocity_star = ((PyArrayObject *)values[97]);
    __pyx_v_q_cfl = ((PyArrayObject *)values[98]);
    __pyx_v_q_numDiff_u = ((PyArrayObject *)values[99]);
    __pyx_v_q_numDiff_v = ((PyArrayObject *)values[100]);
    __pyx_v_q_numDiff_w = ((PyArrayObject *)values[101]);
    __pyx_v_q_numDiff_u_last = ((PyArrayObject *)values[102]);
    __pyx_v_q_numDiff_v_last = ((PyArrayObject *)values[103]);
    __pyx_v_q_numDiff_w_last = ((PyArrayObject *)values[104]);
    __pyx_v_sdInfo_u_u_rowptr = ((PyArrayObject *)values[105]);
    __pyx_v_sdInfo_u_u_colind = ((PyArrayObject *)values[106]);
    __pyx_v_sdInfo_u_v_rowptr = ((PyArrayObject *)values[107]);
    __pyx_v_sdInfo_u_v_colind = ((PyArrayObject *)values[108]);
    __pyx_v_sdInfo_u_w_rowptr = ((PyArrayObject *)values[109]);
    __pyx_v_sdInfo_u_w_colind = ((PyArrayObject *)values[110]);
    __pyx_v_sdInfo_v_v_rowptr = ((PyArrayObject *)values[111]);
    __pyx_v_sdInfo_v_v_colind = ((PyArrayObject *)values[112]);
    __pyx_v_sdInfo_v_u_rowptr = ((PyArrayObject *)values[113]);
    __pyx_v_sdInfo_v_u_colind = ((PyArrayObject *)values[114]);
    __pyx_v_sdInfo_v_w_rowptr = ((PyArrayObject *)values[115]);
    __pyx_v_sdInfo_v_w_colind = ((PyArrayObject *)values[116]);
    __pyx_v_sdInfo_w_w_rowptr = ((PyArrayObject *)values[117]);
    __pyx_v_sdInfo_w_w_colind = ((PyArrayObject *)values[118]);
    __pyx_v_sdInfo_w_u_rowptr = ((PyArrayObject *)values[119]);
    __pyx_v_sdInfo_w_u_colind = ((PyArrayObject *)values[120]);
    __pyx_v_sdInfo_w_v_rowptr = ((PyArrayObject *)values[121]);
    __pyx_v_sdInfo_w_v_colind = ((PyArrayObject *)values[122]);
    __pyx_v_offset_p = __Pyx_PyInt_As_int(values[123]); if (unlikely((__pyx_v_offset_p == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4396, __pyx_L3_error)
    __pyx_v_offset_u = __Pyx_PyInt_As_int(values[124]); if (unlikely((__pyx_v_offset_u == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4396, __pyx_L3_error)
    __pyx_v_offset_v = __Pyx_PyInt_As_int(values[125]); if (unlikely((__pyx_v_offset_v == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4396, __pyx_L3_error)
    __pyx_v_offset_w = __Pyx_PyInt_As_int(values[126]); if (unlikely((__pyx_v_offset_w == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4396, __pyx_L3_error)
    __pyx_v_stride_p = __Pyx_PyInt_As_int(values[127]); if (unlikely((__pyx_v_stride_p == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4397, __pyx_L3_error)
    __pyx_v_stride_u = __Pyx_PyInt_As_int(values[128]); if (unlikely((__pyx_v_stride_u == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4397, __pyx_L3_error)
    __pyx_v_stride_v = __Pyx_PyInt_As_int(values[129]); if (unlikely((__pyx_v_stride_v == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4397, __pyx_L3_error)
    __pyx_v_stride_w = __Pyx_PyInt_As_int(values[130]); if (unlikely((__pyx_v_stride_w == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4397, __pyx_L3_error)
    __pyx_v_globalResidual = ((PyArrayObject *)values[131]);
    __pyx_v_nExteriorElementBoundaries_global = __Pyx_PyInt_As_int(values[132]); if (unlikely((__pyx_v_nExteriorElementBoundaries_global == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4399, __pyx_L3_error)
    __pyx_v_exteriorElementBoundariesArray = ((PyArrayObject *)values[133]);
    __pyx_v_elementBoundaryElementsArray = ((PyArrayObject *)values[134]);
    __pyx_v_elementBoundaryLocalElementBoundariesArray = ((PyArrayObject *)values[135]);
    __pyx_v_ebqe_vf_ext = ((PyArrayObject *)values[136]);
    __pyx_v_bc_ebqe_vf_ext = ((PyArrayObject *)values[137]);
    __pyx_v_ebqe_phi_ext = ((PyArrayObject *)values[138]);
    __pyx_v_bc_ebqe_phi_ext = ((PyArrayObject *)values[139]);
    __pyx_v_ebqe_normal_phi_ext = ((PyArrayObject *)values[140]);
    __pyx_v_ebqe_kappa_phi_ext = ((PyArrayObject *)values[141]);
    __pyx_v_ebqe_vos_ext = ((PyArrayObject *)values[142]);
    __pyx_v_ebqe_turb_var_0 = ((PyArrayObject *)values[143]);
    __pyx_v_ebqe_turb_var_1 = ((PyArrayObject *)values[144]);
    __pyx_v_isDOFBoundary_p = ((PyArrayObject *)values[145]);
    __pyx_v_isDOFBoundary_u = ((PyArrayObject *)values[146]);
    __pyx_v_isDOFBoundary_v = ((PyArrayObject *)values[147]);
    __pyx_v_isDOFBoundary_w = ((PyArrayObject *)values[148]);
    __pyx_v_isAdvectiveFluxBoundary_p = ((PyArrayObject *)values[149]);
    __pyx_v_isAdvectiveFluxBoundary_u = ((PyArrayObject *)values[150]);
    __pyx_v_isAdvectiveFluxBoundary_v = ((PyArrayObject *)values[151]);
    __pyx_v_isAdvectiveFluxBoundary_w = ((PyArrayObject *)values[152]);
    __pyx_v_isDiffusiveFluxBoundary_u = ((PyArrayObject *)values[153]);
    __pyx_v_isDiffusiveFluxBoundary_v = ((PyArrayObject *)values[154]);
    __pyx_v_isDiffusiveFluxBoundary_w = ((PyArrayObject *)values[155]);
    __pyx_v_ebqe_bc_p_ext = ((PyArrayObject *)values[156]);
    __pyx_v_ebqe_bc_flux_mass_ext = ((PyArrayObject *)values[157]);
    __pyx_v_ebqe_bc_flux_mom_u_adv_ext = ((PyArrayObject *)values[158]);
    __pyx_v_ebqe_bc_flux_mom_v_adv_ext = ((PyArrayObject *)values[159]);
    __pyx_v_ebqe_bc_flux_mom_w_adv_ext = ((PyArrayObject *)values[160]);
    __pyx_v_ebqe_bc_u_ext = ((PyArrayObject *)values[161]);
    __pyx_v_ebqe_bc_flux_u_diff_ext = ((PyArrayObject *)values[162]);
    __pyx_v_ebqe_penalty_ext = ((PyArrayObject *)values[163]);
    __pyx_v_ebqe_bc_v_ext = ((PyArrayObject *)values[164]);
    __pyx_v_ebqe_bc_flux_v_diff_ext = ((PyArrayObject *)values[165]);
    __pyx_v_ebqe_bc_w_ext = ((PyArrayObject *)values[166]);
    __pyx_v_ebqe_bc_flux_w_diff_ext = ((PyArrayObject *)values[167]);
    __pyx_v_q_x = ((PyArrayObject *)values[168]);
    __pyx_v_q_velocity = ((PyArrayObject *)values[169]);
    __pyx_v_ebqe_velocity = ((PyArrayObject *)values[170]);
    __pyx_v_q_grad_u = ((PyArrayObject *)values[171]);
    __pyx_v_q_grad_v = ((PyArrayObject *)values[172]);
    __pyx_v_q_grad_w = ((PyArrayObject *)values[173]);
    __pyx_v_q_divU = ((PyArrayObject *)values[174]);
    __pyx_v_ebqe_grad_u = ((PyArrayObject *)values[175]);
    __pyx_v_ebqe_grad_v = ((PyArrayObject *)values[176]);
    __pyx_v_ebqe_grad_w = ((PyArrayObject *)values[177]);
    __pyx_v_flux = ((PyArrayObject *)values[178]);
    __pyx_v_elementResidual_p = ((PyArrayObject *)values[179]);
    __pyx_v_elementFlags = ((PyArrayObject *)values[180]);
    __pyx_v_boundaryFlags = ((PyArrayObject *)values[181]);
    __pyx_v_barycenters = ((PyArrayObject *)values[182]);
    __pyx_v_wettedAreas = ((PyArrayObject *)values[183]);
    __pyx_v_netForces_p = ((PyArrayObject *)values[184]);
    __pyx_v_netForces_v = ((PyArrayObject *)values[185]);
    __pyx_v_netMoments = ((PyArrayObject *)values[186]);
    __pyx_v_q_rho = ((PyArrayObject *)values[187]);
    __pyx_v_ebqe_rho = ((PyArrayObject *)values[188]);
    __pyx_v_q_nu = ((PyArrayObject *)values[189]);
    __pyx_v_ebqe_nu = ((PyArrayObject *)values[190]);
    __pyx_v_nParticles = __Pyx_PyInt_As_int(values[191]); if (unlikely((__pyx_v_nParticles == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4460, __pyx_L3_error)
    __pyx_v_particle_epsFact = __pyx_PyFloat_AsDouble(values[192]); if (unlikely((__pyx_v_particle_epsFact == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4461, __pyx_L3_error)
    __pyx_v_particle_alpha = __pyx_PyFloat_AsDouble(values[193]); if (unlikely((__pyx_v_particle_alpha == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4462, __pyx_L3_error)
    __pyx_v_particle_beta = __pyx_PyFloat_AsDouble(values[194]); if (unlikely((__pyx_v_particle_beta == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4463, __pyx_L3_error)
    __pyx_v_particle_penalty_constant = __pyx_PyFloat_AsDouble(values[195]); if (unlikely((__pyx_v_particle_penalty_constant == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4464, __pyx_L3_error)
    __pyx_v_particle_signed_distances = ((PyArrayObject *)values[196]);
    __pyx_v_particle_signed_distance_normals = ((PyArrayObject *)values[197]);
    __pyx_v_particle_velocities = ((PyArrayObject *)values[198]);
    __pyx_v_particle_centroids = ((PyArrayObject *)values[199]);
    __pyx_v_particle_netForces = ((PyArrayObject *)values[200]);
    __pyx_v_particle_netMoments = ((PyArrayObject *)values[201]);
    __pyx_v_particle_surfaceArea = ((PyArrayObject *)values[202]);
    __pyx_v_particle_nitsche = __pyx_PyFloat_AsDouble(values[203]); if (unlikely((__pyx_v_particle_nitsche == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4472, __pyx_L3_error)
    __pyx_v_STABILIZATION_TYPE = __Pyx_PyInt_As_int(values[204]); if (unlikely((__pyx_v_STABILIZATION_TYPE == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4473, __pyx_L3_error)
    __pyx_v_areaRefElement = __pyx_PyFloat_AsDouble(values[205]); if (unlikely((__pyx_v_areaRefElement == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4474, __pyx_L3_error)
    __pyx_v_cMax = __pyx_PyFloat_AsDouble(values[206]); if (unlikely((__pyx_v_cMax == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4475, __pyx_L3_error)
    __pyx_v_cE = __pyx_PyFloat_AsDouble(values[207]); if (unlikely((__pyx_v_cE == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4476, __pyx_L3_error)
    __pyx_v_forcex = ((PyArrayObject *)values[208]);
    __pyx_v_forcey = ((PyArrayObject *)values[209]);
    __pyx_v_forcez = ((PyArrayObject *)values[210]);
    __pyx_v_KILL_PRESSURE_TERM = __Pyx_PyInt_As_int(values[211]); if (unlikely((__pyx_v_KILL_PRESSURE_TERM == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4480, __pyx_L3_error)
    __pyx_v_dt = __pyx_PyFloat_AsDouble(values[212]); if (unlikely((__pyx_v_dt == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4481, __pyx_L3_error)
    __pyx_v_entropyResidualAtCell = ((PyArrayObject *)values[213]);
    __pyx_v_maxSpeed2AtCell = ((PyArrayObject *)values[214]);
    __pyx_v_maxSpeed2AtOmega = __pyx_PyFloat_AsDouble(values[215]); if (unlikely((__pyx_v_maxSpeed2AtOmega == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4484, __pyx_L3_error)
    __pyx_v_rhoAtCell = ((PyArrayObject *)values[216]);
    __pyx_v_muAtCell = ((PyArrayObject *)values[217]);
    __pyx_v_quantDOFs = ((PyArrayObject *)values[218]);
    __pyx_v_numDOFsPerEqn = __Pyx_PyInt_As_int(values[219]); if (unlikely((__pyx_v_numDOFsPerEqn == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4488, __pyx_L3_error)
    __pyx_v_csrRowIndeces_DofLoops = ((PyArrayObject *)values[220]);
    __pyx_v_csrColumnOffsets_DofLoops = ((PyArrayObject *)values[221]);
    __pyx_v_ML = ((PyArrayObject *)values[222]);
    __pyx_v_Cx = ((PyArrayObject *)values[223]);
    __pyx_v_Cy = ((PyArrayObject *)values[224]);
    __pyx_v_Cz = ((PyArrayObject *)values[225]);
    __pyx_v_MATERIAL_PARAMETERS_AS_FUNCTION = __Pyx_PyInt_As_int(values[226]); if (unlikely((__pyx_v_MATERIAL_PARAMETERS_AS_FUNCTION == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4495, __pyx_L3_error)
    __pyx_v_density_as_function = ((PyArrayObject *)values[227]);
    __pyx_v_dynamic_viscosity_as_function = ((PyArrayObject *)values[228]);
    __pyx_v_ebqe_density_as_function = ((PyArrayObject *)values[229]);
    __pyx_v_ebqe_dynamic_viscosity_as_function = ((PyArrayObject *)values[230]);
    __pyx_v_order_polynomial = __pyx_PyFloat_AsDouble(values[231]); if (unlikely((__pyx_v_order_polynomial == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4500, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 232, 232, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4285, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mprans.cRANS3PF.RANS3PF2D.calculateResidual_entropy_viscosity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "mesh_trial_ref", 0))) __PYX_ERR(0, 4286, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_grad_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "mesh_grad_trial_ref", 0))) __PYX_ERR(0, 4287, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_dof), __pyx_ptype_5numpy_ndarray, 1, "mesh_dof", 0))) __PYX_ERR(0, 4288, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_velocity_dof), __pyx_ptype_5numpy_ndarray, 1, "mesh_velocity_dof", 0))) __PYX_ERR(0, 4289, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_l2g), __pyx_ptype_5numpy_ndarray, 1, "mesh_l2g", 0))) __PYX_ERR(0, 4292, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dV_ref), __pyx_ptype_5numpy_ndarray, 1, "dV_ref", 0))) __PYX_ERR(0, 4293, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "p_trial_ref", 0))) __PYX_ERR(0, 4294, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_grad_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "p_grad_trial_ref", 0))) __PYX_ERR(0, 4295, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_test_ref), __pyx_ptype_5numpy_ndarray, 1, "p_test_ref", 0))) __PYX_ERR(0, 4296, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_grad_test_ref), __pyx_ptype_5numpy_ndarray, 1, "p_grad_test_ref", 0))) __PYX_ERR(0, 4297, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_p), __pyx_ptype_5numpy_ndarray, 1, "q_p", 0))) __PYX_ERR(0, 4298, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_grad_p), __pyx_ptype_5numpy_ndarray, 1, "q_grad_p", 0))) __PYX_ERR(0, 4299, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_p), __pyx_ptype_5numpy_ndarray, 1, "ebqe_p", 0))) __PYX_ERR(0, 4300, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_grad_p), __pyx_ptype_5numpy_ndarray, 1, "ebqe_grad_p", 0))) __PYX_ERR(0, 4301, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_trial_ref", 0))) __PYX_ERR(0, 4302, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_grad_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_grad_trial_ref", 0))) __PYX_ERR(0, 4303, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_hess_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_hess_trial_ref", 0))) __PYX_ERR(0, 4304, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_test_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_test_ref", 0))) __PYX_ERR(0, 4305, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_grad_test_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_grad_test_ref", 0))) __PYX_ERR(0, 4306, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "mesh_trial_trace_ref", 0))) __PYX_ERR(0, 4307, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_grad_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "mesh_grad_trial_trace_ref", 0))) __PYX_ERR(0, 4308, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dS_ref), __pyx_ptype_5numpy_ndarray, 1, "dS_ref", 0))) __PYX_ERR(0, 4309, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "p_trial_trace_ref", 0))) __PYX_ERR(0, 4310, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_grad_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "p_grad_trial_trace_ref", 0))) __PYX_ERR(0, 4311, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_test_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "p_test_trace_ref", 0))) __PYX_ERR(0, 4312, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_grad_test_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "p_grad_test_trace_ref", 0))) __PYX_ERR(0, 4313, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_trial_trace_ref", 0))) __PYX_ERR(0, 4314, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_grad_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_grad_trial_trace_ref", 0))) __PYX_ERR(0, 4315, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_test_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_test_trace_ref", 0))) __PYX_ERR(0, 4316, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_grad_test_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_grad_test_trace_ref", 0))) __PYX_ERR(0, 4317, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_normal_ref), __pyx_ptype_5numpy_ndarray, 1, "normal_ref", 0))) __PYX_ERR(0, 4318, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_boundaryJac_ref), __pyx_ptype_5numpy_ndarray, 1, "boundaryJac_ref", 0))) __PYX_ERR(0, 4319, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_elementDiameter), __pyx_ptype_5numpy_ndarray, 1, "elementDiameter", 0))) __PYX_ERR(0, 4321, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_nodeDiametersArray), __pyx_ptype_5numpy_ndarray, 1, "nodeDiametersArray", 0))) __PYX_ERR(0, 4322, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_eps_solid), __pyx_ptype_5numpy_ndarray, 1, "eps_solid", 0))) __PYX_ERR(0, 4344, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_phi_solid), __pyx_ptype_5numpy_ndarray, 1, "phi_solid", 0))) __PYX_ERR(0, 4345, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_velocity_solid), __pyx_ptype_5numpy_ndarray, 1, "q_velocity_solid", 0))) __PYX_ERR(0, 4346, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_vos), __pyx_ptype_5numpy_ndarray, 1, "q_vos", 0))) __PYX_ERR(0, 4347, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_dvos_dt), __pyx_ptype_5numpy_ndarray, 1, "q_dvos_dt", 0))) __PYX_ERR(0, 4348, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_dragAlpha), __pyx_ptype_5numpy_ndarray, 1, "q_dragAlpha", 0))) __PYX_ERR(0, 4349, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_dragBeta), __pyx_ptype_5numpy_ndarray, 1, "q_dragBeta", 0))) __PYX_ERR(0, 4350, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_mass_source), __pyx_ptype_5numpy_ndarray, 1, "q_mass_source", 0))) __PYX_ERR(0, 4351, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_turb_var_0), __pyx_ptype_5numpy_ndarray, 1, "q_turb_var_0", 0))) __PYX_ERR(0, 4352, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_turb_var_1), __pyx_ptype_5numpy_ndarray, 1, "q_turb_var_1", 0))) __PYX_ERR(0, 4353, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_turb_var_grad_0), __pyx_ptype_5numpy_ndarray, 1, "q_turb_var_grad_0", 0))) __PYX_ERR(0, 4354, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_eddy_viscosity), __pyx_ptype_5numpy_ndarray, 1, "q_eddy_viscosity", 0))) __PYX_ERR(0, 4355, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_l2g), __pyx_ptype_5numpy_ndarray, 1, "p_l2g", 0))) __PYX_ERR(0, 4357, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_l2g), __pyx_ptype_5numpy_ndarray, 1, "vel_l2g", 0))) __PYX_ERR(0, 4358, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_dof), __pyx_ptype_5numpy_ndarray, 1, "p_dof", 0))) __PYX_ERR(0, 4359, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_u_dof), __pyx_ptype_5numpy_ndarray, 1, "u_dof", 0))) __PYX_ERR(0, 4360, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_v_dof), __pyx_ptype_5numpy_ndarray, 1, "v_dof", 0))) __PYX_ERR(0, 4361, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_w_dof), __pyx_ptype_5numpy_ndarray, 1, "w_dof", 0))) __PYX_ERR(0, 4362, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_u_dof_old), __pyx_ptype_5numpy_ndarray, 1, "u_dof_old", 0))) __PYX_ERR(0, 4363, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_v_dof_old), __pyx_ptype_5numpy_ndarray, 1, "v_dof_old", 0))) __PYX_ERR(0, 4364, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_w_dof_old), __pyx_ptype_5numpy_ndarray, 1, "w_dof_old", 0))) __PYX_ERR(0, 4365, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_u_dof_old_old), __pyx_ptype_5numpy_ndarray, 1, "u_dof_old_old", 0))) __PYX_ERR(0, 4366, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_v_dof_old_old), __pyx_ptype_5numpy_ndarray, 1, "v_dof_old_old", 0))) __PYX_ERR(0, 4367, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_w_dof_old_old), __pyx_ptype_5numpy_ndarray, 1, "w_dof_old_old", 0))) __PYX_ERR(0, 4368, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_g), __pyx_ptype_5numpy_ndarray, 1, "g", 0))) __PYX_ERR(0, 4369, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vf), __pyx_ptype_5numpy_ndarray, 1, "vf", 0))) __PYX_ERR(0, 4371, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_phi), __pyx_ptype_5numpy_ndarray, 1, "phi", 0))) __PYX_ERR(0, 4372, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_normal_phi), __pyx_ptype_5numpy_ndarray, 1, "normal_phi", 0))) __PYX_ERR(0, 4373, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_kappa_phi), __pyx_ptype_5numpy_ndarray, 1, "kappa_phi", 0))) __PYX_ERR(0, 4374, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_mom_u_acc), __pyx_ptype_5numpy_ndarray, 1, "q_mom_u_acc", 0))) __PYX_ERR(0, 4375, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_mom_v_acc), __pyx_ptype_5numpy_ndarray, 1, "q_mom_v_acc", 0))) __PYX_ERR(0, 4376, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_mom_w_acc), __pyx_ptype_5numpy_ndarray, 1, "q_mom_w_acc", 0))) __PYX_ERR(0, 4377, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_mass_adv), __pyx_ptype_5numpy_ndarray, 1, "q_mass_adv", 0))) __PYX_ERR(0, 4378, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_mom_u_acc_beta_bdf), __pyx_ptype_5numpy_ndarray, 1, "q_mom_u_acc_beta_bdf", 0))) __PYX_ERR(0, 4379, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_mom_v_acc_beta_bdf), __pyx_ptype_5numpy_ndarray, 1, "q_mom_v_acc_beta_bdf", 0))) __PYX_ERR(0, 4379, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_mom_w_acc_beta_bdf), __pyx_ptype_5numpy_ndarray, 1, "q_mom_w_acc_beta_bdf", 0))) __PYX_ERR(0, 4379, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_dV), __pyx_ptype_5numpy_ndarray, 1, "q_dV", 0))) __PYX_ERR(0, 4380, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_dV_last), __pyx_ptype_5numpy_ndarray, 1, "q_dV_last", 0))) __PYX_ERR(0, 4381, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_velocity_sge), __pyx_ptype_5numpy_ndarray, 1, "q_velocity_sge", 0))) __PYX_ERR(0, 4382, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_velocity_star), __pyx_ptype_5numpy_ndarray, 1, "ebqe_velocity_star", 0))) __PYX_ERR(0, 4383, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_cfl), __pyx_ptype_5numpy_ndarray, 1, "q_cfl", 0))) __PYX_ERR(0, 4384, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_numDiff_u), __pyx_ptype_5numpy_ndarray, 1, "q_numDiff_u", 0))) __PYX_ERR(0, 4385, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_numDiff_v), __pyx_ptype_5numpy_ndarray, 1, "q_numDiff_v", 0))) __PYX_ERR(0, 4385, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_numDiff_w), __pyx_ptype_5numpy_ndarray, 1, "q_numDiff_w", 0))) __PYX_ERR(0, 4385, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_numDiff_u_last), __pyx_ptype_5numpy_ndarray, 1, "q_numDiff_u_last", 0))) __PYX_ERR(0, 4386, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_numDiff_v_last), __pyx_ptype_5numpy_ndarray, 1, "q_numDiff_v_last", 0))) __PYX_ERR(0, 4386, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_numDiff_w_last), __pyx_ptype_5numpy_ndarray, 1, "q_numDiff_w_last", 0))) __PYX_ERR(0, 4386, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_u_u_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_u_u_rowptr", 0))) __PYX_ERR(0, 4387, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_u_u_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_u_u_colind", 0))) __PYX_ERR(0, 4387, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_u_v_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_u_v_rowptr", 0))) __PYX_ERR(0, 4388, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_u_v_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_u_v_colind", 0))) __PYX_ERR(0, 4388, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_u_w_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_u_w_rowptr", 0))) __PYX_ERR(0, 4389, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_u_w_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_u_w_colind", 0))) __PYX_ERR(0, 4389, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_v_v_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_v_v_rowptr", 0))) __PYX_ERR(0, 4390, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_v_v_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_v_v_colind", 0))) __PYX_ERR(0, 4390, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_v_u_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_v_u_rowptr", 0))) __PYX_ERR(0, 4391, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_v_u_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_v_u_colind", 0))) __PYX_ERR(0, 4391, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_v_w_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_v_w_rowptr", 0))) __PYX_ERR(0, 4392, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_v_w_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_v_w_colind", 0))) __PYX_ERR(0, 4392, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_w_w_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_w_w_rowptr", 0))) __PYX_ERR(0, 4393, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_w_w_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_w_w_colind", 0))) __PYX_ERR(0, 4393, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_w_u_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_w_u_rowptr", 0))) __PYX_ERR(0, 4394, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_w_u_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_w_u_colind", 0))) __PYX_ERR(0, 4394, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_w_v_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_w_v_rowptr", 0))) __PYX_ERR(0, 4395, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_w_v_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_w_v_colind", 0))) __PYX_ERR(0, 4395, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_globalResidual), __pyx_ptype_5numpy_ndarray, 1, "globalResidual", 0))) __PYX_ERR(0, 4398, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_exteriorElementBoundariesArray), __pyx_ptype_5numpy_ndarray, 1, "exteriorElementBoundariesArray", 0))) __PYX_ERR(0, 4400, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_elementBoundaryElementsArray), __pyx_ptype_5numpy_ndarray, 1, "elementBoundaryElementsArray", 0))) __PYX_ERR(0, 4401, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_elementBoundaryLocalElementBoundariesArray), __pyx_ptype_5numpy_ndarray, 1, "elementBoundaryLocalElementBoundariesArray", 0))) __PYX_ERR(0, 4402, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_vf_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_vf_ext", 0))) __PYX_ERR(0, 4403, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_bc_ebqe_vf_ext), __pyx_ptype_5numpy_ndarray, 1, "bc_ebqe_vf_ext", 0))) __PYX_ERR(0, 4404, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_phi_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_phi_ext", 0))) __PYX_ERR(0, 4405, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_bc_ebqe_phi_ext), __pyx_ptype_5numpy_ndarray, 1, "bc_ebqe_phi_ext", 0))) __PYX_ERR(0, 4406, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_normal_phi_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_normal_phi_ext", 0))) __PYX_ERR(0, 4407, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_kappa_phi_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_kappa_phi_ext", 0))) __PYX_ERR(0, 4408, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_vos_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_vos_ext", 0))) __PYX_ERR(0, 4410, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_turb_var_0), __pyx_ptype_5numpy_ndarray, 1, "ebqe_turb_var_0", 0))) __PYX_ERR(0, 4411, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_turb_var_1), __pyx_ptype_5numpy_ndarray, 1, "ebqe_turb_var_1", 0))) __PYX_ERR(0, 4412, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isDOFBoundary_p), __pyx_ptype_5numpy_ndarray, 1, "isDOFBoundary_p", 0))) __PYX_ERR(0, 4414, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isDOFBoundary_u), __pyx_ptype_5numpy_ndarray, 1, "isDOFBoundary_u", 0))) __PYX_ERR(0, 4415, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isDOFBoundary_v), __pyx_ptype_5numpy_ndarray, 1, "isDOFBoundary_v", 0))) __PYX_ERR(0, 4416, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isDOFBoundary_w), __pyx_ptype_5numpy_ndarray, 1, "isDOFBoundary_w", 0))) __PYX_ERR(0, 4417, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isAdvectiveFluxBoundary_p), __pyx_ptype_5numpy_ndarray, 1, "isAdvectiveFluxBoundary_p", 0))) __PYX_ERR(0, 4418, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isAdvectiveFluxBoundary_u), __pyx_ptype_5numpy_ndarray, 1, "isAdvectiveFluxBoundary_u", 0))) __PYX_ERR(0, 4419, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isAdvectiveFluxBoundary_v), __pyx_ptype_5numpy_ndarray, 1, "isAdvectiveFluxBoundary_v", 0))) __PYX_ERR(0, 4420, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isAdvectiveFluxBoundary_w), __pyx_ptype_5numpy_ndarray, 1, "isAdvectiveFluxBoundary_w", 0))) __PYX_ERR(0, 4421, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isDiffusiveFluxBoundary_u), __pyx_ptype_5numpy_ndarray, 1, "isDiffusiveFluxBoundary_u", 0))) __PYX_ERR(0, 4422, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isDiffusiveFluxBoundary_v), __pyx_ptype_5numpy_ndarray, 1, "isDiffusiveFluxBoundary_v", 0))) __PYX_ERR(0, 4423, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isDiffusiveFluxBoundary_w), __pyx_ptype_5numpy_ndarray, 1, "isDiffusiveFluxBoundary_w", 0))) __PYX_ERR(0, 4424, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_p_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_p_ext", 0))) __PYX_ERR(0, 4425, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_flux_mass_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_flux_mass_ext", 0))) __PYX_ERR(0, 4426, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_flux_mom_u_adv_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_flux_mom_u_adv_ext", 0))) __PYX_ERR(0, 4427, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_flux_mom_v_adv_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_flux_mom_v_adv_ext", 0))) __PYX_ERR(0, 4428, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_flux_mom_w_adv_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_flux_mom_w_adv_ext", 0))) __PYX_ERR(0, 4429, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_u_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_u_ext", 0))) __PYX_ERR(0, 4430, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_flux_u_diff_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_flux_u_diff_ext", 0))) __PYX_ERR(0, 4431, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_penalty_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_penalty_ext", 0))) __PYX_ERR(0, 4432, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_v_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_v_ext", 0))) __PYX_ERR(0, 4433, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_flux_v_diff_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_flux_v_diff_ext", 0))) __PYX_ERR(0, 4434, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_w_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_w_ext", 0))) __PYX_ERR(0, 4435, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_flux_w_diff_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_flux_w_diff_ext", 0))) __PYX_ERR(0, 4436, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_x), __pyx_ptype_5numpy_ndarray, 1, "q_x", 0))) __PYX_ERR(0, 4437, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_velocity), __pyx_ptype_5numpy_ndarray, 1, "q_velocity", 0))) __PYX_ERR(0, 4438, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_velocity), __pyx_ptype_5numpy_ndarray, 1, "ebqe_velocity", 0))) __PYX_ERR(0, 4439, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_grad_u), __pyx_ptype_5numpy_ndarray, 1, "q_grad_u", 0))) __PYX_ERR(0, 4440, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_grad_v), __pyx_ptype_5numpy_ndarray, 1, "q_grad_v", 0))) __PYX_ERR(0, 4441, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_grad_w), __pyx_ptype_5numpy_ndarray, 1, "q_grad_w", 0))) __PYX_ERR(0, 4442, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_divU), __pyx_ptype_5numpy_ndarray, 1, "q_divU", 0))) __PYX_ERR(0, 4443, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_grad_u), __pyx_ptype_5numpy_ndarray, 1, "ebqe_grad_u", 0))) __PYX_ERR(0, 4444, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_grad_v), __pyx_ptype_5numpy_ndarray, 1, "ebqe_grad_v", 0))) __PYX_ERR(0, 4445, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_grad_w), __pyx_ptype_5numpy_ndarray, 1, "ebqe_grad_w", 0))) __PYX_ERR(0, 4446, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_flux), __pyx_ptype_5numpy_ndarray, 1, "flux", 0))) __PYX_ERR(0, 4447, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_elementResidual_p), __pyx_ptype_5numpy_ndarray, 1, "elementResidual_p", 0))) __PYX_ERR(0, 4448, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_elementFlags), __pyx_ptype_5numpy_ndarray, 1, "elementFlags", 0))) __PYX_ERR(0, 4449, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_boundaryFlags), __pyx_ptype_5numpy_ndarray, 1, "boundaryFlags", 0))) __PYX_ERR(0, 4450, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_barycenters), __pyx_ptype_5numpy_ndarray, 1, "barycenters", 0))) __PYX_ERR(0, 4451, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_wettedAreas), __pyx_ptype_5numpy_ndarray, 1, "wettedAreas", 0))) __PYX_ERR(0, 4452, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_netForces_p), __pyx_ptype_5numpy_ndarray, 1, "netForces_p", 0))) __PYX_ERR(0, 4453, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_netForces_v), __pyx_ptype_5numpy_ndarray, 1, "netForces_v", 0))) __PYX_ERR(0, 4454, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_netMoments), __pyx_ptype_5numpy_ndarray, 1, "netMoments", 0))) __PYX_ERR(0, 4455, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_rho), __pyx_ptype_5numpy_ndarray, 1, "q_rho", 0))) __PYX_ERR(0, 4456, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_rho), __pyx_ptype_5numpy_ndarray, 1, "ebqe_rho", 0))) __PYX_ERR(0, 4457, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_nu), __pyx_ptype_5numpy_ndarray, 1, "q_nu", 0))) __PYX_ERR(0, 4458, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_nu), __pyx_ptype_5numpy_ndarray, 1, "ebqe_nu", 0))) __PYX_ERR(0, 4459, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particle_signed_distances), __pyx_ptype_5numpy_ndarray, 1, "particle_signed_distances", 0))) __PYX_ERR(0, 4465, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particle_signed_distance_normals), __pyx_ptype_5numpy_ndarray, 1, "particle_signed_distance_normals", 0))) __PYX_ERR(0, 4466, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particle_velocities), __pyx_ptype_5numpy_ndarray, 1, "particle_velocities", 0))) __PYX_ERR(0, 4467, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particle_centroids), __pyx_ptype_5numpy_ndarray, 1, "particle_centroids", 0))) __PYX_ERR(0, 4468, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particle_netForces), __pyx_ptype_5numpy_ndarray, 1, "particle_netForces", 0))) __PYX_ERR(0, 4469, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particle_netMoments), __pyx_ptype_5numpy_ndarray, 1, "particle_netMoments", 0))) __PYX_ERR(0, 4470, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particle_surfaceArea), __pyx_ptype_5numpy_ndarray, 1, "particle_surfaceArea", 0))) __PYX_ERR(0, 4471, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_forcex), __pyx_ptype_5numpy_ndarray, 1, "forcex", 0))) __PYX_ERR(0, 4477, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_forcey), __pyx_ptype_5numpy_ndarray, 1, "forcey", 0))) __PYX_ERR(0, 4478, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_forcez), __pyx_ptype_5numpy_ndarray, 1, "forcez", 0))) __PYX_ERR(0, 4479, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_entropyResidualAtCell), __pyx_ptype_5numpy_ndarray, 1, "entropyResidualAtCell", 0))) __PYX_ERR(0, 4482, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_maxSpeed2AtCell), __pyx_ptype_5numpy_ndarray, 1, "maxSpeed2AtCell", 0))) __PYX_ERR(0, 4483, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rhoAtCell), __pyx_ptype_5numpy_ndarray, 1, "rhoAtCell", 0))) __PYX_ERR(0, 4485, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_muAtCell), __pyx_ptype_5numpy_ndarray, 1, "muAtCell", 0))) __PYX_ERR(0, 4486, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_quantDOFs), __pyx_ptype_5numpy_ndarray, 1, "quantDOFs", 0))) __PYX_ERR(0, 4487, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_DofLoops), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_DofLoops", 0))) __PYX_ERR(0, 4489, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_DofLoops), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_DofLoops", 0))) __PYX_ERR(0, 4490, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ML), __pyx_ptype_5numpy_ndarray, 1, "ML", 0))) __PYX_ERR(0, 4491, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_Cx), __pyx_ptype_5numpy_ndarray, 1, "Cx", 0))) __PYX_ERR(0, 4492, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_Cy), __pyx_ptype_5numpy_ndarray, 1, "Cy", 0))) __PYX_ERR(0, 4493, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_Cz), __pyx_ptype_5numpy_ndarray, 1, "Cz", 0))) __PYX_ERR(0, 4494, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_density_as_function), __pyx_ptype_5numpy_ndarray, 1, "density_as_function", 0))) __PYX_ERR(0, 4496, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dynamic_viscosity_as_function), __pyx_ptype_5numpy_ndarray, 1, "dynamic_viscosity_as_function", 0))) __PYX_ERR(0, 4497, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_density_as_function), __pyx_ptype_5numpy_ndarray, 1, "ebqe_density_as_function", 0))) __PYX_ERR(0, 4498, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_dynamic_viscosity_as_function), __pyx_ptype_5numpy_ndarray, 1, "ebqe_dynamic_viscosity_as_function", 0))) __PYX_ERR(0, 4499, __pyx_L1_error)
  __pyx_r = __pyx_pf_6mprans_8cRANS3PF_9RANS3PF2D_8calculateResidual_entropy_viscosity(((struct __pyx_obj_6mprans_8cRANS3PF_RANS3PF2D *)__pyx_v_self), __pyx_v_mesh_trial_ref, __pyx_v_mesh_grad_trial_ref, __pyx_v_mesh_dof, __pyx_v_mesh_velocity_dof, __pyx_v_MOVING_DOMAIN, __pyx_v_PSTAB, __pyx_v_mesh_l2g, __pyx_v_dV_ref, __pyx_v_p_trial_ref, __pyx_v_p_grad_trial_ref, __pyx_v_p_test_ref, __pyx_v_p_grad_test_ref, __pyx_v_q_p, __pyx_v_q_grad_p, __pyx_v_ebqe_p, __pyx_v_ebqe_grad_p, __pyx_v_vel_trial_ref, __pyx_v_vel_grad_trial_ref, __pyx_v_vel_hess_trial_ref, __pyx_v_vel_test_ref, __pyx_v_vel_grad_test_ref, __pyx_v_mesh_trial_trace_ref, __pyx_v_mesh_grad_trial_trace_ref, __pyx_v_dS_ref, __pyx_v_p_trial_trace_ref, __pyx_v_p_grad_trial_trace_ref, __pyx_v_p_test_trace_ref, __pyx_v_p_grad_test_trace_ref, __pyx_v_vel_trial_trace_ref, __pyx_v_vel_grad_trial_trace_ref, __pyx_v_vel_test_trace_ref, __pyx_v_vel_grad_test_trace_ref, __pyx_v_normal_ref, __pyx_v_boundaryJac_ref, __pyx_v_eb_adjoint_sigma, __pyx_v_elementDiameter, __pyx_v_nodeDiametersArray, __pyx_v_hFactor, __pyx_v_nElements_global, __pyx_v_nElements_owned, __pyx_v_nElementBoundaries_owned, __pyx_v_useRBLES, __pyx_v_useMetrics, __pyx_v_alphaBDF, __pyx_v_epsFact_rho, __pyx_v_epsFact_mu, __pyx_v_sigma, __pyx_v_rho_0, __pyx_v_nu_0, __pyx_v_rho_1, __pyx_v_nu_1, __pyx_v_smagorinskyConstant, __pyx_v_turbulenceClosureModel, __pyx_v_Ct_sge, __pyx_v_Cd_sge, __pyx_v_C_dc, __pyx_v_C_b, __pyx_v_eps_solid, __pyx_v_phi_solid, __pyx_v_q_velocity_solid, __pyx_v_q_vos, __pyx_v_q_dvos_dt, __pyx_v_q_dragAlpha, __pyx_v_q_dragBeta, __pyx_v_q_mass_source, __pyx_v_q_turb_var_0, __pyx_v_q_turb_var_1, __pyx_v_q_turb_var_grad_0, __pyx_v_q_eddy_viscosity, __pyx_v_p_l2g, __pyx_v_vel_l2g, __pyx_v_p_dof, __pyx_v_u_dof, __pyx_v_v_dof, __pyx_v_w_dof, __pyx_v_u_dof_old, __pyx_v_v_dof_old, __pyx_v_w_dof_old, __pyx_v_u_dof_old_old, __pyx_v_v_dof_old_old, __pyx_v_w_dof_old_old, __pyx_v_g, __pyx_v_useVF, __pyx_v_vf, __pyx_v_phi, __pyx_v_normal_phi, __pyx_v_kappa_phi, __pyx_v_q_mom_u_acc, __pyx_v_q_mom_v_acc, __pyx_v_q_mom_w_acc, __pyx_v_q_mass_adv, __pyx_v_q_mom_u_acc_beta_bdf, __pyx_v_q_mom_v_acc_beta_bdf, __pyx_v_q_mom_w_acc_beta_bdf, __pyx_v_q_dV, __pyx_v_q_dV_last, __pyx_v_q_velocity_sge, __pyx_v_ebqe_velocity_star, __pyx_v_q_cfl, __pyx_v_q_numDiff_u, __pyx_v_q_numDiff_v, __pyx_v_q_numDiff_w, __pyx_v_q_numDiff_u_last, __pyx_v_q_numDiff_v_last, __pyx_v_q_numDiff_w_last, __pyx_v_sdInfo_u_u_rowptr, __pyx_v_sdInfo_u_u_colind, __pyx_v_sdInfo_u_v_rowptr, __pyx_v_sdInfo_u_v_colind, __pyx_v_sdInfo_u_w_rowptr, __pyx_v_sdInfo_u_w_colind, __pyx_v_sdInfo_v_v_rowptr, __pyx_v_sdInfo_v_v_colind, __pyx_v_sdInfo_v_u_rowptr, __pyx_v_sdInfo_v_u_colind, __pyx_v_sdInfo_v_w_rowptr, __pyx_v_sdInfo_v_w_colind, __pyx_v_sdInfo_w_w_rowptr, __pyx_v_sdInfo_w_w_colind, __pyx_v_sdInfo_w_u_rowptr, __pyx_v_sdInfo_w_u_colind, __pyx_v_sdInfo_w_v_rowptr, __pyx_v_sdInfo_w_v_colind, __pyx_v_offset_p, __pyx_v_offset_u, __pyx_v_offset_v, __pyx_v_offset_w, __pyx_v_stride_p, __pyx_v_stride_u, __pyx_v_stride_v, __pyx_v_stride_w, __pyx_v_globalResidual, __pyx_v_nExteriorElementBoundaries_global, __pyx_v_exteriorElementBoundariesArray, __pyx_v_elementBoundaryElementsArray, __pyx_v_elementBoundaryLocalElementBoundariesArray, __pyx_v_ebqe_vf_ext, __pyx_v_bc_ebqe_vf_ext, __pyx_v_ebqe_phi_ext, __pyx_v_bc_ebqe_phi_ext, __pyx_v_ebqe_normal_phi_ext, __pyx_v_ebqe_kappa_phi_ext, __pyx_v_ebqe_vos_ext, __pyx_v_ebqe_turb_var_0, __pyx_v_ebqe_turb_var_1, __pyx_v_isDOFBoundary_p, __pyx_v_isDOFBoundary_u, __pyx_v_isDOFBoundary_v, __pyx_v_isDOFBoundary_w, __pyx_v_isAdvectiveFluxBoundary_p, __pyx_v_isAdvectiveFluxBoundary_u, __pyx_v_isAdvectiveFluxBoundary_v, __pyx_v_isAdvectiveFluxBoundary_w, __pyx_v_isDiffusiveFluxBoundary_u, __pyx_v_isDiffusiveFluxBoundary_v, __pyx_v_isDiffusiveFluxBoundary_w, __pyx_v_ebqe_bc_p_ext, __pyx_v_ebqe_bc_flux_mass_ext, __pyx_v_ebqe_bc_flux_mom_u_adv_ext, __pyx_v_ebqe_bc_flux_mom_v_adv_ext, __pyx_v_ebqe_bc_flux_mom_w_adv_ext, __pyx_v_ebqe_bc_u_ext, __pyx_v_ebqe_bc_flux_u_diff_ext, __pyx_v_ebqe_penalty_ext, __pyx_v_ebqe_bc_v_ext, __pyx_v_ebqe_bc_flux_v_diff_ext, __pyx_v_ebqe_bc_w_ext, __pyx_v_ebqe_bc_flux_w_diff_ext, __pyx_v_q_x, __pyx_v_q_velocity, __pyx_v_ebqe_velocity, __pyx_v_q_grad_u, __pyx_v_q_grad_v, __pyx_v_q_grad_w, __pyx_v_q_divU, __pyx_v_ebqe_grad_u, __pyx_v_ebqe_grad_v, __pyx_v_ebqe_grad_w, __pyx_v_flux, __pyx_v_elementResidual_p, __pyx_v_elementFlags, __pyx_v_boundaryFlags, __pyx_v_barycenters, __pyx_v_wettedAreas, __pyx_v_netForces_p, __pyx_v_netForces_v, __pyx_v_netMoments, __pyx_v_q_rho, __pyx_v_ebqe_rho, __pyx_v_q_nu, __pyx_v_ebqe_nu, __pyx_v_nParticles, __pyx_v_particle_epsFact, __pyx_v_particle_alpha, __pyx_v_particle_beta, __pyx_v_particle_penalty_constant, __pyx_v_particle_signed_distances, __pyx_v_particle_signed_distance_normals, __pyx_v_particle_velocities, __pyx_v_particle_centroids, __pyx_v_particle_netForces, __pyx_v_particle_netMoments, __pyx_v_particle_surfaceArea, __pyx_v_particle_nitsche, __pyx_v_STABILIZATION_TYPE, __pyx_v_areaRefElement, __pyx_v_cMax, __pyx_v_cE, __pyx_v_forcex, __pyx_v_forcey, __pyx_v_forcez, __pyx_v_KILL_PRESSURE_TERM, __pyx_v_dt, __pyx_v_entropyResidualAtCell, __pyx_v_maxSpeed2AtCell, __pyx_v_maxSpeed2AtOmega, __pyx_v_rhoAtCell, __pyx_v_muAtCell, __pyx_v_quantDOFs, __pyx_v_numDOFsPerEqn, __pyx_v_csrRowIndeces_DofLoops, __pyx_v_csrColumnOffsets_DofLoops, __pyx_v_ML, __pyx_v_Cx, __pyx_v_Cy, __pyx_v_Cz, __pyx_v_MATERIAL_PARAMETERS_AS_FUNCTION, __pyx_v_density_as_function, __pyx_v_dynamic_viscosity_as_function, __pyx_v_ebqe_density_as_function, __pyx_v_ebqe_dynamic_viscosity_as_function, __pyx_v_order_polynomial);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6mprans_8cRANS3PF_9RANS3PF2D_8calculateResidual_entropy_viscosity(struct __pyx_obj_6mprans_8cRANS3PF_RANS3PF2D *__pyx_v_self, PyArrayObject *__pyx_v_mesh_trial_ref, PyArrayObject *__pyx_v_mesh_grad_trial_ref, PyArrayObject *__pyx_v_mesh_dof, PyArrayObject *__pyx_v_mesh_velocity_dof, double __pyx_v_MOVING_DOMAIN, double __pyx_v_PSTAB, PyArrayObject *__pyx_v_mesh_l2g, PyArrayObject *__pyx_v_dV_ref, PyArrayObject *__pyx_v_p_trial_ref, PyArrayObject *__pyx_v_p_grad_trial_ref, PyArrayObject *__pyx_v_p_test_ref, PyArrayObject *__pyx_v_p_grad_test_ref, PyArrayObject *__pyx_v_q_p, PyArrayObject *__pyx_v_q_grad_p, PyArrayObject *__pyx_v_ebqe_p, PyArrayObject *__pyx_v_ebqe_grad_p, PyArrayObject *__pyx_v_vel_trial_ref, PyArrayObject *__pyx_v_vel_grad_trial_ref, PyArrayObject *__pyx_v_vel_hess_trial_ref, PyArrayObject *__pyx_v_vel_test_ref, PyArrayObject *__pyx_v_vel_grad_test_ref, PyArrayObject *__pyx_v_mesh_trial_trace_ref, PyArrayObject *__pyx_v_mesh_grad_trial_trace_ref, PyArrayObject *__pyx_v_dS_ref, PyArrayObject *__pyx_v_p_trial_trace_ref, PyArrayObject *__pyx_v_p_grad_trial_trace_ref, PyArrayObject *__pyx_v_p_test_trace_ref, PyArrayObject *__pyx_v_p_grad_test_trace_ref, PyArrayObject *__pyx_v_vel_trial_trace_ref, PyArrayObject *__pyx_v_vel_grad_trial_trace_ref, PyArrayObject *__pyx_v_vel_test_trace_ref, PyArrayObject *__pyx_v_vel_grad_test_trace_ref, PyArrayObject *__pyx_v_normal_ref, PyArrayObject *__pyx_v_boundaryJac_ref, double __pyx_v_eb_adjoint_sigma, PyArrayObject *__pyx_v_elementDiameter, PyArrayObject *__pyx_v_nodeDiametersArray, double __pyx_v_hFactor, int __pyx_v_nElements_global, int __pyx_v_nElements_owned, int __pyx_v_nElementBoundaries_owned, double __pyx_v_useRBLES, double __pyx_v_useMetrics, double __pyx_v_alphaBDF, double __pyx_v_epsFact_rho, double __pyx_v_epsFact_mu, double __pyx_v_sigma, double __pyx_v_rho_0, double __pyx_v_nu_0, double __pyx_v_rho_1, double __pyx_v_nu_1, double __pyx_v_smagorinskyConstant, int __pyx_v_turbulenceClosureModel, double __pyx_v_Ct_sge, double __pyx_v_Cd_sge, double __pyx_v_C_dc, double __pyx_v_C_b, PyArrayObject *__pyx_v_eps_solid, PyArrayObject *__pyx_v_phi_solid, PyArrayObject *__pyx_v_q_velocity_solid, PyArrayObject *__pyx_v_q_vos, PyArrayObject *__pyx_v_q_dvos_dt, PyArrayObject *__pyx_v_q_dragAlpha, PyArrayObject *__pyx_v_q_dragBeta, PyArrayObject *__pyx_v_q_mass_source, PyArrayObject *__pyx_v_q_turb_var_0, PyArrayObject *__pyx_v_q_turb_var_1, PyArrayObject *__pyx_v_q_turb_var_grad_0, PyArrayObject *__pyx_v_q_eddy_viscosity, PyArrayObject *__pyx_v_p_l2g, PyArrayObject *__pyx_v_vel_l2g, PyArrayObject *__pyx_v_p_dof, PyArrayObject *__pyx_v_u_dof, PyArrayObject *__pyx_v_v_dof, PyArrayObject *__pyx_v_w_dof, PyArrayObject *__pyx_v_u_dof_old, PyArrayObject *__pyx_v_v_dof_old, PyArrayObject *__pyx_v_w_dof_old, PyArrayObject *__pyx_v_u_dof_old_old, PyArrayObject *__pyx_v_v_dof_old_old, PyArrayObject *__pyx_v_w_dof_old_old, PyArrayObject *__pyx_v_g, double __pyx_v_useVF, PyArrayObject *__pyx_v_vf, PyArrayObject *__pyx_v_phi, PyArrayObject *__pyx_v_normal_phi, PyArrayObject *__pyx_v_kappa_phi, PyArrayObject *__pyx_v_q_mom_u_acc, PyArrayObject *__pyx_v_q_mom_v_acc, PyArrayObject *__pyx_v_q_mom_w_acc, PyArrayObject *__pyx_v_q_mass_adv, PyArrayObject *__pyx_v_q_mom_u_acc_beta_bdf, PyArrayObject *__pyx_v_q_mom_v_acc_beta_bdf, PyArrayObject *__pyx_v_q_mom_w_acc_beta_bdf, PyArrayObject *__pyx_v_q_dV, PyArrayObject *__pyx_v_q_dV_last, PyArrayObject *__pyx_v_q_velocity_sge, PyArrayObject *__pyx_v_ebqe_velocity_star, PyArrayObject *__pyx_v_q_cfl, PyArrayObject *__pyx_v_q_numDiff_u, PyArrayObject *__pyx_v_q_numDiff_v, PyArrayObject *__pyx_v_q_numDiff_w, PyArrayObject *__pyx_v_q_numDiff_u_last, PyArrayObject *__pyx_v_q_numDiff_v_last, PyArrayObject *__pyx_v_q_numDiff_w_last, PyArrayObject *__pyx_v_sdInfo_u_u_rowptr, PyArrayObject *__pyx_v_sdInfo_u_u_colind, PyArrayObject *__pyx_v_sdInfo_u_v_rowptr, PyArrayObject *__pyx_v_sdInfo_u_v_colind, PyArrayObject *__pyx_v_sdInfo_u_w_rowptr, PyArrayObject *__pyx_v_sdInfo_u_w_colind, PyArrayObject *__pyx_v_sdInfo_v_v_rowptr, PyArrayObject *__pyx_v_sdInfo_v_v_colind, PyArrayObject *__pyx_v_sdInfo_v_u_rowptr, PyArrayObject *__pyx_v_sdInfo_v_u_colind, PyArrayObject *__pyx_v_sdInfo_v_w_rowptr, PyArrayObject *__pyx_v_sdInfo_v_w_colind, PyArrayObject *__pyx_v_sdInfo_w_w_rowptr, PyArrayObject *__pyx_v_sdInfo_w_w_colind, PyArrayObject *__pyx_v_sdInfo_w_u_rowptr, PyArrayObject *__pyx_v_sdInfo_w_u_colind, PyArrayObject *__pyx_v_sdInfo_w_v_rowptr, PyArrayObject *__pyx_v_sdInfo_w_v_colind, int __pyx_v_offset_p, int __pyx_v_offset_u, int __pyx_v_offset_v, int __pyx_v_offset_w, int __pyx_v_stride_p, int __pyx_v_stride_u, int __pyx_v_stride_v, int __pyx_v_stride_w, PyArrayObject *__pyx_v_globalResidual, int __pyx_v_nExteriorElementBoundaries_global, PyArrayObject *__pyx_v_exteriorElementBoundariesArray, PyArrayObject *__pyx_v_elementBoundaryElementsArray, PyArrayObject *__pyx_v_elementBoundaryLocalElementBoundariesArray, PyArrayObject *__pyx_v_ebqe_vf_ext, PyArrayObject *__pyx_v_bc_ebqe_vf_ext, PyArrayObject *__pyx_v_ebqe_phi_ext, PyArrayObject *__pyx_v_bc_ebqe_phi_ext, PyArrayObject *__pyx_v_ebqe_normal_phi_ext, PyArrayObject *__pyx_v_ebqe_kappa_phi_ext, PyArrayObject *__pyx_v_ebqe_vos_ext, PyArrayObject *__pyx_v_ebqe_turb_var_0, PyArrayObject *__pyx_v_ebqe_turb_var_1, PyArrayObject *__pyx_v_isDOFBoundary_p, PyArrayObject *__pyx_v_isDOFBoundary_u, PyArrayObject *__pyx_v_isDOFBoundary_v, PyArrayObject *__pyx_v_isDOFBoundary_w, PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_p, PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_u, PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_v, PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_w, PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_u, PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_v, PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_w, PyArrayObject *__pyx_v_ebqe_bc_p_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_mass_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_mom_u_adv_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_mom_v_adv_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_mom_w_adv_ext, PyArrayObject *__pyx_v_ebqe_bc_u_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_u_diff_ext, PyArrayObject *__pyx_v_ebqe_penalty_ext, PyArrayObject *__pyx_v_ebqe_bc_v_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_v_diff_ext, PyArrayObject *__pyx_v_ebqe_bc_w_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_w_diff_ext, PyArrayObject *__pyx_v_q_x, PyArrayObject *__pyx_v_q_velocity, PyArrayObject *__pyx_v_ebqe_velocity, PyArrayObject *__pyx_v_q_grad_u, PyArrayObject *__pyx_v_q_grad_v, PyArrayObject *__pyx_v_q_grad_w, PyArrayObject *__pyx_v_q_divU, PyArrayObject *__pyx_v_ebqe_grad_u, PyArrayObject *__pyx_v_ebqe_grad_v, PyArrayObject *__pyx_v_ebqe_grad_w, PyArrayObject *__pyx_v_flux, PyArrayObject *__pyx_v_elementResidual_p, PyArrayObject *__pyx_v_elementFlags, PyArrayObject *__pyx_v_boundaryFlags, PyArrayObject *__pyx_v_barycenters, PyArrayObject *__pyx_v_wettedAreas, PyArrayObject *__pyx_v_netForces_p, PyArrayObject *__pyx_v_netForces_v, PyArrayObject *__pyx_v_netMoments, PyArrayObject *__pyx_v_q_rho, PyArrayObject *__pyx_v_ebqe_rho, PyArrayObject *__pyx_v_q_nu, PyArrayObject *__pyx_v_ebqe_nu, int __pyx_v_nParticles, double __pyx_v_particle_epsFact, double __pyx_v_particle_alpha, double __pyx_v_particle_beta, double __pyx_v_particle_penalty_constant, PyArrayObject *__pyx_v_particle_signed_distances, PyArrayObject *__pyx_v_particle_signed_distance_normals, PyArrayObject *__pyx_v_particle_velocities, PyArrayObject *__pyx_v_particle_centroids, PyArrayObject *__pyx_v_particle_netForces, PyArrayObject *__pyx_v_particle_netMoments, PyArrayObject *__pyx_v_particle_surfaceArea, double __pyx_v_particle_nitsche, int __pyx_v_STABILIZATION_TYPE, double __pyx_v_areaRefElement, double __pyx_v_cMax, double __pyx_v_cE, PyArrayObject *__pyx_v_forcex, PyArrayObject *__pyx_v_forcey, PyArrayObject *__pyx_v_forcez, int __pyx_v_KILL_PRESSURE_TERM, double __pyx_v_dt, PyArrayObject *__pyx_v_entropyResidualAtCell, PyArrayObject *__pyx_v_maxSpeed2AtCell, double __pyx_v_maxSpeed2AtOmega, PyArrayObject *__pyx_v_rhoAtCell, PyArrayObject *__pyx_v_muAtCell, PyArrayObject *__pyx_v_quantDOFs, int __pyx_v_numDOFsPerEqn, PyArrayObject *__pyx_v_csrRowIndeces_DofLoops, PyArrayObject *__pyx_v_csrColumnOffsets_DofLoops, PyArrayObject *__pyx_v_ML, PyArrayObject *__pyx_v_Cx, PyArrayObject *__pyx_v_Cy, PyArrayObject *__pyx_v_Cz, int __pyx_v_MATERIAL_PARAMETERS_AS_FUNCTION, PyArrayObject *__pyx_v_density_as_function, PyArrayObject *__pyx_v_dynamic_viscosity_as_function, PyArrayObject *__pyx_v_ebqe_density_as_function, PyArrayObject *__pyx_v_ebqe_dynamic_viscosity_as_function, double __pyx_v_order_polynomial) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calculateResidual_entropy_viscosity", 0);

  /* "mprans/cRANS3PF.pyx":4501
 *                                             numpy.ndarray ebqe_dynamic_viscosity_as_function,
 *                                             double order_polynomial):
 *         self.thisptr.calculateResidual_entropy_viscosity(< double *> mesh_trial_ref.data,             # <<<<<<<<<<<<<<
 *                                                          < double * > mesh_grad_trial_ref.data,
 *                                                          < double * > mesh_dof.data,
 */
  __pyx_v_self->thisptr->calculateResidual_entropy_viscosity(((double *)__pyx_v_mesh_trial_ref->data), ((double *)__pyx_v_mesh_grad_trial_ref->data), ((double *)__pyx_v_mesh_dof->data), ((double *)__pyx_v_mesh_velocity_dof->data), __pyx_v_MOVING_DOMAIN, __pyx_v_PSTAB, ((int *)__pyx_v_mesh_l2g->data), ((double *)__pyx_v_dV_ref->data), ((double *)__pyx_v_p_trial_ref->data), ((double *)__pyx_v_p_grad_trial_ref->data), ((double *)__pyx_v_p_test_ref->data), ((double *)__pyx_v_p_grad_test_ref->data), ((double *)__pyx_v_q_p->data), ((double *)__pyx_v_q_grad_p->data), ((double *)__pyx_v_ebqe_p->data), ((double *)__pyx_v_ebqe_grad_p->data), ((double *)__pyx_v_vel_trial_ref->data), ((double *)__pyx_v_vel_grad_trial_ref->data), ((double *)__pyx_v_vel_hess_trial_ref->data), ((double *)__pyx_v_vel_test_ref->data), ((double *)__pyx_v_vel_grad_test_ref->data), ((double *)__pyx_v_mesh_trial_trace_ref->data), ((double *)__pyx_v_mesh_grad_trial_trace_ref->data), ((double *)__pyx_v_dS_ref->data), ((double *)__pyx_v_p_trial_trace_ref->data), ((double *)__pyx_v_p_grad_trial_trace_ref->data), ((double *)__pyx_v_p_test_trace_ref->data), ((double *)__pyx_v_p_grad_test_trace_ref->data), ((double *)__pyx_v_vel_trial_trace_ref->data), ((double *)__pyx_v_vel_grad_trial_trace_ref->data), ((double *)__pyx_v_vel_test_trace_ref->data), ((double *)__pyx_v_vel_grad_test_trace_ref->data), ((double *)__pyx_v_normal_ref->data), ((double *)__pyx_v_boundaryJac_ref->data), __pyx_v_eb_adjoint_sigma, ((double *)__pyx_v_elementDiameter->data), ((double *)__pyx_v_nodeDiametersArray->data), __pyx_v_hFactor, __pyx_v_nElements_global, __pyx_v_nElements_owned, __pyx_v_nElementBoundaries_owned, __pyx_v_useRBLES, __pyx_v_useMetrics, __pyx_v_alphaBDF, __pyx_v_epsFact_rho, __pyx_v_epsFact_mu, __pyx_v_sigma, __pyx_v_rho_0, __pyx_v_nu_0, __pyx_v_rho_1, __pyx_v_nu_1, __pyx_v_smagorinskyConstant, __pyx_v_turbulenceClosureModel, __pyx_v_Ct_sge, __pyx_v_Cd_sge, __pyx_v_C_dc, __pyx_v_C_b, ((double *)__pyx_v_eps_solid->data), ((double *)__pyx_v_phi_solid->data), ((double *)__pyx_v_q_velocity_solid->data), ((double *)__pyx_v_q_vos->data), ((double *)__pyx_v_q_dvos_dt->data), ((double *)__pyx_v_q_dragAlpha->data), ((double *)__pyx_v_q_dragBeta->data), ((double *)__pyx_v_q_mass_source->data), ((double *)__pyx_v_q_turb_var_0->data), ((double *)__pyx_v_q_turb_var_1->data), ((double *)__pyx_v_q_turb_var_grad_0->data), ((double *)__pyx_v_q_eddy_viscosity->data), ((int *)__pyx_v_p_l2g->data), ((int *)__pyx_v_vel_l2g->data), ((double *)__pyx_v_p_dof->data), ((double *)__pyx_v_u_dof->data), ((double *)__pyx_v_v_dof->data), ((double *)__pyx_v_w_dof->data), ((double *)__pyx_v_u_dof_old->data), ((double *)__pyx_v_v_dof_old->data), ((double *)__pyx_v_w_dof_old->data), ((double *)__pyx_v_u_dof_old_old->data), ((double *)__pyx_v_v_dof_old_old->data), ((double *)__pyx_v_w_dof_old_old->data), ((double *)__pyx_v_g->data), __pyx_v_useVF, ((double *)__pyx_v_vf->data), ((double *)__pyx_v_phi->data), ((double *)__pyx_v_normal_phi->data), ((double *)__pyx_v_kappa_phi->data), ((double *)__pyx_v_q_mom_u_acc->data), ((double *)__pyx_v_q_mom_v_acc->data), ((double *)__pyx_v_q_mom_w_acc->data), ((double *)__pyx_v_q_mass_adv->data), ((double *)__pyx_v_q_mom_u_acc_beta_bdf->data), ((double *)__pyx_v_q_mom_v_acc_beta_bdf->data), ((double *)__pyx_v_q_mom_w_acc_beta_bdf->data), ((double *)__pyx_v_q_dV->data), ((double *)__pyx_v_q_dV_last->data), ((double *)__pyx_v_q_velocity_sge->data), ((double *)__pyx_v_ebqe_velocity_star->data), ((double *)__pyx_v_q_cfl->data), ((double *)__pyx_v_q_numDiff_u->data), ((double *)__pyx_v_q_numDiff_v->data), ((double *)__pyx_v_q_numDiff_w->data), ((double *)__pyx_v_q_numDiff_u_last->data), ((double *)__pyx_v_q_numDiff_v_last->data), ((double *)__pyx_v_q_numDiff_w_last->data), ((int *)__pyx_v_sdInfo_u_u_rowptr->data), ((int *)__pyx_v_sdInfo_u_u_colind->data), ((int *)__pyx_v_sdInfo_u_v_rowptr->data), ((int *)__pyx_v_sdInfo_u_v_colind->data), ((int *)__pyx_v_sdInfo_u_w_rowptr->data), ((int *)__pyx_v_sdInfo_u_w_colind->data), ((int *)__pyx_v_sdInfo_v_v_rowptr->data), ((int *)__pyx_v_sdInfo_v_v_colind->data), ((int *)__pyx_v_sdInfo_v_u_rowptr->data), ((int *)__pyx_v_sdInfo_v_u_colind->data), ((int *)__pyx_v_sdInfo_v_w_rowptr->data), ((int *)__pyx_v_sdInfo_v_w_colind->data), ((int *)__pyx_v_sdInfo_w_w_rowptr->data), ((int *)__pyx_v_sdInfo_w_w_colind->data), ((int *)__pyx_v_sdInfo_w_u_rowptr->data), ((int *)__pyx_v_sdInfo_w_u_colind->data), ((int *)__pyx_v_sdInfo_w_v_rowptr->data), ((int *)__pyx_v_sdInfo_w_v_colind->data), __pyx_v_offset_p, __pyx_v_offset_u, __pyx_v_offset_v, __pyx_v_offset_w, __pyx_v_stride_p, __pyx_v_stride_u, __pyx_v_stride_v, __pyx_v_stride_w, ((double *)__pyx_v_globalResidual->data), __pyx_v_nExteriorElementBoundaries_global, ((int *)__pyx_v_exteriorElementBoundariesArray->data), ((int *)__pyx_v_elementBoundaryElementsArray->data), ((int *)__pyx_v_elementBoundaryLocalElementBoundariesArray->data), ((double *)__pyx_v_ebqe_vf_ext->data), ((double *)__pyx_v_bc_ebqe_vf_ext->data), ((double *)__pyx_v_ebqe_phi_ext->data), ((double *)__pyx_v_bc_ebqe_phi_ext->data), ((double *)__pyx_v_ebqe_normal_phi_ext->data), ((double *)__pyx_v_ebqe_kappa_phi_ext->data), ((double *)__pyx_v_ebqe_vos_ext->data), ((double *)__pyx_v_ebqe_turb_var_0->data), ((double *)__pyx_v_ebqe_turb_var_1->data), ((int *)__pyx_v_isDOFBoundary_p->data), ((int *)__pyx_v_isDOFBoundary_u->data), ((int *)__pyx_v_isDOFBoundary_v->data), ((int *)__pyx_v_isDOFBoundary_w->data), ((int *)__pyx_v_isAdvectiveFluxBoundary_p->data), ((int *)__pyx_v_isAdvectiveFluxBoundary_u->data), ((int *)__pyx_v_isAdvectiveFluxBoundary_v->data), ((int *)__pyx_v_isAdvectiveFluxBoundary_w->data), ((int *)__pyx_v_isDiffusiveFluxBoundary_u->data), ((int *)__pyx_v_isDiffusiveFluxBoundary_v->data), ((int *)__pyx_v_isDiffusiveFluxBoundary_w->data), ((double *)__pyx_v_ebqe_bc_p_ext->data), ((double *)__pyx_v_ebqe_bc_flux_mass_ext->data), ((double *)__pyx_v_ebqe_bc_flux_mom_u_adv_ext->data), ((double *)__pyx_v_ebqe_bc_flux_mom_v_adv_ext->data), ((double *)__pyx_v_ebqe_bc_flux_mom_w_adv_ext->data), ((double *)__pyx_v_ebqe_bc_u_ext->data), ((double *)__pyx_v_ebqe_bc_flux_u_diff_ext->data), ((double *)__pyx_v_ebqe_penalty_ext->data), ((double *)__pyx_v_ebqe_bc_v_ext->data), ((double *)__pyx_v_ebqe_bc_flux_v_diff_ext->data), ((double *)__pyx_v_ebqe_bc_w_ext->data), ((double *)__pyx_v_ebqe_bc_flux_w_diff_ext->data), ((double *)__pyx_v_q_x->data), ((double *)__pyx_v_q_velocity->data), ((double *)__pyx_v_ebqe_velocity->data), ((double *)__pyx_v_q_grad_u->data), ((double *)__pyx_v_q_grad_v->data), ((double *)__pyx_v_q_grad_w->data), ((double *)__pyx_v_q_divU->data), ((double *)__pyx_v_ebqe_grad_u->data), ((double *)__pyx_v_ebqe_grad_v->data), ((double *)__pyx_v_ebqe_grad_w->data), ((double *)__pyx_v_flux->data), ((double *)__pyx_v_elementResidual_p->data), ((int *)__pyx_v_elementFlags->data), ((int *)__pyx_v_boundaryFlags->data), ((double *)__pyx_v_barycenters->data), ((double *)__pyx_v_wettedAreas->data), ((double *)__pyx_v_netForces_p->data), ((double *)__pyx_v_netForces_v->data), ((double *)__pyx_v_netMoments->data), ((double *)__pyx_v_q_rho->data), ((double *)__pyx_v_ebqe_rho->data), ((double *)__pyx_v_q_nu->data), ((double *)__pyx_v_ebqe_nu->data), __pyx_v_nParticles, __pyx_v_particle_epsFact, __pyx_v_particle_alpha, __pyx_v_particle_beta, __pyx_v_particle_penalty_constant, ((double *)__pyx_v_particle_signed_distances->data), ((double *)__pyx_v_particle_signed_distance_normals->data), ((double *)__pyx_v_particle_velocities->data), ((double *)__pyx_v_particle_centroids->data), ((double *)__pyx_v_particle_netForces->data), ((double *)__pyx_v_particle_netMoments->data), ((double *)__pyx_v_particle_surfaceArea->data), __pyx_v_particle_nitsche, __pyx_v_STABILIZATION_TYPE, __pyx_v_areaRefElement, __pyx_v_cMax, __pyx_v_cE, ((double *)__pyx_v_forcex->data), ((double *)__pyx_v_forcey->data), ((double *)__pyx_v_forcez->data), __pyx_v_KILL_PRESSURE_TERM, __pyx_v_dt, ((double *)__pyx_v_entropyResidualAtCell->data), ((double *)__pyx_v_maxSpeed2AtCell->data), __pyx_v_maxSpeed2AtOmega, ((double *)__pyx_v_rhoAtCell->data), ((double *)__pyx_v_muAtCell->data), ((double *)__pyx_v_quantDOFs->data), __pyx_v_numDOFsPerEqn, ((int *)__pyx_v_csrRowIndeces_DofLoops->data), ((int *)__pyx_v_csrColumnOffsets_DofLoops->data), ((double *)__pyx_v_ML->data), ((double *)__pyx_v_Cx->data), ((double *)__pyx_v_Cy->data), ((double *)__pyx_v_Cz->data), __pyx_v_MATERIAL_PARAMETERS_AS_FUNCTION, ((double *)__pyx_v_density_as_function->data), ((double *)__pyx_v_dynamic_viscosity_as_function->data), ((double *)__pyx_v_ebqe_density_as_function->data), ((double *)__pyx_v_ebqe_dynamic_viscosity_as_function->data), __pyx_v_order_polynomial);

  /* "mprans/cRANS3PF.pyx":4285
 *                                        < double * > ebqe_density_as_function.data,
 *                                        < double * > ebqe_dynamic_viscosity_as_function.data)
 *     def calculateResidual_entropy_viscosity(self,             # <<<<<<<<<<<<<<
 *                                             numpy.ndarray mesh_trial_ref,
 *                                             numpy.ndarray mesh_grad_trial_ref,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mprans/cRANS3PF.pyx":4717
 *                                                          order_polynomial)
 * 
 *     def calculateJacobian_entropy_viscosity(self,             # <<<<<<<<<<<<<<
 *                                             numpy.ndarray mesh_trial_ref,
 *                                             numpy.ndarray mesh_grad_trial_ref,
 */

/* Python wrapper */
static PyObject *__pyx_pw_6mprans_8cRANS3PF_9RANS3PF2D_11calculateJacobian_entropy_viscosity(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6mprans_8cRANS3PF_9RANS3PF2D_11calculateJacobian_entropy_viscosity(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_mesh_trial_ref = 0;
  PyArrayObject *__pyx_v_mesh_grad_trial_ref = 0;
  PyArrayObject *__pyx_v_mesh_dof = 0;
  PyArrayObject *__pyx_v_mesh_velocity_dof = 0;
  double __pyx_v_MOVING_DOMAIN;
  double __pyx_v_PSTAB;
  PyArrayObject *__pyx_v_mesh_l2g = 0;
  PyArrayObject *__pyx_v_dV_ref = 0;
  PyArrayObject *__pyx_v_p_trial_ref = 0;
  PyArrayObject *__pyx_v_p_grad_trial_ref = 0;
  PyArrayObject *__pyx_v_p_test_ref = 0;
  PyArrayObject *__pyx_v_p_grad_test_ref = 0;
  PyArrayObject *__pyx_v_q_p = 0;
  PyArrayObject *__pyx_v_q_grad_p = 0;
  PyArrayObject *__pyx_v_ebqe_p = 0;
  PyArrayObject *__pyx_v_ebqe_grad_p = 0;
  PyArrayObject *__pyx_v_vel_trial_ref = 0;
  PyArrayObject *__pyx_v_vel_grad_trial_ref = 0;
  PyArrayObject *__pyx_v_vel_hess_trial_ref = 0;
  PyArrayObject *__pyx_v_vel_test_ref = 0;
  PyArrayObject *__pyx_v_vel_grad_test_ref = 0;
  PyArrayObject *__pyx_v_mesh_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_mesh_grad_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_dS_ref = 0;
  PyArrayObject *__pyx_v_p_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_p_grad_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_p_test_trace_ref = 0;
  PyArrayObject *__pyx_v_p_grad_test_trace_ref = 0;
  PyArrayObject *__pyx_v_vel_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_vel_grad_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_vel_test_trace_ref = 0;
  PyArrayObject *__pyx_v_vel_grad_test_trace_ref = 0;
  PyArrayObject *__pyx_v_normal_ref = 0;
  PyArrayObject *__pyx_v_boundaryJac_ref = 0;
  double __pyx_v_eb_adjoint_sigma;
  PyArrayObject *__pyx_v_elementDiameter = 0;
  PyArrayObject *__pyx_v_nodeDiametersArray = 0;
  double __pyx_v_hFactor;
  int __pyx_v_nElements_global;
  int __pyx_v_nElements_owned;
  double __pyx_v_useRBLES;
  double __pyx_v_useMetrics;
  double __pyx_v_alphaBDF;
  double __pyx_v_epsFact_rho;
  double __pyx_v_epsFact_mu;
  double __pyx_v_sigma;
  double __pyx_v_rho_0;
  double __pyx_v_nu_0;
  double __pyx_v_rho_1;
  double __pyx_v_nu_1;
  double __pyx_v_smagorinskyConstant;
  int __pyx_v_turbulenceClosureModel;
  double __pyx_v_Ct_sge;
  double __pyx_v_Cd_sge;
  double __pyx_v_C_dg;
  double __pyx_v_C_b;
  PyArrayObject *__pyx_v_eps_solid = 0;
  PyArrayObject *__pyx_v_phi_solid = 0;
  PyArrayObject *__pyx_v_q_velocity_solid = 0;
  PyArrayObject *__pyx_v_q_vos = 0;
  PyArrayObject *__pyx_v_q_dvos_dt = 0;
  PyArrayObject *__pyx_v_q_dragAlpha = 0;
  PyArrayObject *__pyx_v_q_dragBeta = 0;
  PyArrayObject *__pyx_v_q_mass_source = 0;
  PyArrayObject *__pyx_v_q_turb_var_0 = 0;
  PyArrayObject *__pyx_v_q_turb_var_1 = 0;
  PyArrayObject *__pyx_v_q_turb_var_grad_0 = 0;
  PyArrayObject *__pyx_v_p_l2g = 0;
  PyArrayObject *__pyx_v_vel_l2g = 0;
  PyArrayObject *__pyx_v_p_dof = 0;
  PyArrayObject *__pyx_v_u_dof = 0;
  PyArrayObject *__pyx_v_v_dof = 0;
  PyArrayObject *__pyx_v_w_dof = 0;
  PyArrayObject *__pyx_v_g = 0;
  double __pyx_v_useVF;
  PyArrayObject *__pyx_v_vf = 0;
  PyArrayObject *__pyx_v_phi = 0;
  PyArrayObject *__pyx_v_normal_phi = 0;
  PyArrayObject *__pyx_v_kappa_phi = 0;
  PyArrayObject *__pyx_v_q_mom_u_acc_beta_bdf = 0;
  PyArrayObject *__pyx_v_q_mom_v_acc_beta_bdf = 0;
  PyArrayObject *__pyx_v_q_mom_w_acc_beta_bdf = 0;
  PyArrayObject *__pyx_v_q_dV = 0;
  PyArrayObject *__pyx_v_q_dV_last = 0;
  PyArrayObject *__pyx_v_q_velocity_sge = 0;
  PyArrayObject *__pyx_v_ebqe_velocity_star = 0;
  PyArrayObject *__pyx_v_q_cfl = 0;
  PyArrayObject *__pyx_v_q_numDiff_u_last = 0;
  PyArrayObject *__pyx_v_q_numDiff_v_last = 0;
  PyArrayObject *__pyx_v_q_numDiff_w_last = 0;
  PyArrayObject *__pyx_v_sdInfo_u_u_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_u_u_colind = 0;
  PyArrayObject *__pyx_v_sdInfo_u_v_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_u_v_colind = 0;
  PyArrayObject *__pyx_v_sdInfo_u_w_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_u_w_colind = 0;
  PyArrayObject *__pyx_v_sdInfo_v_v_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_v_v_colind = 0;
  PyArrayObject *__pyx_v_sdInfo_v_u_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_v_u_colind = 0;
  PyArrayObject *__pyx_v_sdInfo_v_w_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_v_w_colind = 0;
  PyArrayObject *__pyx_v_sdInfo_w_w_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_w_w_colind = 0;
  PyArrayObject *__pyx_v_sdInfo_w_u_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_w_u_colind = 0;
  PyArrayObject *__pyx_v_sdInfo_w_v_rowptr = 0;
  PyArrayObject *__pyx_v_sdInfo_w_v_colind = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_p_p = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_p_p = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_p_u = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_p_u = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_p_v = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_p_v = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_p_w = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_p_w = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_u_p = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_u_p = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_u_u = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_u_u = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_u_v = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_u_v = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_u_w = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_u_w = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_v_p = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_v_p = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_v_u = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_v_u = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_v_v = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_v_v = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_v_w = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_v_w = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_w_p = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_w_p = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_w_u = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_w_u = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_w_v = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_w_v = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_w_w = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_w_w = 0;
  PyObject *__pyx_v_globalJacobian = 0;
  int __pyx_v_nExteriorElementBoundaries_global;
  PyArrayObject *__pyx_v_exteriorElementBoundariesArray = 0;
  PyArrayObject *__pyx_v_elementBoundaryElementsArray = 0;
  PyArrayObject *__pyx_v_elementBoundaryLocalElementBoundariesArray = 0;
  PyArrayObject *__pyx_v_ebqe_vf_ext = 0;
  PyArrayObject *__pyx_v_bc_ebqe_vf_ext = 0;
  PyArrayObject *__pyx_v_ebqe_phi_ext = 0;
  PyArrayObject *__pyx_v_bc_ebqe_phi_ext = 0;
  PyArrayObject *__pyx_v_ebqe_normal_phi_ext = 0;
  PyArrayObject *__pyx_v_ebqe_kappa_phi_ext = 0;
  PyArrayObject *__pyx_v_ebqe_vos_ext = 0;
  PyArrayObject *__pyx_v_ebqe_turb_var_0 = 0;
  PyArrayObject *__pyx_v_ebqe_turb_var_1 = 0;
  PyArrayObject *__pyx_v_isDOFBoundary_p = 0;
  PyArrayObject *__pyx_v_isDOFBoundary_u = 0;
  PyArrayObject *__pyx_v_isDOFBoundary_v = 0;
  PyArrayObject *__pyx_v_isDOFBoundary_w = 0;
  PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_p = 0;
  PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_u = 0;
  PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_v = 0;
  PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_w = 0;
  PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_u = 0;
  PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_v = 0;
  PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_w = 0;
  PyArrayObject *__pyx_v_ebqe_bc_p_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_flux_mass_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_flux_mom_u_adv_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_flux_mom_v_adv_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_flux_mom_w_adv_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_u_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_flux_u_diff_ext = 0;
  PyArrayObject *__pyx_v_ebqe_penalty_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_v_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_flux_v_diff_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_w_ext = 0;
  PyArrayObject *__pyx_v_ebqe_bc_flux_w_diff_ext = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_p_p = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_p_u = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_p_v = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_p_w = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_u_p = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_u_u = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_u_v = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_u_w = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_v_p = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_v_u = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_v_v = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_v_w = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_w_p = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_w_u = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_w_v = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_w_w = 0;
  PyArrayObject *__pyx_v_elementFlags = 0;
  int __pyx_v_nParticles;
  double __pyx_v_particle_epsFact;
  double __pyx_v_particle_alpha;
  double __pyx_v_particle_beta;
  double __pyx_v_particle_penalty_constant;
  PyArrayObject *__pyx_v_particle_signed_distances = 0;
  PyArrayObject *__pyx_v_particle_signed_distance_normals = 0;
  PyArrayObject *__pyx_v_particle_velocities = 0;
  PyArrayObject *__pyx_v_particle_centroids = 0;
  double __pyx_v_particle_nitsche;
  int __pyx_v_KILL_PRESSURE_TERM;
  int __pyx_v_MATERIAL_PARAMETERS_AS_FUNCTION;
  PyArrayObject *__pyx_v_density_as_function = 0;
  PyArrayObject *__pyx_v_dynamic_viscosity_as_function = 0;
  PyArrayObject *__pyx_v_ebqe_density_as_function = 0;
  PyArrayObject *__pyx_v_ebqe_dynamic_viscosity_as_function = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calculateJacobian_entropy_viscosity (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_mesh_trial_ref,&__pyx_n_s_mesh_grad_trial_ref,&__pyx_n_s_mesh_dof,&__pyx_n_s_mesh_velocity_dof,&__pyx_n_s_MOVING_DOMAIN,&__pyx_n_s_PSTAB,&__pyx_n_s_mesh_l2g,&__pyx_n_s_dV_ref,&__pyx_n_s_p_trial_ref,&__pyx_n_s_p_grad_trial_ref,&__pyx_n_s_p_test_ref,&__pyx_n_s_p_grad_test_ref,&__pyx_n_s_q_p,&__pyx_n_s_q_grad_p,&__pyx_n_s_ebqe_p,&__pyx_n_s_ebqe_grad_p,&__pyx_n_s_vel_trial_ref,&__pyx_n_s_vel_grad_trial_ref,&__pyx_n_s_vel_hess_trial_ref,&__pyx_n_s_vel_test_ref,&__pyx_n_s_vel_grad_test_ref,&__pyx_n_s_mesh_trial_trace_ref,&__pyx_n_s_mesh_grad_trial_trace_ref,&__pyx_n_s_dS_ref,&__pyx_n_s_p_trial_trace_ref,&__pyx_n_s_p_grad_trial_trace_ref,&__pyx_n_s_p_test_trace_ref,&__pyx_n_s_p_grad_test_trace_ref,&__pyx_n_s_vel_trial_trace_ref,&__pyx_n_s_vel_grad_trial_trace_ref,&__pyx_n_s_vel_test_trace_ref,&__pyx_n_s_vel_grad_test_trace_ref,&__pyx_n_s_normal_ref,&__pyx_n_s_boundaryJac_ref,&__pyx_n_s_eb_adjoint_sigma,&__pyx_n_s_elementDiameter,&__pyx_n_s_nodeDiametersArray,&__pyx_n_s_hFactor,&__pyx_n_s_nElements_global,&__pyx_n_s_nElements_owned,&__pyx_n_s_useRBLES,&__pyx_n_s_useMetrics,&__pyx_n_s_alphaBDF,&__pyx_n_s_epsFact_rho,&__pyx_n_s_epsFact_mu,&__pyx_n_s_sigma,&__pyx_n_s_rho_0,&__pyx_n_s_nu_0,&__pyx_n_s_rho_1,&__pyx_n_s_nu_1,&__pyx_n_s_smagorinskyConstant,&__pyx_n_s_turbulenceClosureModel,&__pyx_n_s_Ct_sge,&__pyx_n_s_Cd_sge,&__pyx_n_s_C_dg,&__pyx_n_s_C_b,&__pyx_n_s_eps_solid,&__pyx_n_s_phi_solid,&__pyx_n_s_q_velocity_solid,&__pyx_n_s_q_vos,&__pyx_n_s_q_dvos_dt,&__pyx_n_s_q_dragAlpha,&__pyx_n_s_q_dragBeta,&__pyx_n_s_q_mass_source,&__pyx_n_s_q_turb_var_0,&__pyx_n_s_q_turb_var_1,&__pyx_n_s_q_turb_var_grad_0,&__pyx_n_s_p_l2g,&__pyx_n_s_vel_l2g,&__pyx_n_s_p_dof,&__pyx_n_s_u_dof,&__pyx_n_s_v_dof,&__pyx_n_s_w_dof,&__pyx_n_s_g,&__pyx_n_s_useVF,&__pyx_n_s_vf,&__pyx_n_s_phi,&__pyx_n_s_normal_phi,&__pyx_n_s_kappa_phi,&__pyx_n_s_q_mom_u_acc_beta_bdf,&__pyx_n_s_q_mom_v_acc_beta_bdf,&__pyx_n_s_q_mom_w_acc_beta_bdf,&__pyx_n_s_q_dV,&__pyx_n_s_q_dV_last,&__pyx_n_s_q_velocity_sge,&__pyx_n_s_ebqe_velocity_star,&__pyx_n_s_q_cfl,&__pyx_n_s_q_numDiff_u_last,&__pyx_n_s_q_numDiff_v_last,&__pyx_n_s_q_numDiff_w_last,&__pyx_n_s_sdInfo_u_u_rowptr,&__pyx_n_s_sdInfo_u_u_colind,&__pyx_n_s_sdInfo_u_v_rowptr,&__pyx_n_s_sdInfo_u_v_colind,&__pyx_n_s_sdInfo_u_w_rowptr,&__pyx_n_s_sdInfo_u_w_colind,&__pyx_n_s_sdInfo_v_v_rowptr,&__pyx_n_s_sdInfo_v_v_colind,&__pyx_n_s_sdInfo_v_u_rowptr,&__pyx_n_s_sdInfo_v_u_colind,&__pyx_n_s_sdInfo_v_w_rowptr,&__pyx_n_s_sdInfo_v_w_colind,&__pyx_n_s_sdInfo_w_w_rowptr,&__pyx_n_s_sdInfo_w_w_colind,&__pyx_n_s_sdInfo_w_u_rowptr,&__pyx_n_s_sdInfo_w_u_colind,&__pyx_n_s_sdInfo_w_v_rowptr,&__pyx_n_s_sdInfo_w_v_colind,&__pyx_n_s_csrRowIndeces_p_p,&__pyx_n_s_csrColumnOffsets_p_p,&__pyx_n_s_csrRowIndeces_p_u,&__pyx_n_s_csrColumnOffsets_p_u,&__pyx_n_s_csrRowIndeces_p_v,&__pyx_n_s_csrColumnOffsets_p_v,&__pyx_n_s_csrRowIndeces_p_w,&__pyx_n_s_csrColumnOffsets_p_w,&__pyx_n_s_csrRowIndeces_u_p,&__pyx_n_s_csrColumnOffsets_u_p,&__pyx_n_s_csrRowIndeces_u_u,&__pyx_n_s_csrColumnOffsets_u_u,&__pyx_n_s_csrRowIndeces_u_v,&__pyx_n_s_csrColumnOffsets_u_v,&__pyx_n_s_csrRowIndeces_u_w,&__pyx_n_s_csrColumnOffsets_u_w,&__pyx_n_s_csrRowIndeces_v_p,&__pyx_n_s_csrColumnOffsets_v_p,&__pyx_n_s_csrRowIndeces_v_u,&__pyx_n_s_csrColumnOffsets_v_u,&__pyx_n_s_csrRowIndeces_v_v,&__pyx_n_s_csrColumnOffsets_v_v,&__pyx_n_s_csrRowIndeces_v_w,&__pyx_n_s_csrColumnOffsets_v_w,&__pyx_n_s_csrRowIndeces_w_p,&__pyx_n_s_csrColumnOffsets_w_p,&__pyx_n_s_csrRowIndeces_w_u,&__pyx_n_s_csrColumnOffsets_w_u,&__pyx_n_s_csrRowIndeces_w_v,&__pyx_n_s_csrColumnOffsets_w_v,&__pyx_n_s_csrRowIndeces_w_w,&__pyx_n_s_csrColumnOffsets_w_w,&__pyx_n_s_globalJacobian,&__pyx_n_s_nExteriorElementBoundaries_globa,&__pyx_n_s_exteriorElementBoundariesArray,&__pyx_n_s_elementBoundaryElementsArray,&__pyx_n_s_elementBoundaryLocalElementBound,&__pyx_n_s_ebqe_vf_ext,&__pyx_n_s_bc_ebqe_vf_ext,&__pyx_n_s_ebqe_phi_ext,&__pyx_n_s_bc_ebqe_phi_ext,&__pyx_n_s_ebqe_normal_phi_ext,&__pyx_n_s_ebqe_kappa_phi_ext,&__pyx_n_s_ebqe_vos_ext,&__pyx_n_s_ebqe_turb_var_0,&__pyx_n_s_ebqe_turb_var_1,&__pyx_n_s_isDOFBoundary_p,&__pyx_n_s_isDOFBoundary_u,&__pyx_n_s_isDOFBoundary_v,&__pyx_n_s_isDOFBoundary_w,&__pyx_n_s_isAdvectiveFluxBoundary_p,&__pyx_n_s_isAdvectiveFluxBoundary_u,&__pyx_n_s_isAdvectiveFluxBoundary_v,&__pyx_n_s_isAdvectiveFluxBoundary_w,&__pyx_n_s_isDiffusiveFluxBoundary_u,&__pyx_n_s_isDiffusiveFluxBoundary_v,&__pyx_n_s_isDiffusiveFluxBoundary_w,&__pyx_n_s_ebqe_bc_p_ext,&__pyx_n_s_ebqe_bc_flux_mass_ext,&__pyx_n_s_ebqe_bc_flux_mom_u_adv_ext,&__pyx_n_s_ebqe_bc_flux_mom_v_adv_ext,&__pyx_n_s_ebqe_bc_flux_mom_w_adv_ext,&__pyx_n_s_ebqe_bc_u_ext,&__pyx_n_s_ebqe_bc_flux_u_diff_ext,&__pyx_n_s_ebqe_penalty_ext,&__pyx_n_s_ebqe_bc_v_ext,&__pyx_n_s_ebqe_bc_flux_v_diff_ext,&__pyx_n_s_ebqe_bc_w_ext,&__pyx_n_s_ebqe_bc_flux_w_diff_ext,&__pyx_n_s_csrColumnOffsets_eb_p_p,&__pyx_n_s_csrColumnOffsets_eb_p_u,&__pyx_n_s_csrColumnOffsets_eb_p_v,&__pyx_n_s_csrColumnOffsets_eb_p_w,&__pyx_n_s_csrColumnOffsets_eb_u_p,&__pyx_n_s_csrColumnOffsets_eb_u_u,&__pyx_n_s_csrColumnOffsets_eb_u_v,&__pyx_n_s_csrColumnOffsets_eb_u_w,&__pyx_n_s_csrColumnOffsets_eb_v_p,&__pyx_n_s_csrColumnOffsets_eb_v_u,&__pyx_n_s_csrColumnOffsets_eb_v_v,&__pyx_n_s_csrColumnOffsets_eb_v_w,&__pyx_n_s_csrColumnOffsets_eb_w_p,&__pyx_n_s_csrColumnOffsets_eb_w_u,&__pyx_n_s_csrColumnOffsets_eb_w_v,&__pyx_n_s_csrColumnOffsets_eb_w_w,&__pyx_n_s_elementFlags,&__pyx_n_s_nParticles,&__pyx_n_s_particle_epsFact,&__pyx_n_s_particle_alpha,&__pyx_n_s_particle_beta,&__pyx_n_s_particle_penalty_constant,&__pyx_n_s_particle_signed_distances,&__pyx_n_s_particle_signed_distance_normals,&__pyx_n_s_particle_velocities,&__pyx_n_s_particle_centroids,&__pyx_n_s_particle_nitsche,&__pyx_n_s_KILL_PRESSURE_TERM,&__pyx_n_s_MATERIAL_PARAMETERS_AS_FUNCTION,&__pyx_n_s_density_as_function,&__pyx_n_s_dynamic_viscosity_as_function,&__pyx_n_s_ebqe_density_as_function,&__pyx_n_s_ebqe_dynamic_viscosity_as_functi,0};
    PyObject* values[210] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 210: values[209] = PyTuple_GET_ITEM(__pyx_args, 209);
        case 209: values[208] = PyTuple_GET_ITEM(__pyx_args, 208);
        case 208: values[207] = PyTuple_GET_ITEM(__pyx_args, 207);
        case 207: values[206] = PyTuple_GET_ITEM(__pyx_args, 206);
        case 206: values[205] = PyTuple_GET_ITEM(__pyx_args, 205);
        case 205: values[204] = PyTuple_GET_ITEM(__pyx_args, 204);
        case 204: values[203] = PyTuple_GET_ITEM(__pyx_args, 203);
        case 203: values[202] = PyTuple_GET_ITEM(__pyx_args, 202);
        case 202: values[201] = PyTuple_GET_ITEM(__pyx_args, 201);
        case 201: values[200] = PyTuple_GET_ITEM(__pyx_args, 200);
        case 200: values[199] = PyTuple_GET_ITEM(__pyx_args, 199);
        case 199: values[198] = PyTuple_GET_ITEM(__pyx_args, 198);
        case 198: values[197] = PyTuple_GET_ITEM(__pyx_args, 197);
        case 197: values[196] = PyTuple_GET_ITEM(__pyx_args, 196);
        case 196: values[195] = PyTuple_GET_ITEM(__pyx_args, 195);
        case 195: values[194] = PyTuple_GET_ITEM(__pyx_args, 194);
        case 194: values[193] = PyTuple_GET_ITEM(__pyx_args, 193);
        case 193: values[192] = PyTuple_GET_ITEM(__pyx_args, 192);
        case 192: values[191] = PyTuple_GET_ITEM(__pyx_args, 191);
        case 191: values[190] = PyTuple_GET_ITEM(__pyx_args, 190);
        case 190: values[189] = PyTuple_GET_ITEM(__pyx_args, 189);
        case 189: values[188] = PyTuple_GET_ITEM(__pyx_args, 188);
        case 188: values[187] = PyTuple_GET_ITEM(__pyx_args, 187);
        case 187: values[186] = PyTuple_GET_ITEM(__pyx_args, 186);
        case 186: values[185] = PyTuple_GET_ITEM(__pyx_args, 185);
        case 185: values[184] = PyTuple_GET_ITEM(__pyx_args, 184);
        case 184: values[183] = PyTuple_GET_ITEM(__pyx_args, 183);
        case 183: values[182] = PyTuple_GET_ITEM(__pyx_args, 182);
        case 182: values[181] = PyTuple_GET_ITEM(__pyx_args, 181);
        case 181: values[180] = PyTuple_GET_ITEM(__pyx_args, 180);
        case 180: values[179] = PyTuple_GET_ITEM(__pyx_args, 179);
        case 179: values[178] = PyTuple_GET_ITEM(__pyx_args, 178);
        case 178: values[177] = PyTuple_GET_ITEM(__pyx_args, 177);
        case 177: values[176] = PyTuple_GET_ITEM(__pyx_args, 176);
        case 176: values[175] = PyTuple_GET_ITEM(__pyx_args, 175);
        case 175: values[174] = PyTuple_GET_ITEM(__pyx_args, 174);
        case 174: values[173] = PyTuple_GET_ITEM(__pyx_args, 173);
        case 173: values[172] = PyTuple_GET_ITEM(__pyx_args, 172);
        case 172: values[171] = PyTuple_GET_ITEM(__pyx_args, 171);
        case 171: values[170] = PyTuple_GET_ITEM(__pyx_args, 170);
        case 170: values[169] = PyTuple_GET_ITEM(__pyx_args, 169);
        case 169: values[168] = PyTuple_GET_ITEM(__pyx_args, 168);
        case 168: values[167] = PyTuple_GET_ITEM(__pyx_args, 167);
        case 167: values[166] = PyTuple_GET_ITEM(__pyx_args, 166);
        case 166: values[165] = PyTuple_GET_ITEM(__pyx_args, 165);
        case 165: values[164] = PyTuple_GET_ITEM(__pyx_args, 164);
        case 164: values[163] = PyTuple_GET_ITEM(__pyx_args, 163);
        case 163: values[162] = PyTuple_GET_ITEM(__pyx_args, 162);
        case 162: values[161] = PyTuple_GET_ITEM(__pyx_args, 161);
        case 161: values[160] = PyTuple_GET_ITEM(__pyx_args, 160);
        case 160: values[159] = PyTuple_GET_ITEM(__pyx_args, 159);
        case 159: values[158] = PyTuple_GET_ITEM(__pyx_args, 158);
        case 158: values[157] = PyTuple_GET_ITEM(__pyx_args, 157);
        case 157: values[156] = PyTuple_GET_ITEM(__pyx_args, 156);
        case 156: values[155] = PyTuple_GET_ITEM(__pyx_args, 155);
        case 155: values[154] = PyTuple_GET_ITEM(__pyx_args, 154);
        case 154: values[153] = PyTuple_GET_ITEM(__pyx_args, 153);
        case 153: values[152] = PyTuple_GET_ITEM(__pyx_args, 152);
        case 152: values[151] = PyTuple_GET_ITEM(__pyx_args, 151);
        case 151: values[150] = PyTuple_GET_ITEM(__pyx_args, 150);
        case 150: values[149] = PyTuple_GET_ITEM(__pyx_args, 149);
        case 149: values[148] = PyTuple_GET_ITEM(__pyx_args, 148);
        case 148: values[147] = PyTuple_GET_ITEM(__pyx_args, 147);
        case 147: values[146] = PyTuple_GET_ITEM(__pyx_args, 146);
        case 146: values[145] = PyTuple_GET_ITEM(__pyx_args, 145);
        case 145: values[144] = PyTuple_GET_ITEM(__pyx_args, 144);
        case 144: values[143] = PyTuple_GET_ITEM(__pyx_args, 143);
        case 143: values[142] = PyTuple_GET_ITEM(__pyx_args, 142);
        case 142: values[141] = PyTuple_GET_ITEM(__pyx_args, 141);
        case 141: values[140] = PyTuple_GET_ITEM(__pyx_args, 140);
        case 140: values[139] = PyTuple_GET_ITEM(__pyx_args, 139);
        case 139: values[138] = PyTuple_GET_ITEM(__pyx_args, 138);
        case 138: values[137] = PyTuple_GET_ITEM(__pyx_args, 137);
        case 137: values[136] = PyTuple_GET_ITEM(__pyx_args, 136);
        case 136: values[135] = PyTuple_GET_ITEM(__pyx_args, 135);
        case 135: values[134] = PyTuple_GET_ITEM(__pyx_args, 134);
        case 134: values[133] = PyTuple_GET_ITEM(__pyx_args, 133);
        case 133: values[132] = PyTuple_GET_ITEM(__pyx_args, 132);
        case 132: values[131] = PyTuple_GET_ITEM(__pyx_args, 131);
        case 131: values[130] = PyTuple_GET_ITEM(__pyx_args, 130);
        case 130: values[129] = PyTuple_GET_ITEM(__pyx_args, 129);
        case 129: values[128] = PyTuple_GET_ITEM(__pyx_args, 128);
        case 128: values[127] = PyTuple_GET_ITEM(__pyx_args, 127);
        case 127: values[126] = PyTuple_GET_ITEM(__pyx_args, 126);
        case 126: values[125] = PyTuple_GET_ITEM(__pyx_args, 125);
        case 125: values[124] = PyTuple_GET_ITEM(__pyx_args, 124);
        case 124: values[123] = PyTuple_GET_ITEM(__pyx_args, 123);
        case 123: values[122] = PyTuple_GET_ITEM(__pyx_args, 122);
        case 122: values[121] = PyTuple_GET_ITEM(__pyx_args, 121);
        case 121: values[120] = PyTuple_GET_ITEM(__pyx_args, 120);
        case 120: values[119] = PyTuple_GET_ITEM(__pyx_args, 119);
        case 119: values[118] = PyTuple_GET_ITEM(__pyx_args, 118);
        case 118: values[117] = PyTuple_GET_ITEM(__pyx_args, 117);
        case 117: values[116] = PyTuple_GET_ITEM(__pyx_args, 116);
        case 116: values[115] = PyTuple_GET_ITEM(__pyx_args, 115);
        case 115: values[114] = PyTuple_GET_ITEM(__pyx_args, 114);
        case 114: values[113] = PyTuple_GET_ITEM(__pyx_args, 113);
        case 113: values[112] = PyTuple_GET_ITEM(__pyx_args, 112);
        case 112: values[111] = PyTuple_GET_ITEM(__pyx_args, 111);
        case 111: values[110] = PyTuple_GET_ITEM(__pyx_args, 110);
        case 110: values[109] = PyTuple_GET_ITEM(__pyx_args, 109);
        case 109: values[108] = PyTuple_GET_ITEM(__pyx_args, 108);
        case 108: values[107] = PyTuple_GET_ITEM(__pyx_args, 107);
        case 107: values[106] = PyTuple_GET_ITEM(__pyx_args, 106);
        case 106: values[105] = PyTuple_GET_ITEM(__pyx_args, 105);
        case 105: values[104] = PyTuple_GET_ITEM(__pyx_args, 104);
        case 104: values[103] = PyTuple_GET_ITEM(__pyx_args, 103);
        case 103: values[102] = PyTuple_GET_ITEM(__pyx_args, 102);
        case 102: values[101] = PyTuple_GET_ITEM(__pyx_args, 101);
        case 101: values[100] = PyTuple_GET_ITEM(__pyx_args, 100);
        case 100: values[99] = PyTuple_GET_ITEM(__pyx_args, 99);
        case 99: values[98] = PyTuple_GET_ITEM(__pyx_args, 98);
        case 98: values[97] = PyTuple_GET_ITEM(__pyx_args, 97);
        case 97: values[96] = PyTuple_GET_ITEM(__pyx_args, 96);
        case 96: values[95] = PyTuple_GET_ITEM(__pyx_args, 95);
        case 95: values[94] = PyTuple_GET_ITEM(__pyx_args, 94);
        case 94: values[93] = PyTuple_GET_ITEM(__pyx_args, 93);
        case 93: values[92] = PyTuple_GET_ITEM(__pyx_args, 92);
        case 92: values[91] = PyTuple_GET_ITEM(__pyx_args, 91);
        case 91: values[90] = PyTuple_GET_ITEM(__pyx_args, 90);
        case 90: values[89] = PyTuple_GET_ITEM(__pyx_args, 89);
        case 89: values[88] = PyTuple_GET_ITEM(__pyx_args, 88);
        case 88: values[87] = PyTuple_GET_ITEM(__pyx_args, 87);
        case 87: values[86] = PyTuple_GET_ITEM(__pyx_args, 86);
        case 86: values[85] = PyTuple_GET_ITEM(__pyx_args, 85);
        case 85: values[84] = PyTuple_GET_ITEM(__pyx_args, 84);
        case 84: values[83] = PyTuple_GET_ITEM(__pyx_args, 83);
        case 83: values[82] = PyTuple_GET_ITEM(__pyx_args, 82);
        case 82: values[81] = PyTuple_GET_ITEM(__pyx_args, 81);
        case 81: values[80] = PyTuple_GET_ITEM(__pyx_args, 80);
        case 80: values[79] = PyTuple_GET_ITEM(__pyx_args, 79);
        case 79: values[78] = PyTuple_GET_ITEM(__pyx_args, 78);
        case 78: values[77] = PyTuple_GET_ITEM(__pyx_args, 77);
        case 77: values[76] = PyTuple_GET_ITEM(__pyx_args, 76);
        case 76: values[75] = PyTuple_GET_ITEM(__pyx_args, 75);
        case 75: values[74] = PyTuple_GET_ITEM(__pyx_args, 74);
        case 74: values[73] = PyTuple_GET_ITEM(__pyx_args, 73);
        case 73: values[72] = PyTuple_GET_ITEM(__pyx_args, 72);
        case 72: values[71] = PyTuple_GET_ITEM(__pyx_args, 71);
        case 71: values[70] = PyTuple_GET_ITEM(__pyx_args, 70);
        case 70: values[69] = PyTuple_GET_ITEM(__pyx_args, 69);
        case 69: values[68] = PyTuple_GET_ITEM(__pyx_args, 68);
        case 68: values[67] = PyTuple_GET_ITEM(__pyx_args, 67);
        case 67: values[66] = PyTuple_GET_ITEM(__pyx_args, 66);
        case 66: values[65] = PyTuple_GET_ITEM(__pyx_args, 65);
        case 65: values[64] = PyTuple_GET_ITEM(__pyx_args, 64);
        case 64: values[63] = PyTuple_GET_ITEM(__pyx_args, 63);
        case 63: values[62] = PyTuple_GET_ITEM(__pyx_args, 62);
        case 62: values[61] = PyTuple_GET_ITEM(__pyx_args, 61);
        case 61: values[60] = PyTuple_GET_ITEM(__pyx_args, 60);
        case 60: values[59] = PyTuple_GET_ITEM(__pyx_args, 59);
        case 59: values[58] = PyTuple_GET_ITEM(__pyx_args, 58);
        case 58: values[57] = PyTuple_GET_ITEM(__pyx_args, 57);
        case 57: values[56] = PyTuple_GET_ITEM(__pyx_args, 56);
        case 56: values[55] = PyTuple_GET_ITEM(__pyx_args, 55);
        case 55: values[54] = PyTuple_GET_ITEM(__pyx_args, 54);
        case 54: values[53] = PyTuple_GET_ITEM(__pyx_args, 53);
        case 53: values[52] = PyTuple_GET_ITEM(__pyx_args, 52);
        case 52: values[51] = PyTuple_GET_ITEM(__pyx_args, 51);
        case 51: values[50] = PyTuple_GET_ITEM(__pyx_args, 50);
        case 50: values[49] = PyTuple_GET_ITEM(__pyx_args, 49);
        case 49: values[48] = PyTuple_GET_ITEM(__pyx_args, 48);
        case 48: values[47] = PyTuple_GET_ITEM(__pyx_args, 47);
        case 47: values[46] = PyTuple_GET_ITEM(__pyx_args, 46);
        case 46: values[45] = PyTuple_GET_ITEM(__pyx_args, 45);
        case 45: values[44] = PyTuple_GET_ITEM(__pyx_args, 44);
        case 44: values[43] = PyTuple_GET_ITEM(__pyx_args, 43);
        case 43: values[42] = PyTuple_GET_ITEM(__pyx_args, 42);
        case 42: values[41] = PyTuple_GET_ITEM(__pyx_args, 41);
        case 41: values[40] = PyTuple_GET_ITEM(__pyx_args, 40);
        case 40: values[39] = PyTuple_GET_ITEM(__pyx_args, 39);
        case 39: values[38] = PyTuple_GET_ITEM(__pyx_args, 38);
        case 38: values[37] = PyTuple_GET_ITEM(__pyx_args, 37);
        case 37: values[36] = PyTuple_GET_ITEM(__pyx_args, 36);
        case 36: values[35] = PyTuple_GET_ITEM(__pyx_args, 35);
        case 35: values[34] = PyTuple_GET_ITEM(__pyx_args, 34);
        case 34: values[33] = PyTuple_GET_ITEM(__pyx_args, 33);
        case 33: values[32] = PyTuple_GET_ITEM(__pyx_args, 32);
        case 32: values[31] = PyTuple_GET_ITEM(__pyx_args, 31);
        case 31: values[30] = PyTuple_GET_ITEM(__pyx_args, 30);
        case 30: values[29] = PyTuple_GET_ITEM(__pyx_args, 29);
        case 29: values[28] = PyTuple_GET_ITEM(__pyx_args, 28);
        case 28: values[27] = PyTuple_GET_ITEM(__pyx_args, 27);
        case 27: values[26] = PyTuple_GET_ITEM(__pyx_args, 26);
        case 26: values[25] = PyTuple_GET_ITEM(__pyx_args, 25);
        case 25: values[24] = PyTuple_GET_ITEM(__pyx_args, 24);
        case 24: values[23] = PyTuple_GET_ITEM(__pyx_args, 23);
        case 23: values[22] = PyTuple_GET_ITEM(__pyx_args, 22);
        case 22: values[21] = PyTuple_GET_ITEM(__pyx_args, 21);
        case 21: values[20] = PyTuple_GET_ITEM(__pyx_args, 20);
        case 20: values[19] = PyTuple_GET_ITEM(__pyx_args, 19);
        case 19: values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
        case 18: values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
        case 17: values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_trial_ref)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_grad_trial_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 1); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 2); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_velocity_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 3); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_MOVING_DOMAIN)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 4); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_PSTAB)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 5); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_l2g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 6); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case  7:
        if (likely((values[7] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dV_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 7); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case  8:
        if (likely((values[8] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_trial_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 8); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case  9:
        if (likely((values[9] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_grad_trial_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 9); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 10:
        if (likely((values[10] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_test_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 10); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 11:
        if (likely((values[11] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_grad_test_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 11); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 12:
        if (likely((values[12] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 12); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 13:
        if (likely((values[13] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_grad_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 13); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 14:
        if (likely((values[14] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 14); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 15:
        if (likely((values[15] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_grad_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 15); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 16:
        if (likely((values[16] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_trial_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 16); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 17:
        if (likely((values[17] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_grad_trial_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 17); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 18:
        if (likely((values[18] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_hess_trial_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 18); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 19:
        if (likely((values[19] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_test_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 19); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 20:
        if (likely((values[20] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_grad_test_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 20); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 21:
        if (likely((values[21] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 21); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 22:
        if (likely((values[22] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_grad_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 22); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 23:
        if (likely((values[23] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dS_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 23); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 24:
        if (likely((values[24] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 24); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 25:
        if (likely((values[25] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_grad_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 25); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 26:
        if (likely((values[26] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_test_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 26); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 27:
        if (likely((values[27] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_grad_test_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 27); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 28:
        if (likely((values[28] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 28); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 29:
        if (likely((values[29] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_grad_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 29); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 30:
        if (likely((values[30] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_test_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 30); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 31:
        if (likely((values[31] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_grad_test_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 31); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 32:
        if (likely((values[32] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_normal_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 32); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 33:
        if (likely((values[33] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_boundaryJac_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 33); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 34:
        if (likely((values[34] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_eb_adjoint_sigma)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 34); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 35:
        if (likely((values[35] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_elementDiameter)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 35); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 36:
        if (likely((values[36] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nodeDiametersArray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 36); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 37:
        if (likely((values[37] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_hFactor)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 37); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 38:
        if (likely((values[38] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nElements_global)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 38); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 39:
        if (likely((values[39] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nElements_owned)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 39); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 40:
        if (likely((values[40] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_useRBLES)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 40); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 41:
        if (likely((values[41] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_useMetrics)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 41); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 42:
        if (likely((values[42] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_alphaBDF)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 42); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 43:
        if (likely((values[43] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_epsFact_rho)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 43); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 44:
        if (likely((values[44] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_epsFact_mu)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 44); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 45:
        if (likely((values[45] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sigma)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 45); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 46:
        if (likely((values[46] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rho_0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 46); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 47:
        if (likely((values[47] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nu_0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 47); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 48:
        if (likely((values[48] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rho_1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 48); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 49:
        if (likely((values[49] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nu_1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 49); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 50:
        if (likely((values[50] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_smagorinskyConstant)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 50); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 51:
        if (likely((values[51] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_turbulenceClosureModel)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 51); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 52:
        if (likely((values[52] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Ct_sge)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 52); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 53:
        if (likely((values[53] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Cd_sge)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 53); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 54:
        if (likely((values[54] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_C_dg)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 54); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 55:
        if (likely((values[55] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_C_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 55); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 56:
        if (likely((values[56] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_eps_solid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 56); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 57:
        if (likely((values[57] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_phi_solid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 57); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 58:
        if (likely((values[58] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_velocity_solid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 58); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 59:
        if (likely((values[59] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_vos)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 59); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 60:
        if (likely((values[60] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_dvos_dt)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 60); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 61:
        if (likely((values[61] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_dragAlpha)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 61); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 62:
        if (likely((values[62] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_dragBeta)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 62); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 63:
        if (likely((values[63] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_mass_source)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 63); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 64:
        if (likely((values[64] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_turb_var_0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 64); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 65:
        if (likely((values[65] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_turb_var_1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 65); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 66:
        if (likely((values[66] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_turb_var_grad_0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 66); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 67:
        if (likely((values[67] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_l2g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 67); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 68:
        if (likely((values[68] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_l2g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 68); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 69:
        if (likely((values[69] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 69); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 70:
        if (likely((values[70] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_u_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 70); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 71:
        if (likely((values[71] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_v_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 71); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 72:
        if (likely((values[72] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_w_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 72); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 73:
        if (likely((values[73] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 73); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 74:
        if (likely((values[74] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_useVF)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 74); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 75:
        if (likely((values[75] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vf)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 75); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 76:
        if (likely((values[76] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_phi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 76); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 77:
        if (likely((values[77] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_normal_phi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 77); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 78:
        if (likely((values[78] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_kappa_phi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 78); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 79:
        if (likely((values[79] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_mom_u_acc_beta_bdf)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 79); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 80:
        if (likely((values[80] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_mom_v_acc_beta_bdf)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 80); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 81:
        if (likely((values[81] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_mom_w_acc_beta_bdf)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 81); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 82:
        if (likely((values[82] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_dV)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 82); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 83:
        if (likely((values[83] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_dV_last)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 83); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 84:
        if (likely((values[84] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_velocity_sge)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 84); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 85:
        if (likely((values[85] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_velocity_star)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 85); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 86:
        if (likely((values[86] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_cfl)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 86); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 87:
        if (likely((values[87] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_numDiff_u_last)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 87); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 88:
        if (likely((values[88] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_numDiff_v_last)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 88); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 89:
        if (likely((values[89] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_numDiff_w_last)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 89); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 90:
        if (likely((values[90] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_u_u_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 90); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 91:
        if (likely((values[91] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_u_u_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 91); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 92:
        if (likely((values[92] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_u_v_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 92); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 93:
        if (likely((values[93] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_u_v_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 93); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 94:
        if (likely((values[94] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_u_w_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 94); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 95:
        if (likely((values[95] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_u_w_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 95); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 96:
        if (likely((values[96] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_v_v_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 96); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 97:
        if (likely((values[97] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_v_v_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 97); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 98:
        if (likely((values[98] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_v_u_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 98); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 99:
        if (likely((values[99] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_v_u_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 99); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 100:
        if (likely((values[100] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_v_w_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 100); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 101:
        if (likely((values[101] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_v_w_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 101); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 102:
        if (likely((values[102] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_w_w_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 102); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 103:
        if (likely((values[103] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_w_w_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 103); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 104:
        if (likely((values[104] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_w_u_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 104); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 105:
        if (likely((values[105] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_w_u_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 105); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 106:
        if (likely((values[106] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_w_v_rowptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 106); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 107:
        if (likely((values[107] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdInfo_w_v_colind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 107); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 108:
        if (likely((values[108] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_p_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 108); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 109:
        if (likely((values[109] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_p_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 109); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 110:
        if (likely((values[110] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_p_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 110); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 111:
        if (likely((values[111] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_p_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 111); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 112:
        if (likely((values[112] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_p_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 112); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 113:
        if (likely((values[113] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_p_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 113); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 114:
        if (likely((values[114] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_p_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 114); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 115:
        if (likely((values[115] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_p_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 115); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 116:
        if (likely((values[116] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_u_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 116); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 117:
        if (likely((values[117] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_u_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 117); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 118:
        if (likely((values[118] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_u_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 118); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 119:
        if (likely((values[119] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_u_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 119); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 120:
        if (likely((values[120] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_u_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 120); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 121:
        if (likely((values[121] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_u_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 121); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 122:
        if (likely((values[122] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_u_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 122); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 123:
        if (likely((values[123] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_u_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 123); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 124:
        if (likely((values[124] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_v_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 124); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 125:
        if (likely((values[125] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_v_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 125); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 126:
        if (likely((values[126] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_v_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 126); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 127:
        if (likely((values[127] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_v_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 127); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 128:
        if (likely((values[128] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_v_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 128); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 129:
        if (likely((values[129] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_v_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 129); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 130:
        if (likely((values[130] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_v_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 130); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 131:
        if (likely((values[131] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_v_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 131); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 132:
        if (likely((values[132] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_w_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 132); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 133:
        if (likely((values[133] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_w_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 133); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 134:
        if (likely((values[134] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_w_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 134); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 135:
        if (likely((values[135] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_w_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 135); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 136:
        if (likely((values[136] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_w_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 136); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 137:
        if (likely((values[137] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_w_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 137); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 138:
        if (likely((values[138] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_w_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 138); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 139:
        if (likely((values[139] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_w_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 139); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 140:
        if (likely((values[140] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_globalJacobian)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 140); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 141:
        if (likely((values[141] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nExteriorElementBoundaries_globa)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 141); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 142:
        if (likely((values[142] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_exteriorElementBoundariesArray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 142); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 143:
        if (likely((values[143] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_elementBoundaryElementsArray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 143); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 144:
        if (likely((values[144] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_elementBoundaryLocalElementBound)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 144); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 145:
        if (likely((values[145] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_vf_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 145); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 146:
        if (likely((values[146] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bc_ebqe_vf_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 146); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 147:
        if (likely((values[147] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_phi_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 147); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 148:
        if (likely((values[148] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bc_ebqe_phi_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 148); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 149:
        if (likely((values[149] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_normal_phi_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 149); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 150:
        if (likely((values[150] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_kappa_phi_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 150); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 151:
        if (likely((values[151] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_vos_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 151); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 152:
        if (likely((values[152] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_turb_var_0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 152); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 153:
        if (likely((values[153] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_turb_var_1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 153); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 154:
        if (likely((values[154] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isDOFBoundary_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 154); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 155:
        if (likely((values[155] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isDOFBoundary_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 155); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 156:
        if (likely((values[156] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isDOFBoundary_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 156); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 157:
        if (likely((values[157] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isDOFBoundary_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 157); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 158:
        if (likely((values[158] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isAdvectiveFluxBoundary_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 158); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 159:
        if (likely((values[159] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isAdvectiveFluxBoundary_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 159); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 160:
        if (likely((values[160] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isAdvectiveFluxBoundary_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 160); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 161:
        if (likely((values[161] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isAdvectiveFluxBoundary_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 161); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 162:
        if (likely((values[162] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isDiffusiveFluxBoundary_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 162); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 163:
        if (likely((values[163] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isDiffusiveFluxBoundary_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 163); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 164:
        if (likely((values[164] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isDiffusiveFluxBoundary_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 164); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 165:
        if (likely((values[165] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_p_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 165); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 166:
        if (likely((values[166] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_flux_mass_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 166); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 167:
        if (likely((values[167] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_flux_mom_u_adv_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 167); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 168:
        if (likely((values[168] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_flux_mom_v_adv_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 168); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 169:
        if (likely((values[169] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_flux_mom_w_adv_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 169); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 170:
        if (likely((values[170] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_u_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 170); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 171:
        if (likely((values[171] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_flux_u_diff_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 171); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 172:
        if (likely((values[172] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_penalty_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 172); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 173:
        if (likely((values[173] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_v_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 173); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 174:
        if (likely((values[174] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_flux_v_diff_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 174); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 175:
        if (likely((values[175] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_w_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 175); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 176:
        if (likely((values[176] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_flux_w_diff_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 176); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 177:
        if (likely((values[177] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_p_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 177); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 178:
        if (likely((values[178] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_p_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 178); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 179:
        if (likely((values[179] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_p_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 179); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 180:
        if (likely((values[180] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_p_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 180); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 181:
        if (likely((values[181] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_u_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 181); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 182:
        if (likely((values[182] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_u_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 182); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 183:
        if (likely((values[183] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_u_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 183); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 184:
        if (likely((values[184] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_u_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 184); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 185:
        if (likely((values[185] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_v_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 185); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 186:
        if (likely((values[186] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_v_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 186); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 187:
        if (likely((values[187] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_v_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 187); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 188:
        if (likely((values[188] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_v_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 188); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 189:
        if (likely((values[189] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_w_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 189); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 190:
        if (likely((values[190] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_w_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 190); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 191:
        if (likely((values[191] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_w_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 191); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 192:
        if (likely((values[192] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_w_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 192); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 193:
        if (likely((values[193] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_elementFlags)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 193); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 194:
        if (likely((values[194] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nParticles)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 194); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 195:
        if (likely((values[195] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_epsFact)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 195); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 196:
        if (likely((values[196] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_alpha)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 196); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 197:
        if (likely((values[197] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_beta)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 197); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 198:
        if (likely((values[198] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_penalty_constant)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 198); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 199:
        if (likely((values[199] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_signed_distances)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 199); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 200:
        if (likely((values[200] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_signed_distance_normals)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 200); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 201:
        if (likely((values[201] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_velocities)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 201); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 202:
        if (likely((values[202] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_centroids)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 202); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 203:
        if (likely((values[203] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_particle_nitsche)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 203); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 204:
        if (likely((values[204] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_KILL_PRESSURE_TERM)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 204); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 205:
        if (likely((values[205] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_MATERIAL_PARAMETERS_AS_FUNCTION)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 205); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 206:
        if (likely((values[206] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_density_as_function)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 206); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 207:
        if (likely((values[207] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dynamic_viscosity_as_function)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 207); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 208:
        if (likely((values[208] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_density_as_function)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 208); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
        case 209:
        if (likely((values[209] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_dynamic_viscosity_as_functi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, 209); __PYX_ERR(0, 4717, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calculateJacobian_entropy_viscosity") < 0)) __PYX_ERR(0, 4717, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 210) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
      values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
      values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
      values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
      values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
      values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
      values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
      values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
      values[19] = PyTuple_GET_ITEM(__pyx_args, 19);
      values[20] = PyTuple_GET_ITEM(__pyx_args, 20);
      values[21] = PyTuple_GET_ITEM(__pyx_args, 21);
      values[22] = PyTuple_GET_ITEM(__pyx_args, 22);
      values[23] = PyTuple_GET_ITEM(__pyx_args, 23);
      values[24] = PyTuple_GET_ITEM(__pyx_args, 24);
      values[25] = PyTuple_GET_ITEM(__pyx_args, 25);
      values[26] = PyTuple_GET_ITEM(__pyx_args, 26);
      values[27] = PyTuple_GET_ITEM(__pyx_args, 27);
      values[28] = PyTuple_GET_ITEM(__pyx_args, 28);
      values[29] = PyTuple_GET_ITEM(__pyx_args, 29);
      values[30] = PyTuple_GET_ITEM(__pyx_args, 30);
      values[31] = PyTuple_GET_ITEM(__pyx_args, 31);
      values[32] = PyTuple_GET_ITEM(__pyx_args, 32);
      values[33] = PyTuple_GET_ITEM(__pyx_args, 33);
      values[34] = PyTuple_GET_ITEM(__pyx_args, 34);
      values[35] = PyTuple_GET_ITEM(__pyx_args, 35);
      values[36] = PyTuple_GET_ITEM(__pyx_args, 36);
      values[37] = PyTuple_GET_ITEM(__pyx_args, 37);
      values[38] = PyTuple_GET_ITEM(__pyx_args, 38);
      values[39] = PyTuple_GET_ITEM(__pyx_args, 39);
      values[40] = PyTuple_GET_ITEM(__pyx_args, 40);
      values[41] = PyTuple_GET_ITEM(__pyx_args, 41);
      values[42] = PyTuple_GET_ITEM(__pyx_args, 42);
      values[43] = PyTuple_GET_ITEM(__pyx_args, 43);
      values[44] = PyTuple_GET_ITEM(__pyx_args, 44);
      values[45] = PyTuple_GET_ITEM(__pyx_args, 45);
      values[46] = PyTuple_GET_ITEM(__pyx_args, 46);
      values[47] = PyTuple_GET_ITEM(__pyx_args, 47);
      values[48] = PyTuple_GET_ITEM(__pyx_args, 48);
      values[49] = PyTuple_GET_ITEM(__pyx_args, 49);
      values[50] = PyTuple_GET_ITEM(__pyx_args, 50);
      values[51] = PyTuple_GET_ITEM(__pyx_args, 51);
      values[52] = PyTuple_GET_ITEM(__pyx_args, 52);
      values[53] = PyTuple_GET_ITEM(__pyx_args, 53);
      values[54] = PyTuple_GET_ITEM(__pyx_args, 54);
      values[55] = PyTuple_GET_ITEM(__pyx_args, 55);
      values[56] = PyTuple_GET_ITEM(__pyx_args, 56);
      values[57] = PyTuple_GET_ITEM(__pyx_args, 57);
      values[58] = PyTuple_GET_ITEM(__pyx_args, 58);
      values[59] = PyTuple_GET_ITEM(__pyx_args, 59);
      values[60] = PyTuple_GET_ITEM(__pyx_args, 60);
      values[61] = PyTuple_GET_ITEM(__pyx_args, 61);
      values[62] = PyTuple_GET_ITEM(__pyx_args, 62);
      values[63] = PyTuple_GET_ITEM(__pyx_args, 63);
      values[64] = PyTuple_GET_ITEM(__pyx_args, 64);
      values[65] = PyTuple_GET_ITEM(__pyx_args, 65);
      values[66] = PyTuple_GET_ITEM(__pyx_args, 66);
      values[67] = PyTuple_GET_ITEM(__pyx_args, 67);
      values[68] = PyTuple_GET_ITEM(__pyx_args, 68);
      values[69] = PyTuple_GET_ITEM(__pyx_args, 69);
      values[70] = PyTuple_GET_ITEM(__pyx_args, 70);
      values[71] = PyTuple_GET_ITEM(__pyx_args, 71);
      values[72] = PyTuple_GET_ITEM(__pyx_args, 72);
      values[73] = PyTuple_GET_ITEM(__pyx_args, 73);
      values[74] = PyTuple_GET_ITEM(__pyx_args, 74);
      values[75] = PyTuple_GET_ITEM(__pyx_args, 75);
      values[76] = PyTuple_GET_ITEM(__pyx_args, 76);
      values[77] = PyTuple_GET_ITEM(__pyx_args, 77);
      values[78] = PyTuple_GET_ITEM(__pyx_args, 78);
      values[79] = PyTuple_GET_ITEM(__pyx_args, 79);
      values[80] = PyTuple_GET_ITEM(__pyx_args, 80);
      values[81] = PyTuple_GET_ITEM(__pyx_args, 81);
      values[82] = PyTuple_GET_ITEM(__pyx_args, 82);
      values[83] = PyTuple_GET_ITEM(__pyx_args, 83);
      values[84] = PyTuple_GET_ITEM(__pyx_args, 84);
      values[85] = PyTuple_GET_ITEM(__pyx_args, 85);
      values[86] = PyTuple_GET_ITEM(__pyx_args, 86);
      values[87] = PyTuple_GET_ITEM(__pyx_args, 87);
      values[88] = PyTuple_GET_ITEM(__pyx_args, 88);
      values[89] = PyTuple_GET_ITEM(__pyx_args, 89);
      values[90] = PyTuple_GET_ITEM(__pyx_args, 90);
      values[91] = PyTuple_GET_ITEM(__pyx_args, 91);
      values[92] = PyTuple_GET_ITEM(__pyx_args, 92);
      values[93] = PyTuple_GET_ITEM(__pyx_args, 93);
      values[94] = PyTuple_GET_ITEM(__pyx_args, 94);
      values[95] = PyTuple_GET_ITEM(__pyx_args, 95);
      values[96] = PyTuple_GET_ITEM(__pyx_args, 96);
      values[97] = PyTuple_GET_ITEM(__pyx_args, 97);
      values[98] = PyTuple_GET_ITEM(__pyx_args, 98);
      values[99] = PyTuple_GET_ITEM(__pyx_args, 99);
      values[100] = PyTuple_GET_ITEM(__pyx_args, 100);
      values[101] = PyTuple_GET_ITEM(__pyx_args, 101);
      values[102] = PyTuple_GET_ITEM(__pyx_args, 102);
      values[103] = PyTuple_GET_ITEM(__pyx_args, 103);
      values[104] = PyTuple_GET_ITEM(__pyx_args, 104);
      values[105] = PyTuple_GET_ITEM(__pyx_args, 105);
      values[106] = PyTuple_GET_ITEM(__pyx_args, 106);
      values[107] = PyTuple_GET_ITEM(__pyx_args, 107);
      values[108] = PyTuple_GET_ITEM(__pyx_args, 108);
      values[109] = PyTuple_GET_ITEM(__pyx_args, 109);
      values[110] = PyTuple_GET_ITEM(__pyx_args, 110);
      values[111] = PyTuple_GET_ITEM(__pyx_args, 111);
      values[112] = PyTuple_GET_ITEM(__pyx_args, 112);
      values[113] = PyTuple_GET_ITEM(__pyx_args, 113);
      values[114] = PyTuple_GET_ITEM(__pyx_args, 114);
      values[115] = PyTuple_GET_ITEM(__pyx_args, 115);
      values[116] = PyTuple_GET_ITEM(__pyx_args, 116);
      values[117] = PyTuple_GET_ITEM(__pyx_args, 117);
      values[118] = PyTuple_GET_ITEM(__pyx_args, 118);
      values[119] = PyTuple_GET_ITEM(__pyx_args, 119);
      values[120] = PyTuple_GET_ITEM(__pyx_args, 120);
      values[121] = PyTuple_GET_ITEM(__pyx_args, 121);
      values[122] = PyTuple_GET_ITEM(__pyx_args, 122);
      values[123] = PyTuple_GET_ITEM(__pyx_args, 123);
      values[124] = PyTuple_GET_ITEM(__pyx_args, 124);
      values[125] = PyTuple_GET_ITEM(__pyx_args, 125);
      values[126] = PyTuple_GET_ITEM(__pyx_args, 126);
      values[127] = PyTuple_GET_ITEM(__pyx_args, 127);
      values[128] = PyTuple_GET_ITEM(__pyx_args, 128);
      values[129] = PyTuple_GET_ITEM(__pyx_args, 129);
      values[130] = PyTuple_GET_ITEM(__pyx_args, 130);
      values[131] = PyTuple_GET_ITEM(__pyx_args, 131);
      values[132] = PyTuple_GET_ITEM(__pyx_args, 132);
      values[133] = PyTuple_GET_ITEM(__pyx_args, 133);
      values[134] = PyTuple_GET_ITEM(__pyx_args, 134);
      values[135] = PyTuple_GET_ITEM(__pyx_args, 135);
      values[136] = PyTuple_GET_ITEM(__pyx_args, 136);
      values[137] = PyTuple_GET_ITEM(__pyx_args, 137);
      values[138] = PyTuple_GET_ITEM(__pyx_args, 138);
      values[139] = PyTuple_GET_ITEM(__pyx_args, 139);
      values[140] = PyTuple_GET_ITEM(__pyx_args, 140);
      values[141] = PyTuple_GET_ITEM(__pyx_args, 141);
      values[142] = PyTuple_GET_ITEM(__pyx_args, 142);
      values[143] = PyTuple_GET_ITEM(__pyx_args, 143);
      values[144] = PyTuple_GET_ITEM(__pyx_args, 144);
      values[145] = PyTuple_GET_ITEM(__pyx_args, 145);
      values[146] = PyTuple_GET_ITEM(__pyx_args, 146);
      values[147] = PyTuple_GET_ITEM(__pyx_args, 147);
      values[148] = PyTuple_GET_ITEM(__pyx_args, 148);
      values[149] = PyTuple_GET_ITEM(__pyx_args, 149);
      values[150] = PyTuple_GET_ITEM(__pyx_args, 150);
      values[151] = PyTuple_GET_ITEM(__pyx_args, 151);
      values[152] = PyTuple_GET_ITEM(__pyx_args, 152);
      values[153] = PyTuple_GET_ITEM(__pyx_args, 153);
      values[154] = PyTuple_GET_ITEM(__pyx_args, 154);
      values[155] = PyTuple_GET_ITEM(__pyx_args, 155);
      values[156] = PyTuple_GET_ITEM(__pyx_args, 156);
      values[157] = PyTuple_GET_ITEM(__pyx_args, 157);
      values[158] = PyTuple_GET_ITEM(__pyx_args, 158);
      values[159] = PyTuple_GET_ITEM(__pyx_args, 159);
      values[160] = PyTuple_GET_ITEM(__pyx_args, 160);
      values[161] = PyTuple_GET_ITEM(__pyx_args, 161);
      values[162] = PyTuple_GET_ITEM(__pyx_args, 162);
      values[163] = PyTuple_GET_ITEM(__pyx_args, 163);
      values[164] = PyTuple_GET_ITEM(__pyx_args, 164);
      values[165] = PyTuple_GET_ITEM(__pyx_args, 165);
      values[166] = PyTuple_GET_ITEM(__pyx_args, 166);
      values[167] = PyTuple_GET_ITEM(__pyx_args, 167);
      values[168] = PyTuple_GET_ITEM(__pyx_args, 168);
      values[169] = PyTuple_GET_ITEM(__pyx_args, 169);
      values[170] = PyTuple_GET_ITEM(__pyx_args, 170);
      values[171] = PyTuple_GET_ITEM(__pyx_args, 171);
      values[172] = PyTuple_GET_ITEM(__pyx_args, 172);
      values[173] = PyTuple_GET_ITEM(__pyx_args, 173);
      values[174] = PyTuple_GET_ITEM(__pyx_args, 174);
      values[175] = PyTuple_GET_ITEM(__pyx_args, 175);
      values[176] = PyTuple_GET_ITEM(__pyx_args, 176);
      values[177] = PyTuple_GET_ITEM(__pyx_args, 177);
      values[178] = PyTuple_GET_ITEM(__pyx_args, 178);
      values[179] = PyTuple_GET_ITEM(__pyx_args, 179);
      values[180] = PyTuple_GET_ITEM(__pyx_args, 180);
      values[181] = PyTuple_GET_ITEM(__pyx_args, 181);
      values[182] = PyTuple_GET_ITEM(__pyx_args, 182);
      values[183] = PyTuple_GET_ITEM(__pyx_args, 183);
      values[184] = PyTuple_GET_ITEM(__pyx_args, 184);
      values[185] = PyTuple_GET_ITEM(__pyx_args, 185);
      values[186] = PyTuple_GET_ITEM(__pyx_args, 186);
      values[187] = PyTuple_GET_ITEM(__pyx_args, 187);
      values[188] = PyTuple_GET_ITEM(__pyx_args, 188);
      values[189] = PyTuple_GET_ITEM(__pyx_args, 189);
      values[190] = PyTuple_GET_ITEM(__pyx_args, 190);
      values[191] = PyTuple_GET_ITEM(__pyx_args, 191);
      values[192] = PyTuple_GET_ITEM(__pyx_args, 192);
      values[193] = PyTuple_GET_ITEM(__pyx_args, 193);
      values[194] = PyTuple_GET_ITEM(__pyx_args, 194);
      values[195] = PyTuple_GET_ITEM(__pyx_args, 195);
      values[196] = PyTuple_GET_ITEM(__pyx_args, 196);
      values[197] = PyTuple_GET_ITEM(__pyx_args, 197);
      values[198] = PyTuple_GET_ITEM(__pyx_args, 198);
      values[199] = PyTuple_GET_ITEM(__pyx_args, 199);
      values[200] = PyTuple_GET_ITEM(__pyx_args, 200);
      values[201] = PyTuple_GET_ITEM(__pyx_args, 201);
      values[202] = PyTuple_GET_ITEM(__pyx_args, 202);
      values[203] = PyTuple_GET_ITEM(__pyx_args, 203);
      values[204] = PyTuple_GET_ITEM(__pyx_args, 204);
      values[205] = PyTuple_GET_ITEM(__pyx_args, 205);
      values[206] = PyTuple_GET_ITEM(__pyx_args, 206);
      values[207] = PyTuple_GET_ITEM(__pyx_args, 207);
      values[208] = PyTuple_GET_ITEM(__pyx_args, 208);
      values[209] = PyTuple_GET_ITEM(__pyx_args, 209);
    }
    __pyx_v_mesh_trial_ref = ((PyArrayObject *)values[0]);
    __pyx_v_mesh_grad_trial_ref = ((PyArrayObject *)values[1]);
    __pyx_v_mesh_dof = ((PyArrayObject *)values[2]);
    __pyx_v_mesh_velocity_dof = ((PyArrayObject *)values[3]);
    __pyx_v_MOVING_DOMAIN = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_MOVING_DOMAIN == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4722, __pyx_L3_error)
    __pyx_v_PSTAB = __pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_PSTAB == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4723, __pyx_L3_error)
    __pyx_v_mesh_l2g = ((PyArrayObject *)values[6]);
    __pyx_v_dV_ref = ((PyArrayObject *)values[7]);
    __pyx_v_p_trial_ref = ((PyArrayObject *)values[8]);
    __pyx_v_p_grad_trial_ref = ((PyArrayObject *)values[9]);
    __pyx_v_p_test_ref = ((PyArrayObject *)values[10]);
    __pyx_v_p_grad_test_ref = ((PyArrayObject *)values[11]);
    __pyx_v_q_p = ((PyArrayObject *)values[12]);
    __pyx_v_q_grad_p = ((PyArrayObject *)values[13]);
    __pyx_v_ebqe_p = ((PyArrayObject *)values[14]);
    __pyx_v_ebqe_grad_p = ((PyArrayObject *)values[15]);
    __pyx_v_vel_trial_ref = ((PyArrayObject *)values[16]);
    __pyx_v_vel_grad_trial_ref = ((PyArrayObject *)values[17]);
    __pyx_v_vel_hess_trial_ref = ((PyArrayObject *)values[18]);
    __pyx_v_vel_test_ref = ((PyArrayObject *)values[19]);
    __pyx_v_vel_grad_test_ref = ((PyArrayObject *)values[20]);
    __pyx_v_mesh_trial_trace_ref = ((PyArrayObject *)values[21]);
    __pyx_v_mesh_grad_trial_trace_ref = ((PyArrayObject *)values[22]);
    __pyx_v_dS_ref = ((PyArrayObject *)values[23]);
    __pyx_v_p_trial_trace_ref = ((PyArrayObject *)values[24]);
    __pyx_v_p_grad_trial_trace_ref = ((PyArrayObject *)values[25]);
    __pyx_v_p_test_trace_ref = ((PyArrayObject *)values[26]);
    __pyx_v_p_grad_test_trace_ref = ((PyArrayObject *)values[27]);
    __pyx_v_vel_trial_trace_ref = ((PyArrayObject *)values[28]);
    __pyx_v_vel_grad_trial_trace_ref = ((PyArrayObject *)values[29]);
    __pyx_v_vel_test_trace_ref = ((PyArrayObject *)values[30]);
    __pyx_v_vel_grad_test_trace_ref = ((PyArrayObject *)values[31]);
    __pyx_v_normal_ref = ((PyArrayObject *)values[32]);
    __pyx_v_boundaryJac_ref = ((PyArrayObject *)values[33]);
    __pyx_v_eb_adjoint_sigma = __pyx_PyFloat_AsDouble(values[34]); if (unlikely((__pyx_v_eb_adjoint_sigma == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4752, __pyx_L3_error)
    __pyx_v_elementDiameter = ((PyArrayObject *)values[35]);
    __pyx_v_nodeDiametersArray = ((PyArrayObject *)values[36]);
    __pyx_v_hFactor = __pyx_PyFloat_AsDouble(values[37]); if (unlikely((__pyx_v_hFactor == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4755, __pyx_L3_error)
    __pyx_v_nElements_global = __Pyx_PyInt_As_int(values[38]); if (unlikely((__pyx_v_nElements_global == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4756, __pyx_L3_error)
    __pyx_v_nElements_owned = __Pyx_PyInt_As_int(values[39]); if (unlikely((__pyx_v_nElements_owned == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4757, __pyx_L3_error)
    __pyx_v_useRBLES = __pyx_PyFloat_AsDouble(values[40]); if (unlikely((__pyx_v_useRBLES == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4758, __pyx_L3_error)
    __pyx_v_useMetrics = __pyx_PyFloat_AsDouble(values[41]); if (unlikely((__pyx_v_useMetrics == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4759, __pyx_L3_error)
    __pyx_v_alphaBDF = __pyx_PyFloat_AsDouble(values[42]); if (unlikely((__pyx_v_alphaBDF == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4760, __pyx_L3_error)
    __pyx_v_epsFact_rho = __pyx_PyFloat_AsDouble(values[43]); if (unlikely((__pyx_v_epsFact_rho == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4761, __pyx_L3_error)
    __pyx_v_epsFact_mu = __pyx_PyFloat_AsDouble(values[44]); if (unlikely((__pyx_v_epsFact_mu == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4762, __pyx_L3_error)
    __pyx_v_sigma = __pyx_PyFloat_AsDouble(values[45]); if (unlikely((__pyx_v_sigma == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4763, __pyx_L3_error)
    __pyx_v_rho_0 = __pyx_PyFloat_AsDouble(values[46]); if (unlikely((__pyx_v_rho_0 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4764, __pyx_L3_error)
    __pyx_v_nu_0 = __pyx_PyFloat_AsDouble(values[47]); if (unlikely((__pyx_v_nu_0 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4765, __pyx_L3_error)
    __pyx_v_rho_1 = __pyx_PyFloat_AsDouble(values[48]); if (unlikely((__pyx_v_rho_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4766, __pyx_L3_error)
    __pyx_v_nu_1 = __pyx_PyFloat_AsDouble(values[49]); if (unlikely((__pyx_v_nu_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4767, __pyx_L3_error)
    __pyx_v_smagorinskyConstant = __pyx_PyFloat_AsDouble(values[50]); if (unlikely((__pyx_v_smagorinskyConstant == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4768, __pyx_L3_error)
    __pyx_v_turbulenceClosureModel = __Pyx_PyInt_As_int(values[51]); if (unlikely((__pyx_v_turbulenceClosureModel == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4769, __pyx_L3_error)
    __pyx_v_Ct_sge = __pyx_PyFloat_AsDouble(values[52]); if (unlikely((__pyx_v_Ct_sge == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4770, __pyx_L3_error)
    __pyx_v_Cd_sge = __pyx_PyFloat_AsDouble(values[53]); if (unlikely((__pyx_v_Cd_sge == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4771, __pyx_L3_error)
    __pyx_v_C_dg = __pyx_PyFloat_AsDouble(values[54]); if (unlikely((__pyx_v_C_dg == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4772, __pyx_L3_error)
    __pyx_v_C_b = __pyx_PyFloat_AsDouble(values[55]); if (unlikely((__pyx_v_C_b == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4773, __pyx_L3_error)
    __pyx_v_eps_solid = ((PyArrayObject *)values[56]);
    __pyx_v_phi_solid = ((PyArrayObject *)values[57]);
    __pyx_v_q_velocity_solid = ((PyArrayObject *)values[58]);
    __pyx_v_q_vos = ((PyArrayObject *)values[59]);
    __pyx_v_q_dvos_dt = ((PyArrayObject *)values[60]);
    __pyx_v_q_dragAlpha = ((PyArrayObject *)values[61]);
    __pyx_v_q_dragBeta = ((PyArrayObject *)values[62]);
    __pyx_v_q_mass_source = ((PyArrayObject *)values[63]);
    __pyx_v_q_turb_var_0 = ((PyArrayObject *)values[64]);
    __pyx_v_q_turb_var_1 = ((PyArrayObject *)values[65]);
    __pyx_v_q_turb_var_grad_0 = ((PyArrayObject *)values[66]);
    __pyx_v_p_l2g = ((PyArrayObject *)values[67]);
    __pyx_v_vel_l2g = ((PyArrayObject *)values[68]);
    __pyx_v_p_dof = ((PyArrayObject *)values[69]);
    __pyx_v_u_dof = ((PyArrayObject *)values[70]);
    __pyx_v_v_dof = ((PyArrayObject *)values[71]);
    __pyx_v_w_dof = ((PyArrayObject *)values[72]);
    __pyx_v_g = ((PyArrayObject *)values[73]);
    __pyx_v_useVF = __pyx_PyFloat_AsDouble(values[74]); if (unlikely((__pyx_v_useVF == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4791, __pyx_L3_error)
    __pyx_v_vf = ((PyArrayObject *)values[75]);
    __pyx_v_phi = ((PyArrayObject *)values[76]);
    __pyx_v_normal_phi = ((PyArrayObject *)values[77]);
    __pyx_v_kappa_phi = ((PyArrayObject *)values[78]);
    __pyx_v_q_mom_u_acc_beta_bdf = ((PyArrayObject *)values[79]);
    __pyx_v_q_mom_v_acc_beta_bdf = ((PyArrayObject *)values[80]);
    __pyx_v_q_mom_w_acc_beta_bdf = ((PyArrayObject *)values[81]);
    __pyx_v_q_dV = ((PyArrayObject *)values[82]);
    __pyx_v_q_dV_last = ((PyArrayObject *)values[83]);
    __pyx_v_q_velocity_sge = ((PyArrayObject *)values[84]);
    __pyx_v_ebqe_velocity_star = ((PyArrayObject *)values[85]);
    __pyx_v_q_cfl = ((PyArrayObject *)values[86]);
    __pyx_v_q_numDiff_u_last = ((PyArrayObject *)values[87]);
    __pyx_v_q_numDiff_v_last = ((PyArrayObject *)values[88]);
    __pyx_v_q_numDiff_w_last = ((PyArrayObject *)values[89]);
    __pyx_v_sdInfo_u_u_rowptr = ((PyArrayObject *)values[90]);
    __pyx_v_sdInfo_u_u_colind = ((PyArrayObject *)values[91]);
    __pyx_v_sdInfo_u_v_rowptr = ((PyArrayObject *)values[92]);
    __pyx_v_sdInfo_u_v_colind = ((PyArrayObject *)values[93]);
    __pyx_v_sdInfo_u_w_rowptr = ((PyArrayObject *)values[94]);
    __pyx_v_sdInfo_u_w_colind = ((PyArrayObject *)values[95]);
    __pyx_v_sdInfo_v_v_rowptr = ((PyArrayObject *)values[96]);
    __pyx_v_sdInfo_v_v_colind = ((PyArrayObject *)values[97]);
    __pyx_v_sdInfo_v_u_rowptr = ((PyArrayObject *)values[98]);
    __pyx_v_sdInfo_v_u_colind = ((PyArrayObject *)values[99]);
    __pyx_v_sdInfo_v_w_rowptr = ((PyArrayObject *)values[100]);
    __pyx_v_sdInfo_v_w_colind = ((PyArrayObject *)values[101]);
    __pyx_v_sdInfo_w_w_rowptr = ((PyArrayObject *)values[102]);
    __pyx_v_sdInfo_w_w_colind = ((PyArrayObject *)values[103]);
    __pyx_v_sdInfo_w_u_rowptr = ((PyArrayObject *)values[104]);
    __pyx_v_sdInfo_w_u_colind = ((PyArrayObject *)values[105]);
    __pyx_v_sdInfo_w_v_rowptr = ((PyArrayObject *)values[106]);
    __pyx_v_sdInfo_w_v_colind = ((PyArrayObject *)values[107]);
    __pyx_v_csrRowIndeces_p_p = ((PyArrayObject *)values[108]);
    __pyx_v_csrColumnOffsets_p_p = ((PyArrayObject *)values[109]);
    __pyx_v_csrRowIndeces_p_u = ((PyArrayObject *)values[110]);
    __pyx_v_csrColumnOffsets_p_u = ((PyArrayObject *)values[111]);
    __pyx_v_csrRowIndeces_p_v = ((PyArrayObject *)values[112]);
    __pyx_v_csrColumnOffsets_p_v = ((PyArrayObject *)values[113]);
    __pyx_v_csrRowIndeces_p_w = ((PyArrayObject *)values[114]);
    __pyx_v_csrColumnOffsets_p_w = ((PyArrayObject *)values[115]);
    __pyx_v_csrRowIndeces_u_p = ((PyArrayObject *)values[116]);
    __pyx_v_csrColumnOffsets_u_p = ((PyArrayObject *)values[117]);
    __pyx_v_csrRowIndeces_u_u = ((PyArrayObject *)values[118]);
    __pyx_v_csrColumnOffsets_u_u = ((PyArrayObject *)values[119]);
    __pyx_v_csrRowIndeces_u_v = ((PyArrayObject *)values[120]);
    __pyx_v_csrColumnOffsets_u_v = ((PyArrayObject *)values[121]);
    __pyx_v_csrRowIndeces_u_w = ((PyArrayObject *)values[122]);
    __pyx_v_csrColumnOffsets_u_w = ((PyArrayObject *)values[123]);
    __pyx_v_csrRowIndeces_v_p = ((PyArrayObject *)values[124]);
    __pyx_v_csrColumnOffsets_v_p = ((PyArrayObject *)values[125]);
    __pyx_v_csrRowIndeces_v_u = ((PyArrayObject *)values[126]);
    __pyx_v_csrColumnOffsets_v_u = ((PyArrayObject *)values[127]);
    __pyx_v_csrRowIndeces_v_v = ((PyArrayObject *)values[128]);
    __pyx_v_csrColumnOffsets_v_v = ((PyArrayObject *)values[129]);
    __pyx_v_csrRowIndeces_v_w = ((PyArrayObject *)values[130]);
    __pyx_v_csrColumnOffsets_v_w = ((PyArrayObject *)values[131]);
    __pyx_v_csrRowIndeces_w_p = ((PyArrayObject *)values[132]);
    __pyx_v_csrColumnOffsets_w_p = ((PyArrayObject *)values[133]);
    __pyx_v_csrRowIndeces_w_u = ((PyArrayObject *)values[134]);
    __pyx_v_csrColumnOffsets_w_u = ((PyArrayObject *)values[135]);
    __pyx_v_csrRowIndeces_w_v = ((PyArrayObject *)values[136]);
    __pyx_v_csrColumnOffsets_w_v = ((PyArrayObject *)values[137]);
    __pyx_v_csrRowIndeces_w_w = ((PyArrayObject *)values[138]);
    __pyx_v_csrColumnOffsets_w_w = ((PyArrayObject *)values[139]);
    __pyx_v_globalJacobian = values[140];
    __pyx_v_nExteriorElementBoundaries_global = __Pyx_PyInt_As_int(values[141]); if (unlikely((__pyx_v_nExteriorElementBoundaries_global == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4829, __pyx_L3_error)
    __pyx_v_exteriorElementBoundariesArray = ((PyArrayObject *)values[142]);
    __pyx_v_elementBoundaryElementsArray = ((PyArrayObject *)values[143]);
    __pyx_v_elementBoundaryLocalElementBoundariesArray = ((PyArrayObject *)values[144]);
    __pyx_v_ebqe_vf_ext = ((PyArrayObject *)values[145]);
    __pyx_v_bc_ebqe_vf_ext = ((PyArrayObject *)values[146]);
    __pyx_v_ebqe_phi_ext = ((PyArrayObject *)values[147]);
    __pyx_v_bc_ebqe_phi_ext = ((PyArrayObject *)values[148]);
    __pyx_v_ebqe_normal_phi_ext = ((PyArrayObject *)values[149]);
    __pyx_v_ebqe_kappa_phi_ext = ((PyArrayObject *)values[150]);
    __pyx_v_ebqe_vos_ext = ((PyArrayObject *)values[151]);
    __pyx_v_ebqe_turb_var_0 = ((PyArrayObject *)values[152]);
    __pyx_v_ebqe_turb_var_1 = ((PyArrayObject *)values[153]);
    __pyx_v_isDOFBoundary_p = ((PyArrayObject *)values[154]);
    __pyx_v_isDOFBoundary_u = ((PyArrayObject *)values[155]);
    __pyx_v_isDOFBoundary_v = ((PyArrayObject *)values[156]);
    __pyx_v_isDOFBoundary_w = ((PyArrayObject *)values[157]);
    __pyx_v_isAdvectiveFluxBoundary_p = ((PyArrayObject *)values[158]);
    __pyx_v_isAdvectiveFluxBoundary_u = ((PyArrayObject *)values[159]);
    __pyx_v_isAdvectiveFluxBoundary_v = ((PyArrayObject *)values[160]);
    __pyx_v_isAdvectiveFluxBoundary_w = ((PyArrayObject *)values[161]);
    __pyx_v_isDiffusiveFluxBoundary_u = ((PyArrayObject *)values[162]);
    __pyx_v_isDiffusiveFluxBoundary_v = ((PyArrayObject *)values[163]);
    __pyx_v_isDiffusiveFluxBoundary_w = ((PyArrayObject *)values[164]);
    __pyx_v_ebqe_bc_p_ext = ((PyArrayObject *)values[165]);
    __pyx_v_ebqe_bc_flux_mass_ext = ((PyArrayObject *)values[166]);
    __pyx_v_ebqe_bc_flux_mom_u_adv_ext = ((PyArrayObject *)values[167]);
    __pyx_v_ebqe_bc_flux_mom_v_adv_ext = ((PyArrayObject *)values[168]);
    __pyx_v_ebqe_bc_flux_mom_w_adv_ext = ((PyArrayObject *)values[169]);
    __pyx_v_ebqe_bc_u_ext = ((PyArrayObject *)values[170]);
    __pyx_v_ebqe_bc_flux_u_diff_ext = ((PyArrayObject *)values[171]);
    __pyx_v_ebqe_penalty_ext = ((PyArrayObject *)values[172]);
    __pyx_v_ebqe_bc_v_ext = ((PyArrayObject *)values[173]);
    __pyx_v_ebqe_bc_flux_v_diff_ext = ((PyArrayObject *)values[174]);
    __pyx_v_ebqe_bc_w_ext = ((PyArrayObject *)values[175]);
    __pyx_v_ebqe_bc_flux_w_diff_ext = ((PyArrayObject *)values[176]);
    __pyx_v_csrColumnOffsets_eb_p_p = ((PyArrayObject *)values[177]);
    __pyx_v_csrColumnOffsets_eb_p_u = ((PyArrayObject *)values[178]);
    __pyx_v_csrColumnOffsets_eb_p_v = ((PyArrayObject *)values[179]);
    __pyx_v_csrColumnOffsets_eb_p_w = ((PyArrayObject *)values[180]);
    __pyx_v_csrColumnOffsets_eb_u_p = ((PyArrayObject *)values[181]);
    __pyx_v_csrColumnOffsets_eb_u_u = ((PyArrayObject *)values[182]);
    __pyx_v_csrColumnOffsets_eb_u_v = ((PyArrayObject *)values[183]);
    __pyx_v_csrColumnOffsets_eb_u_w = ((PyArrayObject *)values[184]);
    __pyx_v_csrColumnOffsets_eb_v_p = ((PyArrayObject *)values[185]);
    __pyx_v_csrColumnOffsets_eb_v_u = ((PyArrayObject *)values[186]);
    __pyx_v_csrColumnOffsets_eb_v_v = ((PyArrayObject *)values[187]);
    __pyx_v_csrColumnOffsets_eb_v_w = ((PyArrayObject *)values[188]);
    __pyx_v_csrColumnOffsets_eb_w_p = ((PyArrayObject *)values[189]);
    __pyx_v_csrColumnOffsets_eb_w_u = ((PyArrayObject *)values[190]);
    __pyx_v_csrColumnOffsets_eb_w_v = ((PyArrayObject *)values[191]);
    __pyx_v_csrColumnOffsets_eb_w_w = ((PyArrayObject *)values[192]);
    __pyx_v_elementFlags = ((PyArrayObject *)values[193]);
    __pyx_v_nParticles = __Pyx_PyInt_As_int(values[194]); if (unlikely((__pyx_v_nParticles == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4884, __pyx_L3_error)
    __pyx_v_particle_epsFact = __pyx_PyFloat_AsDouble(values[195]); if (unlikely((__pyx_v_particle_epsFact == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4885, __pyx_L3_error)
    __pyx_v_particle_alpha = __pyx_PyFloat_AsDouble(values[196]); if (unlikely((__pyx_v_particle_alpha == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4886, __pyx_L3_error)
    __pyx_v_particle_beta = __pyx_PyFloat_AsDouble(values[197]); if (unlikely((__pyx_v_particle_beta == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4887, __pyx_L3_error)
    __pyx_v_particle_penalty_constant = __pyx_PyFloat_AsDouble(values[198]); if (unlikely((__pyx_v_particle_penalty_constant == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4888, __pyx_L3_error)
    __pyx_v_particle_signed_distances = ((PyArrayObject *)values[199]);
    __pyx_v_particle_signed_distance_normals = ((PyArrayObject *)values[200]);
    __pyx_v_particle_velocities = ((PyArrayObject *)values[201]);
    __pyx_v_particle_centroids = ((PyArrayObject *)values[202]);
    __pyx_v_particle_nitsche = __pyx_PyFloat_AsDouble(values[203]); if (unlikely((__pyx_v_particle_nitsche == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4893, __pyx_L3_error)
    __pyx_v_KILL_PRESSURE_TERM = __Pyx_PyInt_As_int(values[204]); if (unlikely((__pyx_v_KILL_PRESSURE_TERM == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4894, __pyx_L3_error)
    __pyx_v_MATERIAL_PARAMETERS_AS_FUNCTION = __Pyx_PyInt_As_int(values[205]); if (unlikely((__pyx_v_MATERIAL_PARAMETERS_AS_FUNCTION == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4895, __pyx_L3_error)
    __pyx_v_density_as_function = ((PyArrayObject *)values[206]);
    __pyx_v_dynamic_viscosity_as_function = ((PyArrayObject *)values[207]);
    __pyx_v_ebqe_density_as_function = ((PyArrayObject *)values[208]);
    __pyx_v_ebqe_dynamic_viscosity_as_function = ((PyArrayObject *)values[209]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calculateJacobian_entropy_viscosity", 1, 210, 210, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4717, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mprans.cRANS3PF.RANS3PF2D.calculateJacobian_entropy_viscosity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "mesh_trial_ref", 0))) __PYX_ERR(0, 4718, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_grad_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "mesh_grad_trial_ref", 0))) __PYX_ERR(0, 4719, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_dof), __pyx_ptype_5numpy_ndarray, 1, "mesh_dof", 0))) __PYX_ERR(0, 4720, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_velocity_dof), __pyx_ptype_5numpy_ndarray, 1, "mesh_velocity_dof", 0))) __PYX_ERR(0, 4721, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_l2g), __pyx_ptype_5numpy_ndarray, 1, "mesh_l2g", 0))) __PYX_ERR(0, 4724, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dV_ref), __pyx_ptype_5numpy_ndarray, 1, "dV_ref", 0))) __PYX_ERR(0, 4725, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "p_trial_ref", 0))) __PYX_ERR(0, 4726, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_grad_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "p_grad_trial_ref", 0))) __PYX_ERR(0, 4727, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_test_ref), __pyx_ptype_5numpy_ndarray, 1, "p_test_ref", 0))) __PYX_ERR(0, 4728, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_grad_test_ref), __pyx_ptype_5numpy_ndarray, 1, "p_grad_test_ref", 0))) __PYX_ERR(0, 4729, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_p), __pyx_ptype_5numpy_ndarray, 1, "q_p", 0))) __PYX_ERR(0, 4730, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_grad_p), __pyx_ptype_5numpy_ndarray, 1, "q_grad_p", 0))) __PYX_ERR(0, 4731, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_p), __pyx_ptype_5numpy_ndarray, 1, "ebqe_p", 0))) __PYX_ERR(0, 4732, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_grad_p), __pyx_ptype_5numpy_ndarray, 1, "ebqe_grad_p", 0))) __PYX_ERR(0, 4733, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_trial_ref", 0))) __PYX_ERR(0, 4734, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_grad_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_grad_trial_ref", 0))) __PYX_ERR(0, 4735, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_hess_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_hess_trial_ref", 0))) __PYX_ERR(0, 4736, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_test_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_test_ref", 0))) __PYX_ERR(0, 4737, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_grad_test_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_grad_test_ref", 0))) __PYX_ERR(0, 4738, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "mesh_trial_trace_ref", 0))) __PYX_ERR(0, 4739, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_grad_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "mesh_grad_trial_trace_ref", 0))) __PYX_ERR(0, 4740, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dS_ref), __pyx_ptype_5numpy_ndarray, 1, "dS_ref", 0))) __PYX_ERR(0, 4741, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "p_trial_trace_ref", 0))) __PYX_ERR(0, 4742, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_grad_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "p_grad_trial_trace_ref", 0))) __PYX_ERR(0, 4743, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_test_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "p_test_trace_ref", 0))) __PYX_ERR(0, 4744, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_grad_test_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "p_grad_test_trace_ref", 0))) __PYX_ERR(0, 4745, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_trial_trace_ref", 0))) __PYX_ERR(0, 4746, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_grad_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_grad_trial_trace_ref", 0))) __PYX_ERR(0, 4747, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_test_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_test_trace_ref", 0))) __PYX_ERR(0, 4748, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_grad_test_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_grad_test_trace_ref", 0))) __PYX_ERR(0, 4749, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_normal_ref), __pyx_ptype_5numpy_ndarray, 1, "normal_ref", 0))) __PYX_ERR(0, 4750, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_boundaryJac_ref), __pyx_ptype_5numpy_ndarray, 1, "boundaryJac_ref", 0))) __PYX_ERR(0, 4751, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_elementDiameter), __pyx_ptype_5numpy_ndarray, 1, "elementDiameter", 0))) __PYX_ERR(0, 4753, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_nodeDiametersArray), __pyx_ptype_5numpy_ndarray, 1, "nodeDiametersArray", 0))) __PYX_ERR(0, 4754, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_eps_solid), __pyx_ptype_5numpy_ndarray, 1, "eps_solid", 0))) __PYX_ERR(0, 4775, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_phi_solid), __pyx_ptype_5numpy_ndarray, 1, "phi_solid", 0))) __PYX_ERR(0, 4776, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_velocity_solid), __pyx_ptype_5numpy_ndarray, 1, "q_velocity_solid", 0))) __PYX_ERR(0, 4777, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_vos), __pyx_ptype_5numpy_ndarray, 1, "q_vos", 0))) __PYX_ERR(0, 4778, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_dvos_dt), __pyx_ptype_5numpy_ndarray, 1, "q_dvos_dt", 0))) __PYX_ERR(0, 4779, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_dragAlpha), __pyx_ptype_5numpy_ndarray, 1, "q_dragAlpha", 0))) __PYX_ERR(0, 4780, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_dragBeta), __pyx_ptype_5numpy_ndarray, 1, "q_dragBeta", 0))) __PYX_ERR(0, 4781, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_mass_source), __pyx_ptype_5numpy_ndarray, 1, "q_mass_source", 0))) __PYX_ERR(0, 4782, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_turb_var_0), __pyx_ptype_5numpy_ndarray, 1, "q_turb_var_0", 0))) __PYX_ERR(0, 4783, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_turb_var_1), __pyx_ptype_5numpy_ndarray, 1, "q_turb_var_1", 0))) __PYX_ERR(0, 4784, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_turb_var_grad_0), __pyx_ptype_5numpy_ndarray, 1, "q_turb_var_grad_0", 0))) __PYX_ERR(0, 4785, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_l2g), __pyx_ptype_5numpy_ndarray, 1, "p_l2g", 0))) __PYX_ERR(0, 4787, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_l2g), __pyx_ptype_5numpy_ndarray, 1, "vel_l2g", 0))) __PYX_ERR(0, 4788, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_dof), __pyx_ptype_5numpy_ndarray, 1, "p_dof", 0))) __PYX_ERR(0, 4789, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_u_dof), __pyx_ptype_5numpy_ndarray, 1, "u_dof", 0))) __PYX_ERR(0, 4789, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_v_dof), __pyx_ptype_5numpy_ndarray, 1, "v_dof", 0))) __PYX_ERR(0, 4789, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_w_dof), __pyx_ptype_5numpy_ndarray, 1, "w_dof", 0))) __PYX_ERR(0, 4789, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_g), __pyx_ptype_5numpy_ndarray, 1, "g", 0))) __PYX_ERR(0, 4790, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vf), __pyx_ptype_5numpy_ndarray, 1, "vf", 0))) __PYX_ERR(0, 4792, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_phi), __pyx_ptype_5numpy_ndarray, 1, "phi", 0))) __PYX_ERR(0, 4793, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_normal_phi), __pyx_ptype_5numpy_ndarray, 1, "normal_phi", 0))) __PYX_ERR(0, 4794, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_kappa_phi), __pyx_ptype_5numpy_ndarray, 1, "kappa_phi", 0))) __PYX_ERR(0, 4795, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_mom_u_acc_beta_bdf), __pyx_ptype_5numpy_ndarray, 1, "q_mom_u_acc_beta_bdf", 0))) __PYX_ERR(0, 4796, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_mom_v_acc_beta_bdf), __pyx_ptype_5numpy_ndarray, 1, "q_mom_v_acc_beta_bdf", 0))) __PYX_ERR(0, 4796, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_mom_w_acc_beta_bdf), __pyx_ptype_5numpy_ndarray, 1, "q_mom_w_acc_beta_bdf", 0))) __PYX_ERR(0, 4796, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_dV), __pyx_ptype_5numpy_ndarray, 1, "q_dV", 0))) __PYX_ERR(0, 4797, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_dV_last), __pyx_ptype_5numpy_ndarray, 1, "q_dV_last", 0))) __PYX_ERR(0, 4798, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_velocity_sge), __pyx_ptype_5numpy_ndarray, 1, "q_velocity_sge", 0))) __PYX_ERR(0, 4799, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_velocity_star), __pyx_ptype_5numpy_ndarray, 1, "ebqe_velocity_star", 0))) __PYX_ERR(0, 4800, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_cfl), __pyx_ptype_5numpy_ndarray, 1, "q_cfl", 0))) __PYX_ERR(0, 4801, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_numDiff_u_last), __pyx_ptype_5numpy_ndarray, 1, "q_numDiff_u_last", 0))) __PYX_ERR(0, 4802, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_numDiff_v_last), __pyx_ptype_5numpy_ndarray, 1, "q_numDiff_v_last", 0))) __PYX_ERR(0, 4802, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_numDiff_w_last), __pyx_ptype_5numpy_ndarray, 1, "q_numDiff_w_last", 0))) __PYX_ERR(0, 4802, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_u_u_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_u_u_rowptr", 0))) __PYX_ERR(0, 4803, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_u_u_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_u_u_colind", 0))) __PYX_ERR(0, 4803, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_u_v_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_u_v_rowptr", 0))) __PYX_ERR(0, 4804, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_u_v_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_u_v_colind", 0))) __PYX_ERR(0, 4804, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_u_w_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_u_w_rowptr", 0))) __PYX_ERR(0, 4805, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_u_w_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_u_w_colind", 0))) __PYX_ERR(0, 4805, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_v_v_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_v_v_rowptr", 0))) __PYX_ERR(0, 4806, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_v_v_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_v_v_colind", 0))) __PYX_ERR(0, 4806, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_v_u_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_v_u_rowptr", 0))) __PYX_ERR(0, 4807, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_v_u_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_v_u_colind", 0))) __PYX_ERR(0, 4807, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_v_w_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_v_w_rowptr", 0))) __PYX_ERR(0, 4808, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_v_w_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_v_w_colind", 0))) __PYX_ERR(0, 4808, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_w_w_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_w_w_rowptr", 0))) __PYX_ERR(0, 4809, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_w_w_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_w_w_colind", 0))) __PYX_ERR(0, 4809, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_w_u_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_w_u_rowptr", 0))) __PYX_ERR(0, 4810, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_w_u_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_w_u_colind", 0))) __PYX_ERR(0, 4810, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_w_v_rowptr), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_w_v_rowptr", 0))) __PYX_ERR(0, 4811, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sdInfo_w_v_colind), __pyx_ptype_5numpy_ndarray, 1, "sdInfo_w_v_colind", 0))) __PYX_ERR(0, 4811, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_p_p), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_p_p", 0))) __PYX_ERR(0, 4812, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_p_p), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_p_p", 0))) __PYX_ERR(0, 4812, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_p_u), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_p_u", 0))) __PYX_ERR(0, 4813, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_p_u), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_p_u", 0))) __PYX_ERR(0, 4813, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_p_v), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_p_v", 0))) __PYX_ERR(0, 4814, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_p_v), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_p_v", 0))) __PYX_ERR(0, 4814, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_p_w), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_p_w", 0))) __PYX_ERR(0, 4815, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_p_w), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_p_w", 0))) __PYX_ERR(0, 4815, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_u_p), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_u_p", 0))) __PYX_ERR(0, 4816, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_u_p), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_u_p", 0))) __PYX_ERR(0, 4816, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_u_u), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_u_u", 0))) __PYX_ERR(0, 4817, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_u_u), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_u_u", 0))) __PYX_ERR(0, 4817, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_u_v), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_u_v", 0))) __PYX_ERR(0, 4818, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_u_v), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_u_v", 0))) __PYX_ERR(0, 4818, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_u_w), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_u_w", 0))) __PYX_ERR(0, 4819, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_u_w), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_u_w", 0))) __PYX_ERR(0, 4819, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_v_p), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_v_p", 0))) __PYX_ERR(0, 4820, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_v_p), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_v_p", 0))) __PYX_ERR(0, 4820, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_v_u), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_v_u", 0))) __PYX_ERR(0, 4821, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_v_u), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_v_u", 0))) __PYX_ERR(0, 4821, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_v_v), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_v_v", 0))) __PYX_ERR(0, 4822, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_v_v), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_v_v", 0))) __PYX_ERR(0, 4822, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_v_w), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_v_w", 0))) __PYX_ERR(0, 4823, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_v_w), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_v_w", 0))) __PYX_ERR(0, 4823, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_w_p), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_w_p", 0))) __PYX_ERR(0, 4824, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_w_p), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_w_p", 0))) __PYX_ERR(0, 4824, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_w_u), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_w_u", 0))) __PYX_ERR(0, 4825, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_w_u), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_w_u", 0))) __PYX_ERR(0, 4825, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_w_v), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_w_v", 0))) __PYX_ERR(0, 4826, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_w_v), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_w_v", 0))) __PYX_ERR(0, 4826, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_w_w), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_w_w", 0))) __PYX_ERR(0, 4827, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_w_w), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_w_w", 0))) __PYX_ERR(0, 4827, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_exteriorElementBoundariesArray), __pyx_ptype_5numpy_ndarray, 1, "exteriorElementBoundariesArray", 0))) __PYX_ERR(0, 4830, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_elementBoundaryElementsArray), __pyx_ptype_5numpy_ndarray, 1, "elementBoundaryElementsArray", 0))) __PYX_ERR(0, 4831, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_elementBoundaryLocalElementBoundariesArray), __pyx_ptype_5numpy_ndarray, 1, "elementBoundaryLocalElementBoundariesArray", 0))) __PYX_ERR(0, 4832, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_vf_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_vf_ext", 0))) __PYX_ERR(0, 4833, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_bc_ebqe_vf_ext), __pyx_ptype_5numpy_ndarray, 1, "bc_ebqe_vf_ext", 0))) __PYX_ERR(0, 4834, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_phi_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_phi_ext", 0))) __PYX_ERR(0, 4835, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_bc_ebqe_phi_ext), __pyx_ptype_5numpy_ndarray, 1, "bc_ebqe_phi_ext", 0))) __PYX_ERR(0, 4836, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_normal_phi_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_normal_phi_ext", 0))) __PYX_ERR(0, 4837, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_kappa_phi_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_kappa_phi_ext", 0))) __PYX_ERR(0, 4838, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_vos_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_vos_ext", 0))) __PYX_ERR(0, 4840, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_turb_var_0), __pyx_ptype_5numpy_ndarray, 1, "ebqe_turb_var_0", 0))) __PYX_ERR(0, 4841, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_turb_var_1), __pyx_ptype_5numpy_ndarray, 1, "ebqe_turb_var_1", 0))) __PYX_ERR(0, 4842, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isDOFBoundary_p), __pyx_ptype_5numpy_ndarray, 1, "isDOFBoundary_p", 0))) __PYX_ERR(0, 4844, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isDOFBoundary_u), __pyx_ptype_5numpy_ndarray, 1, "isDOFBoundary_u", 0))) __PYX_ERR(0, 4845, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isDOFBoundary_v), __pyx_ptype_5numpy_ndarray, 1, "isDOFBoundary_v", 0))) __PYX_ERR(0, 4846, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isDOFBoundary_w), __pyx_ptype_5numpy_ndarray, 1, "isDOFBoundary_w", 0))) __PYX_ERR(0, 4847, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isAdvectiveFluxBoundary_p), __pyx_ptype_5numpy_ndarray, 1, "isAdvectiveFluxBoundary_p", 0))) __PYX_ERR(0, 4848, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isAdvectiveFluxBoundary_u), __pyx_ptype_5numpy_ndarray, 1, "isAdvectiveFluxBoundary_u", 0))) __PYX_ERR(0, 4849, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isAdvectiveFluxBoundary_v), __pyx_ptype_5numpy_ndarray, 1, "isAdvectiveFluxBoundary_v", 0))) __PYX_ERR(0, 4850, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isAdvectiveFluxBoundary_w), __pyx_ptype_5numpy_ndarray, 1, "isAdvectiveFluxBoundary_w", 0))) __PYX_ERR(0, 4851, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isDiffusiveFluxBoundary_u), __pyx_ptype_5numpy_ndarray, 1, "isDiffusiveFluxBoundary_u", 0))) __PYX_ERR(0, 4852, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isDiffusiveFluxBoundary_v), __pyx_ptype_5numpy_ndarray, 1, "isDiffusiveFluxBoundary_v", 0))) __PYX_ERR(0, 4853, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isDiffusiveFluxBoundary_w), __pyx_ptype_5numpy_ndarray, 1, "isDiffusiveFluxBoundary_w", 0))) __PYX_ERR(0, 4854, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_p_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_p_ext", 0))) __PYX_ERR(0, 4855, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_flux_mass_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_flux_mass_ext", 0))) __PYX_ERR(0, 4856, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_flux_mom_u_adv_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_flux_mom_u_adv_ext", 0))) __PYX_ERR(0, 4857, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_flux_mom_v_adv_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_flux_mom_v_adv_ext", 0))) __PYX_ERR(0, 4858, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_flux_mom_w_adv_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_flux_mom_w_adv_ext", 0))) __PYX_ERR(0, 4859, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_u_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_u_ext", 0))) __PYX_ERR(0, 4860, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_flux_u_diff_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_flux_u_diff_ext", 0))) __PYX_ERR(0, 4861, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_penalty_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_penalty_ext", 0))) __PYX_ERR(0, 4862, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_v_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_v_ext", 0))) __PYX_ERR(0, 4863, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_flux_v_diff_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_flux_v_diff_ext", 0))) __PYX_ERR(0, 4864, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_w_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_w_ext", 0))) __PYX_ERR(0, 4865, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_flux_w_diff_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_flux_w_diff_ext", 0))) __PYX_ERR(0, 4866, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_p_p), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_p_p", 0))) __PYX_ERR(0, 4867, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_p_u), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_p_u", 0))) __PYX_ERR(0, 4868, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_p_v), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_p_v", 0))) __PYX_ERR(0, 4869, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_p_w), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_p_w", 0))) __PYX_ERR(0, 4870, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_u_p), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_u_p", 0))) __PYX_ERR(0, 4871, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_u_u), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_u_u", 0))) __PYX_ERR(0, 4872, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_u_v), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_u_v", 0))) __PYX_ERR(0, 4873, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_u_w), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_u_w", 0))) __PYX_ERR(0, 4874, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_v_p), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_v_p", 0))) __PYX_ERR(0, 4875, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_v_u), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_v_u", 0))) __PYX_ERR(0, 4876, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_v_v), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_v_v", 0))) __PYX_ERR(0, 4877, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_v_w), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_v_w", 0))) __PYX_ERR(0, 4878, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_w_p), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_w_p", 0))) __PYX_ERR(0, 4879, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_w_u), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_w_u", 0))) __PYX_ERR(0, 4880, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_w_v), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_w_v", 0))) __PYX_ERR(0, 4881, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_w_w), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_w_w", 0))) __PYX_ERR(0, 4882, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_elementFlags), __pyx_ptype_5numpy_ndarray, 1, "elementFlags", 0))) __PYX_ERR(0, 4883, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particle_signed_distances), __pyx_ptype_5numpy_ndarray, 1, "particle_signed_distances", 0))) __PYX_ERR(0, 4889, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particle_signed_distance_normals), __pyx_ptype_5numpy_ndarray, 1, "particle_signed_distance_normals", 0))) __PYX_ERR(0, 4890, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particle_velocities), __pyx_ptype_5numpy_ndarray, 1, "particle_velocities", 0))) __PYX_ERR(0, 4891, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particle_centroids), __pyx_ptype_5numpy_ndarray, 1, "particle_centroids", 0))) __PYX_ERR(0, 4892, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_density_as_function), __pyx_ptype_5numpy_ndarray, 1, "density_as_function", 0))) __PYX_ERR(0, 4896, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dynamic_viscosity_as_function), __pyx_ptype_5numpy_ndarray, 1, "dynamic_viscosity_as_function", 0))) __PYX_ERR(0, 4897, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_density_as_function), __pyx_ptype_5numpy_ndarray, 1, "ebqe_density_as_function", 0))) __PYX_ERR(0, 4898, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_dynamic_viscosity_as_function), __pyx_ptype_5numpy_ndarray, 1, "ebqe_dynamic_viscosity_as_function", 0))) __PYX_ERR(0, 4899, __pyx_L1_error)
  __pyx_r = __pyx_pf_6mprans_8cRANS3PF_9RANS3PF2D_10calculateJacobian_entropy_viscosity(((struct __pyx_obj_6mprans_8cRANS3PF_RANS3PF2D *)__pyx_v_self), __pyx_v_mesh_trial_ref, __pyx_v_mesh_grad_trial_ref, __pyx_v_mesh_dof, __pyx_v_mesh_velocity_dof, __pyx_v_MOVING_DOMAIN, __pyx_v_PSTAB, __pyx_v_mesh_l2g, __pyx_v_dV_ref, __pyx_v_p_trial_ref, __pyx_v_p_grad_trial_ref, __pyx_v_p_test_ref, __pyx_v_p_grad_test_ref, __pyx_v_q_p, __pyx_v_q_grad_p, __pyx_v_ebqe_p, __pyx_v_ebqe_grad_p, __pyx_v_vel_trial_ref, __pyx_v_vel_grad_trial_ref, __pyx_v_vel_hess_trial_ref, __pyx_v_vel_test_ref, __pyx_v_vel_grad_test_ref, __pyx_v_mesh_trial_trace_ref, __pyx_v_mesh_grad_trial_trace_ref, __pyx_v_dS_ref, __pyx_v_p_trial_trace_ref, __pyx_v_p_grad_trial_trace_ref, __pyx_v_p_test_trace_ref, __pyx_v_p_grad_test_trace_ref, __pyx_v_vel_trial_trace_ref, __pyx_v_vel_grad_trial_trace_ref, __pyx_v_vel_test_trace_ref, __pyx_v_vel_grad_test_trace_ref, __pyx_v_normal_ref, __pyx_v_boundaryJac_ref, __pyx_v_eb_adjoint_sigma, __pyx_v_elementDiameter, __pyx_v_nodeDiametersArray, __pyx_v_hFactor, __pyx_v_nElements_global, __pyx_v_nElements_owned, __pyx_v_useRBLES, __pyx_v_useMetrics, __pyx_v_alphaBDF, __pyx_v_epsFact_rho, __pyx_v_epsFact_mu, __pyx_v_sigma, __pyx_v_rho_0, __pyx_v_nu_0, __pyx_v_rho_1, __pyx_v_nu_1, __pyx_v_smagorinskyConstant, __pyx_v_turbulenceClosureModel, __pyx_v_Ct_sge, __pyx_v_Cd_sge, __pyx_v_C_dg, __pyx_v_C_b, __pyx_v_eps_solid, __pyx_v_phi_solid, __pyx_v_q_velocity_solid, __pyx_v_q_vos, __pyx_v_q_dvos_dt, __pyx_v_q_dragAlpha, __pyx_v_q_dragBeta, __pyx_v_q_mass_source, __pyx_v_q_turb_var_0, __pyx_v_q_turb_var_1, __pyx_v_q_turb_var_grad_0, __pyx_v_p_l2g, __pyx_v_vel_l2g, __pyx_v_p_dof, __pyx_v_u_dof, __pyx_v_v_dof, __pyx_v_w_dof, __pyx_v_g, __pyx_v_useVF, __pyx_v_vf, __pyx_v_phi, __pyx_v_normal_phi, __pyx_v_kappa_phi, __pyx_v_q_mom_u_acc_beta_bdf, __pyx_v_q_mom_v_acc_beta_bdf, __pyx_v_q_mom_w_acc_beta_bdf, __pyx_v_q_dV, __pyx_v_q_dV_last, __pyx_v_q_velocity_sge, __pyx_v_ebqe_velocity_star, __pyx_v_q_cfl, __pyx_v_q_numDiff_u_last, __pyx_v_q_numDiff_v_last, __pyx_v_q_numDiff_w_last, __pyx_v_sdInfo_u_u_rowptr, __pyx_v_sdInfo_u_u_colind, __pyx_v_sdInfo_u_v_rowptr, __pyx_v_sdInfo_u_v_colind, __pyx_v_sdInfo_u_w_rowptr, __pyx_v_sdInfo_u_w_colind, __pyx_v_sdInfo_v_v_rowptr, __pyx_v_sdInfo_v_v_colind, __pyx_v_sdInfo_v_u_rowptr, __pyx_v_sdInfo_v_u_colind, __pyx_v_sdInfo_v_w_rowptr, __pyx_v_sdInfo_v_w_colind, __pyx_v_sdInfo_w_w_rowptr, __pyx_v_sdInfo_w_w_colind, __pyx_v_sdInfo_w_u_rowptr, __pyx_v_sdInfo_w_u_colind, __pyx_v_sdInfo_w_v_rowptr, __pyx_v_sdInfo_w_v_colind, __pyx_v_csrRowIndeces_p_p, __pyx_v_csrColumnOffsets_p_p, __pyx_v_csrRowIndeces_p_u, __pyx_v_csrColumnOffsets_p_u, __pyx_v_csrRowIndeces_p_v, __pyx_v_csrColumnOffsets_p_v, __pyx_v_csrRowIndeces_p_w, __pyx_v_csrColumnOffsets_p_w, __pyx_v_csrRowIndeces_u_p, __pyx_v_csrColumnOffsets_u_p, __pyx_v_csrRowIndeces_u_u, __pyx_v_csrColumnOffsets_u_u, __pyx_v_csrRowIndeces_u_v, __pyx_v_csrColumnOffsets_u_v, __pyx_v_csrRowIndeces_u_w, __pyx_v_csrColumnOffsets_u_w, __pyx_v_csrRowIndeces_v_p, __pyx_v_csrColumnOffsets_v_p, __pyx_v_csrRowIndeces_v_u, __pyx_v_csrColumnOffsets_v_u, __pyx_v_csrRowIndeces_v_v, __pyx_v_csrColumnOffsets_v_v, __pyx_v_csrRowIndeces_v_w, __pyx_v_csrColumnOffsets_v_w, __pyx_v_csrRowIndeces_w_p, __pyx_v_csrColumnOffsets_w_p, __pyx_v_csrRowIndeces_w_u, __pyx_v_csrColumnOffsets_w_u, __pyx_v_csrRowIndeces_w_v, __pyx_v_csrColumnOffsets_w_v, __pyx_v_csrRowIndeces_w_w, __pyx_v_csrColumnOffsets_w_w, __pyx_v_globalJacobian, __pyx_v_nExteriorElementBoundaries_global, __pyx_v_exteriorElementBoundariesArray, __pyx_v_elementBoundaryElementsArray, __pyx_v_elementBoundaryLocalElementBoundariesArray, __pyx_v_ebqe_vf_ext, __pyx_v_bc_ebqe_vf_ext, __pyx_v_ebqe_phi_ext, __pyx_v_bc_ebqe_phi_ext, __pyx_v_ebqe_normal_phi_ext, __pyx_v_ebqe_kappa_phi_ext, __pyx_v_ebqe_vos_ext, __pyx_v_ebqe_turb_var_0, __pyx_v_ebqe_turb_var_1, __pyx_v_isDOFBoundary_p, __pyx_v_isDOFBoundary_u, __pyx_v_isDOFBoundary_v, __pyx_v_isDOFBoundary_w, __pyx_v_isAdvectiveFluxBoundary_p, __pyx_v_isAdvectiveFluxBoundary_u, __pyx_v_isAdvectiveFluxBoundary_v, __pyx_v_isAdvectiveFluxBoundary_w, __pyx_v_isDiffusiveFluxBoundary_u, __pyx_v_isDiffusiveFluxBoundary_v, __pyx_v_isDiffusiveFluxBoundary_w, __pyx_v_ebqe_bc_p_ext, __pyx_v_ebqe_bc_flux_mass_ext, __pyx_v_ebqe_bc_flux_mom_u_adv_ext, __pyx_v_ebqe_bc_flux_mom_v_adv_ext, __pyx_v_ebqe_bc_flux_mom_w_adv_ext, __pyx_v_ebqe_bc_u_ext, __pyx_v_ebqe_bc_flux_u_diff_ext, __pyx_v_ebqe_penalty_ext, __pyx_v_ebqe_bc_v_ext, __pyx_v_ebqe_bc_flux_v_diff_ext, __pyx_v_ebqe_bc_w_ext, __pyx_v_ebqe_bc_flux_w_diff_ext, __pyx_v_csrColumnOffsets_eb_p_p, __pyx_v_csrColumnOffsets_eb_p_u, __pyx_v_csrColumnOffsets_eb_p_v, __pyx_v_csrColumnOffsets_eb_p_w, __pyx_v_csrColumnOffsets_eb_u_p, __pyx_v_csrColumnOffsets_eb_u_u, __pyx_v_csrColumnOffsets_eb_u_v, __pyx_v_csrColumnOffsets_eb_u_w, __pyx_v_csrColumnOffsets_eb_v_p, __pyx_v_csrColumnOffsets_eb_v_u, __pyx_v_csrColumnOffsets_eb_v_v, __pyx_v_csrColumnOffsets_eb_v_w, __pyx_v_csrColumnOffsets_eb_w_p, __pyx_v_csrColumnOffsets_eb_w_u, __pyx_v_csrColumnOffsets_eb_w_v, __pyx_v_csrColumnOffsets_eb_w_w, __pyx_v_elementFlags, __pyx_v_nParticles, __pyx_v_particle_epsFact, __pyx_v_particle_alpha, __pyx_v_particle_beta, __pyx_v_particle_penalty_constant, __pyx_v_particle_signed_distances, __pyx_v_particle_signed_distance_normals, __pyx_v_particle_velocities, __pyx_v_particle_centroids, __pyx_v_particle_nitsche, __pyx_v_KILL_PRESSURE_TERM, __pyx_v_MATERIAL_PARAMETERS_AS_FUNCTION, __pyx_v_density_as_function, __pyx_v_dynamic_viscosity_as_function, __pyx_v_ebqe_density_as_function, __pyx_v_ebqe_dynamic_viscosity_as_function);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6mprans_8cRANS3PF_9RANS3PF2D_10calculateJacobian_entropy_viscosity(struct __pyx_obj_6mprans_8cRANS3PF_RANS3PF2D *__pyx_v_self, PyArrayObject *__pyx_v_mesh_trial_ref, PyArrayObject *__pyx_v_mesh_grad_trial_ref, PyArrayObject *__pyx_v_mesh_dof, PyArrayObject *__pyx_v_mesh_velocity_dof, double __pyx_v_MOVING_DOMAIN, double __pyx_v_PSTAB, PyArrayObject *__pyx_v_mesh_l2g, PyArrayObject *__pyx_v_dV_ref, PyArrayObject *__pyx_v_p_trial_ref, PyArrayObject *__pyx_v_p_grad_trial_ref, PyArrayObject *__pyx_v_p_test_ref, PyArrayObject *__pyx_v_p_grad_test_ref, PyArrayObject *__pyx_v_q_p, PyArrayObject *__pyx_v_q_grad_p, PyArrayObject *__pyx_v_ebqe_p, PyArrayObject *__pyx_v_ebqe_grad_p, PyArrayObject *__pyx_v_vel_trial_ref, PyArrayObject *__pyx_v_vel_grad_trial_ref, PyArrayObject *__pyx_v_vel_hess_trial_ref, PyArrayObject *__pyx_v_vel_test_ref, PyArrayObject *__pyx_v_vel_grad_test_ref, PyArrayObject *__pyx_v_mesh_trial_trace_ref, PyArrayObject *__pyx_v_mesh_grad_trial_trace_ref, PyArrayObject *__pyx_v_dS_ref, PyArrayObject *__pyx_v_p_trial_trace_ref, PyArrayObject *__pyx_v_p_grad_trial_trace_ref, PyArrayObject *__pyx_v_p_test_trace_ref, PyArrayObject *__pyx_v_p_grad_test_trace_ref, PyArrayObject *__pyx_v_vel_trial_trace_ref, PyArrayObject *__pyx_v_vel_grad_trial_trace_ref, PyArrayObject *__pyx_v_vel_test_trace_ref, PyArrayObject *__pyx_v_vel_grad_test_trace_ref, PyArrayObject *__pyx_v_normal_ref, PyArrayObject *__pyx_v_boundaryJac_ref, double __pyx_v_eb_adjoint_sigma, PyArrayObject *__pyx_v_elementDiameter, PyArrayObject *__pyx_v_nodeDiametersArray, double __pyx_v_hFactor, int __pyx_v_nElements_global, int __pyx_v_nElements_owned, double __pyx_v_useRBLES, double __pyx_v_useMetrics, double __pyx_v_alphaBDF, double __pyx_v_epsFact_rho, double __pyx_v_epsFact_mu, double __pyx_v_sigma, double __pyx_v_rho_0, double __pyx_v_nu_0, double __pyx_v_rho_1, double __pyx_v_nu_1, double __pyx_v_smagorinskyConstant, int __pyx_v_turbulenceClosureModel, double __pyx_v_Ct_sge, double __pyx_v_Cd_sge, double __pyx_v_C_dg, double __pyx_v_C_b, PyArrayObject *__pyx_v_eps_solid, PyArrayObject *__pyx_v_phi_solid, PyArrayObject *__pyx_v_q_velocity_solid, PyArrayObject *__pyx_v_q_vos, PyArrayObject *__pyx_v_q_dvos_dt, PyArrayObject *__pyx_v_q_dragAlpha, PyArrayObject *__pyx_v_q_dragBeta, PyArrayObject *__pyx_v_q_mass_source, PyArrayObject *__pyx_v_q_turb_var_0, PyArrayObject *__pyx_v_q_turb_var_1, PyArrayObject *__pyx_v_q_turb_var_grad_0, PyArrayObject *__pyx_v_p_l2g, PyArrayObject *__pyx_v_vel_l2g, PyArrayObject *__pyx_v_p_dof, PyArrayObject *__pyx_v_u_dof, PyArrayObject *__pyx_v_v_dof, PyArrayObject *__pyx_v_w_dof, PyArrayObject *__pyx_v_g, double __pyx_v_useVF, PyArrayObject *__pyx_v_vf, PyArrayObject *__pyx_v_phi, PyArrayObject *__pyx_v_normal_phi, PyArrayObject *__pyx_v_kappa_phi, PyArrayObject *__pyx_v_q_mom_u_acc_beta_bdf, PyArrayObject *__pyx_v_q_mom_v_acc_beta_bdf, PyArrayObject *__pyx_v_q_mom_w_acc_beta_bdf, PyArrayObject *__pyx_v_q_dV, PyArrayObject *__pyx_v_q_dV_last, PyArrayObject *__pyx_v_q_velocity_sge, PyArrayObject *__pyx_v_ebqe_velocity_star, PyArrayObject *__pyx_v_q_cfl, PyArrayObject *__pyx_v_q_numDiff_u_last, PyArrayObject *__pyx_v_q_numDiff_v_last, PyArrayObject *__pyx_v_q_numDiff_w_last, PyArrayObject *__pyx_v_sdInfo_u_u_rowptr, PyArrayObject *__pyx_v_sdInfo_u_u_colind, PyArrayObject *__pyx_v_sdInfo_u_v_rowptr, PyArrayObject *__pyx_v_sdInfo_u_v_colind, PyArrayObject *__pyx_v_sdInfo_u_w_rowptr, PyArrayObject *__pyx_v_sdInfo_u_w_colind, PyArrayObject *__pyx_v_sdInfo_v_v_rowptr, PyArrayObject *__pyx_v_sdInfo_v_v_colind, PyArrayObject *__pyx_v_sdInfo_v_u_rowptr, PyArrayObject *__pyx_v_sdInfo_v_u_colind, PyArrayObject *__pyx_v_sdInfo_v_w_rowptr, PyArrayObject *__pyx_v_sdInfo_v_w_colind, PyArrayObject *__pyx_v_sdInfo_w_w_rowptr, PyArrayObject *__pyx_v_sdInfo_w_w_colind, PyArrayObject *__pyx_v_sdInfo_w_u_rowptr, PyArrayObject *__pyx_v_sdInfo_w_u_colind, PyArrayObject *__pyx_v_sdInfo_w_v_rowptr, PyArrayObject *__pyx_v_sdInfo_w_v_colind, PyArrayObject *__pyx_v_csrRowIndeces_p_p, PyArrayObject *__pyx_v_csrColumnOffsets_p_p, PyArrayObject *__pyx_v_csrRowIndeces_p_u, PyArrayObject *__pyx_v_csrColumnOffsets_p_u, PyArrayObject *__pyx_v_csrRowIndeces_p_v, PyArrayObject *__pyx_v_csrColumnOffsets_p_v, PyArrayObject *__pyx_v_csrRowIndeces_p_w, PyArrayObject *__pyx_v_csrColumnOffsets_p_w, PyArrayObject *__pyx_v_csrRowIndeces_u_p, PyArrayObject *__pyx_v_csrColumnOffsets_u_p, PyArrayObject *__pyx_v_csrRowIndeces_u_u, PyArrayObject *__pyx_v_csrColumnOffsets_u_u, PyArrayObject *__pyx_v_csrRowIndeces_u_v, PyArrayObject *__pyx_v_csrColumnOffsets_u_v, PyArrayObject *__pyx_v_csrRowIndeces_u_w, PyArrayObject *__pyx_v_csrColumnOffsets_u_w, PyArrayObject *__pyx_v_csrRowIndeces_v_p, PyArrayObject *__pyx_v_csrColumnOffsets_v_p, PyArrayObject *__pyx_v_csrRowIndeces_v_u, PyArrayObject *__pyx_v_csrColumnOffsets_v_u, PyArrayObject *__pyx_v_csrRowIndeces_v_v, PyArrayObject *__pyx_v_csrColumnOffsets_v_v, PyArrayObject *__pyx_v_csrRowIndeces_v_w, PyArrayObject *__pyx_v_csrColumnOffsets_v_w, PyArrayObject *__pyx_v_csrRowIndeces_w_p, PyArrayObject *__pyx_v_csrColumnOffsets_w_p, PyArrayObject *__pyx_v_csrRowIndeces_w_u, PyArrayObject *__pyx_v_csrColumnOffsets_w_u, PyArrayObject *__pyx_v_csrRowIndeces_w_v, PyArrayObject *__pyx_v_csrColumnOffsets_w_v, PyArrayObject *__pyx_v_csrRowIndeces_w_w, PyArrayObject *__pyx_v_csrColumnOffsets_w_w, PyObject *__pyx_v_globalJacobian, int __pyx_v_nExteriorElementBoundaries_global, PyArrayObject *__pyx_v_exteriorElementBoundariesArray, PyArrayObject *__pyx_v_elementBoundaryElementsArray, PyArrayObject *__pyx_v_elementBoundaryLocalElementBoundariesArray, PyArrayObject *__pyx_v_ebqe_vf_ext, PyArrayObject *__pyx_v_bc_ebqe_vf_ext, PyArrayObject *__pyx_v_ebqe_phi_ext, PyArrayObject *__pyx_v_bc_ebqe_phi_ext, PyArrayObject *__pyx_v_ebqe_normal_phi_ext, PyArrayObject *__pyx_v_ebqe_kappa_phi_ext, PyArrayObject *__pyx_v_ebqe_vos_ext, PyArrayObject *__pyx_v_ebqe_turb_var_0, PyArrayObject *__pyx_v_ebqe_turb_var_1, PyArrayObject *__pyx_v_isDOFBoundary_p, PyArrayObject *__pyx_v_isDOFBoundary_u, PyArrayObject *__pyx_v_isDOFBoundary_v, PyArrayObject *__pyx_v_isDOFBoundary_w, PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_p, PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_u, PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_v, PyArrayObject *__pyx_v_isAdvectiveFluxBoundary_w, PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_u, PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_v, PyArrayObject *__pyx_v_isDiffusiveFluxBoundary_w, PyArrayObject *__pyx_v_ebqe_bc_p_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_mass_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_mom_u_adv_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_mom_v_adv_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_mom_w_adv_ext, PyArrayObject *__pyx_v_ebqe_bc_u_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_u_diff_ext, PyArrayObject *__pyx_v_ebqe_penalty_ext, PyArrayObject *__pyx_v_ebqe_bc_v_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_v_diff_ext, PyArrayObject *__pyx_v_ebqe_bc_w_ext, PyArrayObject *__pyx_v_ebqe_bc_flux_w_diff_ext, PyArrayObject *__pyx_v_csrColumnOffsets_eb_p_p, PyArrayObject *__pyx_v_csrColumnOffsets_eb_p_u, PyArrayObject *__pyx_v_csrColumnOffsets_eb_p_v, PyArrayObject *__pyx_v_csrColumnOffsets_eb_p_w, PyArrayObject *__pyx_v_csrColumnOffsets_eb_u_p, PyArrayObject *__pyx_v_csrColumnOffsets_eb_u_u, PyArrayObject *__pyx_v_csrColumnOffsets_eb_u_v, PyArrayObject *__pyx_v_csrColumnOffsets_eb_u_w, PyArrayObject *__pyx_v_csrColumnOffsets_eb_v_p, PyArrayObject *__pyx_v_csrColumnOffsets_eb_v_u, PyArrayObject *__pyx_v_csrColumnOffsets_eb_v_v, PyArrayObject *__pyx_v_csrColumnOffsets_eb_v_w, PyArrayObject *__pyx_v_csrColumnOffsets_eb_w_p, PyArrayObject *__pyx_v_csrColumnOffsets_eb_w_u, PyArrayObject *__pyx_v_csrColumnOffsets_eb_w_v, PyArrayObject *__pyx_v_csrColumnOffsets_eb_w_w, PyArrayObject *__pyx_v_elementFlags, int __pyx_v_nParticles, double __pyx_v_particle_epsFact, double __pyx_v_particle_alpha, double __pyx_v_particle_beta, double __pyx_v_particle_penalty_constant, PyArrayObject *__pyx_v_particle_signed_distances, PyArrayObject *__pyx_v_particle_signed_distance_normals, PyArrayObject *__pyx_v_particle_velocities, PyArrayObject *__pyx_v_particle_centroids, double __pyx_v_particle_nitsche, int __pyx_v_KILL_PRESSURE_TERM, int __pyx_v_MATERIAL_PARAMETERS_AS_FUNCTION, PyArrayObject *__pyx_v_density_as_function, PyArrayObject *__pyx_v_dynamic_viscosity_as_function, PyArrayObject *__pyx_v_ebqe_density_as_function, PyArrayObject *__pyx_v_ebqe_dynamic_viscosity_as_function) {
  CYTHON_UNUSED PyArrayObject *__pyx_v_rowptr = 0;
  CYTHON_UNUSED PyArrayObject *__pyx_v_colind = 0;
  PyArrayObject *__pyx_v_globalJacobian_a = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  __Pyx_RefNannySetupContext("calculateJacobian_entropy_viscosity", 0);

  /* "mprans/cRANS3PF.pyx":4901
 *                                             numpy.ndarray ebqe_dynamic_viscosity_as_function):
 *         cdef numpy.ndarray rowptr, colind, globalJacobian_a
 *         (rowptr, colind, globalJacobian_a) = globalJacobian.getCSRrepresentation()             # <<<<<<<<<<<<<<
 *         self.thisptr.calculateJacobian_entropy_viscosity(< double *> mesh_trial_ref.data,
 *                                                          < double * > mesh_grad_trial_ref.data,
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_globalJacobian, __pyx_n_s_getCSRrepresentation); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4901, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4901, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4901, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    #if !CYTHON_COMPILING_IN_PYPY
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 3)) {
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 4901, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 2); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4901, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4901, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4901, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_5 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4901, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = Py_TYPE(__pyx_t_5)->tp_iternext;
    index = 0; __pyx_t_2 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_3 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    index = 2; __pyx_t_4 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_4)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_4);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_5), 3) < 0) __PYX_ERR(0, 4901, __pyx_L1_error)
    __pyx_t_6 = NULL;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 4901, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 4901, __pyx_L1_error)
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 4901, __pyx_L1_error)
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 4901, __pyx_L1_error)
  __pyx_v_rowptr = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_v_colind = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_v_globalJacobian_a = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "mprans/cRANS3PF.pyx":4902
 *         cdef numpy.ndarray rowptr, colind, globalJacobian_a
 *         (rowptr, colind, globalJacobian_a) = globalJacobian.getCSRrepresentation()
 *         self.thisptr.calculateJacobian_entropy_viscosity(< double *> mesh_trial_ref.data,             # <<<<<<<<<<<<<<
 *                                                          < double * > mesh_grad_trial_ref.data,
 *                                                          < double * > mesh_dof.data,
 */
  __pyx_v_self->thisptr->calculateJacobian_entropy_viscosity(((double *)__pyx_v_mesh_trial_ref->data), ((double *)__pyx_v_mesh_grad_trial_ref->data), ((double *)__pyx_v_mesh_dof->data), ((double *)__pyx_v_mesh_velocity_dof->data), __pyx_v_MOVING_DOMAIN, __pyx_v_PSTAB, ((int *)__pyx_v_mesh_l2g->data), ((double *)__pyx_v_dV_ref->data), ((double *)__pyx_v_p_trial_ref->data), ((double *)__pyx_v_p_grad_trial_ref->data), ((double *)__pyx_v_p_test_ref->data), ((double *)__pyx_v_p_grad_test_ref->data), ((double *)__pyx_v_q_p->data), ((double *)__pyx_v_q_grad_p->data), ((double *)__pyx_v_ebqe_p->data), ((double *)__pyx_v_ebqe_grad_p->data), ((double *)__pyx_v_vel_trial_ref->data), ((double *)__pyx_v_vel_grad_trial_ref->data), ((double *)__pyx_v_vel_hess_trial_ref->data), ((double *)__pyx_v_vel_test_ref->data), ((double *)__pyx_v_vel_grad_test_ref->data), ((double *)__pyx_v_mesh_trial_trace_ref->data), ((double *)__pyx_v_mesh_grad_trial_trace_ref->data), ((double *)__pyx_v_dS_ref->data), ((double *)__pyx_v_p_trial_trace_ref->data), ((double *)__pyx_v_p_grad_trial_trace_ref->data), ((double *)__pyx_v_p_test_trace_ref->data), ((double *)__pyx_v_p_grad_test_trace_ref->data), ((double *)__pyx_v_vel_trial_trace_ref->data), ((double *)__pyx_v_vel_grad_trial_trace_ref->data), ((double *)__pyx_v_vel_test_trace_ref->data), ((double *)__pyx_v_vel_grad_test_trace_ref->data), ((double *)__pyx_v_normal_ref->data), ((double *)__pyx_v_boundaryJac_ref->data), __pyx_v_eb_adjoint_sigma, ((double *)__pyx_v_elementDiameter->data), ((double *)__pyx_v_nodeDiametersArray->data), __pyx_v_hFactor, __pyx_v_nElements_global, __pyx_v_nElements_owned, __pyx_v_useRBLES, __pyx_v_useMetrics, __pyx_v_alphaBDF, __pyx_v_epsFact_rho, __pyx_v_epsFact_mu, __pyx_v_sigma, __pyx_v_rho_0, __pyx_v_nu_0, __pyx_v_rho_1, __pyx_v_nu_1, __pyx_v_smagorinskyConstant, __pyx_v_turbulenceClosureModel, __pyx_v_Ct_sge, __pyx_v_Cd_sge, __pyx_v_C_dg, __pyx_v_C_b, ((double *)__pyx_v_eps_solid->data), ((double *)__pyx_v_phi_solid->data), ((double *)__pyx_v_q_velocity_solid->data), ((double *)__pyx_v_q_vos->data), ((double *)__pyx_v_q_dvos_dt->data), ((double *)__pyx_v_q_dragAlpha->data), ((double *)__pyx_v_q_dragBeta->data), ((double *)__pyx_v_q_mass_source->data), ((double *)__pyx_v_q_turb_var_0->data), ((double *)__pyx_v_q_turb_var_1->data), ((double *)__pyx_v_q_turb_var_grad_0->data), ((int *)__pyx_v_p_l2g->data), ((int *)__pyx_v_vel_l2g->data), ((double *)__pyx_v_p_dof->data), ((double *)__pyx_v_u_dof->data), ((double *)__pyx_v_v_dof->data), ((double *)__pyx_v_w_dof->data), ((double *)__pyx_v_g->data), __pyx_v_useVF, ((double *)__pyx_v_vf->data), ((double *)__pyx_v_phi->data), ((double *)__pyx_v_normal_phi->data), ((double *)__pyx_v_kappa_phi->data), ((double *)__pyx_v_q_mom_u_acc_beta_bdf->data), ((double *)__pyx_v_q_mom_v_acc_beta_bdf->data), ((double *)__pyx_v_q_mom_w_acc_beta_bdf->data), ((double *)__pyx_v_q_dV->data), ((double *)__pyx_v_q_dV_last->data), ((double *)__pyx_v_q_velocity_sge->data), ((double *)__pyx_v_ebqe_velocity_star->data), ((double *)__pyx_v_q_cfl->data), ((double *)__pyx_v_q_numDiff_u_last->data), ((double *)__pyx_v_q_numDiff_v_last->data), ((double *)__pyx_v_q_numDiff_w_last->data), ((int *)__pyx_v_sdInfo_u_u_rowptr->data), ((int *)__pyx_v_sdInfo_u_u_colind->data), ((int *)__pyx_v_sdInfo_u_v_rowptr->data), ((int *)__pyx_v_sdInfo_u_v_colind->data), ((int *)__pyx_v_sdInfo_u_w_rowptr->data), ((int *)__pyx_v_sdInfo_u_w_colind->data), ((int *)__pyx_v_sdInfo_v_v_rowptr->data), ((int *)__pyx_v_sdInfo_v_v_colind->data), ((int *)__pyx_v_sdInfo_v_u_rowptr->data), ((int *)__pyx_v_sdInfo_v_u_colind->data), ((int *)__pyx_v_sdInfo_v_w_rowptr->data), ((int *)__pyx_v_sdInfo_v_w_colind->data), ((int *)__pyx_v_sdInfo_w_w_rowptr->data), ((int *)__pyx_v_sdInfo_w_w_colind->data), ((int *)__pyx_v_sdInfo_w_u_rowptr->data), ((int *)__pyx_v_sdInfo_w_u_colind->data), ((int *)__pyx_v_sdInfo_w_v_rowptr->data), ((int *)__pyx_v_sdInfo_w_v_colind->data), ((int *)__pyx_v_csrRowIndeces_p_p->data), ((int *)__pyx_v_csrColumnOffsets_p_p->data), ((int *)__pyx_v_csrRowIndeces_p_u->data), ((int *)__pyx_v_csrColumnOffsets_p_u->data), ((int *)__pyx_v_csrRowIndeces_p_v->data), ((int *)__pyx_v_csrColumnOffsets_p_v->data), ((int *)__pyx_v_csrRowIndeces_p_w->data), ((int *)__pyx_v_csrColumnOffsets_p_w->data), ((int *)__pyx_v_csrRowIndeces_u_p->data), ((int *)__pyx_v_csrColumnOffsets_u_p->data), ((int *)__pyx_v_csrRowIndeces_u_u->data), ((int *)__pyx_v_csrColumnOffsets_u_u->data), ((int *)__pyx_v_csrRowIndeces_u_v->data), ((int *)__pyx_v_csrColumnOffsets_u_v->data), ((int *)__pyx_v_csrRowIndeces_u_w->data), ((int *)__pyx_v_csrColumnOffsets_u_w->data), ((int *)__pyx_v_csrRowIndeces_v_p->data), ((int *)__pyx_v_csrColumnOffsets_v_p->data), ((int *)__pyx_v_csrRowIndeces_v_u->data), ((int *)__pyx_v_csrColumnOffsets_v_u->data), ((int *)__pyx_v_csrRowIndeces_v_v->data), ((int *)__pyx_v_csrColumnOffsets_v_v->data), ((int *)__pyx_v_csrRowIndeces_v_w->data), ((int *)__pyx_v_csrColumnOffsets_v_w->data), ((int *)__pyx_v_csrRowIndeces_w_p->data), ((int *)__pyx_v_csrColumnOffsets_w_p->data), ((int *)__pyx_v_csrRowIndeces_w_u->data), ((int *)__pyx_v_csrColumnOffsets_w_u->data), ((int *)__pyx_v_csrRowIndeces_w_v->data), ((int *)__pyx_v_csrColumnOffsets_w_v->data), ((int *)__pyx_v_csrRowIndeces_w_w->data), ((int *)__pyx_v_csrColumnOffsets_w_w->data), ((double *)__pyx_v_globalJacobian_a->data), __pyx_v_nExteriorElementBoundaries_global, ((int *)__pyx_v_exteriorElementBoundariesArray->data), ((int *)__pyx_v_elementBoundaryElementsArray->data), ((int *)__pyx_v_elementBoundaryLocalElementBoundariesArray->data), ((double *)__pyx_v_ebqe_vf_ext->data), ((double *)__pyx_v_bc_ebqe_vf_ext->data), ((double *)__pyx_v_ebqe_phi_ext->data), ((double *)__pyx_v_bc_ebqe_phi_ext->data), ((double *)__pyx_v_ebqe_normal_phi_ext->data), ((double *)__pyx_v_ebqe_kappa_phi_ext->data), ((double *)__pyx_v_ebqe_vos_ext->data), ((double *)__pyx_v_ebqe_turb_var_0->data), ((double *)__pyx_v_ebqe_turb_var_1->data), ((int *)__pyx_v_isDOFBoundary_p->data), ((int *)__pyx_v_isDOFBoundary_u->data), ((int *)__pyx_v_isDOFBoundary_v->data), ((int *)__pyx_v_isDOFBoundary_w->data), ((int *)__pyx_v_isAdvectiveFluxBoundary_p->data), ((int *)__pyx_v_isAdvectiveFluxBoundary_u->data), ((int *)__pyx_v_isAdvectiveFluxBoundary_v->data), ((int *)__pyx_v_isAdvectiveFluxBoundary_w->data), ((int *)__pyx_v_isDiffusiveFluxBoundary_u->data), ((int *)__pyx_v_isDiffusiveFluxBoundary_v->data), ((int *)__pyx_v_isDiffusiveFluxBoundary_w->data), ((double *)__pyx_v_ebqe_bc_p_ext->data), ((double *)__pyx_v_ebqe_bc_flux_mass_ext->data), ((double *)__pyx_v_ebqe_bc_flux_mom_u_adv_ext->data), ((double *)__pyx_v_ebqe_bc_flux_mom_v_adv_ext->data), ((double *)__pyx_v_ebqe_bc_flux_mom_w_adv_ext->data), ((double *)__pyx_v_ebqe_bc_u_ext->data), ((double *)__pyx_v_ebqe_bc_flux_u_diff_ext->data), ((double *)__pyx_v_ebqe_penalty_ext->data), ((double *)__pyx_v_ebqe_bc_v_ext->data), ((double *)__pyx_v_ebqe_bc_flux_v_diff_ext->data), ((double *)__pyx_v_ebqe_bc_w_ext->data), ((double *)__pyx_v_ebqe_bc_flux_w_diff_ext->data), ((int *)__pyx_v_csrColumnOffsets_eb_p_p->data), ((int *)__pyx_v_csrColumnOffsets_eb_p_u->data), ((int *)__pyx_v_csrColumnOffsets_eb_p_v->data), ((int *)__pyx_v_csrColumnOffsets_eb_p_w->data), ((int *)__pyx_v_csrColumnOffsets_eb_u_p->data), ((int *)__pyx_v_csrColumnOffsets_eb_u_u->data), ((int *)__pyx_v_csrColumnOffsets_eb_u_v->data), ((int *)__pyx_v_csrColumnOffsets_eb_u_w->data), ((int *)__pyx_v_csrColumnOffsets_eb_v_p->data), ((int *)__pyx_v_csrColumnOffsets_eb_v_u->data), ((int *)__pyx_v_csrColumnOffsets_eb_v_v->data), ((int *)__pyx_v_csrColumnOffsets_eb_v_w->data), ((int *)__pyx_v_csrColumnOffsets_eb_w_p->data), ((int *)__pyx_v_csrColumnOffsets_eb_w_u->data), ((int *)__pyx_v_csrColumnOffsets_eb_w_v->data), ((int *)__pyx_v_csrColumnOffsets_eb_w_w->data), ((int *)__pyx_v_elementFlags->data), __pyx_v_nParticles, __pyx_v_particle_epsFact, __pyx_v_particle_alpha, __pyx_v_particle_beta, __pyx_v_particle_penalty_constant, ((double *)__pyx_v_particle_signed_distances->data), ((double *)__pyx_v_particle_signed_distance_normals->data), ((double *)__pyx_v_particle_velocities->data), ((double *)__pyx_v_particle_centroids->data), __pyx_v_particle_nitsche, __pyx_v_KILL_PRESSURE_TERM, __pyx_v_MATERIAL_PARAMETERS_AS_FUNCTION, ((double *)__pyx_v_density_as_function->data), ((double *)__pyx_v_dynamic_viscosity_as_function->data), ((double *)__pyx_v_ebqe_density_as_function->data), ((double *)__pyx_v_ebqe_dynamic_viscosity_as_function->data));

  /* "mprans/cRANS3PF.pyx":4717
 *                                                          order_polynomial)
 * 
 *     def calculateJacobian_entropy_viscosity(self,             # <<<<<<<<<<<<<<
 *                                             numpy.ndarray mesh_trial_ref,
 *                                             numpy.ndarray mesh_grad_trial_ref,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("mprans.cRANS3PF.RANS3PF2D.calculateJacobian_entropy_viscosity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_rowptr);
  __Pyx_XDECREF((PyObject *)__pyx_v_colind);
  __Pyx_XDECREF((PyObject *)__pyx_v_globalJacobian_a);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mprans/cRANS3PF.pyx":5085
 *                                                          < double * > ebqe_dynamic_viscosity_as_function.data)
 * 
 *     def calculateVelocityAverage(self,             # <<<<<<<<<<<<<<
 *                                  int nExteriorElementBoundaries_global,
 *                                  numpy.ndarray exteriorElementBoundariesArray,
 */

/* Python wrapper */
static PyObject *__pyx_pw_6mprans_8cRANS3PF_9RANS3PF2D_13calculateVelocityAverage(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6mprans_8cRANS3PF_9RANS3PF2D_13calculateVelocityAverage(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_nExteriorElementBoundaries_global;
  PyArrayObject *__pyx_v_exteriorElementBoundariesArray = 0;
  int __pyx_v_nInteriorElementBoundaries_global;
  PyArrayObject *__pyx_v_interiorElementBoundariesArray = 0;
  PyArrayObject *__pyx_v_elementBoundaryElementsArray = 0;
  PyArrayObject *__pyx_v_elementBoundaryLocalElementBoundariesArray = 0;
  PyArrayObject *__pyx_v_mesh_dof = 0;
  PyArrayObject *__pyx_v_mesh_velocity_dof = 0;
  double __pyx_v_MOVING_DOMAIN;
  PyArrayObject *__pyx_v_mesh_l2g = 0;
  PyArrayObject *__pyx_v_mesh_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_mesh_grad_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_normal_ref = 0;
  PyArrayObject *__pyx_v_boundaryJac_ref = 0;
  PyArrayObject *__pyx_v_vel_l2g = 0;
  PyArrayObject *__pyx_v_u_dof = 0;
  PyArrayObject *__pyx_v_v_dof = 0;
  PyArrayObject *__pyx_v_w_dof = 0;
  PyArrayObject *__pyx_v_vos_dof = 0;
  PyArrayObject *__pyx_v_vel_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_ebqe_velocity = 0;
  PyArrayObject *__pyx_v_velocityAverage = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calculateVelocityAverage (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_nExteriorElementBoundaries_globa,&__pyx_n_s_exteriorElementBoundariesArray,&__pyx_n_s_nInteriorElementBoundaries_globa,&__pyx_n_s_interiorElementBoundariesArray,&__pyx_n_s_elementBoundaryElementsArray,&__pyx_n_s_elementBoundaryLocalElementBound,&__pyx_n_s_mesh_dof,&__pyx_n_s_mesh_velocity_dof,&__pyx_n_s_MOVING_DOMAIN,&__pyx_n_s_mesh_l2g,&__pyx_n_s_mesh_trial_trace_ref,&__pyx_n_s_mesh_grad_trial_trace_ref,&__pyx_n_s_normal_ref,&__pyx_n_s_boundaryJac_ref,&__pyx_n_s_vel_l2g,&__pyx_n_s_u_dof,&__pyx_n_s_v_dof,&__pyx_n_s_w_dof,&__pyx_n_s_vos_dof,&__pyx_n_s_vel_trial_trace_ref,&__pyx_n_s_ebqe_velocity,&__pyx_n_s_velocityAverage,0};
    PyObject* values[22] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 22: values[21] = PyTuple_GET_ITEM(__pyx_args, 21);
        case 21: values[20] = PyTuple_GET_ITEM(__pyx_args, 20);
        case 20: values[19] = PyTuple_GET_ITEM(__pyx_args, 19);
        case 19: values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
        case 18: values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
        case 17: values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nExteriorElementBoundaries_globa)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_exteriorElementBoundariesArray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateVelocityAverage", 1, 22, 22, 1); __PYX_ERR(0, 5085, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nInteriorElementBoundaries_globa)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateVelocityAverage", 1, 22, 22, 2); __PYX_ERR(0, 5085, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_interiorElementBoundariesArray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateVelocityAverage", 1, 22, 22, 3); __PYX_ERR(0, 5085, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_elementBoundaryElementsArray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateVelocityAverage", 1, 22, 22, 4); __PYX_ERR(0, 5085, __pyx_L3_error)
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_elementBoundaryLocalElementBound)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateVelocityAverage", 1, 22, 22, 5); __PYX_ERR(0, 5085, __pyx_L3_error)
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateVelocityAverage", 1, 22, 22, 6); __PYX_ERR(0, 5085, __pyx_L3_error)
        }
        case  7:
        if (likely((values[7] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_velocity_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateVelocityAverage", 1, 22, 22, 7); __PYX_ERR(0, 5085, __pyx_L3_error)
        }
        case  8:
        if (likely((values[8] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_MOVING_DOMAIN)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateVelocityAverage", 1, 22, 22, 8); __PYX_ERR(0, 5085, __pyx_L3_error)
        }
        case  9:
        if (likely((values[9] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_l2g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateVelocityAverage", 1, 22, 22, 9); __PYX_ERR(0, 5085, __pyx_L3_error)
        }
        case 10:
        if (likely((values[10] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateVelocityAverage", 1, 22, 22, 10); __PYX_ERR(0, 5085, __pyx_L3_error)
        }
        case 11:
        if (likely((values[11] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_grad_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateVelocityAverage", 1, 22, 22, 11); __PYX_ERR(0, 5085, __pyx_L3_error)
        }
        case 12:
        if (likely((values[12] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_normal_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateVelocityAverage", 1, 22, 22, 12); __PYX_ERR(0, 5085, __pyx_L3_error)
        }
        case 13:
        if (likely((values[13] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_boundaryJac_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateVelocityAverage", 1, 22, 22, 13); __PYX_ERR(0, 5085, __pyx_L3_error)
        }
        case 14:
        if (likely((values[14] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_l2g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateVelocityAverage", 1, 22, 22, 14); __PYX_ERR(0, 5085, __pyx_L3_error)
        }
        case 15:
        if (likely((values[15] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_u_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateVelocityAverage", 1, 22, 22, 15); __PYX_ERR(0, 5085, __pyx_L3_error)
        }
        case 16:
        if (likely((values[16] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_v_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateVelocityAverage", 1, 22, 22, 16); __PYX_ERR(0, 5085, __pyx_L3_error)
        }
        case 17:
        if (likely((values[17] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_w_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateVelocityAverage", 1, 22, 22, 17); __PYX_ERR(0, 5085, __pyx_L3_error)
        }
        case 18:
        if (likely((values[18] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vos_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateVelocityAverage", 1, 22, 22, 18); __PYX_ERR(0, 5085, __pyx_L3_error)
        }
        case 19:
        if (likely((values[19] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateVelocityAverage", 1, 22, 22, 19); __PYX_ERR(0, 5085, __pyx_L3_error)
        }
        case 20:
        if (likely((values[20] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_velocity)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateVelocityAverage", 1, 22, 22, 20); __PYX_ERR(0, 5085, __pyx_L3_error)
        }
        case 21:
        if (likely((values[21] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_velocityAverage)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateVelocityAverage", 1, 22, 22, 21); __PYX_ERR(0, 5085, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calculateVelocityAverage") < 0)) __PYX_ERR(0, 5085, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 22) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
      values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
      values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
      values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
      values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
      values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
      values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
      values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
      values[19] = PyTuple_GET_ITEM(__pyx_args, 19);
      values[20] = PyTuple_GET_ITEM(__pyx_args, 20);
      values[21] = PyTuple_GET_ITEM(__pyx_args, 21);
    }
    __pyx_v_nExteriorElementBoundaries_global = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_nExteriorElementBoundaries_global == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5086, __pyx_L3_error)
    __pyx_v_exteriorElementBoundariesArray = ((PyArrayObject *)values[1]);
    __pyx_v_nInteriorElementBoundaries_global = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_nInteriorElementBoundaries_global == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5088, __pyx_L3_error)
    __pyx_v_interiorElementBoundariesArray = ((PyArrayObject *)values[3]);
    __pyx_v_elementBoundaryElementsArray = ((PyArrayObject *)values[4]);
    __pyx_v_elementBoundaryLocalElementBoundariesArray = ((PyArrayObject *)values[5]);
    __pyx_v_mesh_dof = ((PyArrayObject *)values[6]);
    __pyx_v_mesh_velocity_dof = ((PyArrayObject *)values[7]);
    __pyx_v_MOVING_DOMAIN = __pyx_PyFloat_AsDouble(values[8]); if (unlikely((__pyx_v_MOVING_DOMAIN == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 5094, __pyx_L3_error)
    __pyx_v_mesh_l2g = ((PyArrayObject *)values[9]);
    __pyx_v_mesh_trial_trace_ref = ((PyArrayObject *)values[10]);
    __pyx_v_mesh_grad_trial_trace_ref = ((PyArrayObject *)values[11]);
    __pyx_v_normal_ref = ((PyArrayObject *)values[12]);
    __pyx_v_boundaryJac_ref = ((PyArrayObject *)values[13]);
    __pyx_v_vel_l2g = ((PyArrayObject *)values[14]);
    __pyx_v_u_dof = ((PyArrayObject *)values[15]);
    __pyx_v_v_dof = ((PyArrayObject *)values[16]);
    __pyx_v_w_dof = ((PyArrayObject *)values[17]);
    __pyx_v_vos_dof = ((PyArrayObject *)values[18]);
    __pyx_v_vel_trial_trace_ref = ((PyArrayObject *)values[19]);
    __pyx_v_ebqe_velocity = ((PyArrayObject *)values[20]);
    __pyx_v_velocityAverage = ((PyArrayObject *)values[21]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calculateVelocityAverage", 1, 22, 22, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 5085, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mprans.cRANS3PF.RANS3PF2D.calculateVelocityAverage", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_exteriorElementBoundariesArray), __pyx_ptype_5numpy_ndarray, 1, "exteriorElementBoundariesArray", 0))) __PYX_ERR(0, 5087, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_interiorElementBoundariesArray), __pyx_ptype_5numpy_ndarray, 1, "interiorElementBoundariesArray", 0))) __PYX_ERR(0, 5089, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_elementBoundaryElementsArray), __pyx_ptype_5numpy_ndarray, 1, "elementBoundaryElementsArray", 0))) __PYX_ERR(0, 5090, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_elementBoundaryLocalElementBoundariesArray), __pyx_ptype_5numpy_ndarray, 1, "elementBoundaryLocalElementBoundariesArray", 0))) __PYX_ERR(0, 5091, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_dof), __pyx_ptype_5numpy_ndarray, 1, "mesh_dof", 0))) __PYX_ERR(0, 5092, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_velocity_dof), __pyx_ptype_5numpy_ndarray, 1, "mesh_velocity_dof", 0))) __PYX_ERR(0, 5093, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_l2g), __pyx_ptype_5numpy_ndarray, 1, "mesh_l2g", 0))) __PYX_ERR(0, 5095, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "mesh_trial_trace_ref", 0))) __PYX_ERR(0, 5096, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_grad_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "mesh_grad_trial_trace_ref", 0))) __PYX_ERR(0, 5097, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_normal_ref), __pyx_ptype_5numpy_ndarray, 1, "normal_ref", 0))) __PYX_ERR(0, 5098, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_boundaryJac_ref), __pyx_ptype_5numpy_ndarray, 1, "boundaryJac_ref", 0))) __PYX_ERR(0, 5099, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_l2g), __pyx_ptype_5numpy_ndarray, 1, "vel_l2g", 0))) __PYX_ERR(0, 5100, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_u_dof), __pyx_ptype_5numpy_ndarray, 1, "u_dof", 0))) __PYX_ERR(0, 5101, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_v_dof), __pyx_ptype_5numpy_ndarray, 1, "v_dof", 0))) __PYX_ERR(0, 5102, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_w_dof), __pyx_ptype_5numpy_ndarray, 1, "w_dof", 0))) __PYX_ERR(0, 5103, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vos_dof), __pyx_ptype_5numpy_ndarray, 1, "vos_dof", 0))) __PYX_ERR(0, 5104, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vel_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "vel_trial_trace_ref", 0))) __PYX_ERR(0, 5105, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_velocity), __pyx_ptype_5numpy_ndarray, 1, "ebqe_velocity", 0))) __PYX_ERR(0, 5106, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_velocityAverage), __pyx_ptype_5numpy_ndarray, 1, "velocityAverage", 0))) __PYX_ERR(0, 5107, __pyx_L1_error)
  __pyx_r = __pyx_pf_6mprans_8cRANS3PF_9RANS3PF2D_12calculateVelocityAverage(((struct __pyx_obj_6mprans_8cRANS3PF_RANS3PF2D *)__pyx_v_self), __pyx_v_nExteriorElementBoundaries_global, __pyx_v_exteriorElementBoundariesArray, __pyx_v_nInteriorElementBoundaries_global, __pyx_v_interiorElementBoundariesArray, __pyx_v_elementBoundaryElementsArray, __pyx_v_elementBoundaryLocalElementBoundariesArray, __pyx_v_mesh_dof, __pyx_v_mesh_velocity_dof, __pyx_v_MOVING_DOMAIN, __pyx_v_mesh_l2g, __pyx_v_mesh_trial_trace_ref, __pyx_v_mesh_grad_trial_trace_ref, __pyx_v_normal_ref, __pyx_v_boundaryJac_ref, __pyx_v_vel_l2g, __pyx_v_u_dof, __pyx_v_v_dof, __pyx_v_w_dof, __pyx_v_vos_dof, __pyx_v_vel_trial_trace_ref, __pyx_v_ebqe_velocity, __pyx_v_velocityAverage);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6mprans_8cRANS3PF_9RANS3PF2D_12calculateVelocityAverage(struct __pyx_obj_6mprans_8cRANS3PF_RANS3PF2D *__pyx_v_self, int __pyx_v_nExteriorElementBoundaries_global, PyArrayObject *__pyx_v_exteriorElementBoundariesArray, int __pyx_v_nInteriorElementBoundaries_global, PyArrayObject *__pyx_v_interiorElementBoundariesArray, PyArrayObject *__pyx_v_elementBoundaryElementsArray, PyArrayObject *__pyx_v_elementBoundaryLocalElementBoundariesArray, PyArrayObject *__pyx_v_mesh_dof, PyArrayObject *__pyx_v_mesh_velocity_dof, double __pyx_v_MOVING_DOMAIN, PyArrayObject *__pyx_v_mesh_l2g, PyArrayObject *__pyx_v_mesh_trial_trace_ref, PyArrayObject *__pyx_v_mesh_grad_trial_trace_ref, PyArrayObject *__pyx_v_normal_ref, PyArrayObject *__pyx_v_boundaryJac_ref, PyArrayObject *__pyx_v_vel_l2g, PyArrayObject *__pyx_v_u_dof, PyArrayObject *__pyx_v_v_dof, PyArrayObject *__pyx_v_w_dof, PyArrayObject *__pyx_v_vos_dof, PyArrayObject *__pyx_v_vel_trial_trace_ref, PyArrayObject *__pyx_v_ebqe_velocity, PyArrayObject *__pyx_v_velocityAverage) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calculateVelocityAverage", 0);

  /* "mprans/cRANS3PF.pyx":5108
 *                                  numpy.ndarray ebqe_velocity,
 *                                  numpy.ndarray velocityAverage):
 *         self.thisptr.calculateVelocityAverage(nExteriorElementBoundaries_global,             # <<<<<<<<<<<<<<
 *                                               < int * > exteriorElementBoundariesArray.data,
 *                                               nInteriorElementBoundaries_global,
 */
  __pyx_v_self->thisptr->calculateVelocityAverage(__pyx_v_nExteriorElementBoundaries_global, ((int *)__pyx_v_exteriorElementBoundariesArray->data), __pyx_v_nInteriorElementBoundaries_global, ((int *)__pyx_v_interiorElementBoundariesArray->data), ((int *)__pyx_v_elementBoundaryElementsArray->data), ((int *)__pyx_v_elementBoundaryLocalElementBoundariesArray->data), ((double *)__pyx_v_mesh_dof->data), ((double *)__pyx_v_mesh_velocity_dof->data), __pyx_v_MOVING_DOMAIN, ((int *)__pyx_v_mesh_l2g->data), ((double *)__pyx_v_mesh_trial_trace_ref->data), ((double *)__pyx_v_mesh_grad_trial_trace_ref->data), ((double *)__pyx_v_normal_ref->data), ((double *)__pyx_v_boundaryJac_ref->data), ((int *)__pyx_v_vel_l2g->data), ((double *)__pyx_v_u_dof->data), ((double *)__pyx_v_v_dof->data), ((double *)__pyx_v_w_dof->data), ((double *)__pyx_v_vos_dof->data), ((double *)__pyx_v_vel_trial_trace_ref->data), ((double *)__pyx_v_ebqe_velocity->data), ((double *)__pyx_v_velocityAverage->data));

  /* "mprans/cRANS3PF.pyx":5085
 *                                                          < double * > ebqe_dynamic_viscosity_as_function.data)
 * 
 *     def calculateVelocityAverage(self,             # <<<<<<<<<<<<<<
 *                                  int nExteriorElementBoundaries_global,
 *                                  numpy.ndarray exteriorElementBoundariesArray,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":197
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5numpy_7ndarray___getbuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_copy_shape;
  int __pyx_v_i;
  int __pyx_v_ndim;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  int __pyx_v_t;
  char *__pyx_v_f;
  PyArray_Descr *__pyx_v_descr = 0;
  int __pyx_v_offset;
  int __pyx_v_hasfields;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  char *__pyx_t_7;
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  if (__pyx_v_info != NULL) {
    __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(__pyx_v_info->obj);
  }

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":203
 *             # of flags
 * 
 *             if info == NULL: return             # <<<<<<<<<<<<<<
 * 
 *             cdef int copy_shape, i, ndim
 */
  __pyx_t_1 = ((__pyx_v_info == NULL) != 0);
  if (__pyx_t_1) {
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":206
 * 
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 */
  __pyx_v_endian_detector = 1;

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":207
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 * 
 *             ndim = PyArray_NDIM(self)
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":209
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 *             ndim = PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_v_ndim = PyArray_NDIM(__pyx_v_self);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":211
 *             ndim = PyArray_NDIM(self)
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 copy_shape = 1
 *             else:
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":212
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 copy_shape = 1             # <<<<<<<<<<<<<<
 *             else:
 *                 copy_shape = 0
 */
    __pyx_v_copy_shape = 1;

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":211
 *             ndim = PyArray_NDIM(self)
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 copy_shape = 1
 *             else:
 */
    goto __pyx_L4;
  }

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":214
 *                 copy_shape = 1
 *             else:
 *                 copy_shape = 0             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 */
  /*else*/ {
    __pyx_v_copy_shape = 0;
  }
  __pyx_L4:;

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":216
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_C_CONTIGUOUS) == PyBUF_C_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L6_bool_binop_done;
  }

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":217
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_C_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L6_bool_binop_done:;

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":216
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  if (__pyx_t_1) {

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":218
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 218, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 218, __pyx_L1_error)

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":216
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  }

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":220
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_F_CONTIGUOUS) == PyBUF_F_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L9_bool_binop_done;
  }

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":221
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_F_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L9_bool_binop_done:;

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":220
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  if (__pyx_t_1) {

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":222
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 222, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 222, __pyx_L1_error)

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":220
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  }

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":224
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 *             info.buf = PyArray_DATA(self)             # <<<<<<<<<<<<<<
 *             info.ndim = ndim
 *             if copy_shape:
 */
  __pyx_v_info->buf = PyArray_DATA(__pyx_v_self);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":225
 * 
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim             # <<<<<<<<<<<<<<
 *             if copy_shape:
 *                 # Allocate new buffer for strides and shape info.
 */
  __pyx_v_info->ndim = __pyx_v_ndim;

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":226
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if copy_shape:             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
  __pyx_t_1 = (__pyx_v_copy_shape != 0);
  if (__pyx_t_1) {

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":229
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)             # <<<<<<<<<<<<<<
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 */
    __pyx_v_info->strides = ((Py_ssize_t *)malloc((((sizeof(Py_ssize_t)) * ((size_t)__pyx_v_ndim)) * 2)));

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":230
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim             # <<<<<<<<<<<<<<
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 */
    __pyx_v_info->shape = (__pyx_v_info->strides + __pyx_v_ndim);

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":231
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):             # <<<<<<<<<<<<<<
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 */
    __pyx_t_4 = __pyx_v_ndim;
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":232
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]             # <<<<<<<<<<<<<<
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 */
      (__pyx_v_info->strides[__pyx_v_i]) = (PyArray_STRIDES(__pyx_v_self)[__pyx_v_i]);

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":233
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]             # <<<<<<<<<<<<<<
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 */
      (__pyx_v_info->shape[__pyx_v_i]) = (PyArray_DIMS(__pyx_v_self)[__pyx_v_i]);
    }

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":226
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if copy_shape:             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
    goto __pyx_L11;
  }

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":235
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 */
  /*else*/ {
    __pyx_v_info->strides = ((Py_ssize_t *)PyArray_STRIDES(__pyx_v_self));

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":236
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 */
    __pyx_v_info->shape = ((Py_ssize_t *)PyArray_DIMS(__pyx_v_self));
  }
  __pyx_L11:;

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":237
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 */
  __pyx_v_info->suboffsets = NULL;

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":238
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)             # <<<<<<<<<<<<<<
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 * 
 */
  __pyx_v_info->itemsize = PyArray_ITEMSIZE(__pyx_v_self);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":239
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)             # <<<<<<<<<<<<<<
 * 
 *             cdef int t
 */
  __pyx_v_info->readonly = (!(PyArray_ISWRITEABLE(__pyx_v_self) != 0));

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":242
 * 
 *             cdef int t
 *             cdef char* f = NULL             # <<<<<<<<<<<<<<
 *             cdef dtype descr = self.descr
 *             cdef int offset
 */
  __pyx_v_f = NULL;

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":243
 *             cdef int t
 *             cdef char* f = NULL
 *             cdef dtype descr = self.descr             # <<<<<<<<<<<<<<
 *             cdef int offset
 * 
 */
  __pyx_t_3 = ((PyObject *)__pyx_v_self->descr);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_v_descr = ((PyArray_Descr *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":246
 *             cdef int offset
 * 
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields and not copy_shape:
 */
  __pyx_v_hasfields = PyDataType_HASFIELDS(__pyx_v_descr);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":248
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
 * 
 *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
 *                 # do not call releasebuffer
 *                 info.obj = None
 */
  __pyx_t_2 = ((!(__pyx_v_hasfields != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L15_bool_binop_done;
  }
  __pyx_t_2 = ((!(__pyx_v_copy_shape != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L15_bool_binop_done:;
  if (__pyx_t_1) {

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":250
 *             if not hasfields and not copy_shape:
 *                 # do not call releasebuffer
 *                 info.obj = None             # <<<<<<<<<<<<<<
 *             else:
 *                 # need to call releasebuffer
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = Py_None;

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":248
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
 * 
 *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
 *                 # do not call releasebuffer
 *                 info.obj = None
 */
    goto __pyx_L14;
  }

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":253
 *             else:
 *                 # need to call releasebuffer
 *                 info.obj = self             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields:
 */
  /*else*/ {
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = ((PyObject *)__pyx_v_self);
  }
  __pyx_L14:;

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":255
 *                 info.obj = self
 * 
 *             if not hasfields:             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  __pyx_t_1 = ((!(__pyx_v_hasfields != 0)) != 0);
  if (__pyx_t_1) {

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":256
 * 
 *             if not hasfields:
 *                 t = descr.type_num             # <<<<<<<<<<<<<<
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 */
    __pyx_t_4 = __pyx_v_descr->type_num;
    __pyx_v_t = __pyx_t_4;

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":257
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '>') != 0);
    if (!__pyx_t_2) {
      goto __pyx_L20_next_or;
    } else {
    }
    __pyx_t_2 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L19_bool_binop_done;
    }
    __pyx_L20_next_or:;

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":258
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '<') != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L19_bool_binop_done;
    }
    __pyx_t_2 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L19_bool_binop_done:;

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":257
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    if (__pyx_t_1) {

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":259
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 259, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(1, 259, __pyx_L1_error)

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":257
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    }

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":260
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 */
    switch (__pyx_v_t) {
      case NPY_BYTE:
      __pyx_v_f = ((char *)"b");
      break;

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":261
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 */
      case NPY_UBYTE:
      __pyx_v_f = ((char *)"B");
      break;

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":262
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 */
      case NPY_SHORT:
      __pyx_v_f = ((char *)"h");
      break;

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":263
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 */
      case NPY_USHORT:
      __pyx_v_f = ((char *)"H");
      break;

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":264
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 */
      case NPY_INT:
      __pyx_v_f = ((char *)"i");
      break;

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":265
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 */
      case NPY_UINT:
      __pyx_v_f = ((char *)"I");
      break;

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":266
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 */
      case NPY_LONG:
      __pyx_v_f = ((char *)"l");
      break;

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":267
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 */
      case NPY_ULONG:
      __pyx_v_f = ((char *)"L");
      break;

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":268
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 */
      case NPY_LONGLONG:
      __pyx_v_f = ((char *)"q");
      break;

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":269
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 */
      case NPY_ULONGLONG:
      __pyx_v_f = ((char *)"Q");
      break;

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":270
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 */
      case NPY_FLOAT:
      __pyx_v_f = ((char *)"f");
      break;

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":271
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 */
      case NPY_DOUBLE:
      __pyx_v_f = ((char *)"d");
      break;

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":272
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 */
      case NPY_LONGDOUBLE:
      __pyx_v_f = ((char *)"g");
      break;

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":273
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 */
      case NPY_CFLOAT:
      __pyx_v_f = ((char *)"Zf");
      break;

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":274
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"
 */
      case NPY_CDOUBLE:
      __pyx_v_f = ((char *)"Zd");
      break;

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":275
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 */
      case NPY_CLONGDOUBLE:
      __pyx_v_f = ((char *)"Zg");
      break;

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":276
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      case NPY_OBJECT:
      __pyx_v_f = ((char *)"O");
      break;
      default:

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":278
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *                 info.format = f
 *                 return
 */
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __PYX_ERR(1, 278, __pyx_L1_error)
      break;
    }

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":279
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f             # <<<<<<<<<<<<<<
 *                 return
 *             else:
 */
    __pyx_v_info->format = __pyx_v_f;

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":280
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f
 *                 return             # <<<<<<<<<<<<<<
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":255
 *                 info.obj = self
 * 
 *             if not hasfields:             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  }

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":282
 *                 return
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)             # <<<<<<<<<<<<<<
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 */
  /*else*/ {
    __pyx_v_info->format = ((char *)malloc(0xFF));

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":283
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment             # <<<<<<<<<<<<<<
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,
 */
    (__pyx_v_info->format[0]) = '^';

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":284
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0             # <<<<<<<<<<<<<<
 *                 f = _util_dtypestring(descr, info.format + 1,
 *                                       info.format + _buffer_format_string_len,
 */
    __pyx_v_offset = 0;

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":285
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,             # <<<<<<<<<<<<<<
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 */
    __pyx_t_7 = __pyx_f_5numpy__util_dtypestring(__pyx_v_descr, (__pyx_v_info->format + 1), (__pyx_v_info->format + 0xFF), (&__pyx_v_offset)); if (unlikely(__pyx_t_7 == NULL)) __PYX_ERR(1, 285, __pyx_L1_error)
    __pyx_v_f = __pyx_t_7;

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":288
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 *                 f[0] = c'\0' # Terminate format string             # <<<<<<<<<<<<<<
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 */
    (__pyx_v_f[0]) = '\x00';
  }

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":197
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("numpy.ndarray.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info != NULL && __pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = NULL;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info != NULL && __pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(Py_None);
    __Pyx_DECREF(Py_None); __pyx_v_info->obj = NULL;
  }
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_descr);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":290
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 */

/* Python wrapper */
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info); /*proto*/
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__releasebuffer__ (wrapper)", 0);
  __pyx_pf_5numpy_7ndarray_2__releasebuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__releasebuffer__", 0);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":291
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_t_1 = (PyArray_HASFIELDS(__pyx_v_self) != 0);
  if (__pyx_t_1) {

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":292
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)
 */
    free(__pyx_v_info->format);

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":291
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  }

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":293
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":294
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)             # <<<<<<<<<<<<<<
 *                 # info.shape was stored after info.strides in the same block
 * 
 */
    free(__pyx_v_info->strides);

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":293
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  }

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":290
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":770
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":771
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 771, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":770
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":773
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":774
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 774, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":773
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":776
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":777
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 777, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":776
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":779
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":780
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 780, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":779
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":782
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":783
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 783, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":782
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":785
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *__pyx_v_descr, char *__pyx_v_f, char *__pyx_v_end, int *__pyx_v_offset) {
  PyArray_Descr *__pyx_v_child = 0;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_childname = NULL;
  PyObject *__pyx_v_new_offset = NULL;
  PyObject *__pyx_v_t = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  long __pyx_t_8;
  char *__pyx_t_9;
  __Pyx_RefNannySetupContext("_util_dtypestring", 0);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":790
 * 
 *     cdef dtype child
 *     cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 *     cdef tuple fields
 */
  __pyx_v_endian_detector = 1;

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":791
 *     cdef dtype child
 *     cdef int endian_detector = 1
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 *     cdef tuple fields
 * 
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":794
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  if (unlikely(__pyx_v_descr->names == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(1, 794, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_descr->names; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 794, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 794, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_childname, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":795
 * 
 *     for childname in descr.names:
 *         fields = descr.fields[childname]             # <<<<<<<<<<<<<<
 *         child, new_offset = fields
 * 
 */
    if (unlikely(__pyx_v_descr->fields == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 795, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_descr->fields, __pyx_v_childname); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 795, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(1, 795, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_fields, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":796
 *     for childname in descr.names:
 *         fields = descr.fields[childname]
 *         child, new_offset = fields             # <<<<<<<<<<<<<<
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 */
    if (likely(__pyx_v_fields != Py_None)) {
      PyObject* sequence = __pyx_v_fields;
      #if !CYTHON_COMPILING_IN_PYPY
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(1, 796, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 796, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 796, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
    } else {
      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(1, 796, __pyx_L1_error)
    }
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_dtype))))) __PYX_ERR(1, 796, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_child, ((PyArray_Descr *)__pyx_t_3));
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_new_offset, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":798
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 798, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyNumber_Subtract(__pyx_v_new_offset, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 798, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 798, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = ((((__pyx_v_end - __pyx_v_f) - ((int)__pyx_t_5)) < 15) != 0);
    if (__pyx_t_6) {

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":799
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 799, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(1, 799, __pyx_L1_error)

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":798
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    }

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":801
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '>') != 0);
    if (!__pyx_t_7) {
      goto __pyx_L8_next_or;
    } else {
    }
    __pyx_t_7 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_L8_next_or:;

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":802
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *             raise ValueError(u"Non-native byte order not supported")
 *             # One could encode it in the format string and have Cython
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '<') != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_7 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L7_bool_binop_done:;

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":801
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    if (__pyx_t_6) {

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":803
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 803, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(1, 803, __pyx_L1_error)

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":801
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    }

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":813
 * 
 *         # Output padding bytes
 *         while offset[0] < new_offset:             # <<<<<<<<<<<<<<
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 */
    while (1) {
      __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 813, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_new_offset, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 813, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 813, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (!__pyx_t_6) break;

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":814
 *         # Output padding bytes
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte             # <<<<<<<<<<<<<<
 *             f += 1
 *             offset[0] += 1
 */
      (__pyx_v_f[0]) = 0x78;

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":815
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte
 *             f += 1             # <<<<<<<<<<<<<<
 *             offset[0] += 1
 * 
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":816
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 *             offset[0] += 1             # <<<<<<<<<<<<<<
 * 
 *         offset[0] += child.itemsize
 */
      __pyx_t_8 = 0;
      (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + 1);
    }

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":818
 *             offset[0] += 1
 * 
 *         offset[0] += child.itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not PyDataType_HASFIELDS(child):
 */
    __pyx_t_8 = 0;
    (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + __pyx_v_child->elsize);

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":820
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
    __pyx_t_6 = ((!(PyDataType_HASFIELDS(__pyx_v_child) != 0)) != 0);
    if (__pyx_t_6) {

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":821
 * 
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num             # <<<<<<<<<<<<<<
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")
 */
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_child->type_num); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 821, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":822
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      __pyx_t_6 = (((__pyx_v_end - __pyx_v_f) < 5) != 0);
      if (__pyx_t_6) {

        /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":823
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 823, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(1, 823, __pyx_L1_error)

        /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":822
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      }

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":826
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_BYTE); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 826, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 826, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 826, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 98;
        goto __pyx_L15;
      }

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":827
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"             # <<<<<<<<<<<<<<
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UBYTE); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 827, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 827, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 827, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 66;
        goto __pyx_L15;
      }

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":828
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"             # <<<<<<<<<<<<<<
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_SHORT); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 828, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 828, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 828, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x68;
        goto __pyx_L15;
      }

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":829
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"             # <<<<<<<<<<<<<<
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_USHORT); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 829, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 829, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 829, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 72;
        goto __pyx_L15;
      }

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":830
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_INT); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 830, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 830, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 830, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x69;
        goto __pyx_L15;
      }

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":831
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UINT); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 831, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 831, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 831, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 73;
        goto __pyx_L15;
      }

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":832
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 832, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 832, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 832, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x6C;
        goto __pyx_L15;
      }

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":833
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 833, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 833, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 833, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 76;
        goto __pyx_L15;
      }

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":834
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGLONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 834, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 834, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 834, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x71;
        goto __pyx_L15;
      }

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":835
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONGLONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 835, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 835, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 835, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 81;
        goto __pyx_L15;
      }

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":836
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"             # <<<<<<<<<<<<<<
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_FLOAT); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 836, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 836, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 836, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x66;
        goto __pyx_L15;
      }

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":837
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_DOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 837, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 837, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 837, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x64;
        goto __pyx_L15;
      }

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":838
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"             # <<<<<<<<<<<<<<
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 838, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 838, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 838, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x67;
        goto __pyx_L15;
      }

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":839
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf             # <<<<<<<<<<<<<<
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CFLOAT); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 839, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 839, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 839, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x66;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":840
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd             # <<<<<<<<<<<<<<
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 840, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 840, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 840, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x64;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":841
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg             # <<<<<<<<<<<<<<
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CLONGDOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 841, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 841, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 841, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x67;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":842
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_OBJECT); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 842, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 842, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 842, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 79;
        goto __pyx_L15;
      }

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":844
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *             f += 1
 *         else:
 */
      /*else*/ {
        __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 844, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 844, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 844, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __PYX_ERR(1, 844, __pyx_L1_error)
      }
      __pyx_L15:;

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":845
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *             f += 1             # <<<<<<<<<<<<<<
 *         else:
 *             # Cython ignores struct boundary information ("T{...}"),
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":820
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
      goto __pyx_L13;
    }

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":849
 *             # Cython ignores struct boundary information ("T{...}"),
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)             # <<<<<<<<<<<<<<
 *     return f
 * 
 */
    /*else*/ {
      __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_9 == NULL)) __PYX_ERR(1, 849, __pyx_L1_error)
      __pyx_v_f = __pyx_t_9;
    }
    __pyx_L13:;

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":794
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":850
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)
 *     return f             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_f;
  goto __pyx_L0;

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":785
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("numpy._util_dtypestring", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_child);
  __Pyx_XDECREF(__pyx_v_fields);
  __Pyx_XDECREF(__pyx_v_childname);
  __Pyx_XDECREF(__pyx_v_new_offset);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":966
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  PyObject *__pyx_v_baseptr;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":968
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */
  __pyx_t_1 = (__pyx_v_base == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":969
 *      cdef PyObject* baseptr
 *      if base is None:
 *          baseptr = NULL             # <<<<<<<<<<<<<<
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 */
    __pyx_v_baseptr = NULL;

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":968
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */
    goto __pyx_L3;
  }

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":971
 *          baseptr = NULL
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!             # <<<<<<<<<<<<<<
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 */
  /*else*/ {
    Py_INCREF(__pyx_v_base);

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":972
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base             # <<<<<<<<<<<<<<
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr
 */
    __pyx_v_baseptr = ((PyObject *)__pyx_v_base);
  }
  __pyx_L3:;

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":973
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)             # <<<<<<<<<<<<<<
 *      arr.base = baseptr
 * 
 */
  Py_XDECREF(__pyx_v_arr->base);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":974
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  __pyx_v_arr->base = __pyx_v_baseptr;

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":966
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":976
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":977
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_arr->base == NULL) != 0);
  if (__pyx_t_1) {

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":978
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     else:
 *         return <object>arr.base
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":977
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */
  }

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":980
 *         return None
 *     else:
 *         return <object>arr.base             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_arr->base));
    __pyx_r = ((PyObject *)__pyx_v_arr->base);
    goto __pyx_L0;
  }

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":976
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":985
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_array()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_array", 0);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":986
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":987
 * cdef inline int import_array() except -1:
 *     try:
 *         _import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")
 */
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(1, 987, __pyx_L3_error)

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":986
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L10_try_end;
    __pyx_L3_error:;
    __Pyx_PyThreadState_assign

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":988
 *     try:
 *         _import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(1, 988, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":989
 *         _import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 989, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(1, 989, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":986
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L10_try_end:;
  }

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":985
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_array()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":991
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_umath", 0);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":992
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":993
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(1, 993, __pyx_L3_error)

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":992
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L10_try_end;
    __pyx_L3_error:;
    __Pyx_PyThreadState_assign

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":994
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(1, 994, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":995
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 995, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(1, 995, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":992
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L10_try_end:;
  }

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":991
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":997
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_ufunc", 0);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":998
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":999
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(1, 999, __pyx_L3_error)

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":998
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L10_try_end;
    __pyx_L3_error:;
    __Pyx_PyThreadState_assign

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1000
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(1, 1000, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1001
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1001, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(1, 1001, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":998
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L10_try_end:;
  }

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":997
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_6mprans_8cRANS3PF_RANS3PF(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6mprans_8cRANS3PF_7RANS3PF_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6mprans_8cRANS3PF_RANS3PF(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_6mprans_8cRANS3PF_7RANS3PF_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6mprans_8cRANS3PF_RANS3PF[] = {
  {"calculateResidual", (PyCFunction)__pyx_pw_6mprans_8cRANS3PF_7RANS3PF_5calculateResidual, METH_VARARGS|METH_KEYWORDS, 0},
  {"calculateJacobian", (PyCFunction)__pyx_pw_6mprans_8cRANS3PF_7RANS3PF_7calculateJacobian, METH_VARARGS|METH_KEYWORDS, 0},
  {"calculateResidual_entropy_viscosity", (PyCFunction)__pyx_pw_6mprans_8cRANS3PF_7RANS3PF_9calculateResidual_entropy_viscosity, METH_VARARGS|METH_KEYWORDS, 0},
  {"calculateJacobian_entropy_viscosity", (PyCFunction)__pyx_pw_6mprans_8cRANS3PF_7RANS3PF_11calculateJacobian_entropy_viscosity, METH_VARARGS|METH_KEYWORDS, 0},
  {"calculateVelocityAverage", (PyCFunction)__pyx_pw_6mprans_8cRANS3PF_7RANS3PF_13calculateVelocityAverage, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6mprans_8cRANS3PF_RANS3PF = {
  PyVarObject_HEAD_INIT(0, 0)
  "mprans.cRANS3PF.RANS3PF", /*tp_name*/
  sizeof(struct __pyx_obj_6mprans_8cRANS3PF_RANS3PF), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6mprans_8cRANS3PF_RANS3PF, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6mprans_8cRANS3PF_RANS3PF, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6mprans_8cRANS3PF_RANS3PF, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6mprans_8cRANS3PF_RANS3PF2D(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6mprans_8cRANS3PF_9RANS3PF2D_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6mprans_8cRANS3PF_RANS3PF2D(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_6mprans_8cRANS3PF_9RANS3PF2D_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6mprans_8cRANS3PF_RANS3PF2D[] = {
  {"calculateResidual", (PyCFunction)__pyx_pw_6mprans_8cRANS3PF_9RANS3PF2D_5calculateResidual, METH_VARARGS|METH_KEYWORDS, 0},
  {"calculateJacobian", (PyCFunction)__pyx_pw_6mprans_8cRANS3PF_9RANS3PF2D_7calculateJacobian, METH_VARARGS|METH_KEYWORDS, 0},
  {"calculateResidual_entropy_viscosity", (PyCFunction)__pyx_pw_6mprans_8cRANS3PF_9RANS3PF2D_9calculateResidual_entropy_viscosity, METH_VARARGS|METH_KEYWORDS, 0},
  {"calculateJacobian_entropy_viscosity", (PyCFunction)__pyx_pw_6mprans_8cRANS3PF_9RANS3PF2D_11calculateJacobian_entropy_viscosity, METH_VARARGS|METH_KEYWORDS, 0},
  {"calculateVelocityAverage", (PyCFunction)__pyx_pw_6mprans_8cRANS3PF_9RANS3PF2D_13calculateVelocityAverage, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6mprans_8cRANS3PF_RANS3PF2D = {
  PyVarObject_HEAD_INIT(0, 0)
  "mprans.cRANS3PF.RANS3PF2D", /*tp_name*/
  sizeof(struct __pyx_obj_6mprans_8cRANS3PF_RANS3PF2D), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6mprans_8cRANS3PF_RANS3PF2D, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6mprans_8cRANS3PF_RANS3PF2D, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6mprans_8cRANS3PF_RANS3PF2D, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "cRANS3PF",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_C3e, __pyx_k_C3e, sizeof(__pyx_k_C3e), 0, 0, 1, 1},
  {&__pyx_n_s_C4e, __pyx_k_C4e, sizeof(__pyx_k_C4e), 0, 0, 1, 1},
  {&__pyx_n_s_C_b, __pyx_k_C_b, sizeof(__pyx_k_C_b), 0, 0, 1, 1},
  {&__pyx_n_s_C_dc, __pyx_k_C_dc, sizeof(__pyx_k_C_dc), 0, 0, 1, 1},
  {&__pyx_n_s_C_dg, __pyx_k_C_dg, sizeof(__pyx_k_C_dg), 0, 0, 1, 1},
  {&__pyx_n_s_Cd_sge, __pyx_k_Cd_sge, sizeof(__pyx_k_Cd_sge), 0, 0, 1, 1},
  {&__pyx_n_s_CompKernelFlag, __pyx_k_CompKernelFlag, sizeof(__pyx_k_CompKernelFlag), 0, 0, 1, 1},
  {&__pyx_n_s_Ct_sge, __pyx_k_Ct_sge, sizeof(__pyx_k_Ct_sge), 0, 0, 1, 1},
  {&__pyx_n_s_Cx, __pyx_k_Cx, sizeof(__pyx_k_Cx), 0, 0, 1, 1},
  {&__pyx_n_s_Cy, __pyx_k_Cy, sizeof(__pyx_k_Cy), 0, 0, 1, 1},
  {&__pyx_n_s_Cz, __pyx_k_Cz, sizeof(__pyx_k_Cz), 0, 0, 1, 1},
  {&__pyx_kp_u_Format_string_allocated_too_shor, __pyx_k_Format_string_allocated_too_shor, sizeof(__pyx_k_Format_string_allocated_too_shor), 0, 1, 0, 0},
  {&__pyx_kp_u_Format_string_allocated_too_shor_2, __pyx_k_Format_string_allocated_too_shor_2, sizeof(__pyx_k_Format_string_allocated_too_shor_2), 0, 1, 0, 0},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_n_s_KILL_PRESSURE_TERM, __pyx_k_KILL_PRESSURE_TERM, sizeof(__pyx_k_KILL_PRESSURE_TERM), 0, 0, 1, 1},
  {&__pyx_n_s_MATERIAL_PARAMETERS_AS_FUNCTION, __pyx_k_MATERIAL_PARAMETERS_AS_FUNCTION, sizeof(__pyx_k_MATERIAL_PARAMETERS_AS_FUNCTION), 0, 0, 1, 1},
  {&__pyx_n_s_ML, __pyx_k_ML, sizeof(__pyx_k_ML), 0, 0, 1, 1},
  {&__pyx_n_s_MOVING_DOMAIN, __pyx_k_MOVING_DOMAIN, sizeof(__pyx_k_MOVING_DOMAIN), 0, 0, 1, 1},
  {&__pyx_kp_u_Non_native_byte_order_not_suppor, __pyx_k_Non_native_byte_order_not_suppor, sizeof(__pyx_k_Non_native_byte_order_not_suppor), 0, 1, 0, 0},
  {&__pyx_n_s_PSTAB, __pyx_k_PSTAB, sizeof(__pyx_k_PSTAB), 0, 0, 1, 1},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s_STABILIZATION_TYPE, __pyx_k_STABILIZATION_TYPE, sizeof(__pyx_k_STABILIZATION_TYPE), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_aDarcy, __pyx_k_aDarcy, sizeof(__pyx_k_aDarcy), 0, 0, 1, 1},
  {&__pyx_n_s_alphaBDF, __pyx_k_alphaBDF, sizeof(__pyx_k_alphaBDF), 0, 0, 1, 1},
  {&__pyx_n_s_angFriction, __pyx_k_angFriction, sizeof(__pyx_k_angFriction), 0, 0, 1, 1},
  {&__pyx_n_s_areaRefElement, __pyx_k_areaRefElement, sizeof(__pyx_k_areaRefElement), 0, 0, 1, 1},
  {&__pyx_n_s_barycenters, __pyx_k_barycenters, sizeof(__pyx_k_barycenters), 0, 0, 1, 1},
  {&__pyx_n_s_bc_ebqe_phi_ext, __pyx_k_bc_ebqe_phi_ext, sizeof(__pyx_k_bc_ebqe_phi_ext), 0, 0, 1, 1},
  {&__pyx_n_s_bc_ebqe_vf_ext, __pyx_k_bc_ebqe_vf_ext, sizeof(__pyx_k_bc_ebqe_vf_ext), 0, 0, 1, 1},
  {&__pyx_n_s_betaForch, __pyx_k_betaForch, sizeof(__pyx_k_betaForch), 0, 0, 1, 1},
  {&__pyx_n_s_boundaryFlags, __pyx_k_boundaryFlags, sizeof(__pyx_k_boundaryFlags), 0, 0, 1, 1},
  {&__pyx_n_s_boundaryJac_ref, __pyx_k_boundaryJac_ref, sizeof(__pyx_k_boundaryJac_ref), 0, 0, 1, 1},
  {&__pyx_n_s_cE, __pyx_k_cE, sizeof(__pyx_k_cE), 0, 0, 1, 1},
  {&__pyx_n_s_cMax, __pyx_k_cMax, sizeof(__pyx_k_cMax), 0, 0, 1, 1},
  {&__pyx_n_s_csrColumnOffsets_DofLoops, __pyx_k_csrColumnOffsets_DofLoops, sizeof(__pyx_k_csrColumnOffsets_DofLoops), 0, 0, 1, 1},
  {&__pyx_n_s_csrColumnOffsets_eb_p_p, __pyx_k_csrColumnOffsets_eb_p_p, sizeof(__pyx_k_csrColumnOffsets_eb_p_p), 0, 0, 1, 1},
  {&__pyx_n_s_csrColumnOffsets_eb_p_u, __pyx_k_csrColumnOffsets_eb_p_u, sizeof(__pyx_k_csrColumnOffsets_eb_p_u), 0, 0, 1, 1},
  {&__pyx_n_s_csrColumnOffsets_eb_p_v, __pyx_k_csrColumnOffsets_eb_p_v, sizeof(__pyx_k_csrColumnOffsets_eb_p_v), 0, 0, 1, 1},
  {&__pyx_n_s_csrColumnOffsets_eb_p_w, __pyx_k_csrColumnOffsets_eb_p_w, sizeof(__pyx_k_csrColumnOffsets_eb_p_w), 0, 0, 1, 1},
  {&__pyx_n_s_csrColumnOffsets_eb_u_p, __pyx_k_csrColumnOffsets_eb_u_p, sizeof(__pyx_k_csrColumnOffsets_eb_u_p), 0, 0, 1, 1},
  {&__pyx_n_s_csrColumnOffsets_eb_u_u, __pyx_k_csrColumnOffsets_eb_u_u, sizeof(__pyx_k_csrColumnOffsets_eb_u_u), 0, 0, 1, 1},
  {&__pyx_n_s_csrColumnOffsets_eb_u_v, __pyx_k_csrColumnOffsets_eb_u_v, sizeof(__pyx_k_csrColumnOffsets_eb_u_v), 0, 0, 1, 1},
  {&__pyx_n_s_csrColumnOffsets_eb_u_w, __pyx_k_csrColumnOffsets_eb_u_w, sizeof(__pyx_k_csrColumnOffsets_eb_u_w), 0, 0, 1, 1},
  {&__pyx_n_s_csrColumnOffsets_eb_v_p, __pyx_k_csrColumnOffsets_eb_v_p, sizeof(__pyx_k_csrColumnOffsets_eb_v_p), 0, 0, 1, 1},
  {&__pyx_n_s_csrColumnOffsets_eb_v_u, __pyx_k_csrColumnOffsets_eb_v_u, sizeof(__pyx_k_csrColumnOffsets_eb_v_u), 0, 0, 1, 1},
  {&__pyx_n_s_csrColumnOffsets_eb_v_v, __pyx_k_csrColumnOffsets_eb_v_v, sizeof(__pyx_k_csrColumnOffsets_eb_v_v), 0, 0, 1, 1},
  {&__pyx_n_s_csrColumnOffsets_eb_v_w, __pyx_k_csrColumnOffsets_eb_v_w, sizeof(__pyx_k_csrColumnOffsets_eb_v_w), 0, 0, 1, 1},
  {&__pyx_n_s_csrColumnOffsets_eb_w_p, __pyx_k_csrColumnOffsets_eb_w_p, sizeof(__pyx_k_csrColumnOffsets_eb_w_p), 0, 0, 1, 1},
  {&__pyx_n_s_csrColumnOffsets_eb_w_u, __pyx_k_csrColumnOffsets_eb_w_u, sizeof(__pyx_k_csrColumnOffsets_eb_w_u), 0, 0, 1, 1},
  {&__pyx_n_s_csrColumnOffsets_eb_w_v, __pyx_k_csrColumnOffsets_eb_w_v, sizeof(__pyx_k_csrColumnOffsets_eb_w_v), 0, 0, 1, 1},
  {&__pyx_n_s_csrColumnOffsets_eb_w_w, __pyx_k_csrColumnOffsets_eb_w_w, sizeof(__pyx_k_csrColumnOffsets_eb_w_w), 0, 0, 1, 1},
  {&__pyx_n_s_csrColumnOffsets_p_p, __pyx_k_csrColumnOffsets_p_p, sizeof(__pyx_k_csrColumnOffsets_p_p), 0, 0, 1, 1},
  {&__pyx_n_s_csrColumnOffsets_p_u, __pyx_k_csrColumnOffsets_p_u, sizeof(__pyx_k_csrColumnOffsets_p_u), 0, 0, 1, 1},
  {&__pyx_n_s_csrColumnOffsets_p_v, __pyx_k_csrColumnOffsets_p_v, sizeof(__pyx_k_csrColumnOffsets_p_v), 0, 0, 1, 1},
  {&__pyx_n_s_csrColumnOffsets_p_w, __pyx_k_csrColumnOffsets_p_w, sizeof(__pyx_k_csrColumnOffsets_p_w), 0, 0, 1, 1},
  {&__pyx_n_s_csrColumnOffsets_u_p, __pyx_k_csrColumnOffsets_u_p, sizeof(__pyx_k_csrColumnOffsets_u_p), 0, 0, 1, 1},
  {&__pyx_n_s_csrColumnOffsets_u_u, __pyx_k_csrColumnOffsets_u_u, sizeof(__pyx_k_csrColumnOffsets_u_u), 0, 0, 1, 1},
  {&__pyx_n_s_csrColumnOffsets_u_v, __pyx_k_csrColumnOffsets_u_v, sizeof(__pyx_k_csrColumnOffsets_u_v), 0, 0, 1, 1},
  {&__pyx_n_s_csrColumnOffsets_u_w, __pyx_k_csrColumnOffsets_u_w, sizeof(__pyx_k_csrColumnOffsets_u_w), 0, 0, 1, 1},
  {&__pyx_n_s_csrColumnOffsets_v_p, __pyx_k_csrColumnOffsets_v_p, sizeof(__pyx_k_csrColumnOffsets_v_p), 0, 0, 1, 1},
  {&__pyx_n_s_csrColumnOffsets_v_u, __pyx_k_csrColumnOffsets_v_u, sizeof(__pyx_k_csrColumnOffsets_v_u), 0, 0, 1, 1},
  {&__pyx_n_s_csrColumnOffsets_v_v, __pyx_k_csrColumnOffsets_v_v, sizeof(__pyx_k_csrColumnOffsets_v_v), 0, 0, 1, 1},
  {&__pyx_n_s_csrColumnOffsets_v_w, __pyx_k_csrColumnOffsets_v_w, sizeof(__pyx_k_csrColumnOffsets_v_w), 0, 0, 1, 1},
  {&__pyx_n_s_csrColumnOffsets_w_p, __pyx_k_csrColumnOffsets_w_p, sizeof(__pyx_k_csrColumnOffsets_w_p), 0, 0, 1, 1},
  {&__pyx_n_s_csrColumnOffsets_w_u, __pyx_k_csrColumnOffsets_w_u, sizeof(__pyx_k_csrColumnOffsets_w_u), 0, 0, 1, 1},
  {&__pyx_n_s_csrColumnOffsets_w_v, __pyx_k_csrColumnOffsets_w_v, sizeof(__pyx_k_csrColumnOffsets_w_v), 0, 0, 1, 1},
  {&__pyx_n_s_csrColumnOffsets_w_w, __pyx_k_csrColumnOffsets_w_w, sizeof(__pyx_k_csrColumnOffsets_w_w), 0, 0, 1, 1},
  {&__pyx_n_s_csrRowIndeces_DofLoops, __pyx_k_csrRowIndeces_DofLoops, sizeof(__pyx_k_csrRowIndeces_DofLoops), 0, 0, 1, 1},
  {&__pyx_n_s_csrRowIndeces_p_p, __pyx_k_csrRowIndeces_p_p, sizeof(__pyx_k_csrRowIndeces_p_p), 0, 0, 1, 1},
  {&__pyx_n_s_csrRowIndeces_p_u, __pyx_k_csrRowIndeces_p_u, sizeof(__pyx_k_csrRowIndeces_p_u), 0, 0, 1, 1},
  {&__pyx_n_s_csrRowIndeces_p_v, __pyx_k_csrRowIndeces_p_v, sizeof(__pyx_k_csrRowIndeces_p_v), 0, 0, 1, 1},
  {&__pyx_n_s_csrRowIndeces_p_w, __pyx_k_csrRowIndeces_p_w, sizeof(__pyx_k_csrRowIndeces_p_w), 0, 0, 1, 1},
  {&__pyx_n_s_csrRowIndeces_u_p, __pyx_k_csrRowIndeces_u_p, sizeof(__pyx_k_csrRowIndeces_u_p), 0, 0, 1, 1},
  {&__pyx_n_s_csrRowIndeces_u_u, __pyx_k_csrRowIndeces_u_u, sizeof(__pyx_k_csrRowIndeces_u_u), 0, 0, 1, 1},
  {&__pyx_n_s_csrRowIndeces_u_v, __pyx_k_csrRowIndeces_u_v, sizeof(__pyx_k_csrRowIndeces_u_v), 0, 0, 1, 1},
  {&__pyx_n_s_csrRowIndeces_u_w, __pyx_k_csrRowIndeces_u_w, sizeof(__pyx_k_csrRowIndeces_u_w), 0, 0, 1, 1},
  {&__pyx_n_s_csrRowIndeces_v_p, __pyx_k_csrRowIndeces_v_p, sizeof(__pyx_k_csrRowIndeces_v_p), 0, 0, 1, 1},
  {&__pyx_n_s_csrRowIndeces_v_u, __pyx_k_csrRowIndeces_v_u, sizeof(__pyx_k_csrRowIndeces_v_u), 0, 0, 1, 1},
  {&__pyx_n_s_csrRowIndeces_v_v, __pyx_k_csrRowIndeces_v_v, sizeof(__pyx_k_csrRowIndeces_v_v), 0, 0, 1, 1},
  {&__pyx_n_s_csrRowIndeces_v_w, __pyx_k_csrRowIndeces_v_w, sizeof(__pyx_k_csrRowIndeces_v_w), 0, 0, 1, 1},
  {&__pyx_n_s_csrRowIndeces_w_p, __pyx_k_csrRowIndeces_w_p, sizeof(__pyx_k_csrRowIndeces_w_p), 0, 0, 1, 1},
  {&__pyx_n_s_csrRowIndeces_w_u, __pyx_k_csrRowIndeces_w_u, sizeof(__pyx_k_csrRowIndeces_w_u), 0, 0, 1, 1},
  {&__pyx_n_s_csrRowIndeces_w_v, __pyx_k_csrRowIndeces_w_v, sizeof(__pyx_k_csrRowIndeces_w_v), 0, 0, 1, 1},
  {&__pyx_n_s_csrRowIndeces_w_w, __pyx_k_csrRowIndeces_w_w, sizeof(__pyx_k_csrRowIndeces_w_w), 0, 0, 1, 1},
  {&__pyx_n_s_dS_ref, __pyx_k_dS_ref, sizeof(__pyx_k_dS_ref), 0, 0, 1, 1},
  {&__pyx_n_s_dV_ref, __pyx_k_dV_ref, sizeof(__pyx_k_dV_ref), 0, 0, 1, 1},
  {&__pyx_n_s_density_as_function, __pyx_k_density_as_function, sizeof(__pyx_k_density_as_function), 0, 0, 1, 1},
  {&__pyx_n_s_dt, __pyx_k_dt, sizeof(__pyx_k_dt), 0, 0, 1, 1},
  {&__pyx_n_s_dynamic_viscosity_as_function, __pyx_k_dynamic_viscosity_as_function, sizeof(__pyx_k_dynamic_viscosity_as_function), 0, 0, 1, 1},
  {&__pyx_n_s_eR, __pyx_k_eR, sizeof(__pyx_k_eR), 0, 0, 1, 1},
  {&__pyx_n_s_eb_adjoint_sigma, __pyx_k_eb_adjoint_sigma, sizeof(__pyx_k_eb_adjoint_sigma), 0, 0, 1, 1},
  {&__pyx_n_s_ebqe_bc_flux_mass_ext, __pyx_k_ebqe_bc_flux_mass_ext, sizeof(__pyx_k_ebqe_bc_flux_mass_ext), 0, 0, 1, 1},
  {&__pyx_n_s_ebqe_bc_flux_mom_u_adv_ext, __pyx_k_ebqe_bc_flux_mom_u_adv_ext, sizeof(__pyx_k_ebqe_bc_flux_mom_u_adv_ext), 0, 0, 1, 1},
  {&__pyx_n_s_ebqe_bc_flux_mom_v_adv_ext, __pyx_k_ebqe_bc_flux_mom_v_adv_ext, sizeof(__pyx_k_ebqe_bc_flux_mom_v_adv_ext), 0, 0, 1, 1},
  {&__pyx_n_s_ebqe_bc_flux_mom_w_adv_ext, __pyx_k_ebqe_bc_flux_mom_w_adv_ext, sizeof(__pyx_k_ebqe_bc_flux_mom_w_adv_ext), 0, 0, 1, 1},
  {&__pyx_n_s_ebqe_bc_flux_u_diff_ext, __pyx_k_ebqe_bc_flux_u_diff_ext, sizeof(__pyx_k_ebqe_bc_flux_u_diff_ext), 0, 0, 1, 1},
  {&__pyx_n_s_ebqe_bc_flux_v_diff_ext, __pyx_k_ebqe_bc_flux_v_diff_ext, sizeof(__pyx_k_ebqe_bc_flux_v_diff_ext), 0, 0, 1, 1},
  {&__pyx_n_s_ebqe_bc_flux_w_diff_ext, __pyx_k_ebqe_bc_flux_w_diff_ext, sizeof(__pyx_k_ebqe_bc_flux_w_diff_ext), 0, 0, 1, 1},
  {&__pyx_n_s_ebqe_bc_p_ext, __pyx_k_ebqe_bc_p_ext, sizeof(__pyx_k_ebqe_bc_p_ext), 0, 0, 1, 1},
  {&__pyx_n_s_ebqe_bc_u_ext, __pyx_k_ebqe_bc_u_ext, sizeof(__pyx_k_ebqe_bc_u_ext), 0, 0, 1, 1},
  {&__pyx_n_s_ebqe_bc_v_ext, __pyx_k_ebqe_bc_v_ext, sizeof(__pyx_k_ebqe_bc_v_ext), 0, 0, 1, 1},
  {&__pyx_n_s_ebqe_bc_w_ext, __pyx_k_ebqe_bc_w_ext, sizeof(__pyx_k_ebqe_bc_w_ext), 0, 0, 1, 1},
  {&__pyx_n_s_ebqe_density_as_function, __pyx_k_ebqe_density_as_function, sizeof(__pyx_k_ebqe_density_as_function), 0, 0, 1, 1},
  {&__pyx_n_s_ebqe_dynamic_viscosity_as_functi, __pyx_k_ebqe_dynamic_viscosity_as_functi, sizeof(__pyx_k_ebqe_dynamic_viscosity_as_functi), 0, 0, 1, 1},
  {&__pyx_n_s_ebqe_grad_p, __pyx_k_ebqe_grad_p, sizeof(__pyx_k_ebqe_grad_p), 0, 0, 1, 1},
  {&__pyx_n_s_ebqe_grad_u, __pyx_k_ebqe_grad_u, sizeof(__pyx_k_ebqe_grad_u), 0, 0, 1, 1},
  {&__pyx_n_s_ebqe_grad_v, __pyx_k_ebqe_grad_v, sizeof(__pyx_k_ebqe_grad_v), 0, 0, 1, 1},
  {&__pyx_n_s_ebqe_grad_w, __pyx_k_ebqe_grad_w, sizeof(__pyx_k_ebqe_grad_w), 0, 0, 1, 1},
  {&__pyx_n_s_ebqe_kappa_phi_ext, __pyx_k_ebqe_kappa_phi_ext, sizeof(__pyx_k_ebqe_kappa_phi_ext), 0, 0, 1, 1},
  {&__pyx_n_s_ebqe_normal_phi_ext, __pyx_k_ebqe_normal_phi_ext, sizeof(__pyx_k_ebqe_normal_phi_ext), 0, 0, 1, 1},
  {&__pyx_n_s_ebqe_nu, __pyx_k_ebqe_nu, sizeof(__pyx_k_ebqe_nu), 0, 0, 1, 1},
  {&__pyx_n_s_ebqe_p, __pyx_k_ebqe_p, sizeof(__pyx_k_ebqe_p), 0, 0, 1, 1},
  {&__pyx_n_s_ebqe_penalty_ext, __pyx_k_ebqe_penalty_ext, sizeof(__pyx_k_ebqe_penalty_ext), 0, 0, 1, 1},
  {&__pyx_n_s_ebqe_phi_ext, __pyx_k_ebqe_phi_ext, sizeof(__pyx_k_ebqe_phi_ext), 0, 0, 1, 1},
  {&__pyx_n_s_ebqe_rho, __pyx_k_ebqe_rho, sizeof(__pyx_k_ebqe_rho), 0, 0, 1, 1},
  {&__pyx_n_s_ebqe_turb_var_0, __pyx_k_ebqe_turb_var_0, sizeof(__pyx_k_ebqe_turb_var_0), 0, 0, 1, 1},
  {&__pyx_n_s_ebqe_turb_var_1, __pyx_k_ebqe_turb_var_1, sizeof(__pyx_k_ebqe_turb_var_1), 0, 0, 1, 1},
  {&__pyx_n_s_ebqe_velocity, __pyx_k_ebqe_velocity, sizeof(__pyx_k_ebqe_velocity), 0, 0, 1, 1},
  {&__pyx_n_s_ebqe_velocity_star, __pyx_k_ebqe_velocity_star, sizeof(__pyx_k_ebqe_velocity_star), 0, 0, 1, 1},
  {&__pyx_n_s_ebqe_vf_ext, __pyx_k_ebqe_vf_ext, sizeof(__pyx_k_ebqe_vf_ext), 0, 0, 1, 1},
  {&__pyx_n_s_ebqe_vos_ext, __pyx_k_ebqe_vos_ext, sizeof(__pyx_k_ebqe_vos_ext), 0, 0, 1, 1},
  {&__pyx_n_s_elementBoundaryElementsArray, __pyx_k_elementBoundaryElementsArray, sizeof(__pyx_k_elementBoundaryElementsArray), 0, 0, 1, 1},
  {&__pyx_n_s_elementBoundaryLocalElementBound, __pyx_k_elementBoundaryLocalElementBound, sizeof(__pyx_k_elementBoundaryLocalElementBound), 0, 0, 1, 1},
  {&__pyx_n_s_elementDiameter, __pyx_k_elementDiameter, sizeof(__pyx_k_elementDiameter), 0, 0, 1, 1},
  {&__pyx_n_s_elementFlags, __pyx_k_elementFlags, sizeof(__pyx_k_elementFlags), 0, 0, 1, 1},
  {&__pyx_n_s_elementResidual_p, __pyx_k_elementResidual_p, sizeof(__pyx_k_elementResidual_p), 0, 0, 1, 1},
  {&__pyx_n_s_entropyResidualAtCell, __pyx_k_entropyResidualAtCell, sizeof(__pyx_k_entropyResidualAtCell), 0, 0, 1, 1},
  {&__pyx_n_s_epsFact_mu, __pyx_k_epsFact_mu, sizeof(__pyx_k_epsFact_mu), 0, 0, 1, 1},
  {&__pyx_n_s_epsFact_rho, __pyx_k_epsFact_rho, sizeof(__pyx_k_epsFact_rho), 0, 0, 1, 1},
  {&__pyx_n_s_eps_solid, __pyx_k_eps_solid, sizeof(__pyx_k_eps_solid), 0, 0, 1, 1},
  {&__pyx_n_s_exteriorElementBoundariesArray, __pyx_k_exteriorElementBoundariesArray, sizeof(__pyx_k_exteriorElementBoundariesArray), 0, 0, 1, 1},
  {&__pyx_n_s_fContact, __pyx_k_fContact, sizeof(__pyx_k_fContact), 0, 0, 1, 1},
  {&__pyx_n_s_flux, __pyx_k_flux, sizeof(__pyx_k_flux), 0, 0, 1, 1},
  {&__pyx_n_s_forcex, __pyx_k_forcex, sizeof(__pyx_k_forcex), 0, 0, 1, 1},
  {&__pyx_n_s_forcey, __pyx_k_forcey, sizeof(__pyx_k_forcey), 0, 0, 1, 1},
  {&__pyx_n_s_forcez, __pyx_k_forcez, sizeof(__pyx_k_forcez), 0, 0, 1, 1},
  {&__pyx_n_s_frFraction, __pyx_k_frFraction, sizeof(__pyx_k_frFraction), 0, 0, 1, 1},
  {&__pyx_n_s_g, __pyx_k_g, sizeof(__pyx_k_g), 0, 0, 1, 1},
  {&__pyx_n_s_getCSRrepresentation, __pyx_k_getCSRrepresentation, sizeof(__pyx_k_getCSRrepresentation), 0, 0, 1, 1},
  {&__pyx_n_s_globalJacobian, __pyx_k_globalJacobian, sizeof(__pyx_k_globalJacobian), 0, 0, 1, 1},
  {&__pyx_n_s_globalResidual, __pyx_k_globalResidual, sizeof(__pyx_k_globalResidual), 0, 0, 1, 1},
  {&__pyx_n_s_grain, __pyx_k_grain, sizeof(__pyx_k_grain), 0, 0, 1, 1},
  {&__pyx_n_s_hFactor, __pyx_k_hFactor, sizeof(__pyx_k_hFactor), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_interiorElementBoundariesArray, __pyx_k_interiorElementBoundariesArray, sizeof(__pyx_k_interiorElementBoundariesArray), 0, 0, 1, 1},
  {&__pyx_n_s_isAdvectiveFluxBoundary_p, __pyx_k_isAdvectiveFluxBoundary_p, sizeof(__pyx_k_isAdvectiveFluxBoundary_p), 0, 0, 1, 1},
  {&__pyx_n_s_isAdvectiveFluxBoundary_u, __pyx_k_isAdvectiveFluxBoundary_u, sizeof(__pyx_k_isAdvectiveFluxBoundary_u), 0, 0, 1, 1},
  {&__pyx_n_s_isAdvectiveFluxBoundary_v, __pyx_k_isAdvectiveFluxBoundary_v, sizeof(__pyx_k_isAdvectiveFluxBoundary_v), 0, 0, 1, 1},
  {&__pyx_n_s_isAdvectiveFluxBoundary_w, __pyx_k_isAdvectiveFluxBoundary_w, sizeof(__pyx_k_isAdvectiveFluxBoundary_w), 0, 0, 1, 1},
  {&__pyx_n_s_isDOFBoundary_p, __pyx_k_isDOFBoundary_p, sizeof(__pyx_k_isDOFBoundary_p), 0, 0, 1, 1},
  {&__pyx_n_s_isDOFBoundary_u, __pyx_k_isDOFBoundary_u, sizeof(__pyx_k_isDOFBoundary_u), 0, 0, 1, 1},
  {&__pyx_n_s_isDOFBoundary_v, __pyx_k_isDOFBoundary_v, sizeof(__pyx_k_isDOFBoundary_v), 0, 0, 1, 1},
  {&__pyx_n_s_isDOFBoundary_w, __pyx_k_isDOFBoundary_w, sizeof(__pyx_k_isDOFBoundary_w), 0, 0, 1, 1},
  {&__pyx_n_s_isDiffusiveFluxBoundary_u, __pyx_k_isDiffusiveFluxBoundary_u, sizeof(__pyx_k_isDiffusiveFluxBoundary_u), 0, 0, 1, 1},
  {&__pyx_n_s_isDiffusiveFluxBoundary_v, __pyx_k_isDiffusiveFluxBoundary_v, sizeof(__pyx_k_isDiffusiveFluxBoundary_v), 0, 0, 1, 1},
  {&__pyx_n_s_isDiffusiveFluxBoundary_w, __pyx_k_isDiffusiveFluxBoundary_w, sizeof(__pyx_k_isDiffusiveFluxBoundary_w), 0, 0, 1, 1},
  {&__pyx_n_s_kappa_phi, __pyx_k_kappa_phi, sizeof(__pyx_k_kappa_phi), 0, 0, 1, 1},
  {&__pyx_n_s_mContact, __pyx_k_mContact, sizeof(__pyx_k_mContact), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_maxFraction, __pyx_k_maxFraction, sizeof(__pyx_k_maxFraction), 0, 0, 1, 1},
  {&__pyx_n_s_maxSpeed2AtCell, __pyx_k_maxSpeed2AtCell, sizeof(__pyx_k_maxSpeed2AtCell), 0, 0, 1, 1},
  {&__pyx_n_s_maxSpeed2AtOmega, __pyx_k_maxSpeed2AtOmega, sizeof(__pyx_k_maxSpeed2AtOmega), 0, 0, 1, 1},
  {&__pyx_n_s_mesh_dof, __pyx_k_mesh_dof, sizeof(__pyx_k_mesh_dof), 0, 0, 1, 1},
  {&__pyx_n_s_mesh_grad_trial_ref, __pyx_k_mesh_grad_trial_ref, sizeof(__pyx_k_mesh_grad_trial_ref), 0, 0, 1, 1},
  {&__pyx_n_s_mesh_grad_trial_trace_ref, __pyx_k_mesh_grad_trial_trace_ref, sizeof(__pyx_k_mesh_grad_trial_trace_ref), 0, 0, 1, 1},
  {&__pyx_n_s_mesh_l2g, __pyx_k_mesh_l2g, sizeof(__pyx_k_mesh_l2g), 0, 0, 1, 1},
  {&__pyx_n_s_mesh_trial_ref, __pyx_k_mesh_trial_ref, sizeof(__pyx_k_mesh_trial_ref), 0, 0, 1, 1},
  {&__pyx_n_s_mesh_trial_trace_ref, __pyx_k_mesh_trial_trace_ref, sizeof(__pyx_k_mesh_trial_trace_ref), 0, 0, 1, 1},
  {&__pyx_n_s_mesh_velocity_dof, __pyx_k_mesh_velocity_dof, sizeof(__pyx_k_mesh_velocity_dof), 0, 0, 1, 1},
  {&__pyx_n_s_muAtCell, __pyx_k_muAtCell, sizeof(__pyx_k_muAtCell), 0, 0, 1, 1},
  {&__pyx_n_s_nContact, __pyx_k_nContact, sizeof(__pyx_k_nContact), 0, 0, 1, 1},
  {&__pyx_n_s_nDOF_mesh_trial_elementIn, __pyx_k_nDOF_mesh_trial_elementIn, sizeof(__pyx_k_nDOF_mesh_trial_elementIn), 0, 0, 1, 1},
  {&__pyx_n_s_nDOF_test_elementIn, __pyx_k_nDOF_test_elementIn, sizeof(__pyx_k_nDOF_test_elementIn), 0, 0, 1, 1},
  {&__pyx_n_s_nDOF_trial_elementIn, __pyx_k_nDOF_trial_elementIn, sizeof(__pyx_k_nDOF_trial_elementIn), 0, 0, 1, 1},
  {&__pyx_n_s_nElementBoundaries_owned, __pyx_k_nElementBoundaries_owned, sizeof(__pyx_k_nElementBoundaries_owned), 0, 0, 1, 1},
  {&__pyx_n_s_nElements_global, __pyx_k_nElements_global, sizeof(__pyx_k_nElements_global), 0, 0, 1, 1},
  {&__pyx_n_s_nElements_owned, __pyx_k_nElements_owned, sizeof(__pyx_k_nElements_owned), 0, 0, 1, 1},
  {&__pyx_n_s_nExteriorElementBoundaries_globa, __pyx_k_nExteriorElementBoundaries_globa, sizeof(__pyx_k_nExteriorElementBoundaries_globa), 0, 0, 1, 1},
  {&__pyx_n_s_nInteriorElementBoundaries_globa, __pyx_k_nInteriorElementBoundaries_globa, sizeof(__pyx_k_nInteriorElementBoundaries_globa), 0, 0, 1, 1},
  {&__pyx_n_s_nParticles, __pyx_k_nParticles, sizeof(__pyx_k_nParticles), 0, 0, 1, 1},
  {&__pyx_n_s_nQuadraturePoints_elementBoundar, __pyx_k_nQuadraturePoints_elementBoundar, sizeof(__pyx_k_nQuadraturePoints_elementBoundar), 0, 0, 1, 1},
  {&__pyx_n_s_nQuadraturePoints_elementIn, __pyx_k_nQuadraturePoints_elementIn, sizeof(__pyx_k_nQuadraturePoints_elementIn), 0, 0, 1, 1},
  {&__pyx_n_s_nSpaceIn, __pyx_k_nSpaceIn, sizeof(__pyx_k_nSpaceIn), 0, 0, 1, 1},
  {&__pyx_kp_u_ndarray_is_not_C_contiguous, __pyx_k_ndarray_is_not_C_contiguous, sizeof(__pyx_k_ndarray_is_not_C_contiguous), 0, 1, 0, 0},
  {&__pyx_kp_u_ndarray_is_not_Fortran_contiguou, __pyx_k_ndarray_is_not_Fortran_contiguou, sizeof(__pyx_k_ndarray_is_not_Fortran_contiguou), 0, 1, 0, 0},
  {&__pyx_n_s_netForces_p, __pyx_k_netForces_p, sizeof(__pyx_k_netForces_p), 0, 0, 1, 1},
  {&__pyx_n_s_netForces_v, __pyx_k_netForces_v, sizeof(__pyx_k_netForces_v), 0, 0, 1, 1},
  {&__pyx_n_s_netMoments, __pyx_k_netMoments, sizeof(__pyx_k_netMoments), 0, 0, 1, 1},
  {&__pyx_n_s_nodeDiametersArray, __pyx_k_nodeDiametersArray, sizeof(__pyx_k_nodeDiametersArray), 0, 0, 1, 1},
  {&__pyx_n_s_normal_phi, __pyx_k_normal_phi, sizeof(__pyx_k_normal_phi), 0, 0, 1, 1},
  {&__pyx_n_s_normal_ref, __pyx_k_normal_ref, sizeof(__pyx_k_normal_ref), 0, 0, 1, 1},
  {&__pyx_n_s_nu_0, __pyx_k_nu_0, sizeof(__pyx_k_nu_0), 0, 0, 1, 1},
  {&__pyx_n_s_nu_1, __pyx_k_nu_1, sizeof(__pyx_k_nu_1), 0, 0, 1, 1},
  {&__pyx_n_s_numDOFsPerEqn, __pyx_k_numDOFsPerEqn, sizeof(__pyx_k_numDOFsPerEqn), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_kp_s_numpy_core_multiarray_failed_to, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 0, 1, 0},
  {&__pyx_kp_s_numpy_core_umath_failed_to_impor, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 0, 1, 0},
  {&__pyx_n_s_offset_p, __pyx_k_offset_p, sizeof(__pyx_k_offset_p), 0, 0, 1, 1},
  {&__pyx_n_s_offset_u, __pyx_k_offset_u, sizeof(__pyx_k_offset_u), 0, 0, 1, 1},
  {&__pyx_n_s_offset_v, __pyx_k_offset_v, sizeof(__pyx_k_offset_v), 0, 0, 1, 1},
  {&__pyx_n_s_offset_w, __pyx_k_offset_w, sizeof(__pyx_k_offset_w), 0, 0, 1, 1},
  {&__pyx_n_s_order_polynomial, __pyx_k_order_polynomial, sizeof(__pyx_k_order_polynomial), 0, 0, 1, 1},
  {&__pyx_n_s_p_dof, __pyx_k_p_dof, sizeof(__pyx_k_p_dof), 0, 0, 1, 1},
  {&__pyx_n_s_p_grad_test_ref, __pyx_k_p_grad_test_ref, sizeof(__pyx_k_p_grad_test_ref), 0, 0, 1, 1},
  {&__pyx_n_s_p_grad_test_trace_ref, __pyx_k_p_grad_test_trace_ref, sizeof(__pyx_k_p_grad_test_trace_ref), 0, 0, 1, 1},
  {&__pyx_n_s_p_grad_trial_ref, __pyx_k_p_grad_trial_ref, sizeof(__pyx_k_p_grad_trial_ref), 0, 0, 1, 1},
  {&__pyx_n_s_p_grad_trial_trace_ref, __pyx_k_p_grad_trial_trace_ref, sizeof(__pyx_k_p_grad_trial_trace_ref), 0, 0, 1, 1},
  {&__pyx_n_s_p_l2g, __pyx_k_p_l2g, sizeof(__pyx_k_p_l2g), 0, 0, 1, 1},
  {&__pyx_n_s_p_test_ref, __pyx_k_p_test_ref, sizeof(__pyx_k_p_test_ref), 0, 0, 1, 1},
  {&__pyx_n_s_p_test_trace_ref, __pyx_k_p_test_trace_ref, sizeof(__pyx_k_p_test_trace_ref), 0, 0, 1, 1},
  {&__pyx_n_s_p_trial_ref, __pyx_k_p_trial_ref, sizeof(__pyx_k_p_trial_ref), 0, 0, 1, 1},
  {&__pyx_n_s_p_trial_trace_ref, __pyx_k_p_trial_trace_ref, sizeof(__pyx_k_p_trial_trace_ref), 0, 0, 1, 1},
  {&__pyx_n_s_packFraction, __pyx_k_packFraction, sizeof(__pyx_k_packFraction), 0, 0, 1, 1},
  {&__pyx_n_s_packMargin, __pyx_k_packMargin, sizeof(__pyx_k_packMargin), 0, 0, 1, 1},
  {&__pyx_n_s_particle_alpha, __pyx_k_particle_alpha, sizeof(__pyx_k_particle_alpha), 0, 0, 1, 1},
  {&__pyx_n_s_particle_beta, __pyx_k_particle_beta, sizeof(__pyx_k_particle_beta), 0, 0, 1, 1},
  {&__pyx_n_s_particle_centroids, __pyx_k_particle_centroids, sizeof(__pyx_k_particle_centroids), 0, 0, 1, 1},
  {&__pyx_n_s_particle_epsFact, __pyx_k_particle_epsFact, sizeof(__pyx_k_particle_epsFact), 0, 0, 1, 1},
  {&__pyx_n_s_particle_netForces, __pyx_k_particle_netForces, sizeof(__pyx_k_particle_netForces), 0, 0, 1, 1},
  {&__pyx_n_s_particle_netMoments, __pyx_k_particle_netMoments, sizeof(__pyx_k_particle_netMoments), 0, 0, 1, 1},
  {&__pyx_n_s_particle_nitsche, __pyx_k_particle_nitsche, sizeof(__pyx_k_particle_nitsche), 0, 0, 1, 1},
  {&__pyx_n_s_particle_penalty_constant, __pyx_k_particle_penalty_constant, sizeof(__pyx_k_particle_penalty_constant), 0, 0, 1, 1},
  {&__pyx_n_s_particle_signed_distance_normals, __pyx_k_particle_signed_distance_normals, sizeof(__pyx_k_particle_signed_distance_normals), 0, 0, 1, 1},
  {&__pyx_n_s_particle_signed_distances, __pyx_k_particle_signed_distances, sizeof(__pyx_k_particle_signed_distances), 0, 0, 1, 1},
  {&__pyx_n_s_particle_surfaceArea, __pyx_k_particle_surfaceArea, sizeof(__pyx_k_particle_surfaceArea), 0, 0, 1, 1},
  {&__pyx_n_s_particle_velocities, __pyx_k_particle_velocities, sizeof(__pyx_k_particle_velocities), 0, 0, 1, 1},
  {&__pyx_n_s_phi, __pyx_k_phi, sizeof(__pyx_k_phi), 0, 0, 1, 1},
  {&__pyx_n_s_phi_solid, __pyx_k_phi_solid, sizeof(__pyx_k_phi_solid), 0, 0, 1, 1},
  {&__pyx_n_s_q_cfl, __pyx_k_q_cfl, sizeof(__pyx_k_q_cfl), 0, 0, 1, 1},
  {&__pyx_n_s_q_dV, __pyx_k_q_dV, sizeof(__pyx_k_q_dV), 0, 0, 1, 1},
  {&__pyx_n_s_q_dV_last, __pyx_k_q_dV_last, sizeof(__pyx_k_q_dV_last), 0, 0, 1, 1},
  {&__pyx_n_s_q_divU, __pyx_k_q_divU, sizeof(__pyx_k_q_divU), 0, 0, 1, 1},
  {&__pyx_n_s_q_dragAlpha, __pyx_k_q_dragAlpha, sizeof(__pyx_k_q_dragAlpha), 0, 0, 1, 1},
  {&__pyx_n_s_q_dragBeta, __pyx_k_q_dragBeta, sizeof(__pyx_k_q_dragBeta), 0, 0, 1, 1},
  {&__pyx_n_s_q_dvos_dt, __pyx_k_q_dvos_dt, sizeof(__pyx_k_q_dvos_dt), 0, 0, 1, 1},
  {&__pyx_n_s_q_eddy_viscosity, __pyx_k_q_eddy_viscosity, sizeof(__pyx_k_q_eddy_viscosity), 0, 0, 1, 1},
  {&__pyx_n_s_q_grad_p, __pyx_k_q_grad_p, sizeof(__pyx_k_q_grad_p), 0, 0, 1, 1},
  {&__pyx_n_s_q_grad_u, __pyx_k_q_grad_u, sizeof(__pyx_k_q_grad_u), 0, 0, 1, 1},
  {&__pyx_n_s_q_grad_v, __pyx_k_q_grad_v, sizeof(__pyx_k_q_grad_v), 0, 0, 1, 1},
  {&__pyx_n_s_q_grad_w, __pyx_k_q_grad_w, sizeof(__pyx_k_q_grad_w), 0, 0, 1, 1},
  {&__pyx_n_s_q_mass_adv, __pyx_k_q_mass_adv, sizeof(__pyx_k_q_mass_adv), 0, 0, 1, 1},
  {&__pyx_n_s_q_mass_source, __pyx_k_q_mass_source, sizeof(__pyx_k_q_mass_source), 0, 0, 1, 1},
  {&__pyx_n_s_q_mom_u_acc, __pyx_k_q_mom_u_acc, sizeof(__pyx_k_q_mom_u_acc), 0, 0, 1, 1},
  {&__pyx_n_s_q_mom_u_acc_beta_bdf, __pyx_k_q_mom_u_acc_beta_bdf, sizeof(__pyx_k_q_mom_u_acc_beta_bdf), 0, 0, 1, 1},
  {&__pyx_n_s_q_mom_v_acc, __pyx_k_q_mom_v_acc, sizeof(__pyx_k_q_mom_v_acc), 0, 0, 1, 1},
  {&__pyx_n_s_q_mom_v_acc_beta_bdf, __pyx_k_q_mom_v_acc_beta_bdf, sizeof(__pyx_k_q_mom_v_acc_beta_bdf), 0, 0, 1, 1},
  {&__pyx_n_s_q_mom_w_acc, __pyx_k_q_mom_w_acc, sizeof(__pyx_k_q_mom_w_acc), 0, 0, 1, 1},
  {&__pyx_n_s_q_mom_w_acc_beta_bdf, __pyx_k_q_mom_w_acc_beta_bdf, sizeof(__pyx_k_q_mom_w_acc_beta_bdf), 0, 0, 1, 1},
  {&__pyx_n_s_q_nu, __pyx_k_q_nu, sizeof(__pyx_k_q_nu), 0, 0, 1, 1},
  {&__pyx_n_s_q_numDiff_u, __pyx_k_q_numDiff_u, sizeof(__pyx_k_q_numDiff_u), 0, 0, 1, 1},
  {&__pyx_n_s_q_numDiff_u_last, __pyx_k_q_numDiff_u_last, sizeof(__pyx_k_q_numDiff_u_last), 0, 0, 1, 1},
  {&__pyx_n_s_q_numDiff_v, __pyx_k_q_numDiff_v, sizeof(__pyx_k_q_numDiff_v), 0, 0, 1, 1},
  {&__pyx_n_s_q_numDiff_v_last, __pyx_k_q_numDiff_v_last, sizeof(__pyx_k_q_numDiff_v_last), 0, 0, 1, 1},
  {&__pyx_n_s_q_numDiff_w, __pyx_k_q_numDiff_w, sizeof(__pyx_k_q_numDiff_w), 0, 0, 1, 1},
  {&__pyx_n_s_q_numDiff_w_last, __pyx_k_q_numDiff_w_last, sizeof(__pyx_k_q_numDiff_w_last), 0, 0, 1, 1},
  {&__pyx_n_s_q_p, __pyx_k_q_p, sizeof(__pyx_k_q_p), 0, 0, 1, 1},
  {&__pyx_n_s_q_rho, __pyx_k_q_rho, sizeof(__pyx_k_q_rho), 0, 0, 1, 1},
  {&__pyx_n_s_q_turb_var_0, __pyx_k_q_turb_var_0, sizeof(__pyx_k_q_turb_var_0), 0, 0, 1, 1},
  {&__pyx_n_s_q_turb_var_1, __pyx_k_q_turb_var_1, sizeof(__pyx_k_q_turb_var_1), 0, 0, 1, 1},
  {&__pyx_n_s_q_turb_var_grad_0, __pyx_k_q_turb_var_grad_0, sizeof(__pyx_k_q_turb_var_grad_0), 0, 0, 1, 1},
  {&__pyx_n_s_q_velocity, __pyx_k_q_velocity, sizeof(__pyx_k_q_velocity), 0, 0, 1, 1},
  {&__pyx_n_s_q_velocity_sge, __pyx_k_q_velocity_sge, sizeof(__pyx_k_q_velocity_sge), 0, 0, 1, 1},
  {&__pyx_n_s_q_velocity_solid, __pyx_k_q_velocity_solid, sizeof(__pyx_k_q_velocity_solid), 0, 0, 1, 1},
  {&__pyx_n_s_q_vos, __pyx_k_q_vos, sizeof(__pyx_k_q_vos), 0, 0, 1, 1},
  {&__pyx_n_s_q_x, __pyx_k_q_x, sizeof(__pyx_k_q_x), 0, 0, 1, 1},
  {&__pyx_n_s_quantDOFs, __pyx_k_quantDOFs, sizeof(__pyx_k_quantDOFs), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_rhoAtCell, __pyx_k_rhoAtCell, sizeof(__pyx_k_rhoAtCell), 0, 0, 1, 1},
  {&__pyx_n_s_rho_0, __pyx_k_rho_0, sizeof(__pyx_k_rho_0), 0, 0, 1, 1},
  {&__pyx_n_s_rho_1, __pyx_k_rho_1, sizeof(__pyx_k_rho_1), 0, 0, 1, 1},
  {&__pyx_n_s_sdInfo_u_u_colind, __pyx_k_sdInfo_u_u_colind, sizeof(__pyx_k_sdInfo_u_u_colind), 0, 0, 1, 1},
  {&__pyx_n_s_sdInfo_u_u_rowptr, __pyx_k_sdInfo_u_u_rowptr, sizeof(__pyx_k_sdInfo_u_u_rowptr), 0, 0, 1, 1},
  {&__pyx_n_s_sdInfo_u_v_colind, __pyx_k_sdInfo_u_v_colind, sizeof(__pyx_k_sdInfo_u_v_colind), 0, 0, 1, 1},
  {&__pyx_n_s_sdInfo_u_v_rowptr, __pyx_k_sdInfo_u_v_rowptr, sizeof(__pyx_k_sdInfo_u_v_rowptr), 0, 0, 1, 1},
  {&__pyx_n_s_sdInfo_u_w_colind, __pyx_k_sdInfo_u_w_colind, sizeof(__pyx_k_sdInfo_u_w_colind), 0, 0, 1, 1},
  {&__pyx_n_s_sdInfo_u_w_rowptr, __pyx_k_sdInfo_u_w_rowptr, sizeof(__pyx_k_sdInfo_u_w_rowptr), 0, 0, 1, 1},
  {&__pyx_n_s_sdInfo_v_u_colind, __pyx_k_sdInfo_v_u_colind, sizeof(__pyx_k_sdInfo_v_u_colind), 0, 0, 1, 1},
  {&__pyx_n_s_sdInfo_v_u_rowptr, __pyx_k_sdInfo_v_u_rowptr, sizeof(__pyx_k_sdInfo_v_u_rowptr), 0, 0, 1, 1},
  {&__pyx_n_s_sdInfo_v_v_colind, __pyx_k_sdInfo_v_v_colind, sizeof(__pyx_k_sdInfo_v_v_colind), 0, 0, 1, 1},
  {&__pyx_n_s_sdInfo_v_v_rowptr, __pyx_k_sdInfo_v_v_rowptr, sizeof(__pyx_k_sdInfo_v_v_rowptr), 0, 0, 1, 1},
  {&__pyx_n_s_sdInfo_v_w_colind, __pyx_k_sdInfo_v_w_colind, sizeof(__pyx_k_sdInfo_v_w_colind), 0, 0, 1, 1},
  {&__pyx_n_s_sdInfo_v_w_rowptr, __pyx_k_sdInfo_v_w_rowptr, sizeof(__pyx_k_sdInfo_v_w_rowptr), 0, 0, 1, 1},
  {&__pyx_n_s_sdInfo_w_u_colind, __pyx_k_sdInfo_w_u_colind, sizeof(__pyx_k_sdInfo_w_u_colind), 0, 0, 1, 1},
  {&__pyx_n_s_sdInfo_w_u_rowptr, __pyx_k_sdInfo_w_u_rowptr, sizeof(__pyx_k_sdInfo_w_u_rowptr), 0, 0, 1, 1},
  {&__pyx_n_s_sdInfo_w_v_colind, __pyx_k_sdInfo_w_v_colind, sizeof(__pyx_k_sdInfo_w_v_colind), 0, 0, 1, 1},
  {&__pyx_n_s_sdInfo_w_v_rowptr, __pyx_k_sdInfo_w_v_rowptr, sizeof(__pyx_k_sdInfo_w_v_rowptr), 0, 0, 1, 1},
  {&__pyx_n_s_sdInfo_w_w_colind, __pyx_k_sdInfo_w_w_colind, sizeof(__pyx_k_sdInfo_w_w_colind), 0, 0, 1, 1},
  {&__pyx_n_s_sdInfo_w_w_rowptr, __pyx_k_sdInfo_w_w_rowptr, sizeof(__pyx_k_sdInfo_w_w_rowptr), 0, 0, 1, 1},
  {&__pyx_n_s_sigma, __pyx_k_sigma, sizeof(__pyx_k_sigma), 0, 0, 1, 1},
  {&__pyx_n_s_sigmaC, __pyx_k_sigmaC, sizeof(__pyx_k_sigmaC), 0, 0, 1, 1},
  {&__pyx_n_s_smagorinskyConstant, __pyx_k_smagorinskyConstant, sizeof(__pyx_k_smagorinskyConstant), 0, 0, 1, 1},
  {&__pyx_n_s_stride_p, __pyx_k_stride_p, sizeof(__pyx_k_stride_p), 0, 0, 1, 1},
  {&__pyx_n_s_stride_u, __pyx_k_stride_u, sizeof(__pyx_k_stride_u), 0, 0, 1, 1},
  {&__pyx_n_s_stride_v, __pyx_k_stride_v, sizeof(__pyx_k_stride_v), 0, 0, 1, 1},
  {&__pyx_n_s_stride_w, __pyx_k_stride_w, sizeof(__pyx_k_stride_w), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_turbulenceClosureModel, __pyx_k_turbulenceClosureModel, sizeof(__pyx_k_turbulenceClosureModel), 0, 0, 1, 1},
  {&__pyx_n_s_u_dof, __pyx_k_u_dof, sizeof(__pyx_k_u_dof), 0, 0, 1, 1},
  {&__pyx_n_s_u_dof_old, __pyx_k_u_dof_old, sizeof(__pyx_k_u_dof_old), 0, 0, 1, 1},
  {&__pyx_n_s_u_dof_old_old, __pyx_k_u_dof_old_old, sizeof(__pyx_k_u_dof_old_old), 0, 0, 1, 1},
  {&__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_k_unknown_dtype_code_in_numpy_pxd, sizeof(__pyx_k_unknown_dtype_code_in_numpy_pxd), 0, 1, 0, 0},
  {&__pyx_n_s_useMetrics, __pyx_k_useMetrics, sizeof(__pyx_k_useMetrics), 0, 0, 1, 1},
  {&__pyx_n_s_useRBLES, __pyx_k_useRBLES, sizeof(__pyx_k_useRBLES), 0, 0, 1, 1},
  {&__pyx_n_s_useVF, __pyx_k_useVF, sizeof(__pyx_k_useVF), 0, 0, 1, 1},
  {&__pyx_n_s_v_dof, __pyx_k_v_dof, sizeof(__pyx_k_v_dof), 0, 0, 1, 1},
  {&__pyx_n_s_v_dof_old, __pyx_k_v_dof_old, sizeof(__pyx_k_v_dof_old), 0, 0, 1, 1},
  {&__pyx_n_s_v_dof_old_old, __pyx_k_v_dof_old_old, sizeof(__pyx_k_v_dof_old_old), 0, 0, 1, 1},
  {&__pyx_n_s_vel_grad_test_ref, __pyx_k_vel_grad_test_ref, sizeof(__pyx_k_vel_grad_test_ref), 0, 0, 1, 1},
  {&__pyx_n_s_vel_grad_test_trace_ref, __pyx_k_vel_grad_test_trace_ref, sizeof(__pyx_k_vel_grad_test_trace_ref), 0, 0, 1, 1},
  {&__pyx_n_s_vel_grad_trial_ref, __pyx_k_vel_grad_trial_ref, sizeof(__pyx_k_vel_grad_trial_ref), 0, 0, 1, 1},
  {&__pyx_n_s_vel_grad_trial_trace_ref, __pyx_k_vel_grad_trial_trace_ref, sizeof(__pyx_k_vel_grad_trial_trace_ref), 0, 0, 1, 1},
  {&__pyx_n_s_vel_hess_trial_ref, __pyx_k_vel_hess_trial_ref, sizeof(__pyx_k_vel_hess_trial_ref), 0, 0, 1, 1},
  {&__pyx_n_s_vel_l2g, __pyx_k_vel_l2g, sizeof(__pyx_k_vel_l2g), 0, 0, 1, 1},
  {&__pyx_n_s_vel_test_ref, __pyx_k_vel_test_ref, sizeof(__pyx_k_vel_test_ref), 0, 0, 1, 1},
  {&__pyx_n_s_vel_test_trace_ref, __pyx_k_vel_test_trace_ref, sizeof(__pyx_k_vel_test_trace_ref), 0, 0, 1, 1},
  {&__pyx_n_s_vel_trial_ref, __pyx_k_vel_trial_ref, sizeof(__pyx_k_vel_trial_ref), 0, 0, 1, 1},
  {&__pyx_n_s_vel_trial_trace_ref, __pyx_k_vel_trial_trace_ref, sizeof(__pyx_k_vel_trial_trace_ref), 0, 0, 1, 1},
  {&__pyx_n_s_velocityAverage, __pyx_k_velocityAverage, sizeof(__pyx_k_velocityAverage), 0, 0, 1, 1},
  {&__pyx_n_s_vf, __pyx_k_vf, sizeof(__pyx_k_vf), 0, 0, 1, 1},
  {&__pyx_n_s_vos_dof, __pyx_k_vos_dof, sizeof(__pyx_k_vos_dof), 0, 0, 1, 1},
  {&__pyx_n_s_w_dof, __pyx_k_w_dof, sizeof(__pyx_k_w_dof), 0, 0, 1, 1},
  {&__pyx_n_s_w_dof_old, __pyx_k_w_dof_old, sizeof(__pyx_k_w_dof_old), 0, 0, 1, 1},
  {&__pyx_n_s_w_dof_old_old, __pyx_k_w_dof_old_old, sizeof(__pyx_k_w_dof_old_old), 0, 0, 1, 1},
  {&__pyx_n_s_wettedAreas, __pyx_k_wettedAreas, sizeof(__pyx_k_wettedAreas), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(1, 218, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(1, 231, __pyx_L1_error)
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(1, 799, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(1, 989, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":218
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_C_contiguous); if (unlikely(!__pyx_tuple_)) __PYX_ERR(1, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":222
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_Fortran_contiguou); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(1, 222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":259
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(1, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":799
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(1, 799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":803
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(1, 803, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":823
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor_2); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(1, 823, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":989
 *         _import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(1, 989, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":995
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(1, 995, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1001
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(1, 1001, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initcRANS3PF(void); /*proto*/
PyMODINIT_FUNC initcRANS3PF(void)
#else
PyMODINIT_FUNC PyInit_cRANS3PF(void); /*proto*/
PyMODINIT_FUNC PyInit_cRANS3PF(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_cRANS3PF(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("cRANS3PF", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_mprans__cRANS3PF) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "mprans.cRANS3PF")) {
      if (unlikely(PyDict_SetItemString(modules, "mprans.cRANS3PF", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_6mprans_8cRANS3PF_RANS3PF) < 0) __PYX_ERR(0, 893, __pyx_L1_error)
  __pyx_type_6mprans_8cRANS3PF_RANS3PF.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "RANS3PF", (PyObject *)&__pyx_type_6mprans_8cRANS3PF_RANS3PF) < 0) __PYX_ERR(0, 893, __pyx_L1_error)
  __pyx_ptype_6mprans_8cRANS3PF_RANS3PF = &__pyx_type_6mprans_8cRANS3PF_RANS3PF;
  if (PyType_Ready(&__pyx_type_6mprans_8cRANS3PF_RANS3PF2D) < 0) __PYX_ERR(0, 3434, __pyx_L1_error)
  __pyx_type_6mprans_8cRANS3PF_RANS3PF2D.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "RANS3PF2D", (PyObject *)&__pyx_type_6mprans_8cRANS3PF_RANS3PF2D) < 0) __PYX_ERR(0, 3434, __pyx_L1_error)
  __pyx_ptype_6mprans_8cRANS3PF_RANS3PF2D = &__pyx_type_6mprans_8cRANS3PF_RANS3PF2D;
  /*--- Type import code ---*/
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
  #if CYTHON_COMPILING_IN_PYPY
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) __PYX_ERR(2, 9, __pyx_L1_error)
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType("numpy", "dtype", sizeof(PyArray_Descr), 0); if (unlikely(!__pyx_ptype_5numpy_dtype)) __PYX_ERR(1, 155, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType("numpy", "flatiter", sizeof(PyArrayIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_flatiter)) __PYX_ERR(1, 168, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType("numpy", "broadcast", sizeof(PyArrayMultiIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_broadcast)) __PYX_ERR(1, 172, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType("numpy", "ndarray", sizeof(PyArrayObject), 0); if (unlikely(!__pyx_ptype_5numpy_ndarray)) __PYX_ERR(1, 181, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType("numpy", "ufunc", sizeof(PyUFuncObject), 0); if (unlikely(!__pyx_ptype_5numpy_ufunc)) __PYX_ERR(1, 861, __pyx_L1_error)
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "mprans/cRANS3PF.pyx":1
 * import numpy             # <<<<<<<<<<<<<<
 * cimport numpy
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_numpy, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mprans/cRANS3PF.pyx":5085
 *                                                          < double * > ebqe_dynamic_viscosity_as_function.data)
 * 
 *     def calculateVelocityAverage(self,             # <<<<<<<<<<<<<<
 *                                  int nExteriorElementBoundaries_global,
 *                                  numpy.ndarray exteriorElementBoundariesArray,
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":997
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init mprans.cRANS3PF", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init mprans.cRANS3PF");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* ArgTypeTest */
static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    return (*((__Pyx_PyCFunctionFast)meth)) (self, args, nargs, NULL);
}
#endif  // CYTHON_FAST_PYCCALL

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
#include "frameobject.h"
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = PyThreadState_GET();
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = f->f_localsplus;
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif  // CPython < 3.6
#endif  // CYTHON_FAST_PYCALL

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyObjectCallNoArg */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* RaiseTooManyValuesToUnpack */
    static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
    static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
    static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = PyThreadState_GET();
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(exc_type == PyExc_StopIteration) || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
    static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* ExtTypeTest */
    static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* GetBuiltinName */
    static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyErrFetchRestore */
    #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
    #if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* RaiseNoneIterError */
      static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* SaveResetException */
      #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* PyErrExceptionMatches */
      #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    return PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetException */
      #if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
#endif
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* Import */
        static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* CodeObjectCache */
        static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
        #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
        #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* Declarations */
        #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
        #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = 1.0 / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = 1.0 / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0, -1);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
        #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
        #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = 1.0 / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = 1.0 / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0, -1);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value) {
    const enum NPY_TYPES neg_one = (enum NPY_TYPES) -1, const_zero = (enum NPY_TYPES) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum NPY_TYPES) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum NPY_TYPES) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NPY_TYPES) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum NPY_TYPES),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
        static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
        static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CheckBinaryVersion */
        static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* ModuleImport */
        #ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

/* TypeImport */
        #ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

/* InitStrings */
        static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
  #else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
  #endif
#else
  res = PyNumber_Int(x);
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
