/* Generated by Cython 0.25.2 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_25_2"
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x03030000 || (PY_MAJOR_VERSION == 2 && PY_VERSION_HEX >= 0x02070000)
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_FASTCALL
  #define METH_FASTCALL 0x80
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject **args,
                                              Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__mprans__cTIM
#define __PYX_HAVE_API__mprans__cTIM
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include "numpy/arrayobject.h"
#include "numpy/ufuncobject.h"
#include "TIM.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER) && defined (_M_X64)
    #define __Pyx_sst_abs(value) _abs64(value)
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "proteus/mprans/cTIM.pyx",
  "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd",
  "darwin/lib/python2.7/site-packages/Cython/Includes/cpython/type.pxd",
};

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":725
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":726
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":727
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":728
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":732
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":733
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":734
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":735
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":739
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":740
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":749
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":750
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":751
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":753
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":754
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":755
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":757
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":758
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":760
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":761
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":762
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);


/*--- Type declarations ---*/
struct __pyx_obj_6mprans_4cTIM_cTIM_base;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":764
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":765
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":766
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":768
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;

/* "mprans/cTIM.pyx":317
 *                        int CompKernelFlag)
 * 
 * cdef class cTIM_base:             # <<<<<<<<<<<<<<
 *    cdef TIM_base* thisptr
 *    def __cinit__(self,
 */
struct __pyx_obj_6mprans_4cTIM_cTIM_base {
  PyObject_HEAD
  proteus::TIM_base *thisptr;
};


/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* ArgTypeTest.proto */
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact);

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = PyThreadState_GET();
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            PyObject* args = PyTuple_Pack(1, key);
            if (likely(args))
                PyErr_SetObject(PyExc_KeyError, args);
            Py_XDECREF(args);
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#else
    #define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#endif

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CStringEquals.proto */
static CYTHON_INLINE int __Pyx_StrEq(const char *, const char *);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* PyIdentifierFromString.proto */
#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

/* ModuleImport.proto */
static PyObject *__Pyx_ImportModule(const char *name);

/* TypeImport.proto */
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;
static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *, char *, char *, int *); /*proto*/

/* Module declarations from 'mprans.cTIM' */
static PyTypeObject *__pyx_ptype_6mprans_4cTIM_cTIM_base = 0;
#define __Pyx_MODULE_NAME "mprans.cTIM"
int __pyx_module_is_main_mprans__cTIM = 0;

/* Implementation of 'mprans.cTIM' */
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_ImportError;
static const char __pyx_k_Cx[] = "Cx";
static const char __pyx_k_Cy[] = "Cy";
static const char __pyx_k_Cz[] = "Cz";
static const char __pyx_k_ML[] = "ML";
static const char __pyx_k_cE[] = "cE";
static const char __pyx_k_cK[] = "cK";
static const char __pyx_k_dt[] = "dt";
static const char __pyx_k_uL[] = "uL";
static const char __pyx_k_uR[] = "uR";
static const char __pyx_k_CTx[] = "CTx";
static const char __pyx_k_CTy[] = "CTy";
static const char __pyx_k_CTz[] = "CTz";
static const char __pyx_k_NNZ[] = "NNZ";
static const char __pyx_k__10[] = "*";
static const char __pyx_k_cfl[] = "cfl";
static const char __pyx_k_q_m[] = "q_m";
static const char __pyx_k_q_u[] = "q_u";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_q_dV[] = "q_dV";
static const char __pyx_k_solH[] = "solH";
static const char __pyx_k_soln[] = "soln";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_u_dof[] = "u_dof";
static const char __pyx_k_u_l2g[] = "u_l2g";
static const char __pyx_k_dS_ref[] = "dS_ref";
static const char __pyx_k_dV_ref[] = "dV_ref";
static const char __pyx_k_ebqe_u[] = "ebqe_u";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_epsFact[] = "epsFact";
static const char __pyx_k_numDOFs[] = "numDOFs";
static const char __pyx_k_proteus[] = "proteus";
static const char __pyx_k_sc_uref[] = "sc_uref";
static const char __pyx_k_alphaBDF[] = "alphaBDF";
static const char __pyx_k_ebqe_phi[] = "ebqe_phi";
static const char __pyx_k_max_u_bc[] = "max_u_bc";
static const char __pyx_k_mesh_dof[] = "mesh_dof";
static const char __pyx_k_mesh_l2g[] = "mesh_l2g";
static const char __pyx_k_min_u_bc[] = "min_u_bc";
static const char __pyx_k_nSpaceIn[] = "nSpaceIn";
static const char __pyx_k_offset_u[] = "offset_u";
static const char __pyx_k_sc_alpha[] = "sc_alpha";
static const char __pyx_k_stride_u[] = "stride_u";
static const char __pyx_k_velocity[] = "velocity";
static const char __pyx_k_ebqe_flux[] = "ebqe_flux";
static const char __pyx_k_q_dV_last[] = "q_dV_last";
static const char __pyx_k_quantDOFs[] = "quantDOFs";
static const char __pyx_k_u_dof_old[] = "u_dof_old";
static const char __pyx_k_MassMatrix[] = "MassMatrix";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_normal_ref[] = "normal_ref";
static const char __pyx_k_q_porosity[] = "q_porosity";
static const char __pyx_k_u_test_ref[] = "u_test_ref";
static const char __pyx_k_useMetrics[] = "useMetrics";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_q_m_betaBDF[] = "q_m_betaBDF";
static const char __pyx_k_q_numDiff_u[] = "q_numDiff_u";
static const char __pyx_k_u_trial_ref[] = "u_trial_ref";
static const char __pyx_k_ENTROPY_TYPE[] = "ENTROPY_TYPE";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_porosity_dof[] = "porosity_dof";
static const char __pyx_k_MOVING_DOMAIN[] = "MOVING_DOMAIN";
static const char __pyx_k_ebqe_bc_u_ext[] = "ebqe_bc_u_ext";
static const char __pyx_k_CompKernelFlag[] = "CompKernelFlag";
static const char __pyx_k_edge_based_cfl[] = "edge_based_cfl";
static const char __pyx_k_globalJacobian[] = "globalJacobian";
static const char __pyx_k_globalResidual[] = "globalResidual";
static const char __pyx_k_mesh_trial_ref[] = "mesh_trial_ref";
static const char __pyx_k_boundaryJac_ref[] = "boundaryJac_ref";
static const char __pyx_k_elementDiameter[] = "elementDiameter";
static const char __pyx_k_isDOFBoundary_u[] = "isDOFBoundary_u";
static const char __pyx_k_u_grad_test_ref[] = "u_grad_test_ref";
static const char __pyx_k_isFluxBoundary_u[] = "isFluxBoundary_u";
static const char __pyx_k_limited_solution[] = "limited_solution";
static const char __pyx_k_nElements_global[] = "nElements_global";
static const char __pyx_k_q_numDiff_u_last[] = "q_numDiff_u_last";
static const char __pyx_k_u_grad_trial_ref[] = "u_grad_trial_ref";
static const char __pyx_k_u_test_trace_ref[] = "u_test_trace_ref";
static const char __pyx_k_OneLevelTransport[] = "OneLevelTransport";
static const char __pyx_k_csrRowIndeces_u_u[] = "csrRowIndeces_u_u";
static const char __pyx_k_degree_polynomial[] = "degree_polynomial";
static const char __pyx_k_ebqe_porosity_ext[] = "ebqe_porosity_ext";
static const char __pyx_k_ebqe_velocity_ext[] = "ebqe_velocity_ext";
static const char __pyx_k_mesh_velocity_dof[] = "mesh_velocity_dof";
static const char __pyx_k_proteus_Transport[] = "proteus.Transport";
static const char __pyx_k_u_trial_trace_ref[] = "u_trial_trace_ref";
static const char __pyx_k_LUMPED_MASS_MATRIX[] = "LUMPED_MASS_MATRIX";
static const char __pyx_k_STABILIZATION_TYPE[] = "STABILIZATION_TYPE";
static const char __pyx_k_ebqe_bc_flux_u_ext[] = "ebqe_bc_flux_u_ext";
static const char __pyx_k_lag_shockCapturing[] = "lag_shockCapturing";
static const char __pyx_k_low_order_solution[] = "low_order_solution";
static const char __pyx_k_lumped_mass_matrix[] = "lumped_mass_matrix";
static const char __pyx_k_mesh_grad_trial_ref[] = "mesh_grad_trial_ref";
static const char __pyx_k_nDOF_test_elementIn[] = "nDOF_test_elementIn";
static const char __pyx_k_csrColumnOffsets_u_u[] = "csrColumnOffsets_u_u";
static const char __pyx_k_dt_times_dH_minus_dL[] = "dt_times_dH_minus_dL";
static const char __pyx_k_getCSRrepresentation[] = "getCSRrepresentation";
static const char __pyx_k_mesh_trial_trace_ref[] = "mesh_trial_trace_ref";
static const char __pyx_k_nDOF_trial_elementIn[] = "nDOF_trial_elementIn";
static const char __pyx_k_u_grad_test_trace_ref[] = "u_grad_test_trace_ref";
static const char __pyx_k_csrRowIndeces_DofLoops[] = "csrRowIndeces_DofLoops";
static const char __pyx_k_u_grad_trial_trace_ref[] = "u_grad_trial_trace_ref";
static const char __pyx_k_csrColumnOffsets_eb_u_u[] = "csrColumnOffsets_eb_u_u";
static const char __pyx_k_csrRowIndeces_CellLoops[] = "csrRowIndeces_CellLoops";
static const char __pyx_k_shockCapturingDiffusion[] = "shockCapturingDiffusion";
static const char __pyx_k_csrColumnOffsets_DofLoops[] = "csrColumnOffsets_DofLoops";
static const char __pyx_k_mesh_grad_trial_trace_ref[] = "mesh_grad_trial_trace_ref";
static const char __pyx_k_nDOF_mesh_trial_elementIn[] = "nDOF_mesh_trial_elementIn";
static const char __pyx_k_csrColumnOffsets_CellLoops[] = "csrColumnOffsets_CellLoops";
static const char __pyx_k_nQuadraturePoints_elementIn[] = "nQuadraturePoints_elementIn";
static const char __pyx_k_ndarray_is_not_C_contiguous[] = "ndarray is not C contiguous";
static const char __pyx_k_elementBoundaryElementsArray[] = "elementBoundaryElementsArray";
static const char __pyx_k_csrColumnOffsets_eb_CellLoops[] = "csrColumnOffsets_eb_CellLoops";
static const char __pyx_k_exteriorElementBoundariesArray[] = "exteriorElementBoundariesArray";
static const char __pyx_k_numpy_core_multiarray_failed_to[] = "numpy.core.multiarray failed to import";
static const char __pyx_k_unknown_dtype_code_in_numpy_pxd[] = "unknown dtype code in numpy.pxd (%d)";
static const char __pyx_k_Format_string_allocated_too_shor[] = "Format string allocated too short, see comment in numpy.pxd";
static const char __pyx_k_Non_native_byte_order_not_suppor[] = "Non-native byte order not supported";
static const char __pyx_k_elementBoundaryLocalElementBound[] = "elementBoundaryLocalElementBoundariesArray";
static const char __pyx_k_nExteriorElementBoundaries_globa[] = "nExteriorElementBoundaries_global";
static const char __pyx_k_nQuadraturePoints_elementBoundar[] = "nQuadraturePoints_elementBoundaryIn";
static const char __pyx_k_ndarray_is_not_Fortran_contiguou[] = "ndarray is not Fortran contiguous";
static const char __pyx_k_numpy_core_umath_failed_to_impor[] = "numpy.core.umath failed to import";
static const char __pyx_k_Format_string_allocated_too_shor_2[] = "Format string allocated too short.";
static PyObject *__pyx_n_s_CTx;
static PyObject *__pyx_n_s_CTy;
static PyObject *__pyx_n_s_CTz;
static PyObject *__pyx_n_s_CompKernelFlag;
static PyObject *__pyx_n_s_Cx;
static PyObject *__pyx_n_s_Cy;
static PyObject *__pyx_n_s_Cz;
static PyObject *__pyx_n_s_ENTROPY_TYPE;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor_2;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_n_s_LUMPED_MASS_MATRIX;
static PyObject *__pyx_n_s_ML;
static PyObject *__pyx_n_s_MOVING_DOMAIN;
static PyObject *__pyx_n_s_MassMatrix;
static PyObject *__pyx_n_s_NNZ;
static PyObject *__pyx_kp_u_Non_native_byte_order_not_suppor;
static PyObject *__pyx_n_s_OneLevelTransport;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_n_s_STABILIZATION_TYPE;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s__10;
static PyObject *__pyx_n_s_alphaBDF;
static PyObject *__pyx_n_s_boundaryJac_ref;
static PyObject *__pyx_n_s_cE;
static PyObject *__pyx_n_s_cK;
static PyObject *__pyx_n_s_cfl;
static PyObject *__pyx_n_s_csrColumnOffsets_CellLoops;
static PyObject *__pyx_n_s_csrColumnOffsets_DofLoops;
static PyObject *__pyx_n_s_csrColumnOffsets_eb_CellLoops;
static PyObject *__pyx_n_s_csrColumnOffsets_eb_u_u;
static PyObject *__pyx_n_s_csrColumnOffsets_u_u;
static PyObject *__pyx_n_s_csrRowIndeces_CellLoops;
static PyObject *__pyx_n_s_csrRowIndeces_DofLoops;
static PyObject *__pyx_n_s_csrRowIndeces_u_u;
static PyObject *__pyx_n_s_dS_ref;
static PyObject *__pyx_n_s_dV_ref;
static PyObject *__pyx_n_s_degree_polynomial;
static PyObject *__pyx_n_s_dt;
static PyObject *__pyx_n_s_dt_times_dH_minus_dL;
static PyObject *__pyx_n_s_ebqe_bc_flux_u_ext;
static PyObject *__pyx_n_s_ebqe_bc_u_ext;
static PyObject *__pyx_n_s_ebqe_flux;
static PyObject *__pyx_n_s_ebqe_phi;
static PyObject *__pyx_n_s_ebqe_porosity_ext;
static PyObject *__pyx_n_s_ebqe_u;
static PyObject *__pyx_n_s_ebqe_velocity_ext;
static PyObject *__pyx_n_s_edge_based_cfl;
static PyObject *__pyx_n_s_elementBoundaryElementsArray;
static PyObject *__pyx_n_s_elementBoundaryLocalElementBound;
static PyObject *__pyx_n_s_elementDiameter;
static PyObject *__pyx_n_s_epsFact;
static PyObject *__pyx_n_s_exteriorElementBoundariesArray;
static PyObject *__pyx_n_s_getCSRrepresentation;
static PyObject *__pyx_n_s_globalJacobian;
static PyObject *__pyx_n_s_globalResidual;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_isDOFBoundary_u;
static PyObject *__pyx_n_s_isFluxBoundary_u;
static PyObject *__pyx_n_s_lag_shockCapturing;
static PyObject *__pyx_n_s_limited_solution;
static PyObject *__pyx_n_s_low_order_solution;
static PyObject *__pyx_n_s_lumped_mass_matrix;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_max_u_bc;
static PyObject *__pyx_n_s_mesh_dof;
static PyObject *__pyx_n_s_mesh_grad_trial_ref;
static PyObject *__pyx_n_s_mesh_grad_trial_trace_ref;
static PyObject *__pyx_n_s_mesh_l2g;
static PyObject *__pyx_n_s_mesh_trial_ref;
static PyObject *__pyx_n_s_mesh_trial_trace_ref;
static PyObject *__pyx_n_s_mesh_velocity_dof;
static PyObject *__pyx_n_s_min_u_bc;
static PyObject *__pyx_n_s_nDOF_mesh_trial_elementIn;
static PyObject *__pyx_n_s_nDOF_test_elementIn;
static PyObject *__pyx_n_s_nDOF_trial_elementIn;
static PyObject *__pyx_n_s_nElements_global;
static PyObject *__pyx_n_s_nExteriorElementBoundaries_globa;
static PyObject *__pyx_n_s_nQuadraturePoints_elementBoundar;
static PyObject *__pyx_n_s_nQuadraturePoints_elementIn;
static PyObject *__pyx_n_s_nSpaceIn;
static PyObject *__pyx_kp_u_ndarray_is_not_C_contiguous;
static PyObject *__pyx_kp_u_ndarray_is_not_Fortran_contiguou;
static PyObject *__pyx_n_s_normal_ref;
static PyObject *__pyx_n_s_numDOFs;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_kp_s_numpy_core_multiarray_failed_to;
static PyObject *__pyx_kp_s_numpy_core_umath_failed_to_impor;
static PyObject *__pyx_n_s_offset_u;
static PyObject *__pyx_n_s_porosity_dof;
static PyObject *__pyx_n_s_proteus;
static PyObject *__pyx_n_s_proteus_Transport;
static PyObject *__pyx_n_s_q_dV;
static PyObject *__pyx_n_s_q_dV_last;
static PyObject *__pyx_n_s_q_m;
static PyObject *__pyx_n_s_q_m_betaBDF;
static PyObject *__pyx_n_s_q_numDiff_u;
static PyObject *__pyx_n_s_q_numDiff_u_last;
static PyObject *__pyx_n_s_q_porosity;
static PyObject *__pyx_n_s_q_u;
static PyObject *__pyx_n_s_quantDOFs;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_sc_alpha;
static PyObject *__pyx_n_s_sc_uref;
static PyObject *__pyx_n_s_shockCapturingDiffusion;
static PyObject *__pyx_n_s_solH;
static PyObject *__pyx_n_s_soln;
static PyObject *__pyx_n_s_stride_u;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_uL;
static PyObject *__pyx_n_s_uR;
static PyObject *__pyx_n_s_u_dof;
static PyObject *__pyx_n_s_u_dof_old;
static PyObject *__pyx_n_s_u_grad_test_ref;
static PyObject *__pyx_n_s_u_grad_test_trace_ref;
static PyObject *__pyx_n_s_u_grad_trial_ref;
static PyObject *__pyx_n_s_u_grad_trial_trace_ref;
static PyObject *__pyx_n_s_u_l2g;
static PyObject *__pyx_n_s_u_test_ref;
static PyObject *__pyx_n_s_u_test_trace_ref;
static PyObject *__pyx_n_s_u_trial_ref;
static PyObject *__pyx_n_s_u_trial_trace_ref;
static PyObject *__pyx_kp_u_unknown_dtype_code_in_numpy_pxd;
static PyObject *__pyx_n_s_useMetrics;
static PyObject *__pyx_n_s_velocity;
static int __pyx_pf_6mprans_4cTIM_9cTIM_base___cinit__(struct __pyx_obj_6mprans_4cTIM_cTIM_base *__pyx_v_self, int __pyx_v_nSpaceIn, int __pyx_v_nQuadraturePoints_elementIn, int __pyx_v_nDOF_mesh_trial_elementIn, int __pyx_v_nDOF_trial_elementIn, int __pyx_v_nDOF_test_elementIn, int __pyx_v_nQuadraturePoints_elementBoundaryIn, int __pyx_v_CompKernelFlag); /* proto */
static void __pyx_pf_6mprans_4cTIM_9cTIM_base_2__dealloc__(struct __pyx_obj_6mprans_4cTIM_cTIM_base *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6mprans_4cTIM_9cTIM_base_4FCTStep(struct __pyx_obj_6mprans_4cTIM_cTIM_base *__pyx_v_self, int __pyx_v_NNZ, int __pyx_v_numDOFs, PyArrayObject *__pyx_v_lumped_mass_matrix, PyArrayObject *__pyx_v_soln, PyArrayObject *__pyx_v_solH, PyArrayObject *__pyx_v_low_order_solution, PyArrayObject *__pyx_v_limited_solution, PyArrayObject *__pyx_v_csrRowIndeces_DofLoops, PyArrayObject *__pyx_v_csrColumnOffsets_DofLoops, PyArrayObject *__pyx_v_MassMatrix, PyArrayObject *__pyx_v_dt_times_dH_minus_dL, PyArrayObject *__pyx_v_min_u_bc, PyArrayObject *__pyx_v_max_u_bc, int __pyx_v_LUMPED_MASS_MATRIX); /* proto */
static PyObject *__pyx_pf_6mprans_4cTIM_9cTIM_base_6calculateResidual(struct __pyx_obj_6mprans_4cTIM_cTIM_base *__pyx_v_self, double __pyx_v_dt, PyArrayObject *__pyx_v_mesh_trial_ref, PyArrayObject *__pyx_v_mesh_grad_trial_ref, PyArrayObject *__pyx_v_mesh_dof, PyArrayObject *__pyx_v_mesh_velocity_dof, double __pyx_v_MOVING_DOMAIN, PyArrayObject *__pyx_v_mesh_l2g, PyArrayObject *__pyx_v_dV_ref, PyArrayObject *__pyx_v_u_trial_ref, PyArrayObject *__pyx_v_u_grad_trial_ref, PyArrayObject *__pyx_v_u_test_ref, PyArrayObject *__pyx_v_u_grad_test_ref, PyArrayObject *__pyx_v_mesh_trial_trace_ref, PyArrayObject *__pyx_v_mesh_grad_trial_trace_ref, PyArrayObject *__pyx_v_dS_ref, PyArrayObject *__pyx_v_u_trial_trace_ref, PyArrayObject *__pyx_v_u_grad_trial_trace_ref, PyArrayObject *__pyx_v_u_test_trace_ref, PyArrayObject *__pyx_v_u_grad_test_trace_ref, PyArrayObject *__pyx_v_normal_ref, PyArrayObject *__pyx_v_boundaryJac_ref, int __pyx_v_nElements_global, double __pyx_v_useMetrics, double __pyx_v_alphaBDF, int __pyx_v_lag_shockCapturing, double __pyx_v_shockCapturingDiffusion, double __pyx_v_sc_uref, double __pyx_v_sc_alpha, PyArrayObject *__pyx_v_q_porosity, PyArrayObject *__pyx_v_porosity_dof, PyArrayObject *__pyx_v_u_l2g, PyArrayObject *__pyx_v_elementDiameter, int __pyx_v_degree_polynomial, PyArrayObject *__pyx_v_u_dof, PyArrayObject *__pyx_v_u_dof_old, PyArrayObject *__pyx_v_velocity, PyArrayObject *__pyx_v_q_m, PyArrayObject *__pyx_v_q_u, PyArrayObject *__pyx_v_q_m_betaBDF, PyArrayObject *__pyx_v_q_dV, PyArrayObject *__pyx_v_q_dV_last, PyArrayObject *__pyx_v_cfl, PyArrayObject *__pyx_v_edge_based_cfl, PyArrayObject *__pyx_v_q_numDiff_u, PyArrayObject *__pyx_v_q_numDiff_u_last, int __pyx_v_offset_u, int __pyx_v_stride_u, PyArrayObject *__pyx_v_globalResidual, int __pyx_v_nExteriorElementBoundaries_global, PyArrayObject *__pyx_v_exteriorElementBoundariesArray, PyArrayObject *__pyx_v_elementBoundaryElementsArray, PyArrayObject *__pyx_v_elementBoundaryLocalElementBoundariesArray, PyArrayObject *__pyx_v_ebqe_velocity_ext, PyArrayObject *__pyx_v_ebqe_porosity_ext, PyArrayObject *__pyx_v_isDOFBoundary_u, PyArrayObject *__pyx_v_ebqe_bc_u_ext, PyArrayObject *__pyx_v_isFluxBoundary_u, PyArrayObject *__pyx_v_ebqe_bc_flux_u_ext, PyArrayObject *__pyx_v_ebqe_phi, double __pyx_v_epsFact, PyArrayObject *__pyx_v_ebqe_u, PyArrayObject *__pyx_v_ebqe_flux, double __pyx_v_cE, double __pyx_v_cK, double __pyx_v_uL, double __pyx_v_uR, int __pyx_v_numDOFs, int __pyx_v_NNZ, PyArrayObject *__pyx_v_csrRowIndeces_DofLoops, PyArrayObject *__pyx_v_csrColumnOffsets_DofLoops, PyArrayObject *__pyx_v_csrRowIndeces_CellLoops, PyArrayObject *__pyx_v_csrColumnOffsets_CellLoops, PyArrayObject *__pyx_v_csrColumnOffsets_eb_CellLoops, PyArrayObject *__pyx_v_Cx, PyArrayObject *__pyx_v_Cy, PyArrayObject *__pyx_v_Cz, PyArrayObject *__pyx_v_CTx, PyArrayObject *__pyx_v_CTy, PyArrayObject *__pyx_v_CTz, PyArrayObject *__pyx_v_ML, int __pyx_v_LUMPED_MASS_MATRIX, int __pyx_v_STABILIZATION_TYPE, int __pyx_v_ENTROPY_TYPE, PyArrayObject *__pyx_v_low_order_solution, PyArrayObject *__pyx_v_dt_times_dH_minus_dL, PyArrayObject *__pyx_v_min_u_bc, PyArrayObject *__pyx_v_max_u_bc, PyArrayObject *__pyx_v_quantDOFs); /* proto */
static PyObject *__pyx_pf_6mprans_4cTIM_9cTIM_base_8calculateResidual_entropy_viscosity(struct __pyx_obj_6mprans_4cTIM_cTIM_base *__pyx_v_self, double __pyx_v_dt, PyArrayObject *__pyx_v_mesh_trial_ref, PyArrayObject *__pyx_v_mesh_grad_trial_ref, PyArrayObject *__pyx_v_mesh_dof, PyArrayObject *__pyx_v_mesh_velocity_dof, double __pyx_v_MOVING_DOMAIN, PyArrayObject *__pyx_v_mesh_l2g, PyArrayObject *__pyx_v_dV_ref, PyArrayObject *__pyx_v_u_trial_ref, PyArrayObject *__pyx_v_u_grad_trial_ref, PyArrayObject *__pyx_v_u_test_ref, PyArrayObject *__pyx_v_u_grad_test_ref, PyArrayObject *__pyx_v_mesh_trial_trace_ref, PyArrayObject *__pyx_v_mesh_grad_trial_trace_ref, PyArrayObject *__pyx_v_dS_ref, PyArrayObject *__pyx_v_u_trial_trace_ref, PyArrayObject *__pyx_v_u_grad_trial_trace_ref, PyArrayObject *__pyx_v_u_test_trace_ref, PyArrayObject *__pyx_v_u_grad_test_trace_ref, PyArrayObject *__pyx_v_normal_ref, PyArrayObject *__pyx_v_boundaryJac_ref, int __pyx_v_nElements_global, double __pyx_v_useMetrics, double __pyx_v_alphaBDF, int __pyx_v_lag_shockCapturing, double __pyx_v_shockCapturingDiffusion, double __pyx_v_sc_uref, double __pyx_v_sc_alpha, PyArrayObject *__pyx_v_q_porosity, PyArrayObject *__pyx_v_porosity_dof, PyArrayObject *__pyx_v_u_l2g, PyArrayObject *__pyx_v_elementDiameter, int __pyx_v_degree_polynomial, PyArrayObject *__pyx_v_u_dof, PyArrayObject *__pyx_v_u_dof_old, PyArrayObject *__pyx_v_velocity, PyArrayObject *__pyx_v_q_m, PyArrayObject *__pyx_v_q_u, PyArrayObject *__pyx_v_q_m_betaBDF, PyArrayObject *__pyx_v_q_dV, PyArrayObject *__pyx_v_q_dV_last, PyArrayObject *__pyx_v_cfl, PyArrayObject *__pyx_v_edge_based_cfl, PyArrayObject *__pyx_v_q_numDiff_u, PyArrayObject *__pyx_v_q_numDiff_u_last, int __pyx_v_offset_u, int __pyx_v_stride_u, PyArrayObject *__pyx_v_globalResidual, int __pyx_v_nExteriorElementBoundaries_global, PyArrayObject *__pyx_v_exteriorElementBoundariesArray, PyArrayObject *__pyx_v_elementBoundaryElementsArray, PyArrayObject *__pyx_v_elementBoundaryLocalElementBoundariesArray, PyArrayObject *__pyx_v_ebqe_velocity_ext, PyArrayObject *__pyx_v_ebqe_porosity_ext, PyArrayObject *__pyx_v_isDOFBoundary_u, PyArrayObject *__pyx_v_ebqe_bc_u_ext, PyArrayObject *__pyx_v_isFluxBoundary_u, PyArrayObject *__pyx_v_ebqe_bc_flux_u_ext, PyArrayObject *__pyx_v_ebqe_phi, double __pyx_v_epsFact, PyArrayObject *__pyx_v_ebqe_u, PyArrayObject *__pyx_v_ebqe_flux, double __pyx_v_cE, double __pyx_v_cK, double __pyx_v_uL, double __pyx_v_uR, int __pyx_v_numDOFs, int __pyx_v_NNZ, PyArrayObject *__pyx_v_csrRowIndeces_DofLoops, PyArrayObject *__pyx_v_csrColumnOffsets_DofLoops, PyArrayObject *__pyx_v_csrRowIndeces_CellLoops, PyArrayObject *__pyx_v_csrColumnOffsets_CellLoops, PyArrayObject *__pyx_v_csrColumnOffsets_eb_CellLoops, PyArrayObject *__pyx_v_Cx, PyArrayObject *__pyx_v_Cy, PyArrayObject *__pyx_v_Cz, PyArrayObject *__pyx_v_CTx, PyArrayObject *__pyx_v_CTy, PyArrayObject *__pyx_v_CTz, PyArrayObject *__pyx_v_ML, int __pyx_v_LUMPED_MASS_MATRIX, int __pyx_v_STABILIZATION_TYPE, int __pyx_v_ENTROPY_TYPE, PyArrayObject *__pyx_v_low_order_solution, PyArrayObject *__pyx_v_dt_times_dH_minus_dL, PyArrayObject *__pyx_v_min_u_bc, PyArrayObject *__pyx_v_max_u_bc, PyArrayObject *__pyx_v_quantDOFs); /* proto */
static PyObject *__pyx_pf_6mprans_4cTIM_9cTIM_base_10calculateJacobian(struct __pyx_obj_6mprans_4cTIM_cTIM_base *__pyx_v_self, double __pyx_v_dt, PyArrayObject *__pyx_v_mesh_trial_ref, PyArrayObject *__pyx_v_mesh_grad_trial_ref, PyArrayObject *__pyx_v_mesh_dof, PyArrayObject *__pyx_v_mesh_velocity_dof, double __pyx_v_MOVING_DOMAIN, PyArrayObject *__pyx_v_mesh_l2g, PyArrayObject *__pyx_v_dV_ref, PyArrayObject *__pyx_v_u_trial_ref, PyArrayObject *__pyx_v_u_grad_trial_ref, PyArrayObject *__pyx_v_u_test_ref, PyArrayObject *__pyx_v_u_grad_test_ref, PyArrayObject *__pyx_v_mesh_trial_trace_ref, PyArrayObject *__pyx_v_mesh_grad_trial_trace_ref, PyArrayObject *__pyx_v_dS_ref, PyArrayObject *__pyx_v_u_trial_trace_ref, PyArrayObject *__pyx_v_u_grad_trial_trace_ref, PyArrayObject *__pyx_v_u_test_trace_ref, PyArrayObject *__pyx_v_u_grad_test_trace_ref, PyArrayObject *__pyx_v_normal_ref, PyArrayObject *__pyx_v_boundaryJac_ref, int __pyx_v_nElements_global, double __pyx_v_useMetrics, double __pyx_v_alphaBDF, int __pyx_v_lag_shockCapturing, double __pyx_v_shockCapturingDiffusion, PyArrayObject *__pyx_v_q_porosity, PyArrayObject *__pyx_v_u_l2g, PyArrayObject *__pyx_v_elementDiameter, int __pyx_v_degree_polynomial, PyArrayObject *__pyx_v_u_dof, PyArrayObject *__pyx_v_velocity, PyArrayObject *__pyx_v_q_m_betaBDF, PyArrayObject *__pyx_v_cfl, PyArrayObject *__pyx_v_q_numDiff_u_last, PyArrayObject *__pyx_v_csrRowIndeces_u_u, PyArrayObject *__pyx_v_csrColumnOffsets_u_u, PyObject *__pyx_v_globalJacobian, int __pyx_v_nExteriorElementBoundaries_global, PyArrayObject *__pyx_v_exteriorElementBoundariesArray, PyArrayObject *__pyx_v_elementBoundaryElementsArray, PyArrayObject *__pyx_v_elementBoundaryLocalElementBoundariesArray, PyArrayObject *__pyx_v_ebqe_velocity_ext, PyArrayObject *__pyx_v_ebqe_porosity_ext, PyArrayObject *__pyx_v_isDOFBoundary_u, PyArrayObject *__pyx_v_ebqe_bc_u_ext, PyArrayObject *__pyx_v_isFluxBoundary_u, PyArrayObject *__pyx_v_ebqe_bc_flux_u_ext, PyArrayObject *__pyx_v_csrColumnOffsets_eb_u_u, int __pyx_v_LUMPED_MASS_MATRIX); /* proto */
static PyObject *__pyx_pf_6mprans_4cTIM_9cTIM_base_12calculateMassMatrix(struct __pyx_obj_6mprans_4cTIM_cTIM_base *__pyx_v_self, double __pyx_v_dt, PyArrayObject *__pyx_v_mesh_trial_ref, PyArrayObject *__pyx_v_mesh_grad_trial_ref, PyArrayObject *__pyx_v_mesh_dof, PyArrayObject *__pyx_v_mesh_velocity_dof, double __pyx_v_MOVING_DOMAIN, PyArrayObject *__pyx_v_mesh_l2g, PyArrayObject *__pyx_v_dV_ref, PyArrayObject *__pyx_v_u_trial_ref, PyArrayObject *__pyx_v_u_grad_trial_ref, PyArrayObject *__pyx_v_u_test_ref, PyArrayObject *__pyx_v_u_grad_test_ref, PyArrayObject *__pyx_v_mesh_trial_trace_ref, PyArrayObject *__pyx_v_mesh_grad_trial_trace_ref, PyArrayObject *__pyx_v_dS_ref, PyArrayObject *__pyx_v_u_trial_trace_ref, PyArrayObject *__pyx_v_u_grad_trial_trace_ref, PyArrayObject *__pyx_v_u_test_trace_ref, PyArrayObject *__pyx_v_u_grad_test_trace_ref, PyArrayObject *__pyx_v_normal_ref, PyArrayObject *__pyx_v_boundaryJac_ref, int __pyx_v_nElements_global, double __pyx_v_useMetrics, double __pyx_v_alphaBDF, int __pyx_v_lag_shockCapturing, double __pyx_v_shockCapturingDiffusion, PyArrayObject *__pyx_v_q_porosity, PyArrayObject *__pyx_v_u_l2g, PyArrayObject *__pyx_v_elementDiameter, int __pyx_v_degree_polynomial, PyArrayObject *__pyx_v_u_dof, PyArrayObject *__pyx_v_velocity, PyArrayObject *__pyx_v_q_m_betaBDF, PyArrayObject *__pyx_v_cfl, PyArrayObject *__pyx_v_q_numDiff_u_last, PyArrayObject *__pyx_v_csrRowIndeces_u_u, PyArrayObject *__pyx_v_csrColumnOffsets_u_u, PyObject *__pyx_v_globalJacobian, int __pyx_v_nExteriorElementBoundaries_global, PyArrayObject *__pyx_v_exteriorElementBoundariesArray, PyArrayObject *__pyx_v_elementBoundaryElementsArray, PyArrayObject *__pyx_v_elementBoundaryLocalElementBoundariesArray, PyArrayObject *__pyx_v_ebqe_velocity_ext, PyArrayObject *__pyx_v_ebqe_porosity_ext, PyArrayObject *__pyx_v_isDOFBoundary_u, PyArrayObject *__pyx_v_ebqe_bc_u_ext, PyArrayObject *__pyx_v_isFluxBoundary_u, PyArrayObject *__pyx_v_ebqe_bc_flux_u_ext, PyArrayObject *__pyx_v_csrColumnOffsets_eb_u_u, int __pyx_v_LUMPED_MASS_MATRIX); /* proto */
static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info); /* proto */
static PyObject *__pyx_tp_new_6mprans_4cTIM_cTIM_base(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;

/* "mprans/cTIM.pyx":319
 * cdef class cTIM_base:
 *    cdef TIM_base* thisptr
 *    def __cinit__(self,             # <<<<<<<<<<<<<<
 *                  int nSpaceIn,
 *                  int nQuadraturePoints_elementIn,
 */

/* Python wrapper */
static int __pyx_pw_6mprans_4cTIM_9cTIM_base_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6mprans_4cTIM_9cTIM_base_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_nSpaceIn;
  int __pyx_v_nQuadraturePoints_elementIn;
  int __pyx_v_nDOF_mesh_trial_elementIn;
  int __pyx_v_nDOF_trial_elementIn;
  int __pyx_v_nDOF_test_elementIn;
  int __pyx_v_nQuadraturePoints_elementBoundaryIn;
  int __pyx_v_CompKernelFlag;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_nSpaceIn,&__pyx_n_s_nQuadraturePoints_elementIn,&__pyx_n_s_nDOF_mesh_trial_elementIn,&__pyx_n_s_nDOF_trial_elementIn,&__pyx_n_s_nDOF_test_elementIn,&__pyx_n_s_nQuadraturePoints_elementBoundar,&__pyx_n_s_CompKernelFlag,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nSpaceIn)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nQuadraturePoints_elementIn)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 7, 7, 1); __PYX_ERR(0, 319, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nDOF_mesh_trial_elementIn)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 7, 7, 2); __PYX_ERR(0, 319, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nDOF_trial_elementIn)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 7, 7, 3); __PYX_ERR(0, 319, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nDOF_test_elementIn)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 7, 7, 4); __PYX_ERR(0, 319, __pyx_L3_error)
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nQuadraturePoints_elementBoundar)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 7, 7, 5); __PYX_ERR(0, 319, __pyx_L3_error)
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_CompKernelFlag)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 7, 7, 6); __PYX_ERR(0, 319, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 319, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 7) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
    }
    __pyx_v_nSpaceIn = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_nSpaceIn == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 320, __pyx_L3_error)
    __pyx_v_nQuadraturePoints_elementIn = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_nQuadraturePoints_elementIn == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 321, __pyx_L3_error)
    __pyx_v_nDOF_mesh_trial_elementIn = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_nDOF_mesh_trial_elementIn == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 322, __pyx_L3_error)
    __pyx_v_nDOF_trial_elementIn = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_nDOF_trial_elementIn == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 323, __pyx_L3_error)
    __pyx_v_nDOF_test_elementIn = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_nDOF_test_elementIn == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 324, __pyx_L3_error)
    __pyx_v_nQuadraturePoints_elementBoundaryIn = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_nQuadraturePoints_elementBoundaryIn == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 325, __pyx_L3_error)
    __pyx_v_CompKernelFlag = __Pyx_PyInt_As_int(values[6]); if (unlikely((__pyx_v_CompKernelFlag == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 326, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 7, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 319, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mprans.cTIM.cTIM_base.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6mprans_4cTIM_9cTIM_base___cinit__(((struct __pyx_obj_6mprans_4cTIM_cTIM_base *)__pyx_v_self), __pyx_v_nSpaceIn, __pyx_v_nQuadraturePoints_elementIn, __pyx_v_nDOF_mesh_trial_elementIn, __pyx_v_nDOF_trial_elementIn, __pyx_v_nDOF_test_elementIn, __pyx_v_nQuadraturePoints_elementBoundaryIn, __pyx_v_CompKernelFlag);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6mprans_4cTIM_9cTIM_base___cinit__(struct __pyx_obj_6mprans_4cTIM_cTIM_base *__pyx_v_self, int __pyx_v_nSpaceIn, int __pyx_v_nQuadraturePoints_elementIn, int __pyx_v_nDOF_mesh_trial_elementIn, int __pyx_v_nDOF_trial_elementIn, int __pyx_v_nDOF_test_elementIn, int __pyx_v_nQuadraturePoints_elementBoundaryIn, int __pyx_v_CompKernelFlag) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "mprans/cTIM.pyx":327
 *                  int nQuadraturePoints_elementBoundaryIn,
 *                  int CompKernelFlag):
 *        self.thisptr = newTIM(nSpaceIn,             # <<<<<<<<<<<<<<
 *                              nQuadraturePoints_elementIn,
 *                              nDOF_mesh_trial_elementIn,
 */
  __pyx_v_self->thisptr = proteus::newTIM(__pyx_v_nSpaceIn, __pyx_v_nQuadraturePoints_elementIn, __pyx_v_nDOF_mesh_trial_elementIn, __pyx_v_nDOF_trial_elementIn, __pyx_v_nDOF_test_elementIn, __pyx_v_nQuadraturePoints_elementBoundaryIn, __pyx_v_CompKernelFlag);

  /* "mprans/cTIM.pyx":319
 * cdef class cTIM_base:
 *    cdef TIM_base* thisptr
 *    def __cinit__(self,             # <<<<<<<<<<<<<<
 *                  int nSpaceIn,
 *                  int nQuadraturePoints_elementIn,
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mprans/cTIM.pyx":334
 *                              nQuadraturePoints_elementBoundaryIn,
 *                              CompKernelFlag)
 *    def __dealloc__(self):             # <<<<<<<<<<<<<<
 *        del self.thisptr
 *    def FCTStep(self,
 */

/* Python wrapper */
static void __pyx_pw_6mprans_4cTIM_9cTIM_base_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6mprans_4cTIM_9cTIM_base_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6mprans_4cTIM_9cTIM_base_2__dealloc__(((struct __pyx_obj_6mprans_4cTIM_cTIM_base *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6mprans_4cTIM_9cTIM_base_2__dealloc__(struct __pyx_obj_6mprans_4cTIM_cTIM_base *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "mprans/cTIM.pyx":335
 *                              CompKernelFlag)
 *    def __dealloc__(self):
 *        del self.thisptr             # <<<<<<<<<<<<<<
 *    def FCTStep(self,
 *                int NNZ,
 */
  delete __pyx_v_self->thisptr;

  /* "mprans/cTIM.pyx":334
 *                              nQuadraturePoints_elementBoundaryIn,
 *                              CompKernelFlag)
 *    def __dealloc__(self):             # <<<<<<<<<<<<<<
 *        del self.thisptr
 *    def FCTStep(self,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "mprans/cTIM.pyx":336
 *    def __dealloc__(self):
 *        del self.thisptr
 *    def FCTStep(self,             # <<<<<<<<<<<<<<
 *                int NNZ,
 *                int numDOFs,
 */

/* Python wrapper */
static PyObject *__pyx_pw_6mprans_4cTIM_9cTIM_base_5FCTStep(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6mprans_4cTIM_9cTIM_base_5FCTStep(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_NNZ;
  int __pyx_v_numDOFs;
  PyArrayObject *__pyx_v_lumped_mass_matrix = 0;
  PyArrayObject *__pyx_v_soln = 0;
  PyArrayObject *__pyx_v_solH = 0;
  PyArrayObject *__pyx_v_low_order_solution = 0;
  PyArrayObject *__pyx_v_limited_solution = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_DofLoops = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_DofLoops = 0;
  PyArrayObject *__pyx_v_MassMatrix = 0;
  PyArrayObject *__pyx_v_dt_times_dH_minus_dL = 0;
  PyArrayObject *__pyx_v_min_u_bc = 0;
  PyArrayObject *__pyx_v_max_u_bc = 0;
  int __pyx_v_LUMPED_MASS_MATRIX;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("FCTStep (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_NNZ,&__pyx_n_s_numDOFs,&__pyx_n_s_lumped_mass_matrix,&__pyx_n_s_soln,&__pyx_n_s_solH,&__pyx_n_s_low_order_solution,&__pyx_n_s_limited_solution,&__pyx_n_s_csrRowIndeces_DofLoops,&__pyx_n_s_csrColumnOffsets_DofLoops,&__pyx_n_s_MassMatrix,&__pyx_n_s_dt_times_dH_minus_dL,&__pyx_n_s_min_u_bc,&__pyx_n_s_max_u_bc,&__pyx_n_s_LUMPED_MASS_MATRIX,0};
    PyObject* values[14] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_NNZ)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_numDOFs)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("FCTStep", 1, 14, 14, 1); __PYX_ERR(0, 336, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_lumped_mass_matrix)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("FCTStep", 1, 14, 14, 2); __PYX_ERR(0, 336, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_soln)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("FCTStep", 1, 14, 14, 3); __PYX_ERR(0, 336, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_solH)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("FCTStep", 1, 14, 14, 4); __PYX_ERR(0, 336, __pyx_L3_error)
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_low_order_solution)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("FCTStep", 1, 14, 14, 5); __PYX_ERR(0, 336, __pyx_L3_error)
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_limited_solution)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("FCTStep", 1, 14, 14, 6); __PYX_ERR(0, 336, __pyx_L3_error)
        }
        case  7:
        if (likely((values[7] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_DofLoops)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("FCTStep", 1, 14, 14, 7); __PYX_ERR(0, 336, __pyx_L3_error)
        }
        case  8:
        if (likely((values[8] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_DofLoops)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("FCTStep", 1, 14, 14, 8); __PYX_ERR(0, 336, __pyx_L3_error)
        }
        case  9:
        if (likely((values[9] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_MassMatrix)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("FCTStep", 1, 14, 14, 9); __PYX_ERR(0, 336, __pyx_L3_error)
        }
        case 10:
        if (likely((values[10] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dt_times_dH_minus_dL)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("FCTStep", 1, 14, 14, 10); __PYX_ERR(0, 336, __pyx_L3_error)
        }
        case 11:
        if (likely((values[11] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_min_u_bc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("FCTStep", 1, 14, 14, 11); __PYX_ERR(0, 336, __pyx_L3_error)
        }
        case 12:
        if (likely((values[12] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_u_bc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("FCTStep", 1, 14, 14, 12); __PYX_ERR(0, 336, __pyx_L3_error)
        }
        case 13:
        if (likely((values[13] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_LUMPED_MASS_MATRIX)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("FCTStep", 1, 14, 14, 13); __PYX_ERR(0, 336, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "FCTStep") < 0)) __PYX_ERR(0, 336, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 14) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
      values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
      values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
    }
    __pyx_v_NNZ = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_NNZ == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 337, __pyx_L3_error)
    __pyx_v_numDOFs = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_numDOFs == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 338, __pyx_L3_error)
    __pyx_v_lumped_mass_matrix = ((PyArrayObject *)values[2]);
    __pyx_v_soln = ((PyArrayObject *)values[3]);
    __pyx_v_solH = ((PyArrayObject *)values[4]);
    __pyx_v_low_order_solution = ((PyArrayObject *)values[5]);
    __pyx_v_limited_solution = ((PyArrayObject *)values[6]);
    __pyx_v_csrRowIndeces_DofLoops = ((PyArrayObject *)values[7]);
    __pyx_v_csrColumnOffsets_DofLoops = ((PyArrayObject *)values[8]);
    __pyx_v_MassMatrix = ((PyArrayObject *)values[9]);
    __pyx_v_dt_times_dH_minus_dL = ((PyArrayObject *)values[10]);
    __pyx_v_min_u_bc = ((PyArrayObject *)values[11]);
    __pyx_v_max_u_bc = ((PyArrayObject *)values[12]);
    __pyx_v_LUMPED_MASS_MATRIX = __Pyx_PyInt_As_int(values[13]); if (unlikely((__pyx_v_LUMPED_MASS_MATRIX == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 350, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("FCTStep", 1, 14, 14, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 336, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mprans.cTIM.cTIM_base.FCTStep", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_lumped_mass_matrix), __pyx_ptype_5numpy_ndarray, 1, "lumped_mass_matrix", 0))) __PYX_ERR(0, 339, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_soln), __pyx_ptype_5numpy_ndarray, 1, "soln", 0))) __PYX_ERR(0, 340, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_solH), __pyx_ptype_5numpy_ndarray, 1, "solH", 0))) __PYX_ERR(0, 341, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_low_order_solution), __pyx_ptype_5numpy_ndarray, 1, "low_order_solution", 0))) __PYX_ERR(0, 342, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_limited_solution), __pyx_ptype_5numpy_ndarray, 1, "limited_solution", 0))) __PYX_ERR(0, 343, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_DofLoops), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_DofLoops", 0))) __PYX_ERR(0, 344, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_DofLoops), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_DofLoops", 0))) __PYX_ERR(0, 345, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_MassMatrix), __pyx_ptype_5numpy_ndarray, 1, "MassMatrix", 0))) __PYX_ERR(0, 346, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dt_times_dH_minus_dL), __pyx_ptype_5numpy_ndarray, 1, "dt_times_dH_minus_dL", 0))) __PYX_ERR(0, 347, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_min_u_bc), __pyx_ptype_5numpy_ndarray, 1, "min_u_bc", 0))) __PYX_ERR(0, 348, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_max_u_bc), __pyx_ptype_5numpy_ndarray, 1, "max_u_bc", 0))) __PYX_ERR(0, 349, __pyx_L1_error)
  __pyx_r = __pyx_pf_6mprans_4cTIM_9cTIM_base_4FCTStep(((struct __pyx_obj_6mprans_4cTIM_cTIM_base *)__pyx_v_self), __pyx_v_NNZ, __pyx_v_numDOFs, __pyx_v_lumped_mass_matrix, __pyx_v_soln, __pyx_v_solH, __pyx_v_low_order_solution, __pyx_v_limited_solution, __pyx_v_csrRowIndeces_DofLoops, __pyx_v_csrColumnOffsets_DofLoops, __pyx_v_MassMatrix, __pyx_v_dt_times_dH_minus_dL, __pyx_v_min_u_bc, __pyx_v_max_u_bc, __pyx_v_LUMPED_MASS_MATRIX);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6mprans_4cTIM_9cTIM_base_4FCTStep(struct __pyx_obj_6mprans_4cTIM_cTIM_base *__pyx_v_self, int __pyx_v_NNZ, int __pyx_v_numDOFs, PyArrayObject *__pyx_v_lumped_mass_matrix, PyArrayObject *__pyx_v_soln, PyArrayObject *__pyx_v_solH, PyArrayObject *__pyx_v_low_order_solution, PyArrayObject *__pyx_v_limited_solution, PyArrayObject *__pyx_v_csrRowIndeces_DofLoops, PyArrayObject *__pyx_v_csrColumnOffsets_DofLoops, PyArrayObject *__pyx_v_MassMatrix, PyArrayObject *__pyx_v_dt_times_dH_minus_dL, PyArrayObject *__pyx_v_min_u_bc, PyArrayObject *__pyx_v_max_u_bc, int __pyx_v_LUMPED_MASS_MATRIX) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("FCTStep", 0);

  /* "mprans/cTIM.pyx":351
 *                numpy.ndarray max_u_bc,
 *                int LUMPED_MASS_MATRIX):
 *        self.thisptr.FCTStep(NNZ,             # <<<<<<<<<<<<<<
 *                             numDOFs,
 *                             <double*> lumped_mass_matrix.data,
 */
  __pyx_v_self->thisptr->FCTStep(__pyx_v_NNZ, __pyx_v_numDOFs, ((double *)__pyx_v_lumped_mass_matrix->data), ((double *)__pyx_v_soln->data), ((double *)__pyx_v_solH->data), ((double *)__pyx_v_low_order_solution->data), ((double *)__pyx_v_limited_solution->data), ((int *)__pyx_v_csrRowIndeces_DofLoops->data), ((int *)__pyx_v_csrColumnOffsets_DofLoops->data), ((double *)__pyx_v_MassMatrix->data), ((double *)__pyx_v_dt_times_dH_minus_dL->data), ((double *)__pyx_v_min_u_bc->data), ((double *)__pyx_v_max_u_bc->data), __pyx_v_LUMPED_MASS_MATRIX);

  /* "mprans/cTIM.pyx":336
 *    def __dealloc__(self):
 *        del self.thisptr
 *    def FCTStep(self,             # <<<<<<<<<<<<<<
 *                int NNZ,
 *                int numDOFs,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mprans/cTIM.pyx":365
 *                             <double*> max_u_bc.data,
 *                             LUMPED_MASS_MATRIX)
 *    def calculateResidual(self,             # <<<<<<<<<<<<<<
 *                          double dt,
 *                          numpy.ndarray mesh_trial_ref,
 */

/* Python wrapper */
static PyObject *__pyx_pw_6mprans_4cTIM_9cTIM_base_7calculateResidual(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6mprans_4cTIM_9cTIM_base_7calculateResidual(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_dt;
  PyArrayObject *__pyx_v_mesh_trial_ref = 0;
  PyArrayObject *__pyx_v_mesh_grad_trial_ref = 0;
  PyArrayObject *__pyx_v_mesh_dof = 0;
  PyArrayObject *__pyx_v_mesh_velocity_dof = 0;
  double __pyx_v_MOVING_DOMAIN;
  PyArrayObject *__pyx_v_mesh_l2g = 0;
  PyArrayObject *__pyx_v_dV_ref = 0;
  PyArrayObject *__pyx_v_u_trial_ref = 0;
  PyArrayObject *__pyx_v_u_grad_trial_ref = 0;
  PyArrayObject *__pyx_v_u_test_ref = 0;
  PyArrayObject *__pyx_v_u_grad_test_ref = 0;
  PyArrayObject *__pyx_v_mesh_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_mesh_grad_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_dS_ref = 0;
  PyArrayObject *__pyx_v_u_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_u_grad_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_u_test_trace_ref = 0;
  PyArrayObject *__pyx_v_u_grad_test_trace_ref = 0;
  PyArrayObject *__pyx_v_normal_ref = 0;
  PyArrayObject *__pyx_v_boundaryJac_ref = 0;
  int __pyx_v_nElements_global;
  double __pyx_v_useMetrics;
  double __pyx_v_alphaBDF;
  int __pyx_v_lag_shockCapturing;
  double __pyx_v_shockCapturingDiffusion;
  double __pyx_v_sc_uref;
  double __pyx_v_sc_alpha;
  PyArrayObject *__pyx_v_q_porosity = 0;
  PyArrayObject *__pyx_v_porosity_dof = 0;
  PyArrayObject *__pyx_v_u_l2g = 0;
  PyArrayObject *__pyx_v_elementDiameter = 0;
  int __pyx_v_degree_polynomial;
  PyArrayObject *__pyx_v_u_dof = 0;
  PyArrayObject *__pyx_v_u_dof_old = 0;
  PyArrayObject *__pyx_v_velocity = 0;
  PyArrayObject *__pyx_v_q_m = 0;
  PyArrayObject *__pyx_v_q_u = 0;
  PyArrayObject *__pyx_v_q_m_betaBDF = 0;
  PyArrayObject *__pyx_v_q_dV = 0;
  PyArrayObject *__pyx_v_q_dV_last = 0;
  PyArrayObject *__pyx_v_cfl = 0;
  PyArrayObject *__pyx_v_edge_based_cfl = 0;
  PyArrayObject *__pyx_v_q_numDiff_u = 0;
  PyArrayObject *__pyx_v_q_numDiff_u_last = 0;
  int __pyx_v_offset_u;
  int __pyx_v_stride_u;
  PyArrayObject *__pyx_v_globalResidual = 0;
  int __pyx_v_nExteriorElementBoundaries_global;
  PyArrayObject *__pyx_v_exteriorElementBoundariesArray = 0;
  PyArrayObject *__pyx_v_elementBoundaryElementsArray = 0;
  PyArrayObject *__pyx_v_elementBoundaryLocalElementBoundariesArray = 0;
  PyArrayObject *__pyx_v_ebqe_velocity_ext = 0;
  PyArrayObject *__pyx_v_ebqe_porosity_ext = 0;
  PyArrayObject *__pyx_v_isDOFBoundary_u = 0;
  PyArrayObject *__pyx_v_ebqe_bc_u_ext = 0;
  PyArrayObject *__pyx_v_isFluxBoundary_u = 0;
  PyArrayObject *__pyx_v_ebqe_bc_flux_u_ext = 0;
  PyArrayObject *__pyx_v_ebqe_phi = 0;
  double __pyx_v_epsFact;
  PyArrayObject *__pyx_v_ebqe_u = 0;
  PyArrayObject *__pyx_v_ebqe_flux = 0;
  double __pyx_v_cE;
  double __pyx_v_cK;
  double __pyx_v_uL;
  double __pyx_v_uR;
  int __pyx_v_numDOFs;
  int __pyx_v_NNZ;
  PyArrayObject *__pyx_v_csrRowIndeces_DofLoops = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_DofLoops = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_CellLoops = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_CellLoops = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_CellLoops = 0;
  PyArrayObject *__pyx_v_Cx = 0;
  PyArrayObject *__pyx_v_Cy = 0;
  PyArrayObject *__pyx_v_Cz = 0;
  PyArrayObject *__pyx_v_CTx = 0;
  PyArrayObject *__pyx_v_CTy = 0;
  PyArrayObject *__pyx_v_CTz = 0;
  PyArrayObject *__pyx_v_ML = 0;
  int __pyx_v_LUMPED_MASS_MATRIX;
  int __pyx_v_STABILIZATION_TYPE;
  int __pyx_v_ENTROPY_TYPE;
  PyArrayObject *__pyx_v_low_order_solution = 0;
  PyArrayObject *__pyx_v_dt_times_dH_minus_dL = 0;
  PyArrayObject *__pyx_v_min_u_bc = 0;
  PyArrayObject *__pyx_v_max_u_bc = 0;
  PyArrayObject *__pyx_v_quantDOFs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calculateResidual (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dt,&__pyx_n_s_mesh_trial_ref,&__pyx_n_s_mesh_grad_trial_ref,&__pyx_n_s_mesh_dof,&__pyx_n_s_mesh_velocity_dof,&__pyx_n_s_MOVING_DOMAIN,&__pyx_n_s_mesh_l2g,&__pyx_n_s_dV_ref,&__pyx_n_s_u_trial_ref,&__pyx_n_s_u_grad_trial_ref,&__pyx_n_s_u_test_ref,&__pyx_n_s_u_grad_test_ref,&__pyx_n_s_mesh_trial_trace_ref,&__pyx_n_s_mesh_grad_trial_trace_ref,&__pyx_n_s_dS_ref,&__pyx_n_s_u_trial_trace_ref,&__pyx_n_s_u_grad_trial_trace_ref,&__pyx_n_s_u_test_trace_ref,&__pyx_n_s_u_grad_test_trace_ref,&__pyx_n_s_normal_ref,&__pyx_n_s_boundaryJac_ref,&__pyx_n_s_nElements_global,&__pyx_n_s_useMetrics,&__pyx_n_s_alphaBDF,&__pyx_n_s_lag_shockCapturing,&__pyx_n_s_shockCapturingDiffusion,&__pyx_n_s_sc_uref,&__pyx_n_s_sc_alpha,&__pyx_n_s_q_porosity,&__pyx_n_s_porosity_dof,&__pyx_n_s_u_l2g,&__pyx_n_s_elementDiameter,&__pyx_n_s_degree_polynomial,&__pyx_n_s_u_dof,&__pyx_n_s_u_dof_old,&__pyx_n_s_velocity,&__pyx_n_s_q_m,&__pyx_n_s_q_u,&__pyx_n_s_q_m_betaBDF,&__pyx_n_s_q_dV,&__pyx_n_s_q_dV_last,&__pyx_n_s_cfl,&__pyx_n_s_edge_based_cfl,&__pyx_n_s_q_numDiff_u,&__pyx_n_s_q_numDiff_u_last,&__pyx_n_s_offset_u,&__pyx_n_s_stride_u,&__pyx_n_s_globalResidual,&__pyx_n_s_nExteriorElementBoundaries_globa,&__pyx_n_s_exteriorElementBoundariesArray,&__pyx_n_s_elementBoundaryElementsArray,&__pyx_n_s_elementBoundaryLocalElementBound,&__pyx_n_s_ebqe_velocity_ext,&__pyx_n_s_ebqe_porosity_ext,&__pyx_n_s_isDOFBoundary_u,&__pyx_n_s_ebqe_bc_u_ext,&__pyx_n_s_isFluxBoundary_u,&__pyx_n_s_ebqe_bc_flux_u_ext,&__pyx_n_s_ebqe_phi,&__pyx_n_s_epsFact,&__pyx_n_s_ebqe_u,&__pyx_n_s_ebqe_flux,&__pyx_n_s_cE,&__pyx_n_s_cK,&__pyx_n_s_uL,&__pyx_n_s_uR,&__pyx_n_s_numDOFs,&__pyx_n_s_NNZ,&__pyx_n_s_csrRowIndeces_DofLoops,&__pyx_n_s_csrColumnOffsets_DofLoops,&__pyx_n_s_csrRowIndeces_CellLoops,&__pyx_n_s_csrColumnOffsets_CellLoops,&__pyx_n_s_csrColumnOffsets_eb_CellLoops,&__pyx_n_s_Cx,&__pyx_n_s_Cy,&__pyx_n_s_Cz,&__pyx_n_s_CTx,&__pyx_n_s_CTy,&__pyx_n_s_CTz,&__pyx_n_s_ML,&__pyx_n_s_LUMPED_MASS_MATRIX,&__pyx_n_s_STABILIZATION_TYPE,&__pyx_n_s_ENTROPY_TYPE,&__pyx_n_s_low_order_solution,&__pyx_n_s_dt_times_dH_minus_dL,&__pyx_n_s_min_u_bc,&__pyx_n_s_max_u_bc,&__pyx_n_s_quantDOFs,0};
    PyObject* values[88] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 88: values[87] = PyTuple_GET_ITEM(__pyx_args, 87);
        case 87: values[86] = PyTuple_GET_ITEM(__pyx_args, 86);
        case 86: values[85] = PyTuple_GET_ITEM(__pyx_args, 85);
        case 85: values[84] = PyTuple_GET_ITEM(__pyx_args, 84);
        case 84: values[83] = PyTuple_GET_ITEM(__pyx_args, 83);
        case 83: values[82] = PyTuple_GET_ITEM(__pyx_args, 82);
        case 82: values[81] = PyTuple_GET_ITEM(__pyx_args, 81);
        case 81: values[80] = PyTuple_GET_ITEM(__pyx_args, 80);
        case 80: values[79] = PyTuple_GET_ITEM(__pyx_args, 79);
        case 79: values[78] = PyTuple_GET_ITEM(__pyx_args, 78);
        case 78: values[77] = PyTuple_GET_ITEM(__pyx_args, 77);
        case 77: values[76] = PyTuple_GET_ITEM(__pyx_args, 76);
        case 76: values[75] = PyTuple_GET_ITEM(__pyx_args, 75);
        case 75: values[74] = PyTuple_GET_ITEM(__pyx_args, 74);
        case 74: values[73] = PyTuple_GET_ITEM(__pyx_args, 73);
        case 73: values[72] = PyTuple_GET_ITEM(__pyx_args, 72);
        case 72: values[71] = PyTuple_GET_ITEM(__pyx_args, 71);
        case 71: values[70] = PyTuple_GET_ITEM(__pyx_args, 70);
        case 70: values[69] = PyTuple_GET_ITEM(__pyx_args, 69);
        case 69: values[68] = PyTuple_GET_ITEM(__pyx_args, 68);
        case 68: values[67] = PyTuple_GET_ITEM(__pyx_args, 67);
        case 67: values[66] = PyTuple_GET_ITEM(__pyx_args, 66);
        case 66: values[65] = PyTuple_GET_ITEM(__pyx_args, 65);
        case 65: values[64] = PyTuple_GET_ITEM(__pyx_args, 64);
        case 64: values[63] = PyTuple_GET_ITEM(__pyx_args, 63);
        case 63: values[62] = PyTuple_GET_ITEM(__pyx_args, 62);
        case 62: values[61] = PyTuple_GET_ITEM(__pyx_args, 61);
        case 61: values[60] = PyTuple_GET_ITEM(__pyx_args, 60);
        case 60: values[59] = PyTuple_GET_ITEM(__pyx_args, 59);
        case 59: values[58] = PyTuple_GET_ITEM(__pyx_args, 58);
        case 58: values[57] = PyTuple_GET_ITEM(__pyx_args, 57);
        case 57: values[56] = PyTuple_GET_ITEM(__pyx_args, 56);
        case 56: values[55] = PyTuple_GET_ITEM(__pyx_args, 55);
        case 55: values[54] = PyTuple_GET_ITEM(__pyx_args, 54);
        case 54: values[53] = PyTuple_GET_ITEM(__pyx_args, 53);
        case 53: values[52] = PyTuple_GET_ITEM(__pyx_args, 52);
        case 52: values[51] = PyTuple_GET_ITEM(__pyx_args, 51);
        case 51: values[50] = PyTuple_GET_ITEM(__pyx_args, 50);
        case 50: values[49] = PyTuple_GET_ITEM(__pyx_args, 49);
        case 49: values[48] = PyTuple_GET_ITEM(__pyx_args, 48);
        case 48: values[47] = PyTuple_GET_ITEM(__pyx_args, 47);
        case 47: values[46] = PyTuple_GET_ITEM(__pyx_args, 46);
        case 46: values[45] = PyTuple_GET_ITEM(__pyx_args, 45);
        case 45: values[44] = PyTuple_GET_ITEM(__pyx_args, 44);
        case 44: values[43] = PyTuple_GET_ITEM(__pyx_args, 43);
        case 43: values[42] = PyTuple_GET_ITEM(__pyx_args, 42);
        case 42: values[41] = PyTuple_GET_ITEM(__pyx_args, 41);
        case 41: values[40] = PyTuple_GET_ITEM(__pyx_args, 40);
        case 40: values[39] = PyTuple_GET_ITEM(__pyx_args, 39);
        case 39: values[38] = PyTuple_GET_ITEM(__pyx_args, 38);
        case 38: values[37] = PyTuple_GET_ITEM(__pyx_args, 37);
        case 37: values[36] = PyTuple_GET_ITEM(__pyx_args, 36);
        case 36: values[35] = PyTuple_GET_ITEM(__pyx_args, 35);
        case 35: values[34] = PyTuple_GET_ITEM(__pyx_args, 34);
        case 34: values[33] = PyTuple_GET_ITEM(__pyx_args, 33);
        case 33: values[32] = PyTuple_GET_ITEM(__pyx_args, 32);
        case 32: values[31] = PyTuple_GET_ITEM(__pyx_args, 31);
        case 31: values[30] = PyTuple_GET_ITEM(__pyx_args, 30);
        case 30: values[29] = PyTuple_GET_ITEM(__pyx_args, 29);
        case 29: values[28] = PyTuple_GET_ITEM(__pyx_args, 28);
        case 28: values[27] = PyTuple_GET_ITEM(__pyx_args, 27);
        case 27: values[26] = PyTuple_GET_ITEM(__pyx_args, 26);
        case 26: values[25] = PyTuple_GET_ITEM(__pyx_args, 25);
        case 25: values[24] = PyTuple_GET_ITEM(__pyx_args, 24);
        case 24: values[23] = PyTuple_GET_ITEM(__pyx_args, 23);
        case 23: values[22] = PyTuple_GET_ITEM(__pyx_args, 22);
        case 22: values[21] = PyTuple_GET_ITEM(__pyx_args, 21);
        case 21: values[20] = PyTuple_GET_ITEM(__pyx_args, 20);
        case 20: values[19] = PyTuple_GET_ITEM(__pyx_args, 19);
        case 19: values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
        case 18: values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
        case 17: values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dt)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_trial_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 1); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_grad_trial_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 2); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 3); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_velocity_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 4); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_MOVING_DOMAIN)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 5); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_l2g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 6); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case  7:
        if (likely((values[7] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dV_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 7); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case  8:
        if (likely((values[8] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_u_trial_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 8); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case  9:
        if (likely((values[9] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_u_grad_trial_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 9); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 10:
        if (likely((values[10] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_u_test_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 10); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 11:
        if (likely((values[11] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_u_grad_test_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 11); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 12:
        if (likely((values[12] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 12); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 13:
        if (likely((values[13] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_grad_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 13); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 14:
        if (likely((values[14] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dS_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 14); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 15:
        if (likely((values[15] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_u_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 15); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 16:
        if (likely((values[16] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_u_grad_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 16); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 17:
        if (likely((values[17] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_u_test_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 17); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 18:
        if (likely((values[18] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_u_grad_test_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 18); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 19:
        if (likely((values[19] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_normal_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 19); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 20:
        if (likely((values[20] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_boundaryJac_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 20); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 21:
        if (likely((values[21] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nElements_global)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 21); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 22:
        if (likely((values[22] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_useMetrics)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 22); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 23:
        if (likely((values[23] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_alphaBDF)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 23); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 24:
        if (likely((values[24] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_lag_shockCapturing)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 24); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 25:
        if (likely((values[25] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_shockCapturingDiffusion)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 25); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 26:
        if (likely((values[26] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sc_uref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 26); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 27:
        if (likely((values[27] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sc_alpha)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 27); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 28:
        if (likely((values[28] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_porosity)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 28); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 29:
        if (likely((values[29] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_porosity_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 29); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 30:
        if (likely((values[30] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_u_l2g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 30); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 31:
        if (likely((values[31] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_elementDiameter)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 31); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 32:
        if (likely((values[32] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_degree_polynomial)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 32); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 33:
        if (likely((values[33] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_u_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 33); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 34:
        if (likely((values[34] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_u_dof_old)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 34); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 35:
        if (likely((values[35] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_velocity)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 35); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 36:
        if (likely((values[36] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 36); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 37:
        if (likely((values[37] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 37); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 38:
        if (likely((values[38] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_m_betaBDF)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 38); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 39:
        if (likely((values[39] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_dV)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 39); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 40:
        if (likely((values[40] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_dV_last)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 40); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 41:
        if (likely((values[41] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cfl)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 41); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 42:
        if (likely((values[42] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_edge_based_cfl)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 42); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 43:
        if (likely((values[43] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_numDiff_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 43); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 44:
        if (likely((values[44] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_numDiff_u_last)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 44); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 45:
        if (likely((values[45] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_offset_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 45); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 46:
        if (likely((values[46] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stride_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 46); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 47:
        if (likely((values[47] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_globalResidual)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 47); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 48:
        if (likely((values[48] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nExteriorElementBoundaries_globa)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 48); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 49:
        if (likely((values[49] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_exteriorElementBoundariesArray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 49); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 50:
        if (likely((values[50] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_elementBoundaryElementsArray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 50); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 51:
        if (likely((values[51] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_elementBoundaryLocalElementBound)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 51); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 52:
        if (likely((values[52] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_velocity_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 52); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 53:
        if (likely((values[53] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_porosity_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 53); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 54:
        if (likely((values[54] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isDOFBoundary_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 54); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 55:
        if (likely((values[55] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_u_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 55); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 56:
        if (likely((values[56] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isFluxBoundary_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 56); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 57:
        if (likely((values[57] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_flux_u_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 57); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 58:
        if (likely((values[58] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_phi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 58); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 59:
        if (likely((values[59] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_epsFact)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 59); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 60:
        if (likely((values[60] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 60); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 61:
        if (likely((values[61] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_flux)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 61); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 62:
        if (likely((values[62] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cE)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 62); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 63:
        if (likely((values[63] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cK)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 63); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 64:
        if (likely((values[64] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_uL)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 64); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 65:
        if (likely((values[65] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_uR)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 65); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 66:
        if (likely((values[66] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_numDOFs)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 66); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 67:
        if (likely((values[67] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_NNZ)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 67); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 68:
        if (likely((values[68] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_DofLoops)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 68); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 69:
        if (likely((values[69] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_DofLoops)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 69); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 70:
        if (likely((values[70] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_CellLoops)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 70); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 71:
        if (likely((values[71] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_CellLoops)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 71); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 72:
        if (likely((values[72] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_CellLoops)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 72); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 73:
        if (likely((values[73] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Cx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 73); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 74:
        if (likely((values[74] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Cy)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 74); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 75:
        if (likely((values[75] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Cz)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 75); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 76:
        if (likely((values[76] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_CTx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 76); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 77:
        if (likely((values[77] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_CTy)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 77); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 78:
        if (likely((values[78] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_CTz)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 78); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 79:
        if (likely((values[79] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ML)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 79); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 80:
        if (likely((values[80] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_LUMPED_MASS_MATRIX)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 80); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 81:
        if (likely((values[81] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_STABILIZATION_TYPE)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 81); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 82:
        if (likely((values[82] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ENTROPY_TYPE)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 82); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 83:
        if (likely((values[83] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_low_order_solution)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 83); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 84:
        if (likely((values[84] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dt_times_dH_minus_dL)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 84); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 85:
        if (likely((values[85] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_min_u_bc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 85); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 86:
        if (likely((values[86] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_u_bc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 86); __PYX_ERR(0, 365, __pyx_L3_error)
        }
        case 87:
        if (likely((values[87] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_quantDOFs)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, 87); __PYX_ERR(0, 365, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calculateResidual") < 0)) __PYX_ERR(0, 365, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 88) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
      values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
      values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
      values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
      values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
      values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
      values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
      values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
      values[19] = PyTuple_GET_ITEM(__pyx_args, 19);
      values[20] = PyTuple_GET_ITEM(__pyx_args, 20);
      values[21] = PyTuple_GET_ITEM(__pyx_args, 21);
      values[22] = PyTuple_GET_ITEM(__pyx_args, 22);
      values[23] = PyTuple_GET_ITEM(__pyx_args, 23);
      values[24] = PyTuple_GET_ITEM(__pyx_args, 24);
      values[25] = PyTuple_GET_ITEM(__pyx_args, 25);
      values[26] = PyTuple_GET_ITEM(__pyx_args, 26);
      values[27] = PyTuple_GET_ITEM(__pyx_args, 27);
      values[28] = PyTuple_GET_ITEM(__pyx_args, 28);
      values[29] = PyTuple_GET_ITEM(__pyx_args, 29);
      values[30] = PyTuple_GET_ITEM(__pyx_args, 30);
      values[31] = PyTuple_GET_ITEM(__pyx_args, 31);
      values[32] = PyTuple_GET_ITEM(__pyx_args, 32);
      values[33] = PyTuple_GET_ITEM(__pyx_args, 33);
      values[34] = PyTuple_GET_ITEM(__pyx_args, 34);
      values[35] = PyTuple_GET_ITEM(__pyx_args, 35);
      values[36] = PyTuple_GET_ITEM(__pyx_args, 36);
      values[37] = PyTuple_GET_ITEM(__pyx_args, 37);
      values[38] = PyTuple_GET_ITEM(__pyx_args, 38);
      values[39] = PyTuple_GET_ITEM(__pyx_args, 39);
      values[40] = PyTuple_GET_ITEM(__pyx_args, 40);
      values[41] = PyTuple_GET_ITEM(__pyx_args, 41);
      values[42] = PyTuple_GET_ITEM(__pyx_args, 42);
      values[43] = PyTuple_GET_ITEM(__pyx_args, 43);
      values[44] = PyTuple_GET_ITEM(__pyx_args, 44);
      values[45] = PyTuple_GET_ITEM(__pyx_args, 45);
      values[46] = PyTuple_GET_ITEM(__pyx_args, 46);
      values[47] = PyTuple_GET_ITEM(__pyx_args, 47);
      values[48] = PyTuple_GET_ITEM(__pyx_args, 48);
      values[49] = PyTuple_GET_ITEM(__pyx_args, 49);
      values[50] = PyTuple_GET_ITEM(__pyx_args, 50);
      values[51] = PyTuple_GET_ITEM(__pyx_args, 51);
      values[52] = PyTuple_GET_ITEM(__pyx_args, 52);
      values[53] = PyTuple_GET_ITEM(__pyx_args, 53);
      values[54] = PyTuple_GET_ITEM(__pyx_args, 54);
      values[55] = PyTuple_GET_ITEM(__pyx_args, 55);
      values[56] = PyTuple_GET_ITEM(__pyx_args, 56);
      values[57] = PyTuple_GET_ITEM(__pyx_args, 57);
      values[58] = PyTuple_GET_ITEM(__pyx_args, 58);
      values[59] = PyTuple_GET_ITEM(__pyx_args, 59);
      values[60] = PyTuple_GET_ITEM(__pyx_args, 60);
      values[61] = PyTuple_GET_ITEM(__pyx_args, 61);
      values[62] = PyTuple_GET_ITEM(__pyx_args, 62);
      values[63] = PyTuple_GET_ITEM(__pyx_args, 63);
      values[64] = PyTuple_GET_ITEM(__pyx_args, 64);
      values[65] = PyTuple_GET_ITEM(__pyx_args, 65);
      values[66] = PyTuple_GET_ITEM(__pyx_args, 66);
      values[67] = PyTuple_GET_ITEM(__pyx_args, 67);
      values[68] = PyTuple_GET_ITEM(__pyx_args, 68);
      values[69] = PyTuple_GET_ITEM(__pyx_args, 69);
      values[70] = PyTuple_GET_ITEM(__pyx_args, 70);
      values[71] = PyTuple_GET_ITEM(__pyx_args, 71);
      values[72] = PyTuple_GET_ITEM(__pyx_args, 72);
      values[73] = PyTuple_GET_ITEM(__pyx_args, 73);
      values[74] = PyTuple_GET_ITEM(__pyx_args, 74);
      values[75] = PyTuple_GET_ITEM(__pyx_args, 75);
      values[76] = PyTuple_GET_ITEM(__pyx_args, 76);
      values[77] = PyTuple_GET_ITEM(__pyx_args, 77);
      values[78] = PyTuple_GET_ITEM(__pyx_args, 78);
      values[79] = PyTuple_GET_ITEM(__pyx_args, 79);
      values[80] = PyTuple_GET_ITEM(__pyx_args, 80);
      values[81] = PyTuple_GET_ITEM(__pyx_args, 81);
      values[82] = PyTuple_GET_ITEM(__pyx_args, 82);
      values[83] = PyTuple_GET_ITEM(__pyx_args, 83);
      values[84] = PyTuple_GET_ITEM(__pyx_args, 84);
      values[85] = PyTuple_GET_ITEM(__pyx_args, 85);
      values[86] = PyTuple_GET_ITEM(__pyx_args, 86);
      values[87] = PyTuple_GET_ITEM(__pyx_args, 87);
    }
    __pyx_v_dt = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_dt == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 366, __pyx_L3_error)
    __pyx_v_mesh_trial_ref = ((PyArrayObject *)values[1]);
    __pyx_v_mesh_grad_trial_ref = ((PyArrayObject *)values[2]);
    __pyx_v_mesh_dof = ((PyArrayObject *)values[3]);
    __pyx_v_mesh_velocity_dof = ((PyArrayObject *)values[4]);
    __pyx_v_MOVING_DOMAIN = __pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_MOVING_DOMAIN == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 371, __pyx_L3_error)
    __pyx_v_mesh_l2g = ((PyArrayObject *)values[6]);
    __pyx_v_dV_ref = ((PyArrayObject *)values[7]);
    __pyx_v_u_trial_ref = ((PyArrayObject *)values[8]);
    __pyx_v_u_grad_trial_ref = ((PyArrayObject *)values[9]);
    __pyx_v_u_test_ref = ((PyArrayObject *)values[10]);
    __pyx_v_u_grad_test_ref = ((PyArrayObject *)values[11]);
    __pyx_v_mesh_trial_trace_ref = ((PyArrayObject *)values[12]);
    __pyx_v_mesh_grad_trial_trace_ref = ((PyArrayObject *)values[13]);
    __pyx_v_dS_ref = ((PyArrayObject *)values[14]);
    __pyx_v_u_trial_trace_ref = ((PyArrayObject *)values[15]);
    __pyx_v_u_grad_trial_trace_ref = ((PyArrayObject *)values[16]);
    __pyx_v_u_test_trace_ref = ((PyArrayObject *)values[17]);
    __pyx_v_u_grad_test_trace_ref = ((PyArrayObject *)values[18]);
    __pyx_v_normal_ref = ((PyArrayObject *)values[19]);
    __pyx_v_boundaryJac_ref = ((PyArrayObject *)values[20]);
    __pyx_v_nElements_global = __Pyx_PyInt_As_int(values[21]); if (unlikely((__pyx_v_nElements_global == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 387, __pyx_L3_error)
    __pyx_v_useMetrics = __pyx_PyFloat_AsDouble(values[22]); if (unlikely((__pyx_v_useMetrics == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 388, __pyx_L3_error)
    __pyx_v_alphaBDF = __pyx_PyFloat_AsDouble(values[23]); if (unlikely((__pyx_v_alphaBDF == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 389, __pyx_L3_error)
    __pyx_v_lag_shockCapturing = __Pyx_PyInt_As_int(values[24]); if (unlikely((__pyx_v_lag_shockCapturing == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 390, __pyx_L3_error)
    __pyx_v_shockCapturingDiffusion = __pyx_PyFloat_AsDouble(values[25]); if (unlikely((__pyx_v_shockCapturingDiffusion == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 391, __pyx_L3_error)
    __pyx_v_sc_uref = __pyx_PyFloat_AsDouble(values[26]); if (unlikely((__pyx_v_sc_uref == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 392, __pyx_L3_error)
    __pyx_v_sc_alpha = __pyx_PyFloat_AsDouble(values[27]); if (unlikely((__pyx_v_sc_alpha == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 392, __pyx_L3_error)
    __pyx_v_q_porosity = ((PyArrayObject *)values[28]);
    __pyx_v_porosity_dof = ((PyArrayObject *)values[29]);
    __pyx_v_u_l2g = ((PyArrayObject *)values[30]);
    __pyx_v_elementDiameter = ((PyArrayObject *)values[31]);
    __pyx_v_degree_polynomial = __Pyx_PyInt_As_int(values[32]); if (unlikely((__pyx_v_degree_polynomial == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 399, __pyx_L3_error)
    __pyx_v_u_dof = ((PyArrayObject *)values[33]);
    __pyx_v_u_dof_old = ((PyArrayObject *)values[34]);
    __pyx_v_velocity = ((PyArrayObject *)values[35]);
    __pyx_v_q_m = ((PyArrayObject *)values[36]);
    __pyx_v_q_u = ((PyArrayObject *)values[37]);
    __pyx_v_q_m_betaBDF = ((PyArrayObject *)values[38]);
    __pyx_v_q_dV = ((PyArrayObject *)values[39]);
    __pyx_v_q_dV_last = ((PyArrayObject *)values[40]);
    __pyx_v_cfl = ((PyArrayObject *)values[41]);
    __pyx_v_edge_based_cfl = ((PyArrayObject *)values[42]);
    __pyx_v_q_numDiff_u = ((PyArrayObject *)values[43]);
    __pyx_v_q_numDiff_u_last = ((PyArrayObject *)values[44]);
    __pyx_v_offset_u = __Pyx_PyInt_As_int(values[45]); if (unlikely((__pyx_v_offset_u == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 412, __pyx_L3_error)
    __pyx_v_stride_u = __Pyx_PyInt_As_int(values[46]); if (unlikely((__pyx_v_stride_u == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 412, __pyx_L3_error)
    __pyx_v_globalResidual = ((PyArrayObject *)values[47]);
    __pyx_v_nExteriorElementBoundaries_global = __Pyx_PyInt_As_int(values[48]); if (unlikely((__pyx_v_nExteriorElementBoundaries_global == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 414, __pyx_L3_error)
    __pyx_v_exteriorElementBoundariesArray = ((PyArrayObject *)values[49]);
    __pyx_v_elementBoundaryElementsArray = ((PyArrayObject *)values[50]);
    __pyx_v_elementBoundaryLocalElementBoundariesArray = ((PyArrayObject *)values[51]);
    __pyx_v_ebqe_velocity_ext = ((PyArrayObject *)values[52]);
    __pyx_v_ebqe_porosity_ext = ((PyArrayObject *)values[53]);
    __pyx_v_isDOFBoundary_u = ((PyArrayObject *)values[54]);
    __pyx_v_ebqe_bc_u_ext = ((PyArrayObject *)values[55]);
    __pyx_v_isFluxBoundary_u = ((PyArrayObject *)values[56]);
    __pyx_v_ebqe_bc_flux_u_ext = ((PyArrayObject *)values[57]);
    __pyx_v_ebqe_phi = ((PyArrayObject *)values[58]);
    __pyx_v_epsFact = __pyx_PyFloat_AsDouble(values[59]); if (unlikely((__pyx_v_epsFact == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 426, __pyx_L3_error)
    __pyx_v_ebqe_u = ((PyArrayObject *)values[60]);
    __pyx_v_ebqe_flux = ((PyArrayObject *)values[61]);
    __pyx_v_cE = __pyx_PyFloat_AsDouble(values[62]); if (unlikely((__pyx_v_cE == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 429, __pyx_L3_error)
    __pyx_v_cK = __pyx_PyFloat_AsDouble(values[63]); if (unlikely((__pyx_v_cK == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 430, __pyx_L3_error)
    __pyx_v_uL = __pyx_PyFloat_AsDouble(values[64]); if (unlikely((__pyx_v_uL == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 431, __pyx_L3_error)
    __pyx_v_uR = __pyx_PyFloat_AsDouble(values[65]); if (unlikely((__pyx_v_uR == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 432, __pyx_L3_error)
    __pyx_v_numDOFs = __Pyx_PyInt_As_int(values[66]); if (unlikely((__pyx_v_numDOFs == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 433, __pyx_L3_error)
    __pyx_v_NNZ = __Pyx_PyInt_As_int(values[67]); if (unlikely((__pyx_v_NNZ == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 434, __pyx_L3_error)
    __pyx_v_csrRowIndeces_DofLoops = ((PyArrayObject *)values[68]);
    __pyx_v_csrColumnOffsets_DofLoops = ((PyArrayObject *)values[69]);
    __pyx_v_csrRowIndeces_CellLoops = ((PyArrayObject *)values[70]);
    __pyx_v_csrColumnOffsets_CellLoops = ((PyArrayObject *)values[71]);
    __pyx_v_csrColumnOffsets_eb_CellLoops = ((PyArrayObject *)values[72]);
    __pyx_v_Cx = ((PyArrayObject *)values[73]);
    __pyx_v_Cy = ((PyArrayObject *)values[74]);
    __pyx_v_Cz = ((PyArrayObject *)values[75]);
    __pyx_v_CTx = ((PyArrayObject *)values[76]);
    __pyx_v_CTy = ((PyArrayObject *)values[77]);
    __pyx_v_CTz = ((PyArrayObject *)values[78]);
    __pyx_v_ML = ((PyArrayObject *)values[79]);
    __pyx_v_LUMPED_MASS_MATRIX = __Pyx_PyInt_As_int(values[80]); if (unlikely((__pyx_v_LUMPED_MASS_MATRIX == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 447, __pyx_L3_error)
    __pyx_v_STABILIZATION_TYPE = __Pyx_PyInt_As_int(values[81]); if (unlikely((__pyx_v_STABILIZATION_TYPE == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 448, __pyx_L3_error)
    __pyx_v_ENTROPY_TYPE = __Pyx_PyInt_As_int(values[82]); if (unlikely((__pyx_v_ENTROPY_TYPE == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 449, __pyx_L3_error)
    __pyx_v_low_order_solution = ((PyArrayObject *)values[83]);
    __pyx_v_dt_times_dH_minus_dL = ((PyArrayObject *)values[84]);
    __pyx_v_min_u_bc = ((PyArrayObject *)values[85]);
    __pyx_v_max_u_bc = ((PyArrayObject *)values[86]);
    __pyx_v_quantDOFs = ((PyArrayObject *)values[87]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calculateResidual", 1, 88, 88, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 365, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mprans.cTIM.cTIM_base.calculateResidual", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "mesh_trial_ref", 0))) __PYX_ERR(0, 367, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_grad_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "mesh_grad_trial_ref", 0))) __PYX_ERR(0, 368, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_dof), __pyx_ptype_5numpy_ndarray, 1, "mesh_dof", 0))) __PYX_ERR(0, 369, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_velocity_dof), __pyx_ptype_5numpy_ndarray, 1, "mesh_velocity_dof", 0))) __PYX_ERR(0, 370, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_l2g), __pyx_ptype_5numpy_ndarray, 1, "mesh_l2g", 0))) __PYX_ERR(0, 372, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dV_ref), __pyx_ptype_5numpy_ndarray, 1, "dV_ref", 0))) __PYX_ERR(0, 373, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_u_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "u_trial_ref", 0))) __PYX_ERR(0, 374, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_u_grad_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "u_grad_trial_ref", 0))) __PYX_ERR(0, 375, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_u_test_ref), __pyx_ptype_5numpy_ndarray, 1, "u_test_ref", 0))) __PYX_ERR(0, 376, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_u_grad_test_ref), __pyx_ptype_5numpy_ndarray, 1, "u_grad_test_ref", 0))) __PYX_ERR(0, 377, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "mesh_trial_trace_ref", 0))) __PYX_ERR(0, 378, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_grad_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "mesh_grad_trial_trace_ref", 0))) __PYX_ERR(0, 379, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dS_ref), __pyx_ptype_5numpy_ndarray, 1, "dS_ref", 0))) __PYX_ERR(0, 380, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_u_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "u_trial_trace_ref", 0))) __PYX_ERR(0, 381, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_u_grad_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "u_grad_trial_trace_ref", 0))) __PYX_ERR(0, 382, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_u_test_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "u_test_trace_ref", 0))) __PYX_ERR(0, 383, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_u_grad_test_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "u_grad_test_trace_ref", 0))) __PYX_ERR(0, 384, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_normal_ref), __pyx_ptype_5numpy_ndarray, 1, "normal_ref", 0))) __PYX_ERR(0, 385, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_boundaryJac_ref), __pyx_ptype_5numpy_ndarray, 1, "boundaryJac_ref", 0))) __PYX_ERR(0, 386, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_porosity), __pyx_ptype_5numpy_ndarray, 1, "q_porosity", 0))) __PYX_ERR(0, 394, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_porosity_dof), __pyx_ptype_5numpy_ndarray, 1, "porosity_dof", 0))) __PYX_ERR(0, 395, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_u_l2g), __pyx_ptype_5numpy_ndarray, 1, "u_l2g", 0))) __PYX_ERR(0, 397, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_elementDiameter), __pyx_ptype_5numpy_ndarray, 1, "elementDiameter", 0))) __PYX_ERR(0, 398, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_u_dof), __pyx_ptype_5numpy_ndarray, 1, "u_dof", 0))) __PYX_ERR(0, 400, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_u_dof_old), __pyx_ptype_5numpy_ndarray, 1, "u_dof_old", 0))) __PYX_ERR(0, 401, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_velocity), __pyx_ptype_5numpy_ndarray, 1, "velocity", 0))) __PYX_ERR(0, 402, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_m), __pyx_ptype_5numpy_ndarray, 1, "q_m", 0))) __PYX_ERR(0, 403, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_u), __pyx_ptype_5numpy_ndarray, 1, "q_u", 0))) __PYX_ERR(0, 404, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_m_betaBDF), __pyx_ptype_5numpy_ndarray, 1, "q_m_betaBDF", 0))) __PYX_ERR(0, 405, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_dV), __pyx_ptype_5numpy_ndarray, 1, "q_dV", 0))) __PYX_ERR(0, 406, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_dV_last), __pyx_ptype_5numpy_ndarray, 1, "q_dV_last", 0))) __PYX_ERR(0, 407, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_cfl), __pyx_ptype_5numpy_ndarray, 1, "cfl", 0))) __PYX_ERR(0, 408, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_edge_based_cfl), __pyx_ptype_5numpy_ndarray, 1, "edge_based_cfl", 0))) __PYX_ERR(0, 409, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_numDiff_u), __pyx_ptype_5numpy_ndarray, 1, "q_numDiff_u", 0))) __PYX_ERR(0, 410, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_numDiff_u_last), __pyx_ptype_5numpy_ndarray, 1, "q_numDiff_u_last", 0))) __PYX_ERR(0, 411, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_globalResidual), __pyx_ptype_5numpy_ndarray, 1, "globalResidual", 0))) __PYX_ERR(0, 413, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_exteriorElementBoundariesArray), __pyx_ptype_5numpy_ndarray, 1, "exteriorElementBoundariesArray", 0))) __PYX_ERR(0, 415, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_elementBoundaryElementsArray), __pyx_ptype_5numpy_ndarray, 1, "elementBoundaryElementsArray", 0))) __PYX_ERR(0, 416, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_elementBoundaryLocalElementBoundariesArray), __pyx_ptype_5numpy_ndarray, 1, "elementBoundaryLocalElementBoundariesArray", 0))) __PYX_ERR(0, 417, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_velocity_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_velocity_ext", 0))) __PYX_ERR(0, 418, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_porosity_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_porosity_ext", 0))) __PYX_ERR(0, 420, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isDOFBoundary_u), __pyx_ptype_5numpy_ndarray, 1, "isDOFBoundary_u", 0))) __PYX_ERR(0, 422, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_u_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_u_ext", 0))) __PYX_ERR(0, 423, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isFluxBoundary_u), __pyx_ptype_5numpy_ndarray, 1, "isFluxBoundary_u", 0))) __PYX_ERR(0, 424, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_flux_u_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_flux_u_ext", 0))) __PYX_ERR(0, 425, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_phi), __pyx_ptype_5numpy_ndarray, 1, "ebqe_phi", 0))) __PYX_ERR(0, 426, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_u), __pyx_ptype_5numpy_ndarray, 1, "ebqe_u", 0))) __PYX_ERR(0, 427, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_flux), __pyx_ptype_5numpy_ndarray, 1, "ebqe_flux", 0))) __PYX_ERR(0, 428, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_DofLoops), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_DofLoops", 0))) __PYX_ERR(0, 435, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_DofLoops), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_DofLoops", 0))) __PYX_ERR(0, 436, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_CellLoops), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_CellLoops", 0))) __PYX_ERR(0, 437, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_CellLoops), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_CellLoops", 0))) __PYX_ERR(0, 438, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_CellLoops), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_CellLoops", 0))) __PYX_ERR(0, 439, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_Cx), __pyx_ptype_5numpy_ndarray, 1, "Cx", 0))) __PYX_ERR(0, 440, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_Cy), __pyx_ptype_5numpy_ndarray, 1, "Cy", 0))) __PYX_ERR(0, 441, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_Cz), __pyx_ptype_5numpy_ndarray, 1, "Cz", 0))) __PYX_ERR(0, 442, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_CTx), __pyx_ptype_5numpy_ndarray, 1, "CTx", 0))) __PYX_ERR(0, 443, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_CTy), __pyx_ptype_5numpy_ndarray, 1, "CTy", 0))) __PYX_ERR(0, 444, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_CTz), __pyx_ptype_5numpy_ndarray, 1, "CTz", 0))) __PYX_ERR(0, 445, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ML), __pyx_ptype_5numpy_ndarray, 1, "ML", 0))) __PYX_ERR(0, 446, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_low_order_solution), __pyx_ptype_5numpy_ndarray, 1, "low_order_solution", 0))) __PYX_ERR(0, 450, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dt_times_dH_minus_dL), __pyx_ptype_5numpy_ndarray, 1, "dt_times_dH_minus_dL", 0))) __PYX_ERR(0, 451, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_min_u_bc), __pyx_ptype_5numpy_ndarray, 1, "min_u_bc", 0))) __PYX_ERR(0, 452, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_max_u_bc), __pyx_ptype_5numpy_ndarray, 1, "max_u_bc", 0))) __PYX_ERR(0, 453, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_quantDOFs), __pyx_ptype_5numpy_ndarray, 1, "quantDOFs", 0))) __PYX_ERR(0, 454, __pyx_L1_error)
  __pyx_r = __pyx_pf_6mprans_4cTIM_9cTIM_base_6calculateResidual(((struct __pyx_obj_6mprans_4cTIM_cTIM_base *)__pyx_v_self), __pyx_v_dt, __pyx_v_mesh_trial_ref, __pyx_v_mesh_grad_trial_ref, __pyx_v_mesh_dof, __pyx_v_mesh_velocity_dof, __pyx_v_MOVING_DOMAIN, __pyx_v_mesh_l2g, __pyx_v_dV_ref, __pyx_v_u_trial_ref, __pyx_v_u_grad_trial_ref, __pyx_v_u_test_ref, __pyx_v_u_grad_test_ref, __pyx_v_mesh_trial_trace_ref, __pyx_v_mesh_grad_trial_trace_ref, __pyx_v_dS_ref, __pyx_v_u_trial_trace_ref, __pyx_v_u_grad_trial_trace_ref, __pyx_v_u_test_trace_ref, __pyx_v_u_grad_test_trace_ref, __pyx_v_normal_ref, __pyx_v_boundaryJac_ref, __pyx_v_nElements_global, __pyx_v_useMetrics, __pyx_v_alphaBDF, __pyx_v_lag_shockCapturing, __pyx_v_shockCapturingDiffusion, __pyx_v_sc_uref, __pyx_v_sc_alpha, __pyx_v_q_porosity, __pyx_v_porosity_dof, __pyx_v_u_l2g, __pyx_v_elementDiameter, __pyx_v_degree_polynomial, __pyx_v_u_dof, __pyx_v_u_dof_old, __pyx_v_velocity, __pyx_v_q_m, __pyx_v_q_u, __pyx_v_q_m_betaBDF, __pyx_v_q_dV, __pyx_v_q_dV_last, __pyx_v_cfl, __pyx_v_edge_based_cfl, __pyx_v_q_numDiff_u, __pyx_v_q_numDiff_u_last, __pyx_v_offset_u, __pyx_v_stride_u, __pyx_v_globalResidual, __pyx_v_nExteriorElementBoundaries_global, __pyx_v_exteriorElementBoundariesArray, __pyx_v_elementBoundaryElementsArray, __pyx_v_elementBoundaryLocalElementBoundariesArray, __pyx_v_ebqe_velocity_ext, __pyx_v_ebqe_porosity_ext, __pyx_v_isDOFBoundary_u, __pyx_v_ebqe_bc_u_ext, __pyx_v_isFluxBoundary_u, __pyx_v_ebqe_bc_flux_u_ext, __pyx_v_ebqe_phi, __pyx_v_epsFact, __pyx_v_ebqe_u, __pyx_v_ebqe_flux, __pyx_v_cE, __pyx_v_cK, __pyx_v_uL, __pyx_v_uR, __pyx_v_numDOFs, __pyx_v_NNZ, __pyx_v_csrRowIndeces_DofLoops, __pyx_v_csrColumnOffsets_DofLoops, __pyx_v_csrRowIndeces_CellLoops, __pyx_v_csrColumnOffsets_CellLoops, __pyx_v_csrColumnOffsets_eb_CellLoops, __pyx_v_Cx, __pyx_v_Cy, __pyx_v_Cz, __pyx_v_CTx, __pyx_v_CTy, __pyx_v_CTz, __pyx_v_ML, __pyx_v_LUMPED_MASS_MATRIX, __pyx_v_STABILIZATION_TYPE, __pyx_v_ENTROPY_TYPE, __pyx_v_low_order_solution, __pyx_v_dt_times_dH_minus_dL, __pyx_v_min_u_bc, __pyx_v_max_u_bc, __pyx_v_quantDOFs);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6mprans_4cTIM_9cTIM_base_6calculateResidual(struct __pyx_obj_6mprans_4cTIM_cTIM_base *__pyx_v_self, double __pyx_v_dt, PyArrayObject *__pyx_v_mesh_trial_ref, PyArrayObject *__pyx_v_mesh_grad_trial_ref, PyArrayObject *__pyx_v_mesh_dof, PyArrayObject *__pyx_v_mesh_velocity_dof, double __pyx_v_MOVING_DOMAIN, PyArrayObject *__pyx_v_mesh_l2g, PyArrayObject *__pyx_v_dV_ref, PyArrayObject *__pyx_v_u_trial_ref, PyArrayObject *__pyx_v_u_grad_trial_ref, PyArrayObject *__pyx_v_u_test_ref, PyArrayObject *__pyx_v_u_grad_test_ref, PyArrayObject *__pyx_v_mesh_trial_trace_ref, PyArrayObject *__pyx_v_mesh_grad_trial_trace_ref, PyArrayObject *__pyx_v_dS_ref, PyArrayObject *__pyx_v_u_trial_trace_ref, PyArrayObject *__pyx_v_u_grad_trial_trace_ref, PyArrayObject *__pyx_v_u_test_trace_ref, PyArrayObject *__pyx_v_u_grad_test_trace_ref, PyArrayObject *__pyx_v_normal_ref, PyArrayObject *__pyx_v_boundaryJac_ref, int __pyx_v_nElements_global, double __pyx_v_useMetrics, double __pyx_v_alphaBDF, int __pyx_v_lag_shockCapturing, double __pyx_v_shockCapturingDiffusion, double __pyx_v_sc_uref, double __pyx_v_sc_alpha, PyArrayObject *__pyx_v_q_porosity, PyArrayObject *__pyx_v_porosity_dof, PyArrayObject *__pyx_v_u_l2g, PyArrayObject *__pyx_v_elementDiameter, int __pyx_v_degree_polynomial, PyArrayObject *__pyx_v_u_dof, PyArrayObject *__pyx_v_u_dof_old, PyArrayObject *__pyx_v_velocity, PyArrayObject *__pyx_v_q_m, PyArrayObject *__pyx_v_q_u, PyArrayObject *__pyx_v_q_m_betaBDF, PyArrayObject *__pyx_v_q_dV, PyArrayObject *__pyx_v_q_dV_last, PyArrayObject *__pyx_v_cfl, PyArrayObject *__pyx_v_edge_based_cfl, PyArrayObject *__pyx_v_q_numDiff_u, PyArrayObject *__pyx_v_q_numDiff_u_last, int __pyx_v_offset_u, int __pyx_v_stride_u, PyArrayObject *__pyx_v_globalResidual, int __pyx_v_nExteriorElementBoundaries_global, PyArrayObject *__pyx_v_exteriorElementBoundariesArray, PyArrayObject *__pyx_v_elementBoundaryElementsArray, PyArrayObject *__pyx_v_elementBoundaryLocalElementBoundariesArray, PyArrayObject *__pyx_v_ebqe_velocity_ext, PyArrayObject *__pyx_v_ebqe_porosity_ext, PyArrayObject *__pyx_v_isDOFBoundary_u, PyArrayObject *__pyx_v_ebqe_bc_u_ext, PyArrayObject *__pyx_v_isFluxBoundary_u, PyArrayObject *__pyx_v_ebqe_bc_flux_u_ext, PyArrayObject *__pyx_v_ebqe_phi, double __pyx_v_epsFact, PyArrayObject *__pyx_v_ebqe_u, PyArrayObject *__pyx_v_ebqe_flux, double __pyx_v_cE, double __pyx_v_cK, double __pyx_v_uL, double __pyx_v_uR, int __pyx_v_numDOFs, int __pyx_v_NNZ, PyArrayObject *__pyx_v_csrRowIndeces_DofLoops, PyArrayObject *__pyx_v_csrColumnOffsets_DofLoops, PyArrayObject *__pyx_v_csrRowIndeces_CellLoops, PyArrayObject *__pyx_v_csrColumnOffsets_CellLoops, PyArrayObject *__pyx_v_csrColumnOffsets_eb_CellLoops, PyArrayObject *__pyx_v_Cx, PyArrayObject *__pyx_v_Cy, PyArrayObject *__pyx_v_Cz, PyArrayObject *__pyx_v_CTx, PyArrayObject *__pyx_v_CTy, PyArrayObject *__pyx_v_CTz, PyArrayObject *__pyx_v_ML, int __pyx_v_LUMPED_MASS_MATRIX, int __pyx_v_STABILIZATION_TYPE, int __pyx_v_ENTROPY_TYPE, PyArrayObject *__pyx_v_low_order_solution, PyArrayObject *__pyx_v_dt_times_dH_minus_dL, PyArrayObject *__pyx_v_min_u_bc, PyArrayObject *__pyx_v_max_u_bc, PyArrayObject *__pyx_v_quantDOFs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calculateResidual", 0);

  /* "mprans/cTIM.pyx":455
 *                          numpy.ndarray max_u_bc,
 *                          numpy.ndarray quantDOFs):
 *        self.thisptr.calculateResidual(dt,             # <<<<<<<<<<<<<<
 *                                        <double*> mesh_trial_ref.data,
 *                                        <double*> mesh_grad_trial_ref.data,
 */
  __pyx_v_self->thisptr->calculateResidual(__pyx_v_dt, ((double *)__pyx_v_mesh_trial_ref->data), ((double *)__pyx_v_mesh_grad_trial_ref->data), ((double *)__pyx_v_mesh_dof->data), ((double *)__pyx_v_mesh_velocity_dof->data), __pyx_v_MOVING_DOMAIN, ((int *)__pyx_v_mesh_l2g->data), ((double *)__pyx_v_dV_ref->data), ((double *)__pyx_v_u_trial_ref->data), ((double *)__pyx_v_u_grad_trial_ref->data), ((double *)__pyx_v_u_test_ref->data), ((double *)__pyx_v_u_grad_test_ref->data), ((double *)__pyx_v_mesh_trial_trace_ref->data), ((double *)__pyx_v_mesh_grad_trial_trace_ref->data), ((double *)__pyx_v_dS_ref->data), ((double *)__pyx_v_u_trial_trace_ref->data), ((double *)__pyx_v_u_grad_trial_trace_ref->data), ((double *)__pyx_v_u_test_trace_ref->data), ((double *)__pyx_v_u_grad_test_trace_ref->data), ((double *)__pyx_v_normal_ref->data), ((double *)__pyx_v_boundaryJac_ref->data), __pyx_v_nElements_global, __pyx_v_useMetrics, __pyx_v_alphaBDF, __pyx_v_lag_shockCapturing, __pyx_v_shockCapturingDiffusion, __pyx_v_sc_uref, __pyx_v_sc_alpha, ((double *)__pyx_v_q_porosity->data), ((double *)__pyx_v_porosity_dof->data), ((int *)__pyx_v_u_l2g->data), ((double *)__pyx_v_elementDiameter->data), __pyx_v_degree_polynomial, ((double *)__pyx_v_u_dof->data), ((double *)__pyx_v_u_dof_old->data), ((double *)__pyx_v_velocity->data), ((double *)__pyx_v_q_m->data), ((double *)__pyx_v_q_u->data), ((double *)__pyx_v_q_m_betaBDF->data), ((double *)__pyx_v_q_dV->data), ((double *)__pyx_v_q_dV_last->data), ((double *)__pyx_v_cfl->data), ((double *)__pyx_v_edge_based_cfl->data), ((double *)__pyx_v_q_numDiff_u->data), ((double *)__pyx_v_q_numDiff_u_last->data), __pyx_v_offset_u, __pyx_v_stride_u, ((double *)__pyx_v_globalResidual->data), __pyx_v_nExteriorElementBoundaries_global, ((int *)__pyx_v_exteriorElementBoundariesArray->data), ((int *)__pyx_v_elementBoundaryElementsArray->data), ((int *)__pyx_v_elementBoundaryLocalElementBoundariesArray->data), ((double *)__pyx_v_ebqe_velocity_ext->data), ((double *)__pyx_v_ebqe_porosity_ext->data), ((int *)__pyx_v_isDOFBoundary_u->data), ((double *)__pyx_v_ebqe_bc_u_ext->data), ((int *)__pyx_v_isFluxBoundary_u->data), ((double *)__pyx_v_ebqe_bc_flux_u_ext->data), ((double *)__pyx_v_ebqe_phi->data), __pyx_v_epsFact, ((double *)__pyx_v_ebqe_u->data), ((double *)__pyx_v_ebqe_flux->data), __pyx_v_cE, __pyx_v_cK, __pyx_v_uL, __pyx_v_uR, __pyx_v_numDOFs, __pyx_v_NNZ, ((int *)__pyx_v_csrRowIndeces_DofLoops->data), ((int *)__pyx_v_csrColumnOffsets_DofLoops->data), ((int *)__pyx_v_csrRowIndeces_CellLoops->data), ((int *)__pyx_v_csrColumnOffsets_CellLoops->data), ((int *)__pyx_v_csrColumnOffsets_eb_CellLoops->data), ((double *)__pyx_v_Cx->data), ((double *)__pyx_v_Cy->data), ((double *)__pyx_v_Cz->data), ((double *)__pyx_v_CTx->data), ((double *)__pyx_v_CTy->data), ((double *)__pyx_v_CTz->data), ((double *)__pyx_v_ML->data), __pyx_v_LUMPED_MASS_MATRIX, __pyx_v_STABILIZATION_TYPE, __pyx_v_ENTROPY_TYPE, ((double *)__pyx_v_low_order_solution->data), ((double *)__pyx_v_dt_times_dH_minus_dL->data), ((double *)__pyx_v_min_u_bc->data), ((double *)__pyx_v_max_u_bc->data), ((double *)__pyx_v_quantDOFs->data));

  /* "mprans/cTIM.pyx":365
 *                             <double*> max_u_bc.data,
 *                             LUMPED_MASS_MATRIX)
 *    def calculateResidual(self,             # <<<<<<<<<<<<<<
 *                          double dt,
 *                          numpy.ndarray mesh_trial_ref,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mprans/cTIM.pyx":545
 *                                        <double*> max_u_bc.data,
 *                                        <double*> quantDOFs.data)
 *    def calculateResidual_entropy_viscosity(self,             # <<<<<<<<<<<<<<
 *                          double dt,
 *                          numpy.ndarray mesh_trial_ref,
 */

/* Python wrapper */
static PyObject *__pyx_pw_6mprans_4cTIM_9cTIM_base_9calculateResidual_entropy_viscosity(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6mprans_4cTIM_9cTIM_base_9calculateResidual_entropy_viscosity(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_dt;
  PyArrayObject *__pyx_v_mesh_trial_ref = 0;
  PyArrayObject *__pyx_v_mesh_grad_trial_ref = 0;
  PyArrayObject *__pyx_v_mesh_dof = 0;
  PyArrayObject *__pyx_v_mesh_velocity_dof = 0;
  double __pyx_v_MOVING_DOMAIN;
  PyArrayObject *__pyx_v_mesh_l2g = 0;
  PyArrayObject *__pyx_v_dV_ref = 0;
  PyArrayObject *__pyx_v_u_trial_ref = 0;
  PyArrayObject *__pyx_v_u_grad_trial_ref = 0;
  PyArrayObject *__pyx_v_u_test_ref = 0;
  PyArrayObject *__pyx_v_u_grad_test_ref = 0;
  PyArrayObject *__pyx_v_mesh_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_mesh_grad_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_dS_ref = 0;
  PyArrayObject *__pyx_v_u_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_u_grad_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_u_test_trace_ref = 0;
  PyArrayObject *__pyx_v_u_grad_test_trace_ref = 0;
  PyArrayObject *__pyx_v_normal_ref = 0;
  PyArrayObject *__pyx_v_boundaryJac_ref = 0;
  int __pyx_v_nElements_global;
  double __pyx_v_useMetrics;
  double __pyx_v_alphaBDF;
  int __pyx_v_lag_shockCapturing;
  double __pyx_v_shockCapturingDiffusion;
  double __pyx_v_sc_uref;
  double __pyx_v_sc_alpha;
  PyArrayObject *__pyx_v_q_porosity = 0;
  PyArrayObject *__pyx_v_porosity_dof = 0;
  PyArrayObject *__pyx_v_u_l2g = 0;
  PyArrayObject *__pyx_v_elementDiameter = 0;
  int __pyx_v_degree_polynomial;
  PyArrayObject *__pyx_v_u_dof = 0;
  PyArrayObject *__pyx_v_u_dof_old = 0;
  PyArrayObject *__pyx_v_velocity = 0;
  PyArrayObject *__pyx_v_q_m = 0;
  PyArrayObject *__pyx_v_q_u = 0;
  PyArrayObject *__pyx_v_q_m_betaBDF = 0;
  PyArrayObject *__pyx_v_q_dV = 0;
  PyArrayObject *__pyx_v_q_dV_last = 0;
  PyArrayObject *__pyx_v_cfl = 0;
  PyArrayObject *__pyx_v_edge_based_cfl = 0;
  PyArrayObject *__pyx_v_q_numDiff_u = 0;
  PyArrayObject *__pyx_v_q_numDiff_u_last = 0;
  int __pyx_v_offset_u;
  int __pyx_v_stride_u;
  PyArrayObject *__pyx_v_globalResidual = 0;
  int __pyx_v_nExteriorElementBoundaries_global;
  PyArrayObject *__pyx_v_exteriorElementBoundariesArray = 0;
  PyArrayObject *__pyx_v_elementBoundaryElementsArray = 0;
  PyArrayObject *__pyx_v_elementBoundaryLocalElementBoundariesArray = 0;
  PyArrayObject *__pyx_v_ebqe_velocity_ext = 0;
  PyArrayObject *__pyx_v_ebqe_porosity_ext = 0;
  PyArrayObject *__pyx_v_isDOFBoundary_u = 0;
  PyArrayObject *__pyx_v_ebqe_bc_u_ext = 0;
  PyArrayObject *__pyx_v_isFluxBoundary_u = 0;
  PyArrayObject *__pyx_v_ebqe_bc_flux_u_ext = 0;
  PyArrayObject *__pyx_v_ebqe_phi = 0;
  double __pyx_v_epsFact;
  PyArrayObject *__pyx_v_ebqe_u = 0;
  PyArrayObject *__pyx_v_ebqe_flux = 0;
  double __pyx_v_cE;
  double __pyx_v_cK;
  double __pyx_v_uL;
  double __pyx_v_uR;
  int __pyx_v_numDOFs;
  int __pyx_v_NNZ;
  PyArrayObject *__pyx_v_csrRowIndeces_DofLoops = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_DofLoops = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_CellLoops = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_CellLoops = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_CellLoops = 0;
  PyArrayObject *__pyx_v_Cx = 0;
  PyArrayObject *__pyx_v_Cy = 0;
  PyArrayObject *__pyx_v_Cz = 0;
  PyArrayObject *__pyx_v_CTx = 0;
  PyArrayObject *__pyx_v_CTy = 0;
  PyArrayObject *__pyx_v_CTz = 0;
  PyArrayObject *__pyx_v_ML = 0;
  int __pyx_v_LUMPED_MASS_MATRIX;
  int __pyx_v_STABILIZATION_TYPE;
  int __pyx_v_ENTROPY_TYPE;
  PyArrayObject *__pyx_v_low_order_solution = 0;
  PyArrayObject *__pyx_v_dt_times_dH_minus_dL = 0;
  PyArrayObject *__pyx_v_min_u_bc = 0;
  PyArrayObject *__pyx_v_max_u_bc = 0;
  PyArrayObject *__pyx_v_quantDOFs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calculateResidual_entropy_viscosity (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dt,&__pyx_n_s_mesh_trial_ref,&__pyx_n_s_mesh_grad_trial_ref,&__pyx_n_s_mesh_dof,&__pyx_n_s_mesh_velocity_dof,&__pyx_n_s_MOVING_DOMAIN,&__pyx_n_s_mesh_l2g,&__pyx_n_s_dV_ref,&__pyx_n_s_u_trial_ref,&__pyx_n_s_u_grad_trial_ref,&__pyx_n_s_u_test_ref,&__pyx_n_s_u_grad_test_ref,&__pyx_n_s_mesh_trial_trace_ref,&__pyx_n_s_mesh_grad_trial_trace_ref,&__pyx_n_s_dS_ref,&__pyx_n_s_u_trial_trace_ref,&__pyx_n_s_u_grad_trial_trace_ref,&__pyx_n_s_u_test_trace_ref,&__pyx_n_s_u_grad_test_trace_ref,&__pyx_n_s_normal_ref,&__pyx_n_s_boundaryJac_ref,&__pyx_n_s_nElements_global,&__pyx_n_s_useMetrics,&__pyx_n_s_alphaBDF,&__pyx_n_s_lag_shockCapturing,&__pyx_n_s_shockCapturingDiffusion,&__pyx_n_s_sc_uref,&__pyx_n_s_sc_alpha,&__pyx_n_s_q_porosity,&__pyx_n_s_porosity_dof,&__pyx_n_s_u_l2g,&__pyx_n_s_elementDiameter,&__pyx_n_s_degree_polynomial,&__pyx_n_s_u_dof,&__pyx_n_s_u_dof_old,&__pyx_n_s_velocity,&__pyx_n_s_q_m,&__pyx_n_s_q_u,&__pyx_n_s_q_m_betaBDF,&__pyx_n_s_q_dV,&__pyx_n_s_q_dV_last,&__pyx_n_s_cfl,&__pyx_n_s_edge_based_cfl,&__pyx_n_s_q_numDiff_u,&__pyx_n_s_q_numDiff_u_last,&__pyx_n_s_offset_u,&__pyx_n_s_stride_u,&__pyx_n_s_globalResidual,&__pyx_n_s_nExteriorElementBoundaries_globa,&__pyx_n_s_exteriorElementBoundariesArray,&__pyx_n_s_elementBoundaryElementsArray,&__pyx_n_s_elementBoundaryLocalElementBound,&__pyx_n_s_ebqe_velocity_ext,&__pyx_n_s_ebqe_porosity_ext,&__pyx_n_s_isDOFBoundary_u,&__pyx_n_s_ebqe_bc_u_ext,&__pyx_n_s_isFluxBoundary_u,&__pyx_n_s_ebqe_bc_flux_u_ext,&__pyx_n_s_ebqe_phi,&__pyx_n_s_epsFact,&__pyx_n_s_ebqe_u,&__pyx_n_s_ebqe_flux,&__pyx_n_s_cE,&__pyx_n_s_cK,&__pyx_n_s_uL,&__pyx_n_s_uR,&__pyx_n_s_numDOFs,&__pyx_n_s_NNZ,&__pyx_n_s_csrRowIndeces_DofLoops,&__pyx_n_s_csrColumnOffsets_DofLoops,&__pyx_n_s_csrRowIndeces_CellLoops,&__pyx_n_s_csrColumnOffsets_CellLoops,&__pyx_n_s_csrColumnOffsets_eb_CellLoops,&__pyx_n_s_Cx,&__pyx_n_s_Cy,&__pyx_n_s_Cz,&__pyx_n_s_CTx,&__pyx_n_s_CTy,&__pyx_n_s_CTz,&__pyx_n_s_ML,&__pyx_n_s_LUMPED_MASS_MATRIX,&__pyx_n_s_STABILIZATION_TYPE,&__pyx_n_s_ENTROPY_TYPE,&__pyx_n_s_low_order_solution,&__pyx_n_s_dt_times_dH_minus_dL,&__pyx_n_s_min_u_bc,&__pyx_n_s_max_u_bc,&__pyx_n_s_quantDOFs,0};
    PyObject* values[88] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 88: values[87] = PyTuple_GET_ITEM(__pyx_args, 87);
        case 87: values[86] = PyTuple_GET_ITEM(__pyx_args, 86);
        case 86: values[85] = PyTuple_GET_ITEM(__pyx_args, 85);
        case 85: values[84] = PyTuple_GET_ITEM(__pyx_args, 84);
        case 84: values[83] = PyTuple_GET_ITEM(__pyx_args, 83);
        case 83: values[82] = PyTuple_GET_ITEM(__pyx_args, 82);
        case 82: values[81] = PyTuple_GET_ITEM(__pyx_args, 81);
        case 81: values[80] = PyTuple_GET_ITEM(__pyx_args, 80);
        case 80: values[79] = PyTuple_GET_ITEM(__pyx_args, 79);
        case 79: values[78] = PyTuple_GET_ITEM(__pyx_args, 78);
        case 78: values[77] = PyTuple_GET_ITEM(__pyx_args, 77);
        case 77: values[76] = PyTuple_GET_ITEM(__pyx_args, 76);
        case 76: values[75] = PyTuple_GET_ITEM(__pyx_args, 75);
        case 75: values[74] = PyTuple_GET_ITEM(__pyx_args, 74);
        case 74: values[73] = PyTuple_GET_ITEM(__pyx_args, 73);
        case 73: values[72] = PyTuple_GET_ITEM(__pyx_args, 72);
        case 72: values[71] = PyTuple_GET_ITEM(__pyx_args, 71);
        case 71: values[70] = PyTuple_GET_ITEM(__pyx_args, 70);
        case 70: values[69] = PyTuple_GET_ITEM(__pyx_args, 69);
        case 69: values[68] = PyTuple_GET_ITEM(__pyx_args, 68);
        case 68: values[67] = PyTuple_GET_ITEM(__pyx_args, 67);
        case 67: values[66] = PyTuple_GET_ITEM(__pyx_args, 66);
        case 66: values[65] = PyTuple_GET_ITEM(__pyx_args, 65);
        case 65: values[64] = PyTuple_GET_ITEM(__pyx_args, 64);
        case 64: values[63] = PyTuple_GET_ITEM(__pyx_args, 63);
        case 63: values[62] = PyTuple_GET_ITEM(__pyx_args, 62);
        case 62: values[61] = PyTuple_GET_ITEM(__pyx_args, 61);
        case 61: values[60] = PyTuple_GET_ITEM(__pyx_args, 60);
        case 60: values[59] = PyTuple_GET_ITEM(__pyx_args, 59);
        case 59: values[58] = PyTuple_GET_ITEM(__pyx_args, 58);
        case 58: values[57] = PyTuple_GET_ITEM(__pyx_args, 57);
        case 57: values[56] = PyTuple_GET_ITEM(__pyx_args, 56);
        case 56: values[55] = PyTuple_GET_ITEM(__pyx_args, 55);
        case 55: values[54] = PyTuple_GET_ITEM(__pyx_args, 54);
        case 54: values[53] = PyTuple_GET_ITEM(__pyx_args, 53);
        case 53: values[52] = PyTuple_GET_ITEM(__pyx_args, 52);
        case 52: values[51] = PyTuple_GET_ITEM(__pyx_args, 51);
        case 51: values[50] = PyTuple_GET_ITEM(__pyx_args, 50);
        case 50: values[49] = PyTuple_GET_ITEM(__pyx_args, 49);
        case 49: values[48] = PyTuple_GET_ITEM(__pyx_args, 48);
        case 48: values[47] = PyTuple_GET_ITEM(__pyx_args, 47);
        case 47: values[46] = PyTuple_GET_ITEM(__pyx_args, 46);
        case 46: values[45] = PyTuple_GET_ITEM(__pyx_args, 45);
        case 45: values[44] = PyTuple_GET_ITEM(__pyx_args, 44);
        case 44: values[43] = PyTuple_GET_ITEM(__pyx_args, 43);
        case 43: values[42] = PyTuple_GET_ITEM(__pyx_args, 42);
        case 42: values[41] = PyTuple_GET_ITEM(__pyx_args, 41);
        case 41: values[40] = PyTuple_GET_ITEM(__pyx_args, 40);
        case 40: values[39] = PyTuple_GET_ITEM(__pyx_args, 39);
        case 39: values[38] = PyTuple_GET_ITEM(__pyx_args, 38);
        case 38: values[37] = PyTuple_GET_ITEM(__pyx_args, 37);
        case 37: values[36] = PyTuple_GET_ITEM(__pyx_args, 36);
        case 36: values[35] = PyTuple_GET_ITEM(__pyx_args, 35);
        case 35: values[34] = PyTuple_GET_ITEM(__pyx_args, 34);
        case 34: values[33] = PyTuple_GET_ITEM(__pyx_args, 33);
        case 33: values[32] = PyTuple_GET_ITEM(__pyx_args, 32);
        case 32: values[31] = PyTuple_GET_ITEM(__pyx_args, 31);
        case 31: values[30] = PyTuple_GET_ITEM(__pyx_args, 30);
        case 30: values[29] = PyTuple_GET_ITEM(__pyx_args, 29);
        case 29: values[28] = PyTuple_GET_ITEM(__pyx_args, 28);
        case 28: values[27] = PyTuple_GET_ITEM(__pyx_args, 27);
        case 27: values[26] = PyTuple_GET_ITEM(__pyx_args, 26);
        case 26: values[25] = PyTuple_GET_ITEM(__pyx_args, 25);
        case 25: values[24] = PyTuple_GET_ITEM(__pyx_args, 24);
        case 24: values[23] = PyTuple_GET_ITEM(__pyx_args, 23);
        case 23: values[22] = PyTuple_GET_ITEM(__pyx_args, 22);
        case 22: values[21] = PyTuple_GET_ITEM(__pyx_args, 21);
        case 21: values[20] = PyTuple_GET_ITEM(__pyx_args, 20);
        case 20: values[19] = PyTuple_GET_ITEM(__pyx_args, 19);
        case 19: values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
        case 18: values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
        case 17: values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dt)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_trial_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 1); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_grad_trial_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 2); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 3); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_velocity_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 4); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_MOVING_DOMAIN)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 5); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_l2g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 6); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case  7:
        if (likely((values[7] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dV_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 7); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case  8:
        if (likely((values[8] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_u_trial_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 8); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case  9:
        if (likely((values[9] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_u_grad_trial_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 9); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 10:
        if (likely((values[10] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_u_test_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 10); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 11:
        if (likely((values[11] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_u_grad_test_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 11); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 12:
        if (likely((values[12] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 12); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 13:
        if (likely((values[13] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_grad_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 13); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 14:
        if (likely((values[14] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dS_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 14); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 15:
        if (likely((values[15] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_u_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 15); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 16:
        if (likely((values[16] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_u_grad_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 16); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 17:
        if (likely((values[17] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_u_test_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 17); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 18:
        if (likely((values[18] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_u_grad_test_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 18); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 19:
        if (likely((values[19] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_normal_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 19); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 20:
        if (likely((values[20] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_boundaryJac_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 20); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 21:
        if (likely((values[21] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nElements_global)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 21); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 22:
        if (likely((values[22] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_useMetrics)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 22); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 23:
        if (likely((values[23] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_alphaBDF)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 23); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 24:
        if (likely((values[24] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_lag_shockCapturing)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 24); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 25:
        if (likely((values[25] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_shockCapturingDiffusion)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 25); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 26:
        if (likely((values[26] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sc_uref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 26); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 27:
        if (likely((values[27] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sc_alpha)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 27); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 28:
        if (likely((values[28] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_porosity)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 28); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 29:
        if (likely((values[29] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_porosity_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 29); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 30:
        if (likely((values[30] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_u_l2g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 30); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 31:
        if (likely((values[31] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_elementDiameter)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 31); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 32:
        if (likely((values[32] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_degree_polynomial)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 32); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 33:
        if (likely((values[33] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_u_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 33); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 34:
        if (likely((values[34] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_u_dof_old)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 34); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 35:
        if (likely((values[35] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_velocity)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 35); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 36:
        if (likely((values[36] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 36); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 37:
        if (likely((values[37] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 37); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 38:
        if (likely((values[38] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_m_betaBDF)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 38); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 39:
        if (likely((values[39] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_dV)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 39); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 40:
        if (likely((values[40] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_dV_last)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 40); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 41:
        if (likely((values[41] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cfl)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 41); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 42:
        if (likely((values[42] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_edge_based_cfl)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 42); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 43:
        if (likely((values[43] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_numDiff_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 43); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 44:
        if (likely((values[44] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_numDiff_u_last)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 44); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 45:
        if (likely((values[45] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_offset_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 45); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 46:
        if (likely((values[46] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stride_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 46); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 47:
        if (likely((values[47] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_globalResidual)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 47); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 48:
        if (likely((values[48] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nExteriorElementBoundaries_globa)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 48); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 49:
        if (likely((values[49] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_exteriorElementBoundariesArray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 49); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 50:
        if (likely((values[50] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_elementBoundaryElementsArray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 50); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 51:
        if (likely((values[51] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_elementBoundaryLocalElementBound)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 51); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 52:
        if (likely((values[52] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_velocity_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 52); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 53:
        if (likely((values[53] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_porosity_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 53); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 54:
        if (likely((values[54] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isDOFBoundary_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 54); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 55:
        if (likely((values[55] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_u_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 55); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 56:
        if (likely((values[56] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isFluxBoundary_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 56); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 57:
        if (likely((values[57] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_flux_u_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 57); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 58:
        if (likely((values[58] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_phi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 58); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 59:
        if (likely((values[59] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_epsFact)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 59); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 60:
        if (likely((values[60] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 60); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 61:
        if (likely((values[61] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_flux)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 61); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 62:
        if (likely((values[62] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cE)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 62); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 63:
        if (likely((values[63] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cK)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 63); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 64:
        if (likely((values[64] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_uL)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 64); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 65:
        if (likely((values[65] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_uR)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 65); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 66:
        if (likely((values[66] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_numDOFs)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 66); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 67:
        if (likely((values[67] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_NNZ)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 67); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 68:
        if (likely((values[68] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_DofLoops)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 68); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 69:
        if (likely((values[69] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_DofLoops)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 69); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 70:
        if (likely((values[70] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_CellLoops)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 70); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 71:
        if (likely((values[71] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_CellLoops)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 71); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 72:
        if (likely((values[72] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_CellLoops)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 72); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 73:
        if (likely((values[73] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Cx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 73); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 74:
        if (likely((values[74] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Cy)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 74); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 75:
        if (likely((values[75] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Cz)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 75); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 76:
        if (likely((values[76] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_CTx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 76); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 77:
        if (likely((values[77] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_CTy)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 77); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 78:
        if (likely((values[78] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_CTz)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 78); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 79:
        if (likely((values[79] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ML)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 79); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 80:
        if (likely((values[80] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_LUMPED_MASS_MATRIX)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 80); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 81:
        if (likely((values[81] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_STABILIZATION_TYPE)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 81); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 82:
        if (likely((values[82] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ENTROPY_TYPE)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 82); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 83:
        if (likely((values[83] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_low_order_solution)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 83); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 84:
        if (likely((values[84] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dt_times_dH_minus_dL)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 84); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 85:
        if (likely((values[85] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_min_u_bc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 85); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 86:
        if (likely((values[86] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_u_bc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 86); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        case 87:
        if (likely((values[87] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_quantDOFs)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, 87); __PYX_ERR(0, 545, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calculateResidual_entropy_viscosity") < 0)) __PYX_ERR(0, 545, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 88) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
      values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
      values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
      values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
      values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
      values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
      values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
      values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
      values[19] = PyTuple_GET_ITEM(__pyx_args, 19);
      values[20] = PyTuple_GET_ITEM(__pyx_args, 20);
      values[21] = PyTuple_GET_ITEM(__pyx_args, 21);
      values[22] = PyTuple_GET_ITEM(__pyx_args, 22);
      values[23] = PyTuple_GET_ITEM(__pyx_args, 23);
      values[24] = PyTuple_GET_ITEM(__pyx_args, 24);
      values[25] = PyTuple_GET_ITEM(__pyx_args, 25);
      values[26] = PyTuple_GET_ITEM(__pyx_args, 26);
      values[27] = PyTuple_GET_ITEM(__pyx_args, 27);
      values[28] = PyTuple_GET_ITEM(__pyx_args, 28);
      values[29] = PyTuple_GET_ITEM(__pyx_args, 29);
      values[30] = PyTuple_GET_ITEM(__pyx_args, 30);
      values[31] = PyTuple_GET_ITEM(__pyx_args, 31);
      values[32] = PyTuple_GET_ITEM(__pyx_args, 32);
      values[33] = PyTuple_GET_ITEM(__pyx_args, 33);
      values[34] = PyTuple_GET_ITEM(__pyx_args, 34);
      values[35] = PyTuple_GET_ITEM(__pyx_args, 35);
      values[36] = PyTuple_GET_ITEM(__pyx_args, 36);
      values[37] = PyTuple_GET_ITEM(__pyx_args, 37);
      values[38] = PyTuple_GET_ITEM(__pyx_args, 38);
      values[39] = PyTuple_GET_ITEM(__pyx_args, 39);
      values[40] = PyTuple_GET_ITEM(__pyx_args, 40);
      values[41] = PyTuple_GET_ITEM(__pyx_args, 41);
      values[42] = PyTuple_GET_ITEM(__pyx_args, 42);
      values[43] = PyTuple_GET_ITEM(__pyx_args, 43);
      values[44] = PyTuple_GET_ITEM(__pyx_args, 44);
      values[45] = PyTuple_GET_ITEM(__pyx_args, 45);
      values[46] = PyTuple_GET_ITEM(__pyx_args, 46);
      values[47] = PyTuple_GET_ITEM(__pyx_args, 47);
      values[48] = PyTuple_GET_ITEM(__pyx_args, 48);
      values[49] = PyTuple_GET_ITEM(__pyx_args, 49);
      values[50] = PyTuple_GET_ITEM(__pyx_args, 50);
      values[51] = PyTuple_GET_ITEM(__pyx_args, 51);
      values[52] = PyTuple_GET_ITEM(__pyx_args, 52);
      values[53] = PyTuple_GET_ITEM(__pyx_args, 53);
      values[54] = PyTuple_GET_ITEM(__pyx_args, 54);
      values[55] = PyTuple_GET_ITEM(__pyx_args, 55);
      values[56] = PyTuple_GET_ITEM(__pyx_args, 56);
      values[57] = PyTuple_GET_ITEM(__pyx_args, 57);
      values[58] = PyTuple_GET_ITEM(__pyx_args, 58);
      values[59] = PyTuple_GET_ITEM(__pyx_args, 59);
      values[60] = PyTuple_GET_ITEM(__pyx_args, 60);
      values[61] = PyTuple_GET_ITEM(__pyx_args, 61);
      values[62] = PyTuple_GET_ITEM(__pyx_args, 62);
      values[63] = PyTuple_GET_ITEM(__pyx_args, 63);
      values[64] = PyTuple_GET_ITEM(__pyx_args, 64);
      values[65] = PyTuple_GET_ITEM(__pyx_args, 65);
      values[66] = PyTuple_GET_ITEM(__pyx_args, 66);
      values[67] = PyTuple_GET_ITEM(__pyx_args, 67);
      values[68] = PyTuple_GET_ITEM(__pyx_args, 68);
      values[69] = PyTuple_GET_ITEM(__pyx_args, 69);
      values[70] = PyTuple_GET_ITEM(__pyx_args, 70);
      values[71] = PyTuple_GET_ITEM(__pyx_args, 71);
      values[72] = PyTuple_GET_ITEM(__pyx_args, 72);
      values[73] = PyTuple_GET_ITEM(__pyx_args, 73);
      values[74] = PyTuple_GET_ITEM(__pyx_args, 74);
      values[75] = PyTuple_GET_ITEM(__pyx_args, 75);
      values[76] = PyTuple_GET_ITEM(__pyx_args, 76);
      values[77] = PyTuple_GET_ITEM(__pyx_args, 77);
      values[78] = PyTuple_GET_ITEM(__pyx_args, 78);
      values[79] = PyTuple_GET_ITEM(__pyx_args, 79);
      values[80] = PyTuple_GET_ITEM(__pyx_args, 80);
      values[81] = PyTuple_GET_ITEM(__pyx_args, 81);
      values[82] = PyTuple_GET_ITEM(__pyx_args, 82);
      values[83] = PyTuple_GET_ITEM(__pyx_args, 83);
      values[84] = PyTuple_GET_ITEM(__pyx_args, 84);
      values[85] = PyTuple_GET_ITEM(__pyx_args, 85);
      values[86] = PyTuple_GET_ITEM(__pyx_args, 86);
      values[87] = PyTuple_GET_ITEM(__pyx_args, 87);
    }
    __pyx_v_dt = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_dt == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 546, __pyx_L3_error)
    __pyx_v_mesh_trial_ref = ((PyArrayObject *)values[1]);
    __pyx_v_mesh_grad_trial_ref = ((PyArrayObject *)values[2]);
    __pyx_v_mesh_dof = ((PyArrayObject *)values[3]);
    __pyx_v_mesh_velocity_dof = ((PyArrayObject *)values[4]);
    __pyx_v_MOVING_DOMAIN = __pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_MOVING_DOMAIN == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 551, __pyx_L3_error)
    __pyx_v_mesh_l2g = ((PyArrayObject *)values[6]);
    __pyx_v_dV_ref = ((PyArrayObject *)values[7]);
    __pyx_v_u_trial_ref = ((PyArrayObject *)values[8]);
    __pyx_v_u_grad_trial_ref = ((PyArrayObject *)values[9]);
    __pyx_v_u_test_ref = ((PyArrayObject *)values[10]);
    __pyx_v_u_grad_test_ref = ((PyArrayObject *)values[11]);
    __pyx_v_mesh_trial_trace_ref = ((PyArrayObject *)values[12]);
    __pyx_v_mesh_grad_trial_trace_ref = ((PyArrayObject *)values[13]);
    __pyx_v_dS_ref = ((PyArrayObject *)values[14]);
    __pyx_v_u_trial_trace_ref = ((PyArrayObject *)values[15]);
    __pyx_v_u_grad_trial_trace_ref = ((PyArrayObject *)values[16]);
    __pyx_v_u_test_trace_ref = ((PyArrayObject *)values[17]);
    __pyx_v_u_grad_test_trace_ref = ((PyArrayObject *)values[18]);
    __pyx_v_normal_ref = ((PyArrayObject *)values[19]);
    __pyx_v_boundaryJac_ref = ((PyArrayObject *)values[20]);
    __pyx_v_nElements_global = __Pyx_PyInt_As_int(values[21]); if (unlikely((__pyx_v_nElements_global == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 567, __pyx_L3_error)
    __pyx_v_useMetrics = __pyx_PyFloat_AsDouble(values[22]); if (unlikely((__pyx_v_useMetrics == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 568, __pyx_L3_error)
    __pyx_v_alphaBDF = __pyx_PyFloat_AsDouble(values[23]); if (unlikely((__pyx_v_alphaBDF == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 569, __pyx_L3_error)
    __pyx_v_lag_shockCapturing = __Pyx_PyInt_As_int(values[24]); if (unlikely((__pyx_v_lag_shockCapturing == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 570, __pyx_L3_error)
    __pyx_v_shockCapturingDiffusion = __pyx_PyFloat_AsDouble(values[25]); if (unlikely((__pyx_v_shockCapturingDiffusion == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 571, __pyx_L3_error)
    __pyx_v_sc_uref = __pyx_PyFloat_AsDouble(values[26]); if (unlikely((__pyx_v_sc_uref == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 572, __pyx_L3_error)
    __pyx_v_sc_alpha = __pyx_PyFloat_AsDouble(values[27]); if (unlikely((__pyx_v_sc_alpha == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 572, __pyx_L3_error)
    __pyx_v_q_porosity = ((PyArrayObject *)values[28]);
    __pyx_v_porosity_dof = ((PyArrayObject *)values[29]);
    __pyx_v_u_l2g = ((PyArrayObject *)values[30]);
    __pyx_v_elementDiameter = ((PyArrayObject *)values[31]);
    __pyx_v_degree_polynomial = __Pyx_PyInt_As_int(values[32]); if (unlikely((__pyx_v_degree_polynomial == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 579, __pyx_L3_error)
    __pyx_v_u_dof = ((PyArrayObject *)values[33]);
    __pyx_v_u_dof_old = ((PyArrayObject *)values[34]);
    __pyx_v_velocity = ((PyArrayObject *)values[35]);
    __pyx_v_q_m = ((PyArrayObject *)values[36]);
    __pyx_v_q_u = ((PyArrayObject *)values[37]);
    __pyx_v_q_m_betaBDF = ((PyArrayObject *)values[38]);
    __pyx_v_q_dV = ((PyArrayObject *)values[39]);
    __pyx_v_q_dV_last = ((PyArrayObject *)values[40]);
    __pyx_v_cfl = ((PyArrayObject *)values[41]);
    __pyx_v_edge_based_cfl = ((PyArrayObject *)values[42]);
    __pyx_v_q_numDiff_u = ((PyArrayObject *)values[43]);
    __pyx_v_q_numDiff_u_last = ((PyArrayObject *)values[44]);
    __pyx_v_offset_u = __Pyx_PyInt_As_int(values[45]); if (unlikely((__pyx_v_offset_u == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 592, __pyx_L3_error)
    __pyx_v_stride_u = __Pyx_PyInt_As_int(values[46]); if (unlikely((__pyx_v_stride_u == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 592, __pyx_L3_error)
    __pyx_v_globalResidual = ((PyArrayObject *)values[47]);
    __pyx_v_nExteriorElementBoundaries_global = __Pyx_PyInt_As_int(values[48]); if (unlikely((__pyx_v_nExteriorElementBoundaries_global == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 594, __pyx_L3_error)
    __pyx_v_exteriorElementBoundariesArray = ((PyArrayObject *)values[49]);
    __pyx_v_elementBoundaryElementsArray = ((PyArrayObject *)values[50]);
    __pyx_v_elementBoundaryLocalElementBoundariesArray = ((PyArrayObject *)values[51]);
    __pyx_v_ebqe_velocity_ext = ((PyArrayObject *)values[52]);
    __pyx_v_ebqe_porosity_ext = ((PyArrayObject *)values[53]);
    __pyx_v_isDOFBoundary_u = ((PyArrayObject *)values[54]);
    __pyx_v_ebqe_bc_u_ext = ((PyArrayObject *)values[55]);
    __pyx_v_isFluxBoundary_u = ((PyArrayObject *)values[56]);
    __pyx_v_ebqe_bc_flux_u_ext = ((PyArrayObject *)values[57]);
    __pyx_v_ebqe_phi = ((PyArrayObject *)values[58]);
    __pyx_v_epsFact = __pyx_PyFloat_AsDouble(values[59]); if (unlikely((__pyx_v_epsFact == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 606, __pyx_L3_error)
    __pyx_v_ebqe_u = ((PyArrayObject *)values[60]);
    __pyx_v_ebqe_flux = ((PyArrayObject *)values[61]);
    __pyx_v_cE = __pyx_PyFloat_AsDouble(values[62]); if (unlikely((__pyx_v_cE == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 609, __pyx_L3_error)
    __pyx_v_cK = __pyx_PyFloat_AsDouble(values[63]); if (unlikely((__pyx_v_cK == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 610, __pyx_L3_error)
    __pyx_v_uL = __pyx_PyFloat_AsDouble(values[64]); if (unlikely((__pyx_v_uL == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 611, __pyx_L3_error)
    __pyx_v_uR = __pyx_PyFloat_AsDouble(values[65]); if (unlikely((__pyx_v_uR == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 612, __pyx_L3_error)
    __pyx_v_numDOFs = __Pyx_PyInt_As_int(values[66]); if (unlikely((__pyx_v_numDOFs == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 613, __pyx_L3_error)
    __pyx_v_NNZ = __Pyx_PyInt_As_int(values[67]); if (unlikely((__pyx_v_NNZ == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 614, __pyx_L3_error)
    __pyx_v_csrRowIndeces_DofLoops = ((PyArrayObject *)values[68]);
    __pyx_v_csrColumnOffsets_DofLoops = ((PyArrayObject *)values[69]);
    __pyx_v_csrRowIndeces_CellLoops = ((PyArrayObject *)values[70]);
    __pyx_v_csrColumnOffsets_CellLoops = ((PyArrayObject *)values[71]);
    __pyx_v_csrColumnOffsets_eb_CellLoops = ((PyArrayObject *)values[72]);
    __pyx_v_Cx = ((PyArrayObject *)values[73]);
    __pyx_v_Cy = ((PyArrayObject *)values[74]);
    __pyx_v_Cz = ((PyArrayObject *)values[75]);
    __pyx_v_CTx = ((PyArrayObject *)values[76]);
    __pyx_v_CTy = ((PyArrayObject *)values[77]);
    __pyx_v_CTz = ((PyArrayObject *)values[78]);
    __pyx_v_ML = ((PyArrayObject *)values[79]);
    __pyx_v_LUMPED_MASS_MATRIX = __Pyx_PyInt_As_int(values[80]); if (unlikely((__pyx_v_LUMPED_MASS_MATRIX == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 627, __pyx_L3_error)
    __pyx_v_STABILIZATION_TYPE = __Pyx_PyInt_As_int(values[81]); if (unlikely((__pyx_v_STABILIZATION_TYPE == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 628, __pyx_L3_error)
    __pyx_v_ENTROPY_TYPE = __Pyx_PyInt_As_int(values[82]); if (unlikely((__pyx_v_ENTROPY_TYPE == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 629, __pyx_L3_error)
    __pyx_v_low_order_solution = ((PyArrayObject *)values[83]);
    __pyx_v_dt_times_dH_minus_dL = ((PyArrayObject *)values[84]);
    __pyx_v_min_u_bc = ((PyArrayObject *)values[85]);
    __pyx_v_max_u_bc = ((PyArrayObject *)values[86]);
    __pyx_v_quantDOFs = ((PyArrayObject *)values[87]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calculateResidual_entropy_viscosity", 1, 88, 88, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 545, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mprans.cTIM.cTIM_base.calculateResidual_entropy_viscosity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "mesh_trial_ref", 0))) __PYX_ERR(0, 547, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_grad_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "mesh_grad_trial_ref", 0))) __PYX_ERR(0, 548, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_dof), __pyx_ptype_5numpy_ndarray, 1, "mesh_dof", 0))) __PYX_ERR(0, 549, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_velocity_dof), __pyx_ptype_5numpy_ndarray, 1, "mesh_velocity_dof", 0))) __PYX_ERR(0, 550, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_l2g), __pyx_ptype_5numpy_ndarray, 1, "mesh_l2g", 0))) __PYX_ERR(0, 552, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dV_ref), __pyx_ptype_5numpy_ndarray, 1, "dV_ref", 0))) __PYX_ERR(0, 553, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_u_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "u_trial_ref", 0))) __PYX_ERR(0, 554, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_u_grad_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "u_grad_trial_ref", 0))) __PYX_ERR(0, 555, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_u_test_ref), __pyx_ptype_5numpy_ndarray, 1, "u_test_ref", 0))) __PYX_ERR(0, 556, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_u_grad_test_ref), __pyx_ptype_5numpy_ndarray, 1, "u_grad_test_ref", 0))) __PYX_ERR(0, 557, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "mesh_trial_trace_ref", 0))) __PYX_ERR(0, 558, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_grad_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "mesh_grad_trial_trace_ref", 0))) __PYX_ERR(0, 559, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dS_ref), __pyx_ptype_5numpy_ndarray, 1, "dS_ref", 0))) __PYX_ERR(0, 560, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_u_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "u_trial_trace_ref", 0))) __PYX_ERR(0, 561, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_u_grad_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "u_grad_trial_trace_ref", 0))) __PYX_ERR(0, 562, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_u_test_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "u_test_trace_ref", 0))) __PYX_ERR(0, 563, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_u_grad_test_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "u_grad_test_trace_ref", 0))) __PYX_ERR(0, 564, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_normal_ref), __pyx_ptype_5numpy_ndarray, 1, "normal_ref", 0))) __PYX_ERR(0, 565, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_boundaryJac_ref), __pyx_ptype_5numpy_ndarray, 1, "boundaryJac_ref", 0))) __PYX_ERR(0, 566, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_porosity), __pyx_ptype_5numpy_ndarray, 1, "q_porosity", 0))) __PYX_ERR(0, 574, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_porosity_dof), __pyx_ptype_5numpy_ndarray, 1, "porosity_dof", 0))) __PYX_ERR(0, 575, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_u_l2g), __pyx_ptype_5numpy_ndarray, 1, "u_l2g", 0))) __PYX_ERR(0, 577, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_elementDiameter), __pyx_ptype_5numpy_ndarray, 1, "elementDiameter", 0))) __PYX_ERR(0, 578, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_u_dof), __pyx_ptype_5numpy_ndarray, 1, "u_dof", 0))) __PYX_ERR(0, 580, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_u_dof_old), __pyx_ptype_5numpy_ndarray, 1, "u_dof_old", 0))) __PYX_ERR(0, 581, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_velocity), __pyx_ptype_5numpy_ndarray, 1, "velocity", 0))) __PYX_ERR(0, 582, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_m), __pyx_ptype_5numpy_ndarray, 1, "q_m", 0))) __PYX_ERR(0, 583, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_u), __pyx_ptype_5numpy_ndarray, 1, "q_u", 0))) __PYX_ERR(0, 584, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_m_betaBDF), __pyx_ptype_5numpy_ndarray, 1, "q_m_betaBDF", 0))) __PYX_ERR(0, 585, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_dV), __pyx_ptype_5numpy_ndarray, 1, "q_dV", 0))) __PYX_ERR(0, 586, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_dV_last), __pyx_ptype_5numpy_ndarray, 1, "q_dV_last", 0))) __PYX_ERR(0, 587, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_cfl), __pyx_ptype_5numpy_ndarray, 1, "cfl", 0))) __PYX_ERR(0, 588, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_edge_based_cfl), __pyx_ptype_5numpy_ndarray, 1, "edge_based_cfl", 0))) __PYX_ERR(0, 589, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_numDiff_u), __pyx_ptype_5numpy_ndarray, 1, "q_numDiff_u", 0))) __PYX_ERR(0, 590, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_numDiff_u_last), __pyx_ptype_5numpy_ndarray, 1, "q_numDiff_u_last", 0))) __PYX_ERR(0, 591, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_globalResidual), __pyx_ptype_5numpy_ndarray, 1, "globalResidual", 0))) __PYX_ERR(0, 593, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_exteriorElementBoundariesArray), __pyx_ptype_5numpy_ndarray, 1, "exteriorElementBoundariesArray", 0))) __PYX_ERR(0, 595, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_elementBoundaryElementsArray), __pyx_ptype_5numpy_ndarray, 1, "elementBoundaryElementsArray", 0))) __PYX_ERR(0, 596, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_elementBoundaryLocalElementBoundariesArray), __pyx_ptype_5numpy_ndarray, 1, "elementBoundaryLocalElementBoundariesArray", 0))) __PYX_ERR(0, 597, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_velocity_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_velocity_ext", 0))) __PYX_ERR(0, 598, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_porosity_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_porosity_ext", 0))) __PYX_ERR(0, 600, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isDOFBoundary_u), __pyx_ptype_5numpy_ndarray, 1, "isDOFBoundary_u", 0))) __PYX_ERR(0, 602, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_u_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_u_ext", 0))) __PYX_ERR(0, 603, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isFluxBoundary_u), __pyx_ptype_5numpy_ndarray, 1, "isFluxBoundary_u", 0))) __PYX_ERR(0, 604, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_flux_u_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_flux_u_ext", 0))) __PYX_ERR(0, 605, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_phi), __pyx_ptype_5numpy_ndarray, 1, "ebqe_phi", 0))) __PYX_ERR(0, 606, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_u), __pyx_ptype_5numpy_ndarray, 1, "ebqe_u", 0))) __PYX_ERR(0, 607, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_flux), __pyx_ptype_5numpy_ndarray, 1, "ebqe_flux", 0))) __PYX_ERR(0, 608, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_DofLoops), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_DofLoops", 0))) __PYX_ERR(0, 615, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_DofLoops), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_DofLoops", 0))) __PYX_ERR(0, 616, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_CellLoops), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_CellLoops", 0))) __PYX_ERR(0, 617, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_CellLoops), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_CellLoops", 0))) __PYX_ERR(0, 618, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_CellLoops), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_CellLoops", 0))) __PYX_ERR(0, 619, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_Cx), __pyx_ptype_5numpy_ndarray, 1, "Cx", 0))) __PYX_ERR(0, 620, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_Cy), __pyx_ptype_5numpy_ndarray, 1, "Cy", 0))) __PYX_ERR(0, 621, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_Cz), __pyx_ptype_5numpy_ndarray, 1, "Cz", 0))) __PYX_ERR(0, 622, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_CTx), __pyx_ptype_5numpy_ndarray, 1, "CTx", 0))) __PYX_ERR(0, 623, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_CTy), __pyx_ptype_5numpy_ndarray, 1, "CTy", 0))) __PYX_ERR(0, 624, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_CTz), __pyx_ptype_5numpy_ndarray, 1, "CTz", 0))) __PYX_ERR(0, 625, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ML), __pyx_ptype_5numpy_ndarray, 1, "ML", 0))) __PYX_ERR(0, 626, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_low_order_solution), __pyx_ptype_5numpy_ndarray, 1, "low_order_solution", 0))) __PYX_ERR(0, 630, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dt_times_dH_minus_dL), __pyx_ptype_5numpy_ndarray, 1, "dt_times_dH_minus_dL", 0))) __PYX_ERR(0, 631, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_min_u_bc), __pyx_ptype_5numpy_ndarray, 1, "min_u_bc", 0))) __PYX_ERR(0, 632, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_max_u_bc), __pyx_ptype_5numpy_ndarray, 1, "max_u_bc", 0))) __PYX_ERR(0, 633, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_quantDOFs), __pyx_ptype_5numpy_ndarray, 1, "quantDOFs", 0))) __PYX_ERR(0, 634, __pyx_L1_error)
  __pyx_r = __pyx_pf_6mprans_4cTIM_9cTIM_base_8calculateResidual_entropy_viscosity(((struct __pyx_obj_6mprans_4cTIM_cTIM_base *)__pyx_v_self), __pyx_v_dt, __pyx_v_mesh_trial_ref, __pyx_v_mesh_grad_trial_ref, __pyx_v_mesh_dof, __pyx_v_mesh_velocity_dof, __pyx_v_MOVING_DOMAIN, __pyx_v_mesh_l2g, __pyx_v_dV_ref, __pyx_v_u_trial_ref, __pyx_v_u_grad_trial_ref, __pyx_v_u_test_ref, __pyx_v_u_grad_test_ref, __pyx_v_mesh_trial_trace_ref, __pyx_v_mesh_grad_trial_trace_ref, __pyx_v_dS_ref, __pyx_v_u_trial_trace_ref, __pyx_v_u_grad_trial_trace_ref, __pyx_v_u_test_trace_ref, __pyx_v_u_grad_test_trace_ref, __pyx_v_normal_ref, __pyx_v_boundaryJac_ref, __pyx_v_nElements_global, __pyx_v_useMetrics, __pyx_v_alphaBDF, __pyx_v_lag_shockCapturing, __pyx_v_shockCapturingDiffusion, __pyx_v_sc_uref, __pyx_v_sc_alpha, __pyx_v_q_porosity, __pyx_v_porosity_dof, __pyx_v_u_l2g, __pyx_v_elementDiameter, __pyx_v_degree_polynomial, __pyx_v_u_dof, __pyx_v_u_dof_old, __pyx_v_velocity, __pyx_v_q_m, __pyx_v_q_u, __pyx_v_q_m_betaBDF, __pyx_v_q_dV, __pyx_v_q_dV_last, __pyx_v_cfl, __pyx_v_edge_based_cfl, __pyx_v_q_numDiff_u, __pyx_v_q_numDiff_u_last, __pyx_v_offset_u, __pyx_v_stride_u, __pyx_v_globalResidual, __pyx_v_nExteriorElementBoundaries_global, __pyx_v_exteriorElementBoundariesArray, __pyx_v_elementBoundaryElementsArray, __pyx_v_elementBoundaryLocalElementBoundariesArray, __pyx_v_ebqe_velocity_ext, __pyx_v_ebqe_porosity_ext, __pyx_v_isDOFBoundary_u, __pyx_v_ebqe_bc_u_ext, __pyx_v_isFluxBoundary_u, __pyx_v_ebqe_bc_flux_u_ext, __pyx_v_ebqe_phi, __pyx_v_epsFact, __pyx_v_ebqe_u, __pyx_v_ebqe_flux, __pyx_v_cE, __pyx_v_cK, __pyx_v_uL, __pyx_v_uR, __pyx_v_numDOFs, __pyx_v_NNZ, __pyx_v_csrRowIndeces_DofLoops, __pyx_v_csrColumnOffsets_DofLoops, __pyx_v_csrRowIndeces_CellLoops, __pyx_v_csrColumnOffsets_CellLoops, __pyx_v_csrColumnOffsets_eb_CellLoops, __pyx_v_Cx, __pyx_v_Cy, __pyx_v_Cz, __pyx_v_CTx, __pyx_v_CTy, __pyx_v_CTz, __pyx_v_ML, __pyx_v_LUMPED_MASS_MATRIX, __pyx_v_STABILIZATION_TYPE, __pyx_v_ENTROPY_TYPE, __pyx_v_low_order_solution, __pyx_v_dt_times_dH_minus_dL, __pyx_v_min_u_bc, __pyx_v_max_u_bc, __pyx_v_quantDOFs);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6mprans_4cTIM_9cTIM_base_8calculateResidual_entropy_viscosity(struct __pyx_obj_6mprans_4cTIM_cTIM_base *__pyx_v_self, double __pyx_v_dt, PyArrayObject *__pyx_v_mesh_trial_ref, PyArrayObject *__pyx_v_mesh_grad_trial_ref, PyArrayObject *__pyx_v_mesh_dof, PyArrayObject *__pyx_v_mesh_velocity_dof, double __pyx_v_MOVING_DOMAIN, PyArrayObject *__pyx_v_mesh_l2g, PyArrayObject *__pyx_v_dV_ref, PyArrayObject *__pyx_v_u_trial_ref, PyArrayObject *__pyx_v_u_grad_trial_ref, PyArrayObject *__pyx_v_u_test_ref, PyArrayObject *__pyx_v_u_grad_test_ref, PyArrayObject *__pyx_v_mesh_trial_trace_ref, PyArrayObject *__pyx_v_mesh_grad_trial_trace_ref, PyArrayObject *__pyx_v_dS_ref, PyArrayObject *__pyx_v_u_trial_trace_ref, PyArrayObject *__pyx_v_u_grad_trial_trace_ref, PyArrayObject *__pyx_v_u_test_trace_ref, PyArrayObject *__pyx_v_u_grad_test_trace_ref, PyArrayObject *__pyx_v_normal_ref, PyArrayObject *__pyx_v_boundaryJac_ref, int __pyx_v_nElements_global, double __pyx_v_useMetrics, double __pyx_v_alphaBDF, int __pyx_v_lag_shockCapturing, double __pyx_v_shockCapturingDiffusion, double __pyx_v_sc_uref, double __pyx_v_sc_alpha, PyArrayObject *__pyx_v_q_porosity, PyArrayObject *__pyx_v_porosity_dof, PyArrayObject *__pyx_v_u_l2g, PyArrayObject *__pyx_v_elementDiameter, int __pyx_v_degree_polynomial, PyArrayObject *__pyx_v_u_dof, PyArrayObject *__pyx_v_u_dof_old, PyArrayObject *__pyx_v_velocity, PyArrayObject *__pyx_v_q_m, PyArrayObject *__pyx_v_q_u, PyArrayObject *__pyx_v_q_m_betaBDF, PyArrayObject *__pyx_v_q_dV, PyArrayObject *__pyx_v_q_dV_last, PyArrayObject *__pyx_v_cfl, PyArrayObject *__pyx_v_edge_based_cfl, PyArrayObject *__pyx_v_q_numDiff_u, PyArrayObject *__pyx_v_q_numDiff_u_last, int __pyx_v_offset_u, int __pyx_v_stride_u, PyArrayObject *__pyx_v_globalResidual, int __pyx_v_nExteriorElementBoundaries_global, PyArrayObject *__pyx_v_exteriorElementBoundariesArray, PyArrayObject *__pyx_v_elementBoundaryElementsArray, PyArrayObject *__pyx_v_elementBoundaryLocalElementBoundariesArray, PyArrayObject *__pyx_v_ebqe_velocity_ext, PyArrayObject *__pyx_v_ebqe_porosity_ext, PyArrayObject *__pyx_v_isDOFBoundary_u, PyArrayObject *__pyx_v_ebqe_bc_u_ext, PyArrayObject *__pyx_v_isFluxBoundary_u, PyArrayObject *__pyx_v_ebqe_bc_flux_u_ext, PyArrayObject *__pyx_v_ebqe_phi, double __pyx_v_epsFact, PyArrayObject *__pyx_v_ebqe_u, PyArrayObject *__pyx_v_ebqe_flux, double __pyx_v_cE, double __pyx_v_cK, double __pyx_v_uL, double __pyx_v_uR, int __pyx_v_numDOFs, int __pyx_v_NNZ, PyArrayObject *__pyx_v_csrRowIndeces_DofLoops, PyArrayObject *__pyx_v_csrColumnOffsets_DofLoops, PyArrayObject *__pyx_v_csrRowIndeces_CellLoops, PyArrayObject *__pyx_v_csrColumnOffsets_CellLoops, PyArrayObject *__pyx_v_csrColumnOffsets_eb_CellLoops, PyArrayObject *__pyx_v_Cx, PyArrayObject *__pyx_v_Cy, PyArrayObject *__pyx_v_Cz, PyArrayObject *__pyx_v_CTx, PyArrayObject *__pyx_v_CTy, PyArrayObject *__pyx_v_CTz, PyArrayObject *__pyx_v_ML, int __pyx_v_LUMPED_MASS_MATRIX, int __pyx_v_STABILIZATION_TYPE, int __pyx_v_ENTROPY_TYPE, PyArrayObject *__pyx_v_low_order_solution, PyArrayObject *__pyx_v_dt_times_dH_minus_dL, PyArrayObject *__pyx_v_min_u_bc, PyArrayObject *__pyx_v_max_u_bc, PyArrayObject *__pyx_v_quantDOFs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calculateResidual_entropy_viscosity", 0);

  /* "mprans/cTIM.pyx":635
 *                          numpy.ndarray max_u_bc,
 *                          numpy.ndarray quantDOFs):
 *        self.thisptr.calculateResidual_entropy_viscosity(dt,             # <<<<<<<<<<<<<<
 *                                        <double*> mesh_trial_ref.data,
 *                                        <double*> mesh_grad_trial_ref.data,
 */
  __pyx_v_self->thisptr->calculateResidual_entropy_viscosity(__pyx_v_dt, ((double *)__pyx_v_mesh_trial_ref->data), ((double *)__pyx_v_mesh_grad_trial_ref->data), ((double *)__pyx_v_mesh_dof->data), ((double *)__pyx_v_mesh_velocity_dof->data), __pyx_v_MOVING_DOMAIN, ((int *)__pyx_v_mesh_l2g->data), ((double *)__pyx_v_dV_ref->data), ((double *)__pyx_v_u_trial_ref->data), ((double *)__pyx_v_u_grad_trial_ref->data), ((double *)__pyx_v_u_test_ref->data), ((double *)__pyx_v_u_grad_test_ref->data), ((double *)__pyx_v_mesh_trial_trace_ref->data), ((double *)__pyx_v_mesh_grad_trial_trace_ref->data), ((double *)__pyx_v_dS_ref->data), ((double *)__pyx_v_u_trial_trace_ref->data), ((double *)__pyx_v_u_grad_trial_trace_ref->data), ((double *)__pyx_v_u_test_trace_ref->data), ((double *)__pyx_v_u_grad_test_trace_ref->data), ((double *)__pyx_v_normal_ref->data), ((double *)__pyx_v_boundaryJac_ref->data), __pyx_v_nElements_global, __pyx_v_useMetrics, __pyx_v_alphaBDF, __pyx_v_lag_shockCapturing, __pyx_v_shockCapturingDiffusion, __pyx_v_sc_uref, __pyx_v_sc_alpha, ((double *)__pyx_v_q_porosity->data), ((double *)__pyx_v_porosity_dof->data), ((int *)__pyx_v_u_l2g->data), ((double *)__pyx_v_elementDiameter->data), __pyx_v_degree_polynomial, ((double *)__pyx_v_u_dof->data), ((double *)__pyx_v_u_dof_old->data), ((double *)__pyx_v_velocity->data), ((double *)__pyx_v_q_m->data), ((double *)__pyx_v_q_u->data), ((double *)__pyx_v_q_m_betaBDF->data), ((double *)__pyx_v_q_dV->data), ((double *)__pyx_v_q_dV_last->data), ((double *)__pyx_v_cfl->data), ((double *)__pyx_v_edge_based_cfl->data), ((double *)__pyx_v_q_numDiff_u->data), ((double *)__pyx_v_q_numDiff_u_last->data), __pyx_v_offset_u, __pyx_v_stride_u, ((double *)__pyx_v_globalResidual->data), __pyx_v_nExteriorElementBoundaries_global, ((int *)__pyx_v_exteriorElementBoundariesArray->data), ((int *)__pyx_v_elementBoundaryElementsArray->data), ((int *)__pyx_v_elementBoundaryLocalElementBoundariesArray->data), ((double *)__pyx_v_ebqe_velocity_ext->data), ((double *)__pyx_v_ebqe_porosity_ext->data), ((int *)__pyx_v_isDOFBoundary_u->data), ((double *)__pyx_v_ebqe_bc_u_ext->data), ((int *)__pyx_v_isFluxBoundary_u->data), ((double *)__pyx_v_ebqe_bc_flux_u_ext->data), ((double *)__pyx_v_ebqe_phi->data), __pyx_v_epsFact, ((double *)__pyx_v_ebqe_u->data), ((double *)__pyx_v_ebqe_flux->data), __pyx_v_cE, __pyx_v_cK, __pyx_v_uL, __pyx_v_uR, __pyx_v_numDOFs, __pyx_v_NNZ, ((int *)__pyx_v_csrRowIndeces_DofLoops->data), ((int *)__pyx_v_csrColumnOffsets_DofLoops->data), ((int *)__pyx_v_csrRowIndeces_CellLoops->data), ((int *)__pyx_v_csrColumnOffsets_CellLoops->data), ((int *)__pyx_v_csrColumnOffsets_eb_CellLoops->data), ((double *)__pyx_v_Cx->data), ((double *)__pyx_v_Cy->data), ((double *)__pyx_v_Cz->data), ((double *)__pyx_v_CTx->data), ((double *)__pyx_v_CTy->data), ((double *)__pyx_v_CTz->data), ((double *)__pyx_v_ML->data), __pyx_v_LUMPED_MASS_MATRIX, __pyx_v_STABILIZATION_TYPE, __pyx_v_ENTROPY_TYPE, ((double *)__pyx_v_low_order_solution->data), ((double *)__pyx_v_dt_times_dH_minus_dL->data), ((double *)__pyx_v_min_u_bc->data), ((double *)__pyx_v_max_u_bc->data), ((double *)__pyx_v_quantDOFs->data));

  /* "mprans/cTIM.pyx":545
 *                                        <double*> max_u_bc.data,
 *                                        <double*> quantDOFs.data)
 *    def calculateResidual_entropy_viscosity(self,             # <<<<<<<<<<<<<<
 *                          double dt,
 *                          numpy.ndarray mesh_trial_ref,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mprans/cTIM.pyx":725
 *                                        <double*> max_u_bc.data,
 *                                        <double*> quantDOFs.data)
 *    def calculateJacobian(self,             # <<<<<<<<<<<<<<
 *                          double dt,
 *                          numpy.ndarray mesh_trial_ref,
 */

/* Python wrapper */
static PyObject *__pyx_pw_6mprans_4cTIM_9cTIM_base_11calculateJacobian(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6mprans_4cTIM_9cTIM_base_11calculateJacobian(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_dt;
  PyArrayObject *__pyx_v_mesh_trial_ref = 0;
  PyArrayObject *__pyx_v_mesh_grad_trial_ref = 0;
  PyArrayObject *__pyx_v_mesh_dof = 0;
  PyArrayObject *__pyx_v_mesh_velocity_dof = 0;
  double __pyx_v_MOVING_DOMAIN;
  PyArrayObject *__pyx_v_mesh_l2g = 0;
  PyArrayObject *__pyx_v_dV_ref = 0;
  PyArrayObject *__pyx_v_u_trial_ref = 0;
  PyArrayObject *__pyx_v_u_grad_trial_ref = 0;
  PyArrayObject *__pyx_v_u_test_ref = 0;
  PyArrayObject *__pyx_v_u_grad_test_ref = 0;
  PyArrayObject *__pyx_v_mesh_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_mesh_grad_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_dS_ref = 0;
  PyArrayObject *__pyx_v_u_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_u_grad_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_u_test_trace_ref = 0;
  PyArrayObject *__pyx_v_u_grad_test_trace_ref = 0;
  PyArrayObject *__pyx_v_normal_ref = 0;
  PyArrayObject *__pyx_v_boundaryJac_ref = 0;
  int __pyx_v_nElements_global;
  double __pyx_v_useMetrics;
  double __pyx_v_alphaBDF;
  int __pyx_v_lag_shockCapturing;
  double __pyx_v_shockCapturingDiffusion;
  PyArrayObject *__pyx_v_q_porosity = 0;
  PyArrayObject *__pyx_v_u_l2g = 0;
  PyArrayObject *__pyx_v_elementDiameter = 0;
  int __pyx_v_degree_polynomial;
  PyArrayObject *__pyx_v_u_dof = 0;
  PyArrayObject *__pyx_v_velocity = 0;
  PyArrayObject *__pyx_v_q_m_betaBDF = 0;
  PyArrayObject *__pyx_v_cfl = 0;
  PyArrayObject *__pyx_v_q_numDiff_u_last = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_u_u = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_u_u = 0;
  PyObject *__pyx_v_globalJacobian = 0;
  int __pyx_v_nExteriorElementBoundaries_global;
  PyArrayObject *__pyx_v_exteriorElementBoundariesArray = 0;
  PyArrayObject *__pyx_v_elementBoundaryElementsArray = 0;
  PyArrayObject *__pyx_v_elementBoundaryLocalElementBoundariesArray = 0;
  PyArrayObject *__pyx_v_ebqe_velocity_ext = 0;
  PyArrayObject *__pyx_v_ebqe_porosity_ext = 0;
  PyArrayObject *__pyx_v_isDOFBoundary_u = 0;
  PyArrayObject *__pyx_v_ebqe_bc_u_ext = 0;
  PyArrayObject *__pyx_v_isFluxBoundary_u = 0;
  PyArrayObject *__pyx_v_ebqe_bc_flux_u_ext = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_u_u = 0;
  int __pyx_v_LUMPED_MASS_MATRIX;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calculateJacobian (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dt,&__pyx_n_s_mesh_trial_ref,&__pyx_n_s_mesh_grad_trial_ref,&__pyx_n_s_mesh_dof,&__pyx_n_s_mesh_velocity_dof,&__pyx_n_s_MOVING_DOMAIN,&__pyx_n_s_mesh_l2g,&__pyx_n_s_dV_ref,&__pyx_n_s_u_trial_ref,&__pyx_n_s_u_grad_trial_ref,&__pyx_n_s_u_test_ref,&__pyx_n_s_u_grad_test_ref,&__pyx_n_s_mesh_trial_trace_ref,&__pyx_n_s_mesh_grad_trial_trace_ref,&__pyx_n_s_dS_ref,&__pyx_n_s_u_trial_trace_ref,&__pyx_n_s_u_grad_trial_trace_ref,&__pyx_n_s_u_test_trace_ref,&__pyx_n_s_u_grad_test_trace_ref,&__pyx_n_s_normal_ref,&__pyx_n_s_boundaryJac_ref,&__pyx_n_s_nElements_global,&__pyx_n_s_useMetrics,&__pyx_n_s_alphaBDF,&__pyx_n_s_lag_shockCapturing,&__pyx_n_s_shockCapturingDiffusion,&__pyx_n_s_q_porosity,&__pyx_n_s_u_l2g,&__pyx_n_s_elementDiameter,&__pyx_n_s_degree_polynomial,&__pyx_n_s_u_dof,&__pyx_n_s_velocity,&__pyx_n_s_q_m_betaBDF,&__pyx_n_s_cfl,&__pyx_n_s_q_numDiff_u_last,&__pyx_n_s_csrRowIndeces_u_u,&__pyx_n_s_csrColumnOffsets_u_u,&__pyx_n_s_globalJacobian,&__pyx_n_s_nExteriorElementBoundaries_globa,&__pyx_n_s_exteriorElementBoundariesArray,&__pyx_n_s_elementBoundaryElementsArray,&__pyx_n_s_elementBoundaryLocalElementBound,&__pyx_n_s_ebqe_velocity_ext,&__pyx_n_s_ebqe_porosity_ext,&__pyx_n_s_isDOFBoundary_u,&__pyx_n_s_ebqe_bc_u_ext,&__pyx_n_s_isFluxBoundary_u,&__pyx_n_s_ebqe_bc_flux_u_ext,&__pyx_n_s_csrColumnOffsets_eb_u_u,&__pyx_n_s_LUMPED_MASS_MATRIX,0};
    PyObject* values[50] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 50: values[49] = PyTuple_GET_ITEM(__pyx_args, 49);
        case 49: values[48] = PyTuple_GET_ITEM(__pyx_args, 48);
        case 48: values[47] = PyTuple_GET_ITEM(__pyx_args, 47);
        case 47: values[46] = PyTuple_GET_ITEM(__pyx_args, 46);
        case 46: values[45] = PyTuple_GET_ITEM(__pyx_args, 45);
        case 45: values[44] = PyTuple_GET_ITEM(__pyx_args, 44);
        case 44: values[43] = PyTuple_GET_ITEM(__pyx_args, 43);
        case 43: values[42] = PyTuple_GET_ITEM(__pyx_args, 42);
        case 42: values[41] = PyTuple_GET_ITEM(__pyx_args, 41);
        case 41: values[40] = PyTuple_GET_ITEM(__pyx_args, 40);
        case 40: values[39] = PyTuple_GET_ITEM(__pyx_args, 39);
        case 39: values[38] = PyTuple_GET_ITEM(__pyx_args, 38);
        case 38: values[37] = PyTuple_GET_ITEM(__pyx_args, 37);
        case 37: values[36] = PyTuple_GET_ITEM(__pyx_args, 36);
        case 36: values[35] = PyTuple_GET_ITEM(__pyx_args, 35);
        case 35: values[34] = PyTuple_GET_ITEM(__pyx_args, 34);
        case 34: values[33] = PyTuple_GET_ITEM(__pyx_args, 33);
        case 33: values[32] = PyTuple_GET_ITEM(__pyx_args, 32);
        case 32: values[31] = PyTuple_GET_ITEM(__pyx_args, 31);
        case 31: values[30] = PyTuple_GET_ITEM(__pyx_args, 30);
        case 30: values[29] = PyTuple_GET_ITEM(__pyx_args, 29);
        case 29: values[28] = PyTuple_GET_ITEM(__pyx_args, 28);
        case 28: values[27] = PyTuple_GET_ITEM(__pyx_args, 27);
        case 27: values[26] = PyTuple_GET_ITEM(__pyx_args, 26);
        case 26: values[25] = PyTuple_GET_ITEM(__pyx_args, 25);
        case 25: values[24] = PyTuple_GET_ITEM(__pyx_args, 24);
        case 24: values[23] = PyTuple_GET_ITEM(__pyx_args, 23);
        case 23: values[22] = PyTuple_GET_ITEM(__pyx_args, 22);
        case 22: values[21] = PyTuple_GET_ITEM(__pyx_args, 21);
        case 21: values[20] = PyTuple_GET_ITEM(__pyx_args, 20);
        case 20: values[19] = PyTuple_GET_ITEM(__pyx_args, 19);
        case 19: values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
        case 18: values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
        case 17: values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dt)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_trial_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 50, 50, 1); __PYX_ERR(0, 725, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_grad_trial_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 50, 50, 2); __PYX_ERR(0, 725, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 50, 50, 3); __PYX_ERR(0, 725, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_velocity_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 50, 50, 4); __PYX_ERR(0, 725, __pyx_L3_error)
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_MOVING_DOMAIN)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 50, 50, 5); __PYX_ERR(0, 725, __pyx_L3_error)
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_l2g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 50, 50, 6); __PYX_ERR(0, 725, __pyx_L3_error)
        }
        case  7:
        if (likely((values[7] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dV_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 50, 50, 7); __PYX_ERR(0, 725, __pyx_L3_error)
        }
        case  8:
        if (likely((values[8] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_u_trial_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 50, 50, 8); __PYX_ERR(0, 725, __pyx_L3_error)
        }
        case  9:
        if (likely((values[9] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_u_grad_trial_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 50, 50, 9); __PYX_ERR(0, 725, __pyx_L3_error)
        }
        case 10:
        if (likely((values[10] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_u_test_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 50, 50, 10); __PYX_ERR(0, 725, __pyx_L3_error)
        }
        case 11:
        if (likely((values[11] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_u_grad_test_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 50, 50, 11); __PYX_ERR(0, 725, __pyx_L3_error)
        }
        case 12:
        if (likely((values[12] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 50, 50, 12); __PYX_ERR(0, 725, __pyx_L3_error)
        }
        case 13:
        if (likely((values[13] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_grad_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 50, 50, 13); __PYX_ERR(0, 725, __pyx_L3_error)
        }
        case 14:
        if (likely((values[14] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dS_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 50, 50, 14); __PYX_ERR(0, 725, __pyx_L3_error)
        }
        case 15:
        if (likely((values[15] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_u_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 50, 50, 15); __PYX_ERR(0, 725, __pyx_L3_error)
        }
        case 16:
        if (likely((values[16] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_u_grad_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 50, 50, 16); __PYX_ERR(0, 725, __pyx_L3_error)
        }
        case 17:
        if (likely((values[17] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_u_test_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 50, 50, 17); __PYX_ERR(0, 725, __pyx_L3_error)
        }
        case 18:
        if (likely((values[18] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_u_grad_test_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 50, 50, 18); __PYX_ERR(0, 725, __pyx_L3_error)
        }
        case 19:
        if (likely((values[19] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_normal_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 50, 50, 19); __PYX_ERR(0, 725, __pyx_L3_error)
        }
        case 20:
        if (likely((values[20] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_boundaryJac_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 50, 50, 20); __PYX_ERR(0, 725, __pyx_L3_error)
        }
        case 21:
        if (likely((values[21] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nElements_global)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 50, 50, 21); __PYX_ERR(0, 725, __pyx_L3_error)
        }
        case 22:
        if (likely((values[22] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_useMetrics)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 50, 50, 22); __PYX_ERR(0, 725, __pyx_L3_error)
        }
        case 23:
        if (likely((values[23] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_alphaBDF)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 50, 50, 23); __PYX_ERR(0, 725, __pyx_L3_error)
        }
        case 24:
        if (likely((values[24] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_lag_shockCapturing)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 50, 50, 24); __PYX_ERR(0, 725, __pyx_L3_error)
        }
        case 25:
        if (likely((values[25] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_shockCapturingDiffusion)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 50, 50, 25); __PYX_ERR(0, 725, __pyx_L3_error)
        }
        case 26:
        if (likely((values[26] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_porosity)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 50, 50, 26); __PYX_ERR(0, 725, __pyx_L3_error)
        }
        case 27:
        if (likely((values[27] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_u_l2g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 50, 50, 27); __PYX_ERR(0, 725, __pyx_L3_error)
        }
        case 28:
        if (likely((values[28] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_elementDiameter)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 50, 50, 28); __PYX_ERR(0, 725, __pyx_L3_error)
        }
        case 29:
        if (likely((values[29] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_degree_polynomial)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 50, 50, 29); __PYX_ERR(0, 725, __pyx_L3_error)
        }
        case 30:
        if (likely((values[30] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_u_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 50, 50, 30); __PYX_ERR(0, 725, __pyx_L3_error)
        }
        case 31:
        if (likely((values[31] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_velocity)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 50, 50, 31); __PYX_ERR(0, 725, __pyx_L3_error)
        }
        case 32:
        if (likely((values[32] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_m_betaBDF)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 50, 50, 32); __PYX_ERR(0, 725, __pyx_L3_error)
        }
        case 33:
        if (likely((values[33] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cfl)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 50, 50, 33); __PYX_ERR(0, 725, __pyx_L3_error)
        }
        case 34:
        if (likely((values[34] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_numDiff_u_last)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 50, 50, 34); __PYX_ERR(0, 725, __pyx_L3_error)
        }
        case 35:
        if (likely((values[35] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_u_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 50, 50, 35); __PYX_ERR(0, 725, __pyx_L3_error)
        }
        case 36:
        if (likely((values[36] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_u_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 50, 50, 36); __PYX_ERR(0, 725, __pyx_L3_error)
        }
        case 37:
        if (likely((values[37] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_globalJacobian)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 50, 50, 37); __PYX_ERR(0, 725, __pyx_L3_error)
        }
        case 38:
        if (likely((values[38] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nExteriorElementBoundaries_globa)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 50, 50, 38); __PYX_ERR(0, 725, __pyx_L3_error)
        }
        case 39:
        if (likely((values[39] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_exteriorElementBoundariesArray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 50, 50, 39); __PYX_ERR(0, 725, __pyx_L3_error)
        }
        case 40:
        if (likely((values[40] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_elementBoundaryElementsArray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 50, 50, 40); __PYX_ERR(0, 725, __pyx_L3_error)
        }
        case 41:
        if (likely((values[41] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_elementBoundaryLocalElementBound)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 50, 50, 41); __PYX_ERR(0, 725, __pyx_L3_error)
        }
        case 42:
        if (likely((values[42] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_velocity_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 50, 50, 42); __PYX_ERR(0, 725, __pyx_L3_error)
        }
        case 43:
        if (likely((values[43] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_porosity_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 50, 50, 43); __PYX_ERR(0, 725, __pyx_L3_error)
        }
        case 44:
        if (likely((values[44] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isDOFBoundary_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 50, 50, 44); __PYX_ERR(0, 725, __pyx_L3_error)
        }
        case 45:
        if (likely((values[45] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_u_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 50, 50, 45); __PYX_ERR(0, 725, __pyx_L3_error)
        }
        case 46:
        if (likely((values[46] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isFluxBoundary_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 50, 50, 46); __PYX_ERR(0, 725, __pyx_L3_error)
        }
        case 47:
        if (likely((values[47] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_flux_u_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 50, 50, 47); __PYX_ERR(0, 725, __pyx_L3_error)
        }
        case 48:
        if (likely((values[48] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_u_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 50, 50, 48); __PYX_ERR(0, 725, __pyx_L3_error)
        }
        case 49:
        if (likely((values[49] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_LUMPED_MASS_MATRIX)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 50, 50, 49); __PYX_ERR(0, 725, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calculateJacobian") < 0)) __PYX_ERR(0, 725, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 50) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
      values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
      values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
      values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
      values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
      values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
      values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
      values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
      values[19] = PyTuple_GET_ITEM(__pyx_args, 19);
      values[20] = PyTuple_GET_ITEM(__pyx_args, 20);
      values[21] = PyTuple_GET_ITEM(__pyx_args, 21);
      values[22] = PyTuple_GET_ITEM(__pyx_args, 22);
      values[23] = PyTuple_GET_ITEM(__pyx_args, 23);
      values[24] = PyTuple_GET_ITEM(__pyx_args, 24);
      values[25] = PyTuple_GET_ITEM(__pyx_args, 25);
      values[26] = PyTuple_GET_ITEM(__pyx_args, 26);
      values[27] = PyTuple_GET_ITEM(__pyx_args, 27);
      values[28] = PyTuple_GET_ITEM(__pyx_args, 28);
      values[29] = PyTuple_GET_ITEM(__pyx_args, 29);
      values[30] = PyTuple_GET_ITEM(__pyx_args, 30);
      values[31] = PyTuple_GET_ITEM(__pyx_args, 31);
      values[32] = PyTuple_GET_ITEM(__pyx_args, 32);
      values[33] = PyTuple_GET_ITEM(__pyx_args, 33);
      values[34] = PyTuple_GET_ITEM(__pyx_args, 34);
      values[35] = PyTuple_GET_ITEM(__pyx_args, 35);
      values[36] = PyTuple_GET_ITEM(__pyx_args, 36);
      values[37] = PyTuple_GET_ITEM(__pyx_args, 37);
      values[38] = PyTuple_GET_ITEM(__pyx_args, 38);
      values[39] = PyTuple_GET_ITEM(__pyx_args, 39);
      values[40] = PyTuple_GET_ITEM(__pyx_args, 40);
      values[41] = PyTuple_GET_ITEM(__pyx_args, 41);
      values[42] = PyTuple_GET_ITEM(__pyx_args, 42);
      values[43] = PyTuple_GET_ITEM(__pyx_args, 43);
      values[44] = PyTuple_GET_ITEM(__pyx_args, 44);
      values[45] = PyTuple_GET_ITEM(__pyx_args, 45);
      values[46] = PyTuple_GET_ITEM(__pyx_args, 46);
      values[47] = PyTuple_GET_ITEM(__pyx_args, 47);
      values[48] = PyTuple_GET_ITEM(__pyx_args, 48);
      values[49] = PyTuple_GET_ITEM(__pyx_args, 49);
    }
    __pyx_v_dt = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_dt == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 726, __pyx_L3_error)
    __pyx_v_mesh_trial_ref = ((PyArrayObject *)values[1]);
    __pyx_v_mesh_grad_trial_ref = ((PyArrayObject *)values[2]);
    __pyx_v_mesh_dof = ((PyArrayObject *)values[3]);
    __pyx_v_mesh_velocity_dof = ((PyArrayObject *)values[4]);
    __pyx_v_MOVING_DOMAIN = __pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_MOVING_DOMAIN == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 731, __pyx_L3_error)
    __pyx_v_mesh_l2g = ((PyArrayObject *)values[6]);
    __pyx_v_dV_ref = ((PyArrayObject *)values[7]);
    __pyx_v_u_trial_ref = ((PyArrayObject *)values[8]);
    __pyx_v_u_grad_trial_ref = ((PyArrayObject *)values[9]);
    __pyx_v_u_test_ref = ((PyArrayObject *)values[10]);
    __pyx_v_u_grad_test_ref = ((PyArrayObject *)values[11]);
    __pyx_v_mesh_trial_trace_ref = ((PyArrayObject *)values[12]);
    __pyx_v_mesh_grad_trial_trace_ref = ((PyArrayObject *)values[13]);
    __pyx_v_dS_ref = ((PyArrayObject *)values[14]);
    __pyx_v_u_trial_trace_ref = ((PyArrayObject *)values[15]);
    __pyx_v_u_grad_trial_trace_ref = ((PyArrayObject *)values[16]);
    __pyx_v_u_test_trace_ref = ((PyArrayObject *)values[17]);
    __pyx_v_u_grad_test_trace_ref = ((PyArrayObject *)values[18]);
    __pyx_v_normal_ref = ((PyArrayObject *)values[19]);
    __pyx_v_boundaryJac_ref = ((PyArrayObject *)values[20]);
    __pyx_v_nElements_global = __Pyx_PyInt_As_int(values[21]); if (unlikely((__pyx_v_nElements_global == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 747, __pyx_L3_error)
    __pyx_v_useMetrics = __pyx_PyFloat_AsDouble(values[22]); if (unlikely((__pyx_v_useMetrics == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 748, __pyx_L3_error)
    __pyx_v_alphaBDF = __pyx_PyFloat_AsDouble(values[23]); if (unlikely((__pyx_v_alphaBDF == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 749, __pyx_L3_error)
    __pyx_v_lag_shockCapturing = __Pyx_PyInt_As_int(values[24]); if (unlikely((__pyx_v_lag_shockCapturing == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 750, __pyx_L3_error)
    __pyx_v_shockCapturingDiffusion = __pyx_PyFloat_AsDouble(values[25]); if (unlikely((__pyx_v_shockCapturingDiffusion == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 751, __pyx_L3_error)
    __pyx_v_q_porosity = ((PyArrayObject *)values[26]);
    __pyx_v_u_l2g = ((PyArrayObject *)values[27]);
    __pyx_v_elementDiameter = ((PyArrayObject *)values[28]);
    __pyx_v_degree_polynomial = __Pyx_PyInt_As_int(values[29]); if (unlikely((__pyx_v_degree_polynomial == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 757, __pyx_L3_error)
    __pyx_v_u_dof = ((PyArrayObject *)values[30]);
    __pyx_v_velocity = ((PyArrayObject *)values[31]);
    __pyx_v_q_m_betaBDF = ((PyArrayObject *)values[32]);
    __pyx_v_cfl = ((PyArrayObject *)values[33]);
    __pyx_v_q_numDiff_u_last = ((PyArrayObject *)values[34]);
    __pyx_v_csrRowIndeces_u_u = ((PyArrayObject *)values[35]);
    __pyx_v_csrColumnOffsets_u_u = ((PyArrayObject *)values[36]);
    __pyx_v_globalJacobian = values[37];
    __pyx_v_nExteriorElementBoundaries_global = __Pyx_PyInt_As_int(values[38]); if (unlikely((__pyx_v_nExteriorElementBoundaries_global == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 765, __pyx_L3_error)
    __pyx_v_exteriorElementBoundariesArray = ((PyArrayObject *)values[39]);
    __pyx_v_elementBoundaryElementsArray = ((PyArrayObject *)values[40]);
    __pyx_v_elementBoundaryLocalElementBoundariesArray = ((PyArrayObject *)values[41]);
    __pyx_v_ebqe_velocity_ext = ((PyArrayObject *)values[42]);
    __pyx_v_ebqe_porosity_ext = ((PyArrayObject *)values[43]);
    __pyx_v_isDOFBoundary_u = ((PyArrayObject *)values[44]);
    __pyx_v_ebqe_bc_u_ext = ((PyArrayObject *)values[45]);
    __pyx_v_isFluxBoundary_u = ((PyArrayObject *)values[46]);
    __pyx_v_ebqe_bc_flux_u_ext = ((PyArrayObject *)values[47]);
    __pyx_v_csrColumnOffsets_eb_u_u = ((PyArrayObject *)values[48]);
    __pyx_v_LUMPED_MASS_MATRIX = __Pyx_PyInt_As_int(values[49]); if (unlikely((__pyx_v_LUMPED_MASS_MATRIX == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 778, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calculateJacobian", 1, 50, 50, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 725, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mprans.cTIM.cTIM_base.calculateJacobian", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "mesh_trial_ref", 0))) __PYX_ERR(0, 727, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_grad_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "mesh_grad_trial_ref", 0))) __PYX_ERR(0, 728, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_dof), __pyx_ptype_5numpy_ndarray, 1, "mesh_dof", 0))) __PYX_ERR(0, 729, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_velocity_dof), __pyx_ptype_5numpy_ndarray, 1, "mesh_velocity_dof", 0))) __PYX_ERR(0, 730, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_l2g), __pyx_ptype_5numpy_ndarray, 1, "mesh_l2g", 0))) __PYX_ERR(0, 732, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dV_ref), __pyx_ptype_5numpy_ndarray, 1, "dV_ref", 0))) __PYX_ERR(0, 733, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_u_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "u_trial_ref", 0))) __PYX_ERR(0, 734, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_u_grad_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "u_grad_trial_ref", 0))) __PYX_ERR(0, 735, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_u_test_ref), __pyx_ptype_5numpy_ndarray, 1, "u_test_ref", 0))) __PYX_ERR(0, 736, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_u_grad_test_ref), __pyx_ptype_5numpy_ndarray, 1, "u_grad_test_ref", 0))) __PYX_ERR(0, 737, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "mesh_trial_trace_ref", 0))) __PYX_ERR(0, 738, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_grad_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "mesh_grad_trial_trace_ref", 0))) __PYX_ERR(0, 739, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dS_ref), __pyx_ptype_5numpy_ndarray, 1, "dS_ref", 0))) __PYX_ERR(0, 740, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_u_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "u_trial_trace_ref", 0))) __PYX_ERR(0, 741, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_u_grad_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "u_grad_trial_trace_ref", 0))) __PYX_ERR(0, 742, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_u_test_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "u_test_trace_ref", 0))) __PYX_ERR(0, 743, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_u_grad_test_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "u_grad_test_trace_ref", 0))) __PYX_ERR(0, 744, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_normal_ref), __pyx_ptype_5numpy_ndarray, 1, "normal_ref", 0))) __PYX_ERR(0, 745, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_boundaryJac_ref), __pyx_ptype_5numpy_ndarray, 1, "boundaryJac_ref", 0))) __PYX_ERR(0, 746, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_porosity), __pyx_ptype_5numpy_ndarray, 1, "q_porosity", 0))) __PYX_ERR(0, 753, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_u_l2g), __pyx_ptype_5numpy_ndarray, 1, "u_l2g", 0))) __PYX_ERR(0, 755, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_elementDiameter), __pyx_ptype_5numpy_ndarray, 1, "elementDiameter", 0))) __PYX_ERR(0, 756, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_u_dof), __pyx_ptype_5numpy_ndarray, 1, "u_dof", 0))) __PYX_ERR(0, 758, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_velocity), __pyx_ptype_5numpy_ndarray, 1, "velocity", 0))) __PYX_ERR(0, 759, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_m_betaBDF), __pyx_ptype_5numpy_ndarray, 1, "q_m_betaBDF", 0))) __PYX_ERR(0, 760, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_cfl), __pyx_ptype_5numpy_ndarray, 1, "cfl", 0))) __PYX_ERR(0, 761, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_numDiff_u_last), __pyx_ptype_5numpy_ndarray, 1, "q_numDiff_u_last", 0))) __PYX_ERR(0, 762, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_u_u), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_u_u", 0))) __PYX_ERR(0, 763, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_u_u), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_u_u", 0))) __PYX_ERR(0, 763, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_exteriorElementBoundariesArray), __pyx_ptype_5numpy_ndarray, 1, "exteriorElementBoundariesArray", 0))) __PYX_ERR(0, 766, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_elementBoundaryElementsArray), __pyx_ptype_5numpy_ndarray, 1, "elementBoundaryElementsArray", 0))) __PYX_ERR(0, 767, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_elementBoundaryLocalElementBoundariesArray), __pyx_ptype_5numpy_ndarray, 1, "elementBoundaryLocalElementBoundariesArray", 0))) __PYX_ERR(0, 768, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_velocity_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_velocity_ext", 0))) __PYX_ERR(0, 769, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_porosity_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_porosity_ext", 0))) __PYX_ERR(0, 771, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isDOFBoundary_u), __pyx_ptype_5numpy_ndarray, 1, "isDOFBoundary_u", 0))) __PYX_ERR(0, 773, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_u_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_u_ext", 0))) __PYX_ERR(0, 774, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isFluxBoundary_u), __pyx_ptype_5numpy_ndarray, 1, "isFluxBoundary_u", 0))) __PYX_ERR(0, 775, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_flux_u_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_flux_u_ext", 0))) __PYX_ERR(0, 776, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_u_u), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_u_u", 0))) __PYX_ERR(0, 777, __pyx_L1_error)
  __pyx_r = __pyx_pf_6mprans_4cTIM_9cTIM_base_10calculateJacobian(((struct __pyx_obj_6mprans_4cTIM_cTIM_base *)__pyx_v_self), __pyx_v_dt, __pyx_v_mesh_trial_ref, __pyx_v_mesh_grad_trial_ref, __pyx_v_mesh_dof, __pyx_v_mesh_velocity_dof, __pyx_v_MOVING_DOMAIN, __pyx_v_mesh_l2g, __pyx_v_dV_ref, __pyx_v_u_trial_ref, __pyx_v_u_grad_trial_ref, __pyx_v_u_test_ref, __pyx_v_u_grad_test_ref, __pyx_v_mesh_trial_trace_ref, __pyx_v_mesh_grad_trial_trace_ref, __pyx_v_dS_ref, __pyx_v_u_trial_trace_ref, __pyx_v_u_grad_trial_trace_ref, __pyx_v_u_test_trace_ref, __pyx_v_u_grad_test_trace_ref, __pyx_v_normal_ref, __pyx_v_boundaryJac_ref, __pyx_v_nElements_global, __pyx_v_useMetrics, __pyx_v_alphaBDF, __pyx_v_lag_shockCapturing, __pyx_v_shockCapturingDiffusion, __pyx_v_q_porosity, __pyx_v_u_l2g, __pyx_v_elementDiameter, __pyx_v_degree_polynomial, __pyx_v_u_dof, __pyx_v_velocity, __pyx_v_q_m_betaBDF, __pyx_v_cfl, __pyx_v_q_numDiff_u_last, __pyx_v_csrRowIndeces_u_u, __pyx_v_csrColumnOffsets_u_u, __pyx_v_globalJacobian, __pyx_v_nExteriorElementBoundaries_global, __pyx_v_exteriorElementBoundariesArray, __pyx_v_elementBoundaryElementsArray, __pyx_v_elementBoundaryLocalElementBoundariesArray, __pyx_v_ebqe_velocity_ext, __pyx_v_ebqe_porosity_ext, __pyx_v_isDOFBoundary_u, __pyx_v_ebqe_bc_u_ext, __pyx_v_isFluxBoundary_u, __pyx_v_ebqe_bc_flux_u_ext, __pyx_v_csrColumnOffsets_eb_u_u, __pyx_v_LUMPED_MASS_MATRIX);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6mprans_4cTIM_9cTIM_base_10calculateJacobian(struct __pyx_obj_6mprans_4cTIM_cTIM_base *__pyx_v_self, double __pyx_v_dt, PyArrayObject *__pyx_v_mesh_trial_ref, PyArrayObject *__pyx_v_mesh_grad_trial_ref, PyArrayObject *__pyx_v_mesh_dof, PyArrayObject *__pyx_v_mesh_velocity_dof, double __pyx_v_MOVING_DOMAIN, PyArrayObject *__pyx_v_mesh_l2g, PyArrayObject *__pyx_v_dV_ref, PyArrayObject *__pyx_v_u_trial_ref, PyArrayObject *__pyx_v_u_grad_trial_ref, PyArrayObject *__pyx_v_u_test_ref, PyArrayObject *__pyx_v_u_grad_test_ref, PyArrayObject *__pyx_v_mesh_trial_trace_ref, PyArrayObject *__pyx_v_mesh_grad_trial_trace_ref, PyArrayObject *__pyx_v_dS_ref, PyArrayObject *__pyx_v_u_trial_trace_ref, PyArrayObject *__pyx_v_u_grad_trial_trace_ref, PyArrayObject *__pyx_v_u_test_trace_ref, PyArrayObject *__pyx_v_u_grad_test_trace_ref, PyArrayObject *__pyx_v_normal_ref, PyArrayObject *__pyx_v_boundaryJac_ref, int __pyx_v_nElements_global, double __pyx_v_useMetrics, double __pyx_v_alphaBDF, int __pyx_v_lag_shockCapturing, double __pyx_v_shockCapturingDiffusion, PyArrayObject *__pyx_v_q_porosity, PyArrayObject *__pyx_v_u_l2g, PyArrayObject *__pyx_v_elementDiameter, int __pyx_v_degree_polynomial, PyArrayObject *__pyx_v_u_dof, PyArrayObject *__pyx_v_velocity, PyArrayObject *__pyx_v_q_m_betaBDF, PyArrayObject *__pyx_v_cfl, PyArrayObject *__pyx_v_q_numDiff_u_last, PyArrayObject *__pyx_v_csrRowIndeces_u_u, PyArrayObject *__pyx_v_csrColumnOffsets_u_u, PyObject *__pyx_v_globalJacobian, int __pyx_v_nExteriorElementBoundaries_global, PyArrayObject *__pyx_v_exteriorElementBoundariesArray, PyArrayObject *__pyx_v_elementBoundaryElementsArray, PyArrayObject *__pyx_v_elementBoundaryLocalElementBoundariesArray, PyArrayObject *__pyx_v_ebqe_velocity_ext, PyArrayObject *__pyx_v_ebqe_porosity_ext, PyArrayObject *__pyx_v_isDOFBoundary_u, PyArrayObject *__pyx_v_ebqe_bc_u_ext, PyArrayObject *__pyx_v_isFluxBoundary_u, PyArrayObject *__pyx_v_ebqe_bc_flux_u_ext, PyArrayObject *__pyx_v_csrColumnOffsets_eb_u_u, int __pyx_v_LUMPED_MASS_MATRIX) {
  CYTHON_UNUSED PyArrayObject *__pyx_v_rowptr = 0;
  CYTHON_UNUSED PyArrayObject *__pyx_v_colind = 0;
  PyArrayObject *__pyx_v_globalJacobian_a = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  __Pyx_RefNannySetupContext("calculateJacobian", 0);

  /* "mprans/cTIM.pyx":780
 *                          int LUMPED_MASS_MATRIX):
 *        cdef numpy.ndarray rowptr,colind,globalJacobian_a
 *        (rowptr,colind,globalJacobian_a) = globalJacobian.getCSRrepresentation()             # <<<<<<<<<<<<<<
 *        self.thisptr.calculateJacobian(dt,
 *                                        <double*> mesh_trial_ref.data,
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_globalJacobian, __pyx_n_s_getCSRrepresentation); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 780, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 780, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    #if !CYTHON_COMPILING_IN_PYPY
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 3)) {
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 780, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 2); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 780, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 780, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 780, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_5 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 780, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = Py_TYPE(__pyx_t_5)->tp_iternext;
    index = 0; __pyx_t_2 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_3 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    index = 2; __pyx_t_4 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_4)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_4);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_5), 3) < 0) __PYX_ERR(0, 780, __pyx_L1_error)
    __pyx_t_6 = NULL;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 780, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 780, __pyx_L1_error)
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 780, __pyx_L1_error)
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 780, __pyx_L1_error)
  __pyx_v_rowptr = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_v_colind = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_v_globalJacobian_a = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "mprans/cTIM.pyx":781
 *        cdef numpy.ndarray rowptr,colind,globalJacobian_a
 *        (rowptr,colind,globalJacobian_a) = globalJacobian.getCSRrepresentation()
 *        self.thisptr.calculateJacobian(dt,             # <<<<<<<<<<<<<<
 *                                        <double*> mesh_trial_ref.data,
 *                                        <double*> mesh_grad_trial_ref.data,
 */
  __pyx_v_self->thisptr->calculateJacobian(__pyx_v_dt, ((double *)__pyx_v_mesh_trial_ref->data), ((double *)__pyx_v_mesh_grad_trial_ref->data), ((double *)__pyx_v_mesh_dof->data), ((double *)__pyx_v_mesh_velocity_dof->data), __pyx_v_MOVING_DOMAIN, ((int *)__pyx_v_mesh_l2g->data), ((double *)__pyx_v_dV_ref->data), ((double *)__pyx_v_u_trial_ref->data), ((double *)__pyx_v_u_grad_trial_ref->data), ((double *)__pyx_v_u_test_ref->data), ((double *)__pyx_v_u_grad_test_ref->data), ((double *)__pyx_v_mesh_trial_trace_ref->data), ((double *)__pyx_v_mesh_grad_trial_trace_ref->data), ((double *)__pyx_v_dS_ref->data), ((double *)__pyx_v_u_trial_trace_ref->data), ((double *)__pyx_v_u_grad_trial_trace_ref->data), ((double *)__pyx_v_u_test_trace_ref->data), ((double *)__pyx_v_u_grad_test_trace_ref->data), ((double *)__pyx_v_normal_ref->data), ((double *)__pyx_v_boundaryJac_ref->data), __pyx_v_nElements_global, __pyx_v_useMetrics, __pyx_v_alphaBDF, __pyx_v_lag_shockCapturing, __pyx_v_shockCapturingDiffusion, ((double *)__pyx_v_q_porosity->data), ((int *)__pyx_v_u_l2g->data), ((double *)__pyx_v_elementDiameter->data), __pyx_v_degree_polynomial, ((double *)__pyx_v_u_dof->data), ((double *)__pyx_v_velocity->data), ((double *)__pyx_v_q_m_betaBDF->data), ((double *)__pyx_v_cfl->data), ((double *)__pyx_v_q_numDiff_u_last->data), ((int *)__pyx_v_csrRowIndeces_u_u->data), ((int *)__pyx_v_csrColumnOffsets_u_u->data), ((double *)__pyx_v_globalJacobian_a->data), __pyx_v_nExteriorElementBoundaries_global, ((int *)__pyx_v_exteriorElementBoundariesArray->data), ((int *)__pyx_v_elementBoundaryElementsArray->data), ((int *)__pyx_v_elementBoundaryLocalElementBoundariesArray->data), ((double *)__pyx_v_ebqe_velocity_ext->data), ((double *)__pyx_v_ebqe_porosity_ext->data), ((int *)__pyx_v_isDOFBoundary_u->data), ((double *)__pyx_v_ebqe_bc_u_ext->data), ((int *)__pyx_v_isFluxBoundary_u->data), ((double *)__pyx_v_ebqe_bc_flux_u_ext->data), ((int *)__pyx_v_csrColumnOffsets_eb_u_u->data), __pyx_v_LUMPED_MASS_MATRIX);

  /* "mprans/cTIM.pyx":725
 *                                        <double*> max_u_bc.data,
 *                                        <double*> quantDOFs.data)
 *    def calculateJacobian(self,             # <<<<<<<<<<<<<<
 *                          double dt,
 *                          numpy.ndarray mesh_trial_ref,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("mprans.cTIM.cTIM_base.calculateJacobian", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_rowptr);
  __Pyx_XDECREF((PyObject *)__pyx_v_colind);
  __Pyx_XDECREF((PyObject *)__pyx_v_globalJacobian_a);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mprans/cTIM.pyx":834
 *                                        <int*> csrColumnOffsets_eb_u_u.data,
 *                                        LUMPED_MASS_MATRIX)
 *    def calculateMassMatrix(self,             # <<<<<<<<<<<<<<
 *                          double dt,
 *                          numpy.ndarray mesh_trial_ref,
 */

/* Python wrapper */
static PyObject *__pyx_pw_6mprans_4cTIM_9cTIM_base_13calculateMassMatrix(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6mprans_4cTIM_9cTIM_base_13calculateMassMatrix(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_dt;
  PyArrayObject *__pyx_v_mesh_trial_ref = 0;
  PyArrayObject *__pyx_v_mesh_grad_trial_ref = 0;
  PyArrayObject *__pyx_v_mesh_dof = 0;
  PyArrayObject *__pyx_v_mesh_velocity_dof = 0;
  double __pyx_v_MOVING_DOMAIN;
  PyArrayObject *__pyx_v_mesh_l2g = 0;
  PyArrayObject *__pyx_v_dV_ref = 0;
  PyArrayObject *__pyx_v_u_trial_ref = 0;
  PyArrayObject *__pyx_v_u_grad_trial_ref = 0;
  PyArrayObject *__pyx_v_u_test_ref = 0;
  PyArrayObject *__pyx_v_u_grad_test_ref = 0;
  PyArrayObject *__pyx_v_mesh_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_mesh_grad_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_dS_ref = 0;
  PyArrayObject *__pyx_v_u_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_u_grad_trial_trace_ref = 0;
  PyArrayObject *__pyx_v_u_test_trace_ref = 0;
  PyArrayObject *__pyx_v_u_grad_test_trace_ref = 0;
  PyArrayObject *__pyx_v_normal_ref = 0;
  PyArrayObject *__pyx_v_boundaryJac_ref = 0;
  int __pyx_v_nElements_global;
  double __pyx_v_useMetrics;
  double __pyx_v_alphaBDF;
  int __pyx_v_lag_shockCapturing;
  double __pyx_v_shockCapturingDiffusion;
  PyArrayObject *__pyx_v_q_porosity = 0;
  PyArrayObject *__pyx_v_u_l2g = 0;
  PyArrayObject *__pyx_v_elementDiameter = 0;
  int __pyx_v_degree_polynomial;
  PyArrayObject *__pyx_v_u_dof = 0;
  PyArrayObject *__pyx_v_velocity = 0;
  PyArrayObject *__pyx_v_q_m_betaBDF = 0;
  PyArrayObject *__pyx_v_cfl = 0;
  PyArrayObject *__pyx_v_q_numDiff_u_last = 0;
  PyArrayObject *__pyx_v_csrRowIndeces_u_u = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_u_u = 0;
  PyObject *__pyx_v_globalJacobian = 0;
  int __pyx_v_nExteriorElementBoundaries_global;
  PyArrayObject *__pyx_v_exteriorElementBoundariesArray = 0;
  PyArrayObject *__pyx_v_elementBoundaryElementsArray = 0;
  PyArrayObject *__pyx_v_elementBoundaryLocalElementBoundariesArray = 0;
  PyArrayObject *__pyx_v_ebqe_velocity_ext = 0;
  PyArrayObject *__pyx_v_ebqe_porosity_ext = 0;
  PyArrayObject *__pyx_v_isDOFBoundary_u = 0;
  PyArrayObject *__pyx_v_ebqe_bc_u_ext = 0;
  PyArrayObject *__pyx_v_isFluxBoundary_u = 0;
  PyArrayObject *__pyx_v_ebqe_bc_flux_u_ext = 0;
  PyArrayObject *__pyx_v_csrColumnOffsets_eb_u_u = 0;
  int __pyx_v_LUMPED_MASS_MATRIX;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calculateMassMatrix (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dt,&__pyx_n_s_mesh_trial_ref,&__pyx_n_s_mesh_grad_trial_ref,&__pyx_n_s_mesh_dof,&__pyx_n_s_mesh_velocity_dof,&__pyx_n_s_MOVING_DOMAIN,&__pyx_n_s_mesh_l2g,&__pyx_n_s_dV_ref,&__pyx_n_s_u_trial_ref,&__pyx_n_s_u_grad_trial_ref,&__pyx_n_s_u_test_ref,&__pyx_n_s_u_grad_test_ref,&__pyx_n_s_mesh_trial_trace_ref,&__pyx_n_s_mesh_grad_trial_trace_ref,&__pyx_n_s_dS_ref,&__pyx_n_s_u_trial_trace_ref,&__pyx_n_s_u_grad_trial_trace_ref,&__pyx_n_s_u_test_trace_ref,&__pyx_n_s_u_grad_test_trace_ref,&__pyx_n_s_normal_ref,&__pyx_n_s_boundaryJac_ref,&__pyx_n_s_nElements_global,&__pyx_n_s_useMetrics,&__pyx_n_s_alphaBDF,&__pyx_n_s_lag_shockCapturing,&__pyx_n_s_shockCapturingDiffusion,&__pyx_n_s_q_porosity,&__pyx_n_s_u_l2g,&__pyx_n_s_elementDiameter,&__pyx_n_s_degree_polynomial,&__pyx_n_s_u_dof,&__pyx_n_s_velocity,&__pyx_n_s_q_m_betaBDF,&__pyx_n_s_cfl,&__pyx_n_s_q_numDiff_u_last,&__pyx_n_s_csrRowIndeces_u_u,&__pyx_n_s_csrColumnOffsets_u_u,&__pyx_n_s_globalJacobian,&__pyx_n_s_nExteriorElementBoundaries_globa,&__pyx_n_s_exteriorElementBoundariesArray,&__pyx_n_s_elementBoundaryElementsArray,&__pyx_n_s_elementBoundaryLocalElementBound,&__pyx_n_s_ebqe_velocity_ext,&__pyx_n_s_ebqe_porosity_ext,&__pyx_n_s_isDOFBoundary_u,&__pyx_n_s_ebqe_bc_u_ext,&__pyx_n_s_isFluxBoundary_u,&__pyx_n_s_ebqe_bc_flux_u_ext,&__pyx_n_s_csrColumnOffsets_eb_u_u,&__pyx_n_s_LUMPED_MASS_MATRIX,0};
    PyObject* values[50] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 50: values[49] = PyTuple_GET_ITEM(__pyx_args, 49);
        case 49: values[48] = PyTuple_GET_ITEM(__pyx_args, 48);
        case 48: values[47] = PyTuple_GET_ITEM(__pyx_args, 47);
        case 47: values[46] = PyTuple_GET_ITEM(__pyx_args, 46);
        case 46: values[45] = PyTuple_GET_ITEM(__pyx_args, 45);
        case 45: values[44] = PyTuple_GET_ITEM(__pyx_args, 44);
        case 44: values[43] = PyTuple_GET_ITEM(__pyx_args, 43);
        case 43: values[42] = PyTuple_GET_ITEM(__pyx_args, 42);
        case 42: values[41] = PyTuple_GET_ITEM(__pyx_args, 41);
        case 41: values[40] = PyTuple_GET_ITEM(__pyx_args, 40);
        case 40: values[39] = PyTuple_GET_ITEM(__pyx_args, 39);
        case 39: values[38] = PyTuple_GET_ITEM(__pyx_args, 38);
        case 38: values[37] = PyTuple_GET_ITEM(__pyx_args, 37);
        case 37: values[36] = PyTuple_GET_ITEM(__pyx_args, 36);
        case 36: values[35] = PyTuple_GET_ITEM(__pyx_args, 35);
        case 35: values[34] = PyTuple_GET_ITEM(__pyx_args, 34);
        case 34: values[33] = PyTuple_GET_ITEM(__pyx_args, 33);
        case 33: values[32] = PyTuple_GET_ITEM(__pyx_args, 32);
        case 32: values[31] = PyTuple_GET_ITEM(__pyx_args, 31);
        case 31: values[30] = PyTuple_GET_ITEM(__pyx_args, 30);
        case 30: values[29] = PyTuple_GET_ITEM(__pyx_args, 29);
        case 29: values[28] = PyTuple_GET_ITEM(__pyx_args, 28);
        case 28: values[27] = PyTuple_GET_ITEM(__pyx_args, 27);
        case 27: values[26] = PyTuple_GET_ITEM(__pyx_args, 26);
        case 26: values[25] = PyTuple_GET_ITEM(__pyx_args, 25);
        case 25: values[24] = PyTuple_GET_ITEM(__pyx_args, 24);
        case 24: values[23] = PyTuple_GET_ITEM(__pyx_args, 23);
        case 23: values[22] = PyTuple_GET_ITEM(__pyx_args, 22);
        case 22: values[21] = PyTuple_GET_ITEM(__pyx_args, 21);
        case 21: values[20] = PyTuple_GET_ITEM(__pyx_args, 20);
        case 20: values[19] = PyTuple_GET_ITEM(__pyx_args, 19);
        case 19: values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
        case 18: values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
        case 17: values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dt)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_trial_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateMassMatrix", 1, 50, 50, 1); __PYX_ERR(0, 834, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_grad_trial_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateMassMatrix", 1, 50, 50, 2); __PYX_ERR(0, 834, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateMassMatrix", 1, 50, 50, 3); __PYX_ERR(0, 834, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_velocity_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateMassMatrix", 1, 50, 50, 4); __PYX_ERR(0, 834, __pyx_L3_error)
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_MOVING_DOMAIN)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateMassMatrix", 1, 50, 50, 5); __PYX_ERR(0, 834, __pyx_L3_error)
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_l2g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateMassMatrix", 1, 50, 50, 6); __PYX_ERR(0, 834, __pyx_L3_error)
        }
        case  7:
        if (likely((values[7] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dV_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateMassMatrix", 1, 50, 50, 7); __PYX_ERR(0, 834, __pyx_L3_error)
        }
        case  8:
        if (likely((values[8] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_u_trial_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateMassMatrix", 1, 50, 50, 8); __PYX_ERR(0, 834, __pyx_L3_error)
        }
        case  9:
        if (likely((values[9] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_u_grad_trial_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateMassMatrix", 1, 50, 50, 9); __PYX_ERR(0, 834, __pyx_L3_error)
        }
        case 10:
        if (likely((values[10] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_u_test_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateMassMatrix", 1, 50, 50, 10); __PYX_ERR(0, 834, __pyx_L3_error)
        }
        case 11:
        if (likely((values[11] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_u_grad_test_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateMassMatrix", 1, 50, 50, 11); __PYX_ERR(0, 834, __pyx_L3_error)
        }
        case 12:
        if (likely((values[12] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateMassMatrix", 1, 50, 50, 12); __PYX_ERR(0, 834, __pyx_L3_error)
        }
        case 13:
        if (likely((values[13] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh_grad_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateMassMatrix", 1, 50, 50, 13); __PYX_ERR(0, 834, __pyx_L3_error)
        }
        case 14:
        if (likely((values[14] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dS_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateMassMatrix", 1, 50, 50, 14); __PYX_ERR(0, 834, __pyx_L3_error)
        }
        case 15:
        if (likely((values[15] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_u_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateMassMatrix", 1, 50, 50, 15); __PYX_ERR(0, 834, __pyx_L3_error)
        }
        case 16:
        if (likely((values[16] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_u_grad_trial_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateMassMatrix", 1, 50, 50, 16); __PYX_ERR(0, 834, __pyx_L3_error)
        }
        case 17:
        if (likely((values[17] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_u_test_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateMassMatrix", 1, 50, 50, 17); __PYX_ERR(0, 834, __pyx_L3_error)
        }
        case 18:
        if (likely((values[18] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_u_grad_test_trace_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateMassMatrix", 1, 50, 50, 18); __PYX_ERR(0, 834, __pyx_L3_error)
        }
        case 19:
        if (likely((values[19] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_normal_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateMassMatrix", 1, 50, 50, 19); __PYX_ERR(0, 834, __pyx_L3_error)
        }
        case 20:
        if (likely((values[20] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_boundaryJac_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateMassMatrix", 1, 50, 50, 20); __PYX_ERR(0, 834, __pyx_L3_error)
        }
        case 21:
        if (likely((values[21] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nElements_global)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateMassMatrix", 1, 50, 50, 21); __PYX_ERR(0, 834, __pyx_L3_error)
        }
        case 22:
        if (likely((values[22] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_useMetrics)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateMassMatrix", 1, 50, 50, 22); __PYX_ERR(0, 834, __pyx_L3_error)
        }
        case 23:
        if (likely((values[23] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_alphaBDF)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateMassMatrix", 1, 50, 50, 23); __PYX_ERR(0, 834, __pyx_L3_error)
        }
        case 24:
        if (likely((values[24] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_lag_shockCapturing)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateMassMatrix", 1, 50, 50, 24); __PYX_ERR(0, 834, __pyx_L3_error)
        }
        case 25:
        if (likely((values[25] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_shockCapturingDiffusion)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateMassMatrix", 1, 50, 50, 25); __PYX_ERR(0, 834, __pyx_L3_error)
        }
        case 26:
        if (likely((values[26] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_porosity)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateMassMatrix", 1, 50, 50, 26); __PYX_ERR(0, 834, __pyx_L3_error)
        }
        case 27:
        if (likely((values[27] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_u_l2g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateMassMatrix", 1, 50, 50, 27); __PYX_ERR(0, 834, __pyx_L3_error)
        }
        case 28:
        if (likely((values[28] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_elementDiameter)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateMassMatrix", 1, 50, 50, 28); __PYX_ERR(0, 834, __pyx_L3_error)
        }
        case 29:
        if (likely((values[29] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_degree_polynomial)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateMassMatrix", 1, 50, 50, 29); __PYX_ERR(0, 834, __pyx_L3_error)
        }
        case 30:
        if (likely((values[30] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_u_dof)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateMassMatrix", 1, 50, 50, 30); __PYX_ERR(0, 834, __pyx_L3_error)
        }
        case 31:
        if (likely((values[31] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_velocity)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateMassMatrix", 1, 50, 50, 31); __PYX_ERR(0, 834, __pyx_L3_error)
        }
        case 32:
        if (likely((values[32] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_m_betaBDF)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateMassMatrix", 1, 50, 50, 32); __PYX_ERR(0, 834, __pyx_L3_error)
        }
        case 33:
        if (likely((values[33] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cfl)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateMassMatrix", 1, 50, 50, 33); __PYX_ERR(0, 834, __pyx_L3_error)
        }
        case 34:
        if (likely((values[34] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_numDiff_u_last)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateMassMatrix", 1, 50, 50, 34); __PYX_ERR(0, 834, __pyx_L3_error)
        }
        case 35:
        if (likely((values[35] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrRowIndeces_u_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateMassMatrix", 1, 50, 50, 35); __PYX_ERR(0, 834, __pyx_L3_error)
        }
        case 36:
        if (likely((values[36] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_u_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateMassMatrix", 1, 50, 50, 36); __PYX_ERR(0, 834, __pyx_L3_error)
        }
        case 37:
        if (likely((values[37] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_globalJacobian)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateMassMatrix", 1, 50, 50, 37); __PYX_ERR(0, 834, __pyx_L3_error)
        }
        case 38:
        if (likely((values[38] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nExteriorElementBoundaries_globa)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateMassMatrix", 1, 50, 50, 38); __PYX_ERR(0, 834, __pyx_L3_error)
        }
        case 39:
        if (likely((values[39] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_exteriorElementBoundariesArray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateMassMatrix", 1, 50, 50, 39); __PYX_ERR(0, 834, __pyx_L3_error)
        }
        case 40:
        if (likely((values[40] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_elementBoundaryElementsArray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateMassMatrix", 1, 50, 50, 40); __PYX_ERR(0, 834, __pyx_L3_error)
        }
        case 41:
        if (likely((values[41] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_elementBoundaryLocalElementBound)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateMassMatrix", 1, 50, 50, 41); __PYX_ERR(0, 834, __pyx_L3_error)
        }
        case 42:
        if (likely((values[42] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_velocity_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateMassMatrix", 1, 50, 50, 42); __PYX_ERR(0, 834, __pyx_L3_error)
        }
        case 43:
        if (likely((values[43] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_porosity_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateMassMatrix", 1, 50, 50, 43); __PYX_ERR(0, 834, __pyx_L3_error)
        }
        case 44:
        if (likely((values[44] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isDOFBoundary_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateMassMatrix", 1, 50, 50, 44); __PYX_ERR(0, 834, __pyx_L3_error)
        }
        case 45:
        if (likely((values[45] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_u_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateMassMatrix", 1, 50, 50, 45); __PYX_ERR(0, 834, __pyx_L3_error)
        }
        case 46:
        if (likely((values[46] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isFluxBoundary_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateMassMatrix", 1, 50, 50, 46); __PYX_ERR(0, 834, __pyx_L3_error)
        }
        case 47:
        if (likely((values[47] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ebqe_bc_flux_u_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateMassMatrix", 1, 50, 50, 47); __PYX_ERR(0, 834, __pyx_L3_error)
        }
        case 48:
        if (likely((values[48] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_csrColumnOffsets_eb_u_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateMassMatrix", 1, 50, 50, 48); __PYX_ERR(0, 834, __pyx_L3_error)
        }
        case 49:
        if (likely((values[49] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_LUMPED_MASS_MATRIX)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculateMassMatrix", 1, 50, 50, 49); __PYX_ERR(0, 834, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calculateMassMatrix") < 0)) __PYX_ERR(0, 834, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 50) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
      values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
      values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
      values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
      values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
      values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
      values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
      values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
      values[19] = PyTuple_GET_ITEM(__pyx_args, 19);
      values[20] = PyTuple_GET_ITEM(__pyx_args, 20);
      values[21] = PyTuple_GET_ITEM(__pyx_args, 21);
      values[22] = PyTuple_GET_ITEM(__pyx_args, 22);
      values[23] = PyTuple_GET_ITEM(__pyx_args, 23);
      values[24] = PyTuple_GET_ITEM(__pyx_args, 24);
      values[25] = PyTuple_GET_ITEM(__pyx_args, 25);
      values[26] = PyTuple_GET_ITEM(__pyx_args, 26);
      values[27] = PyTuple_GET_ITEM(__pyx_args, 27);
      values[28] = PyTuple_GET_ITEM(__pyx_args, 28);
      values[29] = PyTuple_GET_ITEM(__pyx_args, 29);
      values[30] = PyTuple_GET_ITEM(__pyx_args, 30);
      values[31] = PyTuple_GET_ITEM(__pyx_args, 31);
      values[32] = PyTuple_GET_ITEM(__pyx_args, 32);
      values[33] = PyTuple_GET_ITEM(__pyx_args, 33);
      values[34] = PyTuple_GET_ITEM(__pyx_args, 34);
      values[35] = PyTuple_GET_ITEM(__pyx_args, 35);
      values[36] = PyTuple_GET_ITEM(__pyx_args, 36);
      values[37] = PyTuple_GET_ITEM(__pyx_args, 37);
      values[38] = PyTuple_GET_ITEM(__pyx_args, 38);
      values[39] = PyTuple_GET_ITEM(__pyx_args, 39);
      values[40] = PyTuple_GET_ITEM(__pyx_args, 40);
      values[41] = PyTuple_GET_ITEM(__pyx_args, 41);
      values[42] = PyTuple_GET_ITEM(__pyx_args, 42);
      values[43] = PyTuple_GET_ITEM(__pyx_args, 43);
      values[44] = PyTuple_GET_ITEM(__pyx_args, 44);
      values[45] = PyTuple_GET_ITEM(__pyx_args, 45);
      values[46] = PyTuple_GET_ITEM(__pyx_args, 46);
      values[47] = PyTuple_GET_ITEM(__pyx_args, 47);
      values[48] = PyTuple_GET_ITEM(__pyx_args, 48);
      values[49] = PyTuple_GET_ITEM(__pyx_args, 49);
    }
    __pyx_v_dt = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_dt == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 835, __pyx_L3_error)
    __pyx_v_mesh_trial_ref = ((PyArrayObject *)values[1]);
    __pyx_v_mesh_grad_trial_ref = ((PyArrayObject *)values[2]);
    __pyx_v_mesh_dof = ((PyArrayObject *)values[3]);
    __pyx_v_mesh_velocity_dof = ((PyArrayObject *)values[4]);
    __pyx_v_MOVING_DOMAIN = __pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_MOVING_DOMAIN == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 840, __pyx_L3_error)
    __pyx_v_mesh_l2g = ((PyArrayObject *)values[6]);
    __pyx_v_dV_ref = ((PyArrayObject *)values[7]);
    __pyx_v_u_trial_ref = ((PyArrayObject *)values[8]);
    __pyx_v_u_grad_trial_ref = ((PyArrayObject *)values[9]);
    __pyx_v_u_test_ref = ((PyArrayObject *)values[10]);
    __pyx_v_u_grad_test_ref = ((PyArrayObject *)values[11]);
    __pyx_v_mesh_trial_trace_ref = ((PyArrayObject *)values[12]);
    __pyx_v_mesh_grad_trial_trace_ref = ((PyArrayObject *)values[13]);
    __pyx_v_dS_ref = ((PyArrayObject *)values[14]);
    __pyx_v_u_trial_trace_ref = ((PyArrayObject *)values[15]);
    __pyx_v_u_grad_trial_trace_ref = ((PyArrayObject *)values[16]);
    __pyx_v_u_test_trace_ref = ((PyArrayObject *)values[17]);
    __pyx_v_u_grad_test_trace_ref = ((PyArrayObject *)values[18]);
    __pyx_v_normal_ref = ((PyArrayObject *)values[19]);
    __pyx_v_boundaryJac_ref = ((PyArrayObject *)values[20]);
    __pyx_v_nElements_global = __Pyx_PyInt_As_int(values[21]); if (unlikely((__pyx_v_nElements_global == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 856, __pyx_L3_error)
    __pyx_v_useMetrics = __pyx_PyFloat_AsDouble(values[22]); if (unlikely((__pyx_v_useMetrics == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 857, __pyx_L3_error)
    __pyx_v_alphaBDF = __pyx_PyFloat_AsDouble(values[23]); if (unlikely((__pyx_v_alphaBDF == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 858, __pyx_L3_error)
    __pyx_v_lag_shockCapturing = __Pyx_PyInt_As_int(values[24]); if (unlikely((__pyx_v_lag_shockCapturing == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 859, __pyx_L3_error)
    __pyx_v_shockCapturingDiffusion = __pyx_PyFloat_AsDouble(values[25]); if (unlikely((__pyx_v_shockCapturingDiffusion == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 860, __pyx_L3_error)
    __pyx_v_q_porosity = ((PyArrayObject *)values[26]);
    __pyx_v_u_l2g = ((PyArrayObject *)values[27]);
    __pyx_v_elementDiameter = ((PyArrayObject *)values[28]);
    __pyx_v_degree_polynomial = __Pyx_PyInt_As_int(values[29]); if (unlikely((__pyx_v_degree_polynomial == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 866, __pyx_L3_error)
    __pyx_v_u_dof = ((PyArrayObject *)values[30]);
    __pyx_v_velocity = ((PyArrayObject *)values[31]);
    __pyx_v_q_m_betaBDF = ((PyArrayObject *)values[32]);
    __pyx_v_cfl = ((PyArrayObject *)values[33]);
    __pyx_v_q_numDiff_u_last = ((PyArrayObject *)values[34]);
    __pyx_v_csrRowIndeces_u_u = ((PyArrayObject *)values[35]);
    __pyx_v_csrColumnOffsets_u_u = ((PyArrayObject *)values[36]);
    __pyx_v_globalJacobian = values[37];
    __pyx_v_nExteriorElementBoundaries_global = __Pyx_PyInt_As_int(values[38]); if (unlikely((__pyx_v_nExteriorElementBoundaries_global == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 874, __pyx_L3_error)
    __pyx_v_exteriorElementBoundariesArray = ((PyArrayObject *)values[39]);
    __pyx_v_elementBoundaryElementsArray = ((PyArrayObject *)values[40]);
    __pyx_v_elementBoundaryLocalElementBoundariesArray = ((PyArrayObject *)values[41]);
    __pyx_v_ebqe_velocity_ext = ((PyArrayObject *)values[42]);
    __pyx_v_ebqe_porosity_ext = ((PyArrayObject *)values[43]);
    __pyx_v_isDOFBoundary_u = ((PyArrayObject *)values[44]);
    __pyx_v_ebqe_bc_u_ext = ((PyArrayObject *)values[45]);
    __pyx_v_isFluxBoundary_u = ((PyArrayObject *)values[46]);
    __pyx_v_ebqe_bc_flux_u_ext = ((PyArrayObject *)values[47]);
    __pyx_v_csrColumnOffsets_eb_u_u = ((PyArrayObject *)values[48]);
    __pyx_v_LUMPED_MASS_MATRIX = __Pyx_PyInt_As_int(values[49]); if (unlikely((__pyx_v_LUMPED_MASS_MATRIX == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 887, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calculateMassMatrix", 1, 50, 50, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 834, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mprans.cTIM.cTIM_base.calculateMassMatrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "mesh_trial_ref", 0))) __PYX_ERR(0, 836, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_grad_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "mesh_grad_trial_ref", 0))) __PYX_ERR(0, 837, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_dof), __pyx_ptype_5numpy_ndarray, 1, "mesh_dof", 0))) __PYX_ERR(0, 838, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_velocity_dof), __pyx_ptype_5numpy_ndarray, 1, "mesh_velocity_dof", 0))) __PYX_ERR(0, 839, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_l2g), __pyx_ptype_5numpy_ndarray, 1, "mesh_l2g", 0))) __PYX_ERR(0, 841, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dV_ref), __pyx_ptype_5numpy_ndarray, 1, "dV_ref", 0))) __PYX_ERR(0, 842, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_u_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "u_trial_ref", 0))) __PYX_ERR(0, 843, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_u_grad_trial_ref), __pyx_ptype_5numpy_ndarray, 1, "u_grad_trial_ref", 0))) __PYX_ERR(0, 844, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_u_test_ref), __pyx_ptype_5numpy_ndarray, 1, "u_test_ref", 0))) __PYX_ERR(0, 845, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_u_grad_test_ref), __pyx_ptype_5numpy_ndarray, 1, "u_grad_test_ref", 0))) __PYX_ERR(0, 846, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "mesh_trial_trace_ref", 0))) __PYX_ERR(0, 847, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh_grad_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "mesh_grad_trial_trace_ref", 0))) __PYX_ERR(0, 848, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dS_ref), __pyx_ptype_5numpy_ndarray, 1, "dS_ref", 0))) __PYX_ERR(0, 849, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_u_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "u_trial_trace_ref", 0))) __PYX_ERR(0, 850, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_u_grad_trial_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "u_grad_trial_trace_ref", 0))) __PYX_ERR(0, 851, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_u_test_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "u_test_trace_ref", 0))) __PYX_ERR(0, 852, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_u_grad_test_trace_ref), __pyx_ptype_5numpy_ndarray, 1, "u_grad_test_trace_ref", 0))) __PYX_ERR(0, 853, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_normal_ref), __pyx_ptype_5numpy_ndarray, 1, "normal_ref", 0))) __PYX_ERR(0, 854, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_boundaryJac_ref), __pyx_ptype_5numpy_ndarray, 1, "boundaryJac_ref", 0))) __PYX_ERR(0, 855, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_porosity), __pyx_ptype_5numpy_ndarray, 1, "q_porosity", 0))) __PYX_ERR(0, 862, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_u_l2g), __pyx_ptype_5numpy_ndarray, 1, "u_l2g", 0))) __PYX_ERR(0, 864, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_elementDiameter), __pyx_ptype_5numpy_ndarray, 1, "elementDiameter", 0))) __PYX_ERR(0, 865, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_u_dof), __pyx_ptype_5numpy_ndarray, 1, "u_dof", 0))) __PYX_ERR(0, 867, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_velocity), __pyx_ptype_5numpy_ndarray, 1, "velocity", 0))) __PYX_ERR(0, 868, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_m_betaBDF), __pyx_ptype_5numpy_ndarray, 1, "q_m_betaBDF", 0))) __PYX_ERR(0, 869, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_cfl), __pyx_ptype_5numpy_ndarray, 1, "cfl", 0))) __PYX_ERR(0, 870, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_numDiff_u_last), __pyx_ptype_5numpy_ndarray, 1, "q_numDiff_u_last", 0))) __PYX_ERR(0, 871, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrRowIndeces_u_u), __pyx_ptype_5numpy_ndarray, 1, "csrRowIndeces_u_u", 0))) __PYX_ERR(0, 872, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_u_u), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_u_u", 0))) __PYX_ERR(0, 872, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_exteriorElementBoundariesArray), __pyx_ptype_5numpy_ndarray, 1, "exteriorElementBoundariesArray", 0))) __PYX_ERR(0, 875, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_elementBoundaryElementsArray), __pyx_ptype_5numpy_ndarray, 1, "elementBoundaryElementsArray", 0))) __PYX_ERR(0, 876, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_elementBoundaryLocalElementBoundariesArray), __pyx_ptype_5numpy_ndarray, 1, "elementBoundaryLocalElementBoundariesArray", 0))) __PYX_ERR(0, 877, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_velocity_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_velocity_ext", 0))) __PYX_ERR(0, 878, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_porosity_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_porosity_ext", 0))) __PYX_ERR(0, 880, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isDOFBoundary_u), __pyx_ptype_5numpy_ndarray, 1, "isDOFBoundary_u", 0))) __PYX_ERR(0, 882, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_u_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_u_ext", 0))) __PYX_ERR(0, 883, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isFluxBoundary_u), __pyx_ptype_5numpy_ndarray, 1, "isFluxBoundary_u", 0))) __PYX_ERR(0, 884, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ebqe_bc_flux_u_ext), __pyx_ptype_5numpy_ndarray, 1, "ebqe_bc_flux_u_ext", 0))) __PYX_ERR(0, 885, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csrColumnOffsets_eb_u_u), __pyx_ptype_5numpy_ndarray, 1, "csrColumnOffsets_eb_u_u", 0))) __PYX_ERR(0, 886, __pyx_L1_error)
  __pyx_r = __pyx_pf_6mprans_4cTIM_9cTIM_base_12calculateMassMatrix(((struct __pyx_obj_6mprans_4cTIM_cTIM_base *)__pyx_v_self), __pyx_v_dt, __pyx_v_mesh_trial_ref, __pyx_v_mesh_grad_trial_ref, __pyx_v_mesh_dof, __pyx_v_mesh_velocity_dof, __pyx_v_MOVING_DOMAIN, __pyx_v_mesh_l2g, __pyx_v_dV_ref, __pyx_v_u_trial_ref, __pyx_v_u_grad_trial_ref, __pyx_v_u_test_ref, __pyx_v_u_grad_test_ref, __pyx_v_mesh_trial_trace_ref, __pyx_v_mesh_grad_trial_trace_ref, __pyx_v_dS_ref, __pyx_v_u_trial_trace_ref, __pyx_v_u_grad_trial_trace_ref, __pyx_v_u_test_trace_ref, __pyx_v_u_grad_test_trace_ref, __pyx_v_normal_ref, __pyx_v_boundaryJac_ref, __pyx_v_nElements_global, __pyx_v_useMetrics, __pyx_v_alphaBDF, __pyx_v_lag_shockCapturing, __pyx_v_shockCapturingDiffusion, __pyx_v_q_porosity, __pyx_v_u_l2g, __pyx_v_elementDiameter, __pyx_v_degree_polynomial, __pyx_v_u_dof, __pyx_v_velocity, __pyx_v_q_m_betaBDF, __pyx_v_cfl, __pyx_v_q_numDiff_u_last, __pyx_v_csrRowIndeces_u_u, __pyx_v_csrColumnOffsets_u_u, __pyx_v_globalJacobian, __pyx_v_nExteriorElementBoundaries_global, __pyx_v_exteriorElementBoundariesArray, __pyx_v_elementBoundaryElementsArray, __pyx_v_elementBoundaryLocalElementBoundariesArray, __pyx_v_ebqe_velocity_ext, __pyx_v_ebqe_porosity_ext, __pyx_v_isDOFBoundary_u, __pyx_v_ebqe_bc_u_ext, __pyx_v_isFluxBoundary_u, __pyx_v_ebqe_bc_flux_u_ext, __pyx_v_csrColumnOffsets_eb_u_u, __pyx_v_LUMPED_MASS_MATRIX);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6mprans_4cTIM_9cTIM_base_12calculateMassMatrix(struct __pyx_obj_6mprans_4cTIM_cTIM_base *__pyx_v_self, double __pyx_v_dt, PyArrayObject *__pyx_v_mesh_trial_ref, PyArrayObject *__pyx_v_mesh_grad_trial_ref, PyArrayObject *__pyx_v_mesh_dof, PyArrayObject *__pyx_v_mesh_velocity_dof, double __pyx_v_MOVING_DOMAIN, PyArrayObject *__pyx_v_mesh_l2g, PyArrayObject *__pyx_v_dV_ref, PyArrayObject *__pyx_v_u_trial_ref, PyArrayObject *__pyx_v_u_grad_trial_ref, PyArrayObject *__pyx_v_u_test_ref, PyArrayObject *__pyx_v_u_grad_test_ref, PyArrayObject *__pyx_v_mesh_trial_trace_ref, PyArrayObject *__pyx_v_mesh_grad_trial_trace_ref, PyArrayObject *__pyx_v_dS_ref, PyArrayObject *__pyx_v_u_trial_trace_ref, PyArrayObject *__pyx_v_u_grad_trial_trace_ref, PyArrayObject *__pyx_v_u_test_trace_ref, PyArrayObject *__pyx_v_u_grad_test_trace_ref, PyArrayObject *__pyx_v_normal_ref, PyArrayObject *__pyx_v_boundaryJac_ref, int __pyx_v_nElements_global, double __pyx_v_useMetrics, double __pyx_v_alphaBDF, int __pyx_v_lag_shockCapturing, double __pyx_v_shockCapturingDiffusion, PyArrayObject *__pyx_v_q_porosity, PyArrayObject *__pyx_v_u_l2g, PyArrayObject *__pyx_v_elementDiameter, int __pyx_v_degree_polynomial, PyArrayObject *__pyx_v_u_dof, PyArrayObject *__pyx_v_velocity, PyArrayObject *__pyx_v_q_m_betaBDF, PyArrayObject *__pyx_v_cfl, PyArrayObject *__pyx_v_q_numDiff_u_last, PyArrayObject *__pyx_v_csrRowIndeces_u_u, PyArrayObject *__pyx_v_csrColumnOffsets_u_u, PyObject *__pyx_v_globalJacobian, int __pyx_v_nExteriorElementBoundaries_global, PyArrayObject *__pyx_v_exteriorElementBoundariesArray, PyArrayObject *__pyx_v_elementBoundaryElementsArray, PyArrayObject *__pyx_v_elementBoundaryLocalElementBoundariesArray, PyArrayObject *__pyx_v_ebqe_velocity_ext, PyArrayObject *__pyx_v_ebqe_porosity_ext, PyArrayObject *__pyx_v_isDOFBoundary_u, PyArrayObject *__pyx_v_ebqe_bc_u_ext, PyArrayObject *__pyx_v_isFluxBoundary_u, PyArrayObject *__pyx_v_ebqe_bc_flux_u_ext, PyArrayObject *__pyx_v_csrColumnOffsets_eb_u_u, int __pyx_v_LUMPED_MASS_MATRIX) {
  CYTHON_UNUSED PyArrayObject *__pyx_v_rowptr = 0;
  CYTHON_UNUSED PyArrayObject *__pyx_v_colind = 0;
  PyArrayObject *__pyx_v_globalJacobian_a = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  __Pyx_RefNannySetupContext("calculateMassMatrix", 0);

  /* "mprans/cTIM.pyx":889
 *                          int LUMPED_MASS_MATRIX):
 *        cdef numpy.ndarray rowptr,colind,globalJacobian_a
 *        (rowptr,colind,globalJacobian_a) = globalJacobian.getCSRrepresentation()             # <<<<<<<<<<<<<<
 *        self.thisptr.calculateMassMatrix(dt,
 *                                        <double*> mesh_trial_ref.data,
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_globalJacobian, __pyx_n_s_getCSRrepresentation); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 889, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 889, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 889, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    #if !CYTHON_COMPILING_IN_PYPY
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 3)) {
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 889, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 2); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 889, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 889, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 889, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_5 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 889, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = Py_TYPE(__pyx_t_5)->tp_iternext;
    index = 0; __pyx_t_2 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_3 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    index = 2; __pyx_t_4 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_4)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_4);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_5), 3) < 0) __PYX_ERR(0, 889, __pyx_L1_error)
    __pyx_t_6 = NULL;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 889, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 889, __pyx_L1_error)
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 889, __pyx_L1_error)
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 889, __pyx_L1_error)
  __pyx_v_rowptr = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_v_colind = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_v_globalJacobian_a = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "mprans/cTIM.pyx":890
 *        cdef numpy.ndarray rowptr,colind,globalJacobian_a
 *        (rowptr,colind,globalJacobian_a) = globalJacobian.getCSRrepresentation()
 *        self.thisptr.calculateMassMatrix(dt,             # <<<<<<<<<<<<<<
 *                                        <double*> mesh_trial_ref.data,
 *                                        <double*> mesh_grad_trial_ref.data,
 */
  __pyx_v_self->thisptr->calculateMassMatrix(__pyx_v_dt, ((double *)__pyx_v_mesh_trial_ref->data), ((double *)__pyx_v_mesh_grad_trial_ref->data), ((double *)__pyx_v_mesh_dof->data), ((double *)__pyx_v_mesh_velocity_dof->data), __pyx_v_MOVING_DOMAIN, ((int *)__pyx_v_mesh_l2g->data), ((double *)__pyx_v_dV_ref->data), ((double *)__pyx_v_u_trial_ref->data), ((double *)__pyx_v_u_grad_trial_ref->data), ((double *)__pyx_v_u_test_ref->data), ((double *)__pyx_v_u_grad_test_ref->data), ((double *)__pyx_v_mesh_trial_trace_ref->data), ((double *)__pyx_v_mesh_grad_trial_trace_ref->data), ((double *)__pyx_v_dS_ref->data), ((double *)__pyx_v_u_trial_trace_ref->data), ((double *)__pyx_v_u_grad_trial_trace_ref->data), ((double *)__pyx_v_u_test_trace_ref->data), ((double *)__pyx_v_u_grad_test_trace_ref->data), ((double *)__pyx_v_normal_ref->data), ((double *)__pyx_v_boundaryJac_ref->data), __pyx_v_nElements_global, __pyx_v_useMetrics, __pyx_v_alphaBDF, __pyx_v_lag_shockCapturing, __pyx_v_shockCapturingDiffusion, ((double *)__pyx_v_q_porosity->data), ((int *)__pyx_v_u_l2g->data), ((double *)__pyx_v_elementDiameter->data), __pyx_v_degree_polynomial, ((double *)__pyx_v_u_dof->data), ((double *)__pyx_v_velocity->data), ((double *)__pyx_v_q_m_betaBDF->data), ((double *)__pyx_v_cfl->data), ((double *)__pyx_v_q_numDiff_u_last->data), ((int *)__pyx_v_csrRowIndeces_u_u->data), ((int *)__pyx_v_csrColumnOffsets_u_u->data), ((double *)__pyx_v_globalJacobian_a->data), __pyx_v_nExteriorElementBoundaries_global, ((int *)__pyx_v_exteriorElementBoundariesArray->data), ((int *)__pyx_v_elementBoundaryElementsArray->data), ((int *)__pyx_v_elementBoundaryLocalElementBoundariesArray->data), ((double *)__pyx_v_ebqe_velocity_ext->data), ((double *)__pyx_v_ebqe_porosity_ext->data), ((int *)__pyx_v_isDOFBoundary_u->data), ((double *)__pyx_v_ebqe_bc_u_ext->data), ((int *)__pyx_v_isFluxBoundary_u->data), ((double *)__pyx_v_ebqe_bc_flux_u_ext->data), ((int *)__pyx_v_csrColumnOffsets_eb_u_u->data), __pyx_v_LUMPED_MASS_MATRIX);

  /* "mprans/cTIM.pyx":834
 *                                        <int*> csrColumnOffsets_eb_u_u.data,
 *                                        LUMPED_MASS_MATRIX)
 *    def calculateMassMatrix(self,             # <<<<<<<<<<<<<<
 *                          double dt,
 *                          numpy.ndarray mesh_trial_ref,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("mprans.cTIM.cTIM_base.calculateMassMatrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_rowptr);
  __Pyx_XDECREF((PyObject *)__pyx_v_colind);
  __Pyx_XDECREF((PyObject *)__pyx_v_globalJacobian_a);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":197
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5numpy_7ndarray___getbuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_copy_shape;
  int __pyx_v_i;
  int __pyx_v_ndim;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  int __pyx_v_t;
  char *__pyx_v_f;
  PyArray_Descr *__pyx_v_descr = 0;
  int __pyx_v_offset;
  int __pyx_v_hasfields;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  char *__pyx_t_7;
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  if (__pyx_v_info != NULL) {
    __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(__pyx_v_info->obj);
  }

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":203
 *             # of flags
 * 
 *             if info == NULL: return             # <<<<<<<<<<<<<<
 * 
 *             cdef int copy_shape, i, ndim
 */
  __pyx_t_1 = ((__pyx_v_info == NULL) != 0);
  if (__pyx_t_1) {
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":206
 * 
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 */
  __pyx_v_endian_detector = 1;

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":207
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 * 
 *             ndim = PyArray_NDIM(self)
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":209
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 *             ndim = PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_v_ndim = PyArray_NDIM(__pyx_v_self);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":211
 *             ndim = PyArray_NDIM(self)
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 copy_shape = 1
 *             else:
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":212
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 copy_shape = 1             # <<<<<<<<<<<<<<
 *             else:
 *                 copy_shape = 0
 */
    __pyx_v_copy_shape = 1;

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":211
 *             ndim = PyArray_NDIM(self)
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 copy_shape = 1
 *             else:
 */
    goto __pyx_L4;
  }

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":214
 *                 copy_shape = 1
 *             else:
 *                 copy_shape = 0             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 */
  /*else*/ {
    __pyx_v_copy_shape = 0;
  }
  __pyx_L4:;

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":216
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_C_CONTIGUOUS) == PyBUF_C_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L6_bool_binop_done;
  }

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":217
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_C_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L6_bool_binop_done:;

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":216
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  if (__pyx_t_1) {

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":218
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 218, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 218, __pyx_L1_error)

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":216
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  }

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":220
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_F_CONTIGUOUS) == PyBUF_F_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L9_bool_binop_done;
  }

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":221
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_F_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L9_bool_binop_done:;

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":220
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  if (__pyx_t_1) {

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":222
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 222, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 222, __pyx_L1_error)

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":220
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  }

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":224
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 *             info.buf = PyArray_DATA(self)             # <<<<<<<<<<<<<<
 *             info.ndim = ndim
 *             if copy_shape:
 */
  __pyx_v_info->buf = PyArray_DATA(__pyx_v_self);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":225
 * 
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim             # <<<<<<<<<<<<<<
 *             if copy_shape:
 *                 # Allocate new buffer for strides and shape info.
 */
  __pyx_v_info->ndim = __pyx_v_ndim;

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":226
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if copy_shape:             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
  __pyx_t_1 = (__pyx_v_copy_shape != 0);
  if (__pyx_t_1) {

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":229
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)             # <<<<<<<<<<<<<<
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 */
    __pyx_v_info->strides = ((Py_ssize_t *)malloc((((sizeof(Py_ssize_t)) * ((size_t)__pyx_v_ndim)) * 2)));

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":230
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim             # <<<<<<<<<<<<<<
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 */
    __pyx_v_info->shape = (__pyx_v_info->strides + __pyx_v_ndim);

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":231
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):             # <<<<<<<<<<<<<<
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 */
    __pyx_t_4 = __pyx_v_ndim;
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":232
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]             # <<<<<<<<<<<<<<
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 */
      (__pyx_v_info->strides[__pyx_v_i]) = (PyArray_STRIDES(__pyx_v_self)[__pyx_v_i]);

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":233
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]             # <<<<<<<<<<<<<<
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 */
      (__pyx_v_info->shape[__pyx_v_i]) = (PyArray_DIMS(__pyx_v_self)[__pyx_v_i]);
    }

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":226
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if copy_shape:             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
    goto __pyx_L11;
  }

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":235
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 */
  /*else*/ {
    __pyx_v_info->strides = ((Py_ssize_t *)PyArray_STRIDES(__pyx_v_self));

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":236
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 */
    __pyx_v_info->shape = ((Py_ssize_t *)PyArray_DIMS(__pyx_v_self));
  }
  __pyx_L11:;

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":237
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 */
  __pyx_v_info->suboffsets = NULL;

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":238
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)             # <<<<<<<<<<<<<<
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 * 
 */
  __pyx_v_info->itemsize = PyArray_ITEMSIZE(__pyx_v_self);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":239
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)             # <<<<<<<<<<<<<<
 * 
 *             cdef int t
 */
  __pyx_v_info->readonly = (!(PyArray_ISWRITEABLE(__pyx_v_self) != 0));

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":242
 * 
 *             cdef int t
 *             cdef char* f = NULL             # <<<<<<<<<<<<<<
 *             cdef dtype descr = self.descr
 *             cdef int offset
 */
  __pyx_v_f = NULL;

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":243
 *             cdef int t
 *             cdef char* f = NULL
 *             cdef dtype descr = self.descr             # <<<<<<<<<<<<<<
 *             cdef int offset
 * 
 */
  __pyx_t_3 = ((PyObject *)__pyx_v_self->descr);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_v_descr = ((PyArray_Descr *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":246
 *             cdef int offset
 * 
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields and not copy_shape:
 */
  __pyx_v_hasfields = PyDataType_HASFIELDS(__pyx_v_descr);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":248
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
 * 
 *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
 *                 # do not call releasebuffer
 *                 info.obj = None
 */
  __pyx_t_2 = ((!(__pyx_v_hasfields != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L15_bool_binop_done;
  }
  __pyx_t_2 = ((!(__pyx_v_copy_shape != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L15_bool_binop_done:;
  if (__pyx_t_1) {

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":250
 *             if not hasfields and not copy_shape:
 *                 # do not call releasebuffer
 *                 info.obj = None             # <<<<<<<<<<<<<<
 *             else:
 *                 # need to call releasebuffer
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = Py_None;

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":248
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
 * 
 *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
 *                 # do not call releasebuffer
 *                 info.obj = None
 */
    goto __pyx_L14;
  }

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":253
 *             else:
 *                 # need to call releasebuffer
 *                 info.obj = self             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields:
 */
  /*else*/ {
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = ((PyObject *)__pyx_v_self);
  }
  __pyx_L14:;

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":255
 *                 info.obj = self
 * 
 *             if not hasfields:             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  __pyx_t_1 = ((!(__pyx_v_hasfields != 0)) != 0);
  if (__pyx_t_1) {

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":256
 * 
 *             if not hasfields:
 *                 t = descr.type_num             # <<<<<<<<<<<<<<
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 */
    __pyx_t_4 = __pyx_v_descr->type_num;
    __pyx_v_t = __pyx_t_4;

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":257
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '>') != 0);
    if (!__pyx_t_2) {
      goto __pyx_L20_next_or;
    } else {
    }
    __pyx_t_2 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L19_bool_binop_done;
    }
    __pyx_L20_next_or:;

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":258
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '<') != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L19_bool_binop_done;
    }
    __pyx_t_2 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L19_bool_binop_done:;

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":257
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    if (__pyx_t_1) {

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":259
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 259, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(1, 259, __pyx_L1_error)

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":257
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    }

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":260
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 */
    switch (__pyx_v_t) {
      case NPY_BYTE:
      __pyx_v_f = ((char *)"b");
      break;

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":261
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 */
      case NPY_UBYTE:
      __pyx_v_f = ((char *)"B");
      break;

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":262
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 */
      case NPY_SHORT:
      __pyx_v_f = ((char *)"h");
      break;

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":263
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 */
      case NPY_USHORT:
      __pyx_v_f = ((char *)"H");
      break;

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":264
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 */
      case NPY_INT:
      __pyx_v_f = ((char *)"i");
      break;

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":265
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 */
      case NPY_UINT:
      __pyx_v_f = ((char *)"I");
      break;

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":266
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 */
      case NPY_LONG:
      __pyx_v_f = ((char *)"l");
      break;

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":267
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 */
      case NPY_ULONG:
      __pyx_v_f = ((char *)"L");
      break;

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":268
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 */
      case NPY_LONGLONG:
      __pyx_v_f = ((char *)"q");
      break;

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":269
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 */
      case NPY_ULONGLONG:
      __pyx_v_f = ((char *)"Q");
      break;

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":270
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 */
      case NPY_FLOAT:
      __pyx_v_f = ((char *)"f");
      break;

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":271
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 */
      case NPY_DOUBLE:
      __pyx_v_f = ((char *)"d");
      break;

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":272
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 */
      case NPY_LONGDOUBLE:
      __pyx_v_f = ((char *)"g");
      break;

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":273
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 */
      case NPY_CFLOAT:
      __pyx_v_f = ((char *)"Zf");
      break;

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":274
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"
 */
      case NPY_CDOUBLE:
      __pyx_v_f = ((char *)"Zd");
      break;

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":275
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 */
      case NPY_CLONGDOUBLE:
      __pyx_v_f = ((char *)"Zg");
      break;

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":276
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      case NPY_OBJECT:
      __pyx_v_f = ((char *)"O");
      break;
      default:

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":278
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *                 info.format = f
 *                 return
 */
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __PYX_ERR(1, 278, __pyx_L1_error)
      break;
    }

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":279
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f             # <<<<<<<<<<<<<<
 *                 return
 *             else:
 */
    __pyx_v_info->format = __pyx_v_f;

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":280
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f
 *                 return             # <<<<<<<<<<<<<<
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":255
 *                 info.obj = self
 * 
 *             if not hasfields:             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  }

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":282
 *                 return
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)             # <<<<<<<<<<<<<<
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 */
  /*else*/ {
    __pyx_v_info->format = ((char *)malloc(0xFF));

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":283
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment             # <<<<<<<<<<<<<<
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,
 */
    (__pyx_v_info->format[0]) = '^';

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":284
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0             # <<<<<<<<<<<<<<
 *                 f = _util_dtypestring(descr, info.format + 1,
 *                                       info.format + _buffer_format_string_len,
 */
    __pyx_v_offset = 0;

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":285
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,             # <<<<<<<<<<<<<<
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 */
    __pyx_t_7 = __pyx_f_5numpy__util_dtypestring(__pyx_v_descr, (__pyx_v_info->format + 1), (__pyx_v_info->format + 0xFF), (&__pyx_v_offset)); if (unlikely(__pyx_t_7 == NULL)) __PYX_ERR(1, 285, __pyx_L1_error)
    __pyx_v_f = __pyx_t_7;

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":288
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 *                 f[0] = c'\0' # Terminate format string             # <<<<<<<<<<<<<<
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 */
    (__pyx_v_f[0]) = '\x00';
  }

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":197
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("numpy.ndarray.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info != NULL && __pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = NULL;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info != NULL && __pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(Py_None);
    __Pyx_DECREF(Py_None); __pyx_v_info->obj = NULL;
  }
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_descr);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":290
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 */

/* Python wrapper */
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info); /*proto*/
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__releasebuffer__ (wrapper)", 0);
  __pyx_pf_5numpy_7ndarray_2__releasebuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__releasebuffer__", 0);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":291
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_t_1 = (PyArray_HASFIELDS(__pyx_v_self) != 0);
  if (__pyx_t_1) {

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":292
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)
 */
    free(__pyx_v_info->format);

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":291
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  }

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":293
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":294
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)             # <<<<<<<<<<<<<<
 *                 # info.shape was stored after info.strides in the same block
 * 
 */
    free(__pyx_v_info->strides);

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":293
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  }

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":290
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":770
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":771
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 771, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":770
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":773
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":774
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 774, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":773
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":776
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":777
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 777, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":776
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":779
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":780
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 780, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":779
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":782
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":783
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 783, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":782
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":785
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *__pyx_v_descr, char *__pyx_v_f, char *__pyx_v_end, int *__pyx_v_offset) {
  PyArray_Descr *__pyx_v_child = 0;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_childname = NULL;
  PyObject *__pyx_v_new_offset = NULL;
  PyObject *__pyx_v_t = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  long __pyx_t_8;
  char *__pyx_t_9;
  __Pyx_RefNannySetupContext("_util_dtypestring", 0);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":790
 * 
 *     cdef dtype child
 *     cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 *     cdef tuple fields
 */
  __pyx_v_endian_detector = 1;

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":791
 *     cdef dtype child
 *     cdef int endian_detector = 1
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 *     cdef tuple fields
 * 
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":794
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  if (unlikely(__pyx_v_descr->names == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(1, 794, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_descr->names; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 794, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 794, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_childname, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":795
 * 
 *     for childname in descr.names:
 *         fields = descr.fields[childname]             # <<<<<<<<<<<<<<
 *         child, new_offset = fields
 * 
 */
    if (unlikely(__pyx_v_descr->fields == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 795, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_descr->fields, __pyx_v_childname); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 795, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(1, 795, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_fields, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":796
 *     for childname in descr.names:
 *         fields = descr.fields[childname]
 *         child, new_offset = fields             # <<<<<<<<<<<<<<
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 */
    if (likely(__pyx_v_fields != Py_None)) {
      PyObject* sequence = __pyx_v_fields;
      #if !CYTHON_COMPILING_IN_PYPY
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(1, 796, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 796, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 796, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
    } else {
      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(1, 796, __pyx_L1_error)
    }
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_dtype))))) __PYX_ERR(1, 796, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_child, ((PyArray_Descr *)__pyx_t_3));
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_new_offset, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":798
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 798, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyNumber_Subtract(__pyx_v_new_offset, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 798, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 798, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = ((((__pyx_v_end - __pyx_v_f) - ((int)__pyx_t_5)) < 15) != 0);
    if (__pyx_t_6) {

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":799
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 799, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(1, 799, __pyx_L1_error)

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":798
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    }

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":801
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '>') != 0);
    if (!__pyx_t_7) {
      goto __pyx_L8_next_or;
    } else {
    }
    __pyx_t_7 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_L8_next_or:;

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":802
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *             raise ValueError(u"Non-native byte order not supported")
 *             # One could encode it in the format string and have Cython
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '<') != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_7 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L7_bool_binop_done:;

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":801
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    if (__pyx_t_6) {

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":803
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 803, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(1, 803, __pyx_L1_error)

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":801
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    }

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":813
 * 
 *         # Output padding bytes
 *         while offset[0] < new_offset:             # <<<<<<<<<<<<<<
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 */
    while (1) {
      __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 813, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_new_offset, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 813, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 813, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (!__pyx_t_6) break;

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":814
 *         # Output padding bytes
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte             # <<<<<<<<<<<<<<
 *             f += 1
 *             offset[0] += 1
 */
      (__pyx_v_f[0]) = 0x78;

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":815
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte
 *             f += 1             # <<<<<<<<<<<<<<
 *             offset[0] += 1
 * 
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":816
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 *             offset[0] += 1             # <<<<<<<<<<<<<<
 * 
 *         offset[0] += child.itemsize
 */
      __pyx_t_8 = 0;
      (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + 1);
    }

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":818
 *             offset[0] += 1
 * 
 *         offset[0] += child.itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not PyDataType_HASFIELDS(child):
 */
    __pyx_t_8 = 0;
    (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + __pyx_v_child->elsize);

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":820
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
    __pyx_t_6 = ((!(PyDataType_HASFIELDS(__pyx_v_child) != 0)) != 0);
    if (__pyx_t_6) {

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":821
 * 
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num             # <<<<<<<<<<<<<<
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")
 */
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_child->type_num); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 821, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":822
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      __pyx_t_6 = (((__pyx_v_end - __pyx_v_f) < 5) != 0);
      if (__pyx_t_6) {

        /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":823
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 823, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(1, 823, __pyx_L1_error)

        /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":822
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      }

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":826
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_BYTE); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 826, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 826, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 826, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 98;
        goto __pyx_L15;
      }

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":827
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"             # <<<<<<<<<<<<<<
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UBYTE); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 827, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 827, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 827, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 66;
        goto __pyx_L15;
      }

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":828
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"             # <<<<<<<<<<<<<<
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_SHORT); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 828, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 828, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 828, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x68;
        goto __pyx_L15;
      }

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":829
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"             # <<<<<<<<<<<<<<
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_USHORT); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 829, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 829, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 829, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 72;
        goto __pyx_L15;
      }

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":830
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_INT); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 830, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 830, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 830, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x69;
        goto __pyx_L15;
      }

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":831
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UINT); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 831, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 831, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 831, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 73;
        goto __pyx_L15;
      }

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":832
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 832, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 832, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 832, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x6C;
        goto __pyx_L15;
      }

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":833
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 833, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 833, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 833, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 76;
        goto __pyx_L15;
      }

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":834
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGLONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 834, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 834, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 834, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x71;
        goto __pyx_L15;
      }

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":835
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONGLONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 835, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 835, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 835, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 81;
        goto __pyx_L15;
      }

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":836
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"             # <<<<<<<<<<<<<<
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_FLOAT); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 836, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 836, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 836, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x66;
        goto __pyx_L15;
      }

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":837
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_DOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 837, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 837, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 837, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x64;
        goto __pyx_L15;
      }

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":838
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"             # <<<<<<<<<<<<<<
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 838, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 838, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 838, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x67;
        goto __pyx_L15;
      }

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":839
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf             # <<<<<<<<<<<<<<
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CFLOAT); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 839, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 839, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 839, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x66;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":840
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd             # <<<<<<<<<<<<<<
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 840, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 840, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 840, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x64;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":841
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg             # <<<<<<<<<<<<<<
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CLONGDOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 841, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 841, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 841, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x67;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":842
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_OBJECT); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 842, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 842, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 842, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 79;
        goto __pyx_L15;
      }

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":844
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *             f += 1
 *         else:
 */
      /*else*/ {
        __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 844, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 844, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 844, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __PYX_ERR(1, 844, __pyx_L1_error)
      }
      __pyx_L15:;

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":845
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *             f += 1             # <<<<<<<<<<<<<<
 *         else:
 *             # Cython ignores struct boundary information ("T{...}"),
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":820
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
      goto __pyx_L13;
    }

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":849
 *             # Cython ignores struct boundary information ("T{...}"),
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)             # <<<<<<<<<<<<<<
 *     return f
 * 
 */
    /*else*/ {
      __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_9 == NULL)) __PYX_ERR(1, 849, __pyx_L1_error)
      __pyx_v_f = __pyx_t_9;
    }
    __pyx_L13:;

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":794
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":850
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)
 *     return f             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_f;
  goto __pyx_L0;

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":785
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("numpy._util_dtypestring", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_child);
  __Pyx_XDECREF(__pyx_v_fields);
  __Pyx_XDECREF(__pyx_v_childname);
  __Pyx_XDECREF(__pyx_v_new_offset);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":966
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  PyObject *__pyx_v_baseptr;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":968
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */
  __pyx_t_1 = (__pyx_v_base == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":969
 *      cdef PyObject* baseptr
 *      if base is None:
 *          baseptr = NULL             # <<<<<<<<<<<<<<
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 */
    __pyx_v_baseptr = NULL;

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":968
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */
    goto __pyx_L3;
  }

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":971
 *          baseptr = NULL
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!             # <<<<<<<<<<<<<<
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 */
  /*else*/ {
    Py_INCREF(__pyx_v_base);

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":972
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base             # <<<<<<<<<<<<<<
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr
 */
    __pyx_v_baseptr = ((PyObject *)__pyx_v_base);
  }
  __pyx_L3:;

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":973
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)             # <<<<<<<<<<<<<<
 *      arr.base = baseptr
 * 
 */
  Py_XDECREF(__pyx_v_arr->base);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":974
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  __pyx_v_arr->base = __pyx_v_baseptr;

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":966
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":976
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":977
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_arr->base == NULL) != 0);
  if (__pyx_t_1) {

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":978
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     else:
 *         return <object>arr.base
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":977
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */
  }

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":980
 *         return None
 *     else:
 *         return <object>arr.base             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_arr->base));
    __pyx_r = ((PyObject *)__pyx_v_arr->base);
    goto __pyx_L0;
  }

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":976
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":985
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_array()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_array", 0);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":986
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":987
 * cdef inline int import_array() except -1:
 *     try:
 *         _import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")
 */
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(1, 987, __pyx_L3_error)

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":986
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L10_try_end;
    __pyx_L3_error:;
    __Pyx_PyThreadState_assign

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":988
 *     try:
 *         _import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(1, 988, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":989
 *         _import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 989, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(1, 989, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":986
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L10_try_end:;
  }

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":985
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_array()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":991
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_umath", 0);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":992
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":993
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(1, 993, __pyx_L3_error)

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":992
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L10_try_end;
    __pyx_L3_error:;
    __Pyx_PyThreadState_assign

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":994
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(1, 994, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":995
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 995, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(1, 995, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":992
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L10_try_end:;
  }

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":991
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":997
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_ufunc", 0);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":998
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":999
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(1, 999, __pyx_L3_error)

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":998
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L10_try_end;
    __pyx_L3_error:;
    __Pyx_PyThreadState_assign

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1000
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(1, 1000, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1001
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1001, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(1, 1001, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":998
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L10_try_end:;
  }

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":997
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_6mprans_4cTIM_cTIM_base(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6mprans_4cTIM_9cTIM_base_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6mprans_4cTIM_cTIM_base(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_6mprans_4cTIM_9cTIM_base_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6mprans_4cTIM_cTIM_base[] = {
  {"FCTStep", (PyCFunction)__pyx_pw_6mprans_4cTIM_9cTIM_base_5FCTStep, METH_VARARGS|METH_KEYWORDS, 0},
  {"calculateResidual", (PyCFunction)__pyx_pw_6mprans_4cTIM_9cTIM_base_7calculateResidual, METH_VARARGS|METH_KEYWORDS, 0},
  {"calculateResidual_entropy_viscosity", (PyCFunction)__pyx_pw_6mprans_4cTIM_9cTIM_base_9calculateResidual_entropy_viscosity, METH_VARARGS|METH_KEYWORDS, 0},
  {"calculateJacobian", (PyCFunction)__pyx_pw_6mprans_4cTIM_9cTIM_base_11calculateJacobian, METH_VARARGS|METH_KEYWORDS, 0},
  {"calculateMassMatrix", (PyCFunction)__pyx_pw_6mprans_4cTIM_9cTIM_base_13calculateMassMatrix, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6mprans_4cTIM_cTIM_base = {
  PyVarObject_HEAD_INIT(0, 0)
  "mprans.cTIM.cTIM_base", /*tp_name*/
  sizeof(struct __pyx_obj_6mprans_4cTIM_cTIM_base), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6mprans_4cTIM_cTIM_base, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6mprans_4cTIM_cTIM_base, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6mprans_4cTIM_cTIM_base, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

static int __pyx_import_star_set(PyObject *o, PyObject* py_name, char *name) {
  static const char* internal_type_names[] = {
    "TIM_base",
    "cTIM_base",
    0
  };
  const char** type_name = internal_type_names;
  while (*type_name) {
    if (__Pyx_StrEq(name, *type_name)) {
      PyErr_Format(PyExc_TypeError, "Cannot overwrite C type %s", name);
      goto bad;
    }
    type_name++;
  }
  if (0);
  else {
    if (PyObject_SetAttr(__pyx_m, py_name, o) < 0) goto bad;
  }
  return 0;
  bad:
  return -1;
}

























































































































static int
__Pyx_import_all_from(PyObject *locals, PyObject *v)
{
    PyObject *all = PyObject_GetAttrString(v, "__all__");
    PyObject *dict, *name, *value;
    int skip_leading_underscores = 0;
    int pos, err;

    if (all == NULL) {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError))
            return -1;
        PyErr_Clear();
        dict = PyObject_GetAttrString(v, "__dict__");
        if (dict == NULL) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError))
                return -1;
            PyErr_SetString(PyExc_ImportError,
            "from-import-* object has no __dict__ and no __all__");
            return -1;
        }
#if PY_MAJOR_VERSION < 3
        all = PyObject_CallMethod(dict, (char *)"keys", NULL);
#else
        all = PyMapping_Keys(dict);
#endif
        Py_DECREF(dict);
        if (all == NULL)
            return -1;
        skip_leading_underscores = 1;
    }

    for (pos = 0, err = 0; ; pos++) {
        name = PySequence_GetItem(all, pos);
        if (name == NULL) {
            if (!PyErr_ExceptionMatches(PyExc_IndexError))
                err = -1;
            else
                PyErr_Clear();
            break;
        }
        if (skip_leading_underscores &&
#if PY_MAJOR_VERSION < 3
            PyString_Check(name) &&
            PyString_AS_STRING(name)[0] == '_')
#else
            PyUnicode_Check(name) &&
            PyUnicode_AS_UNICODE(name)[0] == '_')
#endif
        {
            Py_DECREF(name);
            continue;
        }
        value = PyObject_GetAttr(v, name);
        if (value == NULL)
            err = -1;
        else if (PyDict_CheckExact(locals))
            err = PyDict_SetItem(locals, name, value);
        else
            err = PyObject_SetItem(locals, name, value);
        Py_DECREF(name);
        Py_XDECREF(value);
        if (err != 0)
            break;
    }
    Py_DECREF(all);
    return err;
}


static int __pyx_import_star(PyObject* m) {

    int i;
    int ret = -1;
    char* s;
    PyObject *locals = 0;
    PyObject *list = 0;
#if PY_MAJOR_VERSION >= 3
    PyObject *utf8_name = 0;
#endif
    PyObject *name;
    PyObject *item;

    locals = PyDict_New();              if (!locals) goto bad;
    if (__Pyx_import_all_from(locals, m) < 0) goto bad;
    list = PyDict_Items(locals);        if (!list) goto bad;

    for(i=0; i<PyList_GET_SIZE(list); i++) {
        name = PyTuple_GET_ITEM(PyList_GET_ITEM(list, i), 0);
        item = PyTuple_GET_ITEM(PyList_GET_ITEM(list, i), 1);
#if PY_MAJOR_VERSION >= 3
        utf8_name = PyUnicode_AsUTF8String(name);
        if (!utf8_name) goto bad;
        s = PyBytes_AS_STRING(utf8_name);
        if (__pyx_import_star_set(item, name, s) < 0) goto bad;
        Py_DECREF(utf8_name); utf8_name = 0;
#else
        s = PyString_AsString(name);
        if (!s) goto bad;
        if (__pyx_import_star_set(item, name, s) < 0) goto bad;
#endif
    }
    ret = 0;

bad:
    Py_XDECREF(locals);
    Py_XDECREF(list);
#if PY_MAJOR_VERSION >= 3
    Py_XDECREF(utf8_name);
#endif
    return ret;
}



#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "cTIM",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_CTx, __pyx_k_CTx, sizeof(__pyx_k_CTx), 0, 0, 1, 1},
  {&__pyx_n_s_CTy, __pyx_k_CTy, sizeof(__pyx_k_CTy), 0, 0, 1, 1},
  {&__pyx_n_s_CTz, __pyx_k_CTz, sizeof(__pyx_k_CTz), 0, 0, 1, 1},
  {&__pyx_n_s_CompKernelFlag, __pyx_k_CompKernelFlag, sizeof(__pyx_k_CompKernelFlag), 0, 0, 1, 1},
  {&__pyx_n_s_Cx, __pyx_k_Cx, sizeof(__pyx_k_Cx), 0, 0, 1, 1},
  {&__pyx_n_s_Cy, __pyx_k_Cy, sizeof(__pyx_k_Cy), 0, 0, 1, 1},
  {&__pyx_n_s_Cz, __pyx_k_Cz, sizeof(__pyx_k_Cz), 0, 0, 1, 1},
  {&__pyx_n_s_ENTROPY_TYPE, __pyx_k_ENTROPY_TYPE, sizeof(__pyx_k_ENTROPY_TYPE), 0, 0, 1, 1},
  {&__pyx_kp_u_Format_string_allocated_too_shor, __pyx_k_Format_string_allocated_too_shor, sizeof(__pyx_k_Format_string_allocated_too_shor), 0, 1, 0, 0},
  {&__pyx_kp_u_Format_string_allocated_too_shor_2, __pyx_k_Format_string_allocated_too_shor_2, sizeof(__pyx_k_Format_string_allocated_too_shor_2), 0, 1, 0, 0},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_n_s_LUMPED_MASS_MATRIX, __pyx_k_LUMPED_MASS_MATRIX, sizeof(__pyx_k_LUMPED_MASS_MATRIX), 0, 0, 1, 1},
  {&__pyx_n_s_ML, __pyx_k_ML, sizeof(__pyx_k_ML), 0, 0, 1, 1},
  {&__pyx_n_s_MOVING_DOMAIN, __pyx_k_MOVING_DOMAIN, sizeof(__pyx_k_MOVING_DOMAIN), 0, 0, 1, 1},
  {&__pyx_n_s_MassMatrix, __pyx_k_MassMatrix, sizeof(__pyx_k_MassMatrix), 0, 0, 1, 1},
  {&__pyx_n_s_NNZ, __pyx_k_NNZ, sizeof(__pyx_k_NNZ), 0, 0, 1, 1},
  {&__pyx_kp_u_Non_native_byte_order_not_suppor, __pyx_k_Non_native_byte_order_not_suppor, sizeof(__pyx_k_Non_native_byte_order_not_suppor), 0, 1, 0, 0},
  {&__pyx_n_s_OneLevelTransport, __pyx_k_OneLevelTransport, sizeof(__pyx_k_OneLevelTransport), 0, 0, 1, 1},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s_STABILIZATION_TYPE, __pyx_k_STABILIZATION_TYPE, sizeof(__pyx_k_STABILIZATION_TYPE), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s__10, __pyx_k__10, sizeof(__pyx_k__10), 0, 0, 1, 1},
  {&__pyx_n_s_alphaBDF, __pyx_k_alphaBDF, sizeof(__pyx_k_alphaBDF), 0, 0, 1, 1},
  {&__pyx_n_s_boundaryJac_ref, __pyx_k_boundaryJac_ref, sizeof(__pyx_k_boundaryJac_ref), 0, 0, 1, 1},
  {&__pyx_n_s_cE, __pyx_k_cE, sizeof(__pyx_k_cE), 0, 0, 1, 1},
  {&__pyx_n_s_cK, __pyx_k_cK, sizeof(__pyx_k_cK), 0, 0, 1, 1},
  {&__pyx_n_s_cfl, __pyx_k_cfl, sizeof(__pyx_k_cfl), 0, 0, 1, 1},
  {&__pyx_n_s_csrColumnOffsets_CellLoops, __pyx_k_csrColumnOffsets_CellLoops, sizeof(__pyx_k_csrColumnOffsets_CellLoops), 0, 0, 1, 1},
  {&__pyx_n_s_csrColumnOffsets_DofLoops, __pyx_k_csrColumnOffsets_DofLoops, sizeof(__pyx_k_csrColumnOffsets_DofLoops), 0, 0, 1, 1},
  {&__pyx_n_s_csrColumnOffsets_eb_CellLoops, __pyx_k_csrColumnOffsets_eb_CellLoops, sizeof(__pyx_k_csrColumnOffsets_eb_CellLoops), 0, 0, 1, 1},
  {&__pyx_n_s_csrColumnOffsets_eb_u_u, __pyx_k_csrColumnOffsets_eb_u_u, sizeof(__pyx_k_csrColumnOffsets_eb_u_u), 0, 0, 1, 1},
  {&__pyx_n_s_csrColumnOffsets_u_u, __pyx_k_csrColumnOffsets_u_u, sizeof(__pyx_k_csrColumnOffsets_u_u), 0, 0, 1, 1},
  {&__pyx_n_s_csrRowIndeces_CellLoops, __pyx_k_csrRowIndeces_CellLoops, sizeof(__pyx_k_csrRowIndeces_CellLoops), 0, 0, 1, 1},
  {&__pyx_n_s_csrRowIndeces_DofLoops, __pyx_k_csrRowIndeces_DofLoops, sizeof(__pyx_k_csrRowIndeces_DofLoops), 0, 0, 1, 1},
  {&__pyx_n_s_csrRowIndeces_u_u, __pyx_k_csrRowIndeces_u_u, sizeof(__pyx_k_csrRowIndeces_u_u), 0, 0, 1, 1},
  {&__pyx_n_s_dS_ref, __pyx_k_dS_ref, sizeof(__pyx_k_dS_ref), 0, 0, 1, 1},
  {&__pyx_n_s_dV_ref, __pyx_k_dV_ref, sizeof(__pyx_k_dV_ref), 0, 0, 1, 1},
  {&__pyx_n_s_degree_polynomial, __pyx_k_degree_polynomial, sizeof(__pyx_k_degree_polynomial), 0, 0, 1, 1},
  {&__pyx_n_s_dt, __pyx_k_dt, sizeof(__pyx_k_dt), 0, 0, 1, 1},
  {&__pyx_n_s_dt_times_dH_minus_dL, __pyx_k_dt_times_dH_minus_dL, sizeof(__pyx_k_dt_times_dH_minus_dL), 0, 0, 1, 1},
  {&__pyx_n_s_ebqe_bc_flux_u_ext, __pyx_k_ebqe_bc_flux_u_ext, sizeof(__pyx_k_ebqe_bc_flux_u_ext), 0, 0, 1, 1},
  {&__pyx_n_s_ebqe_bc_u_ext, __pyx_k_ebqe_bc_u_ext, sizeof(__pyx_k_ebqe_bc_u_ext), 0, 0, 1, 1},
  {&__pyx_n_s_ebqe_flux, __pyx_k_ebqe_flux, sizeof(__pyx_k_ebqe_flux), 0, 0, 1, 1},
  {&__pyx_n_s_ebqe_phi, __pyx_k_ebqe_phi, sizeof(__pyx_k_ebqe_phi), 0, 0, 1, 1},
  {&__pyx_n_s_ebqe_porosity_ext, __pyx_k_ebqe_porosity_ext, sizeof(__pyx_k_ebqe_porosity_ext), 0, 0, 1, 1},
  {&__pyx_n_s_ebqe_u, __pyx_k_ebqe_u, sizeof(__pyx_k_ebqe_u), 0, 0, 1, 1},
  {&__pyx_n_s_ebqe_velocity_ext, __pyx_k_ebqe_velocity_ext, sizeof(__pyx_k_ebqe_velocity_ext), 0, 0, 1, 1},
  {&__pyx_n_s_edge_based_cfl, __pyx_k_edge_based_cfl, sizeof(__pyx_k_edge_based_cfl), 0, 0, 1, 1},
  {&__pyx_n_s_elementBoundaryElementsArray, __pyx_k_elementBoundaryElementsArray, sizeof(__pyx_k_elementBoundaryElementsArray), 0, 0, 1, 1},
  {&__pyx_n_s_elementBoundaryLocalElementBound, __pyx_k_elementBoundaryLocalElementBound, sizeof(__pyx_k_elementBoundaryLocalElementBound), 0, 0, 1, 1},
  {&__pyx_n_s_elementDiameter, __pyx_k_elementDiameter, sizeof(__pyx_k_elementDiameter), 0, 0, 1, 1},
  {&__pyx_n_s_epsFact, __pyx_k_epsFact, sizeof(__pyx_k_epsFact), 0, 0, 1, 1},
  {&__pyx_n_s_exteriorElementBoundariesArray, __pyx_k_exteriorElementBoundariesArray, sizeof(__pyx_k_exteriorElementBoundariesArray), 0, 0, 1, 1},
  {&__pyx_n_s_getCSRrepresentation, __pyx_k_getCSRrepresentation, sizeof(__pyx_k_getCSRrepresentation), 0, 0, 1, 1},
  {&__pyx_n_s_globalJacobian, __pyx_k_globalJacobian, sizeof(__pyx_k_globalJacobian), 0, 0, 1, 1},
  {&__pyx_n_s_globalResidual, __pyx_k_globalResidual, sizeof(__pyx_k_globalResidual), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_isDOFBoundary_u, __pyx_k_isDOFBoundary_u, sizeof(__pyx_k_isDOFBoundary_u), 0, 0, 1, 1},
  {&__pyx_n_s_isFluxBoundary_u, __pyx_k_isFluxBoundary_u, sizeof(__pyx_k_isFluxBoundary_u), 0, 0, 1, 1},
  {&__pyx_n_s_lag_shockCapturing, __pyx_k_lag_shockCapturing, sizeof(__pyx_k_lag_shockCapturing), 0, 0, 1, 1},
  {&__pyx_n_s_limited_solution, __pyx_k_limited_solution, sizeof(__pyx_k_limited_solution), 0, 0, 1, 1},
  {&__pyx_n_s_low_order_solution, __pyx_k_low_order_solution, sizeof(__pyx_k_low_order_solution), 0, 0, 1, 1},
  {&__pyx_n_s_lumped_mass_matrix, __pyx_k_lumped_mass_matrix, sizeof(__pyx_k_lumped_mass_matrix), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_max_u_bc, __pyx_k_max_u_bc, sizeof(__pyx_k_max_u_bc), 0, 0, 1, 1},
  {&__pyx_n_s_mesh_dof, __pyx_k_mesh_dof, sizeof(__pyx_k_mesh_dof), 0, 0, 1, 1},
  {&__pyx_n_s_mesh_grad_trial_ref, __pyx_k_mesh_grad_trial_ref, sizeof(__pyx_k_mesh_grad_trial_ref), 0, 0, 1, 1},
  {&__pyx_n_s_mesh_grad_trial_trace_ref, __pyx_k_mesh_grad_trial_trace_ref, sizeof(__pyx_k_mesh_grad_trial_trace_ref), 0, 0, 1, 1},
  {&__pyx_n_s_mesh_l2g, __pyx_k_mesh_l2g, sizeof(__pyx_k_mesh_l2g), 0, 0, 1, 1},
  {&__pyx_n_s_mesh_trial_ref, __pyx_k_mesh_trial_ref, sizeof(__pyx_k_mesh_trial_ref), 0, 0, 1, 1},
  {&__pyx_n_s_mesh_trial_trace_ref, __pyx_k_mesh_trial_trace_ref, sizeof(__pyx_k_mesh_trial_trace_ref), 0, 0, 1, 1},
  {&__pyx_n_s_mesh_velocity_dof, __pyx_k_mesh_velocity_dof, sizeof(__pyx_k_mesh_velocity_dof), 0, 0, 1, 1},
  {&__pyx_n_s_min_u_bc, __pyx_k_min_u_bc, sizeof(__pyx_k_min_u_bc), 0, 0, 1, 1},
  {&__pyx_n_s_nDOF_mesh_trial_elementIn, __pyx_k_nDOF_mesh_trial_elementIn, sizeof(__pyx_k_nDOF_mesh_trial_elementIn), 0, 0, 1, 1},
  {&__pyx_n_s_nDOF_test_elementIn, __pyx_k_nDOF_test_elementIn, sizeof(__pyx_k_nDOF_test_elementIn), 0, 0, 1, 1},
  {&__pyx_n_s_nDOF_trial_elementIn, __pyx_k_nDOF_trial_elementIn, sizeof(__pyx_k_nDOF_trial_elementIn), 0, 0, 1, 1},
  {&__pyx_n_s_nElements_global, __pyx_k_nElements_global, sizeof(__pyx_k_nElements_global), 0, 0, 1, 1},
  {&__pyx_n_s_nExteriorElementBoundaries_globa, __pyx_k_nExteriorElementBoundaries_globa, sizeof(__pyx_k_nExteriorElementBoundaries_globa), 0, 0, 1, 1},
  {&__pyx_n_s_nQuadraturePoints_elementBoundar, __pyx_k_nQuadraturePoints_elementBoundar, sizeof(__pyx_k_nQuadraturePoints_elementBoundar), 0, 0, 1, 1},
  {&__pyx_n_s_nQuadraturePoints_elementIn, __pyx_k_nQuadraturePoints_elementIn, sizeof(__pyx_k_nQuadraturePoints_elementIn), 0, 0, 1, 1},
  {&__pyx_n_s_nSpaceIn, __pyx_k_nSpaceIn, sizeof(__pyx_k_nSpaceIn), 0, 0, 1, 1},
  {&__pyx_kp_u_ndarray_is_not_C_contiguous, __pyx_k_ndarray_is_not_C_contiguous, sizeof(__pyx_k_ndarray_is_not_C_contiguous), 0, 1, 0, 0},
  {&__pyx_kp_u_ndarray_is_not_Fortran_contiguou, __pyx_k_ndarray_is_not_Fortran_contiguou, sizeof(__pyx_k_ndarray_is_not_Fortran_contiguou), 0, 1, 0, 0},
  {&__pyx_n_s_normal_ref, __pyx_k_normal_ref, sizeof(__pyx_k_normal_ref), 0, 0, 1, 1},
  {&__pyx_n_s_numDOFs, __pyx_k_numDOFs, sizeof(__pyx_k_numDOFs), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_kp_s_numpy_core_multiarray_failed_to, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 0, 1, 0},
  {&__pyx_kp_s_numpy_core_umath_failed_to_impor, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 0, 1, 0},
  {&__pyx_n_s_offset_u, __pyx_k_offset_u, sizeof(__pyx_k_offset_u), 0, 0, 1, 1},
  {&__pyx_n_s_porosity_dof, __pyx_k_porosity_dof, sizeof(__pyx_k_porosity_dof), 0, 0, 1, 1},
  {&__pyx_n_s_proteus, __pyx_k_proteus, sizeof(__pyx_k_proteus), 0, 0, 1, 1},
  {&__pyx_n_s_proteus_Transport, __pyx_k_proteus_Transport, sizeof(__pyx_k_proteus_Transport), 0, 0, 1, 1},
  {&__pyx_n_s_q_dV, __pyx_k_q_dV, sizeof(__pyx_k_q_dV), 0, 0, 1, 1},
  {&__pyx_n_s_q_dV_last, __pyx_k_q_dV_last, sizeof(__pyx_k_q_dV_last), 0, 0, 1, 1},
  {&__pyx_n_s_q_m, __pyx_k_q_m, sizeof(__pyx_k_q_m), 0, 0, 1, 1},
  {&__pyx_n_s_q_m_betaBDF, __pyx_k_q_m_betaBDF, sizeof(__pyx_k_q_m_betaBDF), 0, 0, 1, 1},
  {&__pyx_n_s_q_numDiff_u, __pyx_k_q_numDiff_u, sizeof(__pyx_k_q_numDiff_u), 0, 0, 1, 1},
  {&__pyx_n_s_q_numDiff_u_last, __pyx_k_q_numDiff_u_last, sizeof(__pyx_k_q_numDiff_u_last), 0, 0, 1, 1},
  {&__pyx_n_s_q_porosity, __pyx_k_q_porosity, sizeof(__pyx_k_q_porosity), 0, 0, 1, 1},
  {&__pyx_n_s_q_u, __pyx_k_q_u, sizeof(__pyx_k_q_u), 0, 0, 1, 1},
  {&__pyx_n_s_quantDOFs, __pyx_k_quantDOFs, sizeof(__pyx_k_quantDOFs), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_sc_alpha, __pyx_k_sc_alpha, sizeof(__pyx_k_sc_alpha), 0, 0, 1, 1},
  {&__pyx_n_s_sc_uref, __pyx_k_sc_uref, sizeof(__pyx_k_sc_uref), 0, 0, 1, 1},
  {&__pyx_n_s_shockCapturingDiffusion, __pyx_k_shockCapturingDiffusion, sizeof(__pyx_k_shockCapturingDiffusion), 0, 0, 1, 1},
  {&__pyx_n_s_solH, __pyx_k_solH, sizeof(__pyx_k_solH), 0, 0, 1, 1},
  {&__pyx_n_s_soln, __pyx_k_soln, sizeof(__pyx_k_soln), 0, 0, 1, 1},
  {&__pyx_n_s_stride_u, __pyx_k_stride_u, sizeof(__pyx_k_stride_u), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_uL, __pyx_k_uL, sizeof(__pyx_k_uL), 0, 0, 1, 1},
  {&__pyx_n_s_uR, __pyx_k_uR, sizeof(__pyx_k_uR), 0, 0, 1, 1},
  {&__pyx_n_s_u_dof, __pyx_k_u_dof, sizeof(__pyx_k_u_dof), 0, 0, 1, 1},
  {&__pyx_n_s_u_dof_old, __pyx_k_u_dof_old, sizeof(__pyx_k_u_dof_old), 0, 0, 1, 1},
  {&__pyx_n_s_u_grad_test_ref, __pyx_k_u_grad_test_ref, sizeof(__pyx_k_u_grad_test_ref), 0, 0, 1, 1},
  {&__pyx_n_s_u_grad_test_trace_ref, __pyx_k_u_grad_test_trace_ref, sizeof(__pyx_k_u_grad_test_trace_ref), 0, 0, 1, 1},
  {&__pyx_n_s_u_grad_trial_ref, __pyx_k_u_grad_trial_ref, sizeof(__pyx_k_u_grad_trial_ref), 0, 0, 1, 1},
  {&__pyx_n_s_u_grad_trial_trace_ref, __pyx_k_u_grad_trial_trace_ref, sizeof(__pyx_k_u_grad_trial_trace_ref), 0, 0, 1, 1},
  {&__pyx_n_s_u_l2g, __pyx_k_u_l2g, sizeof(__pyx_k_u_l2g), 0, 0, 1, 1},
  {&__pyx_n_s_u_test_ref, __pyx_k_u_test_ref, sizeof(__pyx_k_u_test_ref), 0, 0, 1, 1},
  {&__pyx_n_s_u_test_trace_ref, __pyx_k_u_test_trace_ref, sizeof(__pyx_k_u_test_trace_ref), 0, 0, 1, 1},
  {&__pyx_n_s_u_trial_ref, __pyx_k_u_trial_ref, sizeof(__pyx_k_u_trial_ref), 0, 0, 1, 1},
  {&__pyx_n_s_u_trial_trace_ref, __pyx_k_u_trial_trace_ref, sizeof(__pyx_k_u_trial_trace_ref), 0, 0, 1, 1},
  {&__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_k_unknown_dtype_code_in_numpy_pxd, sizeof(__pyx_k_unknown_dtype_code_in_numpy_pxd), 0, 1, 0, 0},
  {&__pyx_n_s_useMetrics, __pyx_k_useMetrics, sizeof(__pyx_k_useMetrics), 0, 0, 1, 1},
  {&__pyx_n_s_velocity, __pyx_k_velocity, sizeof(__pyx_k_velocity), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(1, 218, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(1, 231, __pyx_L1_error)
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(1, 799, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(1, 989, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":218
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_C_contiguous); if (unlikely(!__pyx_tuple_)) __PYX_ERR(1, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":222
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_Fortran_contiguou); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(1, 222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":259
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(1, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":799
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(1, 799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":803
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(1, 803, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":823
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor_2); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(1, 823, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":989
 *         _import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(1, 989, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":995
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(1, 995, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1001
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(1, 1001, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initcTIM(void); /*proto*/
PyMODINIT_FUNC initcTIM(void)
#else
PyMODINIT_FUNC PyInit_cTIM(void); /*proto*/
PyMODINIT_FUNC PyInit_cTIM(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_cTIM(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("cTIM", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_mprans__cTIM) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "mprans.cTIM")) {
      if (unlikely(PyDict_SetItemString(modules, "mprans.cTIM", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_6mprans_4cTIM_cTIM_base) < 0) __PYX_ERR(0, 317, __pyx_L1_error)
  __pyx_type_6mprans_4cTIM_cTIM_base.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "cTIM_base", (PyObject *)&__pyx_type_6mprans_4cTIM_cTIM_base) < 0) __PYX_ERR(0, 317, __pyx_L1_error)
  __pyx_ptype_6mprans_4cTIM_cTIM_base = &__pyx_type_6mprans_4cTIM_cTIM_base;
  /*--- Type import code ---*/
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
  #if CYTHON_COMPILING_IN_PYPY
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) __PYX_ERR(2, 9, __pyx_L1_error)
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType("numpy", "dtype", sizeof(PyArray_Descr), 0); if (unlikely(!__pyx_ptype_5numpy_dtype)) __PYX_ERR(1, 155, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType("numpy", "flatiter", sizeof(PyArrayIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_flatiter)) __PYX_ERR(1, 168, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType("numpy", "broadcast", sizeof(PyArrayMultiIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_broadcast)) __PYX_ERR(1, 172, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType("numpy", "ndarray", sizeof(PyArrayObject), 0); if (unlikely(!__pyx_ptype_5numpy_ndarray)) __PYX_ERR(1, 181, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType("numpy", "ufunc", sizeof(PyUFuncObject), 0); if (unlikely(!__pyx_ptype_5numpy_ufunc)) __PYX_ERR(1, 861, __pyx_L1_error)
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "mprans/cTIM.pyx":1
 * import numpy             # <<<<<<<<<<<<<<
 * cimport numpy
 * from proteus import *
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_numpy, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mprans/cTIM.pyx":3
 * import numpy
 * cimport numpy
 * from proteus import *             # <<<<<<<<<<<<<<
 * from proteus.Transport import *
 * from proteus.Transport import OneLevelTransport
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s__10);
  __Pyx_GIVEREF(__pyx_n_s__10);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s__10);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_proteus, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_import_star(__pyx_t_2) < 0) __PYX_ERR(0, 3, __pyx_L1_error);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "mprans/cTIM.pyx":4
 * cimport numpy
 * from proteus import *
 * from proteus.Transport import *             # <<<<<<<<<<<<<<
 * from proteus.Transport import OneLevelTransport
 * 
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s__10);
  __Pyx_GIVEREF(__pyx_n_s__10);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s__10);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_proteus_Transport, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_import_star(__pyx_t_1) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mprans/cTIM.pyx":5
 * from proteus import *
 * from proteus.Transport import *
 * from proteus.Transport import OneLevelTransport             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "TIM.h" namespace "proteus":
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_OneLevelTransport);
  __Pyx_GIVEREF(__pyx_n_s_OneLevelTransport);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_OneLevelTransport);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_proteus_Transport, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_OneLevelTransport); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_OneLevelTransport, __pyx_t_1) < 0) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "mprans/cTIM.pyx":1
 * import numpy             # <<<<<<<<<<<<<<
 * cimport numpy
 * from proteus import *
 */
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "darwin/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":997
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init mprans.cTIM", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init mprans.cTIM");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* ArgTypeTest */
static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    return (*((__Pyx_PyCFunctionFast)meth)) (self, args, nargs, NULL);
}
#endif  // CYTHON_FAST_PYCCALL

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
#include "frameobject.h"
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = PyThreadState_GET();
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = f->f_localsplus;
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif  // CPython < 3.6
#endif  // CYTHON_FAST_PYCALL

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyObjectCallNoArg */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* RaiseTooManyValuesToUnpack */
    static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
    static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
    static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = PyThreadState_GET();
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(exc_type == PyExc_StopIteration) || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
    static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* ExtTypeTest */
    static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* GetBuiltinName */
    static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyErrFetchRestore */
    #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
    #if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* RaiseNoneIterError */
      static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* SaveResetException */
      #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* PyErrExceptionMatches */
      #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    return PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetException */
      #if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
#endif
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* Import */
        static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
        static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* CodeObjectCache */
        static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
        #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
        #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* Declarations */
        #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
        #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = 1.0 / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = 1.0 / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0, -1);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
        #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
        #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = 1.0 / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = 1.0 / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0, -1);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value) {
    const enum NPY_TYPES neg_one = (enum NPY_TYPES) -1, const_zero = (enum NPY_TYPES) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum NPY_TYPES) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum NPY_TYPES) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NPY_TYPES) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum NPY_TYPES),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
        static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
        static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CStringEquals */
        static CYTHON_INLINE int __Pyx_StrEq(const char *s1, const char *s2) {
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    return *s1 == *s2;
}

/* CheckBinaryVersion */
        static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* ModuleImport */
        #ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

/* TypeImport */
        #ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

/* InitStrings */
        static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
  #else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
  #endif
#else
  res = PyNumber_Int(x);
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
